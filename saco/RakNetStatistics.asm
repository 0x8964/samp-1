; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\RakNetStatistics.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?StatisticsToString@@YAXPAURakNetStatisticsStruct@@PADH@Z ; StatisticsToString
PUBLIC	??_C@_0CK@JHPDEPLM@stats?5is?5a?5NULL?5pointer?5in?5stats@ ; `string'
PUBLIC	??_C@_0EC@LDIFCIKH@Total?5bytes?5sent?3?5?$CFu?6Total?5bytes@ ; `string'
PUBLIC	??_C@_0BGM@MAJEJOFP@Messages?5in?5Send?5buffer?3?5?$CFu?6Mess@ ; `string'
PUBLIC	??_C@_0EPJ@GHCCKPPI@Bytes?5sent?3?7?7?7?7?$CFu?6Messages?5in?5se@ ; `string'
PUBLIC	__real@408f400000000000
PUBLIC	__real@42c80000
PUBLIC	__real@447a0000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_sprintf:PROC
EXTRN	?GetTime@RakNet@@YAIXZ:PROC			; RakNet::GetTime
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0EPJ@GHCCKPPI@Bytes?5sent?3?7?7?7?7?$CFu?6Messages?5in?5se@
CONST	SEGMENT
??_C@_0EPJ@GHCCKPPI@Bytes?5sent?3?7?7?7?7?$CFu?6Messages?5in?5se@ DB 'Byt'
	DB	'es sent:', 09H, 09H, 09H, 09H, '%u', 0aH, 'Messages in send b'
	DB	'uffer:', 09H, 09H, 'SP:%u HP:%u MP:%u LP:%u', 0aH, 'Messages '
	DB	'sent:', 09H, 09H, 09H, 09H, 'SP:%u HP:%u MP:%u LP:%u', 0aH, 'M'
	DB	'essage data bytes sent:', 09H, 09H, 'SP:%u HP:%u MP:%u LP:%u', 0aH
	DB	'Message header bytes sent:', 09H, 09H, 'SP:%u HP:%u MP:%u LP:'
	DB	'%u', 0aH, 'Message total bytes sent:', 09H, 09H, 'SP:%u HP:%u'
	DB	' MP:%u LP:%u', 0aH, 'Bytes received:', 09H, 09H, 09H, 09H, 'T'
	DB	'tl:%u Good:%u Bad:%u', 0aH, 'Packets received:', 09H, 09H, 09H
	DB	'Ttl:%u Good:%u Bad:%u', 0aH, 'Acks received:', 09H, 09H, 09H, 09H
	DB	'Ttl:%u Good:%u Dup:%u', 0aH, 'Messages received:', 09H, 09H, 09H
	DB	'Total:%u Valid:%u Invalid:%u Dup:%u', 0aH, 'Packetloss:', 09H
	DB	09H, 09H, 09H, '%.1f%%', 0aH, 'Packets sent:', 09H, 09H, 09H, 09H
	DB	'%u', 0aH, 'Acks sent:', 09H, 09H, 09H, 09H, '%u', 0aH, 'Acks '
	DB	'in send buffer:', 09H, 09H, 09H, '%u', 0aH, 'Messages waiting'
	DB	' for ack:', 09H, 09H, '%u', 0aH, 'Ack bytes sent:', 09H, 09H, 09H
	DB	09H, '%u', 0aH, 'Sent packets containing only acks:', 09H, '%u'
	DB	0aH, 'Sent packets w/only acks and resends:', 09H, '%u', 0aH, 'R'
	DB	'eliable messages resent:', 09H, 09H, '%u', 0aH, 'Reliable mes'
	DB	'sage data bytes resent:', 09H, '%u', 0aH, 'Reliable message h'
	DB	'eader bytes resent:', 09H, '%u', 0aH, 'Reliable message total'
	DB	' bytes resent:', 09H, '%u', 0aH, 'Number of messages split:', 09H
	DB	09H, '%u', 0aH, 'Number of messages unsplit:', 09H, 09H, '%u', 0aH
	DB	'Message splits performed:', 09H, 09H, '%u', 0aH, 'Additional '
	DB	'encryption bytes:', 09H, 09H, '%u', 0aH, 'Sequenced messages '
	DB	'out of order:', 09H, '%u', 0aH, 'Sequenced messages in order:'
	DB	09H, 09H, '%u', 0aH, 'Ordered messages out of order:', 09H, 09H
	DB	'%u', 0aH, 'Ordered messages in of order:', 09H, 09H, '%u', 0aH
	DB	'Split messages waiting for reassembly:', 09H, '%u', 0aH, 'Mes'
	DB	'sages in internal output queue:', 09H, '%u', 0aH, 'Inst KBits'
	DB	' per second:', 09H, 09H, 09H, '%.1f', 0aH, 'Elapsed time (sec'
	DB	'):', 09H, 09H, 09H, '%.1f', 0aH, 'KBits per second sent:', 09H
	DB	09H, 09H, '%.1f', 0aH, 'KBits per second received:', 09H, 09H, '%'
	DB	'.1f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BGM@MAJEJOFP@Messages?5in?5Send?5buffer?3?5?$CFu?6Mess@
CONST	SEGMENT
??_C@_0BGM@MAJEJOFP@Messages?5in?5Send?5buffer?3?5?$CFu?6Mess@ DB 'Messag'
	DB	'es in Send buffer: %u', 0aH, 'Messages sent: %u', 0aH, 'Bytes'
	DB	' sent: %u', 0aH, 'Acks sent: %u', 0aH, 'Acks in send buffer: '
	DB	'%u', 0aH, 'Messages waiting for ack: %u', 0aH, 'Messages rese'
	DB	'nt: %u', 0aH, 'Bytes resent: %u', 0aH, 'Packetloss: %.1f%%', 0aH
	DB	'Messages received: %u', 0aH, 'Bytes received: %u', 0aH, 'Acks'
	DB	' received: %u', 0aH, 'Duplicate acks received: %u', 0aH, 'Ins'
	DB	't. KBits per second: %.1f', 0aH, 'KBits per second sent:', 09H
	DB	09H, 09H, '%.1f', 0aH, 'KBits per second received:', 09H, 09H, '%'
	DB	'.1f', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@LDIFCIKH@Total?5bytes?5sent?3?5?$CFu?6Total?5bytes@
CONST	SEGMENT
??_C@_0EC@LDIFCIKH@Total?5bytes?5sent?3?5?$CFu?6Total?5bytes@ DB 'Total b'
	DB	'ytes sent: %u', 0aH, 'Total bytes received: %u', 0aH, 'Packet'
	DB	'loss: %.1f%%', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JHPDEPLM@stats?5is?5a?5NULL?5pointer?5in?5stats@
CONST	SEGMENT
??_C@_0CK@JHPDEPLM@stats?5is?5a?5NULL?5pointer?5in?5stats@ DB 'stats is a'
	DB	' NULL pointer in statsToString', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknetstatistics.cpp
;	COMDAT ?StatisticsToString@@YAXPAURakNetStatisticsStruct@@PADH@Z
_TEXT	SEGMENT
tv671 = -336						; size = 8
tv581 = -336						; size = 8
tv523 = -336						; size = 8
tv667 = -328						; size = 4
tv577 = -328						; size = 4
tv519 = -328						; size = 4
tv660 = -324						; size = 8
tv627 = -324						; size = 8
tv570 = -324						; size = 8
tv539 = -324						; size = 8
tv512 = -324						; size = 8
tv656 = -316						; size = 4
tv639 = -316						; size = 4
tv633 = -316						; size = 4
tv624 = -316						; size = 4
tv566 = -316						; size = 4
tv551 = -316						; size = 4
tv545 = -316						; size = 4
tv536 = -316						; size = 4
tv508 = -316						; size = 4
_bpsReceived$1 = -116					; size = 8
_bpsSent$2 = -100					; size = 8
_elapsedTime$3 = -84					; size = 8
_time$4 = -68						; size = 4
_bpsReceived$5 = -56					; size = 8
_bpsSent$6 = -40					; size = 8
_elapsedTime$7 = -24					; size = 8
_time$8 = -8						; size = 4
_s$ = 8							; size = 4
_buffer$ = 12						; size = 4
_verbosityLevel$ = 16					; size = 4
?StatisticsToString@@YAXPAURakNetStatisticsStruct@@PADH@Z PROC ; StatisticsToString, COMDAT

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 26   : 	if ( s == 0 )

	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN5@Statistics

; 27   : 	{
; 28   : 		sprintf( buffer, "stats is a NULL pointer in statsToString\n" );

	push	OFFSET ??_C@_0CK@JHPDEPLM@stats?5is?5a?5NULL?5pointer?5in?5stats@
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 8

; 29   : 		return ;

	jmp	$LN6@Statistics
$LN5@Statistics:

; 30   : 	}
; 31   : 
; 32   : 	if ( verbosityLevel == 0 )

	cmp	DWORD PTR _verbosityLevel$[ebp], 0
	jne	$LN4@Statistics

; 33   : 	{
; 34   : 		// Verbosity level 0
; 35   : 		sprintf( buffer,
; 36   : 			"Total bytes sent: %u\n"
; 37   : 			"Total bytes received: %u\n"
; 38   : 			"Packetloss: %.1f%%\n",
; 39   : 			BITS_TO_BYTES( s->totalBitsSent ),
; 40   : 			BITS_TO_BYTES( s->bitsReceived + s->bitsWithBadCRCReceived ),
; 41   : 			100.0f * ( float ) s->messagesTotalBitsResent / ( float ) s->totalBitsSent );

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR tv508[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv508[ebp]
	mov	edx, DWORD PTR tv508[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv512[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv512[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR tv519[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv519[ebp]
	mov	edx, DWORD PTR tv519[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv523[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv523[ebp]
	divss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+152]
	lea	ecx, DWORD PTR [ecx+eax+7]
	shr	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+120]
	add	eax, 7
	shr	eax, 3
	push	eax
	push	OFFSET ??_C@_0EC@LDIFCIKH@Total?5bytes?5sent?3?5?$CFu?6Total?5bytes@
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 24					; 00000018H
	jmp	$LN1@Statistics
$LN4@Statistics:

; 42   : 	}
; 43   : 
; 44   : 	else if ( verbosityLevel == 1 )

	cmp	DWORD PTR _verbosityLevel$[ebp], 1
	jne	$LN2@Statistics

; 45   : 	{
; 46   : 		RakNetTime time = RakNet::GetTime();

	call	?GetTime@RakNet@@YAIXZ			; RakNet::GetTime
	mov	DWORD PTR _time$8[ebp], eax

; 47   : 		double elapsedTime;
; 48   : 		double bpsSent;
; 49   : 		double bpsReceived;
; 50   : 		elapsedTime = (time-s->connectionStartTime) / 1000.0f;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _time$8[ebp]
	sub	ecx, DWORD PTR [eax+192]
	mov	DWORD PTR tv536[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv536[ebp]
	mov	edx, DWORD PTR tv536[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv539[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv539[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _elapsedTime$7[ebp], xmm0

; 51   : 		bpsSent = (double) s->totalBitsSent / elapsedTime;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR tv545[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv545[ebp]
	mov	edx, DWORD PTR tv545[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, QWORD PTR _elapsedTime$7[ebp]
	movsd	QWORD PTR _bpsSent$6[ebp], xmm0

; 52   : 		bpsReceived= (double) s->bitsReceived / elapsedTime;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR tv551[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv551[ebp]
	mov	edx, DWORD PTR tv551[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, QWORD PTR _elapsedTime$7[ebp]
	movsd	QWORD PTR _bpsReceived$5[ebp], xmm0

; 53   : 		// Verbosity level 1
; 54   : 
; 55   : 		sprintf( buffer,
; 56   : 			"Messages in Send buffer: %u\n"
; 57   : 			"Messages sent: %u\n"
; 58   : 			"Bytes sent: %u\n"
; 59   : 			"Acks sent: %u\n"
; 60   : 			"Acks in send buffer: %u\n"
; 61   : 			"Messages waiting for ack: %u\n"
; 62   : 			"Messages resent: %u\n"
; 63   : 			"Bytes resent: %u\n"
; 64   : 			"Packetloss: %.1f%%\n"
; 65   : 			"Messages received: %u\n"
; 66   : 			"Bytes received: %u\n"
; 67   : 			"Acks received: %u\n"
; 68   : 			"Duplicate acks received: %u\n"
; 69   : 			"Inst. KBits per second: %.1f\n"
; 70   : 			"KBits per second sent:\t\t\t%.1f\n"
; 71   : 			"KBits per second received:\t\t%.1f\n",
; 72   : 			s->messageSendBuffer[ SYSTEM_PRIORITY ] + s->messageSendBuffer[ HIGH_PRIORITY ] + s->messageSendBuffer[ MEDIUM_PRIORITY ] + s->messageSendBuffer[ LOW_PRIORITY ],
; 73   : 			s->messagesSent[ SYSTEM_PRIORITY ] + s->messagesSent[ HIGH_PRIORITY ] + s->messagesSent[ MEDIUM_PRIORITY ] + s->messagesSent[ LOW_PRIORITY ],
; 74   : 			BITS_TO_BYTES( s->totalBitsSent ),
; 75   : 			s->acknowlegementsSent,
; 76   : 			s->acknowlegementsPending,
; 77   : 			s->messagesOnResendQueue,
; 78   : 			s->messageResends,
; 79   : 			BITS_TO_BYTES( s->messagesTotalBitsResent ),
; 80   : 			100.0f * ( float ) s->messagesTotalBitsResent / ( float ) s->totalBitsSent,
; 81   : 			s->duplicateMessagesReceived + s->invalidMessagesReceived + s->messagesReceived,
; 82   : 			BITS_TO_BYTES( s->bitsReceived + s->bitsWithBadCRCReceived ),
; 83   : 			s->acknowlegementsReceived,
; 84   : 			s->duplicateAcknowlegementsReceived,
; 85   : 			s->bitsPerSecond  / 1000.0,
; 86   : 			bpsSent / 1000.0,
; 87   : 			bpsReceived / 1000.0);

	movsd	xmm0, QWORD PTR _bpsReceived$5[ebp]
	divsd	xmm0, QWORD PTR __real@408f400000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsd	xmm0, QWORD PTR _bpsSent$6[ebp]
	divsd	xmm0, QWORD PTR __real@408f400000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _s$[ebp]
	movsd	xmm0, QWORD PTR [eax+184]
	divsd	xmm0, QWORD PTR __real@408f400000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+160]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	lea	eax, DWORD PTR [eax+edx+7]
	shr	eax, 3
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+168]
	mov	ecx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [ecx+164]
	push	edx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR tv566[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv566[ebp]
	mov	ecx, DWORD PTR tv566[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv570[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv570[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR tv577[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv577[ebp]
	mov	ecx, DWORD PTR tv577[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv581[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv581[ebp]
	divss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+92]
	add	eax, 7
	shr	eax, 3
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	add	ecx, 7
	shr	ecx, 3
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+eax+16]
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+ecx+16]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+ecx+16]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+edx+16]
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+edx]
	push	eax
	push	OFFSET ??_C@_0BGM@MAJEJOFP@Messages?5in?5Send?5buffer?3?5?$CFu?6Mess@
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 88					; 00000058H

; 88   : 	}
; 89   : 	else

	jmp	$LN1@Statistics
$LN2@Statistics:

; 90   : 	{
; 91   : 		RakNetTime time = RakNet::GetTime();

	call	?GetTime@RakNet@@YAIXZ			; RakNet::GetTime
	mov	DWORD PTR _time$4[ebp], eax

; 92   : 		double elapsedTime;
; 93   : 		double bpsSent;
; 94   : 		double bpsReceived;
; 95   : 		elapsedTime = (time-s->connectionStartTime) / 1000.0f;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _time$4[ebp]
	sub	ecx, DWORD PTR [eax+192]
	mov	DWORD PTR tv624[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv624[ebp]
	mov	edx, DWORD PTR tv624[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv627[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv627[ebp]
	divss	xmm0, DWORD PTR __real@447a0000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR _elapsedTime$3[ebp], xmm0

; 96   : 		bpsSent = (double) s->totalBitsSent / elapsedTime;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR tv633[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv633[ebp]
	mov	edx, DWORD PTR tv633[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, QWORD PTR _elapsedTime$3[ebp]
	movsd	QWORD PTR _bpsSent$2[ebp], xmm0

; 97   : 		bpsReceived= (double) s->bitsReceived / elapsedTime;

	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR tv639[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv639[ebp]
	mov	edx, DWORD PTR tv639[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	divsd	xmm0, QWORD PTR _elapsedTime$3[ebp]
	movsd	QWORD PTR _bpsReceived$1[ebp], xmm0

; 98   : 
; 99   : 		// Verbosity level 2.
; 100  : 		sprintf( buffer,
; 101  : 			"Bytes sent:\t\t\t\t%u\n"
; 102  : 			"Messages in send buffer:\t\tSP:%u HP:%u MP:%u LP:%u\n"
; 103  : 			"Messages sent:\t\t\t\tSP:%u HP:%u MP:%u LP:%u\n"
; 104  : 			"Message data bytes sent:\t\tSP:%u HP:%u MP:%u LP:%u\n"
; 105  : 			"Message header bytes sent:\t\tSP:%u HP:%u MP:%u LP:%u\n"
; 106  : 			"Message total bytes sent:\t\tSP:%u HP:%u MP:%u LP:%u\n"
; 107  : 			"Bytes received:\t\t\t\tTtl:%u Good:%u Bad:%u\n"
; 108  : 			"Packets received:\t\t\tTtl:%u Good:%u Bad:%u\n"
; 109  : 			"Acks received:\t\t\t\tTtl:%u Good:%u Dup:%u\n"
; 110  : 			"Messages received:\t\t\tTotal:%u Valid:%u Invalid:%u Dup:%u\n"
; 111  : 			"Packetloss:\t\t\t\t%.1f%%\n"
; 112  : 			"Packets sent:\t\t\t\t%u\n"
; 113  : 			"Acks sent:\t\t\t\t%u\n"
; 114  : 			"Acks in send buffer:\t\t\t%u\n"
; 115  : 			"Messages waiting for ack:\t\t%u\n"
; 116  : 			"Ack bytes sent:\t\t\t\t%u\n"
; 117  : 			"Sent packets containing only acks:\t%u\n"
; 118  : 			"Sent packets w/only acks and resends:\t%u\n"
; 119  : 			"Reliable messages resent:\t\t%u\n"
; 120  : 			"Reliable message data bytes resent:\t%u\n"
; 121  : 			"Reliable message header bytes resent:\t%u\n"
; 122  : 			"Reliable message total bytes resent:\t%u\n"
; 123  : 			"Number of messages split:\t\t%u\n"
; 124  : 			"Number of messages unsplit:\t\t%u\n"
; 125  : 			"Message splits performed:\t\t%u\n"
; 126  : 			"Additional encryption bytes:\t\t%u\n"
; 127  : 			"Sequenced messages out of order:\t%u\n"
; 128  : 			"Sequenced messages in order:\t\t%u\n"
; 129  : 			"Ordered messages out of order:\t\t%u\n"
; 130  : 			"Ordered messages in of order:\t\t%u\n"
; 131  : 			"Split messages waiting for reassembly:\t%u\n"
; 132  : 			"Messages in internal output queue:\t%u\n"
; 133  : 			"Inst KBits per second:\t\t\t%.1f\n"
; 134  : 			"Elapsed time (sec):\t\t\t%.1f\n"
; 135  : 			"KBits per second sent:\t\t\t%.1f\n"
; 136  : 			"KBits per second received:\t\t%.1f\n",
; 137  : 			BITS_TO_BYTES( s->totalBitsSent ),
; 138  : 			s->messageSendBuffer[ SYSTEM_PRIORITY ], s->messageSendBuffer[ HIGH_PRIORITY ], s->messageSendBuffer[ MEDIUM_PRIORITY ], s->messageSendBuffer[ LOW_PRIORITY ],
; 139  : 			s->messagesSent[ SYSTEM_PRIORITY ], s->messagesSent[ HIGH_PRIORITY ], s->messagesSent[ MEDIUM_PRIORITY ], s->messagesSent[ LOW_PRIORITY ],
; 140  : 			BITS_TO_BYTES( s->messageDataBitsSent[ SYSTEM_PRIORITY ] ), BITS_TO_BYTES( s->messageDataBitsSent[ HIGH_PRIORITY ] ), BITS_TO_BYTES( s->messageDataBitsSent[ MEDIUM_PRIORITY ] ), BITS_TO_BYTES( s->messageDataBitsSent[ LOW_PRIORITY ] ),
; 141  : 			BITS_TO_BYTES( s->messageTotalBitsSent[ SYSTEM_PRIORITY ] - s->messageDataBitsSent[ SYSTEM_PRIORITY ] ), BITS_TO_BYTES( s->messageTotalBitsSent[ HIGH_PRIORITY ] - s->messageDataBitsSent[ HIGH_PRIORITY ] ), BITS_TO_BYTES( s->messageTotalBitsSent[ MEDIUM_PRIORITY ] - s->messageDataBitsSent[ MEDIUM_PRIORITY ] ), BITS_TO_BYTES( s->messageTotalBitsSent[ LOW_PRIORITY ] - s->messageDataBitsSent[ LOW_PRIORITY ] ),
; 142  : 			BITS_TO_BYTES( s->messageTotalBitsSent[ SYSTEM_PRIORITY ] ), BITS_TO_BYTES( s->messageTotalBitsSent[ HIGH_PRIORITY ] ), BITS_TO_BYTES( s->messageTotalBitsSent[ MEDIUM_PRIORITY ] ), BITS_TO_BYTES( s->messageTotalBitsSent[ LOW_PRIORITY ] ),
; 143  : 			BITS_TO_BYTES( s->bitsReceived + s->bitsWithBadCRCReceived ), BITS_TO_BYTES( s->bitsReceived ), BITS_TO_BYTES( s->bitsWithBadCRCReceived ),
; 144  : 			s->packetsReceived + s->packetsWithBadCRCReceived, s->packetsReceived, s->packetsWithBadCRCReceived,
; 145  : 			s->acknowlegementsReceived + s->duplicateAcknowlegementsReceived, s->acknowlegementsReceived, s->duplicateAcknowlegementsReceived,
; 146  : 			s->messagesReceived + s->invalidMessagesReceived + s->duplicateMessagesReceived, s->messagesReceived, s->invalidMessagesReceived, s->duplicateMessagesReceived,
; 147  : 			100.0f * ( float ) s->messagesTotalBitsResent / ( float ) s->totalBitsSent,
; 148  : 			s->packetsSent,
; 149  : 			s->acknowlegementsSent,
; 150  : 			s->acknowlegementsPending,
; 151  : 			s->messagesOnResendQueue,
; 152  : 			BITS_TO_BYTES( s->acknowlegementBitsSent ),
; 153  : 			s->packetsContainingOnlyAcknowlegements,
; 154  : 			s->packetsContainingOnlyAcknowlegementsAndResends,
; 155  : 			s->messageResends,
; 156  : 			BITS_TO_BYTES( s->messageDataBitsResent ),
; 157  : 			BITS_TO_BYTES( s->messagesTotalBitsResent - s->messageDataBitsResent ),
; 158  : 			BITS_TO_BYTES( s->messagesTotalBitsResent ),
; 159  : 			s->numberOfSplitMessages,
; 160  : 			s->numberOfUnsplitMessages,
; 161  : 			s->totalSplits,
; 162  : 			BITS_TO_BYTES( s->encryptionBitsSent ),
; 163  : 			s->sequencedMessagesOutOfOrder,
; 164  : 			s->sequencedMessagesInOrder,
; 165  : 			s->orderedMessagesOutOfOrder,
; 166  : 			s->orderedMessagesInOrder,
; 167  : 			s->messagesWaitingForReassembly,
; 168  : 			s->internalOutputQueueSize,
; 169  : 			s->bitsPerSecond/1000.0,
; 170  : 			elapsedTime,
; 171  : 			bpsSent / 1000.0,
; 172  : 			bpsReceived / 1000.0
; 173  : 			);

	movsd	xmm0, QWORD PTR _bpsReceived$1[ebp]
	divsd	xmm0, QWORD PTR __real@408f400000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movsd	xmm0, QWORD PTR _bpsSent$2[ebp]
	divsd	xmm0, QWORD PTR __real@408f400000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _elapsedTime$3[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _s$[ebp]
	movsd	xmm0, QWORD PTR [eax+184]
	divsd	xmm0, QWORD PTR __real@408f400000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+124]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	add	edx, 7
	shr	edx, 3
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+100]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, 7
	shr	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	sub	ecx, DWORD PTR [eax+88]
	add	ecx, 7
	shr	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+88]
	add	eax, 7
	shr	eax, 3
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	add	edx, 7
	shr	edx, 3
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	DWORD PTR tv656[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv656[ebp]
	mov	ecx, DWORD PTR tv656[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv660[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv660[ebp]
	mulss	xmm0, DWORD PTR __real@42c80000
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR tv667[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv667[ebp]
	mov	ecx, DWORD PTR tv667[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv671[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv671[ebp]
	divss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+172]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+164]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+168]
	mov	edx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [edx+172]
	push	eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+156]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+160]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+144]
	push	eax
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+152]
	add	eax, 7
	shr	eax, 3
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	add	edx, 7
	shr	edx, 3
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+152]
	lea	ecx, DWORD PTR [ecx+eax+7]
	shr	ecx, 3
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax+48]
	add	edx, 7
	shr	edx, 3
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax+48]
	add	edx, 7
	shr	edx, 3
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax+48]
	add	edx, 7
	shr	edx, 3
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx+48]
	add	eax, 7
	shr	eax, 3
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [eax+edx+48]
	sub	edx, DWORD PTR [esi+ecx+32]
	add	edx, 7
	shr	edx, 3
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+eax+48]
	sub	eax, DWORD PTR [esi+ecx+32]
	add	eax, 7
	shr	eax, 3
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+48]
	sub	ecx, DWORD PTR [esi+edx+32]
	add	ecx, 7
	shr	ecx, 3
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [ecx+eax+48]
	sub	eax, DWORD PTR [esi+edx+32]
	add	eax, 7
	shr	eax, 3
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+edx+32]
	add	ecx, 7
	shr	ecx, 3
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+edx+32]
	add	ecx, 7
	shr	ecx, 3
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+edx+32]
	add	ecx, 7
	shr	ecx, 3
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax+32]
	add	edx, 7
	shr	edx, 3
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	add	edx, 7
	shr	edx, 3
	push	edx
	push	OFFSET ??_C@_0EPJ@GHCCKPPI@Bytes?5sent?3?7?7?7?7?$CFu?6Messages?5in?5se@
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 268				; 0000010cH
$LN1@Statistics:
$LN6@Statistics:

; 174  : 	}
; 175  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StatisticsToString@@YAXPAURakNetStatisticsStruct@@PADH@Z ENDP ; StatisticsToString
_TEXT	ENDS
END
