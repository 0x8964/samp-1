; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\d3d9\common\DXUTMesh.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?D3DRM_XTEMPLATES@@3PAEA			; D3DRM_XTEMPLATES
_DATA	SEGMENT
?D3DRM_XTEMPLATES@@3PAEA DB 078H			; D3DRM_XTEMPLATES
	DB	06fH
	DB	066H
	DB	020H
	DB	030H
	DB	033H
	DB	030H
	DB	032H
	DB	062H
	DB	069H
	DB	06eH
	DB	020H
	DB	030H
	DB	030H
	DB	036H
	DB	034H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	048H
	DB	065H
	DB	061H
	DB	064H
	DB	065H
	DB	072H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	043H
	DB	0abH
	DB	082H
	DB	03dH
	DB	0daH
	DB	062H
	DB	0cfH
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	028H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	06dH
	DB	061H
	DB	06aH
	DB	06fH
	DB	072H
	DB	014H
	DB	00H
	DB	028H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	06dH
	DB	069H
	DB	06eH
	DB	06fH
	DB	072H
	DB	014H
	DB	00H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	06cH
	DB	061H
	DB	067H
	DB	073H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	056H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	05eH
	DB	0abH
	DB	082H
	DB	03dH
	DB	0daH
	DB	062H
	DB	0cfH
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	078H
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	079H
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	07aH
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	06fH
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	032H
	DB	064H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	044H
	DB	03fH
	DB	0f2H
	DB	0f6H
	DB	086H
	DB	076H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	075H
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	076H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	034H
	DB	078H
	DB	034H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	045H
	DB	03fH
	DB	0f2H
	DB	0f6H
	DB	086H
	DB	076H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	034H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	06dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	0eH
	DB	00H
	DB	03H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	052H
	DB	047H
	DB	042H
	DB	041H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0e0H
	DB	044H
	DB	0ffH
	DB	035H
	DB	07cH
	DB	06cH
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	072H
	DB	065H
	DB	064H
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	067H
	DB	072H
	DB	065H
	DB	065H
	DB	06eH
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	06cH
	DB	075H
	DB	065H
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	061H
	DB	06cH
	DB	070H
	DB	068H
	DB	061H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	052H
	DB	047H
	DB	042H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	081H
	DB	06eH
	DB	0e1H
	DB	0d3H
	DB	035H
	DB	078H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	072H
	DB	065H
	DB	064H
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	067H
	DB	072H
	DB	065H
	DB	065H
	DB	06eH
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	06cH
	DB	075H
	DB	065H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	049H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	065H
	DB	064H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	020H
	DB	0b8H
	DB	030H
	DB	016H
	DB	042H
	DB	078H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	069H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	014H
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	052H
	DB	047H
	DB	042H
	DB	041H
	DB	01H
	DB	00H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	069H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	065H
	DB	061H
	DB	06eH
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0a0H
	DB	0a6H
	DB	07dH
	DB	053H
	DB	037H
	DB	0caH
	DB	0d0H
	DB	011H
	DB	094H
	DB	01cH
	DB	00H
	DB	080H
	DB	0c8H
	DB	0cH
	DB	0faH
	DB	07bH
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	074H
	DB	072H
	DB	075H
	DB	065H
	DB	066H
	DB	061H
	DB	06cH
	DB	073H
	DB	065H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	065H
	DB	061H
	DB	06eH
	DB	032H
	DB	064H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	063H
	DB	0aeH
	DB	085H
	DB	048H
	DB	0e8H
	DB	078H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	065H
	DB	061H
	DB	06eH
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	075H
	DB	014H
	DB	00H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	065H
	DB	061H
	DB	06eH
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	076H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	061H
	DB	074H
	DB	065H
	DB	072H
	DB	069H
	DB	061H
	DB	06cH
	DB	057H
	DB	072H
	DB	061H
	DB	070H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	060H
	DB	0aeH
	DB	085H
	DB	048H
	DB	0e8H
	DB	078H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	065H
	DB	061H
	DB	06eH
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	075H
	DB	014H
	DB	00H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	065H
	DB	061H
	DB	06eH
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	076H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	054H
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0e1H
	DB	090H
	DB	027H
	DB	0a4H
	DB	010H
	DB	078H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	031H
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	069H
	DB	06cH
	DB	065H
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	061H
	DB	074H
	DB	065H
	DB	072H
	DB	069H
	DB	061H
	DB	06cH
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	04dH
	DB	0abH
	DB	082H
	DB	03dH
	DB	0daH
	DB	062H
	DB	0cfH
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	052H
	DB	047H
	DB	042H
	DB	041H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	061H
	DB	063H
	DB	065H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	014H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	070H
	DB	06fH
	DB	077H
	DB	065H
	DB	072H
	DB	014H
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	052H
	DB	047H
	DB	042H
	DB	01H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	073H
	DB	070H
	DB	065H
	DB	063H
	DB	075H
	DB	06cH
	DB	061H
	DB	072H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	014H
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	052H
	DB	047H
	DB	042H
	DB	01H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	065H
	DB	06dH
	DB	069H
	DB	073H
	DB	073H
	DB	069H
	DB	076H
	DB	065H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	014H
	DB	00H
	DB	0eH
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	05fH
	DB	0abH
	DB	082H
	DB	03dH
	DB	0daH
	DB	062H
	DB	0cfH
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	012H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	056H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	049H
	DB	06eH
	DB	064H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	061H
	DB	063H
	DB	065H
	DB	056H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	049H
	DB	06eH
	DB	064H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	012H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	056H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	049H
	DB	06eH
	DB	064H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	057H
	DB	072H
	DB	061H
	DB	070H
	DB	073H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0c0H
	DB	0c5H
	DB	01eH
	DB	0edH
	DB	0a8H
	DB	0c0H
	DB	0d0H
	DB	011H
	DB	094H
	DB	01cH
	DB	00H
	DB	080H
	DB	0c8H
	DB	0cH
	DB	0faH
	DB	07bH
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	057H
	DB	072H
	DB	061H
	DB	070H
	DB	056H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	065H
	DB	061H
	DB	06eH
	DB	032H
	DB	064H
	DB	01H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	061H
	DB	063H
	DB	065H
	DB	057H
	DB	072H
	DB	061H
	DB	070H
	DB	056H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	057H
	DB	072H
	DB	061H
	DB	070H
	DB	056H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	054H
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	043H
	DB	06fH
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	040H
	DB	03fH
	DB	0f2H
	DB	0f6H
	DB	086H
	DB	076H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	054H
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	043H
	DB	06fH
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	043H
	DB	06fH
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	032H
	DB	064H
	DB	01H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	043H
	DB	06fH
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	054H
	DB	065H
	DB	078H
	DB	074H
	DB	075H
	DB	072H
	DB	065H
	DB	043H
	DB	06fH
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	04dH
	DB	061H
	DB	074H
	DB	065H
	DB	072H
	DB	069H
	DB	061H
	DB	06cH
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	042H
	DB	03fH
	DB	0f2H
	DB	0f6H
	DB	086H
	DB	076H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	04dH
	DB	061H
	DB	074H
	DB	065H
	DB	072H
	DB	069H
	DB	061H
	DB	06cH
	DB	073H
	DB	014H
	DB	00H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	049H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	065H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	061H
	DB	063H
	DB	065H
	DB	049H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	065H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	049H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	065H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	061H
	DB	074H
	DB	065H
	DB	072H
	DB	069H
	DB	061H
	DB	06cH
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	04eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	073H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	043H
	DB	03fH
	DB	0f2H
	DB	0f6H
	DB	086H
	DB	076H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	04eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	056H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	04eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	04eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	01H
	DB	00H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	061H
	DB	063H
	DB	065H
	DB	04eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	04eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	056H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	073H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	021H
	DB	0b8H
	DB	030H
	DB	016H
	DB	042H
	DB	078H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	056H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	049H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	065H
	DB	064H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	0dH
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	056H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	043H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	044H
	DB	0abH
	DB	082H
	DB	03dH
	DB	0daH
	DB	062H
	DB	0cfH
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	056H
	DB	065H
	DB	072H
	DB	074H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	056H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	056H
	DB	065H
	DB	072H
	DB	074H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	01H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	061H
	DB	063H
	DB	065H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	046H
	DB	061H
	DB	063H
	DB	065H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0eH
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	014H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	054H
	DB	072H
	DB	061H
	DB	06eH
	DB	073H
	DB	066H
	DB	06fH
	DB	072H
	DB	06dH
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	041H
	DB	03fH
	DB	0f2H
	DB	0f6H
	DB	086H
	DB	076H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	034H
	DB	078H
	DB	034H
	DB	01H
	DB	00H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	066H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	04dH
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	046H
	DB	0abH
	DB	082H
	DB	03dH
	DB	0daH
	DB	062H
	DB	0cfH
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	0eH
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	04bH
	DB	065H
	DB	079H
	DB	073H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0a9H
	DB	046H
	DB	0ddH
	DB	010H
	DB	05bH
	DB	077H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	056H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	02aH
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	076H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	056H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	064H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	04bH
	DB	065H
	DB	079H
	DB	073H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	080H
	DB	0b1H
	DB	06H
	DB	0f4H
	DB	03bH
	DB	07bH
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	074H
	DB	069H
	DB	06dH
	DB	065H
	DB	014H
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	04bH
	DB	065H
	DB	079H
	DB	073H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	074H
	DB	066H
	DB	06bH
	DB	065H
	DB	079H
	DB	073H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	06eH
	DB	069H
	DB	06dH
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	04bH
	DB	065H
	DB	079H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0a8H
	DB	046H
	DB	0ddH
	DB	010H
	DB	05bH
	DB	077H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
	DB	06bH
	DB	065H
	DB	079H
	DB	054H
	DB	079H
	DB	070H
	DB	065H
	DB	014H
	DB	00H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	04bH
	DB	065H
	DB	079H
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	01H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	064H
	DB	046H
	DB	06cH
	DB	06fH
	DB	061H
	DB	074H
	DB	04bH
	DB	065H
	DB	079H
	DB	073H
	DB	01H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	06bH
	DB	065H
	DB	079H
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	04bH
	DB	065H
	DB	079H
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	06eH
	DB	069H
	DB	06dH
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	04fH
	DB	070H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	073H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0c0H
	DB	056H
	DB	0bfH
	DB	0e2H
	DB	0fH
	DB	084H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	06fH
	DB	070H
	DB	065H
	DB	06eH
	DB	063H
	DB	06cH
	DB	06fH
	DB	073H
	DB	065H
	DB	064H
	DB	014H
	DB	00H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	071H
	DB	075H
	DB	061H
	DB	06cH
	DB	069H
	DB	074H
	DB	079H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	06eH
	DB	069H
	DB	06dH
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	04fH
	DB	0abH
	DB	082H
	DB	03dH
	DB	0daH
	DB	062H
	DB	0cfH
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	0eH
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	06eH
	DB	069H
	DB	06dH
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	053H
	DB	065H
	DB	074H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	050H
	DB	0abH
	DB	082H
	DB	03dH
	DB	0daH
	DB	062H
	DB	0cfH
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	041H
	DB	06eH
	DB	069H
	DB	06dH
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	049H
	DB	06eH
	DB	06cH
	DB	069H
	DB	06eH
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0a0H
	DB	0eeH
	DB	023H
	DB	03aH
	DB	0b1H
	DB	094H
	DB	0d0H
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	042H
	DB	049H
	DB	04eH
	DB	041H
	DB	052H
	DB	059H
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	072H
	DB	06cH
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0a1H
	DB	0eeH
	DB	023H
	DB	03aH
	DB	0b1H
	DB	094H
	DB	0d0H
	DB	011H
	DB	0abH
	DB	039H
	DB	00H
	DB	020H
	DB	0afH
	DB	071H
	DB	0e4H
	DB	033H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	055H
	DB	072H
	DB	06cH
	DB	073H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	031H
	DB	00H
	DB	01H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	075H
	DB	072H
	DB	06cH
	DB	073H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	06eH
	DB	055H
	DB	072H
	DB	06cH
	DB	073H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	072H
	DB	06fH
	DB	067H
	DB	072H
	DB	065H
	DB	073H
	DB	073H
	DB	069H
	DB	076H
	DB	065H
	DB	04dH
	DB	065H
	DB	073H
	DB	068H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	060H
	DB	0c3H
	DB	063H
	DB	08aH
	DB	07dH
	DB	099H
	DB	0d0H
	DB	011H
	DB	094H
	DB	01cH
	DB	00H
	DB	080H
	DB	0c8H
	DB	0cH
	DB	0faH
	DB	07bH
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	072H
	DB	06cH
	DB	013H
	DB	00H
	DB	01H
	DB	00H
	DB	0aH
	DB	00H
	DB	00H
	DB	00H
	DB	049H
	DB	06eH
	DB	06cH
	DB	069H
	DB	06eH
	DB	065H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	047H
	DB	075H
	DB	069H
	DB	064H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0e0H
	DB	090H
	DB	027H
	DB	0a4H
	DB	010H
	DB	078H
	DB	0cfH
	DB	011H
	DB	08fH
	DB	052H
	DB	00H
	DB	040H
	DB	033H
	DB	035H
	DB	094H
	DB	0a3H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	031H
	DB	014H
	DB	00H
	DB	028H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	032H
	DB	014H
	DB	00H
	DB	028H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	033H
	DB	014H
	DB	00H
	DB	034H
	DB	00H
	DB	02dH
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	034H
	DB	0eH
	DB	00H
	DB	03H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	053H
	DB	074H
	DB	072H
	DB	069H
	DB	06eH
	DB	067H
	DB	050H
	DB	072H
	DB	06fH
	DB	070H
	DB	065H
	DB	072H
	DB	074H
	DB	079H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0e0H
	DB	021H
	DB	0fH
	DB	07fH
	DB	0e1H
	DB	0bfH
	DB	0d1H
	DB	011H
	DB	082H
	DB	0c0H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	069H
	DB	072H
	DB	071H
	DB	031H
	DB	00H
	DB	01H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	06bH
	DB	065H
	DB	079H
	DB	014H
	DB	00H
	DB	031H
	DB	00H
	DB	01H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	076H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	072H
	DB	06fH
	DB	070H
	DB	065H
	DB	072H
	DB	074H
	DB	079H
	DB	042H
	DB	061H
	DB	067H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0e1H
	DB	021H
	DB	0fH
	DB	07fH
	DB	0e1H
	DB	0bfH
	DB	0d1H
	DB	011H
	DB	082H
	DB	0c0H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	069H
	DB	072H
	DB	071H
	DB	0eH
	DB	00H
	DB	01H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	053H
	DB	074H
	DB	072H
	DB	069H
	DB	06eH
	DB	067H
	DB	050H
	DB	072H
	DB	06fH
	DB	070H
	DB	065H
	DB	072H
	DB	074H
	DB	079H
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0eH
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	078H
	DB	074H
	DB	065H
	DB	072H
	DB	06eH
	DB	061H
	DB	06cH
	DB	056H
	DB	069H
	DB	073H
	DB	075H
	DB	061H
	DB	06cH
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0a0H
	DB	06aH
	DB	011H
	DB	098H
	DB	0baH
	DB	0bdH
	DB	0d1H
	DB	011H
	DB	082H
	DB	0c0H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	069H
	DB	072H
	DB	071H
	DB	01H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	047H
	DB	075H
	DB	069H
	DB	064H
	DB	01H
	DB	00H
	DB	012H
	DB	00H
	DB	00H
	DB	00H
	DB	067H
	DB	075H
	DB	069H
	DB	064H
	DB	045H
	DB	078H
	DB	074H
	DB	065H
	DB	072H
	DB	06eH
	DB	061H
	DB	06cH
	DB	056H
	DB	069H
	DB	073H
	DB	075H
	DB	061H
	DB	06cH
	DB	014H
	DB	00H
	DB	0eH
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	012H
	DB	00H
	DB	0fH
	DB	00H
	DB	0bH
	DB	00H
	DB	01fH
	DB	00H
	DB	01H
	DB	00H
	DB	0bH
	DB	00H
	DB	00H
	DB	00H
	DB	052H
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	048H
	DB	061H
	DB	06eH
	DB	064H
	DB	065H
	DB	064H
	DB	0aH
	DB	00H
	DB	05H
	DB	00H
	DB	0a0H
	DB	05eH
	DB	05dH
	DB	07fH
	DB	03aH
	DB	0d5H
	DB	0d1H
	DB	011H
	DB	082H
	DB	0c0H
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	069H
	DB	072H
	DB	071H
	DB	029H
	DB	00H
	DB	01H
	DB	00H
	DB	0cH
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	052H
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	048H
	DB	061H
	DB	06eH
	DB	064H
	DB	065H
	DB	064H
	DB	014H
	DB	00H
	DB	0bH
	DB	00H
_DATA	ENDS
PUBLIC	?strchr@@YAPADPADH@Z				; strchr
PUBLIC	_IsEqualGUID
PUBLIC	_==
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?StringCopyWorkerA@@YGJPADIPBD@Z		; StringCopyWorkerA
PUBLIC	?StringCatWorkerA@@YGJPADIPBD@Z			; StringCatWorkerA
PUBLIC	?StringLengthWorkerA@@YGJPBDIPAI@Z		; StringLengthWorkerA
PUBLIC	?StringCchCopyA@@YGJPADIPBD@Z			; StringCchCopyA
PUBLIC	?StringCchCatA@@YGJPADIPBD@Z			; StringCchCatA
PUBLIC	?Render@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@_N1@Z ; CDXUTMesh::Render
PUBLIC	?Render@CDXUTMesh@@QAEJPAUID3DXEffect@@PBD11111_N2@Z ; CDXUTMesh::Render
PUBLIC	?SetFVF@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@K@Z	; CDXUTMesh::SetFVF
PUBLIC	?SetVertexDecl@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PBU_D3DVERTEXELEMENT9@@@Z ; CDXUTMesh::SetVertexDecl
PUBLIC	?RestoreDeviceObjects@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTMesh::RestoreDeviceObjects
PUBLIC	?InvalidateDeviceObjects@CDXUTMesh@@QAEJXZ	; CDXUTMesh::InvalidateDeviceObjects
PUBLIC	?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PBD@Z ; CDXUTMesh::Create
PUBLIC	?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@@Z ; CDXUTMesh::Create
PUBLIC	?CreateMaterials@CDXUTMesh@@QAEJPBDPAUIDirect3DDevice9@@PAUID3DXBuffer@@2@Z ; CDXUTMesh::CreateMaterials
PUBLIC	?Destroy@CDXUTMesh@@QAEJXZ			; CDXUTMesh::Destroy
PUBLIC	??0CDXUTMesh@@QAE@PBD@Z				; CDXUTMesh::CDXUTMesh
PUBLIC	??1CDXUTMesh@@UAE@XZ				; CDXUTMesh::~CDXUTMesh
PUBLIC	??_GCDXUTMesh@@UAEPAXI@Z			; CDXUTMesh::`scalar deleting destructor'
PUBLIC	?SetMatrix@CDXUTMeshFrame@@QAEXPAUD3DXMATRIX@@@Z ; CDXUTMeshFrame::SetMatrix
PUBLIC	?FindMesh@CDXUTMeshFrame@@QAEPAVCDXUTMesh@@PBD@Z ; CDXUTMeshFrame::FindMesh
PUBLIC	?FindFrame@CDXUTMeshFrame@@QAEPAV1@PBD@Z	; CDXUTMeshFrame::FindFrame
PUBLIC	?EnumMeshes@CDXUTMeshFrame@@QAE_NP6A_NPAVCDXUTMesh@@PAX@Z1@Z ; CDXUTMeshFrame::EnumMeshes
PUBLIC	?Destroy@CDXUTMeshFrame@@QAEJXZ			; CDXUTMeshFrame::Destroy
PUBLIC	?RestoreDeviceObjects@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTMeshFrame::RestoreDeviceObjects
PUBLIC	?InvalidateDeviceObjects@CDXUTMeshFrame@@QAEJXZ	; CDXUTMeshFrame::InvalidateDeviceObjects
PUBLIC	?Render@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@_N1PAUD3DXMATRIX@@@Z ; CDXUTMeshFrame::Render
PUBLIC	??0CDXUTMeshFrame@@QAE@PBD@Z			; CDXUTMeshFrame::CDXUTMeshFrame
PUBLIC	??1CDXUTMeshFrame@@UAE@XZ			; CDXUTMeshFrame::~CDXUTMeshFrame
PUBLIC	??_GCDXUTMeshFrame@@UAEPAXI@Z			; CDXUTMeshFrame::`scalar deleting destructor'
PUBLIC	?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z ; CDXUTMeshFile::LoadMesh
PUBLIC	?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z ; CDXUTMeshFile::LoadFrame
PUBLIC	?Create@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PBD@Z ; CDXUTMeshFile::Create
PUBLIC	?CreateFromResource@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PBD1@Z ; CDXUTMeshFile::CreateFromResource
PUBLIC	?Render@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PAUD3DXMATRIX@@@Z ; CDXUTMeshFile::Render
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CDXUTMesh@@6B@				; CDXUTMesh::`vftable'
PUBLIC	??_7CDXUTMeshFrame@@6B@				; CDXUTMeshFrame::`vftable'
PUBLIC	??_R4CDXUTMesh@@6B@				; CDXUTMesh::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTMesh@@@8				; CDXUTMesh `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTMesh@@8				; CDXUTMesh::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTMesh@@8				; CDXUTMesh::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTMesh@@8			; CDXUTMesh::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTMeshFrame@@6B@			; CDXUTMeshFrame::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTMeshFrame@@@8			; CDXUTMeshFrame `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTMeshFrame@@8				; CDXUTMeshFrame::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTMeshFrame@@8				; CDXUTMeshFrame::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTMeshFrame@@8			; CDXUTMeshFrame::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcmp:PROC
EXTRN	_strcpy:PROC
EXTRN	_strchr:PROC
EXTRN	__imp__lstrcmpiA@8:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXFileCreate@4:PROC
EXTRN	_D3DXComputeNormals@8:PROC
EXTRN	_D3DXLoadMeshFromXA@32:PROC
EXTRN	_D3DXLoadMeshFromXof@32:PROC
EXTRN	_D3DXGetDeclLength@4:PROC
EXTRN	_D3DXGetImageInfoFromFileA@8:PROC
EXTRN	_D3DXCreateTextureFromFileA@12:PROC
EXTRN	_D3DXCreateCubeTextureFromFileA@12:PROC
EXTRN	_D3DXCreateVolumeTextureFromFileA@12:PROC
EXTRN	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z:PROC	; DXUTFindDXSDKMediaFileCch
EXTRN	??_ECDXUTMesh@@UAEPAXI@Z:PROC			; CDXUTMesh::`vector deleting destructor'
EXTRN	??_ECDXUTMeshFrame@@UAEPAXI@Z:PROC		; CDXUTMeshFrame::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	_IID_IDirect3DBaseTexture9:BYTE
EXTRN	_TID_D3DRMMesh:BYTE
EXTRN	_TID_D3DRMFrame:BYTE
EXTRN	_TID_D3DRMFrameTransformMatrix:BYTE
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTMeshFrame@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTMeshFrame@@8 DD FLAT:??_R0?AVCDXUTMeshFrame@@@8 ; CDXUTMeshFrame::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTMeshFrame@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTMeshFrame@@8
rdata$r	SEGMENT
??_R2CDXUTMeshFrame@@8 DD FLAT:??_R1A@?0A@EA@CDXUTMeshFrame@@8 ; CDXUTMeshFrame::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDXUTMeshFrame@@8
rdata$r	SEGMENT
??_R3CDXUTMeshFrame@@8 DD 00H				; CDXUTMeshFrame::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDXUTMeshFrame@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTMeshFrame@@@8
data$r	SEGMENT
??_R0?AVCDXUTMeshFrame@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTMeshFrame `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTMeshFrame@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTMeshFrame@@6B@
rdata$r	SEGMENT
??_R4CDXUTMeshFrame@@6B@ DD 00H				; CDXUTMeshFrame::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTMeshFrame@@@8
	DD	FLAT:??_R3CDXUTMeshFrame@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTMesh@@8 DD FLAT:??_R0?AVCDXUTMesh@@@8 ; CDXUTMesh::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTMesh@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTMesh@@8
rdata$r	SEGMENT
??_R2CDXUTMesh@@8 DD FLAT:??_R1A@?0A@EA@CDXUTMesh@@8	; CDXUTMesh::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDXUTMesh@@8
rdata$r	SEGMENT
??_R3CDXUTMesh@@8 DD 00H				; CDXUTMesh::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDXUTMesh@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTMesh@@@8
data$r	SEGMENT
??_R0?AVCDXUTMesh@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTMesh `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTMesh@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTMesh@@6B@
rdata$r	SEGMENT
??_R4CDXUTMesh@@6B@ DD 00H				; CDXUTMesh::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTMesh@@@8
	DD	FLAT:??_R3CDXUTMesh@@8
rdata$r	ENDS
;	COMDAT ??_7CDXUTMeshFrame@@6B@
CONST	SEGMENT
??_7CDXUTMeshFrame@@6B@ DD FLAT:??_R4CDXUTMeshFrame@@6B@ ; CDXUTMeshFrame::`vftable'
	DD	FLAT:??_ECDXUTMeshFrame@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CDXUTMesh@@6B@
CONST	SEGMENT
??_7CDXUTMesh@@6B@ DD FLAT:??_R4CDXUTMesh@@6B@		; CDXUTMesh::`vftable'
	DD	FLAT:??_ECDXUTMesh@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z$0
__ehfuncinfo$?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z$0
__ehfuncinfo$?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Render@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PAUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_matWorld$ = -156					; size = 64
_matSavedWorld$ = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pmatWorldMatrix$ = 12					; size = 4
?Render@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PAUD3DXMATRIX@@@Z PROC ; CDXUTMeshFile::Render, COMDAT
; _this$ = ecx

; 1016 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1017 : 
; 1018 :     // For pure devices, specify the world transform. If the world transform is not
; 1019 :     // specified on pure devices, this function will fail.
; 1020 : 
; 1021 :     // Set up the world transformation
; 1022 :     D3DXMATRIX matSavedWorld, matWorld;

	lea	ecx, DWORD PTR _matSavedWorld$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	lea	ecx, DWORD PTR _matWorld$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1023 : 
; 1024 :     if ( NULL == pmatWorldMatrix )

	cmp	DWORD PTR _pmatWorldMatrix$[ebp], 0
	jne	SHORT $LN4@Render

; 1025 :         pd3dDevice->GetTransform( D3DTS_WORLD, &matSavedWorld );

	mov	esi, esp
	lea	eax, DWORD PTR _matSavedWorld$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+180]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1026 :     else

	jmp	SHORT $LN3@Render
$LN4@Render:

; 1027 :         matSavedWorld = *pmatWorldMatrix;

	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _pmatWorldMatrix$[ebp]
	lea	edi, DWORD PTR _matSavedWorld$[ebp]
	rep movsd
$LN3@Render:

; 1028 : 
; 1029 :     D3DXMatrixMultiply( &matWorld, &matSavedWorld, &m_mat );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 516				; 00000204H
	push	eax
	lea	ecx, DWORD PTR _matSavedWorld$[ebp]
	push	ecx
	lea	edx, DWORD PTR _matWorld$[ebp]
	push	edx
	call	_D3DXMatrixMultiply@12

; 1030 :     pd3dDevice->SetTransform( D3DTS_WORLD, &matWorld );

	mov	esi, esp
	lea	eax, DWORD PTR _matWorld$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+176]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1031 : 
; 1032 :     // Render opaque subsets in the meshes
; 1033 :     if( m_pChild )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN2@Render

; 1034 :         m_pChild->Render( pd3dDevice, TRUE, FALSE, &matWorld );

	lea	eax, DWORD PTR _matWorld$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+588]
	call	?Render@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@_N1PAUD3DXMATRIX@@@Z ; CDXUTMeshFrame::Render
$LN2@Render:

; 1035 : 
; 1036 :     // Enable alpha blending
; 1037 :     pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1038 :     pd3dDevice->SetRenderState( D3DRS_SRCBLEND,  D3DBLEND_SRCALPHA );

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1039 :     pd3dDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA );

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1040 : 
; 1041 :     // Render alpha subsets in the meshes
; 1042 :     if( m_pChild )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN1@Render

; 1043 :         m_pChild->Render( pd3dDevice, FALSE, TRUE, &matWorld );

	lea	eax, DWORD PTR _matWorld$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+588]
	call	?Render@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@_N1PAUD3DXMATRIX@@@Z ; CDXUTMeshFrame::Render
$LN1@Render:

; 1044 : 
; 1045 :     // Restore state
; 1046 :     pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );

	mov	esi, esp
	push	0
	push	27					; 0000001bH
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1047 :     pd3dDevice->SetTransform( D3DTS_WORLD, &matSavedWorld );

	mov	esi, esp
	lea	eax, DWORD PTR _matSavedWorld$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+176]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1048 : 
; 1049 :     return S_OK;

	xor	eax, eax

; 1050 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN10@Render:
	DD	2
	DD	$LN9@Render
$LN9@Render:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN7@Render
	DD	-156					; ffffff64H
	DD	64					; 00000040H
	DD	$LN8@Render
$LN8@Render:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN7@Render:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	97					; 00000061H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
?Render@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PAUD3DXMATRIX@@@Z ENDP ; CDXUTMeshFile::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?CreateFromResource@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PBD1@Z
_TEXT	SEGMENT
$T1 = -856						; size = 4
$T2 = -844						; size = 4
_iChild$3 = -640					; size = 4
_dxlr$ = -628						; size = 12
_strResourceAnsi$ = -608				; size = 260
_strTypeAnsi$ = -340					; size = 260
_cChildren$ = -72					; size = 4
_hr$ = -60						; size = 4
_pFileData$ = -48					; size = 4
_pEnumObj$ = -36					; size = 4
_pDXFile$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_strResource$ = 12					; size = 4
_strType$ = 16						; size = 4
?CreateFromResource@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PBD1@Z PROC ; CDXUTMeshFile::CreateFromResource, COMDAT
; _this$ = ecx

; 872  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 860				; 0000035cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-860]
	mov	ecx, 215				; 000000d7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 873  :     LPD3DXFILE           pDXFile   = NULL;

	mov	DWORD PTR _pDXFile$[ebp], 0

; 874  :     LPD3DXFILEENUMOBJECT pEnumObj  = NULL;

	mov	DWORD PTR _pEnumObj$[ebp], 0

; 875  :     LPD3DXFILEDATA       pFileData = NULL;

	mov	DWORD PTR _pFileData$[ebp], 0

; 876  :     HRESULT hr;
; 877  :     SIZE_T cChildren;
; 878  : 
; 879  :     // Create a x file object
; 880  :     if( FAILED( hr = D3DXFileCreate( &pDXFile ) ) )

	lea	eax, DWORD PTR _pDXFile$[ebp]
	push	eax
	call	_D3DXFileCreate@4
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN16@CreateFrom

; 881  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@CreateFrom
$LN16@CreateFrom:

; 882  : 
; 883  :     // Register templates for d3drm and patch extensions.
; 884  :     if( FAILED( hr = pDXFile->RegisterTemplates( (void*)D3DRM_XTEMPLATES,
; 885  :                                                  D3DRM_XTEMPLATE_BYTES ) ) )

	mov	esi, esp
	push	3278					; 00000cceH
	push	OFFSET ?D3DRM_XTEMPLATES@@3PAEA		; D3DRM_XTEMPLATES
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@CreateFrom

; 886  :     {
; 887  :         SAFE_RELEASE( pDXFile );

	cmp	DWORD PTR _pDXFile$[ebp], 0
	je	SHORT $LN14@CreateFrom
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDXFile$[ebp], 0
$LN14@CreateFrom:

; 888  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@CreateFrom
$LN15@CreateFrom:

; 889  :     }
; 890  :     
; 891  :     CHAR strTypeAnsi[MAX_PATH];
; 892  :     CHAR strResourceAnsi[MAX_PATH];
; 893  : 
; 894  :     strcpy(strTypeAnsi, strType);

	mov	eax, DWORD PTR _strType$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTypeAnsi$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 895  :     strTypeAnsi[MAX_PATH-1] = 0;

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 260			; 00000104H
	jae	SHORT $LN19@CreateFrom
	jmp	SHORT $LN20@CreateFrom
$LN19@CreateFrom:
	call	___report_rangecheckfailure
$LN20@CreateFrom:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strTypeAnsi$[ebp+edx], 0

; 896  : 
; 897  :     strcpy(strResourceAnsi, strResource);

	mov	eax, DWORD PTR _strResource$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strResourceAnsi$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 898  :     strResourceAnsi[MAX_PATH-1] = 0;

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 260			; 00000104H
	jae	SHORT $LN21@CreateFrom
	jmp	SHORT $LN22@CreateFrom
$LN21@CreateFrom:
	call	___report_rangecheckfailure
$LN22@CreateFrom:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _strResourceAnsi$[ebp+edx], 0

; 899  : 
; 900  :     D3DXF_FILELOADRESOURCE dxlr;
; 901  :     dxlr.hModule = NULL;

	mov	DWORD PTR _dxlr$[ebp], 0

; 902  :     dxlr.lpName = strResourceAnsi;

	lea	eax, DWORD PTR _strResourceAnsi$[ebp]
	mov	DWORD PTR _dxlr$[ebp+4], eax

; 903  :     dxlr.lpType = strTypeAnsi;

	lea	eax, DWORD PTR _strTypeAnsi$[ebp]
	mov	DWORD PTR _dxlr$[ebp+8], eax

; 904  : 
; 905  :     // Create enum object
; 906  :     hr = pDXFile->CreateEnumObject( (void*)&dxlr, D3DXF_FILELOAD_FROMRESOURCE, 
; 907  :                                     &pEnumObj );

	mov	esi, esp
	lea	eax, DWORD PTR _pEnumObj$[ebp]
	push	eax
	push	2
	lea	ecx, DWORD PTR _dxlr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDXFile$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDXFile$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 908  :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN13@CreateFrom

; 909  :     {
; 910  :         SAFE_RELEASE( pDXFile );

	cmp	DWORD PTR _pDXFile$[ebp], 0
	je	SHORT $LN12@CreateFrom
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDXFile$[ebp], 0
$LN12@CreateFrom:

; 911  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN18@CreateFrom
$LN13@CreateFrom:

; 912  :     }
; 913  : 
; 914  :     // Enumerate top level objects (which are always frames)
; 915  :     pEnumObj->GetChildren(&cChildren);

	mov	esi, esp
	lea	eax, DWORD PTR _cChildren$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEnumObj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pEnumObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 916  :     for (UINT iChild = 0; iChild < cChildren; iChild++)

	mov	DWORD PTR _iChild$3[ebp], 0
	jmp	SHORT $LN11@CreateFrom
$LN10@CreateFrom:
	mov	eax, DWORD PTR _iChild$3[ebp]
	add	eax, 1
	mov	DWORD PTR _iChild$3[ebp], eax
$LN11@CreateFrom:
	mov	eax, DWORD PTR _iChild$3[ebp]
	cmp	eax, DWORD PTR _cChildren$[ebp]
	jae	$LN9@CreateFrom

; 917  :     {
; 918  :         hr = pEnumObj->GetChild(iChild, &pFileData);

	mov	esi, esp
	lea	eax, DWORD PTR _pFileData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iChild$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEnumObj$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEnumObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 919  :         if (FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@CreateFrom

; 920  :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN18@CreateFrom
$LN8@CreateFrom:

; 921  : 
; 922  :         hr = LoadFrame( pd3dDevice, pFileData, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFileData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z ; CDXUTMeshFile::LoadFrame
	mov	DWORD PTR _hr$[ebp], eax

; 923  :         SAFE_RELEASE( pFileData );

	cmp	DWORD PTR _pFileData$[ebp], 0
	je	SHORT $LN7@CreateFrom
	mov	eax, DWORD PTR _pFileData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pFileData$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pFileData$[ebp], 0
$LN7@CreateFrom:

; 924  :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@CreateFrom

; 925  :         {
; 926  :             SAFE_RELEASE( pEnumObj );

	cmp	DWORD PTR _pEnumObj$[ebp], 0
	je	SHORT $LN5@CreateFrom
	mov	eax, DWORD PTR _pEnumObj$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEnumObj$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pEnumObj$[ebp], 0
$LN5@CreateFrom:

; 927  :             SAFE_RELEASE( pDXFile );

	cmp	DWORD PTR _pDXFile$[ebp], 0
	je	SHORT $LN4@CreateFrom
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDXFile$[ebp], 0
$LN4@CreateFrom:

; 928  :             return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN18@CreateFrom
$LN6@CreateFrom:

; 929  :         }
; 930  :     }

	jmp	$LN10@CreateFrom
$LN9@CreateFrom:

; 931  : 
; 932  :     SAFE_RELEASE( pFileData );

	cmp	DWORD PTR _pFileData$[ebp], 0
	je	SHORT $LN3@CreateFrom
	mov	eax, DWORD PTR _pFileData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pFileData$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pFileData$[ebp], 0
$LN3@CreateFrom:

; 933  :     SAFE_RELEASE( pEnumObj );

	cmp	DWORD PTR _pEnumObj$[ebp], 0
	je	SHORT $LN2@CreateFrom
	mov	eax, DWORD PTR _pEnumObj$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEnumObj$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pEnumObj$[ebp], 0
$LN2@CreateFrom:

; 934  :     SAFE_RELEASE( pDXFile );

	cmp	DWORD PTR _pDXFile$[ebp], 0
	je	SHORT $LN1@CreateFrom
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDXFile$[ebp], 0
$LN1@CreateFrom:

; 935  : 
; 936  :     return S_OK;

	xor	eax, eax
$LN18@CreateFrom:

; 937  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@CreateFrom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 860				; 0000035cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN31@CreateFrom:
	DD	7
	DD	$LN30@CreateFrom
$LN30@CreateFrom:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN23@CreateFrom
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN24@CreateFrom
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN25@CreateFrom
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN26@CreateFrom
	DD	-340					; fffffeacH
	DD	260					; 00000104H
	DD	$LN27@CreateFrom
	DD	-608					; fffffda0H
	DD	260					; 00000104H
	DD	$LN28@CreateFrom
	DD	-628					; fffffd8cH
	DD	12					; 0000000cH
	DD	$LN29@CreateFrom
$LN29@CreateFrom:
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	0
$LN28@CreateFrom:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	0
$LN27@CreateFrom:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	0
$LN26@CreateFrom:
	DB	99					; 00000063H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN25@CreateFrom:
	DB	112					; 00000070H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN24@CreateFrom:
	DB	112					; 00000070H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	0
$LN23@CreateFrom:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	88					; 00000058H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?CreateFromResource@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PBD1@Z ENDP ; CDXUTMeshFile::CreateFromResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Create@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PBD@Z
_TEXT	SEGMENT
$T1 = -824						; size = 4
_iChild$2 = -620					; size = 4
_strPathANSI$ = -608					; size = 260
_strPath$ = -340					; size = 260
_cChildren$ = -72					; size = 4
_hr$ = -60						; size = 4
_pFileData$ = -48					; size = 4
_pEnumObj$ = -36					; size = 4
_pDXFile$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_strFilename$ = 12					; size = 4
?Create@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PBD@Z PROC ; CDXUTMeshFile::Create, COMDAT
; _this$ = ecx

; 947  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 828				; 0000033cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-828]
	mov	ecx, 207				; 000000cfH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 948  :     LPD3DXFILE           pDXFile   = NULL;

	mov	DWORD PTR _pDXFile$[ebp], 0

; 949  :     LPD3DXFILEENUMOBJECT pEnumObj  = NULL;

	mov	DWORD PTR _pEnumObj$[ebp], 0

; 950  :     LPD3DXFILEDATA       pFileData = NULL;

	mov	DWORD PTR _pFileData$[ebp], 0

; 951  :     HRESULT hr;
; 952  :     SIZE_T cChildren;
; 953  : 
; 954  :     // Create a x file object
; 955  :     if( FAILED( hr = D3DXFileCreate( &pDXFile ) ) )

	lea	eax, DWORD PTR _pDXFile$[ebp]
	push	eax
	call	_D3DXFileCreate@4
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN16@Create

; 956  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@Create
$LN16@Create:

; 957  : 
; 958  :     // Register templates for d3drm and patch extensions.
; 959  :     if( FAILED( hr = pDXFile->RegisterTemplates( (void*)D3DRM_XTEMPLATES,
; 960  :                                                  D3DRM_XTEMPLATE_BYTES ) ) )

	mov	esi, esp
	push	3278					; 00000cceH
	push	OFFSET ?D3DRM_XTEMPLATES@@3PAEA		; D3DRM_XTEMPLATES
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@Create

; 961  :     {
; 962  :         SAFE_RELEASE( pDXFile );

	cmp	DWORD PTR _pDXFile$[ebp], 0
	je	SHORT $LN14@Create
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDXFile$[ebp], 0
$LN14@Create:

; 963  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@Create
$LN15@Create:

; 964  :     }
; 965  : 
; 966  :     // Find the path to the file, and convert it to ANSI (for the D3DXOF API)
; 967  :     TCHAR strPath[MAX_PATH];
; 968  :     CHAR  strPathANSI[MAX_PATH];
; 969  :     DXUTFindDXSDKMediaFileCch( strPath, sizeof(strPath) / sizeof(TCHAR), strFilename );

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z ; DXUTFindDXSDKMediaFileCch
	add	esp, 12					; 0000000cH

; 970  :     
; 971  : 	strcpy(strPathANSI,strPath);

	lea	eax, DWORD PTR _strPath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strPathANSI$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 972  :     strPathANSI[MAX_PATH-1] = 0;

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 260			; 00000104H
	jae	SHORT $LN19@Create
	jmp	SHORT $LN20@Create
$LN19@Create:
	call	___report_rangecheckfailure
$LN20@Create:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strPathANSI$[ebp+edx], 0

; 973  :     
; 974  :     // Create enum object
; 975  :     hr = pDXFile->CreateEnumObject( (void*)strPathANSI, D3DXF_FILELOAD_FROMFILE, 
; 976  :                                     &pEnumObj );

	mov	esi, esp
	lea	eax, DWORD PTR _pEnumObj$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _strPathANSI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDXFile$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pDXFile$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 977  :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN13@Create

; 978  :     {
; 979  :         SAFE_RELEASE( pDXFile );

	cmp	DWORD PTR _pDXFile$[ebp], 0
	je	SHORT $LN12@Create
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDXFile$[ebp], 0
$LN12@Create:

; 980  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN18@Create
$LN13@Create:

; 981  :     }
; 982  : 
; 983  :     // Enumerate top level objects (which are always frames)
; 984  :     pEnumObj->GetChildren(&cChildren);

	mov	esi, esp
	lea	eax, DWORD PTR _cChildren$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEnumObj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pEnumObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 985  :     for (UINT iChild = 0; iChild < cChildren; iChild++)

	mov	DWORD PTR _iChild$2[ebp], 0
	jmp	SHORT $LN11@Create
$LN10@Create:
	mov	eax, DWORD PTR _iChild$2[ebp]
	add	eax, 1
	mov	DWORD PTR _iChild$2[ebp], eax
$LN11@Create:
	mov	eax, DWORD PTR _iChild$2[ebp]
	cmp	eax, DWORD PTR _cChildren$[ebp]
	jae	$LN9@Create

; 986  :     {
; 987  :         hr = pEnumObj->GetChild(iChild, &pFileData);

	mov	esi, esp
	lea	eax, DWORD PTR _pFileData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iChild$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEnumObj$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEnumObj$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 988  :         if (FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@Create

; 989  :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN18@Create
$LN8@Create:

; 990  : 
; 991  :         hr = LoadFrame( pd3dDevice, pFileData, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFileData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z ; CDXUTMeshFile::LoadFrame
	mov	DWORD PTR _hr$[ebp], eax

; 992  :         SAFE_RELEASE( pFileData );

	cmp	DWORD PTR _pFileData$[ebp], 0
	je	SHORT $LN7@Create
	mov	eax, DWORD PTR _pFileData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pFileData$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pFileData$[ebp], 0
$LN7@Create:

; 993  :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@Create

; 994  :         {
; 995  :             SAFE_RELEASE( pEnumObj );

	cmp	DWORD PTR _pEnumObj$[ebp], 0
	je	SHORT $LN5@Create
	mov	eax, DWORD PTR _pEnumObj$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEnumObj$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pEnumObj$[ebp], 0
$LN5@Create:

; 996  :             SAFE_RELEASE( pDXFile );

	cmp	DWORD PTR _pDXFile$[ebp], 0
	je	SHORT $LN4@Create
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDXFile$[ebp], 0
$LN4@Create:

; 997  :             return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN18@Create
$LN6@Create:

; 998  :         }
; 999  :     }

	jmp	$LN10@Create
$LN9@Create:

; 1000 : 
; 1001 :     SAFE_RELEASE( pFileData );

	cmp	DWORD PTR _pFileData$[ebp], 0
	je	SHORT $LN3@Create
	mov	eax, DWORD PTR _pFileData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pFileData$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pFileData$[ebp], 0
$LN3@Create:

; 1002 :     SAFE_RELEASE( pEnumObj );

	cmp	DWORD PTR _pEnumObj$[ebp], 0
	je	SHORT $LN2@Create
	mov	eax, DWORD PTR _pEnumObj$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEnumObj$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pEnumObj$[ebp], 0
$LN2@Create:

; 1003 :     SAFE_RELEASE( pDXFile );

	cmp	DWORD PTR _pDXFile$[ebp], 0
	je	SHORT $LN1@Create
	mov	eax, DWORD PTR _pDXFile$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDXFile$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pDXFile$[ebp], 0
$LN1@Create:

; 1004 : 
; 1005 :     return S_OK;

	xor	eax, eax
$LN18@Create:

; 1006 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 828				; 0000033cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN28@Create:
	DD	6
	DD	$LN27@Create
$LN27@Create:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN21@Create
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN22@Create
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN23@Create
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN24@Create
	DD	-340					; fffffeacH
	DD	260					; 00000104H
	DD	$LN25@Create
	DD	-608					; fffffda0H
	DD	260					; 00000104H
	DD	$LN26@Create
$LN26@Create:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	65					; 00000041H
	DB	78					; 0000004eH
	DB	83					; 00000053H
	DB	73					; 00000049H
	DB	0
$LN25@Create:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN24@Create:
	DB	99					; 00000063H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN23@Create:
	DB	112					; 00000070H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN22@Create:
	DB	112					; 00000070H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	0
$LN21@Create:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	88					; 00000058H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?Create@CDXUTMeshFile@@QAEJPAUIDirect3DDevice9@@PBD@Z ENDP ; CDXUTMeshFile::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z
_TEXT	SEGMENT
tv160 = -1420						; size = 4
$T2 = -1412						; size = 4
$T3 = -1400						; size = 4
$T4 = -1388						; size = 4
_iChild$5 = -1184					; size = 4
_cChildren$6 = -1172					; size = 4
_dwNameLength$7 = -1160					; size = 4
_strName$8 = -1148					; size = 512
_strAnsiName$9 = -628					; size = 512
_pmatMatrix$10 = -108					; size = 4
_hr$ = -96						; size = 4
_pCurrentFrame$ = -84					; size = 4
_cbSize$ = -72						; size = 4
_Guid$ = -60						; size = 16
_pChildData$ = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pd3dDevice$ = 8					; size = 4
_pFileData$ = 12					; size = 4
_pParentFrame$ = 16					; size = 4
?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z PROC ; CDXUTMeshFile::LoadFrame, COMDAT
; _this$ = ecx

; 761  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1408				; 00000580H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1420]
	mov	ecx, 352				; 00000160H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 762  :     LPD3DXFILEDATA   pChildData = NULL;

	mov	DWORD PTR _pChildData$[ebp], 0

; 763  :     GUID Guid;
; 764  :     SIZE_T      cbSize;
; 765  :     CDXUTMeshFrame*  pCurrentFrame;
; 766  :     HRESULT     hr;
; 767  : 
; 768  :     // Get the type of the object
; 769  :     if( FAILED( hr = pFileData->GetType( &Guid ) ) )

	mov	esi, esp
	lea	eax, DWORD PTR _Guid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFileData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pFileData$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@LoadFrame

; 770  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN16@LoadFrame
$LN14@LoadFrame:

; 771  : 
; 772  :     if( Guid == TID_D3DRMMesh )

	push	OFFSET _TID_D3DRMMesh
	lea	eax, DWORD PTR _Guid$[ebp]
	push	eax
	call	_==
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@LoadFrame

; 773  :     {
; 774  :         hr = LoadMesh( pd3dDevice, pFileData, pParentFrame );

	mov	eax, DWORD PTR _pParentFrame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFileData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z ; CDXUTMeshFile::LoadMesh
	mov	DWORD PTR _hr$[ebp], eax

; 775  :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN13@LoadFrame

; 776  :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN16@LoadFrame
$LN13@LoadFrame:

; 777  :     }
; 778  :     if( Guid == TID_D3DRMFrameTransformMatrix )

	push	OFFSET _TID_D3DRMFrameTransformMatrix
	lea	eax, DWORD PTR _Guid$[ebp]
	push	eax
	call	_==
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@LoadFrame

; 779  :     {
; 780  :         D3DXMATRIX* pmatMatrix;
; 781  :         hr = pFileData->Lock(&cbSize, (LPCVOID*)&pmatMatrix );

	mov	esi, esp
	lea	eax, DWORD PTR _pmatMatrix$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pFileData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pFileData$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 782  :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@LoadFrame

; 783  :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN16@LoadFrame
$LN10@LoadFrame:

; 784  : 
; 785  :         // Update the parent's matrix with the new one
; 786  :         pParentFrame->SetMatrix( pmatMatrix );

	mov	eax, DWORD PTR _pmatMatrix$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _pParentFrame$[ebp]
	call	?SetMatrix@CDXUTMeshFrame@@QAEXPAUD3DXMATRIX@@@Z ; CDXUTMeshFrame::SetMatrix
$LN11@LoadFrame:

; 787  :     }
; 788  :     if( Guid == TID_D3DRMFrame )

	push	OFFSET _TID_D3DRMFrame
	lea	eax, DWORD PTR _Guid$[ebp]
	push	eax
	call	_==
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN9@LoadFrame

; 789  :     {
; 790  :         // Get the frame name
; 791  :         CHAR  strAnsiName[512] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _strAnsiName$9[ebp], al
	push	511					; 000001ffH
	push	0
	lea	eax, DWORD PTR _strAnsiName$9[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 792  :         TCHAR strName[512];
; 793  :         SIZE_T dwNameLength = 512;

	mov	DWORD PTR _dwNameLength$7[ebp], 512	; 00000200H

; 794  :         SIZE_T cChildren;
; 795  :         if( FAILED( hr = pFileData->GetName( strAnsiName, &dwNameLength ) ) )

	mov	esi, esp
	lea	eax, DWORD PTR _dwNameLength$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _strAnsiName$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _pFileData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pFileData$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@LoadFrame

; 796  :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN16@LoadFrame
$LN8@LoadFrame:

; 797  : 
; 798  :         strcpy(strAnsiName, strName);

	lea	eax, DWORD PTR _strName$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _strAnsiName$9[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 799  :         strName[511] = 0;

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 512			; 00000200H
	jae	SHORT $LN17@LoadFrame
	jmp	SHORT $LN18@LoadFrame
$LN17@LoadFrame:
	call	___report_rangecheckfailure
$LN18@LoadFrame:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _strName$8[ebp+edx], 0

; 800  : 
; 801  :         // Create the frame
; 802  :         pCurrentFrame = new CDXUTMeshFrame( strName );

	push	592					; 00000250H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN19@LoadFrame
	lea	eax, DWORD PTR _strName$8[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CDXUTMeshFrame@@QAE@PBD@Z		; CDXUTMeshFrame::CDXUTMeshFrame
	mov	DWORD PTR tv160[ebp], eax
	jmp	SHORT $LN20@LoadFrame
$LN19@LoadFrame:
	mov	DWORD PTR tv160[ebp], 0
$LN20@LoadFrame:
	mov	ecx, DWORD PTR tv160[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _pCurrentFrame$[ebp], edx

; 803  :         if( pCurrentFrame == NULL )

	cmp	DWORD PTR _pCurrentFrame$[ebp], 0
	jne	SHORT $LN7@LoadFrame

; 804  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN16@LoadFrame
$LN7@LoadFrame:

; 805  : 
; 806  :         pCurrentFrame->m_pNext = pParentFrame->m_pChild;

	mov	eax, DWORD PTR _pCurrentFrame$[ebp]
	mov	ecx, DWORD PTR _pParentFrame$[ebp]
	mov	edx, DWORD PTR [ecx+588]
	mov	DWORD PTR [eax+584], edx

; 807  :         pParentFrame->m_pChild = pCurrentFrame;

	mov	eax, DWORD PTR _pParentFrame$[ebp]
	mov	ecx, DWORD PTR _pCurrentFrame$[ebp]
	mov	DWORD PTR [eax+588], ecx

; 808  : 
; 809  :         // Enumerate child objects
; 810  :         pFileData->GetChildren(&cChildren);

	mov	esi, esp
	lea	eax, DWORD PTR _cChildren$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFileData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pFileData$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+40]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 811  :         for (UINT iChild = 0; iChild < cChildren; iChild++)

	mov	DWORD PTR _iChild$5[ebp], 0
	jmp	SHORT $LN6@LoadFrame
$LN5@LoadFrame:
	mov	eax, DWORD PTR _iChild$5[ebp]
	add	eax, 1
	mov	DWORD PTR _iChild$5[ebp], eax
$LN6@LoadFrame:
	mov	eax, DWORD PTR _iChild$5[ebp]
	cmp	eax, DWORD PTR _cChildren$6[ebp]
	jae	SHORT $LN9@LoadFrame

; 812  :         {
; 813  :             // Query the child for its FileData
; 814  :             hr = pFileData->GetChild(iChild, &pChildData );

	mov	esi, esp
	lea	eax, DWORD PTR _pChildData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iChild$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _pFileData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pFileData$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 815  :             if( SUCCEEDED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@LoadFrame

; 816  :             {
; 817  :                 hr = LoadFrame( pd3dDevice, pChildData, pCurrentFrame );

	mov	eax, DWORD PTR _pCurrentFrame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pChildData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z ; CDXUTMeshFile::LoadFrame
	mov	DWORD PTR _hr$[ebp], eax

; 818  :                 SAFE_RELEASE( pChildData );

	cmp	DWORD PTR _pChildData$[ebp], 0
	je	SHORT $LN3@LoadFrame
	mov	eax, DWORD PTR _pChildData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pChildData$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pChildData$[ebp], 0
$LN3@LoadFrame:

; 819  :             }
; 820  : 
; 821  :             if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@LoadFrame

; 822  :                 return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN16@LoadFrame
$LN1@LoadFrame:

; 823  :         }

	jmp	$LN5@LoadFrame
$LN9@LoadFrame:

; 824  :     }
; 825  : 
; 826  :     return S_OK;

	xor	eax, eax
$LN16@LoadFrame:

; 827  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@LoadFrame
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1420				; 0000058cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN32@LoadFrame:
	DD	8
	DD	$LN31@LoadFrame
$LN31@LoadFrame:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN22@LoadFrame
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN23@LoadFrame
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN24@LoadFrame
	DD	-108					; ffffff94H
	DD	4
	DD	$LN25@LoadFrame
	DD	-628					; fffffd8cH
	DD	512					; 00000200H
	DD	$LN26@LoadFrame
	DD	-1148					; fffffb84H
	DD	512					; 00000200H
	DD	$LN27@LoadFrame
	DD	-1160					; fffffb78H
	DD	4
	DD	$LN28@LoadFrame
	DD	-1172					; fffffb6cH
	DD	4
	DD	$LN29@LoadFrame
$LN29@LoadFrame:
	DB	99					; 00000063H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN28@LoadFrame:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN27@LoadFrame:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN26@LoadFrame:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN25@LoadFrame:
	DB	112					; 00000070H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN24@LoadFrame:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN23@LoadFrame:
	DB	71					; 00000047H
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN22@LoadFrame:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1424]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadFrame@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z ENDP ; CDXUTMeshFile::LoadFrame
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z
_TEXT	SEGMENT
tv90 = -1324						; size = 4
$T2 = -1316						; size = 4
$T3 = -1304						; size = 4
$T4 = -1292						; size = 4
_hr$ = -1088						; size = 4
_dwNameLength$ = -1076					; size = 4
_strName$ = -1064					; size = 512
_strAnsiName$ = -544					; size = 512
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pd3dDevice$ = 8					; size = 4
_pFileData$ = 12					; size = 4
_pParentFrame$ = 16					; size = 4
?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z PROC ; CDXUTMeshFile::LoadMesh, COMDAT
; _this$ = ecx

; 839  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1312				; 00000520H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1324]
	mov	ecx, 328				; 00000148H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 840  :     // Currently only allowing one mesh per frame
; 841  :     if( pParentFrame->m_pMesh )

	mov	eax, DWORD PTR _pParentFrame$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN3@LoadMesh

; 842  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN5@LoadMesh
$LN3@LoadMesh:

; 843  : 
; 844  :     // Get the mesh name
; 845  :     CHAR  strAnsiName[512] = {0};

	mov	BYTE PTR _strAnsiName$[ebp], 0
	push	511					; 000001ffH
	push	0
	lea	eax, DWORD PTR _strAnsiName$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 846  :     TCHAR strName[512];
; 847  :     SIZE_T dwNameLength = 512;

	mov	DWORD PTR _dwNameLength$[ebp], 512	; 00000200H

; 848  :     HRESULT hr;
; 849  :     if( FAILED( hr = pFileData->GetName( strAnsiName, &dwNameLength ) ) )

	mov	esi, esp
	lea	eax, DWORD PTR _dwNameLength$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strAnsiName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pFileData$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pFileData$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@LoadMesh

; 850  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN5@LoadMesh
$LN2@LoadMesh:

; 851  : 
; 852  :     strcpy(strName, strAnsiName);

	lea	eax, DWORD PTR _strAnsiName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strName$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 853  :     strName[511] = 0;

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 512			; 00000200H
	jae	SHORT $LN6@LoadMesh
	jmp	SHORT $LN7@LoadMesh
$LN6@LoadMesh:
	call	___report_rangecheckfailure
$LN7@LoadMesh:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _strName$[ebp+edx], 0

; 854  : 
; 855  :     // Create the mesh
; 856  :     pParentFrame->m_pMesh = new CDXUTMesh( strName );

	push	537					; 00000219H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN8@LoadMesh
	lea	eax, DWORD PTR _strName$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CDXUTMesh@@QAE@PBD@Z			; CDXUTMesh::CDXUTMesh
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN9@LoadMesh
$LN8@LoadMesh:
	mov	DWORD PTR tv90[ebp], 0
$LN9@LoadMesh:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _pParentFrame$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+580], eax

; 857  :     if( pParentFrame->m_pMesh == NULL )

	mov	eax, DWORD PTR _pParentFrame$[ebp]
	cmp	DWORD PTR [eax+580], 0
	jne	SHORT $LN1@LoadMesh

; 858  :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN5@LoadMesh
$LN1@LoadMesh:

; 859  :     pParentFrame->m_pMesh->Create( pd3dDevice, pFileData );

	mov	eax, DWORD PTR _pFileData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pParentFrame$[ebp]
	mov	ecx, DWORD PTR [edx+580]
	call	?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@@Z ; CDXUTMesh::Create

; 860  : 
; 861  :     return S_OK;

	xor	eax, eax
$LN5@LoadMesh:

; 862  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@LoadMesh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1324				; 0000052cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN16@LoadMesh:
	DD	3
	DD	$LN15@LoadMesh
$LN15@LoadMesh:
	DD	-544					; fffffde0H
	DD	512					; 00000200H
	DD	$LN11@LoadMesh
	DD	-1064					; fffffbd8H
	DD	512					; 00000200H
	DD	$LN12@LoadMesh
	DD	-1076					; fffffbccH
	DD	4
	DD	$LN13@LoadMesh
$LN13@LoadMesh:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN12@LoadMesh:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN11@LoadMesh:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1328]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadMesh@CDXUTMeshFile@@AAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@PAVCDXUTMeshFrame@@@Z ENDP ; CDXUTMeshFile::LoadMesh
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTMeshFrame@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTMeshFrame@@UAEPAXI@Z PROC			; CDXUTMeshFrame::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTMeshFrame@@UAE@XZ		; CDXUTMeshFrame::~CDXUTMeshFrame
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTMeshFrame@@UAEPAXI@Z ENDP			; CDXUTMeshFrame::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ??1CDXUTMeshFrame@@UAE@XZ
_TEXT	SEGMENT
tv85 = -256						; size = 4
tv74 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
$T4 = -212						; size = 4
_this$ = -8						; size = 4
??1CDXUTMeshFrame@@UAE@XZ PROC				; CDXUTMeshFrame::~CDXUTMeshFrame, COMDAT
; _this$ = ecx

; 588  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTMeshFrame@@6B@

; 589  :     SAFE_DELETE( m_pChild );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN2@CDXUTMeshF
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@CDXUTMeshF
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN6@CDXUTMeshF
$LN5@CDXUTMeshF:
	mov	DWORD PTR tv74[ebp], 0
$LN6@CDXUTMeshF:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+588], 0
$LN2@CDXUTMeshF:

; 590  :     SAFE_DELETE( m_pNext );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN3@CDXUTMeshF
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@CDXUTMeshF
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN8@CDXUTMeshF
$LN7@CDXUTMeshF:
	mov	DWORD PTR tv85[ebp], 0
$LN8@CDXUTMeshF:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+584], 0
$LN3@CDXUTMeshF:

; 591  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTMeshFrame@@UAE@XZ ENDP				; CDXUTMeshFrame::~CDXUTMeshFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ??0CDXUTMeshFrame@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strName$ = 8						; size = 4
??0CDXUTMeshFrame@@QAE@PBD@Z PROC			; CDXUTMeshFrame::CDXUTMeshFrame, COMDAT
; _this$ = ecx

; 571  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTMeshFrame@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 572  :     StringCchCopy( m_strName, 512, strName );

	mov	eax, DWORD PTR _strName$[ebp]
	push	eax
	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 573  :     D3DXMatrixIdentity( &m_mat );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 516				; 00000204H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 574  :     m_pMesh  = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+580], 0

; 575  : 
; 576  :     m_pChild = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+588], 0

; 577  :     m_pNext  = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+584], 0

; 578  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDXUTMeshFrame@@QAE@PBD@Z ENDP			; CDXUTMeshFrame::CDXUTMeshFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Render@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@_N1PAUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_matWorld$ = -156					; size = 64
_matSavedWorld$ = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_bDrawOpaqueSubsets$ = 12				; size = 1
_bDrawAlphaSubsets$ = 16				; size = 1
_pmatWorldMatrix$ = 20					; size = 4
?Render@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@_N1PAUD3DXMATRIX@@@Z PROC ; CDXUTMeshFrame::Render, COMDAT
; _this$ = ecx

; 723  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 724  :     // For pure devices, specify the world transform. If the world transform is not
; 725  :     // specified on pure devices, this function will fail.
; 726  : 
; 727  :     D3DXMATRIX matSavedWorld, matWorld;

	lea	ecx, DWORD PTR _matSavedWorld$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	lea	ecx, DWORD PTR _matWorld$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 728  : 
; 729  :     if ( NULL == pmatWorldMatrix )

	cmp	DWORD PTR _pmatWorldMatrix$[ebp], 0
	jne	SHORT $LN5@Render

; 730  :         pd3dDevice->GetTransform( D3DTS_WORLD, &matSavedWorld );

	mov	esi, esp
	lea	eax, DWORD PTR _matSavedWorld$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+180]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 731  :     else

	jmp	SHORT $LN4@Render
$LN5@Render:

; 732  :         matSavedWorld = *pmatWorldMatrix;

	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _pmatWorldMatrix$[ebp]
	lea	edi, DWORD PTR _matSavedWorld$[ebp]
	rep movsd
$LN4@Render:

; 733  : 
; 734  :     D3DXMatrixMultiply( &matWorld, &m_mat, &matSavedWorld );

	lea	eax, DWORD PTR _matSavedWorld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	push	ecx
	lea	edx, DWORD PTR _matWorld$[ebp]
	push	edx
	call	_D3DXMatrixMultiply@12

; 735  :     pd3dDevice->SetTransform( D3DTS_WORLD, &matWorld );

	mov	esi, esp
	lea	eax, DWORD PTR _matWorld$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+176]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 736  : 
; 737  :     if( m_pMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN3@Render

; 738  :         m_pMesh->Render( pd3dDevice, bDrawOpaqueSubsets, bDrawAlphaSubsets );

	movzx	eax, BYTE PTR _bDrawAlphaSubsets$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bDrawOpaqueSubsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+580]
	call	?Render@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@_N1@Z ; CDXUTMesh::Render
$LN3@Render:

; 739  : 
; 740  :     if( m_pChild )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN2@Render

; 741  :         m_pChild->Render( pd3dDevice, bDrawOpaqueSubsets, bDrawAlphaSubsets, &matWorld );

	lea	eax, DWORD PTR _matWorld$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bDrawAlphaSubsets$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bDrawOpaqueSubsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+588]
	call	?Render@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@_N1PAUD3DXMATRIX@@@Z ; CDXUTMeshFrame::Render
$LN2@Render:

; 742  : 
; 743  :     pd3dDevice->SetTransform( D3DTS_WORLD, &matSavedWorld );

	mov	esi, esp
	lea	eax, DWORD PTR _matSavedWorld$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+176]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 744  : 
; 745  :     if( m_pNext )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN1@Render

; 746  :         m_pNext->Render( pd3dDevice, bDrawOpaqueSubsets, bDrawAlphaSubsets, &matSavedWorld );

	lea	eax, DWORD PTR _matSavedWorld$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bDrawAlphaSubsets$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bDrawOpaqueSubsets$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+584]
	call	?Render@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@_N1PAUD3DXMATRIX@@@Z ; CDXUTMeshFrame::Render
$LN1@Render:

; 747  : 
; 748  :     return S_OK;

	xor	eax, eax

; 749  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN11@Render:
	DD	2
	DD	$LN10@Render
$LN10@Render:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN8@Render
	DD	-156					; ffffff64H
	DD	64					; 00000040H
	DD	$LN9@Render
$LN9@Render:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN8@Render:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	97					; 00000061H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
?Render@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@_N1PAUD3DXMATRIX@@@Z ENDP ; CDXUTMeshFrame::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?InvalidateDeviceObjects@CDXUTMeshFrame@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?InvalidateDeviceObjects@CDXUTMeshFrame@@QAEJXZ PROC	; CDXUTMeshFrame::InvalidateDeviceObjects, COMDAT
; _this$ = ecx

; 707  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 708  :     if( m_pMesh )  m_pMesh->InvalidateDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN3@Invalidate
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+580]
	call	?InvalidateDeviceObjects@CDXUTMesh@@QAEJXZ ; CDXUTMesh::InvalidateDeviceObjects
$LN3@Invalidate:

; 709  :     if( m_pChild ) m_pChild->InvalidateDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN2@Invalidate
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	call	?InvalidateDeviceObjects@CDXUTMeshFrame@@QAEJXZ ; CDXUTMeshFrame::InvalidateDeviceObjects
$LN2@Invalidate:

; 710  :     if( m_pNext )  m_pNext->InvalidateDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN1@Invalidate
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	call	?InvalidateDeviceObjects@CDXUTMeshFrame@@QAEJXZ ; CDXUTMeshFrame::InvalidateDeviceObjects
$LN1@Invalidate:

; 711  :     return S_OK;

	xor	eax, eax

; 712  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InvalidateDeviceObjects@CDXUTMeshFrame@@QAEJXZ ENDP	; CDXUTMeshFrame::InvalidateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?RestoreDeviceObjects@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
?RestoreDeviceObjects@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@@Z PROC ; CDXUTMeshFrame::RestoreDeviceObjects, COMDAT
; _this$ = ecx

; 692  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 693  :     if( m_pMesh )  m_pMesh->RestoreDeviceObjects( pd3dDevice );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN3@RestoreDev
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+580]
	call	?RestoreDeviceObjects@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTMesh::RestoreDeviceObjects
$LN3@RestoreDev:

; 694  :     if( m_pChild ) m_pChild->RestoreDeviceObjects( pd3dDevice );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN2@RestoreDev
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+588]
	call	?RestoreDeviceObjects@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTMeshFrame::RestoreDeviceObjects
$LN2@RestoreDev:

; 695  :     if( m_pNext )  m_pNext->RestoreDeviceObjects( pd3dDevice );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN1@RestoreDev
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+584]
	call	?RestoreDeviceObjects@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTMeshFrame::RestoreDeviceObjects
$LN1@RestoreDev:

; 696  :     return S_OK;

	xor	eax, eax

; 697  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RestoreDeviceObjects@CDXUTMeshFrame@@QAEJPAUIDirect3DDevice9@@@Z ENDP ; CDXUTMeshFrame::RestoreDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Destroy@CDXUTMeshFrame@@QAEJXZ
_TEXT	SEGMENT
tv139 = -280						; size = 4
tv128 = -280						; size = 4
tv85 = -280						; size = 4
$T1 = -272						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
$T6 = -212						; size = 4
_this$ = -8						; size = 4
?Destroy@CDXUTMeshFrame@@QAEJXZ PROC			; CDXUTMeshFrame::Destroy, COMDAT
; _this$ = ecx

; 672  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 673  :     if( m_pMesh )  m_pMesh->Destroy();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN6@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+580]
	call	?Destroy@CDXUTMesh@@QAEJXZ		; CDXUTMesh::Destroy
$LN6@Destroy:

; 674  :     if( m_pChild ) m_pChild->Destroy();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN5@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	call	?Destroy@CDXUTMeshFrame@@QAEJXZ		; CDXUTMeshFrame::Destroy
$LN5@Destroy:

; 675  :     if( m_pNext )  m_pNext->Destroy();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN4@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	call	?Destroy@CDXUTMeshFrame@@QAEJXZ		; CDXUTMeshFrame::Destroy
$LN4@Destroy:

; 676  : 
; 677  :     SAFE_DELETE( m_pMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN3@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+580]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN9@Destroy
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN10@Destroy
$LN9@Destroy:
	mov	DWORD PTR tv85[ebp], 0
$LN10@Destroy:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+580], 0
$LN3@Destroy:

; 678  :     SAFE_DELETE( m_pNext );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN2@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN11@Destroy
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN12@Destroy
$LN11@Destroy:
	mov	DWORD PTR tv128[ebp], 0
$LN12@Destroy:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+584], 0
$LN2@Destroy:

; 679  :     SAFE_DELETE( m_pChild );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN1@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+588]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN13@Destroy
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN14@Destroy
$LN13@Destroy:
	mov	DWORD PTR tv139[ebp], 0
$LN14@Destroy:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+588], 0
$LN1@Destroy:

; 680  : 
; 681  :     return S_OK;

	xor	eax, eax

; 682  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy@CDXUTMeshFrame@@QAEJXZ ENDP			; CDXUTMeshFrame::Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?EnumMeshes@CDXUTMeshFrame@@QAE_NP6A_NPAVCDXUTMesh@@PAX@Z1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_EnumMeshCB$ = 8					; size = 4
_pContext$ = 12						; size = 4
?EnumMeshes@CDXUTMeshFrame@@QAE_NP6A_NPAVCDXUTMesh@@PAX@Z1@Z PROC ; CDXUTMeshFrame::EnumMeshes, COMDAT
; _this$ = ecx

; 602  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 603  :     if( m_pMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN3@EnumMeshes

; 604  :         EnumMeshCB( m_pMesh, pContext );

	mov	esi, esp
	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+580]
	push	edx
	call	DWORD PTR _EnumMeshCB$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@EnumMeshes:

; 605  :     if( m_pChild )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN2@EnumMeshes

; 606  :         m_pChild->EnumMeshes( EnumMeshCB, pContext );

	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _EnumMeshCB$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+588]
	call	?EnumMeshes@CDXUTMeshFrame@@QAE_NP6A_NPAVCDXUTMesh@@PAX@Z1@Z ; CDXUTMeshFrame::EnumMeshes
$LN2@EnumMeshes:

; 607  :     if( m_pNext )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN1@EnumMeshes

; 608  :         m_pNext->EnumMeshes( EnumMeshCB, pContext );

	mov	eax, DWORD PTR _pContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _EnumMeshCB$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+584]
	call	?EnumMeshes@CDXUTMeshFrame@@QAE_NP6A_NPAVCDXUTMesh@@PAX@Z1@Z ; CDXUTMeshFrame::EnumMeshes
$LN1@EnumMeshes:

; 609  : 
; 610  :     return TRUE;

	mov	al, 1

; 611  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?EnumMeshes@CDXUTMeshFrame@@QAE_NP6A_NPAVCDXUTMesh@@PAX@Z1@Z ENDP ; CDXUTMeshFrame::EnumMeshes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?FindFrame@CDXUTMeshFrame@@QAEPAV1@PBD@Z
_TEXT	SEGMENT
_pFrame$ = -20						; size = 4
_this$ = -8						; size = 4
_strFrameName$ = 8					; size = 4
?FindFrame@CDXUTMeshFrame@@QAEPAV1@PBD@Z PROC		; CDXUTMeshFrame::FindFrame, COMDAT
; _this$ = ecx

; 647  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 648  :     CDXUTMeshFrame* pFrame;
; 649  : 
; 650  :     if( !lstrcmpi( m_strName, strFrameName ) )

	mov	esi, esp
	mov	eax, DWORD PTR _strFrameName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpiA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@FindFrame

; 651  :         return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN6@FindFrame
$LN5@FindFrame:

; 652  : 
; 653  :     if( m_pChild )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN4@FindFrame

; 654  :         if( NULL != ( pFrame = m_pChild->FindFrame( strFrameName ) ) )

	mov	eax, DWORD PTR _strFrameName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+588]
	call	?FindFrame@CDXUTMeshFrame@@QAEPAV1@PBD@Z ; CDXUTMeshFrame::FindFrame
	mov	DWORD PTR _pFrame$[ebp], eax
	cmp	DWORD PTR _pFrame$[ebp], 0
	je	SHORT $LN4@FindFrame

; 655  :             return pFrame;

	mov	eax, DWORD PTR _pFrame$[ebp]
	jmp	SHORT $LN6@FindFrame
$LN4@FindFrame:

; 656  : 
; 657  :     if( m_pNext )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN2@FindFrame

; 658  :         if( NULL != ( pFrame = m_pNext->FindFrame( strFrameName ) ) )

	mov	eax, DWORD PTR _strFrameName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+584]
	call	?FindFrame@CDXUTMeshFrame@@QAEPAV1@PBD@Z ; CDXUTMeshFrame::FindFrame
	mov	DWORD PTR _pFrame$[ebp], eax
	cmp	DWORD PTR _pFrame$[ebp], 0
	je	SHORT $LN2@FindFrame

; 659  :             return pFrame;

	mov	eax, DWORD PTR _pFrame$[ebp]
	jmp	SHORT $LN6@FindFrame
$LN2@FindFrame:

; 660  : 
; 661  :     return NULL;

	xor	eax, eax
$LN6@FindFrame:

; 662  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindFrame@CDXUTMeshFrame@@QAEPAV1@PBD@Z ENDP		; CDXUTMeshFrame::FindFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?FindMesh@CDXUTMeshFrame@@QAEPAVCDXUTMesh@@PBD@Z
_TEXT	SEGMENT
_pMesh$ = -20						; size = 4
_this$ = -8						; size = 4
_strMeshName$ = 8					; size = 4
?FindMesh@CDXUTMeshFrame@@QAEPAVCDXUTMesh@@PBD@Z PROC	; CDXUTMeshFrame::FindMesh, COMDAT
; _this$ = ecx

; 621  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  :     CDXUTMesh* pMesh;
; 623  : 
; 624  :     if( m_pMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN6@FindMesh

; 625  :         if( !lstrcmpi( m_pMesh->m_strName, strMeshName ) )

	mov	esi, esp
	mov	eax, DWORD PTR _strMeshName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+580]
	add	edx, 4
	push	edx
	call	DWORD PTR __imp__lstrcmpiA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@FindMesh

; 626  :             return m_pMesh;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+580]
	jmp	SHORT $LN7@FindMesh
$LN6@FindMesh:

; 627  : 
; 628  :     if( m_pChild )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+588], 0
	je	SHORT $LN4@FindMesh

; 629  :         if( NULL != ( pMesh = m_pChild->FindMesh( strMeshName ) ) )

	mov	eax, DWORD PTR _strMeshName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+588]
	call	?FindMesh@CDXUTMeshFrame@@QAEPAVCDXUTMesh@@PBD@Z ; CDXUTMeshFrame::FindMesh
	mov	DWORD PTR _pMesh$[ebp], eax
	cmp	DWORD PTR _pMesh$[ebp], 0
	je	SHORT $LN4@FindMesh

; 630  :             return pMesh;

	mov	eax, DWORD PTR _pMesh$[ebp]
	jmp	SHORT $LN7@FindMesh
$LN4@FindMesh:

; 631  : 
; 632  :     if( m_pNext )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+584], 0
	je	SHORT $LN2@FindMesh

; 633  :         if( NULL != ( pMesh = m_pNext->FindMesh( strMeshName ) ) )

	mov	eax, DWORD PTR _strMeshName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+584]
	call	?FindMesh@CDXUTMeshFrame@@QAEPAVCDXUTMesh@@PBD@Z ; CDXUTMeshFrame::FindMesh
	mov	DWORD PTR _pMesh$[ebp], eax
	cmp	DWORD PTR _pMesh$[ebp], 0
	je	SHORT $LN2@FindMesh

; 634  :             return pMesh;

	mov	eax, DWORD PTR _pMesh$[ebp]
	jmp	SHORT $LN7@FindMesh
$LN2@FindMesh:

; 635  : 
; 636  :     return NULL;

	xor	eax, eax
$LN7@FindMesh:

; 637  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindMesh@CDXUTMeshFrame@@QAEPAVCDXUTMesh@@PBD@Z ENDP	; CDXUTMeshFrame::FindMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.h
;	COMDAT ?SetMatrix@CDXUTMeshFrame@@QAEXPAUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pmat$ = 8						; size = 4
?SetMatrix@CDXUTMeshFrame@@QAEXPAUD3DXMATRIX@@@Z PROC	; CDXUTMeshFrame::SetMatrix, COMDAT
; _this$ = ecx

; 90   :     void        SetMatrix( D3DXMATRIX* pmat ) { m_mat = *pmat; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 516				; 00000204H
	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _pmat$[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMatrix@CDXUTMeshFrame@@QAEXPAUD3DXMATRIX@@@Z ENDP	; CDXUTMeshFrame::SetMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTMesh@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTMesh@@UAEPAXI@Z PROC				; CDXUTMesh::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTMesh@@UAE@XZ			; CDXUTMesh::~CDXUTMesh
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTMesh@@UAEPAXI@Z ENDP				; CDXUTMesh::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ??1CDXUTMesh@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CDXUTMesh@@UAE@XZ PROC				; CDXUTMesh::~CDXUTMesh, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTMesh@@6B@

; 43   :     Destroy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy@CDXUTMesh@@QAEJXZ		; CDXUTMesh::Destroy

; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTMesh@@UAE@XZ ENDP				; CDXUTMesh::~CDXUTMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ??0CDXUTMesh@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strName$ = 8						; size = 4
??0CDXUTMesh@@QAE@PBD@Z PROC				; CDXUTMesh::CDXUTMesh, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTMesh@@6B@

; 25   :     StringCchCopy( m_strName, 512, strName );

	mov	eax, DWORD PTR _strName$[ebp]
	push	eax
	push	512					; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 26   :     m_pSysMemMesh        = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0

; 27   :     m_pLocalMesh         = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+520], 0

; 28   :     m_dwNumMaterials     = 0L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+524], 0

; 29   :     m_pMaterials         = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+528], 0

; 30   :     m_pTextures          = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+532], 0

; 31   :     m_bUseMaterials      = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+536], 1

; 32   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDXUTMesh@@QAE@PBD@Z ENDP				; CDXUTMesh::CDXUTMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Destroy@CDXUTMesh@@QAEJXZ
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_i$3 = -20						; size = 4
_this$ = -8						; size = 4
?Destroy@CDXUTMesh@@QAEJXZ PROC				; CDXUTMesh::Destroy, COMDAT
; _this$ = ecx

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 407  :     InvalidateDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateDeviceObjects@CDXUTMesh@@QAEJXZ ; CDXUTMesh::InvalidateDeviceObjects

; 408  :     for( UINT i=0; i<m_dwNumMaterials; i++ )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN7@Destroy
$LN6@Destroy:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@Destroy:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jae	SHORT $LN5@Destroy

; 409  :         SAFE_RELEASE( m_pTextures[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR _i$3[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN4@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+532]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
$LN4@Destroy:
	jmp	SHORT $LN6@Destroy
$LN5@Destroy:

; 410  :     SAFE_DELETE_ARRAY( m_pTextures );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+532], 0
	je	SHORT $LN3@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+532], 0
$LN3@Destroy:

; 411  :     SAFE_DELETE_ARRAY( m_pMaterials );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+528], 0
	je	SHORT $LN2@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+528], 0
$LN2@Destroy:

; 412  : 
; 413  :     SAFE_RELEASE( m_pSysMemMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN1@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0
$LN1@Destroy:

; 414  : 
; 415  :     m_dwNumMaterials = 0L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+524], 0

; 416  : 
; 417  :     return S_OK;

	xor	eax, eax

; 418  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy@CDXUTMesh@@QAEJXZ ENDP				; CDXUTMesh::Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?CreateMaterials@CDXUTMesh@@QAEJPBDPAUIDirect3DDevice9@@PAUID3DXBuffer@@2@Z
_TEXT	SEGMENT
tv165 = -880						; size = 4
$T1 = -872						; size = 4
$T2 = -860						; size = 4
$T3 = -848						; size = 4
_pTex$4 = -644						; size = 4
_pTex$5 = -632						; size = 4
_pTex$6 = -620						; size = 4
_ImgInfo$7 = -608					; size = 28
_strTextureTemp$8 = -572				; size = 260
_strTexture$9 = -304					; size = 260
_i$10 = -36						; size = 4
_d3dxMtrls$11 = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_strPath$ = 8						; size = 4
_pd3dDevice$ = 12					; size = 4
_pAdjacencyBuffer$ = 16					; size = 4
_pMtrlBuffer$ = 20					; size = 4
?CreateMaterials@CDXUTMesh@@QAEJPBDPAUIDirect3DDevice9@@PAUID3DXBuffer@@2@Z PROC ; CDXUTMesh::CreateMaterials, COMDAT
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 880				; 00000370H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-880]
	mov	ecx, 220				; 000000dcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 139  :     // Get material info for the mesh
; 140  :     // Get the array of materials out of the buffer
; 141  :     if( pMtrlBuffer && m_dwNumMaterials > 0 )

	cmp	DWORD PTR _pMtrlBuffer$[ebp], 0
	je	$LN17@CreateMate
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+524], 0
	jbe	$LN17@CreateMate

; 142  :     {
; 143  :         // Allocate memory for the materials and textures
; 144  :         D3DXMATERIAL* d3dxMtrls = (D3DXMATERIAL*)pMtrlBuffer->GetBufferPointer();

	mov	eax, DWORD PTR _pMtrlBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pMtrlBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _d3dxMtrls$11[ebp], eax

; 145  :         m_pMaterials = new D3DMATERIAL9[m_dwNumMaterials];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+524]
	mov	edx, 68					; 00000044H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+528], ecx

; 146  :         if( m_pMaterials == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+528], 0
	jne	SHORT $LN16@CreateMate

; 147  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN19@CreateMate
$LN16@CreateMate:

; 148  :         m_pTextures = new LPDIRECT3DBASETEXTURE9[m_dwNumMaterials];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+524]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+532], ecx

; 149  :         if( m_pTextures == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+532], 0
	jne	SHORT $LN15@CreateMate

; 150  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN19@CreateMate
$LN15@CreateMate:

; 151  : 
; 152  :         // Copy each material and create its texture
; 153  :         for( DWORD i=0; i<m_dwNumMaterials; i++ )

	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN14@CreateMate
$LN13@CreateMate:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN14@CreateMate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$10[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jae	$LN17@CreateMate

; 154  :         {
; 155  :             // Copy the material
; 156  :             m_pMaterials[i]         = d3dxMtrls[i].MatD3D;

	imul	esi, DWORD PTR _i$10[ebp], 72
	add	esi, DWORD PTR _d3dxMtrls$11[ebp]
	imul	eax, DWORD PTR _i$10[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [ecx+528]
	add	edi, eax
	mov	ecx, 17					; 00000011H
	rep movsd

; 157  :             m_pTextures[i]          = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR _i$10[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 158  : 
; 159  :             // Create a texture
; 160  :             if( d3dxMtrls[i].pTextureFilename )

	imul	eax, DWORD PTR _i$10[ebp], 72
	mov	ecx, DWORD PTR _d3dxMtrls$11[ebp]
	cmp	DWORD PTR [ecx+eax+68], 0
	je	$LN11@CreateMate

; 161  :             {
; 162  :                 TCHAR strTexture[MAX_PATH];
; 163  :                 TCHAR strTextureTemp[MAX_PATH];
; 164  :                 D3DXIMAGE_INFO ImgInfo;
; 165  : 
; 166  :                 // First attempt to look for texture in the same folder as the input folder.
; 167  :                 strcpy(strTextureTemp,d3dxMtrls[i].pTextureFilename);

	imul	eax, DWORD PTR _i$10[ebp], 72
	mov	ecx, DWORD PTR _d3dxMtrls$11[ebp]
	mov	edx, DWORD PTR [ecx+eax+68]
	push	edx
	lea	eax, DWORD PTR _strTextureTemp$8[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 168  :                 strTextureTemp[MAX_PATH-1] = 0;

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 260			; 00000104H
	jae	SHORT $LN20@CreateMate
	jmp	SHORT $LN21@CreateMate
$LN20@CreateMate:
	call	___report_rangecheckfailure
$LN21@CreateMate:
	mov	edx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _strTextureTemp$8[ebp+edx], 0

; 169  : 
; 170  :                 StringCchCopy( strTexture, MAX_PATH, strPath );

	mov	eax, DWORD PTR _strPath$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strTexture$9[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 171  :                 StringCchCat( strTexture, MAX_PATH, strTextureTemp );

	lea	eax, DWORD PTR _strTextureTemp$8[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strTexture$9[ebp]
	push	ecx
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 172  : 
; 173  :                 // Inspect the texture file to determine the texture type.
; 174  :                 if( FAILED( D3DXGetImageInfoFromFile( strTexture, &ImgInfo ) ) )

	lea	eax, DWORD PTR _ImgInfo$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTexture$9[ebp]
	push	ecx
	call	_D3DXGetImageInfoFromFileA@8
	test	eax, eax
	jge	SHORT $LN10@CreateMate

; 175  :                 {
; 176  :                     // Search the media folder
; 177  :                     if( FAILED( DXUTFindDXSDKMediaFileCch( strTexture, MAX_PATH, strTextureTemp ) ) )

	lea	eax, DWORD PTR _strTextureTemp$8[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strTexture$9[ebp]
	push	ecx
	call	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z ; DXUTFindDXSDKMediaFileCch
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN9@CreateMate

; 178  :                         continue;  // Can't find. Skip.

	jmp	$LN13@CreateMate
$LN9@CreateMate:

; 179  : 
; 180  :                     D3DXGetImageInfoFromFile( strTexture, &ImgInfo );

	lea	eax, DWORD PTR _ImgInfo$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTexture$9[ebp]
	push	ecx
	call	_D3DXGetImageInfoFromFileA@8
$LN10@CreateMate:

; 181  :                 }
; 182  : 
; 183  :                 // Call the appropriate loader according to the texture type.
; 184  :                 switch( ImgInfo.ResourceType )

	mov	eax, DWORD PTR _ImgInfo$7[ebp+20]
	mov	DWORD PTR tv165[ebp], eax
	cmp	DWORD PTR tv165[ebp], 3
	je	SHORT $LN6@CreateMate
	cmp	DWORD PTR tv165[ebp], 4
	je	$LN2@CreateMate
	cmp	DWORD PTR tv165[ebp], 5
	je	SHORT $LN4@CreateMate
	jmp	$LN11@CreateMate
$LN6@CreateMate:

; 185  :                 {
; 186  :                     case D3DRTYPE_TEXTURE:
; 187  :                     {
; 188  :                         IDirect3DTexture9 *pTex;
; 189  :                         if( SUCCEEDED( D3DXCreateTextureFromFile( pd3dDevice, strTexture, &pTex ) ) )

	lea	eax, DWORD PTR _pTex$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTexture$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	call	_D3DXCreateTextureFromFileA@12
	test	eax, eax
	jl	SHORT $LN5@CreateMate

; 190  :                         {
; 191  :                             // Obtain the base texture interface
; 192  :                             pTex->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&m_pTextures[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR _i$10[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _pTex$6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pTex$6[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 193  :                             // Release the specialized instance
; 194  :                             pTex->Release();

	mov	eax, DWORD PTR _pTex$6[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTex$6[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@CreateMate:

; 195  :                         }
; 196  :                         break;

	jmp	$LN11@CreateMate
$LN4@CreateMate:

; 197  :                     }
; 198  :                     case D3DRTYPE_CUBETEXTURE:
; 199  :                     {
; 200  :                         IDirect3DCubeTexture9 *pTex;
; 201  :                         if( SUCCEEDED( D3DXCreateCubeTextureFromFile( pd3dDevice, strTexture, &pTex ) ) )

	lea	eax, DWORD PTR _pTex$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTexture$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	call	_D3DXCreateCubeTextureFromFileA@12
	test	eax, eax
	jl	SHORT $LN3@CreateMate

; 202  :                         {
; 203  :                             // Obtain the base texture interface
; 204  :                             pTex->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&m_pTextures[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR _i$10[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _pTex$5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pTex$5[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 205  :                             // Release the specialized instance
; 206  :                             pTex->Release();

	mov	eax, DWORD PTR _pTex$5[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTex$5[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@CreateMate:

; 207  :                         }
; 208  :                         break;

	jmp	SHORT $LN11@CreateMate
$LN2@CreateMate:

; 209  :                     }
; 210  :                     case D3DRTYPE_VOLUMETEXTURE:
; 211  :                     {
; 212  :                         IDirect3DVolumeTexture9 *pTex;
; 213  :                         if( SUCCEEDED( D3DXCreateVolumeTextureFromFile( pd3dDevice, strTexture, &pTex ) ) )

	lea	eax, DWORD PTR _pTex$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTexture$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	call	_D3DXCreateVolumeTextureFromFileA@12
	test	eax, eax
	jl	SHORT $LN11@CreateMate

; 214  :                         {
; 215  :                             // Obtain the base texture interface
; 216  :                             pTex->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&m_pTextures[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR _i$10[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _pTex$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pTex$4[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 217  :                             // Release the specialized instance
; 218  :                             pTex->Release();

	mov	eax, DWORD PTR _pTex$4[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTex$4[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@CreateMate:

; 219  :                         }
; 220  :                         break;
; 221  :                     }
; 222  :                 }
; 223  :             }
; 224  :         }

	jmp	$LN13@CreateMate
$LN17@CreateMate:

; 225  :     }
; 226  :     return S_OK;

	xor	eax, eax
$LN19@CreateMate:

; 227  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@CreateMate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 880				; 00000370H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN29@CreateMate:
	DD	6
	DD	$LN28@CreateMate
$LN28@CreateMate:
	DD	-304					; fffffed0H
	DD	260					; 00000104H
	DD	$LN22@CreateMate
	DD	-572					; fffffdc4H
	DD	260					; 00000104H
	DD	$LN23@CreateMate
	DD	-608					; fffffda0H
	DD	28					; 0000001cH
	DD	$LN24@CreateMate
	DD	-620					; fffffd94H
	DD	4
	DD	$LN25@CreateMate
	DD	-632					; fffffd88H
	DD	4
	DD	$LN26@CreateMate
	DD	-644					; fffffd7cH
	DD	4
	DD	$LN27@CreateMate
$LN27@CreateMate:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN26@CreateMate:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN25@CreateMate:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN24@CreateMate:
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	103					; 00000067H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN23@CreateMate:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN22@CreateMate:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
?CreateMaterials@CDXUTMesh@@QAEJPBDPAUIDirect3DDevice9@@PAUID3DXBuffer@@2@Z ENDP ; CDXUTMesh::CreateMaterials
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@@Z
_TEXT	SEGMENT
_hr$ = -44						; size = 4
_pAdjacencyBuffer$ = -32				; size = 4
_pMtrlBuffer$ = -20					; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
_pFileData$ = 12					; size = 4
?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@@Z PROC ; CDXUTMesh::Create, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  :     LPD3DXBUFFER pMtrlBuffer = NULL;

	mov	DWORD PTR _pMtrlBuffer$[ebp], 0

; 107  :     LPD3DXBUFFER pAdjacencyBuffer = NULL;

	mov	DWORD PTR _pAdjacencyBuffer$[ebp], 0

; 108  :     HRESULT      hr;
; 109  : 
; 110  :     // Load the mesh from the DXFILEDATA object
; 111  :     if( FAILED( hr = D3DXLoadMeshFromXof( pFileData, D3DXMESH_SYSTEMMEM, pd3dDevice,
; 112  :                                           &pAdjacencyBuffer, &pMtrlBuffer, NULL,
; 113  :                                           &m_dwNumMaterials, &m_pSysMemMesh ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 516				; 00000204H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	push	ecx
	push	0
	lea	edx, DWORD PTR _pMtrlBuffer$[ebp]
	push	edx
	lea	eax, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	push	272					; 00000110H
	mov	edx, DWORD PTR _pFileData$[ebp]
	push	edx
	call	_D3DXLoadMeshFromXof@32
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@Create

; 114  :     {
; 115  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN7@Create
$LN6@Create:

; 116  :     }
; 117  : 
; 118  :     // Optimize the mesh for performance
; 119  :     if( FAILED( hr = m_pSysMemMesh->OptimizeInplace(
; 120  :                         D3DXMESHOPT_COMPACT | D3DXMESHOPT_ATTRSORT | D3DXMESHOPT_VERTEXCACHE,
; 121  :                         (DWORD*)pAdjacencyBuffer->GetBufferPointer(), NULL, NULL, NULL ) ) )

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _pAdjacencyBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edi, esp
	mov	edx, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	117440512				; 07000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+108]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@Create

; 122  :     {
; 123  :         SAFE_RELEASE( pAdjacencyBuffer );

	cmp	DWORD PTR _pAdjacencyBuffer$[ebp], 0
	je	SHORT $LN4@Create
	mov	eax, DWORD PTR _pAdjacencyBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pAdjacencyBuffer$[ebp], 0
$LN4@Create:

; 124  :         SAFE_RELEASE( pMtrlBuffer );

	cmp	DWORD PTR _pMtrlBuffer$[ebp], 0
	je	SHORT $LN3@Create
	mov	eax, DWORD PTR _pMtrlBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pMtrlBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pMtrlBuffer$[ebp], 0
$LN3@Create:

; 125  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN7@Create
$LN5@Create:

; 126  :     }
; 127  : 
; 128  :     hr = CreateMaterials( "", pd3dDevice, pAdjacencyBuffer, pMtrlBuffer );

	mov	eax, DWORD PTR _pMtrlBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateMaterials@CDXUTMesh@@QAEJPBDPAUIDirect3DDevice9@@PAUID3DXBuffer@@2@Z ; CDXUTMesh::CreateMaterials
	mov	DWORD PTR _hr$[ebp], eax

; 129  : 
; 130  :     SAFE_RELEASE( pAdjacencyBuffer );

	cmp	DWORD PTR _pAdjacencyBuffer$[ebp], 0
	je	SHORT $LN2@Create
	mov	eax, DWORD PTR _pAdjacencyBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pAdjacencyBuffer$[ebp], 0
$LN2@Create:

; 131  :     SAFE_RELEASE( pMtrlBuffer );

	cmp	DWORD PTR _pMtrlBuffer$[ebp], 0
	je	SHORT $LN1@Create
	mov	eax, DWORD PTR _pMtrlBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pMtrlBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pMtrlBuffer$[ebp], 0
$LN1@Create:

; 132  : 
; 133  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN7@Create:

; 134  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN12@Create:
	DD	2
	DD	$LN11@Create
$LN11@Create:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@Create
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Create
$LN10@Create:
	DB	112					; 00000070H
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	106					; 0000006aH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	121					; 00000079H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN9@Create:
	DB	112					; 00000070H
	DB	77					; 0000004dH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PAUID3DXFileData@@@Z ENDP ; CDXUTMesh::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PBD@Z
_TEXT	SEGMENT
$T1 = -532						; size = 4
_pLastBSlash$ = -328					; size = 4
_hr$ = -316						; size = 4
_pMtrlBuffer$ = -304					; size = 4
_pAdjacencyBuffer$ = -292				; size = 4
_strPath$ = -280					; size = 260
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_strFilename$ = 12					; size = 4
?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PBD@Z PROC	; CDXUTMesh::Create, COMDAT
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 55   :     TCHAR        strPath[MAX_PATH];
; 56   :     LPD3DXBUFFER pAdjacencyBuffer = NULL;

	mov	DWORD PTR _pAdjacencyBuffer$[ebp], 0

; 57   :     LPD3DXBUFFER pMtrlBuffer = NULL;

	mov	DWORD PTR _pMtrlBuffer$[ebp], 0

; 58   :     HRESULT      hr;
; 59   : 
; 60   :     // Find the path for the file, and convert it to ANSI (for the D3DX API)
; 61   :     DXUTFindDXSDKMediaFileCch( strPath, sizeof(strPath) / sizeof(TCHAR), strFilename );

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z ; DXUTFindDXSDKMediaFileCch
	add	esp, 12					; 0000000cH

; 62   : 
; 63   :     // Load the mesh
; 64   :     if( FAILED( hr = D3DXLoadMeshFromX( strPath, D3DXMESH_SYSTEMMEM, pd3dDevice, 
; 65   :                                         &pAdjacencyBuffer, &pMtrlBuffer, NULL,
; 66   :                                         &m_dwNumMaterials, &m_pSysMemMesh ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 516				; 00000204H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	push	ecx
	push	0
	lea	edx, DWORD PTR _pMtrlBuffer$[ebp]
	push	edx
	lea	eax, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	push	272					; 00000110H
	lea	edx, DWORD PTR _strPath$[ebp]
	push	edx
	call	_D3DXLoadMeshFromXA@32
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@Create

; 67   :     {
; 68   :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN10@Create
$LN8@Create:

; 69   :     }
; 70   : 
; 71   :     // Optimize the mesh for performance
; 72   :     if( FAILED( hr = m_pSysMemMesh->OptimizeInplace(
; 73   :                         D3DXMESHOPT_COMPACT | D3DXMESHOPT_ATTRSORT | D3DXMESHOPT_VERTEXCACHE,
; 74   :                         (DWORD*)pAdjacencyBuffer->GetBufferPointer(), NULL, NULL, NULL ) ) )

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _pAdjacencyBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edi, esp
	mov	edx, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	117440512				; 07000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+108]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@Create

; 75   :     {
; 76   :         SAFE_RELEASE( pAdjacencyBuffer );

	cmp	DWORD PTR _pAdjacencyBuffer$[ebp], 0
	je	SHORT $LN6@Create
	mov	eax, DWORD PTR _pAdjacencyBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pAdjacencyBuffer$[ebp], 0
$LN6@Create:

; 77   :         SAFE_RELEASE( pMtrlBuffer );

	cmp	DWORD PTR _pMtrlBuffer$[ebp], 0
	je	SHORT $LN5@Create
	mov	eax, DWORD PTR _pMtrlBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pMtrlBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pMtrlBuffer$[ebp], 0
$LN5@Create:

; 78   :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN10@Create
$LN7@Create:

; 79   :     }
; 80   : 
; 81   :     // Set strPath to the path of the mesh file
; 82   :     TCHAR *pLastBSlash = strchr( strPath, L'\\' );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strPath$[ebp]
	push	eax
	call	?strchr@@YAPADPADH@Z			; strchr
	add	esp, 8
	mov	DWORD PTR _pLastBSlash$[ebp], eax

; 83   :     if( pLastBSlash )

	cmp	DWORD PTR _pLastBSlash$[ebp], 0
	je	SHORT $LN4@Create

; 84   :         *(pLastBSlash + 1) = L'\0';

	mov	eax, DWORD PTR _pLastBSlash$[ebp]
	mov	BYTE PTR [eax+1], 0

; 85   :     else

	jmp	SHORT $LN3@Create
$LN4@Create:

; 86   :         *strPath = L'\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 260			; 00000104H
	jae	SHORT $LN11@Create
	jmp	SHORT $LN12@Create
$LN11@Create:
	call	___report_rangecheckfailure
$LN12@Create:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strPath$[ebp+edx], 0
$LN3@Create:

; 87   : 
; 88   :     hr = CreateMaterials( strPath, pd3dDevice, pAdjacencyBuffer, pMtrlBuffer );

	mov	eax, DWORD PTR _pMtrlBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	lea	eax, DWORD PTR _strPath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateMaterials@CDXUTMesh@@QAEJPBDPAUIDirect3DDevice9@@PAUID3DXBuffer@@2@Z ; CDXUTMesh::CreateMaterials
	mov	DWORD PTR _hr$[ebp], eax

; 89   : 
; 90   :     SAFE_RELEASE( pAdjacencyBuffer );

	cmp	DWORD PTR _pAdjacencyBuffer$[ebp], 0
	je	SHORT $LN2@Create
	mov	eax, DWORD PTR _pAdjacencyBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pAdjacencyBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pAdjacencyBuffer$[ebp], 0
$LN2@Create:

; 91   :     SAFE_RELEASE( pMtrlBuffer );

	cmp	DWORD PTR _pMtrlBuffer$[ebp], 0
	je	SHORT $LN1@Create
	mov	eax, DWORD PTR _pMtrlBuffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pMtrlBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pMtrlBuffer$[ebp], 0
$LN1@Create:

; 92   : 
; 93   :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN10@Create:

; 94   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN17@Create:
	DD	3
	DD	$LN16@Create
$LN16@Create:
	DD	-280					; fffffee8H
	DD	260					; 00000104H
	DD	$LN13@Create
	DD	-292					; fffffedcH
	DD	4
	DD	$LN14@Create
	DD	-304					; fffffed0H
	DD	4
	DD	$LN15@Create
$LN15@Create:
	DB	112					; 00000070H
	DB	77					; 0000004dH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN14@Create:
	DB	112					; 00000070H
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	106					; 0000006aH
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	121					; 00000079H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN13@Create:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?Create@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PBD@Z ENDP	; CDXUTMesh::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?InvalidateDeviceObjects@CDXUTMesh@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?InvalidateDeviceObjects@CDXUTMesh@@QAEJXZ PROC		; CDXUTMesh::InvalidateDeviceObjects, COMDAT
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 393  :     SAFE_RELEASE( m_pLocalMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN1@Invalidate
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+520], 0
$LN1@Invalidate:

; 394  : 
; 395  :     return S_OK;

	xor	eax, eax

; 396  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InvalidateDeviceObjects@CDXUTMesh@@QAEJXZ ENDP		; CDXUTMesh::InvalidateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?RestoreDeviceObjects@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
?RestoreDeviceObjects@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@@Z PROC ; CDXUTMesh::RestoreDeviceObjects, COMDAT
; _this$ = ecx

; 370  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 371  :     if( NULL == m_pSysMemMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	jne	SHORT $LN2@RestoreDev

; 372  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN3@RestoreDev
$LN2@RestoreDev:

; 373  : 
; 374  :     // Make a local memory version of the mesh. Note: because we are passing in
; 375  :     // no flags, the default behavior is to clone into local memory.
; 376  :     if( FAILED( m_pSysMemMesh->CloneMeshFVF( D3DXMESH_MANAGED | ( m_pSysMemMesh->GetOptions() & ~D3DXMESH_SYSTEMMEM ),
; 377  :                                              m_pSysMemMesh->GetFVF(), pd3dDevice, &m_pLocalMesh ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 520				; 00000208H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR [eax]
	mov	edi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR [eax]
	mov	edi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	cmp	edi, esp
	call	__RTC_CheckEsp
	and	eax, -273				; fffffeefH
	or	eax, 544				; 00000220H
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN1@RestoreDev

; 378  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN3@RestoreDev
$LN1@RestoreDev:

; 379  : 
; 380  :     return S_OK;

	xor	eax, eax
$LN3@RestoreDev:

; 381  : 
; 382  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RestoreDeviceObjects@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@@Z ENDP ; CDXUTMesh::RestoreDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?SetVertexDecl@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PBU_D3DVERTEXELEMENT9@@@Z
_TEXT	SEGMENT
_index$1 = -1140					; size = 4
_aNewDecl$ = -1128					; size = 520
_bHaveNormalNow$ = -597					; size = 1
_index$2 = -588						; size = 4
_aOldDecl$ = -576					; size = 520
_bHadNormal$ = -45					; size = 1
_pTempLocalMesh$ = -36					; size = 4
_pTempSysMemMesh$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pDecl$ = 12						; size = 4
?SetVertexDecl@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PBU_D3DVERTEXELEMENT9@@@Z PROC ; CDXUTMesh::SetVertexDecl, COMDAT
; _this$ = ecx

; 287  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1336				; 00000538H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1336]
	mov	ecx, 334				; 0000014eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 288  :     LPD3DXMESH pTempSysMemMesh = NULL;

	mov	DWORD PTR _pTempSysMemMesh$[ebp], 0

; 289  :     LPD3DXMESH pTempLocalMesh  = NULL;

	mov	DWORD PTR _pTempLocalMesh$[ebp], 0

; 290  : 
; 291  :     if( m_pSysMemMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN21@SetVertexD

; 292  :     {
; 293  :         if( FAILED( m_pSysMemMesh->CloneMesh( m_pSysMemMesh->GetOptions(), pDecl,
; 294  :                                               pd3dDevice, &pTempSysMemMesh ) ) )

	mov	esi, esp
	lea	eax, DWORD PTR _pTempSysMemMesh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDecl$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	edi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN21@SetVertexD

; 295  :             return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN22@SetVertexD
$LN21@SetVertexD:

; 296  :     }
; 297  : 
; 298  :     if( m_pLocalMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	$LN19@SetVertexD

; 299  :     {
; 300  :         if( FAILED( m_pLocalMesh->CloneMesh( m_pLocalMesh->GetOptions(), pDecl, pd3dDevice,
; 301  :                                              &pTempLocalMesh ) ) )

	mov	esi, esp
	lea	eax, DWORD PTR _pTempLocalMesh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDecl$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	edi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN19@SetVertexD

; 302  :         {
; 303  :             SAFE_RELEASE( pTempSysMemMesh );

	cmp	DWORD PTR _pTempSysMemMesh$[ebp], 0
	je	SHORT $LN17@SetVertexD
	mov	eax, DWORD PTR _pTempSysMemMesh$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTempSysMemMesh$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pTempSysMemMesh$[ebp], 0
$LN17@SetVertexD:

; 304  :             return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN22@SetVertexD
$LN19@SetVertexD:

; 305  :         }
; 306  :     }
; 307  : 
; 308  :     // Check if the old declaration contains a normal.
; 309  :     bool bHadNormal = false;

	mov	BYTE PTR _bHadNormal$[ebp], 0

; 310  :     D3DVERTEXELEMENT9 aOldDecl[MAX_FVF_DECL_SIZE];
; 311  :     if( m_pSysMemMesh && SUCCEEDED( m_pSysMemMesh->GetDeclaration( aOldDecl ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN16@SetVertexD
	mov	esi, esp
	lea	eax, DWORD PTR _aOldDecl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN16@SetVertexD

; 312  :     {
; 313  :         for( UINT index = 0; index < D3DXGetDeclLength( aOldDecl ); ++index )

	mov	DWORD PTR _index$2[ebp], 0
	jmp	SHORT $LN15@SetVertexD
$LN14@SetVertexD:
	mov	eax, DWORD PTR _index$2[ebp]
	add	eax, 1
	mov	DWORD PTR _index$2[ebp], eax
$LN15@SetVertexD:
	lea	eax, DWORD PTR _aOldDecl$[ebp]
	push	eax
	call	_D3DXGetDeclLength@4
	cmp	DWORD PTR _index$2[ebp], eax
	jae	SHORT $LN16@SetVertexD

; 314  :             if( aOldDecl[index].Usage == D3DDECLUSAGE_NORMAL )

	mov	eax, DWORD PTR _index$2[ebp]
	movzx	ecx, BYTE PTR _aOldDecl$[ebp+eax*8+6]
	cmp	ecx, 3
	jne	SHORT $LN12@SetVertexD

; 315  :             {
; 316  :                 bHadNormal = true;

	mov	BYTE PTR _bHadNormal$[ebp], 1

; 317  :                 break;

	jmp	SHORT $LN16@SetVertexD
$LN12@SetVertexD:

; 318  :             }
; 319  :     }

	jmp	SHORT $LN14@SetVertexD
$LN16@SetVertexD:

; 320  : 
; 321  :     // Check if the new declaration contains a normal.
; 322  :     bool bHaveNormalNow = false;

	mov	BYTE PTR _bHaveNormalNow$[ebp], 0

; 323  :     D3DVERTEXELEMENT9 aNewDecl[MAX_FVF_DECL_SIZE];
; 324  :     if( pTempSysMemMesh && SUCCEEDED( pTempSysMemMesh->GetDeclaration( aNewDecl ) ) )

	cmp	DWORD PTR _pTempSysMemMesh$[ebp], 0
	je	SHORT $LN11@SetVertexD
	mov	esi, esp
	lea	eax, DWORD PTR _aNewDecl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTempSysMemMesh$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pTempSysMemMesh$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN11@SetVertexD

; 325  :     {
; 326  :         for( UINT index = 0; index < D3DXGetDeclLength( aNewDecl ); ++index )

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN10@SetVertexD
$LN9@SetVertexD:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN10@SetVertexD:
	lea	eax, DWORD PTR _aNewDecl$[ebp]
	push	eax
	call	_D3DXGetDeclLength@4
	cmp	DWORD PTR _index$1[ebp], eax
	jae	SHORT $LN11@SetVertexD

; 327  :             if( aNewDecl[index].Usage == D3DDECLUSAGE_NORMAL )

	mov	eax, DWORD PTR _index$1[ebp]
	movzx	ecx, BYTE PTR _aNewDecl$[ebp+eax*8+6]
	cmp	ecx, 3
	jne	SHORT $LN7@SetVertexD

; 328  :             {
; 329  :                 bHaveNormalNow = true;

	mov	BYTE PTR _bHaveNormalNow$[ebp], 1

; 330  :                 break;

	jmp	SHORT $LN11@SetVertexD
$LN7@SetVertexD:

; 331  :             }
; 332  :     }

	jmp	SHORT $LN9@SetVertexD
$LN11@SetVertexD:

; 333  : 
; 334  :     SAFE_RELEASE( m_pSysMemMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN6@SetVertexD
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0
$LN6@SetVertexD:

; 335  :     SAFE_RELEASE( m_pLocalMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN5@SetVertexD
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+520], 0
$LN5@SetVertexD:

; 336  : 
; 337  :     if( pTempSysMemMesh )

	cmp	DWORD PTR _pTempSysMemMesh$[ebp], 0
	je	SHORT $LN4@SetVertexD

; 338  :     {
; 339  :         m_pSysMemMesh = pTempSysMemMesh;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTempSysMemMesh$[ebp]
	mov	DWORD PTR [eax+516], ecx

; 340  : 
; 341  :         if( !bHadNormal && bHaveNormalNow )

	movzx	eax, BYTE PTR _bHadNormal$[ebp]
	test	eax, eax
	jne	SHORT $LN4@SetVertexD
	movzx	eax, BYTE PTR _bHaveNormalNow$[ebp]
	test	eax, eax
	je	SHORT $LN4@SetVertexD

; 342  :         {
; 343  :             // Compute normals in case the meshes have them
; 344  :             D3DXComputeNormals( m_pSysMemMesh, NULL );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	push	ecx
	call	_D3DXComputeNormals@8
$LN4@SetVertexD:

; 345  :         }
; 346  :     }
; 347  : 
; 348  :     if( pTempLocalMesh )

	cmp	DWORD PTR _pTempLocalMesh$[ebp], 0
	je	SHORT $LN2@SetVertexD

; 349  :     {
; 350  :         m_pLocalMesh = pTempLocalMesh;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTempLocalMesh$[ebp]
	mov	DWORD PTR [eax+520], ecx

; 351  : 
; 352  :         if( !bHadNormal && bHaveNormalNow )

	movzx	eax, BYTE PTR _bHadNormal$[ebp]
	test	eax, eax
	jne	SHORT $LN2@SetVertexD
	movzx	eax, BYTE PTR _bHaveNormalNow$[ebp]
	test	eax, eax
	je	SHORT $LN2@SetVertexD

; 353  :         {
; 354  :             // Compute normals in case the meshes have them
; 355  :             D3DXComputeNormals( m_pLocalMesh, NULL );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	push	ecx
	call	_D3DXComputeNormals@8
$LN2@SetVertexD:

; 356  :         }
; 357  :     }
; 358  : 
; 359  :     return S_OK;

	xor	eax, eax
$LN22@SetVertexD:

; 360  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@SetVertexD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1336				; 00000538H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN29@SetVertexD:
	DD	4
	DD	$LN28@SetVertexD
$LN28@SetVertexD:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN24@SetVertexD
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN25@SetVertexD
	DD	-576					; fffffdc0H
	DD	520					; 00000208H
	DD	$LN26@SetVertexD
	DD	-1128					; fffffb98H
	DD	520					; 00000208H
	DD	$LN27@SetVertexD
$LN27@SetVertexD:
	DB	97					; 00000061H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN26@SetVertexD:
	DB	97					; 00000061H
	DB	79					; 0000004fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN25@SetVertexD:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN24@SetVertexD:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
?SetVertexDecl@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@PBU_D3DVERTEXELEMENT9@@@Z ENDP ; CDXUTMesh::SetVertexDecl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?SetFVF@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@K@Z
_TEXT	SEGMENT
_dwOldFVF$ = -44					; size = 4
_pTempLocalMesh$ = -32					; size = 4
_pTempSysMemMesh$ = -20					; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
_dwFVF$ = 12						; size = 4
?SetFVF@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@K@Z PROC	; CDXUTMesh::SetFVF, COMDAT
; _this$ = ecx

; 234  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 235  :     LPD3DXMESH pTempSysMemMesh = NULL;

	mov	DWORD PTR _pTempSysMemMesh$[ebp], 0

; 236  :     LPD3DXMESH pTempLocalMesh  = NULL;

	mov	DWORD PTR _pTempLocalMesh$[ebp], 0

; 237  : 
; 238  :     if( m_pSysMemMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN13@SetFVF

; 239  :     {
; 240  :         if( FAILED( m_pSysMemMesh->CloneMeshFVF( m_pSysMemMesh->GetOptions(), dwFVF,
; 241  :                                                  pd3dDevice, &pTempSysMemMesh ) ) )

	mov	esi, esp
	lea	eax, DWORD PTR _pTempSysMemMesh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFVF$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	edi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN13@SetFVF

; 242  :             return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN14@SetFVF
$LN13@SetFVF:

; 243  :     }
; 244  :     if( m_pLocalMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	$LN11@SetFVF

; 245  :     {
; 246  :         if( FAILED( m_pLocalMesh->CloneMeshFVF( m_pLocalMesh->GetOptions(), dwFVF, pd3dDevice,
; 247  :                                                 &pTempLocalMesh ) ) )

	mov	esi, esp
	lea	eax, DWORD PTR _pTempLocalMesh$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFVF$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	edi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN11@SetFVF

; 248  :         {
; 249  :             SAFE_RELEASE( pTempSysMemMesh );

	cmp	DWORD PTR _pTempSysMemMesh$[ebp], 0
	je	SHORT $LN9@SetFVF
	mov	eax, DWORD PTR _pTempSysMemMesh$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTempSysMemMesh$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pTempSysMemMesh$[ebp], 0
$LN9@SetFVF:

; 250  :             return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN14@SetFVF
$LN11@SetFVF:

; 251  :         }
; 252  :     }
; 253  : 
; 254  :     DWORD dwOldFVF = 0;

	mov	DWORD PTR _dwOldFVF$[ebp], 0

; 255  : 
; 256  :     if( m_pSysMemMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN8@SetFVF

; 257  :         dwOldFVF = m_pSysMemMesh->GetFVF();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwOldFVF$[ebp], eax
$LN8@SetFVF:

; 258  : 
; 259  :     SAFE_RELEASE( m_pSysMemMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN7@SetFVF
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0
$LN7@SetFVF:

; 260  :     SAFE_RELEASE( m_pLocalMesh );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN6@SetFVF
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+520], 0
$LN6@SetFVF:

; 261  : 
; 262  :     if( pTempSysMemMesh ) m_pSysMemMesh = pTempSysMemMesh;

	cmp	DWORD PTR _pTempSysMemMesh$[ebp], 0
	je	SHORT $LN5@SetFVF
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTempSysMemMesh$[ebp]
	mov	DWORD PTR [eax+516], ecx
$LN5@SetFVF:

; 263  :     if( pTempLocalMesh )  m_pLocalMesh  = pTempLocalMesh;

	cmp	DWORD PTR _pTempLocalMesh$[ebp], 0
	je	SHORT $LN4@SetFVF
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTempLocalMesh$[ebp]
	mov	DWORD PTR [eax+520], ecx
$LN4@SetFVF:

; 264  : 
; 265  :     // Compute normals if they are being requested and
; 266  :     // the old mesh does not have them.
; 267  :     if( !(dwOldFVF & D3DFVF_NORMAL) && dwFVF & D3DFVF_NORMAL )

	mov	eax, DWORD PTR _dwOldFVF$[ebp]
	and	eax, 16					; 00000010H
	jne	SHORT $LN3@SetFVF
	mov	eax, DWORD PTR _dwFVF$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN3@SetFVF

; 268  :     {
; 269  :         if( m_pSysMemMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN2@SetFVF

; 270  :             D3DXComputeNormals( m_pSysMemMesh, NULL );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	push	ecx
	call	_D3DXComputeNormals@8
$LN2@SetFVF:

; 271  :         if( m_pLocalMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN3@SetFVF

; 272  :             D3DXComputeNormals( m_pLocalMesh, NULL );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	push	ecx
	call	_D3DXComputeNormals@8
$LN3@SetFVF:

; 273  :     }
; 274  : 
; 275  :     return S_OK;

	xor	eax, eax
$LN14@SetFVF:

; 276  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@SetFVF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN19@SetFVF:
	DD	2
	DD	$LN18@SetFVF
$LN18@SetFVF:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN16@SetFVF
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN17@SetFVF
$LN17@SetFVF:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
$LN16@SetFVF:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	0
?SetFVF@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@K@Z ENDP	; CDXUTMesh::SetFVF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Render@CDXUTMesh@@QAEJPAUID3DXEffect@@PBD11111_N2@Z
_TEXT	SEGMENT
_i$1 = -68						; size = 4
_p$2 = -56						; size = 4
_i$3 = -44						; size = 4
_p$4 = -32						; size = 4
_cPasses$ = -20						; size = 4
_this$ = -8						; size = 4
_pEffect$ = 8						; size = 4
_hTexture$ = 12						; size = 4
_hDiffuse$ = 16						; size = 4
_hAmbient$ = 20						; size = 4
_hSpecular$ = 24					; size = 4
_hEmissive$ = 28					; size = 4
_hPower$ = 32						; size = 4
_bDrawOpaqueSubsets$ = 36				; size = 1
_bDrawAlphaSubsets$ = 40				; size = 1
?Render@CDXUTMesh@@QAEJPAUID3DXEffect@@PBD11111_N2@Z PROC ; CDXUTMesh::Render, COMDAT
; _this$ = ecx

; 483  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 484  :     if( NULL == m_pLocalMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	jne	SHORT $LN31@Render

; 485  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN32@Render
$LN31@Render:

; 486  : 
; 487  :     UINT cPasses;
; 488  :     // Frist, draw the subsets without alpha
; 489  :     if( bDrawOpaqueSubsets )

	movzx	eax, BYTE PTR _bDrawOpaqueSubsets$[ebp]
	test	eax, eax
	je	$LN30@Render

; 490  :     {
; 491  :         pEffect->Begin( &cPasses, 0 );

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _cPasses$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEffect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pEffect$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+252]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 492  :         for( UINT p = 0; p < cPasses; ++p )

	mov	DWORD PTR _p$4[ebp], 0
	jmp	SHORT $LN29@Render
$LN28@Render:
	mov	eax, DWORD PTR _p$4[ebp]
	add	eax, 1
	mov	DWORD PTR _p$4[ebp], eax
$LN29@Render:
	mov	eax, DWORD PTR _p$4[ebp]
	cmp	eax, DWORD PTR _cPasses$[ebp]
	jae	$LN27@Render

; 493  :         {
; 494  :             pEffect->BeginPass( p );

	mov	esi, esp
	mov	eax, DWORD PTR _p$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEffect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pEffect$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+256]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 495  :             for( DWORD i=0; i<m_dwNumMaterials; i++ )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN26@Render
$LN25@Render:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN26@Render:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jae	$LN24@Render

; 496  :             {
; 497  :                 if( m_bUseMaterials )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+536]
	test	ecx, ecx
	je	$LN23@Render

; 498  :                 {
; 499  :                     if( m_pMaterials[i].Diffuse.a < 1.0f )

	imul	eax, DWORD PTR _i$3[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [edx+eax+12]
	jbe	SHORT $LN22@Render

; 500  :                         continue;

	jmp	SHORT $LN25@Render
$LN22@Render:

; 501  :                     if( hTexture )

	cmp	DWORD PTR _hTexture$[ebp], 0
	je	SHORT $LN21@Render

; 502  :                         pEffect->SetTexture( hTexture, m_pTextures[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	esi, esp
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _hTexture$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+208]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@Render:

; 503  :                     // D3DCOLORVALUE and D3DXVECTOR4 are data-wise identical.
; 504  :                     // No conversion is needed.
; 505  :                     if( hDiffuse )

	cmp	DWORD PTR _hDiffuse$[ebp], 0
	je	SHORT $LN20@Render

; 506  :                         pEffect->SetVector( hDiffuse, (D3DXVECTOR4*)&m_pMaterials[i].Diffuse );

	imul	eax, DWORD PTR _i$3[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	add	edx, eax
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _hDiffuse$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEffect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pEffect$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+136]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@Render:

; 507  :                     if( hAmbient )

	cmp	DWORD PTR _hAmbient$[ebp], 0
	je	SHORT $LN19@Render

; 508  :                         pEffect->SetVector( hAmbient, (D3DXVECTOR4*)&m_pMaterials[i].Ambient );

	imul	eax, DWORD PTR _i$3[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+16]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hAmbient$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@Render:

; 509  :                     if( hSpecular )

	cmp	DWORD PTR _hSpecular$[ebp], 0
	je	SHORT $LN18@Render

; 510  :                         pEffect->SetVector( hSpecular, (D3DXVECTOR4*)&m_pMaterials[i].Specular );

	imul	eax, DWORD PTR _i$3[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+32]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hSpecular$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@Render:

; 511  :                     if( hEmissive )

	cmp	DWORD PTR _hEmissive$[ebp], 0
	je	SHORT $LN17@Render

; 512  :                         pEffect->SetVector( hEmissive, (D3DXVECTOR4*)&m_pMaterials[i].Emissive );

	imul	eax, DWORD PTR _i$3[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+48]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hEmissive$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@Render:

; 513  :                     if( hPower )

	cmp	DWORD PTR _hPower$[ebp], 0
	je	SHORT $LN16@Render

; 514  :                         pEffect->SetVector( hPower, (D3DXVECTOR4*)&m_pMaterials[i].Power );

	imul	eax, DWORD PTR _i$3[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+64]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hPower$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@Render:

; 515  :                     pEffect->CommitChanges();

	mov	eax, DWORD PTR _pEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEffect$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+260]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@Render:

; 516  :                 }
; 517  :                 m_pLocalMesh->DrawSubset( i );

	mov	esi, esp
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 518  :             }

	jmp	$LN25@Render
$LN24@Render:

; 519  :             pEffect->EndPass();

	mov	eax, DWORD PTR _pEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEffect$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+264]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 520  :         }

	jmp	$LN28@Render
$LN27@Render:

; 521  :         pEffect->End();

	mov	eax, DWORD PTR _pEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEffect$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@Render:

; 522  :     }
; 523  : 
; 524  :     // Then, draw the subsets with alpha
; 525  :     if( bDrawAlphaSubsets && m_bUseMaterials )

	movzx	eax, BYTE PTR _bDrawAlphaSubsets$[ebp]
	test	eax, eax
	je	$LN15@Render
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+536]
	test	ecx, ecx
	je	$LN15@Render

; 526  :     {
; 527  :         pEffect->Begin( &cPasses, 0 );

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _cPasses$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEffect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pEffect$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+252]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 528  :         for( UINT p = 0; p < cPasses; ++p )

	mov	DWORD PTR _p$2[ebp], 0
	jmp	SHORT $LN14@Render
$LN13@Render:
	mov	eax, DWORD PTR _p$2[ebp]
	add	eax, 1
	mov	DWORD PTR _p$2[ebp], eax
$LN14@Render:
	mov	eax, DWORD PTR _p$2[ebp]
	cmp	eax, DWORD PTR _cPasses$[ebp]
	jae	$LN12@Render

; 529  :         {
; 530  :             pEffect->BeginPass( p );

	mov	esi, esp
	mov	eax, DWORD PTR _p$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEffect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pEffect$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+256]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 531  :             for( DWORD i=0; i<m_dwNumMaterials; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN11@Render
$LN10@Render:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN11@Render:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jae	$LN9@Render

; 532  :             {
; 533  :                 if( m_bUseMaterials )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+536]
	test	ecx, ecx
	je	$LN8@Render

; 534  :                 {
; 535  :                     if( m_pMaterials[i].Diffuse.a == 1.0f )

	imul	eax, DWORD PTR _i$1[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	movss	xmm0, DWORD PTR [edx+eax+12]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@Render

; 536  :                         continue;

	jmp	SHORT $LN10@Render
$LN7@Render:

; 537  :                     if( hTexture )

	cmp	DWORD PTR _hTexture$[ebp], 0
	je	SHORT $LN6@Render

; 538  :                         pEffect->SetTexture( hTexture, m_pTextures[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	esi, esp
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _hTexture$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+208]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@Render:

; 539  :                     // D3DCOLORVALUE and D3DXVECTOR4 are data-wise identical.
; 540  :                     // No conversion is needed.
; 541  :                     if( hDiffuse )

	cmp	DWORD PTR _hDiffuse$[ebp], 0
	je	SHORT $LN5@Render

; 542  :                         pEffect->SetVector( hDiffuse, (D3DXVECTOR4*)&m_pMaterials[i].Diffuse );

	imul	eax, DWORD PTR _i$1[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	add	edx, eax
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _hDiffuse$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEffect$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pEffect$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+136]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@Render:

; 543  :                     if( hAmbient )

	cmp	DWORD PTR _hAmbient$[ebp], 0
	je	SHORT $LN4@Render

; 544  :                         pEffect->SetVector( hAmbient, (D3DXVECTOR4*)&m_pMaterials[i].Ambient );

	imul	eax, DWORD PTR _i$1[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+16]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hAmbient$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@Render:

; 545  :                     if( hSpecular )

	cmp	DWORD PTR _hSpecular$[ebp], 0
	je	SHORT $LN3@Render

; 546  :                         pEffect->SetVector( hSpecular, (D3DXVECTOR4*)&m_pMaterials[i].Specular );

	imul	eax, DWORD PTR _i$1[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+32]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hSpecular$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Render:

; 547  :                     if( hEmissive )

	cmp	DWORD PTR _hEmissive$[ebp], 0
	je	SHORT $LN2@Render

; 548  :                         pEffect->SetVector( hEmissive, (D3DXVECTOR4*)&m_pMaterials[i].Emissive );

	imul	eax, DWORD PTR _i$1[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+48]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hEmissive$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Render:

; 549  :                     if( hPower )

	cmp	DWORD PTR _hPower$[ebp], 0
	je	SHORT $LN1@Render

; 550  :                         pEffect->SetVector( hPower, (D3DXVECTOR4*)&m_pMaterials[i].Power );

	imul	eax, DWORD PTR _i$1[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	lea	eax, DWORD PTR [edx+eax+64]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _hPower$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Render:

; 551  :                     pEffect->CommitChanges();

	mov	eax, DWORD PTR _pEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEffect$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+260]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@Render:

; 552  :                 }
; 553  :                 m_pLocalMesh->DrawSubset( i );

	mov	esi, esp
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 554  :             }

	jmp	$LN10@Render
$LN9@Render:

; 555  :             pEffect->EndPass();

	mov	eax, DWORD PTR _pEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEffect$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+264]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 556  :         }

	jmp	$LN13@Render
$LN12@Render:

; 557  :         pEffect->End();

	mov	eax, DWORD PTR _pEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pEffect$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@Render:

; 558  :     }
; 559  : 
; 560  :     return S_OK;

	xor	eax, eax
$LN32@Render:

; 561  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	2
$LN36@Render:
	DD	1
	DD	$LN35@Render
$LN35@Render:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN34@Render
$LN34@Render:
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?Render@CDXUTMesh@@QAEJPAUID3DXEffect@@PBD11111_N2@Z ENDP ; CDXUTMesh::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmesh.cpp
;	COMDAT ?Render@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@_N1@Z
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
_bDrawOpaqueSubsets$ = 12				; size = 1
_bDrawAlphaSubsets$ = 16				; size = 1
?Render@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@_N1@Z PROC	; CDXUTMesh::Render, COMDAT
; _this$ = ecx

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 430  :     if( NULL == m_pLocalMesh )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	jne	SHORT $LN12@Render

; 431  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN13@Render
$LN12@Render:

; 432  : 
; 433  :     // Frist, draw the subsets without alpha
; 434  :     if( bDrawOpaqueSubsets )

	movzx	eax, BYTE PTR _bDrawOpaqueSubsets$[ebp]
	test	eax, eax
	je	$LN8@Render

; 435  :     {
; 436  :         for( DWORD i=0; i<m_dwNumMaterials; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN10@Render
$LN9@Render:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN10@Render:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jae	$LN8@Render

; 437  :         {
; 438  :             if( m_bUseMaterials )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+536]
	test	ecx, ecx
	je	SHORT $LN7@Render

; 439  :             {
; 440  :                 if( m_pMaterials[i].Diffuse.a < 1.0f )

	imul	eax, DWORD PTR _i$2[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [edx+eax+12]
	jbe	SHORT $LN6@Render

; 441  :                     continue;

	jmp	SHORT $LN9@Render
$LN6@Render:

; 442  :                 pd3dDevice->SetMaterial( &m_pMaterials[i] );

	imul	eax, DWORD PTR _i$2[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+528]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 443  :                 pd3dDevice->SetTexture( 0, m_pTextures[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	esi, esp
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+260]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@Render:

; 444  :             }
; 445  :             m_pLocalMesh->DrawSubset( i );

	mov	esi, esp
	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 446  :         }

	jmp	$LN9@Render
$LN8@Render:

; 447  :     }
; 448  : 
; 449  :     // Then, draw the subsets with alpha
; 450  :     if( bDrawAlphaSubsets && m_bUseMaterials )

	movzx	eax, BYTE PTR _bDrawAlphaSubsets$[ebp]
	test	eax, eax
	je	$LN2@Render
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+536]
	test	ecx, ecx
	je	$LN2@Render

; 451  :     {
; 452  :         for( DWORD i=0; i<m_dwNumMaterials; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Render
$LN3@Render:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Render:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+524]
	jae	$LN2@Render

; 453  :         {
; 454  :             if( m_pMaterials[i].Diffuse.a == 1.0f )

	imul	eax, DWORD PTR _i$1[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	movss	xmm0, DWORD PTR [edx+eax+12]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@Render

; 455  :                 continue;

	jmp	SHORT $LN3@Render
$LN1@Render:

; 456  : 
; 457  :             // Set the material and texture
; 458  :             pd3dDevice->SetMaterial( &m_pMaterials[i] );

	imul	eax, DWORD PTR _i$1[ebp], 68
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+528]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+196]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 459  :             pd3dDevice->SetTexture( 0, m_pTextures[i] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	esi, esp
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+260]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 460  :             m_pLocalMesh->DrawSubset( i );

	mov	esi, esp
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 461  :         }

	jmp	$LN3@Render
$LN2@Render:

; 462  :     }
; 463  : 
; 464  :     return S_OK;

	xor	eax, eax
$LN13@Render:

; 465  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Render@CDXUTMesh@@QAEJPAUIDirect3DDevice9@@_N1@Z ENDP	; CDXUTMesh::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchCatA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCchCatA@@YGJPADIPBD@Z PROC			; StringCchCatA, COMDAT

; 1347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1348 :     HRESULT hr;
; 1349 : 
; 1350 :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchC

; 1351 :     {
; 1352 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 1353 :     }
; 1354 :     else

	jmp	SHORT $LN1@StringCchC
$LN2@StringCchC:

; 1355 :     {
; 1356 :         hr = StringCatWorkerA(pszDest, cchDest, pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringCatWorkerA@@YGJPADIPBD@Z		; StringCatWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCchC:

; 1357 :     }
; 1358 : 
; 1359 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1360 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCchCatA@@YGJPADIPBD@Z ENDP			; StringCchCatA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchCopyA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCchCopyA@@YGJPADIPBD@Z PROC			; StringCchCopyA, COMDAT

; 231  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 232  :     HRESULT hr;
; 233  : 
; 234  :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchC

; 235  :     {
; 236  :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 237  :     }
; 238  :     else

	jmp	SHORT $LN1@StringCchC
$LN2@StringCchC:

; 239  :     {
; 240  :         hr = StringCopyWorkerA(pszDest, cchDest, pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringCopyWorkerA@@YGJPADIPBD@Z	; StringCopyWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCchC:

; 241  :     }
; 242  : 
; 243  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 244  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCchCopyA@@YGJPADIPBD@Z ENDP			; StringCchCopyA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringLengthWorkerA@@YGJPBDIPAI@Z
_TEXT	SEGMENT
_cchMaxPrev$ = -20					; size = 4
_hr$ = -8						; size = 4
_psz$ = 8						; size = 4
_cchMax$ = 12						; size = 4
_pcch$ = 16						; size = 4
?StringLengthWorkerA@@YGJPBDIPAI@Z PROC			; StringLengthWorkerA, COMDAT

; 5963 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5964 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 5965 :     size_t cchMaxPrev = cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchMaxPrev$[ebp], eax
$LN4@StringLeng:

; 5966 : 
; 5967 :     while (cchMax && (*psz != '\0'))

	cmp	DWORD PTR _cchMax$[ebp], 0
	je	SHORT $LN3@StringLeng
	mov	eax, DWORD PTR _psz$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StringLeng

; 5968 :     {
; 5969 :         psz++;

	mov	eax, DWORD PTR _psz$[ebp]
	add	eax, 1
	mov	DWORD PTR _psz$[ebp], eax

; 5970 :         cchMax--;

	mov	eax, DWORD PTR _cchMax$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchMax$[ebp], eax

; 5971 :     }

	jmp	SHORT $LN4@StringLeng
$LN3@StringLeng:

; 5972 : 
; 5973 :     if (cchMax == 0)

	cmp	DWORD PTR _cchMax$[ebp], 0
	jne	SHORT $LN2@StringLeng

; 5974 :     {
; 5975 :         // the string is longer than cchMax
; 5976 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
$LN2@StringLeng:

; 5977 :     }
; 5978 : 
; 5979 :     if (SUCCEEDED(hr) && pcch)

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringLeng
	cmp	DWORD PTR _pcch$[ebp], 0
	je	SHORT $LN1@StringLeng

; 5980 :     {
; 5981 :         *pcch = cchMaxPrev - cchMax;

	mov	eax, DWORD PTR _cchMaxPrev$[ebp]
	sub	eax, DWORD PTR _cchMax$[ebp]
	mov	ecx, DWORD PTR _pcch$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@StringLeng:

; 5982 :     }
; 5983 : 
; 5984 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 5985 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringLengthWorkerA@@YGJPBDIPAI@Z ENDP			; StringLengthWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCatWorkerA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_cchDestCurrent$ = -20					; size = 4
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCatWorkerA@@YGJPADIPBD@Z PROC			; StringCatWorkerA, COMDAT

; 4923 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4924 :    HRESULT hr;
; 4925 :    size_t cchDestCurrent;
; 4926 : 
; 4927 :    hr = StringLengthWorkerA(pszDest, cchDest, &cchDestCurrent);

	lea	eax, DWORD PTR _cchDestCurrent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringLengthWorkerA@@YGJPBDIPAI@Z	; StringLengthWorkerA
	mov	DWORD PTR _hr$[ebp], eax

; 4928 : 
; 4929 :    if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringCatW

; 4930 :    {
; 4931 :        hr = StringCopyWorkerA(pszDest + cchDestCurrent,
; 4932 :                               cchDest - cchDestCurrent,
; 4933 :                               pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	sub	ecx, DWORD PTR _cchDestCurrent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	add	edx, DWORD PTR _cchDestCurrent$[ebp]
	push	edx
	call	?StringCopyWorkerA@@YGJPADIPBD@Z	; StringCopyWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCatW:

; 4934 :    }
; 4935 : 
; 4936 :    return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4937 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@StringCatW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN6@StringCatW:
	DD	1
	DD	$LN5@StringCatW
$LN5@StringCatW:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@StringCatW
$LN4@StringCatW:
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?StringCatWorkerA@@YGJPADIPBD@Z ENDP			; StringCatWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCopyWorkerA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCopyWorkerA@@YGJPADIPBD@Z PROC			; StringCopyWorkerA, COMDAT

; 4247 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4248 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 4249 : 
; 4250 :     if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN3@StringCopy

; 4251 :     {
; 4252 :         // can not null terminate a zero-byte dest buffer
; 4253 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 4254 :     }
; 4255 :     else

	jmp	SHORT $LN4@StringCopy
$LN3@StringCopy:

; 4256 :     {
; 4257 :         while (cchDest && (*pszSrc != '\0'))

	cmp	DWORD PTR _cchDest$[ebp], 0
	je	SHORT $LN2@StringCopy
	mov	eax, DWORD PTR _pszSrc$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@StringCopy

; 4258 :         {
; 4259 :             *pszDest++ = *pszSrc++;

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pszDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pszDest$[ebp], eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pszSrc$[ebp], ecx

; 4260 :             cchDest--;

	mov	eax, DWORD PTR _cchDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchDest$[ebp], eax

; 4261 :         }

	jmp	SHORT $LN3@StringCopy
$LN2@StringCopy:

; 4262 : 
; 4263 :         if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN1@StringCopy

; 4264 :         {
; 4265 :             // we are going to truncate pszDest
; 4266 :             pszDest--;

	mov	eax, DWORD PTR _pszDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pszDest$[ebp], eax

; 4267 :             hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR _hr$[ebp], -2147024774	; 8007007aH
$LN1@StringCopy:

; 4268 :         }
; 4269 : 
; 4270 :         *pszDest= '\0';

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	BYTE PTR [eax], 0
$LN4@StringCopy:

; 4271 :     }
; 4272 : 
; 4273 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4274 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCopyWorkerA@@YGJPADIPBD@Z ENDP			; StringCopyWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1981 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1982 : #ifdef D3DX_DEBUG
; 1983 :     if(!pOut)
; 1984 :         return NULL;
; 1985 : #endif
; 1986 : 
; 1987 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1988 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1989 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1990 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 1991 : 
; 1992 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1993 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1994 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -196						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@
$LN3@:
	mov	DWORD PTR tv68[ebp], 0
$LN4@:
	mov	al, BYTE PTR tv68[ebp]

; 195  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv69 = -196						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@IsEqualGUI
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
	mov	DWORD PTR tv69[ebp], 0
$LN4@IsEqualGUI:
	mov	eax, DWORD PTR tv69[ebp]

; 162  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\string.h
;	COMDAT ?strchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strchr@@YAPADPADH@Z PROC				; strchr, COMDAT

; 222  :         { return (char*)strchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strchr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?strchr@@YAPADPADH@Z ENDP				; strchr
_TEXT	ENDS
END
