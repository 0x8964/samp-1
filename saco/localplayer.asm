; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\net\localplayer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?bFirstSpawn@@3HA				; bFirstSpawn
PUBLIC	?dwEnterVehTimeElasped@@3KA			; dwEnterVehTimeElasped
PUBLIC	?iNumPlayersInRange@@3HA			; iNumPlayersInRange
PUBLIC	?iCyclesUntilNextCount@@3HA			; iCyclesUntilNextCount
_BSS	SEGMENT
?iNumPlayersInRange@@3HA DD 01H DUP (?)			; iNumPlayersInRange
?iCyclesUntilNextCount@@3HA DD 01H DUP (?)		; iCyclesUntilNextCount
_BSS	ENDS
CONST	SEGMENT
_camera_on_vehicle DW 0158H
	DB	'iii', 00H
	ORG $+12
	ORG $+2
_camera_on_actor DW 0159H
	DB	'iii', 00H
	ORG $+12
	ORG $+2
_is_trailer_on_cab DW 07abH
	DB	'ii', 00H
	ORG $+13
CONST	ENDS
_DATA	SEGMENT
?bFirstSpawn@@3HA DD 01H				; bFirstSpawn
?dwEnterVehTimeElasped@@3KA DD 0ffffffffH		; dwEnterVehTimeElasped
_DATA	ENDS
PUBLIC	?GetCameraMode@CPlayerPed@@QAEEXZ		; CPlayerPed::GetCameraMode
PUBLIC	?GetCameraExtendedZoom@CPlayerPed@@QAEMXZ	; CPlayerPed::GetCameraExtendedZoom
PUBLIC	?GetCamera@CGame@@QAEPAVCCamera@@XZ		; CGame::GetCamera
PUBLIC	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ	; CGame::FindPlayerPed
PUBLIC	??$Write@G@BitStream@RakNet@@QAEXG@Z		; RakNet::BitStream::Write<unsigned short>
PUBLIC	??0CLocalPlayer@@QAE@XZ				; CLocalPlayer::CLocalPlayer
PUBLIC	?HandlePassengerEntry@CLocalPlayer@@QAEXXZ	; CLocalPlayer::HandlePassengerEntry
PUBLIC	?Process@CLocalPlayer@@QAEHXZ			; CLocalPlayer::Process
PUBLIC	?DestroyPlayer@CLocalPlayer@@QAEHXZ		; CLocalPlayer::DestroyPlayer
PUBLIC	?GetSpecialAction@CLocalPlayer@@QAEEXZ		; CLocalPlayer::GetSpecialAction
PUBLIC	?ApplySpecialAction@CLocalPlayer@@QAEXE@Z	; CLocalPlayer::ApplySpecialAction
PUBLIC	?UpdateSurfing@CLocalPlayer@@QAEXXZ		; CLocalPlayer::UpdateSurfing
PUBLIC	?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendOnFootFullSyncData
PUBLIC	?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendInCarFullSyncData
PUBLIC	?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendPassengerFullSyncData
PUBLIC	?SendAimSyncData@CLocalPlayer@@QAEXXZ		; CLocalPlayer::SendAimSyncData
PUBLIC	?ResetAllSyncAttributes@CLocalPlayer@@QAEXXZ	; CLocalPlayer::ResetAllSyncAttributes
PUBLIC	?GetOptimumInCarSendRate@CLocalPlayer@@QAEHH@Z	; CLocalPlayer::GetOptimumInCarSendRate
PUBLIC	?GetOptimumOnFootSendRate@CLocalPlayer@@QAEHH@Z	; CLocalPlayer::GetOptimumOnFootSendRate
PUBLIC	?SendWastedNotification@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendWastedNotification
PUBLIC	?RequestClass@CLocalPlayer@@QAEXH@Z		; CLocalPlayer::RequestClass
PUBLIC	?RequestSpawn@CLocalPlayer@@QAEXXZ		; CLocalPlayer::RequestSpawn
PUBLIC	?SetSpawnInfo@CLocalPlayer@@QAEXPAU_PLAYER_SPAWN_INFO@@@Z ; CLocalPlayer::SetSpawnInfo
PUBLIC	?Spawn@CLocalPlayer@@QAEHXZ			; CLocalPlayer::Spawn
PUBLIC	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
PUBLIC	?Say@CLocalPlayer@@QAEXPAD@Z			; CLocalPlayer::Say
PUBLIC	?Msg@CLocalPlayer@@QAEXEPAD@Z			; CLocalPlayer::Msg
PUBLIC	?TeamMsg@CLocalPlayer@@QAEXPAD@Z		; CLocalPlayer::TeamMsg
PUBLIC	?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z ; CLocalPlayer::SendExitVehicleNotification
PUBLIC	?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z ; CLocalPlayer::SendEnterVehicleNotification
PUBLIC	?SetPlayerColor@CLocalPlayer@@QAEXK@Z		; CLocalPlayer::SetPlayerColor
PUBLIC	?GetPlayerColorAsRGBA@CLocalPlayer@@QAEKXZ	; CLocalPlayer::GetPlayerColorAsRGBA
PUBLIC	?GetPlayerColorAsARGB@CLocalPlayer@@QAEKXZ	; CLocalPlayer::GetPlayerColorAsARGB
PUBLIC	?ProcessOnFootWorldBounds@CLocalPlayer@@QAEXXZ	; CLocalPlayer::ProcessOnFootWorldBounds
PUBLIC	?ProcessInCarWorldBounds@CLocalPlayer@@QAEXXZ	; CLocalPlayer::ProcessInCarWorldBounds
PUBLIC	?SendStatsUpdate@CLocalPlayer@@QAEXXZ		; CLocalPlayer::SendStatsUpdate
PUBLIC	?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z	; CLocalPlayer::UpdateRemoteInterior
PUBLIC	?HandleClassSelectionOutcome@CLocalPlayer@@QAEXH@Z ; CLocalPlayer::HandleClassSelectionOutcome
PUBLIC	?HandleClassSelection@CLocalPlayer@@QAEXXZ	; CLocalPlayer::HandleClassSelection
PUBLIC	?ProcessClassSelection@CLocalPlayer@@QAEXXZ	; CLocalPlayer::ProcessClassSelection
PUBLIC	?IsClearedToSpawn@CLocalPlayer@@QAEHXZ		; CLocalPlayer::IsClearedToSpawn
PUBLIC	?CheckWeapons@CLocalPlayer@@QAEXXZ		; CLocalPlayer::CheckWeapons
PUBLIC	?ToggleSpectating@CLocalPlayer@@QAEXH@Z		; CLocalPlayer::ToggleSpectating
PUBLIC	?SpectateVehicle@CLocalPlayer@@QAEXG@Z		; CLocalPlayer::SpectateVehicle
PUBLIC	?SpectatePlayer@CLocalPlayer@@QAEXE@Z		; CLocalPlayer::SpectatePlayer
PUBLIC	?ProcessSpectating@CLocalPlayer@@QAEXXZ		; CLocalPlayer::ProcessSpectating
PUBLIC	?DetermineNumberOfPlayersInLocalRange@CLocalPlayer@@QAEHXZ ; CLocalPlayer::DetermineNumberOfPlayersInLocalRange
PUBLIC	?GetState@CRemotePlayer@@QAEEXZ			; CRemotePlayer::GetState
PUBLIC	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
PUBLIC	?IsActive@CRemotePlayer@@QAEHXZ			; CRemotePlayer::IsActive
PUBLIC	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z	; CPlayerPool::GetAt
PUBLIC	?GetSlotState@CPlayerPool@@QAEHE@Z		; CPlayerPool::GetSlotState
PUBLIC	?GetLocalPlayerID@CPlayerPool@@QAEEXZ		; CPlayerPool::GetLocalPlayerID
PUBLIC	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z	; CVehiclePool::GetAt
PUBLIC	?GetSlotState@CVehiclePool@@QAEHG@Z		; CVehiclePool::GetSlotState
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
PUBLIC	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
PUBLIC	?GetGameState@CNetGame@@QAEHXZ			; CNetGame::GetGameState
PUBLIC	?IsLanMode@CNetGame@@QAEHXZ			; CNetGame::IsLanMode
PUBLIC	?isEnabled@CCmdWindow@@QAEHXZ			; CCmdWindow::isEnabled
PUBLIC	??$Write@E@BitStream@RakNet@@QAEXE@Z		; RakNet::BitStream::Write<unsigned char>
PUBLIC	??$Write@H@BitStream@RakNet@@QAEXH@Z		; RakNet::BitStream::Write<int>
PUBLIC	??_C@_0M@KHFAPNLB@FollowPedSA?$AA@		; `string'
PUBLIC	??_C@_0CO@CGNDAHHF@Returning?5to?5class?5selection?5aft@ ; `string'
PUBLIC	??_C@_02NGLJAENH@aj?$AA@			; `string'
PUBLIC	??_C@_02GDBHHKJK@ag?$AA@			; `string'
PUBLIC	??_C@_02OEIPGGFF@ah?$AA@			; `string'
PUBLIC	??_C@_02MJGJPHHN@dk?$AA@			; `string'
PUBLIC	??_C@_02PNJEFHBE@ai?$AA@			; `string'
PUBLIC	??_C@_02EIDKCJFJ@ad?$AA@			; `string'
PUBLIC	??_C@_0BI@EMKICMBK@You?5cannot?5PM?5yourself?$CB?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FIEMNLKP@Enter?5a?5valid?5player?5ID?$CB?$AA@ ; `string'
PUBLIC	??_C@_02FBCBBIBI@ae?$AA@			; `string'
PUBLIC	??_C@_02HKAMELNL@af?$AA@			; `string'
PUBLIC	??_C@_02MPKCDFJG@ak?$AA@			; `string'
PUBLIC	??_C@_02IAODKDFB@al?$AA@			; `string'
PUBLIC	??_C@_0CD@ILLMAONE@Stay?5within?5the?5?$HOr?$HOworld?5boundri@ ; `string'
PUBLIC	??_C@_0DA@POOCGFKK@Use?5left?5and?5right?5arrow?5keys?5to@ ; `string'
PUBLIC	??_C@_0CD@ODENPMGA@Press?5SHIFT?5when?5ready?5to?5spawn?4@ ; `string'
PUBLIC	??_C@_0CB@IKBLLMGD@Class?5?$CFu?5Weapons?3?6?9?5?$CFs?6?9?5?$CFs?6?9?5?$CFs@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f800000
PUBLIC	__real@40900000
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@42480000
PUBLIC	__real@42700000
PUBLIC	__real@427c0000
PUBLIC	__real@42c80000
PUBLIC	__real@42fa0000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_sprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z:PROC	; CEntity::GetMatrix
EXTRN	?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z:PROC ; CEntity::GetMoveSpeedVector
EXTRN	?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z:PROC ; CEntity::SetMoveSpeedVector
EXTRN	?SetTurnSpeedVector@CEntity@@QAEXU_VECTOR@@@Z:PROC ; CEntity::SetTurnSpeedVector
EXTRN	?GetModelIndex@CEntity@@QAEIXZ:PROC		; CEntity::GetModelIndex
EXTRN	?TeleportTo@CEntity@@QAEXMMM@Z:PROC		; CEntity::TeleportTo
EXTRN	?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ:PROC ; CEntity::GetDistanceFromLocalPlayerPed
EXTRN	?EnforceWorldBoundries@CEntity@@QAEHMMMM@Z:PROC	; CEntity::EnforceWorldBoundries
EXTRN	?GetVehicleSubtype@CVehicle@@QAEIXZ:PROC	; CVehicle::GetVehicleSubtype
EXTRN	?GetHealth@CVehicle@@QAEMXZ:PROC		; CVehicle::GetHealth
EXTRN	?IsATrainPart@CVehicle@@QAEHXZ:PROC		; CVehicle::IsATrainPart
EXTRN	?HasTurret@CVehicle@@QAEHXZ:PROC		; CVehicle::HasTurret
EXTRN	?GetHydraThrusters@CVehicle@@QAEKXZ:PROC	; CVehicle::GetHydraThrusters
EXTRN	?GetTrainSpeed@CVehicle@@QAEMXZ:PROC		; CVehicle::GetTrainSpeed
EXTRN	?IsSirenOn@CVehicle@@QAEHXZ:PROC		; CVehicle::IsSirenOn
EXTRN	?GetLandingGearState@CVehicle@@QAE?AW4eLandingGearState@@XZ:PROC ; CVehicle::GetLandingGearState
EXTRN	?GetWheelPopped@CVehicle@@QAEEK@Z:PROC		; CVehicle::GetWheelPopped
EXTRN	?IsRCVehicle@CVehicle@@QAEHXZ:PROC		; CVehicle::IsRCVehicle
EXTRN	?IsOccupied@CVehicle@@QAEHXZ:PROC		; CVehicle::IsOccupied
EXTRN	?GameGetInternalAim@@YGPAU_CAMERA_AIM@@XZ:PROC	; GameGetInternalAim
EXTRN	?GameGetLocalPlayerCameraMode@@YGEXZ:PROC	; GameGetLocalPlayerCameraMode
EXTRN	?GameGetLocalPlayerCameraExtZoom@@YGMXZ:PROC	; GameGetLocalPlayerCameraExtZoom
EXTRN	?ResetForRespawn@CPlayerPed@@QAEXXZ:PROC	; CPlayerPed::ResetForRespawn
EXTRN	?SetInitialState@CPlayerPed@@QAEXXZ:PROC	; CPlayerPed::SetInitialState
EXTRN	?GetKeys@CPlayerPed@@QAEGPAG0@Z:PROC		; CPlayerPed::GetKeys
EXTRN	?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ:PROC ; CPlayerPed::GetCurrentAim
EXTRN	?GetCurrentWeapon@CPlayerPed@@QAEEXZ:PROC	; CPlayerPed::GetCurrentWeapon
EXTRN	?GetHealth@CPlayerPed@@QAEMXZ:PROC		; CPlayerPed::GetHealth
EXTRN	?SetHealth@CPlayerPed@@QAEXM@Z:PROC		; CPlayerPed::SetHealth
EXTRN	?GetArmour@CPlayerPed@@QAEMXZ:PROC		; CPlayerPed::GetArmour
EXTRN	?IsDead@CPlayerPed@@QAEHXZ:PROC			; CPlayerPed::IsDead
EXTRN	?IsInVehicle@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsInVehicle
EXTRN	?GetActionTrigger@CPlayerPed@@QAEEXZ:PROC	; CPlayerPed::GetActionTrigger
EXTRN	?GetAmmo@CPlayerPed@@QAEGXZ:PROC		; CPlayerPed::GetAmmo
EXTRN	?GetTargetRotation@CPlayerPed@@QAEMXZ:PROC	; CPlayerPed::GetTargetRotation
EXTRN	?SetTargetRotation@CPlayerPed@@QAEXM@Z:PROC	; CPlayerPed::SetTargetRotation
EXTRN	?GiveWeapon@CPlayerPed@@QAEXHH@Z:PROC		; CPlayerPed::GiveWeapon
EXTRN	?ClearAllWeapons@CPlayerPed@@QAEXXZ:PROC	; CPlayerPed::ClearAllWeapons
EXTRN	?SetArmedWeapon@CPlayerPed@@QAEXH@Z:PROC	; CPlayerPed::SetArmedWeapon
EXTRN	?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@XZ:PROC ; CPlayerPed::GetCurrentWeaponSlot
EXTRN	?EnterVehicle@CPlayerPed@@QAEXHH@Z:PROC		; CPlayerPed::EnterVehicle
EXTRN	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z:PROC ; CPlayerPed::RemoveFromVehicleAndPutAt
EXTRN	?IsAPassenger@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsAPassenger
EXTRN	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ:PROC ; CPlayerPed::GetGtaVehicle
EXTRN	?GetGtaContactVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ:PROC ; CPlayerPed::GetGtaContactVehicle
EXTRN	?GetVehicleSeatID@CPlayerPed@@QAEHXZ:PROC	; CPlayerPed::GetVehicleSeatID
EXTRN	?TogglePlayerControllable@CPlayerPed@@QAEXH@Z:PROC ; CPlayerPed::TogglePlayerControllable
EXTRN	?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z:PROC ; CPlayerPed::FindDeathReasonAndResponsiblePlayer
EXTRN	?RestartIfWastedAt@CPlayerPed@@QAEXPAU_VECTOR@@M@Z:PROC ; CPlayerPed::RestartIfWastedAt
EXTRN	?StartJetpack@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::StartJetpack
EXTRN	?IsInJetpackMode@CPlayerPed@@QAEHXZ:PROC	; CPlayerPed::IsInJetpackMode
EXTRN	?StartPassengerDriveByMode@CPlayerPed@@QAEHXZ:PROC ; CPlayerPed::StartPassengerDriveByMode
EXTRN	?SetModelIndex@CPlayerPed@@QAEXI@Z:PROC		; CPlayerPed::SetModelIndex
EXTRN	?SetDead@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::SetDead
EXTRN	?ExtinguishFire@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::ExtinguishFire
EXTRN	?ResetDamageEntity@CPlayerPed@@QAEXXZ:PROC	; CPlayerPed::ResetDamageEntity
EXTRN	??0CPlayerPed@@QAE@XZ:PROC			; CPlayerPed::CPlayerPed
EXTRN	?StartDancing@CPlayerPed@@QAEXH@Z:PROC		; CPlayerPed::StartDancing
EXTRN	?StopDancing@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::StopDancing
EXTRN	?IsDancing@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsDancing
EXTRN	?ProcessDancing@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::ProcessDancing
EXTRN	?HandsUp@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::HandsUp
EXTRN	?HasHandsUp@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::HasHandsUp
EXTRN	?StartPissing@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::StartPissing
EXTRN	?StopPissing@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::StopPissing
EXTRN	?IsPissing@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsPissing
EXTRN	?ApplyCommandTask@CPlayerPed@@QAEXPADHHHPAU_VECTOR@@HMHHH@Z:PROC ; CPlayerPed::ApplyCommandTask
EXTRN	?ToggleCellphone@CPlayerPed@@QAEXH@Z:PROC	; CPlayerPed::ToggleCellphone
EXTRN	?IsCellphoneEnabled@CPlayerPed@@QAEHXZ:PROC	; CPlayerPed::IsCellphoneEnabled
EXTRN	?GetAimZ@CPlayerPed@@QAEMXZ:PROC		; CPlayerPed::GetAimZ
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	?SetBehindPlayer@CCamera@@QAEXXZ:PROC		; CCamera::SetBehindPlayer
EXTRN	?SetPosition@CCamera@@QAEXMMMMMM@Z:PROC		; CCamera::SetPosition
EXTRN	?LookAtPoint@CCamera@@QAEXMMMH@Z:PROC		; CCamera::LookAtPoint
EXTRN	?Restore@CCamera@@QAEXXZ:PROC			; CCamera::Restore
EXTRN	?GetMatrix@CCamera@@QAEXPAU_MATRIX4X4@@@Z:PROC	; CCamera::GetMatrix
EXTRN	?DisplayHud@CGame@@QAEXH@Z:PROC			; CGame::DisplayHud
EXTRN	?SetMaxStats@CGame@@QAEXXZ:PROC			; CGame::SetMaxStats
EXTRN	?DisableTrainTraffic@CGame@@QAEXXZ:PROC		; CGame::DisableTrainTraffic
EXTRN	?RefreshStreamingAt@CGame@@QAEXMM@Z:PROC	; CGame::RefreshStreamingAt
EXTRN	?DisplayGameText@CGame@@QAEXPADHH@Z:PROC	; CGame::DisplayGameText
EXTRN	?PlaySoundA@CGame@@QAEXHMMM@Z:PROC		; CGame::PlaySoundA
EXTRN	?EnableZoneNames@CGame@@QAEXE@Z:PROC		; CGame::EnableZoneNames
EXTRN	?UpdateCheckpoints@CGame@@QAEXXZ:PROC		; CGame::UpdateCheckpoints
EXTRN	?GetLocalMoney@CGame@@QAEHXZ:PROC		; CGame::GetLocalMoney
EXTRN	?GetActiveInterior@CGame@@QAEEXZ:PROC		; CGame::GetActiveInterior
EXTRN	?GetWeaponName@CGame@@QAEQADH@Z:PROC		; CGame::GetWeaponName
EXTRN	??0BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::BitStream
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?Write@BitStream@RakNet@@QAEXPBDH@Z:PROC	; RakNet::BitStream::Write
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z:PROC	; RakNet::BitStream::WriteBits
EXTRN	?GetDistanceFromLocalPlayer@CRemotePlayer@@QAEMXZ:PROC ; CRemotePlayer::GetDistanceFromLocalPlayer
EXTRN	?GetCount@CPlayerPool@@QAEEXZ:PROC		; CPlayerPool::GetCount
EXTRN	?FindNearestToLocalPlayerPed@CVehiclePool@@QAEHXZ:PROC ; CVehiclePool::FindNearestToLocalPlayerPed
EXTRN	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z:PROC ; CVehiclePool::FindIDFromGtaPtr
EXTRN	?FindGtaIDFromGtaPtr@CVehiclePool@@QAEHPAU_VEHICLE_TYPE@@@Z:PROC ; CVehiclePool::FindGtaIDFromGtaPtr
EXTRN	?AddInfoMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddInfoMessage
EXTRN	?SetSpawnText@CSpawnScreen@@QAEXPAD@Z:PROC	; CSpawnScreen::SetSpawnText
EXTRN	?UnFuck@@YAXKH@Z:PROC				; UnFuck
EXTRN	?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z:PROC ; CompressNormalVector
EXTRN	?SetRadarColor@@YGXEK@Z:PROC			; SetRadarColor
EXTRN	?TranslateColorCodeToRGBA@@YGKH@Z:PROC		; TranslateColorCodeToRGBA
EXTRN	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ:PROC ; GameGetInternalKeys
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pChatWindow@@3PAVCChatWindow@@A:DWORD		; pChatWindow
EXTRN	?pCmdWindow@@3PAVCCmdWindow@@A:DWORD		; pCmdWindow
EXTRN	?pSpawnScreen@@3PAVCSpawnScreen@@A:DWORD	; pSpawnScreen
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	?iTimesDataModified@@3HA:DWORD			; iTimesDataModified
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@42fa0000
CONST	SEGMENT
__real@42fa0000 DD 042fa0000r			; 125
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@427c0000
CONST	SEGMENT
__real@427c0000 DD 0427c0000r			; 63
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40900000
CONST	SEGMENT
__real@40900000 DD 040900000r			; 4.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CB@IKBLLMGD@Class?5?$CFu?5Weapons?3?6?9?5?$CFs?6?9?5?$CFs?6?9?5?$CFs@
CONST	SEGMENT
??_C@_0CB@IKBLLMGD@Class?5?$CFu?5Weapons?3?6?9?5?$CFs?6?9?5?$CFs?6?9?5?$CFs@ DB 'C'
	DB	'lass %u Weapons:', 0aH, '- %s', 0aH, '- %s', 0aH, '- %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@ODENPMGA@Press?5SHIFT?5when?5ready?5to?5spawn?4@
CONST	SEGMENT
??_C@_0CD@ODENPMGA@Press?5SHIFT?5when?5ready?5to?5spawn?4@ DB 'Press SHIF'
	DB	'T when ready to spawn.', 0aH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@POOCGFKK@Use?5left?5and?5right?5arrow?5keys?5to@
CONST	SEGMENT
??_C@_0DA@POOCGFKK@Use?5left?5and?5right?5arrow?5keys?5to@ DB 'Use left a'
	DB	'nd right arrow keys to select class.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@ILLMAONE@Stay?5within?5the?5?$HOr?$HOworld?5boundri@
CONST	SEGMENT
??_C@_0CD@ILLMAONE@Stay?5within?5the?5?$HOr?$HOworld?5boundri@ DB 'Stay w'
	DB	'ithin the ~r~world boundries', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAODKDFB@al?$AA@
CONST	SEGMENT
??_C@_02IAODKDFB@al?$AA@ DB 'al', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPKCDFJG@ak?$AA@
CONST	SEGMENT
??_C@_02MPKCDFJG@ak?$AA@ DB 'ak', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HKAMELNL@af?$AA@
CONST	SEGMENT
??_C@_02HKAMELNL@af?$AA@ DB 'af', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FBCBBIBI@ae?$AA@
CONST	SEGMENT
??_C@_02FBCBBIBI@ae?$AA@ DB 'ae', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FIEMNLKP@Enter?5a?5valid?5player?5ID?$CB?$AA@
CONST	SEGMENT
??_C@_0BJ@FIEMNLKP@Enter?5a?5valid?5player?5ID?$CB?$AA@ DB 'Enter a valid'
	DB	' player ID!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EMKICMBK@You?5cannot?5PM?5yourself?$CB?$AA@
CONST	SEGMENT
??_C@_0BI@EMKICMBK@You?5cannot?5PM?5yourself?$CB?$AA@ DB 'You cannot PM y'
	DB	'ourself!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02EIDKCJFJ@ad?$AA@
CONST	SEGMENT
??_C@_02EIDKCJFJ@ad?$AA@ DB 'ad', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNJEFHBE@ai?$AA@
CONST	SEGMENT
??_C@_02PNJEFHBE@ai?$AA@ DB 'ai', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MJGJPHHN@dk?$AA@
CONST	SEGMENT
??_C@_02MJGJPHHN@dk?$AA@ DB 'dk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OEIPGGFF@ah?$AA@
CONST	SEGMENT
??_C@_02OEIPGGFF@ah?$AA@ DB 'ah', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GDBHHKJK@ag?$AA@
CONST	SEGMENT
??_C@_02GDBHHKJK@ag?$AA@ DB 'ag', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NGLJAENH@aj?$AA@
CONST	SEGMENT
??_C@_02NGLJAENH@aj?$AA@ DB 'aj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CGNDAHHF@Returning?5to?5class?5selection?5aft@
CONST	SEGMENT
??_C@_0CO@CGNDAHHF@Returning?5to?5class?5selection?5aft@ DB 'Returning to'
	DB	' class selection after next death', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KHFAPNLB@FollowPedSA?$AA@
CONST	SEGMENT
??_C@_0M@KHFAPNLB@FollowPedSA?$AA@ DB 'FollowPedSA', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcessSpectating@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpectating@CLocalPlayer@@QAEXXZ$0
__ehfuncinfo$?ProcessSpectating@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcessSpectating@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckWeapons@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckWeapons@CLocalPlayer@@QAEXXZ$0
__ehfuncinfo$?CheckWeapons@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckWeapons@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z$0
__ehfuncinfo$?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendStatsUpdate@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendStatsUpdate@CLocalPlayer@@QAEXXZ$0
__ehfuncinfo$?SendStatsUpdate@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendStatsUpdate@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z$0
__ehfuncinfo$?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z$0
__ehfuncinfo$?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TeamMsg@CLocalPlayer@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TeamMsg@CLocalPlayer@@QAEXPAD@Z$0
__ehfuncinfo$?TeamMsg@CLocalPlayer@@QAEXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TeamMsg@CLocalPlayer@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Msg@CLocalPlayer@@QAEXEPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Msg@CLocalPlayer@@QAEXEPAD@Z$0
__ehfuncinfo$?Msg@CLocalPlayer@@QAEXEPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Msg@CLocalPlayer@@QAEXEPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Say@CLocalPlayer@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Say@CLocalPlayer@@QAEXPAD@Z$0
__ehfuncinfo$?Say@CLocalPlayer@@QAEXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Say@CLocalPlayer@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Spawn@CLocalPlayer@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Spawn@CLocalPlayer@@QAEHXZ$0
__ehfuncinfo$?Spawn@CLocalPlayer@@QAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Spawn@CLocalPlayer@@QAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RequestSpawn@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RequestSpawn@CLocalPlayer@@QAEXXZ$0
__ehfuncinfo$?RequestSpawn@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RequestSpawn@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RequestClass@CLocalPlayer@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RequestClass@CLocalPlayer@@QAEXH@Z$0
__ehfuncinfo$?RequestClass@CLocalPlayer@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RequestClass@CLocalPlayer@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendWastedNotification@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendWastedNotification@CLocalPlayer@@QAEXXZ$0
__ehfuncinfo$?SendWastedNotification@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendWastedNotification@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendAimSyncData@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendAimSyncData@CLocalPlayer@@QAEXXZ$0
__ehfuncinfo$?SendAimSyncData@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendAimSyncData@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ$0
__ehfuncinfo$?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ$1
__ehfuncinfo$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ$0
__ehfuncinfo$?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0
__ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@H@BitStream@RakNet@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@H@BitStream@RakNet@@QAEXH@Z PROC		; RakNet::BitStream::Write<int>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@H@BitStream@RakNet@@QAEXH@Z ENDP		; RakNet::BitStream::Write<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@E@BitStream@RakNet@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 1
??$Write@E@BitStream@RakNet@@QAEXE@Z PROC		; RakNet::BitStream::Write<unsigned char>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@E@BitStream@RakNet@@QAEXE@Z ENDP		; RakNet::BitStream::Write<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\cmdwindow.h
;	COMDAT ?isEnabled@CCmdWindow@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isEnabled@CCmdWindow@@QAEHXZ PROC			; CCmdWindow::isEnabled, COMDAT
; _this$ = ecx

; 54   : 	BOOL isEnabled() { return m_bEnabled; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+1568]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?isEnabled@CCmdWindow@@QAEHXZ ENDP			; CCmdWindow::isEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?IsLanMode@CNetGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsLanMode@CNetGame@@QAEHXZ PROC			; CNetGame::IsLanMode, COMDAT
; _this$ = ecx

; 107  : 	BOOL IsLanMode() { return m_bLanMode; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+94]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLanMode@CNetGame@@QAEHXZ ENDP			; CNetGame::IsLanMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetGameState@CNetGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGameState@CNetGame@@QAEHXZ PROC			; CNetGame::GetGameState, COMDAT
; _this$ = ecx

; 105  : 	int GetGameState() { return m_iGameState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+90]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameState@CNetGame@@QAEHXZ ENDP			; CNetGame::GetGameState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ PROC ; CNetGame::GetRakClient, COMDAT
; _this$ = ecx

; 103  : 	RakClientInterface * GetRakClient() { return m_pRakClient; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ENDP ; CNetGame::GetRakClient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ PROC	; CNetGame::GetVehiclePool, COMDAT
; _this$ = ecx

; 97   : 	CVehiclePool * GetVehiclePool() { return m_pVehiclePool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ENDP	; CNetGame::GetVehiclePool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\vehiclepool.h
;	COMDAT ?GetSlotState@CVehiclePool@@QAEHG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_VehicleID$ = 8						; size = 2
?GetSlotState@CVehiclePool@@QAEHG@Z PROC		; CVehiclePool::GetSlotState, COMDAT
; _this$ = ecx

; 64   : 	BOOL GetSlotState(VEHICLEID VehicleID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		if(VehicleID >= MAX_VEHICLES) { return FALSE; }

	movzx	eax, WORD PTR _VehicleID$[ebp]
	cmp	eax, 702				; 000002beH
	jl	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 66   : 		return m_bVehicleSlotState[VehicleID];

	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
$LN2@GetSlotSta:

; 67   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CVehiclePool@@QAEHG@Z ENDP		; CVehiclePool::GetSlotState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\vehiclepool.h
;	COMDAT ?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_VehicleID$ = 8						; size = 2
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z PROC		; CVehiclePool::GetAt, COMDAT
; _this$ = ecx

; 58   : 	CVehicle* GetAt(VEHICLEID VehicleID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(VehicleID >= MAX_VEHICLES || !m_bVehicleSlotState[VehicleID]) { return NULL; }

	movzx	eax, WORD PTR _VehicleID$[ebp]
	cmp	eax, 702				; 000002beH
	jge	SHORT $LN1@GetAt
	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN2@GetAt
$LN1@GetAt:
	xor	eax, eax
	jmp	SHORT $LN3@GetAt
$LN2@GetAt:

; 60   : 		return m_pVehicles[VehicleID];

	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+2808]
$LN3@GetAt:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ENDP		; CVehiclePool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayerID@CPlayerPool@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayerID@CPlayerPool@@QAEEXZ PROC		; CPlayerPool::GetLocalPlayerID, COMDAT
; _this$ = ecx

; 68   : 	BYTE GetLocalPlayerID() { return m_byteLocalPlayerID; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayerID@CPlayerPool@@QAEEXZ ENDP		; CPlayerPool::GetLocalPlayerID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetSlotState@CPlayerPool@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetSlotState@CPlayerPool@@QAEHE@Z PROC			; CPlayerPool::GetSlotState, COMDAT
; _this$ = ecx

; 58   : 	BOOL GetSlotState(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(bytePlayerID > MAX_PLAYERS) { return FALSE; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 60   : 		return m_bPlayerSlotState[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+13]
$LN2@GetSlotSta:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CPlayerPool@@QAEHE@Z ENDP			; CPlayerPool::GetSlotState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerPool::GetAt, COMDAT
; _this$ = ecx

; 52   : 	CRemotePlayer* GetAt(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if(bytePlayerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 54   : 		return m_pPlayers[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+829]
$LN2@GetAt:

; 55   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerPool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?IsActive@CRemotePlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsActive@CRemotePlayer@@QAEHXZ PROC			; CRemotePlayer::IsActive, COMDAT
; _this$ = ecx

; 104  : 	BOOL IsActive() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		if(m_byteState != PLAYER_STATE_NONE && m_byteState != PLAYER_STATE_SPECTATING) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+315]
	test	ecx, ecx
	je	SHORT $LN1@IsActive
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+315]
	cmp	ecx, 9
	je	SHORT $LN1@IsActive

; 106  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@IsActive
$LN1@IsActive:

; 107  : 		}
; 108  : 		return FALSE;

	xor	eax, eax
$LN2@IsActive:

; 109  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsActive@CRemotePlayer@@QAEHXZ ENDP			; CRemotePlayer::IsActive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ PROC	; CRemotePlayer::GetPlayerPed, COMDAT
; _this$ = ecx

; 102  : 	CPlayerPed * GetPlayerPed() { return m_pPlayerPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ENDP	; CRemotePlayer::GetPlayerPed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetState@CRemotePlayer@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetState@CRemotePlayer@@QAEEXZ PROC			; CRemotePlayer::GetState, COMDAT
; _this$ = ecx

; 83   : 	BYTE GetState() { return m_byteState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+315]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@CRemotePlayer@@QAEEXZ ENDP			; CRemotePlayer::GetState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?DetermineNumberOfPlayersInLocalRange@CLocalPlayer@@QAEHXZ
_TEXT	SEGMENT
_pPlayerPool$ = -56					; size = 4
_fDistance$ = -44					; size = 4
_x$ = -29						; size = 1
_iRet$ = -20						; size = 4
_this$ = -8						; size = 4
?DetermineNumberOfPlayersInLocalRange@CLocalPlayer@@QAEHXZ PROC ; CLocalPlayer::DetermineNumberOfPlayersInLocalRange, COMDAT
; _this$ = ecx

; 1403 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1404 : 	int iRet=0;

	mov	DWORD PTR _iRet$[ebp], 0

; 1405 : 	BYTE x=0; float fDistance;

	mov	BYTE PTR _x$[ebp], 0

; 1406 : 	CPlayerPool *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 1407 : 
; 1408 : 	// We only want to perform this operation
; 1409 : 	// once every few cycles. Doing it every frame
; 1410 : 	// would be a little bit too CPU intensive.
; 1411 : 
; 1412 : 	if(iCyclesUntilNextCount) {

	cmp	DWORD PTR ?iCyclesUntilNextCount@@3HA, 0 ; iCyclesUntilNextCount
	je	SHORT $LN6@DetermineN

; 1413 : 		iCyclesUntilNextCount--;

	mov	eax, DWORD PTR ?iCyclesUntilNextCount@@3HA ; iCyclesUntilNextCount
	sub	eax, 1
	mov	DWORD PTR ?iCyclesUntilNextCount@@3HA, eax ; iCyclesUntilNextCount

; 1414 : 		return iNumPlayersInRange;

	mov	eax, DWORD PTR ?iNumPlayersInRange@@3HA	; iNumPlayersInRange
	jmp	SHORT $LN7@DetermineN
$LN6@DetermineN:

; 1415 : 	}
; 1416 : 
; 1417 : 	// This part is only processed when iCyclesUntilNextCount is 0
; 1418 : 	iCyclesUntilNextCount = 30;

	mov	DWORD PTR ?iCyclesUntilNextCount@@3HA, 30 ; iCyclesUntilNextCount, 0000001eH

; 1419 : 	iNumPlayersInRange = 0;

	mov	DWORD PTR ?iNumPlayersInRange@@3HA, 0	; iNumPlayersInRange

; 1420 : 
; 1421 : 	if(pPlayerPool) {		

	cmp	DWORD PTR _pPlayerPool$[ebp], 0
	je	SHORT $LN3@DetermineN
$LN4@DetermineN:

; 1422 : 		while(x!=MAX_PLAYERS) {

	movzx	eax, BYTE PTR _x$[ebp]
	cmp	eax, 204				; 000000ccH
	je	SHORT $LN3@DetermineN

; 1423 : 			if(pPlayerPool->GetSlotState(x)) {

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	SHORT $LN1@DetermineN

; 1424 : 				fDistance = pPlayerPool->GetAt(x)->GetDistanceFromLocalPlayer();

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?GetDistanceFromLocalPlayer@CRemotePlayer@@QAEMXZ ; CRemotePlayer::GetDistanceFromLocalPlayer
	fstp	DWORD PTR _fDistance$[ebp]

; 1425 : 				if(fDistance <= 125.0f) {

	movss	xmm0, DWORD PTR __real@42fa0000
	comiss	xmm0, DWORD PTR _fDistance$[ebp]
	jb	SHORT $LN1@DetermineN

; 1426 : 					iNumPlayersInRange++;

	mov	eax, DWORD PTR ?iNumPlayersInRange@@3HA	; iNumPlayersInRange
	add	eax, 1
	mov	DWORD PTR ?iNumPlayersInRange@@3HA, eax	; iNumPlayersInRange
$LN1@DetermineN:

; 1427 : 				}
; 1428 : 			}
; 1429 : 			x++;

	mov	al, BYTE PTR _x$[ebp]
	add	al, 1
	mov	BYTE PTR _x$[ebp], al

; 1430 : 		}

	jmp	SHORT $LN4@DetermineN
$LN3@DetermineN:

; 1431 : 	}
; 1432 : 
; 1433 : 	return iNumPlayersInRange;

	mov	eax, DWORD PTR ?iNumPlayersInRange@@3HA	; iNumPlayersInRange
$LN7@DetermineN:

; 1434 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DetermineNumberOfPlayersInLocalRange@CLocalPlayer@@QAEHXZ ENDP ; CLocalPlayer::DetermineNumberOfPlayersInLocalRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?ProcessSpectating@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv128 = -716						; size = 4
_dwGTAId$2 = -516					; size = 4
_pVehicle$3 = -504					; size = 4
_pPlayerPed$4 = -492					; size = 4
_dwGTAId$5 = -480					; size = 4
_pVehiclePool$ = -468					; size = 4
_pPlayerPool$ = -456					; size = 4
_wKeys$ = -444						; size = 2
_udAnalog$ = -432					; size = 2
_lrAnalog$ = -420					; size = 2
_matPos$ = -408						; size = 64
_spSync$ = -336						; size = 18
_bsSpectatorSync$ = -308				; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ProcessSpectating@CLocalPlayer@@QAEXXZ PROC		; CLocalPlayer::ProcessSpectating, COMDAT
; _this$ = ecx

; 1439 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ProcessSpectating@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 704				; 000002c0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 176				; 000000b0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1440 : 	RakNet::BitStream bsSpectatorSync;

	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1441 : 	SPECTATOR_SYNC_DATA spSync;
; 1442 : 	MATRIX4X4 matPos;
; 1443 : 
; 1444 : 	WORD lrAnalog,udAnalog;
; 1445 : 	WORD wKeys = m_pPlayerPed->GetKeys(&lrAnalog,&udAnalog);

	lea	eax, DWORD PTR _udAnalog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lrAnalog$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetKeys@CPlayerPed@@QAEGPAG0@Z		; CPlayerPed::GetKeys
	mov	WORD PTR _wKeys$[ebp], ax

; 1446 : 	pGame->GetCamera()->GetMatrix(&matPos);

	lea	eax, DWORD PTR _matPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	ecx, eax
	call	?GetMatrix@CCamera@@QAEXPAU_MATRIX4X4@@@Z ; CCamera::GetMatrix

; 1447 : 
; 1448 : 	CPlayerPool *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 1449 : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 1450 : 
; 1451 : 	if(!pPlayerPool || !pVehiclePool) return;

	cmp	DWORD PTR _pPlayerPool$[ebp], 0
	je	SHORT $LN15@ProcessSpe
	cmp	DWORD PTR _pVehiclePool$[ebp], 0
	jne	SHORT $LN16@ProcessSpe
$LN15@ProcessSpe:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN17@ProcessSpe
$LN16@ProcessSpe:

; 1452 : 	
; 1453 : 	spSync.vecPos.X = matPos.pos.X;

	movss	xmm0, DWORD PTR _matPos$[ebp+48]
	movss	DWORD PTR _spSync$[ebp+6], xmm0

; 1454 : 	spSync.vecPos.Y = matPos.pos.Y;

	movss	xmm0, DWORD PTR _matPos$[ebp+52]
	movss	DWORD PTR _spSync$[ebp+10], xmm0

; 1455 : 	spSync.vecPos.Z = matPos.pos.Z;

	movss	xmm0, DWORD PTR _matPos$[ebp+56]
	movss	DWORD PTR _spSync$[ebp+14], xmm0

; 1456 : 	spSync.lrAnalog = lrAnalog;

	mov	ax, WORD PTR _lrAnalog$[ebp]
	mov	WORD PTR _spSync$[ebp], ax

; 1457 : 	spSync.udAnalog = udAnalog;

	mov	ax, WORD PTR _udAnalog$[ebp]
	mov	WORD PTR _spSync$[ebp+2], ax

; 1458 : 	spSync.wKeys = wKeys;

	mov	ax, WORD PTR _wKeys$[ebp]
	mov	WORD PTR _spSync$[ebp+4], ax

; 1459 : 
; 1460 : 	if((GetTickCount() - m_dwLastSendSpecTick) > 200) {

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+215]
	cmp	eax, 200				; 000000c8H
	jbe	SHORT $LN14@ProcessSpe

; 1461 : 		m_dwLastSendSpecTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+215], eax

; 1462 : 		bsSpectatorSync.Write((BYTE)ID_SPECTATOR_SYNC);

	push	104					; 00000068H
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1463 : 		bsSpectatorSync.Write((PCHAR)&spSync,sizeof(SPECTATOR_SYNC_DATA));

	push	18					; 00000012H
	lea	eax, DWORD PTR _spSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 1464 : 		pNetGame->GetRakClient()->Send(&bsSpectatorSync,HIGH_PRIORITY,UNRELIABLE,0);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv128[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	1
	lea	eax, DWORD PTR _bsSpectatorSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv128[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv128[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@ProcessSpe:

; 1465 : 	}
; 1466 : 	
; 1467 : 	pGame->DisplayHud(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayHud@CGame@@QAEXH@Z		; CGame::DisplayHud

; 1468 : 
; 1469 : 	m_pPlayerPed->SetHealth(100.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetHealth@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetHealth

; 1470 : 	GetPlayerPed()->TeleportTo(spSync.vecPos.X, spSync.vecPos.Y, spSync.vecPos.Z + 20.0f);

	movss	xmm0, DWORD PTR _spSync$[ebp+14]
	addss	xmm0, DWORD PTR __real@41a00000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _spSync$[ebp+10]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _spSync$[ebp+6]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
	mov	ecx, eax
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo

; 1471 : 	
; 1472 : 	// HANDLE SPECTATE PLAYER LEFT THE SERVER
; 1473 : 	if (m_byteSpectateType == SPECTATE_TYPE_PLAYER &&
; 1474 : 		!pPlayerPool->GetSlotState((BYTE)m_SpectateID)) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	cmp	ecx, 1
	jne	SHORT $LN13@ProcessSpe
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	jne	SHORT $LN13@ProcessSpe

; 1475 : 			m_byteSpectateType = SPECTATE_TYPE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+26], 0

; 1476 : 			m_bSpectateProcessed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+31], 0
$LN13@ProcessSpe:

; 1477 : 	}
; 1478 : 
; 1479 : 	// HANDLE SPECTATE PLAYER IS NO LONGER ACTIVE (ie Died)
; 1480 : 	if (m_byteSpectateType == SPECTATE_TYPE_PLAYER &&
; 1481 : 		pPlayerPool->GetSlotState((BYTE)m_SpectateID) &&
; 1482 : 		(!pPlayerPool->GetAt((BYTE)m_SpectateID)->IsActive() ||
; 1483 : 		pPlayerPool->GetAt((BYTE)m_SpectateID)->GetState() == PLAYER_STATE_WASTED)) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	cmp	ecx, 1
	jne	SHORT $LN12@ProcessSpe
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	SHORT $LN12@ProcessSpe
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?IsActive@CRemotePlayer@@QAEHXZ		; CRemotePlayer::IsActive
	test	eax, eax
	je	SHORT $LN11@ProcessSpe
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?GetState@CRemotePlayer@@QAEEXZ		; CRemotePlayer::GetState
	movzx	edx, al
	cmp	edx, 7
	jne	SHORT $LN12@ProcessSpe
$LN11@ProcessSpe:

; 1484 : 			m_byteSpectateType = SPECTATE_TYPE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+26], 0

; 1485 : 			m_bSpectateProcessed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+31], 0
$LN12@ProcessSpe:

; 1486 : 	}
; 1487 : 
; 1488 : 	if (m_bSpectateProcessed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+31], 0
	je	SHORT $LN10@ProcessSpe
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN17@ProcessSpe
$LN10@ProcessSpe:

; 1489 : 
; 1490 : 	if (m_byteSpectateType == SPECTATE_TYPE_NONE)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	test	ecx, ecx
	jne	$LN9@ProcessSpe

; 1491 : 	{
; 1492 : 		GetPlayerPed()->RemoveFromVehicleAndPutAt(0.0f, 0.0f, 10.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
	mov	ecx, eax
	call	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ; CPlayerPed::RemoveFromVehicleAndPutAt

; 1493 : 		pGame->GetCamera()->SetPosition(50.0f, 50.0f, 50.0f, 0.0f, 0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	ecx, eax
	call	?SetPosition@CCamera@@QAEXMMMMMM@Z	; CCamera::SetPosition

; 1494 : 		pGame->GetCamera()->LookAtPoint(60.0f, 60.0f, 50.0f, 2);

	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@42480000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	ecx, eax
	call	?LookAtPoint@CCamera@@QAEXMMMH@Z	; CCamera::LookAtPoint

; 1495 : 		m_bSpectateProcessed = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+31], 1
	jmp	$LN1@ProcessSpe
$LN9@ProcessSpe:

; 1496 : 	}
; 1497 : 	else if (m_byteSpectateType == SPECTATE_TYPE_PLAYER)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	cmp	ecx, 1
	jne	$LN7@ProcessSpe

; 1498 : 	{
; 1499 : 		DWORD dwGTAId = 0;

	mov	DWORD PTR _dwGTAId$5[ebp], 0

; 1500 : 		CPlayerPed *pPlayerPed = NULL;

	mov	DWORD PTR _pPlayerPed$4[ebp], 0

; 1501 : 
; 1502 : 		if (pPlayerPool->GetSlotState((BYTE)m_SpectateID)) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	SHORT $LN5@ProcessSpe

; 1503 : 			pPlayerPed = pPlayerPool->GetAt((BYTE)m_SpectateID)->GetPlayerPed();

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
	mov	DWORD PTR _pPlayerPed$4[ebp], eax

; 1504 : 			if(pPlayerPed) {

	cmp	DWORD PTR _pPlayerPed$4[ebp], 0
	je	SHORT $LN5@ProcessSpe

; 1505 : 				dwGTAId = pPlayerPed->m_dwGTAId;

	mov	eax, DWORD PTR _pPlayerPed$4[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _dwGTAId$5[ebp], ecx

; 1506 : 				//pChatWindow->AddDebugMessage("Spectating Player: 0x%X", dwGTAId);
; 1507 : 				ScriptCommand(&camera_on_actor, dwGTAId, m_byteSpectateMode, 2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	push	ecx
	mov	edx, DWORD PTR _dwGTAId$5[ebp]
	push	edx
	push	OFFSET _camera_on_actor
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H

; 1508 : 				m_bSpectateProcessed = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+31], 1
$LN5@ProcessSpe:

; 1509 : 			}
; 1510 : 		}
; 1511 : 	}

	jmp	$LN1@ProcessSpe
$LN7@ProcessSpe:

; 1512 : 	else if (m_byteSpectateType == SPECTATE_TYPE_VEHICLE)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+26]
	cmp	ecx, 2
	jne	$LN1@ProcessSpe

; 1513 : 	{
; 1514 : 		CVehicle *pVehicle = NULL;

	mov	DWORD PTR _pVehicle$3[ebp], 0

; 1515 : 		DWORD dwGTAId = 0;

	mov	DWORD PTR _dwGTAId$2[ebp], 0

; 1516 : 
; 1517 : 		if (pVehiclePool->GetSlotState((VEHICLEID)m_SpectateID)) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+27]
	push	ecx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetSlotState@CVehiclePool@@QAEHG@Z	; CVehiclePool::GetSlotState
	test	eax, eax
	je	SHORT $LN1@ProcessSpe

; 1518 : 			pVehicle = pVehiclePool->GetAt((VEHICLEID)m_SpectateID);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+27]
	push	ecx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$3[ebp], eax

; 1519 : 			if(pVehicle) {

	cmp	DWORD PTR _pVehicle$3[ebp], 0
	je	SHORT $LN1@ProcessSpe

; 1520 : 				dwGTAId = pVehicle->m_dwGTAId;

	mov	eax, DWORD PTR _pVehicle$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _dwGTAId$2[ebp], ecx

; 1521 : 				//pChatWindow->AddDebugMessage("Spectating Vehicle: 0x%X", dwGTAId);
; 1522 : 				ScriptCommand(&camera_on_vehicle, dwGTAId, m_byteSpectateMode, 2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	push	ecx
	mov	edx, DWORD PTR _dwGTAId$2[ebp]
	push	edx
	push	OFFSET _camera_on_vehicle
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H

; 1523 : 				m_bSpectateProcessed = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+31], 1
$LN1@ProcessSpe:

; 1524 : 			}
; 1525 : 		}
; 1526 : 	}
; 1527 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN17@ProcessSpe:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@ProcessSpe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN27@ProcessSpe:
	DD	5
	DD	$LN26@ProcessSpe
$LN26@ProcessSpe:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN20@ProcessSpe
	DD	-336					; fffffeb0H
	DD	18					; 00000012H
	DD	$LN21@ProcessSpe
	DD	-408					; fffffe68H
	DD	64					; 00000040H
	DD	$LN22@ProcessSpe
	DD	-420					; fffffe5cH
	DD	2
	DD	$LN23@ProcessSpe
	DD	-432					; fffffe50H
	DD	2
	DD	$LN24@ProcessSpe
$LN24@ProcessSpe:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN23@ProcessSpe:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN22@ProcessSpe:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN21@ProcessSpe:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN20@ProcessSpe:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessSpectating@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ProcessSpectating@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-720]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ProcessSpectating@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessSpectating@CLocalPlayer@@QAEXXZ ENDP		; CLocalPlayer::ProcessSpectating
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SpectatePlayer@CLocalPlayer@@QAEXE@Z
_TEXT	SEGMENT
_pPlayerPool$ = -20					; size = 4
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?SpectatePlayer@CLocalPlayer@@QAEXE@Z PROC		; CLocalPlayer::SpectatePlayer, COMDAT
; _this$ = ecx

; 1560 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1561 : 	CPlayerPool *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 1562 : 
; 1563 : 	//pChatWindow->AddDebugMessage("SpectatePlayer(%u)",bytePlayerID);
; 1564 : 
; 1565 : 	if (pPlayerPool && pPlayerPool->GetSlotState(bytePlayerID)) {

	cmp	DWORD PTR _pPlayerPool$[ebp], 0
	je	SHORT $LN3@SpectatePl
	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	SHORT $LN3@SpectatePl

; 1566 : 		if (pPlayerPool->GetAt(bytePlayerID)->GetState() != PLAYER_STATE_NONE
; 1567 : 			&& pPlayerPool->GetAt(bytePlayerID)->GetState() != PLAYER_STATE_WASTED) {

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?GetState@CRemotePlayer@@QAEEXZ		; CRemotePlayer::GetState
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@SpectatePl
	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?GetState@CRemotePlayer@@QAEEXZ		; CRemotePlayer::GetState
	movzx	ecx, al
	cmp	ecx, 7
	je	SHORT $LN3@SpectatePl

; 1568 : 			m_byteSpectateType = SPECTATE_TYPE_PLAYER;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+26], 1

; 1569 : 			m_SpectateID = bytePlayerID;

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+27], eax

; 1570 : 			m_bSpectateProcessed = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+31], 0
$LN3@SpectatePl:

; 1571 : 		}
; 1572 : 	}
; 1573 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SpectatePlayer@CLocalPlayer@@QAEXE@Z ENDP		; CLocalPlayer::SpectatePlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SpectateVehicle@CLocalPlayer@@QAEXG@Z
_TEXT	SEGMENT
_pVehiclePool$ = -20					; size = 4
_this$ = -8						; size = 4
_VehicleID$ = 8						; size = 2
?SpectateVehicle@CLocalPlayer@@QAEXG@Z PROC		; CLocalPlayer::SpectateVehicle, COMDAT
; _this$ = ecx

; 1545 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1546 : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 1547 : 
; 1548 : 	//pChatWindow->AddDebugMessage("SpectateVehicle(%u)",VehicleID);
; 1549 : 
; 1550 : 	if (pVehiclePool && pVehiclePool->GetSlotState(VehicleID)) {

	cmp	DWORD PTR _pVehiclePool$[ebp], 0
	je	SHORT $LN2@SpectateVe
	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetSlotState@CVehiclePool@@QAEHG@Z	; CVehiclePool::GetSlotState
	test	eax, eax
	je	SHORT $LN2@SpectateVe

; 1551 : 		m_byteSpectateType = SPECTATE_TYPE_VEHICLE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+26], 2

; 1552 : 		m_SpectateID = VehicleID;

	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+27], eax

; 1553 : 		m_bSpectateProcessed = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+31], 0
$LN2@SpectateVe:

; 1554 : 	}
; 1555 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SpectateVehicle@CLocalPlayer@@QAEXG@Z ENDP		; CLocalPlayer::SpectateVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?ToggleSpectating@CLocalPlayer@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bToggle$ = 8						; size = 4
?ToggleSpectating@CLocalPlayer@@QAEXH@Z PROC		; CLocalPlayer::ToggleSpectating, COMDAT
; _this$ = ecx

; 1532 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1533 : 	if (m_bIsSpectating && !bToggle) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+186], 0
	je	SHORT $LN1@ToggleSpec
	cmp	DWORD PTR _bToggle$[ebp], 0
	jne	SHORT $LN1@ToggleSpec

; 1534 : 		Spawn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Spawn@CLocalPlayer@@QAEHXZ		; CLocalPlayer::Spawn
$LN1@ToggleSpec:

; 1535 : 	}
; 1536 : 	m_bIsSpectating = bToggle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bToggle$[ebp]
	mov	DWORD PTR [eax+186], ecx

; 1537 : 	m_byteSpectateType = SPECTATE_TYPE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+26], 0

; 1538 : 	m_SpectateID = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+27], -1

; 1539 : 	m_bSpectateProcessed = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+31], 0

; 1540 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleSpectating@CLocalPlayer@@QAEXH@Z ENDP		; CLocalPlayer::ToggleSpectating
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?CheckWeapons@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv184 = -556						; size = 4
_bSend$2 = -356						; size = 4
_bsWeapons$ = -344					; size = 273
_bMSend$ = -60						; size = 4
_byteCurWep$ = -45					; size = 1
_i$ = -33						; size = 1
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CheckWeapons@CLocalPlayer@@QAEXXZ PROC			; CLocalPlayer::CheckWeapons, COMDAT
; _this$ = ecx

; 1352 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CheckWeapons@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1353 : 	if (m_pPlayerPed->IsInVehicle()) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN9@CheckWeapo
	jmp	$LN10@CheckWeapo
$LN9@CheckWeapo:

; 1354 : 	BYTE i;
; 1355 : 	BYTE byteCurWep = m_pPlayerPed->GetCurrentWeapon();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	mov	BYTE PTR _byteCurWep$[ebp], al

; 1356 : 	BOOL bMSend = false;

	mov	DWORD PTR _bMSend$[ebp], 0

; 1357 : 
; 1358 : 	RakNet::BitStream bsWeapons;

	lea	ecx, DWORD PTR _bsWeapons$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1359 : 	bsWeapons.Write((BYTE)ID_WEAPONS_UPDATE);

	push	103					; 00000067H
	lea	ecx, DWORD PTR _bsWeapons$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1360 : 
; 1361 : 	for (i = 0; i < 13; i++)

	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $LN8@CheckWeapo
$LN7@CheckWeapo:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$LN8@CheckWeapo:
	movzx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 13					; 0000000dH
	jge	$LN6@CheckWeapo

; 1362 : 	{
; 1363 : 		if (m_byteLastWeapon[i] != byteCurWep)

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+43]
	movzx	eax, BYTE PTR _byteCurWep$[ebp]
	cmp	edx, eax
	je	$LN5@CheckWeapo

; 1364 : 		{
; 1365 : 			//bsWeapons.Write(i);
; 1366 : 			BOOL bSend = false;

	mov	DWORD PTR _bSend$2[ebp], 0

; 1367 : 			if (m_byteLastWeapon[i] != m_pPlayerPed->m_pPed->WeaponSlots[i].dwType)

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+43]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+28]
	movzx	ecx, BYTE PTR _i$[ebp]
	imul	ecx, ecx, 28
	cmp	edx, DWORD PTR [eax+ecx+1440]
	je	SHORT $LN4@CheckWeapo

; 1368 : 			{
; 1369 : 				// non-current weapon has changed
; 1370 : 				m_byteLastWeapon[i] = (BYTE)m_pPlayerPed->m_pPed->WeaponSlots[i].dwType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	movzx	eax, BYTE PTR _i$[ebp]
	imul	ecx, eax, 28
	movzx	eax, BYTE PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [edx+ecx+1440]
	mov	BYTE PTR [esi+eax+43], cl

; 1371 : 				bSend = true;

	mov	DWORD PTR _bSend$2[ebp], 1
$LN4@CheckWeapo:

; 1372 : 			}
; 1373 : 			//bsWeapons.Write(m_byteLastWeapon[i]);
; 1374 : 			if (m_dwLastAmmo[i] != m_pPlayerPed->m_pPed->WeaponSlots[i].dwAmmo)

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	movzx	edx, BYTE PTR _i$[ebp]
	imul	edx, edx, 28
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+56]
	cmp	eax, DWORD PTR [ecx+edx+1452]
	je	SHORT $LN3@CheckWeapo

; 1375 : 			{
; 1376 : 				// non-current ammo has changed
; 1377 : 				m_dwLastAmmo[i] = m_pPlayerPed->m_pPed->WeaponSlots[i].dwAmmo;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	movzx	eax, BYTE PTR _i$[ebp]
	imul	ecx, eax, 28
	movzx	eax, BYTE PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+1452]
	mov	DWORD PTR [esi+eax*4+56], ecx

; 1378 : 				bSend = true;

	mov	DWORD PTR _bSend$2[ebp], 1
$LN3@CheckWeapo:

; 1379 : 			}
; 1380 : 			//bsWeapons.Write(m_dwLastAmmo[i]);
; 1381 : 			if (bSend)

	cmp	DWORD PTR _bSend$2[ebp], 0
	je	SHORT $LN5@CheckWeapo

; 1382 : 			{
; 1383 : 				//pChatWindow->AddDebugMessage("Id: %u, Weapon: %u, Ammo: %d\n", i, m_byteLastWeapon[i], m_dwLastAmmo[i]);
; 1384 : 				bsWeapons.Write((BYTE)i);

	movzx	eax, BYTE PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsWeapons$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1385 : 				bsWeapons.Write((BYTE)m_byteLastWeapon[i]);

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+43]
	push	edx
	lea	ecx, DWORD PTR _bsWeapons$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1386 : 				bsWeapons.Write((WORD)m_dwLastAmmo[i]);

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax*4+56]
	push	edx
	lea	ecx, DWORD PTR _bsWeapons$[ebp]
	call	??$Write@G@BitStream@RakNet@@QAEXG@Z	; RakNet::BitStream::Write<unsigned short>

; 1387 : 				bMSend = true;

	mov	DWORD PTR _bMSend$[ebp], 1
$LN5@CheckWeapo:

; 1388 : 			}
; 1389 : 		}
; 1390 : 	}

	jmp	$LN7@CheckWeapo
$LN6@CheckWeapo:

; 1391 : 	if (bMSend)

	cmp	DWORD PTR _bMSend$[ebp], 0
	je	SHORT $LN1@CheckWeapo

; 1392 : 	{
; 1393 : 		pNetGame->GetRakClient()->Send(&bsWeapons,HIGH_PRIORITY,UNRELIABLE,0);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv184[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	1
	lea	eax, DWORD PTR _bsWeapons$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv184[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv184[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@CheckWeapo:

; 1394 : 	}
; 1395 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsWeapons$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN10@CheckWeapo:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@CheckWeapo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@CheckWeapo:
	DD	1
	DD	$LN15@CheckWeapo
$LN15@CheckWeapo:
	DD	-344					; fffffea8H
	DD	273					; 00000111H
	DD	$LN13@CheckWeapo
$LN13@CheckWeapo:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	87					; 00000057H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckWeapons@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsWeapons$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?CheckWeapons@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CheckWeapons@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CheckWeapons@CLocalPlayer@@QAEXXZ ENDP			; CLocalPlayer::CheckWeapons
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?IsClearedToSpawn@CLocalPlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsClearedToSpawn@CLocalPlayer@@QAEHXZ PROC		; CLocalPlayer::IsClearedToSpawn, COMDAT
; _this$ = ecx

; 244  : 	BOOL IsClearedToSpawn() { return m_bClearedToSpawn; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+174]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsClearedToSpawn@CLocalPlayer@@QAEHXZ ENDP		; CLocalPlayer::IsClearedToSpawn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?ProcessClassSelection@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
$T1 = -1596						; size = 4
_szClassInfo$ = -1392					; size = 256
_szMsg$ = -1128						; size = 1024
_matPlayer$ = -96					; size = 64
_dwTicksSinceLastSelection$ = -24			; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcessClassSelection@CLocalPlayer@@QAEXXZ PROC	; CLocalPlayer::ProcessClassSelection, COMDAT
; _this$ = ecx

; 1248 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1600				; 00000640H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1600]
	mov	ecx, 400				; 00000190H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1249 : 	DWORD			dwTicksSinceLastSelection;
; 1250 : 	MATRIX4X4		matPlayer;
; 1251 : 	char			szMsg[1024];
; 1252 : 	char			szClassInfo[256];
; 1253 : 
; 1254 : 	pGame->DisplayHud(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayHud@CGame@@QAEXH@Z		; CGame::DisplayHud

; 1255 : 
; 1256 : 	// DONT ALLOW ANY ACTIONS IF WE'RE STILL FADING OR WAITING.
; 1257 : 	if((GetTickCount() - m_dwInitialSelectionTick) < 2000) return;

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+182]
	cmp	eax, 2000				; 000007d0H
	jae	SHORT $LN12@ProcessCla
	jmp	$LN13@ProcessCla
$LN12@ProcessCla:

; 1258 : 
; 1259 : 	//ApplySpawnAnim(m_iCurSpawnAnimIndex);
; 1260 : 
; 1261 : 	if( !m_bWaitingForSpawnRequestReply &&
; 1262 : 		m_bClearedToSpawn && 
; 1263 : 		(GetAsyncKeyState(VK_SHIFT)&0x8000) &&
; 1264 : 		!pCmdWindow->isEnabled() )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN11@ProcessCla
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+174], 0
	je	SHORT $LN11@ProcessCla
	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	and	eax, 32768				; 00008000H
	je	SHORT $LN11@ProcessCla
	mov	ecx, DWORD PTR ?pCmdWindow@@3PAVCCmdWindow@@A ; pCmdWindow
	call	?isEnabled@CCmdWindow@@QAEHXZ		; CCmdWindow::isEnabled
	test	eax, eax
	jne	SHORT $LN11@ProcessCla

; 1265 : 	{
; 1266 : 		pSpawnScreen->SetSpawnText(NULL);

	push	0
	mov	ecx, DWORD PTR ?pSpawnScreen@@3PAVCSpawnScreen@@A ; pSpawnScreen
	call	?SetSpawnText@CSpawnScreen@@QAEXPAD@Z	; CSpawnScreen::SetSpawnText

; 1267 : 		RequestSpawn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RequestSpawn@CLocalPlayer@@QAEXXZ	; CLocalPlayer::RequestSpawn

; 1268 : 		m_bWaitingForSpawnRequestReply = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 1

; 1269 : 		return;

	jmp	$LN13@ProcessCla
	jmp	$LN3@ProcessCla
$LN11@ProcessCla:

; 1270 : 	}
; 1271 : 	else if(m_bClearedToSpawn) // WE ARE CLEARED TO SPAWN OR SELECT ANOTHER CLASS

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+174], 0
	je	$LN3@ProcessCla

; 1272 : 	{
; 1273 : 		// SHOW INFO ABOUT THE SELECTED CLASS..
; 1274 : 		if(pChatWindow) {

	cmp	DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A, 0 ; pChatWindow
	je	$LN8@ProcessCla

; 1275 : 			szMsg[0] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 1024		; 00000400H
	jae	SHORT $LN15@ProcessCla
	jmp	SHORT $LN16@ProcessCla
$LN15@ProcessCla:
	call	___report_rangecheckfailure
$LN16@ProcessCla:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _szMsg$[ebp+edx], 0

; 1276 : 			strcat(szMsg,"Use left and right arrow keys to select class.\n");

	push	OFFSET ??_C@_0DA@POOCGFKK@Use?5left?5and?5right?5arrow?5keys?5to@
	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 1277 : 			strcat(szMsg,"Press SHIFT when ready to spawn.\n\n");

	push	OFFSET ??_C@_0CD@ODENPMGA@Press?5SHIFT?5when?5ready?5to?5spawn?4@
	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 1278 : 			
; 1279 : 			sprintf(szClassInfo,"Class %u Weapons:\n- %s\n- %s\n- %s",m_iSelectedClass,
; 1280 : 				pGame->GetWeaponName(m_SpawnInfo.iSpawnWeapons[0]),
; 1281 : 				pGame->GetWeaponName(m_SpawnInfo.iSpawnWeapons[1]),
; 1282 : 				pGame->GetWeaponName(m_SpawnInfo.iSpawnWeapons[2]));

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+129]
	push	edx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetWeaponName@CGame@@QAEQADH@Z		; CGame::GetWeaponName
	push	eax
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+129]
	push	edx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetWeaponName@CGame@@QAEQADH@Z		; CGame::GetWeaponName
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+129]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetWeaponName@CGame@@QAEQADH@Z		; CGame::GetWeaponName
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	push	OFFSET ??_C@_0CB@IKBLLMGD@Class?5?$CFu?5Weapons?3?6?9?5?$CFs?6?9?5?$CFs?6?9?5?$CFs@
	lea	eax, DWORD PTR _szClassInfo$[ebp]
	push	eax
	call	_sprintf
	add	esp, 24					; 00000018H

; 1283 : 
; 1284 : 			strcat(szMsg, szClassInfo);

	lea	eax, DWORD PTR _szClassInfo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szMsg$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 1285 : 		
; 1286 : 			pSpawnScreen->SetSpawnText(szMsg);

	lea	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pSpawnScreen@@3PAVCSpawnScreen@@A ; pSpawnScreen
	call	?SetSpawnText@CSpawnScreen@@QAEXPAD@Z	; CSpawnScreen::SetSpawnText
$LN8@ProcessCla:

; 1287 : 		}
; 1288 : 
; 1289 : 		// GRAB PLAYER MATRIX FOR SOUND POSITION
; 1290 : 		m_pPlayerPed->GetMatrix(&matPlayer);

	lea	eax, DWORD PTR _matPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 1291 : 		dwTicksSinceLastSelection = GetTickCount() - m_dwLastSpawnSelectionTick; // used to delay reselection.

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+178]
	mov	DWORD PTR _dwTicksSinceLastSelection$[ebp], eax

; 1292 : 
; 1293 : 		// ALLOW ANOTHER SELECTION WITH THE LEFT KEY
; 1294 : 		if((GetAsyncKeyState(VK_LEFT)&0x8000) && (dwTicksSinceLastSelection > 250)) { // LEFT ARROW

	mov	esi, esp
	push	37					; 00000025H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	and	eax, 32768				; 00008000H
	je	$LN7@ProcessCla
	cmp	DWORD PTR _dwTicksSinceLastSelection$[ebp], 250 ; 000000faH
	jbe	$LN7@ProcessCla

; 1295 : 				
; 1296 : 			m_bClearedToSpawn = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+174], 0

; 1297 : 			m_dwLastSpawnSelectionTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+178], eax

; 1298 : 				
; 1299 : 			if(m_iSelectedClass == 0) m_iSelectedClass = (pNetGame->m_iSpawnsAvailable - 1);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN6@ProcessCla
	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	ecx, DWORD PTR [eax+54]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	jmp	SHORT $LN5@ProcessCla
$LN6@ProcessCla:

; 1300 : 			else m_iSelectedClass--;		

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN5@ProcessCla:

; 1301 : 			
; 1302 : 			pGame->PlaySound(1053,matPlayer.pos.X,matPlayer.pos.Y,matPlayer.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _matPlayer$[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _matPlayer$[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _matPlayer$[ebp+48]
	movss	DWORD PTR [esp], xmm0
	push	1053					; 0000041dH
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?PlaySoundA@CGame@@QAEXHMMM@Z		; CGame::PlaySoundA

; 1303 : 			RequestClass(m_iSelectedClass);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RequestClass@CLocalPlayer@@QAEXH@Z	; CLocalPlayer::RequestClass
	jmp	$LN3@ProcessCla
$LN7@ProcessCla:

; 1304 : 		}
; 1305 : 		// ALLOW ANOTHER SELECTION WITH THE RIGHT KEY
; 1306 : 		else if((GetAsyncKeyState(VK_RIGHT)&0x8000) && (dwTicksSinceLastSelection > 250)) { // RIGHT ARROW

	mov	esi, esp
	push	39					; 00000027H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	and	eax, 32768				; 00008000H
	je	$LN3@ProcessCla
	cmp	DWORD PTR _dwTicksSinceLastSelection$[ebp], 250 ; 000000faH
	jbe	$LN3@ProcessCla

; 1307 : 			
; 1308 : 			m_bClearedToSpawn = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+174], 0

; 1309 : 			m_dwLastSpawnSelectionTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+178], eax

; 1310 : 				
; 1311 : 			if(m_iSelectedClass == (pNetGame->m_iSpawnsAvailable - 1)) m_iSelectedClass = 0;

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	ecx, DWORD PTR [eax+54]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], ecx
	jne	SHORT $LN2@ProcessCla
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	jmp	SHORT $LN1@ProcessCla
$LN2@ProcessCla:

; 1312 : 			else m_iSelectedClass++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN1@ProcessCla:

; 1313 : 
; 1314 : 			pGame->PlaySound(1052,matPlayer.pos.X,matPlayer.pos.Y,matPlayer.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _matPlayer$[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _matPlayer$[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _matPlayer$[ebp+48]
	movss	DWORD PTR [esp], xmm0
	push	1052					; 0000041cH
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?PlaySoundA@CGame@@QAEXHMMM@Z		; CGame::PlaySoundA

; 1315 : 			RequestClass(m_iSelectedClass);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RequestClass@CLocalPlayer@@QAEXH@Z	; CLocalPlayer::RequestClass
$LN3@ProcessCla:
$LN13@ProcessCla:

; 1316 : 		}
; 1317 : 	}
; 1318 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ProcessCla
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1600				; 00000640H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@ProcessCla:
	DD	3
	DD	$LN20@ProcessCla
$LN20@ProcessCla:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN17@ProcessCla
	DD	-1128					; fffffb98H
	DD	1024					; 00000400H
	DD	$LN18@ProcessCla
	DD	-1392					; fffffa90H
	DD	256					; 00000100H
	DD	$LN19@ProcessCla
$LN19@ProcessCla:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN18@ProcessCla:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN17@ProcessCla:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?ProcessClassSelection@CLocalPlayer@@QAEXXZ ENDP	; CLocalPlayer::ProcessClassSelection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?HandleClassSelection@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?HandleClassSelection@CLocalPlayer@@QAEXXZ PROC		; CLocalPlayer::HandleClassSelection, COMDAT
; _this$ = ecx

; 1323 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1324 : 	m_bClearedToSpawn = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+174], 0

; 1325 : 	if(m_pPlayerPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@HandleClas

; 1326 : 		m_pPlayerPed->SetInitialState();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetInitialState@CPlayerPed@@QAEXXZ	; CPlayerPed::SetInitialState

; 1327 : 		m_pPlayerPed->SetHealth(100.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetHealth@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetHealth

; 1328 : 		m_pPlayerPed->TogglePlayerControllable(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?TogglePlayerControllable@CPlayerPed@@QAEXH@Z ; CPlayerPed::TogglePlayerControllable
$LN1@HandleClas:

; 1329 : 	}
; 1330 : 	RequestClass(m_iSelectedClass);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RequestClass@CLocalPlayer@@QAEXH@Z	; CLocalPlayer::RequestClass

; 1331 : 	m_dwInitialSelectionTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+182], eax

; 1332 : 	m_dwLastSpawnSelectionTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+178], eax

; 1333 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?HandleClassSelection@CLocalPlayer@@QAEXXZ ENDP		; CLocalPlayer::HandleClassSelection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?HandleClassSelectionOutcome@CLocalPlayer@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bOutcome$ = 8						; size = 4
?HandleClassSelectionOutcome@CLocalPlayer@@QAEXH@Z PROC	; CLocalPlayer::HandleClassSelectionOutcome, COMDAT
; _this$ = ecx

; 1338 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1339 : 	if(bOutcome) {

	cmp	DWORD PTR _bOutcome$[ebp], 0
	je	SHORT $LN3@HandleClas

; 1340 : 		if(m_pPlayerPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@HandleClas

; 1341 : 			m_pPlayerPed->ClearAllWeapons();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ClearAllWeapons@CPlayerPed@@QAEXXZ	; CPlayerPed::ClearAllWeapons

; 1342 : 			m_pPlayerPed->SetModelIndex(m_SpawnInfo.iSkin);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+109]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetModelIndex@CPlayerPed@@QAEXI@Z	; CPlayerPed::SetModelIndex
$LN1@HandleClas:

; 1343 : 		}
; 1344 : 		m_bClearedToSpawn = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+174], 1
$LN3@HandleClas:

; 1345 : 	}
; 1346 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?HandleClassSelectionOutcome@CLocalPlayer@@QAEXH@Z ENDP	; CLocalPlayer::HandleClassSelectionOutcome
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z
_TEXT	SEGMENT
tv73 = -508						; size = 4
_bsUpdateInterior$ = -308				; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_byteInterior$ = 8					; size = 1
?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z PROC	; CLocalPlayer::UpdateRemoteInterior, COMDAT
; _this$ = ecx

; 983  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 496				; 000001f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-508]
	mov	ecx, 124				; 0000007cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 984  : 	m_byteCurInterior = byteInterior;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _byteInterior$[ebp]
	mov	BYTE PTR [eax+169], cl

; 985  : 	RakNet::BitStream bsUpdateInterior;

	lea	ecx, DWORD PTR _bsUpdateInterior$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 986  : 	bsUpdateInterior.Write(byteInterior);

	movzx	eax, BYTE PTR _byteInterior$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsUpdateInterior$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 987  : 	pNetGame->GetRakClient()->RPC(RPC_SetInteriorId,&bsUpdateInterior,HIGH_PRIORITY,RELIABLE,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv73[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsUpdateInterior$[ebp]
	push	eax
	push	OFFSET ??_C@_02MJGJPHHN@dk?$AA@
	mov	ecx, DWORD PTR tv73[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 988  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsUpdateInterior$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@UpdateRemo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 508				; 000001fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@UpdateRemo:
	DD	1
	DD	$LN6@UpdateRemo
$LN6@UpdateRemo:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN4@UpdateRemo
$LN4@UpdateRemo:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z$0:
	lea	ecx, DWORD PTR _bsUpdateInterior$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-512]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z ENDP	; CLocalPlayer::UpdateRemoteInterior
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SendStatsUpdate@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv81 = -532						; size = 4
_wAmmo$ = -332						; size = 2
_iMoney$ = -320						; size = 4
_bsStats$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendStatsUpdate@CLocalPlayer@@QAEXXZ PROC		; CLocalPlayer::SendStatsUpdate, COMDAT
; _this$ = ecx

; 1233 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendStatsUpdate@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1234 : 	RakNet::BitStream bsStats;

	lea	ecx, DWORD PTR _bsStats$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1235 : 	int iMoney = pGame->GetLocalMoney();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetLocalMoney@CGame@@QAEHXZ		; CGame::GetLocalMoney
	mov	DWORD PTR _iMoney$[ebp], eax

; 1236 : 	WORD wAmmo = m_pPlayerPed->GetAmmo();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetAmmo@CPlayerPed@@QAEGXZ		; CPlayerPed::GetAmmo
	mov	WORD PTR _wAmmo$[ebp], ax

; 1237 : 	//ScriptCommand(&get_player_weapon_ammo, GetCurrentWeapon()
; 1238 : 
; 1239 : 	bsStats.Write((BYTE)ID_STATS_UPDATE);

	push	102					; 00000066H
	lea	ecx, DWORD PTR _bsStats$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1240 : 	bsStats.Write(iMoney);

	mov	eax, DWORD PTR _iMoney$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsStats$[ebp]
	call	??$Write@H@BitStream@RakNet@@QAEXH@Z	; RakNet::BitStream::Write<int>

; 1241 : 	bsStats.Write(wAmmo);

	movzx	eax, WORD PTR _wAmmo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsStats$[ebp]
	call	??$Write@G@BitStream@RakNet@@QAEXG@Z	; RakNet::BitStream::Write<unsigned short>

; 1242 : 	pNetGame->GetRakClient()->Send(&bsStats,HIGH_PRIORITY,UNRELIABLE,0);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv81[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	1
	lea	eax, DWORD PTR _bsStats$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv81[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv81[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1243 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsStats$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SendStatsU
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@SendStatsU:
	DD	1
	DD	$LN6@SendStatsU
$LN6@SendStatsU:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN4@SendStatsU
$LN4@SendStatsU:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendStatsUpdate@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsStats$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendStatsUpdate@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendStatsUpdate@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendStatsUpdate@CLocalPlayer@@QAEXXZ ENDP		; CLocalPlayer::SendStatsUpdate
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?ProcessInCarWorldBounds@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
_pGameVehicle$ = -44					; size = 4
_VehicleID$ = -32					; size = 2
_pVehiclePool$ = -20					; size = 4
_this$ = -8						; size = 4
?ProcessInCarWorldBounds@CLocalPlayer@@QAEXXZ PROC	; CLocalPlayer::ProcessInCarWorldBounds, COMDAT
; _this$ = ecx

; 1210 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1211 : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 1212 : 	VEHICLEID VehicleID = (VEHICLEID)pVehiclePool->FindIDFromGtaPtr(m_pPlayerPed->GetGtaVehicle());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _VehicleID$[ebp], ax

; 1213 : 	CVehicle *pGameVehicle;
; 1214 : 
; 1215 : 	if(pGame->GetActiveInterior() != 0) return; // can't enforce inside interior

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetActiveInterior@CGame@@QAEEXZ	; CGame::GetActiveInterior
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@ProcessInC
	jmp	$LN5@ProcessInC
$LN4@ProcessInC:

; 1216 : 
; 1217 : 	if(VehicleID != INVALID_VEHICLE_ID) {

	movzx	eax, WORD PTR _VehicleID$[ebp]
	cmp	eax, 65535				; 0000ffffH
	je	$LN1@ProcessInC

; 1218 : 		pGameVehicle = pVehiclePool->GetAt(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pGameVehicle$[ebp], eax

; 1219 : 		if(!pGameVehicle) return;

	cmp	DWORD PTR _pGameVehicle$[ebp], 0
	jne	SHORT $LN2@ProcessInC
	jmp	$LN5@ProcessInC
$LN2@ProcessInC:

; 1220 : 
; 1221 : 		if( pGameVehicle->EnforceWorldBoundries(
; 1222 : 			pNetGame->m_WorldBounds[0],pNetGame->m_WorldBounds[1],
; 1223 : 			pNetGame->m_WorldBounds[2],pNetGame->m_WorldBounds[3]) )

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?EnforceWorldBoundries@CEntity@@QAEHMMMM@Z ; CEntity::EnforceWorldBoundries
	test	eax, eax
	je	SHORT $LN1@ProcessInC

; 1224 : 		{
; 1225 : 			pGame->DisplayGameText("Stay within the ~r~world boundries",1000,5);

	push	5
	push	1000					; 000003e8H
	push	OFFSET ??_C@_0CD@ILLMAONE@Stay?5within?5the?5?$HOr?$HOworld?5boundri@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayGameText@CGame@@QAEXPADHH@Z	; CGame::DisplayGameText
$LN1@ProcessInC:
$LN5@ProcessInC:

; 1226 : 		}
; 1227 : 	}
; 1228 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessInCarWorldBounds@CLocalPlayer@@QAEXXZ ENDP	; CLocalPlayer::ProcessInCarWorldBounds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?ProcessOnFootWorldBounds@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ProcessOnFootWorldBounds@CLocalPlayer@@QAEXXZ PROC	; CLocalPlayer::ProcessOnFootWorldBounds, COMDAT
; _this$ = ecx

; 1196 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1197 : 	if(pGame->GetActiveInterior() != 0) return; // can't enforce inside interior

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetActiveInterior@CGame@@QAEEXZ	; CGame::GetActiveInterior
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@ProcessOnF
	jmp	$LN3@ProcessOnF
$LN2@ProcessOnF:

; 1198 : 
; 1199 : 	if(m_pPlayerPed->EnforceWorldBoundries(pNetGame->m_WorldBounds[0],pNetGame->m_WorldBounds[1],
; 1200 : 		pNetGame->m_WorldBounds[2],pNetGame->m_WorldBounds[3]))

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx+64]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?EnforceWorldBoundries@CEntity@@QAEHMMMM@Z ; CEntity::EnforceWorldBoundries
	test	eax, eax
	je	SHORT $LN1@ProcessOnF

; 1201 : 	{
; 1202 : 		m_pPlayerPed->SetArmedWeapon(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon

; 1203 : 		pGame->DisplayGameText("Stay within the ~r~world boundries",1000,5);

	push	5
	push	1000					; 000003e8H
	push	OFFSET ??_C@_0CD@ILLMAONE@Stay?5within?5the?5?$HOr?$HOworld?5boundri@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayGameText@CGame@@QAEXPADHH@Z	; CGame::DisplayGameText
$LN1@ProcessOnF:
$LN3@ProcessOnF:

; 1204 : 	}
; 1205 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessOnFootWorldBounds@CLocalPlayer@@QAEXXZ ENDP	; CLocalPlayer::ProcessOnFootWorldBounds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?GetPlayerColorAsARGB@CLocalPlayer@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerColorAsARGB@CLocalPlayer@@QAEKXZ PROC		; CLocalPlayer::GetPlayerColorAsARGB, COMDAT
; _this$ = ecx

; 1189 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1190 : 	return (TranslateColorCodeToRGBA(pNetGame->GetPlayerPool()->GetLocalPlayerID()) >> 8) | 0xFF000000;	

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayerID@CPlayerPool@@QAEEXZ	; CPlayerPool::GetLocalPlayerID
	movzx	eax, al
	push	eax
	call	?TranslateColorCodeToRGBA@@YGKH@Z	; TranslateColorCodeToRGBA
	shr	eax, 8
	or	eax, -16777216				; ff000000H

; 1191 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerColorAsARGB@CLocalPlayer@@QAEKXZ ENDP		; CLocalPlayer::GetPlayerColorAsARGB
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?GetPlayerColorAsRGBA@CLocalPlayer@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerColorAsRGBA@CLocalPlayer@@QAEKXZ PROC		; CLocalPlayer::GetPlayerColorAsRGBA, COMDAT
; _this$ = ecx

; 1182 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1183 : 	return TranslateColorCodeToRGBA(pNetGame->GetPlayerPool()->GetLocalPlayerID());

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayerID@CPlayerPool@@QAEEXZ	; CPlayerPool::GetLocalPlayerID
	movzx	eax, al
	push	eax
	call	?TranslateColorCodeToRGBA@@YGKH@Z	; TranslateColorCodeToRGBA

; 1184 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerColorAsRGBA@CLocalPlayer@@QAEKXZ ENDP		; CLocalPlayer::GetPlayerColorAsRGBA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SetPlayerColor@CLocalPlayer@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwColor$ = 8						; size = 4
?SetPlayerColor@CLocalPlayer@@QAEXK@Z PROC		; CLocalPlayer::SetPlayerColor, COMDAT
; _this$ = ecx

; 1175 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1176 : 	SetRadarColor(pNetGame->GetPlayerPool()->GetLocalPlayerID(),dwColor);	

	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayerID@CPlayerPool@@QAEEXZ	; CPlayerPool::GetLocalPlayerID
	movzx	ecx, al
	push	ecx
	call	?SetRadarColor@@YGXEK@Z			; SetRadarColor

; 1177 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPlayerColor@CLocalPlayer@@QAEXK@Z ENDP		; CLocalPlayer::SetPlayerColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z
_TEXT	SEGMENT
tv75 = -556						; size = 4
_dwVehicle$2 = -356					; size = 4
_pVehicle$ = -344					; size = 4
_pVehiclePool$ = -332					; size = 4
_bytePassenger$ = -317					; size = 1
_bsSend$ = -308						; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_VehicleID$ = 8						; size = 2
_bPassenger$ = 12					; size = 4
?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z PROC ; CLocalPlayer::SendEnterVehicleNotification, COMDAT
; _this$ = ecx

; 1120 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1121 : 	RakNet::BitStream bsSend;

	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1122 : 	BYTE bytePassenger=0;

	mov	BYTE PTR _bytePassenger$[ebp], 0

; 1123 : 
; 1124 : 	//pChatWindow->AddDebugMessage("Enter Vehicle: %u %d",VehicleID,bPassenger);
; 1125 : 
; 1126 : 	if(bPassenger) {

	cmp	DWORD PTR _bPassenger$[ebp], 0
	je	SHORT $LN2@SendEnterV

; 1127 : 		bytePassenger = 1;

	mov	BYTE PTR _bytePassenger$[ebp], 1
$LN2@SendEnterV:

; 1128 : 	}
; 1129 : 	bsSend.Write(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@G@BitStream@RakNet@@QAEXG@Z	; RakNet::BitStream::Write<unsigned short>

; 1130 : 	bsSend.Write(bytePassenger);

	movzx	eax, BYTE PTR _bytePassenger$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1131 : 
; 1132 : 	pNetGame->GetRakClient()->RPC(RPC_EnterVehicle,&bsSend,HIGH_PRIORITY,RELIABLE_SEQUENCED,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv75[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	4
	push	1
	lea	eax, DWORD PTR _bsSend$[ebp]
	push	eax
	push	OFFSET ??_C@_02MPKCDFJG@ak?$AA@
	mov	ecx, DWORD PTR tv75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1133 : 
; 1134 : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 1135 : 	CVehicle* pVehicle = pVehiclePool->GetAt(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$[ebp], eax

; 1136 : 
; 1137 : 	if (pVehicle && pVehicle->IsATrainPart()) {

	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	SHORT $LN1@SendEnterV
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?IsATrainPart@CVehicle@@QAEHXZ		; CVehicle::IsATrainPart
	test	eax, eax
	je	SHORT $LN1@SendEnterV

; 1138 : 		DWORD dwVehicle = pVehicle->m_dwGTAId;

	mov	eax, DWORD PTR _pVehicle$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _dwVehicle$2[ebp], ecx

; 1139 : 		ScriptCommand(&camera_on_vehicle, dwVehicle, 3, 2);

	push	2
	push	3
	mov	eax, DWORD PTR _dwVehicle$2[ebp]
	push	eax
	push	OFFSET _camera_on_vehicle
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H

; 1140 : 		dwEnterVehTimeElasped = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?dwEnterVehTimeElasped@@3KA, eax ; dwEnterVehTimeElasped
$LN1@SendEnterV:

; 1141 : 	}
; 1142 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SendEnterV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@SendEnterV:
	DD	1
	DD	$LN8@SendEnterV
$LN8@SendEnterV:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN6@SendEnterV
$LN6@SendEnterV:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z$0:
	lea	ecx, DWORD PTR _bsSend$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z ENDP ; CLocalPlayer::SendEnterVehicleNotification
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z
_TEXT	SEGMENT
tv92 = -532						; size = 4
_pVehicle$ = -332					; size = 4
_pVehiclePool$ = -320					; size = 4
_bsSend$ = -308						; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_VehicleID$ = 8						; size = 2
?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z PROC	; CLocalPlayer::SendExitVehicleNotification, COMDAT
; _this$ = ecx

; 1147 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1148 : 	RakNet::BitStream bsSend;

	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1149 : 	//pChatWindow->AddDebugMessage("Sent Exit: %u\n",byteVehicleID);
; 1150 : 
; 1151 : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 1152 : 	CVehicle* pVehicle = pVehiclePool->GetAt(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$[ebp], eax

; 1153 : 	
; 1154 : 	if(pVehicle)

	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	$LN4@SendExitVe

; 1155 : 	{ 
; 1156 : 		if (!m_pPlayerPed->IsAPassenger()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsAPassenger@CPlayerPed@@QAEHXZ	; CPlayerPed::IsAPassenger
	test	eax, eax
	jne	SHORT $LN3@SendExitVe

; 1157 : 			// This allows the code to sync vehicles blowing up without them being occupied
; 1158 : 			m_LastVehicle = VehicleID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _VehicleID$[ebp]
	mov	WORD PTR [eax+37], cx
$LN3@SendExitVe:

; 1159 : 		}
; 1160 : 
; 1161 : 		if ( pVehicle->IsATrainPart() )	{

	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?IsATrainPart@CVehicle@@QAEHXZ		; CVehicle::IsATrainPart
	test	eax, eax
	je	SHORT $LN2@SendExitVe

; 1162 : 			pGame->GetCamera()->SetBehindPlayer();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	ecx, eax
	call	?SetBehindPlayer@CCamera@@QAEXXZ	; CCamera::SetBehindPlayer
$LN2@SendExitVe:

; 1163 : 		}
; 1164 : 
; 1165 : 		if(!pVehicle->IsRCVehicle()) {

	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?IsRCVehicle@CVehicle@@QAEHXZ		; CVehicle::IsRCVehicle
	test	eax, eax
	jne	SHORT $LN4@SendExitVe

; 1166 : 			bsSend.Write(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@G@BitStream@RakNet@@QAEXG@Z	; RakNet::BitStream::Write<unsigned short>

; 1167 : 			pNetGame->GetRakClient()->RPC(RPC_ExitVehicle,&bsSend,HIGH_PRIORITY,RELIABLE_SEQUENCED,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv92[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	4
	push	1
	lea	eax, DWORD PTR _bsSend$[ebp]
	push	eax
	push	OFFSET ??_C@_02IAODKDFB@al?$AA@
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@SendExitVe:

; 1168 : 		}
; 1169 : 	}
; 1170 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@SendExitVe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN11@SendExitVe:
	DD	1
	DD	$LN10@SendExitVe
$LN10@SendExitVe:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN8@SendExitVe
$LN8@SendExitVe:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z$0:
	lea	ecx, DWORD PTR _bsSend$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z ENDP	; CLocalPlayer::SendExitVehicleNotification
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?TeamMsg@CLocalPlayer@@QAEXPAD@Z
_TEXT	SEGMENT
tv79 = -520						; size = 4
_bsSend$ = -320						; size = 273
_byteTextLen$ = -33					; size = 1
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_szText$ = 8						; size = 4
?TeamMsg@CLocalPlayer@@QAEXPAD@Z PROC			; CLocalPlayer::TeamMsg, COMDAT
; _this$ = ecx

; 1107 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TeamMsg@CLocalPlayer@@QAEXPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1108 : 	BYTE byteTextLen = strlen(szText);

	mov	eax, DWORD PTR _szText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _byteTextLen$[ebp], al

; 1109 : 
; 1110 : 	RakNet::BitStream bsSend;

	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1111 : 	bsSend.Write(byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1112 : 	bsSend.Write(szText,byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szText$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 1113 : 
; 1114 : 	pNetGame->GetRakClient()->RPC(RPC_TeamPrivmsg,&bsSend,HIGH_PRIORITY,RELIABLE,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv79[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsSend$[ebp]
	push	eax
	push	OFFSET ??_C@_02HKAMELNL@af?$AA@
	mov	ecx, DWORD PTR tv79[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv79[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1115 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@TeamMsg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN7@TeamMsg:
	DD	1
	DD	$LN6@TeamMsg
$LN6@TeamMsg:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@TeamMsg
$LN4@TeamMsg:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TeamMsg@CLocalPlayer@@QAEXPAD@Z$0:
	lea	ecx, DWORD PTR _bsSend$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?TeamMsg@CLocalPlayer@@QAEXPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TeamMsg@CLocalPlayer@@QAEXPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TeamMsg@CLocalPlayer@@QAEXPAD@Z ENDP			; CLocalPlayer::TeamMsg
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?Msg@CLocalPlayer@@QAEXEPAD@Z
_TEXT	SEGMENT
tv132 = -520						; size = 4
_bsSend$ = -320						; size = 273
_byteTextLen$ = -33					; size = 1
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_byteToPlayer$ = 8					; size = 1
_szText$ = 12						; size = 4
?Msg@CLocalPlayer@@QAEXEPAD@Z PROC			; CLocalPlayer::Msg, COMDAT
; _this$ = ecx

; 1084 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Msg@CLocalPlayer@@QAEXEPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1085 : 	if (byteToPlayer == pNetGame->GetPlayerPool()->GetLocalPlayerID()) {

	movzx	esi, BYTE PTR _byteToPlayer$[ebp]
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayerID@CPlayerPool@@QAEEXZ	; CPlayerPool::GetLocalPlayerID
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN3@Msg

; 1086 : 		pChatWindow->AddInfoMessage("You cannot PM yourself!");

	push	OFFSET ??_C@_0BI@EMKICMBK@You?5cannot?5PM?5yourself?$CB?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8

; 1087 : 		return;

	jmp	$LN4@Msg
$LN3@Msg:

; 1088 : 	}
; 1089 : 	if (byteToPlayer > MAX_PLAYERS || !pNetGame->GetPlayerPool()->GetSlotState(byteToPlayer)) {

	movzx	eax, BYTE PTR _byteToPlayer$[ebp]
	cmp	eax, 204				; 000000ccH
	jg	SHORT $LN1@Msg
	movzx	eax, BYTE PTR _byteToPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	jne	SHORT $LN2@Msg
$LN1@Msg:

; 1090 : 		pChatWindow->AddInfoMessage("Enter a valid player ID!");

	push	OFFSET ??_C@_0BJ@FIEMNLKP@Enter?5a?5valid?5player?5ID?$CB?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8

; 1091 : 		return;

	jmp	$LN4@Msg
$LN2@Msg:

; 1092 : 	}
; 1093 : 
; 1094 : 	BYTE byteTextLen = strlen(szText);

	mov	eax, DWORD PTR _szText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _byteTextLen$[ebp], al

; 1095 : 
; 1096 : 	RakNet::BitStream bsSend;

	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1097 : 	bsSend.Write(byteToPlayer);

	movzx	eax, BYTE PTR _byteToPlayer$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1098 : 	bsSend.Write(byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1099 : 	bsSend.Write(szText,byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szText$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 1100 : 
; 1101 : 	pNetGame->GetRakClient()->RPC(RPC_Privmsg,&bsSend,HIGH_PRIORITY,RELIABLE,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv132[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsSend$[ebp]
	push	eax
	push	OFFSET ??_C@_02FBCBBIBI@ae?$AA@
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1102 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN4@Msg:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Msg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN10@Msg:
	DD	1
	DD	$LN9@Msg
$LN9@Msg:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN7@Msg
$LN7@Msg:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Msg@CLocalPlayer@@QAEXEPAD@Z$0:
	lea	ecx, DWORD PTR _bsSend$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Msg@CLocalPlayer@@QAEXEPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Msg@CLocalPlayer@@QAEXEPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Msg@CLocalPlayer@@QAEXEPAD@Z ENDP			; CLocalPlayer::Msg
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?Say@CLocalPlayer@@QAEXPAD@Z
_TEXT	SEGMENT
tv79 = -520						; size = 4
_bsSend$ = -320						; size = 273
_byteTextLen$ = -33					; size = 1
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_szText$ = 8						; size = 4
?Say@CLocalPlayer@@QAEXPAD@Z PROC			; CLocalPlayer::Say, COMDAT
; _this$ = ecx

; 1063 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Say@CLocalPlayer@@QAEXPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1064 : 	BYTE byteTextLen = strlen(szText);

	mov	eax, DWORD PTR _szText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _byteTextLen$[ebp], al

; 1065 : 
; 1066 : 	RakNet::BitStream bsSend;

	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1067 : 	bsSend.Write(byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 1068 : 	bsSend.Write(szText,byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szText$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 1069 : 
; 1070 : 	pNetGame->GetRakClient()->RPC(RPC_Chat,&bsSend,HIGH_PRIORITY,RELIABLE,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv79[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsSend$[ebp]
	push	eax
	push	OFFSET ??_C@_02EIDKCJFJ@ad?$AA@
	mov	ecx, DWORD PTR tv79[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv79[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1071 : 	
; 1072 : 	// Comment by spookie:
; 1073 : 	//   Local player chat is now sent to the server so it can be filtered by the
; 1074 : 	//   scripts before it is displayed in the chat window.
; 1075 : 
; 1076 : 	// Process chat message to chat window.
; 1077 : 	//pChatWindow->AddChatMessage(pNetGame->GetPlayerPool()->GetLocalPlayerName(),
; 1078 : 	//	GetPlayerColorAsARGB(),szText);
; 1079 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Say
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN7@Say:
	DD	1
	DD	$LN6@Say
$LN6@Say:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@Say
$LN4@Say:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Say@CLocalPlayer@@QAEXPAD@Z$0:
	lea	ecx, DWORD PTR _bsSend$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Say@CLocalPlayer@@QAEXPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Say@CLocalPlayer@@QAEXPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Say@CLocalPlayer@@QAEXPAD@Z ENDP			; CLocalPlayer::Say
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ PROC	; CLocalPlayer::GetPlayerPed, COMDAT
; _this$ = ecx

; 223  : 	CPlayerPed * GetPlayerPed() { return m_pPlayerPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ENDP	; CLocalPlayer::GetPlayerPed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?Spawn@CLocalPlayer@@QAEHXZ
_TEXT	SEGMENT
tv230 = -532						; size = 4
$T2 = -524						; size = 4
_bsSendSpawn$ = -320					; size = 273
_pGameCamera$ = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Spawn@CLocalPlayer@@QAEHXZ PROC			; CLocalPlayer::Spawn, COMDAT
; _this$ = ecx

; 993  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Spawn@CLocalPlayer@@QAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 994  : 	if(!m_bHasSpawnInfo) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+153], 0
	jne	SHORT $LN6@Spawn
	xor	eax, eax
	jmp	$LN7@Spawn
$LN6@Spawn:

; 995  : 
; 996  : 	CCamera			*pGameCamera;
; 997  : 	pGameCamera = pGame->GetCamera();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	DWORD PTR _pGameCamera$[ebp], eax

; 998  : 	pGameCamera->Restore();

	mov	ecx, DWORD PTR _pGameCamera$[ebp]
	call	?Restore@CCamera@@QAEXXZ		; CCamera::Restore

; 999  : 	pGameCamera->SetBehindPlayer();

	mov	ecx, DWORD PTR _pGameCamera$[ebp]
	call	?SetBehindPlayer@CCamera@@QAEXXZ	; CCamera::SetBehindPlayer

; 1000 : 	pGame->DisplayHud(TRUE);

	push	1
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayHud@CGame@@QAEXH@Z		; CGame::DisplayHud

; 1001 : 	m_pPlayerPed->TogglePlayerControllable(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?TogglePlayerControllable@CPlayerPed@@QAEXH@Z ; CPlayerPed::TogglePlayerControllable

; 1002 : 
; 1003 : 	iTimesDataModified = 0;

	mov	DWORD PTR ?iTimesDataModified@@3HA, 0	; iTimesDataModified

; 1004 : 
; 1005 : 	if(!bFirstSpawn) {

	cmp	DWORD PTR ?bFirstSpawn@@3HA, 0		; bFirstSpawn
	jne	SHORT $LN5@Spawn

; 1006 : 		m_pPlayerPed->SetInitialState();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetInitialState@CPlayerPed@@QAEXXZ	; CPlayerPed::SetInitialState

; 1007 : 	} else {

	jmp	SHORT $LN4@Spawn
$LN5@Spawn:

; 1008 : 		bFirstSpawn = FALSE;

	mov	DWORD PTR ?bFirstSpawn@@3HA, 0		; bFirstSpawn
$LN4@Spawn:

; 1009 : 	}
; 1010 : 
; 1011 : 	pGame->RefreshStreamingAt(m_SpawnInfo.vecPos.X,m_SpawnInfo.vecPos.Y);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+117]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+113]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RefreshStreamingAt@CGame@@QAEXMM@Z	; CGame::RefreshStreamingAt

; 1012 : 
; 1013 : 	m_pPlayerPed->RestartIfWastedAt(&m_SpawnInfo.vecPos, m_SpawnInfo.fRotation);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+125]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 113				; 00000071H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?RestartIfWastedAt@CPlayerPed@@QAEXPAU_VECTOR@@M@Z ; CPlayerPed::RestartIfWastedAt

; 1014 : 	m_pPlayerPed->SetModelIndex(m_SpawnInfo.iSkin);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+109]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetModelIndex@CPlayerPed@@QAEXI@Z	; CPlayerPed::SetModelIndex

; 1015 : 	m_pPlayerPed->ClearAllWeapons();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ClearAllWeapons@CPlayerPed@@QAEXXZ	; CPlayerPed::ClearAllWeapons

; 1016 : 	m_pPlayerPed->ResetDamageEntity();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ResetDamageEntity@CPlayerPed@@QAEXXZ	; CPlayerPed::ResetDamageEntity

; 1017 : 
; 1018 : 	if(m_SpawnInfo.iSpawnWeapons[2] != (-1))

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+129], -1
	je	SHORT $LN3@Spawn

; 1019 : 		m_pPlayerPed->GiveWeapon(m_SpawnInfo.iSpawnWeapons[2],
; 1020 : 		m_SpawnInfo.iSpawnWeaponsAmmo[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+141]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+129]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GiveWeapon@CPlayerPed@@QAEXHH@Z	; CPlayerPed::GiveWeapon
$LN3@Spawn:

; 1021 : 
; 1022 : 	if(m_SpawnInfo.iSpawnWeapons[1] != (-1))

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax+129], -1
	je	SHORT $LN2@Spawn

; 1023 : 		m_pPlayerPed->GiveWeapon(m_SpawnInfo.iSpawnWeapons[1],
; 1024 : 		m_SpawnInfo.iSpawnWeaponsAmmo[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+141]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+129]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GiveWeapon@CPlayerPed@@QAEXHH@Z	; CPlayerPed::GiveWeapon
$LN2@Spawn:

; 1025 : 
; 1026 : 	if(m_SpawnInfo.iSpawnWeapons[0] != (-1))

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+ecx+129], -1
	je	SHORT $LN1@Spawn

; 1027 : 		m_pPlayerPed->GiveWeapon(m_SpawnInfo.iSpawnWeapons[0],
; 1028 : 		m_SpawnInfo.iSpawnWeaponsAmmo[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+141]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+129]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GiveWeapon@CPlayerPed@@QAEXHH@Z	; CPlayerPed::GiveWeapon
$LN1@Spawn:

; 1029 : 
; 1030 : 	m_pPlayerPed->ResetForRespawn();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ResetForRespawn@CPlayerPed@@QAEXXZ	; CPlayerPed::ResetForRespawn

; 1031 : 
; 1032 : 	pGame->SetMaxStats();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetMaxStats@CGame@@QAEXXZ		; CGame::SetMaxStats

; 1033 : 	pGame->DisableTrainTraffic();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisableTrainTraffic@CGame@@QAEXXZ	; CGame::DisableTrainTraffic

; 1034 : 	
; 1035 : 	// No fading CCamera_Fade. (applied here because otherwise there's audio volume issues)
; 1036 : 	UnFuck(0x50AC20,3);

	push	3
	push	5286944					; 0050ac20H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 1037 : 	*(PBYTE)0x50AC20 = 0xC2;

	mov	BYTE PTR ds:5286944, 194		; 000000c2H

; 1038 : 	*(PBYTE)0x50AC21 = 0x08;

	mov	BYTE PTR ds:5286945, 8

; 1039 : 	*(PBYTE)0x50AC22 = 0x00;

	mov	BYTE PTR ds:5286946, 0

; 1040 : 		
; 1041 : 	m_pPlayerPed->TeleportTo(m_SpawnInfo.vecPos.X,
; 1042 : 		m_SpawnInfo.vecPos.Y,(m_SpawnInfo.vecPos.Z + 1.0f));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+121]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+117]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+113]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo

; 1043 : 	
; 1044 : 	m_pPlayerPed->SetTargetRotation(m_SpawnInfo.fRotation);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+125]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetTargetRotation@CPlayerPed@@QAEXM@Z	; CPlayerPed::SetTargetRotation

; 1045 : 		
; 1046 : 	m_bIsWasted = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1047 : 	m_bIsActive = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1

; 1048 : 	m_bWaitingForSpawnRequestReply = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1049 : 
; 1050 : 	// Let the rest of the network know we're spawning.
; 1051 : 	RakNet::BitStream bsSendSpawn;

	lea	ecx, DWORD PTR _bsSendSpawn$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1052 : 	pNetGame->GetRakClient()->RPC(RPC_Spawn,&bsSendSpawn,HIGH_PRIORITY,
; 1053 : 		RELIABLE_SEQUENCED,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv230[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	4
	push	1
	lea	eax, DWORD PTR _bsSendSpawn$[ebp]
	push	eax
	push	OFFSET ??_C@_02PNJEFHBE@ai?$AA@
	mov	ecx, DWORD PTR tv230[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv230[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1054 : 
; 1055 : 	m_iDisplayZoneTick = GetTickCount() + 1000;

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1000				; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+39], eax

; 1056 : 	
; 1057 : 	return TRUE;

	mov	DWORD PTR $T2[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSendSpawn$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	mov	eax, DWORD PTR $T2[ebp]
$LN7@Spawn:

; 1058 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Spawn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@Spawn:
	DD	1
	DD	$LN12@Spawn
$LN12@Spawn:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN10@Spawn
$LN10@Spawn:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Spawn@CLocalPlayer@@QAEHXZ$0:
	lea	ecx, DWORD PTR _bsSendSpawn$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Spawn@CLocalPlayer@@QAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Spawn@CLocalPlayer@@QAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Spawn@CLocalPlayer@@QAEHXZ ENDP			; CLocalPlayer::Spawn
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SetSpawnInfo@CLocalPlayer@@QAEXPAU_PLAYER_SPAWN_INFO@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pSpawn$ = 8						; size = 4
?SetSpawnInfo@CLocalPlayer@@QAEXPAU_PLAYER_SPAWN_INFO@@@Z PROC ; CLocalPlayer::SetSpawnInfo, COMDAT
; _this$ = ecx

; 975  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 976  : 	memcpy(&m_SpawnInfo,pSpawn,sizeof(PLAYER_SPAWN_INFO));

	push	45					; 0000002dH
	mov	eax, DWORD PTR _pSpawn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 977  : 	m_bHasSpawnInfo = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+153], 1

; 978  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSpawnInfo@CLocalPlayer@@QAEXPAU_PLAYER_SPAWN_INFO@@@Z ENDP ; CLocalPlayer::SetSpawnInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?RequestSpawn@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv70 = -508						; size = 4
_bsSpawnRequest$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RequestSpawn@CLocalPlayer@@QAEXXZ PROC			; CLocalPlayer::RequestSpawn, COMDAT
; _this$ = ecx

; 967  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RequestSpawn@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 496				; 000001f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-508]
	mov	ecx, 124				; 0000007cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 968  : 	RakNet::BitStream bsSpawnRequest;

	lea	ecx, DWORD PTR _bsSpawnRequest$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 969  : 	pNetGame->GetRakClient()->RPC(RPC_RequestSpawn,&bsSpawnRequest,HIGH_PRIORITY,RELIABLE,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv70[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsSpawnRequest$[ebp]
	push	eax
	push	OFFSET ??_C@_02OEIPGGFF@ah?$AA@
	mov	ecx, DWORD PTR tv70[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv70[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 970  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSpawnRequest$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@RequestSpa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 508				; 000001fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@RequestSpa:
	DD	1
	DD	$LN6@RequestSpa
$LN6@RequestSpa:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN4@RequestSpa
$LN4@RequestSpa:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RequestSpawn@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsSpawnRequest$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?RequestSpawn@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-512]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RequestSpawn@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?RequestSpawn@CLocalPlayer@@QAEXXZ ENDP			; CLocalPlayer::RequestSpawn
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?RequestClass@CLocalPlayer@@QAEXH@Z
_TEXT	SEGMENT
tv72 = -508						; size = 4
_bsSpawnRequest$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iClass$ = 8						; size = 4
?RequestClass@CLocalPlayer@@QAEXH@Z PROC		; CLocalPlayer::RequestClass, COMDAT
; _this$ = ecx

; 958  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RequestClass@CLocalPlayer@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 496				; 000001f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-508]
	mov	ecx, 124				; 0000007cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 959  : 	RakNet::BitStream bsSpawnRequest;

	lea	ecx, DWORD PTR _bsSpawnRequest$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 960  : 	bsSpawnRequest.Write(iClass);

	mov	eax, DWORD PTR _iClass$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSpawnRequest$[ebp]
	call	??$Write@H@BitStream@RakNet@@QAEXH@Z	; RakNet::BitStream::Write<int>

; 961  : 	pNetGame->GetRakClient()->RPC(RPC_RequestClass,&bsSpawnRequest,HIGH_PRIORITY,RELIABLE,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv72[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsSpawnRequest$[ebp]
	push	eax
	push	OFFSET ??_C@_02GDBHHKJK@ag?$AA@
	mov	ecx, DWORD PTR tv72[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 962  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSpawnRequest$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@RequestCla
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 508				; 000001fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN7@RequestCla:
	DD	1
	DD	$LN6@RequestCla
$LN6@RequestCla:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN4@RequestCla
$LN4@RequestCla:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RequestClass@CLocalPlayer@@QAEXH@Z$0:
	lea	ecx, DWORD PTR _bsSpawnRequest$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?RequestClass@CLocalPlayer@@QAEXH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-512]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RequestClass@CLocalPlayer@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RequestClass@CLocalPlayer@@QAEXH@Z ENDP		; CLocalPlayer::RequestClass
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SendWastedNotification@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv78 = -532						; size = 4
_byteWhoWasResponsible$ = -329				; size = 1
_byteDeathReason$ = -317				; size = 1
_bsPlayerDeath$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendWastedNotification@CLocalPlayer@@QAEXXZ PROC	; CLocalPlayer::SendWastedNotification, COMDAT
; _this$ = ecx

; 943  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendWastedNotification@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 944  : 	RakNet::BitStream bsPlayerDeath;

	lea	ecx, DWORD PTR _bsPlayerDeath$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 945  : 	BYTE byteDeathReason;
; 946  : 	BYTE byteWhoWasResponsible;
; 947  : 
; 948  : 	byteDeathReason = m_pPlayerPed->FindDeathReasonAndResponsiblePlayer(&byteWhoWasResponsible);

	lea	eax, DWORD PTR _byteWhoWasResponsible$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z ; CPlayerPed::FindDeathReasonAndResponsiblePlayer
	mov	BYTE PTR _byteDeathReason$[ebp], al

; 949  : 	
; 950  : 	bsPlayerDeath.Write(byteDeathReason);

	movzx	eax, BYTE PTR _byteDeathReason$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerDeath$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 951  : 	bsPlayerDeath.Write(byteWhoWasResponsible);

	movzx	eax, BYTE PTR _byteWhoWasResponsible$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerDeath$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 952  : 	pNetGame->GetRakClient()->RPC(RPC_Death,&bsPlayerDeath,HIGH_PRIORITY,RELIABLE_SEQUENCED,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv78[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	4
	push	1
	lea	eax, DWORD PTR _bsPlayerDeath$[ebp]
	push	eax
	push	OFFSET ??_C@_02NGLJAENH@aj?$AA@
	mov	ecx, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 953  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsPlayerDeath$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SendWasted
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@SendWasted:
	DD	2
	DD	$LN7@SendWasted
$LN7@SendWasted:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN4@SendWasted
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN5@SendWasted
$LN5@SendWasted:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	87					; 00000057H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	87					; 00000057H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN4@SendWasted:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendWastedNotification@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsPlayerDeath$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendWastedNotification@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendWastedNotification@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendWastedNotification@CLocalPlayer@@QAEXXZ ENDP	; CLocalPlayer::SendWastedNotification
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?GetOptimumOnFootSendRate@CLocalPlayer@@QAEHH@Z
_TEXT	SEGMENT
_wKeys$ = -80						; size = 2
_udAnalog$ = -68					; size = 2
_lrAnalog$ = -56					; size = 2
_bytePlayerCount$ = -41					; size = 1
_vecMoveSpeed$ = -32					; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_iPlayersEffected$ = 8					; size = 4
?GetOptimumOnFootSendRate@CLocalPlayer@@QAEHH@Z PROC	; CLocalPlayer::GetOptimumOnFootSendRate, COMDAT
; _this$ = ecx

; 912  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 913  : 	VECTOR	 vecMoveSpeed;
; 914  : 	BYTE	 bytePlayerCount = pNetGame->GetPlayerPool()->GetCount();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetCount@CPlayerPool@@QAEEXZ		; CPlayerPool::GetCount
	mov	BYTE PTR _bytePlayerCount$[ebp], al

; 915  : 
; 916  : 	WORD lrAnalog,udAnalog;
; 917  : 	WORD wKeys = m_pPlayerPed->GetKeys(&lrAnalog,&udAnalog);

	lea	eax, DWORD PTR _udAnalog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lrAnalog$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetKeys@CPlayerPed@@QAEGPAG0@Z		; CPlayerPed::GetKeys
	mov	WORD PTR _wKeys$[ebp], ax

; 918  : 
; 919  : 	if(m_pPlayerPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN1@GetOptimum

; 920  : 
; 921  : 		m_pPlayerPed->GetMoveSpeedVector(&vecMoveSpeed);

	lea	eax, DWORD PTR _vecMoveSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z ; CEntity::GetMoveSpeedVector

; 922  : 
; 923  : 		if( (vecMoveSpeed.X == 0.0f) &&
; 924  : 			(vecMoveSpeed.Y == 0.0f) &&
; 925  : 			(vecMoveSpeed.Z == 0.0f) &&
; 926  : 			!IS_TARGETING(wKeys) ) {

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@GetOptimum
	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@GetOptimum
	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@GetOptimum
	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN6@GetOptimum

; 927  : 
; 928  : 			if(pNetGame->IsLanMode()) return LANMODE_IDLE_ONFOOT_SENDRATE;

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?IsLanMode@CNetGame@@QAEHXZ		; CNetGame::IsLanMode
	test	eax, eax
	je	SHORT $LN5@GetOptimum
	mov	eax, 20					; 00000014H
	jmp	SHORT $LN8@GetOptimum
	jmp	SHORT $LN4@GetOptimum
$LN5@GetOptimum:

; 929  : 			else return (NETMODE_IDLE_ONFOOT_SENDRATE + (int)iPlayersEffected*NETMODE_SEND_MULTIPLIER); // scale to number of players.

	mov	eax, DWORD PTR _iPlayersEffected$[ebp]
	lea	eax, DWORD PTR [eax+eax+100]
	jmp	SHORT $LN8@GetOptimum
$LN4@GetOptimum:

; 930  : 		}
; 931  : 		else {

	jmp	SHORT $LN1@GetOptimum
$LN6@GetOptimum:

; 932  : 			if(pNetGame->IsLanMode()) return LANMODE_NORMAL_ONFOOT_SENDRATE;

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?IsLanMode@CNetGame@@QAEHXZ		; CNetGame::IsLanMode
	test	eax, eax
	je	SHORT $LN2@GetOptimum
	mov	eax, 15					; 0000000fH
	jmp	SHORT $LN8@GetOptimum
	jmp	SHORT $LN1@GetOptimum
$LN2@GetOptimum:

; 933  : 			else return (NETMODE_NORMAL_ONFOOT_SENDRATE + (int)iPlayersEffected*NETMODE_SEND_MULTIPLIER); // scale to number of players.

	mov	eax, DWORD PTR _iPlayersEffected$[ebp]
	lea	eax, DWORD PTR [eax+eax+40]
	jmp	SHORT $LN8@GetOptimum
$LN1@GetOptimum:

; 934  : 		}
; 935  : 	}
; 936  : 
; 937  : 	return 1000;

	mov	eax, 1000				; 000003e8H
$LN8@GetOptimum:

; 938  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@GetOptimum
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN14@GetOptimum:
	DD	3
	DD	$LN13@GetOptimum
$LN13@GetOptimum:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN10@GetOptimum
	DD	-56					; ffffffc8H
	DD	2
	DD	$LN11@GetOptimum
	DD	-68					; ffffffbcH
	DD	2
	DD	$LN12@GetOptimum
$LN12@GetOptimum:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN11@GetOptimum:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN10@GetOptimum:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?GetOptimumOnFootSendRate@CLocalPlayer@@QAEHH@Z ENDP	; CLocalPlayer::GetOptimumOnFootSendRate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?GetOptimumInCarSendRate@CLocalPlayer@@QAEHH@Z
_TEXT	SEGMENT
_VehicleID$ = -68					; size = 2
_vecMoveSpeed$ = -56					; size = 12
_pGameVehicle$ = -36					; size = 4
_pVehiclePool$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_iPlayersEffected$ = 8					; size = 4
?GetOptimumInCarSendRate@CLocalPlayer@@QAEHH@Z PROC	; CLocalPlayer::GetOptimumInCarSendRate, COMDAT
; _this$ = ecx

; 878  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 880  : 	CVehicle	 *pGameVehicle=NULL;

	mov	DWORD PTR _pGameVehicle$[ebp], 0

; 881  : 	VECTOR		 vecMoveSpeed;
; 882  : 	VEHICLEID	 VehicleID=0;

	xor	eax, eax
	mov	WORD PTR _VehicleID$[ebp], ax

; 883  : 
; 884  : 	if(m_pPlayerPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN1@GetOptimum

; 885  : 
; 886  : 		VehicleID = pVehiclePool->FindIDFromGtaPtr(m_pPlayerPed->GetGtaVehicle());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _VehicleID$[ebp], ax

; 887  : 		pGameVehicle = pVehiclePool->GetAt(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pGameVehicle$[ebp], eax

; 888  : 
; 889  : 		if(pGameVehicle) {

	cmp	DWORD PTR _pGameVehicle$[ebp], 0
	je	$LN1@GetOptimum

; 890  : 
; 891  : 			pGameVehicle->GetMoveSpeedVector(&vecMoveSpeed);

	lea	eax, DWORD PTR _vecMoveSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z ; CEntity::GetMoveSpeedVector

; 892  : 
; 893  : 			if( (vecMoveSpeed.X == 0.0f) &&
; 894  : 				(vecMoveSpeed.Y == 0.0f) &&
; 895  : 				(vecMoveSpeed.Z == 0.0f) ) {

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@GetOptimum
	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@GetOptimum
	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@GetOptimum

; 896  : 
; 897  : 				if(pNetGame->IsLanMode()) return LANMODE_IDLE_INCAR_SENDRATE;

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?IsLanMode@CNetGame@@QAEHXZ		; CNetGame::IsLanMode
	test	eax, eax
	je	SHORT $LN5@GetOptimum
	mov	eax, 30					; 0000001eH
	jmp	SHORT $LN9@GetOptimum
	jmp	SHORT $LN4@GetOptimum
$LN5@GetOptimum:

; 898  : 				else return (NETMODE_IDLE_INCAR_SENDRATE + (int)iPlayersEffected*NETMODE_SEND_MULTIPLIER);

	mov	eax, DWORD PTR _iPlayersEffected$[ebp]
	lea	eax, DWORD PTR [eax+eax+100]
	jmp	SHORT $LN9@GetOptimum
$LN4@GetOptimum:

; 899  : 			}
; 900  : 			else {

	jmp	SHORT $LN1@GetOptimum
$LN6@GetOptimum:

; 901  : 				if(pNetGame->IsLanMode()) return LANMODE_NORMAL_INCAR_SENDRATE;

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?IsLanMode@CNetGame@@QAEHXZ		; CNetGame::IsLanMode
	test	eax, eax
	je	SHORT $LN2@GetOptimum
	mov	eax, 15					; 0000000fH
	jmp	SHORT $LN9@GetOptimum
	jmp	SHORT $LN1@GetOptimum
$LN2@GetOptimum:

; 902  : 				else return (NETMODE_NORMAL_INCAR_SENDRATE + (int)iPlayersEffected*NETMODE_SEND_MULTIPLIER);

	mov	eax, DWORD PTR _iPlayersEffected$[ebp]
	lea	eax, DWORD PTR [eax+eax+40]
	jmp	SHORT $LN9@GetOptimum
$LN1@GetOptimum:

; 903  : 			}
; 904  : 		}
; 905  : 	}
; 906  : 	return 1000;

	mov	eax, 1000				; 000003e8H
$LN9@GetOptimum:

; 907  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetOptimum
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN13@GetOptimum:
	DD	1
	DD	$LN12@GetOptimum
$LN12@GetOptimum:
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN11@GetOptimum
$LN11@GetOptimum:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?GetOptimumInCarSendRate@CLocalPlayer@@QAEHH@Z ENDP	; CLocalPlayer::GetOptimumInCarSendRate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?ResetAllSyncAttributes@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ResetAllSyncAttributes@CLocalPlayer@@QAEXXZ PROC	; CLocalPlayer::ResetAllSyncAttributes, COMDAT
; _this$ = ecx

; 98   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 	m_byteCurInterior = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+169], 0

; 100  : 	m_LastVehicle = 0xFFFF;

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+37], ax

; 101  : 	m_bInRCMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+170], 0

; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetAllSyncAttributes@CLocalPlayer@@QAEXXZ ENDP	; CLocalPlayer::ResetAllSyncAttributes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SendAimSyncData@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv150 = -584						; size = 4
tv136 = -584						; size = 4
tv91 = -584						; size = 4
_pwstWeapon$ = -384					; size = 4
_caAim$ = -372						; size = 4
_aimSync$ = -360					; size = 42
_bsAimSync$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendAimSyncData@CLocalPlayer@@QAEXXZ PROC		; CLocalPlayer::SendAimSyncData, COMDAT
; _this$ = ecx

; 662  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendAimSyncData@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 572				; 0000023cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-584]
	mov	ecx, 143				; 0000008fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 663  : 	RakNet::BitStream bsAimSync;

	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 664  : 	AIM_SYNC_DATA aimSync;
; 665  : 	CAMERA_AIM * caAim = m_pPlayerPed->GetCurrentAim();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ ; CPlayerPed::GetCurrentAim
	mov	DWORD PTR _caAim$[ebp], eax

; 666  : 	
; 667  : 	aimSync.byteCamMode = m_pPlayerPed->GetCameraMode();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCameraMode@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCameraMode
	mov	BYTE PTR _aimSync$[ebp], al

; 668  : 
; 669  : 	aimSync.vecAimf1.X = caAim->f1x;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _aimSync$[ebp+2], xmm0

; 670  : 	aimSync.vecAimf1.Y = caAim->f1y;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _aimSync$[ebp+6], xmm0

; 671  : 	aimSync.vecAimf1.Z = caAim->f1z;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _aimSync$[ebp+10], xmm0

; 672  : 	aimSync.vecAimf2.X = caAim->f2x;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax+36]
	movss	DWORD PTR _aimSync$[ebp+14], xmm0

; 673  : 	aimSync.vecAimf2.Y = caAim->f2y;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax+40]
	movss	DWORD PTR _aimSync$[ebp+18], xmm0

; 674  : 	aimSync.vecAimf2.Z = caAim->f2z;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax+44]
	movss	DWORD PTR _aimSync$[ebp+22], xmm0

; 675  : 	aimSync.vecAimPos.X = caAim->pos1x;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _aimSync$[ebp+26], xmm0

; 676  : 	aimSync.vecAimPos.Y = caAim->pos1y;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _aimSync$[ebp+30], xmm0

; 677  : 	aimSync.vecAimPos.Z = caAim->pos1z;

	mov	eax, DWORD PTR _caAim$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _aimSync$[ebp+34], xmm0

; 678  : 
; 679  : 	aimSync.fAimZ = m_pPlayerPed->GetAimZ();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetAimZ@CPlayerPed@@QAEMXZ		; CPlayerPed::GetAimZ
	fstp	DWORD PTR _aimSync$[ebp+38]

; 680  : 	
; 681  : 	aimSync.byteCamExtZoom = (BYTE)(m_pPlayerPed->GetCameraExtendedZoom() * 63.0f);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCameraExtendedZoom@CPlayerPed@@QAEMXZ ; CPlayerPed::GetCameraExtendedZoom
	fstp	DWORD PTR tv91[ebp]
	movss	xmm0, DWORD PTR tv91[ebp]
	mulss	xmm0, DWORD PTR __real@427c0000
	cvttss2si ecx, xmm0
	and	cl, 63					; 0000003fH
	mov	dl, BYTE PTR _aimSync$[ebp+1]
	and	dl, 192					; 000000c0H
	or	dl, cl
	mov	BYTE PTR _aimSync$[ebp+1], dl

; 682  : 	
; 683  : 	WEAPON_SLOT_TYPE* pwstWeapon = m_pPlayerPed->GetCurrentWeaponSlot();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@XZ ; CPlayerPed::GetCurrentWeaponSlot
	mov	DWORD PTR _pwstWeapon$[ebp], eax

; 684  : 	if (pwstWeapon->dwState == 2)

	mov	eax, DWORD PTR _pwstWeapon$[ebp]
	cmp	DWORD PTR [eax+4], 2
	jne	SHORT $LN2@SendAimSyn

; 685  : 		aimSync.byteWeaponState = WS_RELOADING;

	mov	al, BYTE PTR _aimSync$[ebp+1]
	or	al, 192					; 000000c0H
	mov	BYTE PTR _aimSync$[ebp+1], al

; 686  : 	else

	jmp	SHORT $LN1@SendAimSyn
$LN2@SendAimSyn:

; 687  : 		aimSync.byteWeaponState = (pwstWeapon->dwAmmoInClip > 1) ? WS_MORE_BULLETS : pwstWeapon->dwAmmoInClip;

	mov	eax, DWORD PTR _pwstWeapon$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jbe	SHORT $LN5@SendAimSyn
	mov	DWORD PTR tv136[ebp], 2
	jmp	SHORT $LN6@SendAimSyn
$LN5@SendAimSyn:
	mov	ecx, DWORD PTR _pwstWeapon$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv136[ebp], edx
$LN6@SendAimSyn:
	mov	al, BYTE PTR tv136[ebp]
	and	al, 3
	shl	al, 6
	mov	cl, BYTE PTR _aimSync$[ebp+1]
	and	cl, 63					; 0000003fH
	or	cl, al
	mov	BYTE PTR _aimSync$[ebp+1], cl
$LN1@SendAimSyn:

; 688  : 
; 689  : 	bsAimSync.Write((BYTE)ID_AIM_SYNC);

	push	99					; 00000063H
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 690  : 	bsAimSync.Write((PCHAR)&aimSync,sizeof(AIM_SYNC_DATA));

	push	42					; 0000002aH
	lea	eax, DWORD PTR _aimSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 691  : 	pNetGame->GetRakClient()->Send(&bsAimSync,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv150[ebp], eax
	mov	esi, esp
	push	0
	push	1
	push	1
	lea	eax, DWORD PTR _bsAimSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv150[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv150[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 692  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@SendAimSyn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 584				; 00000248H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@SendAimSyn:
	DD	2
	DD	$LN11@SendAimSyn
$LN11@SendAimSyn:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN8@SendAimSyn
	DD	-360					; fffffe98H
	DD	42					; 0000002aH
	DD	$LN9@SendAimSyn
$LN9@SendAimSyn:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN8@SendAimSyn:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendAimSyncData@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendAimSyncData@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-588]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendAimSyncData@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendAimSyncData@CLocalPlayer@@QAEXXZ ENDP		; CLocalPlayer::SendAimSyncData
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv227 = -668						; size = 4
tv217 = -668						; size = 4
tv225 = -664						; size = 4
tv215 = -664						; size = 4
tv154 = -660						; size = 4
tv94 = -660						; size = 4
tv222 = -658						; size = 2
tv212 = -658						; size = 2
_mat$ = -460						; size = 64
_psSync$ = -388						; size = 24
_wKeys$ = -356						; size = 2
_udAnalog$ = -344					; size = 2
_lrAnalog$ = -332					; size = 2
_pVehiclePool$ = -320					; size = 4
_bsPassengerSync$ = -308				; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ PROC	; CLocalPlayer::SendPassengerFullSyncData, COMDAT
; _this$ = ecx

; 839  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 656				; 00000290H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-668]
	mov	ecx, 164				; 000000a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 840  : 	RakNet::BitStream bsPassengerSync;

	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 841  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 842  : 
; 843  : 	WORD lrAnalog,udAnalog;
; 844  : 	WORD wKeys = m_pPlayerPed->GetKeys(&lrAnalog,&udAnalog);

	lea	eax, DWORD PTR _udAnalog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lrAnalog$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetKeys@CPlayerPed@@QAEGPAG0@Z		; CPlayerPed::GetKeys
	mov	WORD PTR _wKeys$[ebp], ax

; 845  : 	PASSENGER_SYNC_DATA psSync;
; 846  : 	MATRIX4X4 mat;
; 847  : 
; 848  : 	psSync.VehicleID = pVehiclePool->FindIDFromGtaPtr(m_pPlayerPed->GetGtaVehicle());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _psSync$[ebp], ax

; 849  : 	
; 850  : 	if(psSync.VehicleID == INVALID_VEHICLE_ID) return;  // not valid

	movzx	eax, WORD PTR _psSync$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN2@SendPassen
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN3@SendPassen
$LN2@SendPassen:

; 851  : 
; 852  : 	psSync.lrAnalog = lrAnalog;

	mov	ax, WORD PTR _lrAnalog$[ebp]
	mov	WORD PTR _psSync$[ebp+6], ax

; 853  : 	psSync.udAnalog = udAnalog;

	mov	ax, WORD PTR _udAnalog$[ebp]
	mov	WORD PTR _psSync$[ebp+8], ax

; 854  : 	psSync.wKeys = wKeys;

	mov	ax, WORD PTR _wKeys$[ebp]
	mov	WORD PTR _psSync$[ebp+10], ax

; 855  : 	psSync.bytePlayerHealth = (BYTE)m_pPlayerPed->GetHealth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetHealth@CPlayerPed@@QAEMXZ		; CPlayerPed::GetHealth
	fnstcw	WORD PTR tv212[ebp]
	movzx	eax, WORD PTR tv212[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv215[ebp], eax
	fldcw	WORD PTR tv215[ebp]
	fistp	DWORD PTR tv217[ebp]
	fldcw	WORD PTR tv212[ebp]
	mov	cl, BYTE PTR tv217[ebp]
	mov	BYTE PTR _psSync$[ebp+4], cl

; 856  : 	psSync.bytePlayerArmour = (BYTE)m_pPlayerPed->GetArmour();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetArmour@CPlayerPed@@QAEMXZ		; CPlayerPed::GetArmour
	fnstcw	WORD PTR tv222[ebp]
	movzx	eax, WORD PTR tv222[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv225[ebp], eax
	fldcw	WORD PTR tv225[ebp]
	fistp	DWORD PTR tv227[ebp]
	fldcw	WORD PTR tv222[ebp]
	mov	cl, BYTE PTR tv227[ebp]
	mov	BYTE PTR _psSync$[ebp+5], cl

; 857  : 
; 858  : 	psSync.byteSeatFlags = m_pPlayerPed->GetVehicleSeatID();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetVehicleSeatID@CPlayerPed@@QAEHXZ	; CPlayerPed::GetVehicleSeatID
	mov	DWORD PTR tv94[ebp], eax
	mov	cl, BYTE PTR tv94[ebp]
	and	cl, 127					; 0000007fH
	mov	dl, BYTE PTR _psSync$[ebp+2]
	and	dl, 128					; 00000080H
	or	dl, cl
	mov	BYTE PTR _psSync$[ebp+2], dl

; 859  : 	psSync.byteDriveBy = m_bPassengerDriveByMode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+165]
	and	cl, 1
	shl	cl, 7
	mov	dl, BYTE PTR _psSync$[ebp+2]
	and	dl, 127					; 0000007fH
	or	dl, cl
	mov	BYTE PTR _psSync$[ebp+2], dl

; 860  : 
; 861  : 	psSync.byteCurrentWeapon = m_pPlayerPed->GetCurrentWeapon();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	mov	BYTE PTR _psSync$[ebp+3], al

; 862  : 
; 863  : 	m_pPlayerPed->GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 864  : 	psSync.vecPos.X = mat.pos.X;

	movss	xmm0, DWORD PTR _mat$[ebp+48]
	movss	DWORD PTR _psSync$[ebp+12], xmm0

; 865  : 	psSync.vecPos.Y = mat.pos.Y;

	movss	xmm0, DWORD PTR _mat$[ebp+52]
	movss	DWORD PTR _psSync$[ebp+16], xmm0

; 866  : 	psSync.vecPos.Z = mat.pos.Z;

	movss	xmm0, DWORD PTR _mat$[ebp+56]
	movss	DWORD PTR _psSync$[ebp+20], xmm0

; 867  : 
; 868  : 	bsPassengerSync.Write((BYTE)ID_PASSENGER_SYNC);

	push	98					; 00000062H
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 869  : 	bsPassengerSync.Write((PCHAR)&psSync,sizeof(PASSENGER_SYNC_DATA));

	push	24					; 00000018H
	lea	eax, DWORD PTR _psSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 870  : 	pNetGame->GetRakClient()->Send(&bsPassengerSync,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv154[ebp], eax
	mov	esi, esp
	push	0
	push	1
	push	1
	lea	eax, DWORD PTR _bsPassengerSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv154[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv154[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 871  : 
; 872  : 	if(m_bPassengerDriveByMode)	SendAimSyncData();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+165], 0
	je	SHORT $LN1@SendPassen
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAimSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendAimSyncData
$LN1@SendPassen:

; 873  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN3@SendPassen:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@SendPassen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 668				; 0000029cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@SendPassen:
	DD	5
	DD	$LN12@SendPassen
$LN12@SendPassen:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN6@SendPassen
	DD	-332					; fffffeb4H
	DD	2
	DD	$LN7@SendPassen
	DD	-344					; fffffea8H
	DD	2
	DD	$LN8@SendPassen
	DD	-388					; fffffe7cH
	DD	24					; 00000018H
	DD	$LN9@SendPassen
	DD	-460					; fffffe34H
	DD	64					; 00000040H
	DD	$LN10@SendPassen
$LN10@SendPassen:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN9@SendPassen:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN8@SendPassen:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN7@SendPassen:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN6@SendPassen:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-672]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ ENDP	; CLocalPlayer::SendPassengerFullSyncData
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv467 = -1196						; size = 4
tv457 = -1196						; size = 4
tv465 = -1192						; size = 4
tv455 = -1192						; size = 4
tv376 = -1188						; size = 4
tv298 = -1188						; size = 4
tv462 = -1186						; size = 2
tv452 = -1186						; size = 2
_bsTrailerSync$2 = -988					; size = 273
_pTrailer$3 = -704					; size = 4
_trSync$4 = -692					; size = 42
_matTrailer$5 = -640					; size = 64
_byteCurrentWeapon$6 = -565				; size = 1
_vehTrailer$7 = -556					; size = 4
_icSync$ = -544						; size = 73
_pGameVehicle$ = -460					; size = 4
_wKeys$ = -448						; size = 2
_udAnalog$ = -436					; size = 2
_lrAnalog$ = -424					; size = 2
_vecMoveSpeed$ = -412					; size = 12
_matPlayer$ = -392					; size = 64
_pVehiclePool$ = -320					; size = 4
_bsVehicleSync$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ PROC	; CLocalPlayer::SendInCarFullSyncData, COMDAT
; _this$ = ecx

; 697  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1184				; 000004a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1196]
	mov	ecx, 296				; 00000128H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 698  : 	RakNet::BitStream bsVehicleSync;

	lea	ecx, DWORD PTR _bsVehicleSync$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 699  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 700  : 
; 701  : 	MATRIX4X4 matPlayer;
; 702  : 	VECTOR vecMoveSpeed;
; 703  : 
; 704  : 	WORD lrAnalog,udAnalog;
; 705  : 	WORD wKeys = m_pPlayerPed->GetKeys(&lrAnalog,&udAnalog);

	lea	eax, DWORD PTR _udAnalog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lrAnalog$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetKeys@CPlayerPed@@QAEGPAG0@Z		; CPlayerPed::GetKeys
	mov	WORD PTR _wKeys$[ebp], ax

; 706  : 	CVehicle *pGameVehicle=NULL;

	mov	DWORD PTR _pGameVehicle$[ebp], 0

; 707  : 	
; 708  : 	INCAR_SYNC_DATA icSync;
; 709  : 
; 710  : 	if(m_pPlayerPed)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN1@SendInCarF

; 711  : 	{
; 712  : 		icSync.VehicleID = pVehiclePool->FindIDFromGtaPtr(m_pPlayerPed->GetGtaVehicle());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _icSync$[ebp], ax

; 713  : 		
; 714  : 		if(icSync.VehicleID == INVALID_VEHICLE_ID) return; // not valid

	movzx	eax, WORD PTR _icSync$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN24@SendInCarF
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsVehicleSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN26@SendInCarF
$LN24@SendInCarF:

; 715  : 
; 716  : 		icSync.lrAnalog = lrAnalog;

	mov	ax, WORD PTR _lrAnalog$[ebp]
	mov	WORD PTR _icSync$[ebp+2], ax

; 717  : 		icSync.udAnalog = udAnalog;

	mov	ax, WORD PTR _udAnalog$[ebp]
	mov	WORD PTR _icSync$[ebp+4], ax

; 718  : 		icSync.wKeys = wKeys;

	mov	ax, WORD PTR _wKeys$[ebp]
	mov	WORD PTR _icSync$[ebp+6], ax

; 719  : 
; 720  : 		// get the vehicle matrix
; 721  : 		pGameVehicle = pVehiclePool->GetAt(icSync.VehicleID);

	movzx	eax, WORD PTR _icSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pGameVehicle$[ebp], eax

; 722  : 		if(!pGameVehicle) return;

	cmp	DWORD PTR _pGameVehicle$[ebp], 0
	jne	SHORT $LN23@SendInCarF
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsVehicleSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN26@SendInCarF
$LN23@SendInCarF:

; 723  : 
; 724  : 		pGameVehicle->GetMatrix(&matPlayer);

	lea	eax, DWORD PTR _matPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 725  : 
; 726  : 		CompressNormalVector(&matPlayer.right,&icSync.cvecRoll);

	lea	eax, DWORD PTR _icSync$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _matPlayer$[ebp]
	push	ecx
	call	?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z ; CompressNormalVector
	add	esp, 8

; 727  : 		CompressNormalVector(&matPlayer.up,&icSync.cvecDirection);

	lea	eax, DWORD PTR _icSync$[ebp+17]
	push	eax
	lea	ecx, DWORD PTR _matPlayer$[ebp+16]
	push	ecx
	call	?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z ; CompressNormalVector
	add	esp, 8

; 728  : 
; 729  : 		icSync.vecPos.X = matPlayer.pos.X;

	movss	xmm0, DWORD PTR _matPlayer$[ebp+48]
	movss	DWORD PTR _icSync$[ebp+26], xmm0

; 730  : 		icSync.vecPos.Y = matPlayer.pos.Y;

	movss	xmm0, DWORD PTR _matPlayer$[ebp+52]
	movss	DWORD PTR _icSync$[ebp+30], xmm0

; 731  : 		icSync.vecPos.Z = matPlayer.pos.Z;

	movss	xmm0, DWORD PTR _matPlayer$[ebp+56]
	movss	DWORD PTR _icSync$[ebp+34], xmm0

; 732  : 			
; 733  : 		pGameVehicle->GetMoveSpeedVector(&vecMoveSpeed);

	lea	eax, DWORD PTR _vecMoveSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z ; CEntity::GetMoveSpeedVector

; 734  : 
; 735  : 		icSync.vecMoveSpeed.X = vecMoveSpeed.X;

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp]
	movss	DWORD PTR _icSync$[ebp+38], xmm0

; 736  : 		icSync.vecMoveSpeed.Y = vecMoveSpeed.Y;

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+4]
	movss	DWORD PTR _icSync$[ebp+42], xmm0

; 737  : 		icSync.vecMoveSpeed.Z = vecMoveSpeed.Z;

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+8]
	movss	DWORD PTR _icSync$[ebp+46], xmm0

; 738  : 
; 739  : 		icSync.fCarHealth = pGameVehicle->GetHealth();

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetHealth@CVehicle@@QAEMXZ		; CVehicle::GetHealth
	fstp	DWORD PTR _icSync$[ebp+50]

; 740  : 		icSync.bytePlayerHealth = (BYTE)m_pPlayerPed->GetHealth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetHealth@CPlayerPed@@QAEMXZ		; CPlayerPed::GetHealth
	fnstcw	WORD PTR tv452[ebp]
	movzx	eax, WORD PTR tv452[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv455[ebp], eax
	fldcw	WORD PTR tv455[ebp]
	fistp	DWORD PTR tv457[ebp]
	fldcw	WORD PTR tv452[ebp]
	mov	cl, BYTE PTR tv457[ebp]
	mov	BYTE PTR _icSync$[ebp+54], cl

; 741  : 		icSync.bytePlayerArmour = (BYTE)m_pPlayerPed->GetArmour();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetArmour@CPlayerPed@@QAEMXZ		; CPlayerPed::GetArmour
	fnstcw	WORD PTR tv462[ebp]
	movzx	eax, WORD PTR tv462[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv465[ebp], eax
	fldcw	WORD PTR tv465[ebp]
	fistp	DWORD PTR tv467[ebp]
	fldcw	WORD PTR tv462[ebp]
	mov	cl, BYTE PTR tv467[ebp]
	mov	BYTE PTR _icSync$[ebp+55], cl

; 742  : 
; 743  : 		// Note: Train Speed and Tire Popping values are mutually exclusive, which means
; 744  : 		//       if one is set, the other one will be affected.
; 745  : 
; 746  : 		if( pGameVehicle->GetModelIndex() == TRAIN_PASSENGER_LOCO ||
; 747  : 			pGameVehicle->GetModelIndex() == TRAIN_FREIGHT_LOCO ||
; 748  : 			pGameVehicle->GetModelIndex() == TRAIN_TRAM) {

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetModelIndex@CEntity@@QAEIXZ		; CEntity::GetModelIndex
	cmp	eax, 537				; 00000219H
	je	SHORT $LN21@SendInCarF
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetModelIndex@CEntity@@QAEIXZ		; CEntity::GetModelIndex
	cmp	eax, 538				; 0000021aH
	je	SHORT $LN21@SendInCarF
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetModelIndex@CEntity@@QAEIXZ		; CEntity::GetModelIndex
	cmp	eax, 449				; 000001c1H
	jne	SHORT $LN22@SendInCarF
$LN21@SendInCarF:

; 749  : 				icSync.fTrainSpeed = pGameVehicle->GetTrainSpeed();

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetTrainSpeed@CVehicle@@QAEMXZ		; CVehicle::GetTrainSpeed
	fstp	DWORD PTR _icSync$[ebp+69]

; 750  : 		} else {

	jmp	$LN16@SendInCarF
$LN22@SendInCarF:

; 751  : 			icSync.fTrainSpeed = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _icSync$[ebp+69], xmm0

; 752  : 			if (pNetGame->m_bTirePopping) {

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	$LN16@SendInCarF

; 753  : 				if (pGameVehicle->GetVehicleSubtype() == VEHICLE_SUBTYPE_BIKE) {

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetVehicleSubtype@CVehicle@@QAEIXZ	; CVehicle::GetVehicleSubtype
	cmp	eax, 2
	jne	SHORT $LN18@SendInCarF

; 754  : 					icSync.byteTires[0] = pGameVehicle->GetWheelPopped(0);

	push	0
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetWheelPopped@CVehicle@@QAEEK@Z	; CVehicle::GetWheelPopped
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _icSync$[ebp+edx+59], al

; 755  : 					icSync.byteTires[1] = pGameVehicle->GetWheelPopped(1);

	push	1
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetWheelPopped@CVehicle@@QAEEK@Z	; CVehicle::GetWheelPopped
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR _icSync$[ebp+ecx+59], al

; 756  : 					icSync.byteTires[2] = 0;

	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _icSync$[ebp+eax+59], 0

; 757  : 					icSync.byteTires[3] = 0;

	mov	eax, 1
	imul	ecx, eax, 3
	mov	BYTE PTR _icSync$[ebp+ecx+59], 0
	jmp	SHORT $LN16@SendInCarF
$LN18@SendInCarF:

; 758  : 				} else if ( pGameVehicle->GetVehicleSubtype() == VEHICLE_SUBTYPE_CAR) {

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetVehicleSubtype@CVehicle@@QAEIXZ	; CVehicle::GetVehicleSubtype
	cmp	eax, 1
	jne	SHORT $LN16@SendInCarF

; 759  : 					icSync.byteTires[0] = pGameVehicle->GetWheelPopped(0);

	push	0
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetWheelPopped@CVehicle@@QAEEK@Z	; CVehicle::GetWheelPopped
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _icSync$[ebp+edx+59], al

; 760  : 					icSync.byteTires[1] = pGameVehicle->GetWheelPopped(1);

	push	1
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetWheelPopped@CVehicle@@QAEEK@Z	; CVehicle::GetWheelPopped
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR _icSync$[ebp+ecx+59], al

; 761  : 					icSync.byteTires[2] = pGameVehicle->GetWheelPopped(2);

	push	2
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetWheelPopped@CVehicle@@QAEEK@Z	; CVehicle::GetWheelPopped
	mov	ecx, 1
	shl	ecx, 1
	mov	BYTE PTR _icSync$[ebp+ecx+59], al

; 762  : 					icSync.byteTires[3] = pGameVehicle->GetWheelPopped(3);

	push	3
	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetWheelPopped@CVehicle@@QAEEK@Z	; CVehicle::GetWheelPopped
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR _icSync$[ebp+edx+59], al
$LN16@SendInCarF:

; 763  : 				}
; 764  : 			}
; 765  : 		}
; 766  : 	
; 767  : 		icSync.TrailerID = 0;

	xor	eax, eax
	mov	WORD PTR _icSync$[ebp+63], ax

; 768  : 		VEHICLE_TYPE* vehTrailer = (VEHICLE_TYPE*)pGameVehicle->m_pVehicle->dwTrailer;

	mov	eax, DWORD PTR _pGameVehicle$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+1224]
	mov	DWORD PTR _vehTrailer$7[ebp], edx

; 769  : 		if (vehTrailer != NULL)	{

	cmp	DWORD PTR _vehTrailer$7[ebp], 0
	je	SHORT $LN13@SendInCarF

; 770  : 			if ( ScriptCommand(&is_trailer_on_cab, 
; 771  : 				 pVehiclePool->FindGtaIDFromGtaPtr(vehTrailer), 
; 772  : 				 pGameVehicle->m_dwGTAId) )

	mov	eax, DWORD PTR _pGameVehicle$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vehTrailer$7[ebp]
	push	edx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindGtaIDFromGtaPtr@CVehiclePool@@QAEHPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindGtaIDFromGtaPtr
	push	eax
	push	OFFSET _is_trailer_on_cab
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN14@SendInCarF

; 773  : 			{
; 774  : 				icSync.TrailerID = pVehiclePool->FindIDFromGtaPtr(vehTrailer);

	mov	eax, DWORD PTR _vehTrailer$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _icSync$[ebp+63], ax

; 775  : 			} else {

	jmp	SHORT $LN13@SendInCarF
$LN14@SendInCarF:

; 776  : 				icSync.TrailerID = 0;

	xor	eax, eax
	mov	WORD PTR _icSync$[ebp+63], ax
$LN13@SendInCarF:

; 777  : 			}
; 778  : 		}
; 779  : 
; 780  : 		// SPECIAL STUFF
; 781  : 		if(pGameVehicle->GetModelIndex() == HYDRA)

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetModelIndex@CEntity@@QAEIXZ		; CEntity::GetModelIndex
	cmp	eax, 520				; 00000208H
	jne	SHORT $LN12@SendInCarF

; 782  : 			icSync.dwHydraThrustAngle = pGameVehicle->GetHydraThrusters();

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetHydraThrusters@CVehicle@@QAEKXZ	; CVehicle::GetHydraThrusters
	mov	DWORD PTR _icSync$[ebp+65], eax
	jmp	SHORT $LN11@SendInCarF
$LN12@SendInCarF:

; 783  : 		else icSync.dwHydraThrustAngle = 0;

	mov	DWORD PTR _icSync$[ebp+65], 0
$LN11@SendInCarF:

; 784  : 		
; 785  : 		// Some other SPECIAL sync stuff (these can be optimized for specific vehicles, someday!)
; 786  : 		if(pGameVehicle->IsSirenOn()) icSync.byteSirenOn = 1;

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?IsSirenOn@CVehicle@@QAEHXZ		; CVehicle::IsSirenOn
	test	eax, eax
	je	SHORT $LN10@SendInCarF
	mov	BYTE PTR _icSync$[ebp+57], 1
	jmp	SHORT $LN9@SendInCarF
$LN10@SendInCarF:

; 787  : 		else icSync.byteSirenOn = 0;

	mov	BYTE PTR _icSync$[ebp+57], 0
$LN9@SendInCarF:

; 788  : 
; 789  : 		if(pGameVehicle->GetLandingGearState() == LGS_UP) 

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?GetLandingGearState@CVehicle@@QAE?AW4eLandingGearState@@XZ ; CVehicle::GetLandingGearState
	cmp	eax, 1
	jne	SHORT $LN8@SendInCarF

; 790  : 			icSync.byteLandingGearState = 0;

	mov	BYTE PTR _icSync$[ebp+58], 0
	jmp	SHORT $LN7@SendInCarF
$LN8@SendInCarF:

; 791  : 		else icSync.byteLandingGearState = 1;

	mov	BYTE PTR _icSync$[ebp+58], 1
$LN7@SendInCarF:

; 792  : 
; 793  : 		if (wKeys & 4) { // firing

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 4
	je	SHORT $LN5@SendInCarF

; 794  : 			BYTE byteCurrentWeapon = m_pPlayerPed->GetCurrentWeapon();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	mov	BYTE PTR _byteCurrentWeapon$6[ebp], al

; 795  : 			if (byteCurrentWeapon == WEAPON_UZI || 
; 796  : 				byteCurrentWeapon == WEAPON_MP5 || 
; 797  : 				byteCurrentWeapon == WEAPON_TEC9) 

	movzx	eax, BYTE PTR _byteCurrentWeapon$6[ebp]
	cmp	eax, 28					; 0000001cH
	je	SHORT $LN4@SendInCarF
	movzx	eax, BYTE PTR _byteCurrentWeapon$6[ebp]
	cmp	eax, 29					; 0000001dH
	je	SHORT $LN4@SendInCarF
	movzx	eax, BYTE PTR _byteCurrentWeapon$6[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN5@SendInCarF
$LN4@SendInCarF:

; 798  : 				icSync.byteCurrentWeapon = byteCurrentWeapon;

	mov	al, BYTE PTR _byteCurrentWeapon$6[ebp]
	mov	BYTE PTR _icSync$[ebp+56], al
$LN5@SendInCarF:

; 799  : 		}
; 800  : 
; 801  : 		// send
; 802  : 		bsVehicleSync.Write((BYTE)ID_VEHICLE_SYNC);

	push	97					; 00000061H
	lea	ecx, DWORD PTR _bsVehicleSync$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 803  : 		bsVehicleSync.Write((PCHAR)&icSync,sizeof(INCAR_SYNC_DATA));

	push	73					; 00000049H
	lea	eax, DWORD PTR _icSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsVehicleSync$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 804  : 		pNetGame->GetRakClient()->Send(&bsVehicleSync,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv298[ebp], eax
	mov	esi, esp
	push	0
	push	1
	push	1
	lea	eax, DWORD PTR _bsVehicleSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv298[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv298[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 805  : 
; 806  : 		// For the tank/firetruck, we need some info on aiming
; 807  : 		if (pGameVehicle->HasTurret()) SendAimSyncData();		

	mov	ecx, DWORD PTR _pGameVehicle$[ebp]
	call	?HasTurret@CVehicle@@QAEHXZ		; CVehicle::HasTurret
	test	eax, eax
	je	SHORT $LN3@SendInCarF
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAimSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendAimSyncData
$LN3@SendInCarF:

; 808  : 			
; 809  : 		if (icSync.TrailerID && icSync.TrailerID < MAX_VEHICLES)

	movzx	eax, WORD PTR _icSync$[ebp+63]
	test	eax, eax
	je	$LN1@SendInCarF
	movzx	eax, WORD PTR _icSync$[ebp+63]
	cmp	eax, 702				; 000002beH
	jge	$LN1@SendInCarF

; 810  : 		{
; 811  : 			MATRIX4X4 matTrailer;
; 812  : 			TRAILER_SYNC_DATA trSync;
; 813  : 			CVehicle* pTrailer = pVehiclePool->GetAt(icSync.TrailerID);

	movzx	eax, WORD PTR _icSync$[ebp+63]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pTrailer$3[ebp], eax

; 814  : 			if (pTrailer)

	cmp	DWORD PTR _pTrailer$3[ebp], 0
	je	$LN1@SendInCarF

; 815  : 			{
; 816  : 				pTrailer->GetMatrix(&matTrailer);

	lea	eax, DWORD PTR _matTrailer$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTrailer$3[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 817  : 				
; 818  : 				CompressNormalVector(&matTrailer.right,&trSync.cvecRoll);

	lea	eax, DWORD PTR _trSync$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _matTrailer$5[ebp]
	push	ecx
	call	?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z ; CompressNormalVector
	add	esp, 8

; 819  : 				CompressNormalVector(&matTrailer.up,&trSync.cvecDirection);

	lea	eax, DWORD PTR _trSync$4[ebp+9]
	push	eax
	lea	ecx, DWORD PTR _matTrailer$5[ebp+16]
	push	ecx
	call	?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z ; CompressNormalVector
	add	esp, 8

; 820  : 				
; 821  : 				trSync.vecPos.X = matTrailer.pos.X;

	movss	xmm0, DWORD PTR _matTrailer$5[ebp+48]
	movss	DWORD PTR _trSync$4[ebp+18], xmm0

; 822  : 				trSync.vecPos.Y = matTrailer.pos.Y;

	movss	xmm0, DWORD PTR _matTrailer$5[ebp+52]
	movss	DWORD PTR _trSync$4[ebp+22], xmm0

; 823  : 				trSync.vecPos.Z = matTrailer.pos.Z;

	movss	xmm0, DWORD PTR _matTrailer$5[ebp+56]
	movss	DWORD PTR _trSync$4[ebp+26], xmm0

; 824  : 				
; 825  : 				pTrailer->GetMoveSpeedVector(&trSync.vecMoveSpeed);

	lea	eax, DWORD PTR _trSync$4[ebp+30]
	push	eax
	mov	ecx, DWORD PTR _pTrailer$3[ebp]
	call	?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z ; CEntity::GetMoveSpeedVector

; 826  : 				
; 827  : 				RakNet::BitStream bsTrailerSync;

	lea	ecx, DWORD PTR _bsTrailerSync$2[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 828  : 				bsTrailerSync.Write((BYTE)ID_TRAILER_SYNC);

	push	105					; 00000069H
	lea	ecx, DWORD PTR _bsTrailerSync$2[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 829  : 				bsTrailerSync.Write((PCHAR)&trSync, sizeof (TRAILER_SYNC_DATA));

	push	42					; 0000002aH
	lea	eax, DWORD PTR _trSync$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsTrailerSync$2[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 830  : 				pNetGame->GetRakClient()->Send(&bsTrailerSync,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv376[ebp], eax
	mov	esi, esp
	push	0
	push	1
	push	1
	lea	eax, DWORD PTR _bsTrailerSync$2[ebp]
	push	eax
	mov	ecx, DWORD PTR tv376[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv376[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 831  : 			}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bsTrailerSync$2[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN1@SendInCarF:

; 832  : 		}
; 833  : 	}
; 834  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsVehicleSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN26@SendInCarF:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@SendInCarF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1196				; 000004acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN41@SendInCarF:
	DD	9
	DD	$LN40@SendInCarF
$LN40@SendInCarF:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN30@SendInCarF
	DD	-392					; fffffe78H
	DD	64					; 00000040H
	DD	$LN31@SendInCarF
	DD	-412					; fffffe64H
	DD	12					; 0000000cH
	DD	$LN32@SendInCarF
	DD	-424					; fffffe58H
	DD	2
	DD	$LN33@SendInCarF
	DD	-436					; fffffe4cH
	DD	2
	DD	$LN34@SendInCarF
	DD	-544					; fffffde0H
	DD	73					; 00000049H
	DD	$LN35@SendInCarF
	DD	-640					; fffffd80H
	DD	64					; 00000040H
	DD	$LN36@SendInCarF
	DD	-692					; fffffd4cH
	DD	42					; 0000002aH
	DD	$LN37@SendInCarF
	DD	-988					; fffffc24H
	DD	273					; 00000111H
	DD	$LN38@SendInCarF
$LN38@SendInCarF:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN37@SendInCarF:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN36@SendInCarF:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN35@SendInCarF:
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN34@SendInCarF:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN33@SendInCarF:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN32@SendInCarF:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN31@SendInCarF:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN30@SendInCarF:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsVehicleSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__unwindfunclet$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ$1:
	lea	ecx, DWORD PTR _bsTrailerSync$2[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1200]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ ENDP	; CLocalPlayer::SendInCarFullSyncData
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv261 = -740						; size = 4
tv219 = -740						; size = 4
tv259 = -736						; size = 4
tv217 = -736						; size = 4
tv154 = -732						; size = 4
tv256 = -730						; size = 2
tv214 = -730						; size = 2
_pVehicle$ = -532					; size = 4
_VehId$ = -520						; size = 2
_vehContact$ = -508					; size = 4
_ofSync$ = -496						; size = 52
_wKeys$ = -436						; size = 2
_udAnalog$ = -424					; size = 2
_lrAnalog$ = -412					; size = 2
_vecMoveSpeed$ = -400					; size = 12
_matPlayer$ = -380					; size = 64
_bsPlayerSync$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ PROC	; CLocalPlayer::SendOnFootFullSyncData, COMDAT
; _this$ = ecx

; 605  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 728				; 000002d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 	RakNet::BitStream bsPlayerSync;

	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 607  : 	MATRIX4X4 matPlayer;
; 608  : 	VECTOR vecMoveSpeed;
; 609  : 	WORD lrAnalog,udAnalog;
; 610  : 	WORD wKeys = m_pPlayerPed->GetKeys(&lrAnalog,&udAnalog);

	lea	eax, DWORD PTR _udAnalog$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lrAnalog$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetKeys@CPlayerPed@@QAEGPAG0@Z		; CPlayerPed::GetKeys
	mov	WORD PTR _wKeys$[ebp], ax

; 611  : 
; 612  : 	ONFOOT_SYNC_DATA ofSync;
; 613  : 
; 614  : 	m_pPlayerPed->GetMatrix(&matPlayer);

	lea	eax, DWORD PTR _matPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 615  : 	m_pPlayerPed->GetMoveSpeedVector(&vecMoveSpeed);

	lea	eax, DWORD PTR _vecMoveSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z ; CEntity::GetMoveSpeedVector

; 616  : 
; 617  : 	// GENERAL PLAYER SYNC DATA
; 618  : 	ofSync.lrAnalog = lrAnalog;

	mov	ax, WORD PTR _lrAnalog$[ebp]
	mov	WORD PTR _ofSync$[ebp], ax

; 619  : 	ofSync.udAnalog = udAnalog;

	mov	ax, WORD PTR _udAnalog$[ebp]
	mov	WORD PTR _ofSync$[ebp+2], ax

; 620  : 	ofSync.wKeys = wKeys;

	mov	ax, WORD PTR _wKeys$[ebp]
	mov	WORD PTR _ofSync$[ebp+4], ax

; 621  : 	ofSync.vecPos.X = matPlayer.pos.X;

	movss	xmm0, DWORD PTR _matPlayer$[ebp+48]
	movss	DWORD PTR _ofSync$[ebp+6], xmm0

; 622  : 	ofSync.vecPos.Y = matPlayer.pos.Y;

	movss	xmm0, DWORD PTR _matPlayer$[ebp+52]
	movss	DWORD PTR _ofSync$[ebp+10], xmm0

; 623  : 	ofSync.vecPos.Z = matPlayer.pos.Z;

	movss	xmm0, DWORD PTR _matPlayer$[ebp+56]
	movss	DWORD PTR _ofSync$[ebp+14], xmm0

; 624  : 
; 625  : 	// Rotation stuff
; 626  : 	ofSync.fRotation = m_pPlayerPed->GetTargetRotation();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetTargetRotation@CPlayerPed@@QAEMXZ	; CPlayerPed::GetTargetRotation
	fstp	DWORD PTR _ofSync$[ebp+18]

; 627  : 	ofSync.byteHealth = (BYTE)m_pPlayerPed->GetHealth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetHealth@CPlayerPed@@QAEMXZ		; CPlayerPed::GetHealth
	fnstcw	WORD PTR tv214[ebp]
	movzx	eax, WORD PTR tv214[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv217[ebp], eax
	fldcw	WORD PTR tv217[ebp]
	fistp	DWORD PTR tv219[ebp]
	fldcw	WORD PTR tv214[ebp]
	mov	cl, BYTE PTR tv219[ebp]
	mov	BYTE PTR _ofSync$[ebp+22], cl

; 628  : 	ofSync.byteArmour = (BYTE)m_pPlayerPed->GetArmour();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetArmour@CPlayerPed@@QAEMXZ		; CPlayerPed::GetArmour
	fnstcw	WORD PTR tv256[ebp]
	movzx	eax, WORD PTR tv256[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv259[ebp], eax
	fldcw	WORD PTR tv259[ebp]
	fistp	DWORD PTR tv261[ebp]
	fldcw	WORD PTR tv256[ebp]
	mov	cl, BYTE PTR tv261[ebp]
	mov	BYTE PTR _ofSync$[ebp+23], cl

; 629  : 	
; 630  : 	ofSync.byteCurrentWeapon = m_pPlayerPed->GetCurrentWeapon();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	mov	BYTE PTR _ofSync$[ebp+24], al

; 631  : 	ofSync.byteSpecialAction = GetSpecialAction();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSpecialAction@CLocalPlayer@@QAEEXZ	; CLocalPlayer::GetSpecialAction
	mov	BYTE PTR _ofSync$[ebp+25], al

; 632  : 		
; 633  : 	ofSync.vecMoveSpeed.X = vecMoveSpeed.X;

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp]
	movss	DWORD PTR _ofSync$[ebp+26], xmm0

; 634  : 	ofSync.vecMoveSpeed.Y = vecMoveSpeed.Y;

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+4]
	movss	DWORD PTR _ofSync$[ebp+30], xmm0

; 635  : 	ofSync.vecMoveSpeed.Z = vecMoveSpeed.Z;

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+8]
	movss	DWORD PTR _ofSync$[ebp+34], xmm0

; 636  : 
; 637  : 	// For vehicle surfing
; 638  : 	VEHICLE_TYPE* vehContact = m_pPlayerPed->GetGtaContactVehicle();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGtaContactVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaContactVehicle
	mov	DWORD PTR _vehContact$[ebp], eax

; 639  : 	VEHICLEID VehId = 0xFFFF;

	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _VehId$[ebp], ax

; 640  : 	CVehicle* pVehicle = NULL;

	mov	DWORD PTR _pVehicle$[ebp], 0

; 641  : 
; 642  : 	if ( m_bSurfingMode ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+191], 0
	je	SHORT $LN2@SendOnFoot

; 643  : 		ofSync.vecSurfOffsets.X = m_vecLockedSurfingOffsets.X;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+195]
	movss	DWORD PTR _ofSync$[ebp+38], xmm0

; 644  : 		ofSync.vecSurfOffsets.Y = m_vecLockedSurfingOffsets.Y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+199]
	movss	DWORD PTR _ofSync$[ebp+42], xmm0

; 645  : 		ofSync.vecSurfOffsets.Z = m_vecLockedSurfingOffsets.Z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+203]
	movss	DWORD PTR _ofSync$[ebp+46], xmm0

; 646  : 		ofSync.SurfVehicleId = m_SurfingID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+207]
	mov	WORD PTR _ofSync$[ebp+50], cx

; 647  : 	} else {

	jmp	SHORT $LN1@SendOnFoot
$LN2@SendOnFoot:

; 648  : 		ofSync.vecSurfOffsets.X = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ofSync$[ebp+38], xmm0

; 649  : 		ofSync.vecSurfOffsets.Y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ofSync$[ebp+42], xmm0

; 650  : 		ofSync.vecSurfOffsets.Z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ofSync$[ebp+46], xmm0

; 651  : 		ofSync.SurfVehicleId = 0;

	xor	eax, eax
	mov	WORD PTR _ofSync$[ebp+50], ax
$LN1@SendOnFoot:

; 652  : 	}
; 653  : 
; 654  : 	bsPlayerSync.Write((BYTE)ID_PLAYER_SYNC);

	push	96					; 00000060H
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 655  : 	bsPlayerSync.Write((PCHAR)&ofSync,sizeof(ONFOOT_SYNC_DATA));

	push	52					; 00000034H
	lea	eax, DWORD PTR _ofSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 656  : 	pNetGame->GetRakClient()->Send(&bsPlayerSync,HIGH_PRIORITY,UNRELIABLE_SEQUENCED,0);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv154[ebp], eax
	mov	esi, esp
	push	0
	push	1
	push	1
	lea	eax, DWORD PTR _bsPlayerSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv154[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv154[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 657  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SendOnFoot
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@SendOnFoot:
	DD	6
	DD	$LN13@SendOnFoot
$LN13@SendOnFoot:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN6@SendOnFoot
	DD	-380					; fffffe84H
	DD	64					; 00000040H
	DD	$LN7@SendOnFoot
	DD	-400					; fffffe70H
	DD	12					; 0000000cH
	DD	$LN8@SendOnFoot
	DD	-412					; fffffe64H
	DD	2
	DD	$LN9@SendOnFoot
	DD	-424					; fffffe58H
	DD	2
	DD	$LN10@SendOnFoot
	DD	-496					; fffffe10H
	DD	52					; 00000034H
	DD	$LN11@SendOnFoot
$LN11@SendOnFoot:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN10@SendOnFoot:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN9@SendOnFoot:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN8@SendOnFoot:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN7@SendOnFoot:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN6@SendOnFoot:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-744]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ ENDP	; CLocalPlayer::SendOnFootFullSyncData
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?UpdateSurfing@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv260 = -476						; size = 4
_ud$1 = -276						; size = 2
_lr$2 = -264						; size = 2
_vecVehiclePlane$3 = -252				; size = 12
_matVehicle$4 = -232					; size = 64
_matPlayer$5 = -160					; size = 64
_vecTurn$6 = -88					; size = 12
_vecSpeed$7 = -68					; size = 12
_pVehicle$8 = -48					; size = 4
_vehID$ = -36						; size = 2
_Contact$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?UpdateSurfing@CLocalPlayer@@QAEXXZ PROC		; CLocalPlayer::UpdateSurfing, COMDAT
; _this$ = ecx

; 538  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 476				; 000001dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-476]
	mov	ecx, 119				; 00000077H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 539  : 	VEHICLE_TYPE *Contact = m_pPlayerPed->GetGtaContactVehicle();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGtaContactVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaContactVehicle
	mov	DWORD PTR _Contact$[ebp], eax

; 540  : 
; 541  : 	if(!Contact) {

	cmp	DWORD PTR _Contact$[ebp], 0
	jne	SHORT $LN4@UpdateSurf

; 542  : 		m_bSurfingMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+191], 0

; 543  : 		m_vecLockedSurfingOffsets.X = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+195], xmm0

; 544  : 		m_vecLockedSurfingOffsets.Y = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+199], xmm0

; 545  : 		m_vecLockedSurfingOffsets.Z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+203], xmm0

; 546  : 		m_SurfingID = INVALID_VEHICLE_ID;

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+207], ax

; 547  : 		return;

	jmp	$LN5@UpdateSurf
$LN4@UpdateSurf:

; 548  : 	}
; 549  : 
; 550  : 	VEHICLEID vehID = pNetGame->GetVehiclePool()->FindIDFromGtaPtr(Contact);

	mov	eax, DWORD PTR _Contact$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	ecx, eax
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _vehID$[ebp], ax

; 551  : 
; 552  : 	if(vehID && vehID != INVALID_VEHICLE_ID) {

	movzx	eax, WORD PTR _vehID$[ebp]
	test	eax, eax
	je	$LN2@UpdateSurf
	movzx	eax, WORD PTR _vehID$[ebp]
	cmp	eax, 65535				; 0000ffffH
	je	$LN2@UpdateSurf

; 553  : 
; 554  : 		CVehicle *pVehicle = pNetGame->GetVehiclePool()->GetAt(vehID);

	movzx	eax, WORD PTR _vehID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	ecx, eax
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$8[ebp], eax

; 555  : 
; 556  : 		if( pVehicle && pVehicle->IsOccupied() && 
; 557  : 			pVehicle->GetDistanceFromLocalPlayerPed() < 5.0f ) {

	cmp	DWORD PTR _pVehicle$8[ebp], 0
	je	$LN2@UpdateSurf
	mov	ecx, DWORD PTR _pVehicle$8[ebp]
	call	?IsOccupied@CVehicle@@QAEHXZ		; CVehicle::IsOccupied
	test	eax, eax
	je	$LN2@UpdateSurf
	mov	ecx, DWORD PTR _pVehicle$8[ebp]
	call	?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ ; CEntity::GetDistanceFromLocalPlayerPed
	fstp	DWORD PTR tv260[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	comiss	xmm0, DWORD PTR tv260[ebp]
	jbe	$LN2@UpdateSurf

; 558  : 
; 559  : 			VECTOR vecSpeed;
; 560  : 			VECTOR vecTurn;
; 561  : 			MATRIX4X4 matPlayer;
; 562  : 			MATRIX4X4 matVehicle;
; 563  : 			VECTOR vecVehiclePlane = {0.0f,0.0f,0.0f};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vecVehiclePlane$3[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vecVehiclePlane$3[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vecVehiclePlane$3[ebp+8], xmm0

; 564  : 			WORD lr, ud;
; 565  : 
; 566  : 			pVehicle->GetMatrix(&matVehicle);

	lea	eax, DWORD PTR _matVehicle$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehicle$8[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 567  : 			m_pPlayerPed->GetMatrix(&matPlayer);

	lea	eax, DWORD PTR _matPlayer$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 568  : 
; 569  : 			m_bSurfingMode = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+191], 1

; 570  : 			m_SurfingID = vehID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _vehID$[ebp]
	mov	WORD PTR [eax+207], cx

; 571  : 
; 572  : 			m_vecLockedSurfingOffsets.X = matPlayer.pos.X - matVehicle.pos.X;

	movss	xmm0, DWORD PTR _matPlayer$5[ebp+48]
	subss	xmm0, DWORD PTR _matVehicle$4[ebp+48]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+195], xmm0

; 573  : 			m_vecLockedSurfingOffsets.Y = matPlayer.pos.Y - matVehicle.pos.Y;

	movss	xmm0, DWORD PTR _matPlayer$5[ebp+52]
	subss	xmm0, DWORD PTR _matVehicle$4[ebp+52]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+199], xmm0

; 574  : 			m_vecLockedSurfingOffsets.Z = matPlayer.pos.Z - matVehicle.pos.Z;

	movss	xmm0, DWORD PTR _matPlayer$5[ebp+56]
	subss	xmm0, DWORD PTR _matVehicle$4[ebp+56]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+203], xmm0

; 575  : 
; 576  : 			vecSpeed.X = Contact->entity.vecMoveSpeed.X;

	mov	eax, DWORD PTR _Contact$[ebp]
	movss	xmm0, DWORD PTR [eax+68]
	movss	DWORD PTR _vecSpeed$7[ebp], xmm0

; 577  : 			vecSpeed.Y = Contact->entity.vecMoveSpeed.Y;

	mov	eax, DWORD PTR _Contact$[ebp]
	movss	xmm0, DWORD PTR [eax+72]
	movss	DWORD PTR _vecSpeed$7[ebp+4], xmm0

; 578  : 			vecSpeed.Z = Contact->entity.vecMoveSpeed.Z;

	mov	eax, DWORD PTR _Contact$[ebp]
	movss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _vecSpeed$7[ebp+8], xmm0

; 579  : 			vecTurn.X = Contact->entity.vecTurnSpeed.X;

	mov	eax, DWORD PTR _Contact$[ebp]
	movss	xmm0, DWORD PTR [eax+80]
	movss	DWORD PTR _vecTurn$6[ebp], xmm0

; 580  : 			vecTurn.Y = Contact->entity.vecTurnSpeed.Y;

	mov	eax, DWORD PTR _Contact$[ebp]
	movss	xmm0, DWORD PTR [eax+84]
	movss	DWORD PTR _vecTurn$6[ebp+4], xmm0

; 581  : 			vecTurn.Z = Contact->entity.vecTurnSpeed.Z;

	mov	eax, DWORD PTR _Contact$[ebp]
	movss	xmm0, DWORD PTR [eax+88]
	movss	DWORD PTR _vecTurn$6[ebp+8], xmm0

; 582  : 
; 583  : 			m_pPlayerPed->GetKeys(&lr,&ud);

	lea	eax, DWORD PTR _ud$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _lr$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetKeys@CPlayerPed@@QAEGPAG0@Z		; CPlayerPed::GetKeys

; 584  : 
; 585  : 			if(!lr && !ud) {

	movzx	eax, WORD PTR _lr$2[ebp]
	test	eax, eax
	jne	SHORT $LN1@UpdateSurf
	movzx	eax, WORD PTR _ud$1[ebp]
	test	eax, eax
	jne	SHORT $LN1@UpdateSurf

; 586  : 				// if they're not trying to translate, keep their
; 587  : 				// move and turn speeds identical to the surfing vehicle
; 588  : 				m_pPlayerPed->SetMoveSpeedVector(vecSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecSpeed$7[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecSpeed$7[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecSpeed$7[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ; CEntity::SetMoveSpeedVector

; 589  : 				m_pPlayerPed->SetTurnSpeedVector(vecTurn);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecTurn$6[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecTurn$6[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecTurn$6[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetTurnSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ; CEntity::SetTurnSpeedVector
$LN1@UpdateSurf:

; 590  : 			}
; 591  : 			
; 592  : 			return;

	jmp	SHORT $LN5@UpdateSurf
$LN2@UpdateSurf:

; 593  : 		}
; 594  : 	}
; 595  : 	m_bSurfingMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+191], 0

; 596  : 	m_vecLockedSurfingOffsets.X = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+195], xmm0

; 597  : 	m_vecLockedSurfingOffsets.Y = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+199], xmm0

; 598  : 	m_vecLockedSurfingOffsets.Z = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+203], xmm0

; 599  : 	m_SurfingID = INVALID_VEHICLE_ID;

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+207], ax
$LN5@UpdateSurf:

; 600  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@UpdateSurf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 476				; 000001dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@UpdateSurf:
	DD	7
	DD	$LN14@UpdateSurf
$LN14@UpdateSurf:
	DD	-68					; ffffffbcH
	DD	12					; 0000000cH
	DD	$LN7@UpdateSurf
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN8@UpdateSurf
	DD	-160					; ffffff60H
	DD	64					; 00000040H
	DD	$LN9@UpdateSurf
	DD	-232					; ffffff18H
	DD	64					; 00000040H
	DD	$LN10@UpdateSurf
	DD	-252					; ffffff04H
	DD	12					; 0000000cH
	DD	$LN11@UpdateSurf
	DD	-264					; fffffef8H
	DD	2
	DD	$LN12@UpdateSurf
	DD	-276					; fffffeecH
	DD	2
	DD	$LN13@UpdateSurf
$LN13@UpdateSurf:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	0
$LN12@UpdateSurf:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	0
$LN11@UpdateSurf:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN10@UpdateSurf:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN9@UpdateSurf:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN8@UpdateSurf:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	0
$LN7@UpdateSurf:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?UpdateSurfing@CLocalPlayer@@QAEXXZ ENDP		; CLocalPlayer::UpdateSurfing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?ApplySpecialAction@CLocalPlayer@@QAEXE@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
_this$ = -8						; size = 4
_byteSpecialAction$ = 8					; size = 1
?ApplySpecialAction@CLocalPlayer@@QAEXE@Z PROC		; CLocalPlayer::ApplySpecialAction, COMDAT
; _this$ = ecx

; 451  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 452  : 	switch(byteSpecialAction) {

	movzx	eax, BYTE PTR _byteSpecialAction$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 66			; 00000042H
	ja	$LN16@ApplySpeci
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN18@ApplySpeci[edx]
	jmp	DWORD PTR $LN19@ApplySpeci[eax*4]
$LN13@ApplySpeci:

; 453  : 
; 454  : 		case SPECIAL_ACTION_USEJETPACK:
; 455  : 			if(!m_pPlayerPed->IsInJetpackMode()) m_pPlayerPed->StartJetpack();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInJetpackMode@CPlayerPed@@QAEHXZ	; CPlayerPed::IsInJetpackMode
	test	eax, eax
	jne	SHORT $LN12@ApplySpeci
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StartJetpack@CPlayerPed@@QAEXXZ	; CPlayerPed::StartJetpack
$LN12@ApplySpeci:

; 456  : 			break;

	jmp	$LN16@ApplySpeci
$LN11@ApplySpeci:

; 457  : 
; 458  : 		case SPECIAL_ACTION_DANCE1:
; 459  : 			m_pPlayerPed->StartDancing(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StartDancing@CPlayerPed@@QAEXH@Z	; CPlayerPed::StartDancing

; 460  : 			break;

	jmp	$LN16@ApplySpeci
$LN10@ApplySpeci:

; 461  : 
; 462  : 		case SPECIAL_ACTION_DANCE2:
; 463  : 			m_pPlayerPed->StartDancing(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StartDancing@CPlayerPed@@QAEXH@Z	; CPlayerPed::StartDancing

; 464  : 			break;

	jmp	SHORT $LN16@ApplySpeci
$LN9@ApplySpeci:

; 465  : 
; 466  : 		case SPECIAL_ACTION_DANCE3:
; 467  : 			m_pPlayerPed->StartDancing(2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StartDancing@CPlayerPed@@QAEXH@Z	; CPlayerPed::StartDancing

; 468  : 			break;

	jmp	SHORT $LN16@ApplySpeci
$LN8@ApplySpeci:

; 469  : 
; 470  : 		case SPECIAL_ACTION_DANCE4:
; 471  : 			m_pPlayerPed->StartDancing(3);

	push	3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StartDancing@CPlayerPed@@QAEXH@Z	; CPlayerPed::StartDancing

; 472  : 			break;

	jmp	SHORT $LN16@ApplySpeci
$LN7@ApplySpeci:

; 473  : 
; 474  : 		case SPECIAL_ACTION_HANDSUP:
; 475  : 			m_pPlayerPed->HandsUp();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?HandsUp@CPlayerPed@@QAEXXZ		; CPlayerPed::HandsUp

; 476  : 			break;

	jmp	SHORT $LN16@ApplySpeci
$LN6@ApplySpeci:

; 477  : 
; 478  : 		case SPECIAL_ACTION_USECELLPHONE:
; 479  : 			if(!m_pPlayerPed->IsInVehicle()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	jne	SHORT $LN5@ApplySpeci

; 480  : 				m_pPlayerPed->ToggleCellphone(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ToggleCellphone@CPlayerPed@@QAEXH@Z	; CPlayerPed::ToggleCellphone
$LN5@ApplySpeci:

; 481  : 			}
; 482  : 			break;

	jmp	SHORT $LN16@ApplySpeci
$LN4@ApplySpeci:

; 483  : 
; 484  : 		case SPECIAL_ACTION_STOPUSECELLPHONE:
; 485  : 			if(m_pPlayerPed->IsCellphoneEnabled()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsCellphoneEnabled@CPlayerPed@@QAEHXZ	; CPlayerPed::IsCellphoneEnabled
	test	eax, eax
	je	SHORT $LN3@ApplySpeci

; 486  : 				m_pPlayerPed->ToggleCellphone(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ToggleCellphone@CPlayerPed@@QAEXH@Z	; CPlayerPed::ToggleCellphone
$LN3@ApplySpeci:

; 487  : 			}
; 488  : 			break;

	jmp	SHORT $LN16@ApplySpeci
$LN2@ApplySpeci:

; 489  : 
; 490  : 		case SPECIAL_ACTION_URINATE:
; 491  : 			if(!m_pPlayerPed->IsInVehicle()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	jne	SHORT $LN16@ApplySpeci

; 492  : 				m_pPlayerPed->StartPissing();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StartPissing@CPlayerPed@@QAEXXZ	; CPlayerPed::StartPissing
$LN16@ApplySpeci:

; 493  : 			}
; 494  : 			break;
; 495  : 	}
; 496  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN19@ApplySpeci:
	DD	$LN13@ApplySpeci
	DD	$LN11@ApplySpeci
	DD	$LN10@ApplySpeci
	DD	$LN9@ApplySpeci
	DD	$LN8@ApplySpeci
	DD	$LN7@ApplySpeci
	DD	$LN6@ApplySpeci
	DD	$LN4@ApplySpeci
	DD	$LN2@ApplySpeci
	DD	$LN16@ApplySpeci
$LN18@ApplySpeci:
	DB	0
	DB	9
	DB	9
	DB	1
	DB	2
	DB	3
	DB	4
	DB	9
	DB	5
	DB	6
	DB	9
	DB	7
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	8
?ApplySpecialAction@CLocalPlayer@@QAEXE@Z ENDP		; CLocalPlayer::ApplySpecialAction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?GetSpecialAction@CLocalPlayer@@QAEEXZ
_TEXT	SEGMENT
tv74 = -208						; size = 4
_this$ = -8						; size = 4
?GetSpecialAction@CLocalPlayer@@QAEEXZ PROC		; CLocalPlayer::GetSpecialAction, COMDAT
; _this$ = ecx

; 501  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 	if(m_pPlayerPed->IsInJetpackMode()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInJetpackMode@CPlayerPed@@QAEHXZ	; CPlayerPed::IsInJetpackMode
	test	eax, eax
	je	SHORT $LN11@GetSpecial

; 503  : 		return SPECIAL_ACTION_USEJETPACK;

	mov	al, 2
	jmp	SHORT $LN12@GetSpecial
$LN11@GetSpecial:

; 504  : 	}
; 505  : 
; 506  : 	if(m_pPlayerPed->IsDancing()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsDancing@CPlayerPed@@QAEHXZ		; CPlayerPed::IsDancing
	test	eax, eax
	je	SHORT $LN10@GetSpecial

; 507  : 		switch(m_pPlayerPed->m_iDanceStyle) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 3
	ja	SHORT $LN10@GetSpecial
	mov	eax, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN14@GetSpecial[eax*4]
$LN7@GetSpecial:

; 508  : 			case 0:
; 509  : 				return SPECIAL_ACTION_DANCE1;

	mov	al, 5
	jmp	SHORT $LN12@GetSpecial
$LN6@GetSpecial:

; 510  : 			case 1:
; 511  : 				return SPECIAL_ACTION_DANCE2;

	mov	al, 6
	jmp	SHORT $LN12@GetSpecial
$LN5@GetSpecial:

; 512  : 			case 2:
; 513  : 				return SPECIAL_ACTION_DANCE3;

	mov	al, 7
	jmp	SHORT $LN12@GetSpecial
$LN4@GetSpecial:

; 514  : 			case 3:
; 515  : 				return SPECIAL_ACTION_DANCE4;

	mov	al, 8
	jmp	SHORT $LN12@GetSpecial
$LN10@GetSpecial:

; 516  : 		}
; 517  : 	}
; 518  : 
; 519  : 	if(m_pPlayerPed->HasHandsUp()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?HasHandsUp@CPlayerPed@@QAEHXZ		; CPlayerPed::HasHandsUp
	test	eax, eax
	je	SHORT $LN3@GetSpecial

; 520  : 		//pChatWindow->AddDebugMessage("SPECIAL_ACTION_HANDSUP");
; 521  : 		return SPECIAL_ACTION_HANDSUP;

	mov	al, 10					; 0000000aH
	jmp	SHORT $LN12@GetSpecial
$LN3@GetSpecial:

; 522  : 	}
; 523  : 
; 524  : 	if(m_pPlayerPed->IsCellphoneEnabled()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsCellphoneEnabled@CPlayerPed@@QAEHXZ	; CPlayerPed::IsCellphoneEnabled
	test	eax, eax
	je	SHORT $LN2@GetSpecial

; 525  : 		return SPECIAL_ACTION_USECELLPHONE;

	mov	al, 11					; 0000000bH
	jmp	SHORT $LN12@GetSpecial
$LN2@GetSpecial:

; 526  : 	}
; 527  : 
; 528  : 	if(m_pPlayerPed->IsPissing()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsPissing@CPlayerPed@@QAEHXZ		; CPlayerPed::IsPissing
	test	eax, eax
	je	SHORT $LN1@GetSpecial

; 529  : 		return SPECIAL_ACTION_URINATE;

	mov	al, 68					; 00000044H
	jmp	SHORT $LN12@GetSpecial
$LN1@GetSpecial:

; 530  : 	}
; 531  : 
; 532  : 	return SPECIAL_ACTION_NONE;

	xor	al, al
$LN12@GetSpecial:

; 533  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@GetSpecial:
	DD	$LN7@GetSpecial
	DD	$LN6@GetSpecial
	DD	$LN5@GetSpecial
	DD	$LN4@GetSpecial
?GetSpecialAction@CLocalPlayer@@QAEEXZ ENDP		; CLocalPlayer::GetSpecialAction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?DestroyPlayer@CLocalPlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DestroyPlayer@CLocalPlayer@@QAEHXZ PROC		; CLocalPlayer::DestroyPlayer, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	return TRUE;

	mov	eax, 1

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyPlayer@CLocalPlayer@@QAEHXZ ENDP		; CLocalPlayer::DestroyPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?Process@CLocalPlayer@@QAEHXZ
_TEXT	SEGMENT
tv860 = -376						; size = 4
tv719 = -376						; size = 4
_iWeapon$1 = -176					; size = 4
_Controls$2 = -164					; size = 4
_bytePlayerCount$3 = -149				; size = 1
_wKeys$4 = -140						; size = 2
_udAnalog$5 = -128					; size = 2
_lrAnalog$6 = -116					; size = 2
_Aim$7 = -104						; size = 4
_LookAt$8 = -92						; size = 12
_pVehicle$9 = -72					; size = 4
_pVehiclePool$10 = -60					; size = 4
_iNumberOfPlayersInLocalRange$11 = -48			; size = 4
_byteInterior$12 = -33					; size = 1
_dwThisTick$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Process@CLocalPlayer@@QAEHXZ PROC			; CLocalPlayer::Process, COMDAT
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	DWORD dwThisTick;
; 109  : 
; 110  : 	if(m_bIsActive && (NULL != m_pPlayerPed))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN62@Process
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN62@Process

; 111  : 	{
; 112  : 		// ACTIVE LOCAL PLAYER
; 113  : 
; 114  : 		// Clear any spawn text if any
; 115  : 		pSpawnScreen->SetSpawnText(NULL);

	push	0
	mov	ecx, DWORD PTR ?pSpawnScreen@@3PAVCSpawnScreen@@A ; pSpawnScreen
	call	?SetSpawnText@CSpawnScreen@@QAEXPAD@Z	; CSpawnScreen::SetSpawnText

; 116  : 
; 117  : 		/*
; 118  : 		if(iTimesDataModified > 10)
; 119  : 		{
; 120  : 			FORCE_EXIT(0x3);
; 121  : 		}*/
; 122  : 		
; 123  : 		// HANDLE I'M A DEAD LOCAL PLAYER PED
; 124  : 		if (!m_bIsWasted && m_pPlayerPed->GetActionTrigger() == ACTION_DEATH || m_pPlayerPed->IsDead()) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN59@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetActionTrigger@CPlayerPed@@QAEEXZ	; CPlayerPed::GetActionTrigger
	movzx	ecx, al
	cmp	ecx, 54					; 00000036H
	je	SHORT $LN60@Process
$LN59@Process:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsDead@CPlayerPed@@QAEHXZ		; CPlayerPed::IsDead
	test	eax, eax
	je	$LN61@Process
$LN60@Process:

; 125  : 			// DEAD
; 126  : 			ToggleSpectating(FALSE); // Player shouldn't die while spectating, but scripts may mess with that

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ToggleSpectating@CLocalPlayer@@QAEXH@Z	; CLocalPlayer::ToggleSpectating

; 127  : 			
; 128  : 			if(m_pPlayerPed->IsDancing()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsDancing@CPlayerPed@@QAEHXZ		; CPlayerPed::IsDancing
	test	eax, eax
	je	SHORT $LN58@Process

; 129  : 				m_pPlayerPed->StopDancing(); // there's no need to dance when you're dead

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StopDancing@CPlayerPed@@QAEXXZ		; CPlayerPed::StopDancing
$LN58@Process:

; 130  : 			}
; 131  : 
; 132  : 			if(m_pPlayerPed->IsCellphoneEnabled()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsCellphoneEnabled@CPlayerPed@@QAEHXZ	; CPlayerPed::IsCellphoneEnabled
	test	eax, eax
	je	SHORT $LN57@Process

; 133  : 				m_pPlayerPed->ToggleCellphone(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ToggleCellphone@CPlayerPed@@QAEXH@Z	; CPlayerPed::ToggleCellphone
$LN57@Process:

; 134  : 			}
; 135  : 
; 136  : 			if(m_pPlayerPed->IsPissing()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsPissing@CPlayerPed@@QAEHXZ		; CPlayerPed::IsPissing
	test	eax, eax
	je	SHORT $LN56@Process

; 137  : 				m_pPlayerPed->StopPissing();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StopPissing@CPlayerPed@@QAEXXZ		; CPlayerPed::StopPissing
$LN56@Process:

; 138  : 			}
; 139  : 
; 140  : 			// A hack for reseting the animations/tasks
; 141  : 			m_pPlayerPed->TogglePlayerControllable(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?TogglePlayerControllable@CPlayerPed@@QAEXH@Z ; CPlayerPed::TogglePlayerControllable

; 142  : 
; 143  : 			if(m_bInRCMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+170], 0
	je	SHORT $LN55@Process

; 144  : 				m_bInRCMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+170], 0

; 145  : 				m_pPlayerPed->Add();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN55@Process:

; 146  : 			}
; 147  : 
; 148  : 			if (m_pPlayerPed->IsInVehicle() && !m_pPlayerPed->IsAPassenger())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN54@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsAPassenger@CPlayerPed@@QAEHXZ	; CPlayerPed::IsAPassenger
	test	eax, eax
	jne	SHORT $LN54@Process

; 149  : 			{
; 150  : 				SendInCarFullSyncData(); // One last time - for explosions

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ ; CLocalPlayer::SendInCarFullSyncData

; 151  : 				m_LastVehicle = pNetGame->GetVehiclePool()->FindIDFromGtaPtr(m_pPlayerPed->GetGtaVehicle());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	ecx, eax
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+37], ax
$LN54@Process:

; 152  : 			}			
; 153  : 
; 154  : 			m_pPlayerPed->ExtinguishFire();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ExtinguishFire@CPlayerPed@@QAEXXZ	; CPlayerPed::ExtinguishFire

; 155  : 
; 156  : 			SendWastedNotification();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendWastedNotification@CLocalPlayer@@QAEXXZ ; CLocalPlayer::SendWastedNotification

; 157  : 
; 158  : 			m_bIsActive = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 159  : 			m_bIsWasted = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 160  : 
; 161  : 			// Disable zone names till they respawn (looks silly in request spawn)
; 162  : 			pGame->EnableZoneNames(0);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?EnableZoneNames@CGame@@QAEXE@Z		; CGame::EnableZoneNames

; 163  : 
; 164  : 			return TRUE;

	mov	eax, 1
	jmp	$LN63@Process
$LN61@Process:

; 165  : 		}
; 166  : 
; 167  : 		// HANDLE DANCING LOCAL PED
; 168  : 		if(m_pPlayerPed->IsDancing()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsDancing@CPlayerPed@@QAEHXZ		; CPlayerPed::IsDancing
	test	eax, eax
	je	SHORT $LN52@Process

; 169  : 			pGame->DisplayHud(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayHud@CGame@@QAEXH@Z		; CGame::DisplayHud

; 170  : 			m_pPlayerPed->ProcessDancing();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ProcessDancing@CPlayerPed@@QAEXXZ	; CPlayerPed::ProcessDancing

; 171  : 			if(GameGetInternalKeys()->wKeys1[17]) m_pPlayerPed->StopDancing();

	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	ecx, 2
	imul	edx, ecx, 17
	movzx	eax, WORD PTR [eax+edx]
	test	eax, eax
	je	SHORT $LN52@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StopDancing@CPlayerPed@@QAEXXZ		; CPlayerPed::StopDancing
$LN52@Process:

; 172  : 		}
; 173  : 
; 174  : 		// HANDLE I GOT MY HANDS UP BUT DON'T WANT TO ANYMORE
; 175  : 		if(m_pPlayerPed->HasHandsUp() && GameGetInternalKeys()->wKeys1[17]) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?HasHandsUp@CPlayerPed@@QAEHXZ		; CPlayerPed::HasHandsUp
	test	eax, eax
	je	SHORT $LN51@Process
	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	ecx, 2
	imul	edx, ecx, 17
	movzx	eax, WORD PTR [eax+edx]
	test	eax, eax
	je	SHORT $LN51@Process

; 176  : 			m_pPlayerPed->TogglePlayerControllable(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?TogglePlayerControllable@CPlayerPed@@QAEXH@Z ; CPlayerPed::TogglePlayerControllable
$LN51@Process:

; 177  : 		}
; 178  : 
; 179  : 		// HANDLE I'M TAKING A PISS AND I'M DONE
; 180  : 		if(m_pPlayerPed->IsPissing() && (GameGetInternalKeys()->wKeys1[17] || m_pPlayerPed->IsInVehicle())) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsPissing@CPlayerPed@@QAEHXZ		; CPlayerPed::IsPissing
	test	eax, eax
	je	SHORT $LN50@Process
	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	ecx, 2
	imul	edx, ecx, 17
	movzx	eax, WORD PTR [eax+edx]
	test	eax, eax
	jne	SHORT $LN49@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN50@Process
$LN49@Process:

; 181  : 			m_pPlayerPed->StopPissing();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StopPissing@CPlayerPed@@QAEXXZ		; CPlayerPed::StopPissing
$LN50@Process:

; 182  : 		}
; 183  : 
; 184  : 		if(m_pPlayerPed->IsInVehicle() && m_pPlayerPed->IsDancing()) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN48@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsDancing@CPlayerPed@@QAEHXZ		; CPlayerPed::IsDancing
	test	eax, eax
	je	SHORT $LN48@Process

; 185  : 			m_pPlayerPed->StopDancing(); // can't dance in vehicle

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StopDancing@CPlayerPed@@QAEXXZ		; CPlayerPed::StopDancing
$LN48@Process:

; 186  : 
; 187  : 		dwThisTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwThisTick$[ebp], eax

; 188  : 
; 189  : 		if ( dwEnterVehTimeElasped != -1 && 
; 190  : 			(dwThisTick - dwEnterVehTimeElasped) > 5000 &&
; 191  : 			!m_pPlayerPed->IsInVehicle() )

	cmp	DWORD PTR ?dwEnterVehTimeElasped@@3KA, -1 ; dwEnterVehTimeElasped
	je	SHORT $LN47@Process
	mov	eax, DWORD PTR _dwThisTick$[ebp]
	sub	eax, DWORD PTR ?dwEnterVehTimeElasped@@3KA ; dwEnterVehTimeElasped
	cmp	eax, 5000				; 00001388H
	jbe	SHORT $LN47@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	jne	SHORT $LN47@Process

; 192  : 		{
; 193  : 			pGame->GetCamera()->SetBehindPlayer();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	ecx, eax
	call	?SetBehindPlayer@CCamera@@QAEXXZ	; CCamera::SetBehindPlayer

; 194  : 			dwEnterVehTimeElasped = -1;

	mov	DWORD PTR ?dwEnterVehTimeElasped@@3KA, -1 ; dwEnterVehTimeElasped
$LN47@Process:

; 195  : 		}
; 196  : 		
; 197  : 		// Enable zone names if required on spawn so they're not there in class selection
; 198  : 		// 1 second delay so it doesn't display your selection area when you spawn
; 199  : 		if ((int)dwThisTick >= m_iDisplayZoneTick) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	cmp	ecx, DWORD PTR [eax+39]
	jl	SHORT $LN46@Process

; 200  : 			pGame->EnableZoneNames(pNetGame->m_bZoneNames);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	movzx	ecx, BYTE PTR [eax+42]
	push	ecx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?EnableZoneNames@CGame@@QAEXE@Z		; CGame::EnableZoneNames
$LN46@Process:

; 201  : 		}
; 202  : 
; 203  : 		// SERVER CHECKPOINTS UPDATE
; 204  : 		pGame->UpdateCheckpoints();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?UpdateCheckpoints@CGame@@QAEXXZ	; CGame::UpdateCheckpoints

; 205  : 
; 206  : 		// STATS UPDATES
; 207  : 		if((dwThisTick - m_dwLastStatsUpdateTick) > STATS_UPDATE_TICKS) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	sub	ecx, DWORD PTR [eax+223]
	cmp	ecx, 1000				; 000003e8H
	jbe	SHORT $LN45@Process

; 208  : 			SendStatsUpdate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendStatsUpdate@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendStatsUpdate

; 209  : 			m_dwLastStatsUpdateTick = dwThisTick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	mov	DWORD PTR [eax+223], ecx
$LN45@Process:

; 210  : 		}
; 211  : 		
; 212  : 		CheckWeapons();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckWeapons@CLocalPlayer@@QAEXXZ	; CLocalPlayer::CheckWeapons

; 213  : 		
; 214  : 		// Handle interior updates to the server
; 215  : 		BYTE byteInterior = pGame->GetActiveInterior();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetActiveInterior@CGame@@QAEEXZ	; CGame::GetActiveInterior
	mov	BYTE PTR _byteInterior$12[ebp], al

; 216  : 		if (byteInterior != m_byteCurInterior) {

	movzx	eax, BYTE PTR _byteInterior$12[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+169]
	cmp	eax, edx
	je	SHORT $LN44@Process

; 217  : 			UpdateRemoteInterior(byteInterior);

	movzx	eax, BYTE PTR _byteInterior$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateRemoteInterior@CLocalPlayer@@QAEXE@Z ; CLocalPlayer::UpdateRemoteInterior
$LN44@Process:

; 218  : 		}
; 219  : 		
; 220  : 		// Disabled weapons
; 221  : 		if ((byteInterior != 0) &&
; 222  : 			(!pNetGame->m_bAllowWeapons)) {

	movzx	eax, BYTE PTR _byteInterior$12[ebp]
	test	eax, eax
	je	SHORT $LN43@Process
	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	movzx	ecx, BYTE PTR [eax+81]
	test	ecx, ecx
	jne	SHORT $LN43@Process

; 223  : 			m_pPlayerPed->SetArmedWeapon(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon
$LN43@Process:

; 224  : 		}
; 225  : 				
; 226  : 		// The new regime for adjusting sendrates is based on the number
; 227  : 		// of players that will be effected by this update. The more players
; 228  : 		// there are within a small radius, the more we must scale back
; 229  : 		// the number of sends.
; 230  : 		int iNumberOfPlayersInLocalRange=0;

	mov	DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp], 0

; 231  : 		iNumberOfPlayersInLocalRange = DetermineNumberOfPlayersInLocalRange();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DetermineNumberOfPlayersInLocalRange@CLocalPlayer@@QAEHXZ ; CLocalPlayer::DetermineNumberOfPlayersInLocalRange
	mov	DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp], eax

; 232  : 		if(!iNumberOfPlayersInLocalRange) iNumberOfPlayersInLocalRange = 10;

	cmp	DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp], 0
	jne	SHORT $LN42@Process
	mov	DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp], 10 ; 0000000aH
$LN42@Process:

; 233  : 
; 234  : 		// PLAYER DATA UPDATES
; 235  : 		if (m_bIsSpectating) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+186], 0
	je	SHORT $LN41@Process

; 236  : 			ProcessSpectating();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessSpectating@CLocalPlayer@@QAEXXZ	; CLocalPlayer::ProcessSpectating

; 237  : 			m_bPassengerDriveByMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+165], 0
	jmp	$LN8@Process
$LN41@Process:

; 238  : 		}
; 239  : 		// DRIVER CONDITIONS
; 240  : 		else if(m_pPlayerPed->IsInVehicle() && !m_pPlayerPed->IsAPassenger())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	$LN39@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsAPassenger@CPlayerPed@@QAEHXZ	; CPlayerPed::IsAPassenger
	test	eax, eax
	jne	$LN39@Process

; 241  : 		{
; 242  :             ProcessInCarWorldBounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessInCarWorldBounds@CLocalPlayer@@QAEXXZ ; CLocalPlayer::ProcessInCarWorldBounds

; 243  : 			
; 244  : 			CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$10[ebp], eax

; 245  : 			CVehicle *pVehicle;
; 246  : 			if (pVehiclePool)

	cmp	DWORD PTR _pVehiclePool$10[ebp], 0
	je	SHORT $LN38@Process

; 247  : 				m_CurrentVehicle = pVehiclePool->FindIDFromGtaPtr(m_pPlayerPed->GetGtaVehicle());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$10[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+35], ax
$LN38@Process:

; 248  : 			pVehicle = pVehiclePool->GetAt(m_CurrentVehicle);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+35]
	push	ecx
	mov	ecx, DWORD PTR _pVehiclePool$10[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$9[ebp], eax

; 249  : 
; 250  : 			// HANDLE DRIVING AN RC VEHICLE
; 251  : 			if(pVehicle && !m_bInRCMode && pVehicle->IsRCVehicle()) {

	cmp	DWORD PTR _pVehicle$9[ebp], 0
	je	SHORT $LN37@Process
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+170], 0
	jne	SHORT $LN37@Process
	mov	ecx, DWORD PTR _pVehicle$9[ebp]
	call	?IsRCVehicle@CVehicle@@QAEHXZ		; CVehicle::IsRCVehicle
	test	eax, eax
	je	SHORT $LN37@Process

; 252  : 				m_pPlayerPed->Remove();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 253  : 				m_bInRCMode = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+170], 1
$LN37@Process:

; 254  : 			}
; 255  : 
; 256  : 			if(m_bInRCMode && !pVehicle) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+170], 0
	je	SHORT $LN36@Process
	cmp	DWORD PTR _pVehicle$9[ebp], 0
	jne	SHORT $LN36@Process

; 257  : 				m_pPlayerPed->SetHealth(0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetHealth@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetHealth

; 258  : 				m_pPlayerPed->SetDead();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetDead@CPlayerPed@@QAEXXZ		; CPlayerPed::SetDead
$LN36@Process:

; 259  : 			}
; 260  : 
; 261  : 			if(m_bInRCMode && pVehicle && pVehicle->GetHealth() == 0.0f) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+170], 0
	je	SHORT $LN35@Process
	cmp	DWORD PTR _pVehicle$9[ebp], 0
	je	SHORT $LN35@Process
	mov	ecx, DWORD PTR _pVehicle$9[ebp]
	call	?GetHealth@CVehicle@@QAEMXZ		; CVehicle::GetHealth
	fstp	DWORD PTR tv719[ebp]
	movss	xmm0, DWORD PTR tv719[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN35@Process

; 262  : 				m_pPlayerPed->SetHealth(0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetHealth@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetHealth

; 263  : 				m_pPlayerPed->SetDead();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetDead@CPlayerPed@@QAEXXZ		; CPlayerPed::SetDead
$LN35@Process:

; 264  : 			}
; 265  : 
; 266  : 			if((dwThisTick - m_dwLastSendTick) > (UINT)GetOptimumInCarSendRate(iNumberOfPlayersInLocalRange)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _dwThisTick$[ebp]
	sub	esi, DWORD PTR [eax+211]
	mov	ecx, DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOptimumInCarSendRate@CLocalPlayer@@QAEHH@Z ; CLocalPlayer::GetOptimumInCarSendRate
	cmp	esi, eax
	jbe	SHORT $LN34@Process

; 267  : 				m_dwLastSendTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+211], eax

; 268  : 				SendInCarFullSyncData(); // INCAR - DRIVER				

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendInCarFullSyncData@CLocalPlayer@@QAEXXZ ; CLocalPlayer::SendInCarFullSyncData
$LN34@Process:

; 269  : 			}
; 270  : 			m_bPassengerDriveByMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+165], 0
	jmp	$LN8@Process
$LN39@Process:

; 271  : 		}
; 272  : 		// ONFOOT CONDITIONS
; 273  : 		else if(m_pPlayerPed->GetActionTrigger() == ACTION_NORMAL || m_pPlayerPed->GetActionTrigger() == ACTION_SCOPE) // Scoped - THIS IS A QUICK HACK CHANGEME

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetActionTrigger@CPlayerPed@@QAEEXZ	; CPlayerPed::GetActionTrigger
	movzx	ecx, al
	cmp	ecx, 1
	je	SHORT $LN31@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetActionTrigger@CPlayerPed@@QAEEXZ	; CPlayerPed::GetActionTrigger
	movzx	ecx, al
	cmp	ecx, 12					; 0000000cH
	jne	$LN32@Process
$LN31@Process:

; 274  : 		{
; 275  : 			UpdateSurfing();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateSurfing@CLocalPlayer@@QAEXXZ	; CLocalPlayer::UpdateSurfing

; 276  : 
; 277  : 			// MAKE MY HEAD MOVE WITH THE CAMERA
; 278  : 			if((dwThisTick - m_dwLastHeadUpdate) > 1000) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	sub	ecx, DWORD PTR [eax+227]
	cmp	ecx, 1000				; 000003e8H
	jbe	$LN30@Process

; 279  :                 VECTOR LookAt;
; 280  : 				CAMERA_AIM *Aim = GameGetInternalAim();

	call	?GameGetInternalAim@@YGPAU_CAMERA_AIM@@XZ ; GameGetInternalAim
	mov	DWORD PTR _Aim$7[ebp], eax

; 281  : 				LookAt.X = Aim->pos1x + (Aim->f1x * 20.0f);

	mov	eax, DWORD PTR _Aim$7[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	ecx, DWORD PTR _Aim$7[ebp]
	addss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR _LookAt$8[ebp], xmm0

; 282  : 				LookAt.Y = Aim->pos1y + (Aim->f1y * 20.0f);

	mov	eax, DWORD PTR _Aim$7[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	ecx, DWORD PTR _Aim$7[ebp]
	addss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR _LookAt$8[ebp+4], xmm0

; 283  : 				LookAt.Z = Aim->pos1z + (Aim->f1z * 20.0f);

	mov	eax, DWORD PTR _Aim$7[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@41a00000
	mov	ecx, DWORD PTR _Aim$7[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _LookAt$8[ebp+8], xmm0

; 284  : 				pGame->FindPlayerPed()->ApplyCommandTask("FollowPedSA",0,2000,-1,&LookAt,0,0.1f,500,3,0);

	push	0
	push	3
	push	500					; 000001f4H
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	eax, DWORD PTR _LookAt$8[ebp]
	push	eax
	push	-1
	push	2000					; 000007d0H
	push	0
	push	OFFSET ??_C@_0M@KHFAPNLB@FollowPedSA?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?ApplyCommandTask@CPlayerPed@@QAEXPADHHHPAU_VECTOR@@HMHHH@Z ; CPlayerPed::ApplyCommandTask

; 285  : 				m_dwLastHeadUpdate = dwThisTick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	mov	DWORD PTR [eax+227], ecx
$LN30@Process:

; 286  : 			}
; 287  : 
; 288  : 			if(m_bInRCMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+170], 0
	je	SHORT $LN29@Process

; 289  : 				m_bInRCMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+170], 0

; 290  : 				m_pPlayerPed->Add();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN29@Process:

; 291  : 			}
; 292  : 
; 293  : 			HandlePassengerEntry();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandlePassengerEntry@CLocalPlayer@@QAEXXZ ; CLocalPlayer::HandlePassengerEntry

; 294  : 			ProcessOnFootWorldBounds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessOnFootWorldBounds@CLocalPlayer@@QAEXXZ ; CLocalPlayer::ProcessOnFootWorldBounds

; 295  : 
; 296  : 			// TIMING FOR ONFOOT SEND RATES
; 297  : 			if((dwThisTick - m_dwLastSendTick) > (UINT)GetOptimumOnFootSendRate(iNumberOfPlayersInLocalRange)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _dwThisTick$[ebp]
	sub	esi, DWORD PTR [eax+211]
	mov	ecx, DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOptimumOnFootSendRate@CLocalPlayer@@QAEHH@Z ; CLocalPlayer::GetOptimumOnFootSendRate
	cmp	esi, eax
	jbe	SHORT $LN27@Process

; 298  : 				m_dwLastSendTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+211], eax

; 299  : 				SendOnFootFullSyncData(); // ONFOOT

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendOnFootFullSyncData@CLocalPlayer@@QAEXXZ ; CLocalPlayer::SendOnFootFullSyncData

; 300  : 
; 301  : 				if (m_CurrentVehicle != 0xFFFF) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+35]
	cmp	ecx, 65535				; 0000ffffH
	je	SHORT $LN27@Process

; 302  : 					m_LastVehicle = m_CurrentVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+35]
	mov	WORD PTR [eax+37], dx

; 303  : 					m_CurrentVehicle = 0xFFFF;

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+35], ax
$LN27@Process:

; 304  : 				}
; 305  : 			}
; 306  : 
; 307  : 			// TIMING FOR ONFOOT AIM SENDS
; 308  : 			WORD lrAnalog,udAnalog;
; 309  : 			WORD wKeys = m_pPlayerPed->GetKeys(&lrAnalog,&udAnalog);

	lea	eax, DWORD PTR _udAnalog$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _lrAnalog$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetKeys@CPlayerPed@@QAEGPAG0@Z		; CPlayerPed::GetKeys
	mov	WORD PTR _wKeys$4[ebp], ax

; 310  : 			BYTE bytePlayerCount = pNetGame->GetPlayerPool()->GetCount();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetCount@CPlayerPool@@QAEEXZ		; CPlayerPool::GetCount
	mov	BYTE PTR _bytePlayerCount$3[ebp], al

; 311  : 			
; 312  : 			// Not targeting or firing. We need a very slow rate to sync the head.
; 313  : 			if(!IS_TARGETING(wKeys) && !IS_FIRING(wKeys)) {

	movzx	eax, WORD PTR _wKeys$4[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN26@Process
	movzx	eax, WORD PTR _wKeys$4[ebp]
	and	eax, 4
	jne	SHORT $LN26@Process

; 314  : 				if((dwThisTick - m_dwLastAimSendTick) > (UINT)NETMODE_HEADSYNC_SENDRATE){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	sub	ecx, DWORD PTR [eax+219]
	cmp	ecx, 1000				; 000003e8H
	jbe	SHORT $LN25@Process

; 315  : 					m_dwLastAimSendTick = dwThisTick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	mov	DWORD PTR [eax+219], ecx

; 316  : 					SendAimSyncData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAimSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendAimSyncData
$LN25@Process:

; 317  : 				}
; 318  : 			}

	jmp	$LN16@Process
$LN26@Process:

; 319  : 			// Targeting only. Just synced for show really, so use a slower rate
; 320  : 			else if(IS_TARGETING(wKeys) && !IS_FIRING(wKeys)) {

	movzx	eax, WORD PTR _wKeys$4[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN23@Process
	movzx	eax, WORD PTR _wKeys$4[ebp]
	and	eax, 4
	jne	SHORT $LN23@Process

; 321  : 				if((dwThisTick - m_dwLastAimSendTick) > (UINT)NETMODE_AIM_SENDRATE+(iNumberOfPlayersInLocalRange*NETMODE_SEND_MULTIPLIER)){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	sub	ecx, DWORD PTR [eax+219]
	mov	edx, DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp]
	lea	eax, DWORD PTR [edx+edx+100]
	cmp	ecx, eax
	jbe	SHORT $LN22@Process

; 322  : 					m_dwLastAimSendTick = dwThisTick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	mov	DWORD PTR [eax+219], ecx

; 323  : 					SendAimSyncData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAimSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendAimSyncData
$LN22@Process:

; 324  : 				}
; 325  : 			}

	jmp	$LN16@Process
$LN23@Process:

; 326  : 			// Targeting and Firing. Needs a very accurate send rate.
; 327  : 			else if(IS_TARGETING(wKeys) && IS_FIRING(wKeys)) {

	movzx	eax, WORD PTR _wKeys$4[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN20@Process
	movzx	eax, WORD PTR _wKeys$4[ebp]
	and	eax, 4
	je	SHORT $LN20@Process

; 328  : 				if((dwThisTick - m_dwLastAimSendTick) > (UINT)NETMODE_FIRING_SENDRATE+(iNumberOfPlayersInLocalRange*NETMODE_SEND_MULTIPLIER)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	sub	ecx, DWORD PTR [eax+219]
	mov	edx, DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp]
	lea	eax, DWORD PTR [edx+edx+40]
	cmp	ecx, eax
	jbe	SHORT $LN19@Process

; 329  : 					m_dwLastAimSendTick = dwThisTick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	mov	DWORD PTR [eax+219], ecx

; 330  : 					SendAimSyncData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAimSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendAimSyncData
$LN19@Process:

; 331  : 				}
; 332  : 			}

	jmp	SHORT $LN16@Process
$LN20@Process:

; 333  : 			// Firing without targeting. Needs a normal onfoot sendrate.
; 334  : 			else if(!IS_TARGETING(wKeys) && IS_FIRING(wKeys)) {

	movzx	eax, WORD PTR _wKeys$4[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN16@Process
	movzx	eax, WORD PTR _wKeys$4[ebp]
	and	eax, 4
	je	SHORT $LN16@Process

; 335  : 				if((dwThisTick - m_dwLastAimSendTick) > (UINT)GetOptimumOnFootSendRate(iNumberOfPlayersInLocalRange)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _dwThisTick$[ebp]
	sub	esi, DWORD PTR [eax+219]
	mov	ecx, DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOptimumOnFootSendRate@CLocalPlayer@@QAEHH@Z ; CLocalPlayer::GetOptimumOnFootSendRate
	cmp	esi, eax
	jbe	SHORT $LN16@Process

; 336  : 					m_dwLastAimSendTick = dwThisTick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwThisTick$[ebp]
	mov	DWORD PTR [eax+219], ecx

; 337  : 					SendAimSyncData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendAimSyncData@CLocalPlayer@@QAEXXZ	; CLocalPlayer::SendAimSyncData
$LN16@Process:

; 338  : 				}
; 339  : 			}
; 340  : 
; 341  : 			m_bPassengerDriveByMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+165], 0
	jmp	$LN8@Process
$LN32@Process:

; 342  : 		}
; 343  : 		// PASSENGER CONDITIONS
; 344  : 		else if(m_pPlayerPed->IsInVehicle() && m_pPlayerPed->IsAPassenger())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	$LN8@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsAPassenger@CPlayerPed@@QAEHXZ	; CPlayerPed::IsAPassenger
	test	eax, eax
	je	$LN8@Process

; 345  : 		{
; 346  : 			if(m_bInRCMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+170], 0
	je	SHORT $LN13@Process

; 347  : 				m_bInRCMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+170], 0

; 348  : 				m_pPlayerPed->Add();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@Process:

; 349  : 			}
; 350  : 
; 351  : 			GTA_CONTROLSET * Controls = GameGetInternalKeys();

	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	DWORD PTR _Controls$2[ebp], eax

; 352  : 			int iWeapon = m_pPlayerPed->GetCurrentWeapon();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	movzx	ecx, al
	mov	DWORD PTR _iWeapon$1[ebp], ecx

; 353  : 		
; 354  : 			// FOR ENTERING PASSENGER DRIVEBY MODE
; 355  : 			if(!m_bPassengerDriveByMode && Controls->wKeys1[18]) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+165], 0
	jne	SHORT $LN9@Process
	mov	eax, 2
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _Controls$2[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN9@Process

; 356  : 				// NOT IN DRIVEBY MODE AND HORN HELD 
; 357  : 				if(iWeapon == WEAPON_UZI || iWeapon == WEAPON_MP5 || iWeapon == WEAPON_TEC9) {

	cmp	DWORD PTR _iWeapon$1[ebp], 28		; 0000001cH
	je	SHORT $LN10@Process
	cmp	DWORD PTR _iWeapon$1[ebp], 29		; 0000001dH
	je	SHORT $LN10@Process
	cmp	DWORD PTR _iWeapon$1[ebp], 32		; 00000020H
	jne	SHORT $LN9@Process
$LN10@Process:

; 358  : 					if(m_pPlayerPed->StartPassengerDriveByMode()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?StartPassengerDriveByMode@CPlayerPed@@QAEHXZ ; CPlayerPed::StartPassengerDriveByMode
	test	eax, eax
	je	SHORT $LN9@Process

; 359  : 						m_bPassengerDriveByMode = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+165], 1
$LN9@Process:

; 360  : 					}	
; 361  : 				}
; 362  : 			}
; 363  : 			if((dwThisTick - m_dwLastSendTick) > (UINT)GetOptimumInCarSendRate(iNumberOfPlayersInLocalRange)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _dwThisTick$[ebp]
	sub	esi, DWORD PTR [eax+211]
	mov	ecx, DWORD PTR _iNumberOfPlayersInLocalRange$11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOptimumInCarSendRate@CLocalPlayer@@QAEHH@Z ; CLocalPlayer::GetOptimumInCarSendRate
	cmp	esi, eax
	jbe	SHORT $LN8@Process

; 364  : 				m_dwLastSendTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+211], eax

; 365  : 				SendPassengerFullSyncData(); // INCAR - PASSENGER

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendPassengerFullSyncData@CLocalPlayer@@QAEXXZ ; CLocalPlayer::SendPassengerFullSyncData
$LN8@Process:

; 366  : 			}
; 367  : 		}
; 368  : 			
; 369  : 		m_ulThisSyncFrame++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+157]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+157], ecx
$LN62@Process:

; 370  : 	}
; 371  : 
; 372  : 	// HANDLE !IsActive spectating
; 373  : 	if(m_bIsSpectating && !m_bIsActive) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+186], 0
	je	SHORT $LN7@Process
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@Process

; 374  : 		ProcessSpectating();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessSpectating@CLocalPlayer@@QAEXXZ	; CLocalPlayer::ProcessSpectating

; 375  : 		return TRUE;

	mov	eax, 1
	jmp	$LN63@Process
$LN7@Process:

; 376  : 	}
; 377  : 
; 378  : 	// HANDLE THE 'WANTS ANOTHER CLASS BUTTON'
; 379  : 	if(!m_bWantsAnotherClass && GetAsyncKeyState(VK_F4))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN6@Process
	mov	esi, esp
	push	115					; 00000073H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	je	SHORT $LN6@Process

; 380  : 	{
; 381  : 		m_bWantsAnotherClass = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 1

; 382  : 		pChatWindow->AddInfoMessage("Returning to class selection after next death");

	push	OFFSET ??_C@_0CO@CGNDAHHF@Returning?5to?5class?5selection?5aft@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8
$LN6@Process:

; 383  : 	}
; 384  : 
; 385  : 	// HANDLE NEEDS TO RESPAWN
; 386  : 	if(m_bIsWasted && (m_pPlayerPed->GetActionTrigger() != ACTION_WASTED) &&
; 387  : 		(m_pPlayerPed->GetActionTrigger() != ACTION_DEATH) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN5@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetActionTrigger@CPlayerPed@@QAEEXZ	; CPlayerPed::GetActionTrigger
	movzx	ecx, al
	cmp	ecx, 55					; 00000037H
	je	$LN5@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetActionTrigger@CPlayerPed@@QAEEXZ	; CPlayerPed::GetActionTrigger
	movzx	ecx, al
	cmp	ecx, 54					; 00000036H
	je	SHORT $LN5@Process

; 388  : 	{
; 389  : 		if( IsClearedToSpawn() && 
; 390  : 			!m_bWantsAnotherClass &&
; 391  : 			pNetGame->GetGameState() == GAMESTATE_CONNECTED ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsClearedToSpawn@CLocalPlayer@@QAEHXZ	; CLocalPlayer::IsClearedToSpawn
	test	eax, eax
	je	SHORT $LN4@Process
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@Process
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	jne	SHORT $LN4@Process

; 392  : 
; 393  : 			//pGame->ToggleKeyInputsDisabled(TRUE);
; 394  : 			
; 395  : 			if (m_pPlayerPed->GetHealth() > 0.0f)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetHealth@CPlayerPed@@QAEMXZ		; CPlayerPed::GetHealth
	fstp	DWORD PTR tv860[ebp]
	movss	xmm0, DWORD PTR tv860[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@Process

; 396  : 			{
; 397  : 				Spawn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Spawn@CLocalPlayer@@QAEHXZ		; CLocalPlayer::Spawn
$LN3@Process:

; 398  : 			}
; 399  : 
; 400  : 		} else {

	jmp	SHORT $LN2@Process
$LN4@Process:

; 401  : 			m_bIsWasted = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 402  : 			HandleClassSelection();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleClassSelection@CLocalPlayer@@QAEXXZ ; CLocalPlayer::HandleClassSelection

; 403  : 			m_bWantsAnotherClass = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN2@Process:

; 404  : 		}
; 405  : 
; 406  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN63@Process
$LN5@Process:

; 407  : 	}
; 408  : 
; 409  : 	// HAND CONTROL OVER TO THE GAMELOGIC
; 410  : 	if((m_pPlayerPed->GetActionTrigger() != ACTION_WASTED) &&
; 411  : 		(m_pPlayerPed->GetActionTrigger() != ACTION_DEATH) &&
; 412  : 		pNetGame->GetGameState() == GAMESTATE_CONNECTED &&
; 413  : 		!m_bIsActive && !m_bIsSpectating) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetActionTrigger@CPlayerPed@@QAEEXZ	; CPlayerPed::GetActionTrigger
	movzx	ecx, al
	cmp	ecx, 55					; 00000037H
	je	SHORT $LN1@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetActionTrigger@CPlayerPed@@QAEEXZ	; CPlayerPed::GetActionTrigger
	movzx	ecx, al
	cmp	ecx, 54					; 00000036H
	je	SHORT $LN1@Process
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	jne	SHORT $LN1@Process
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Process
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+186], 0
	jne	SHORT $LN1@Process

; 414  : 	
; 415  : 		ProcessClassSelection();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessClassSelection@CLocalPlayer@@QAEXXZ ; CLocalPlayer::ProcessClassSelection
$LN1@Process:

; 416  : 	}
; 417  : 
; 418  : 	return TRUE;

	mov	eax, 1
$LN63@Process:

; 419  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN69@Process
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN69@Process:
	DD	3
	DD	$LN68@Process
$LN68@Process:
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN65@Process
	DD	-116					; ffffff8cH
	DD	2
	DD	$LN66@Process
	DD	-128					; ffffff80H
	DD	2
	DD	$LN67@Process
$LN67@Process:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN66@Process:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN65@Process:
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	116					; 00000074H
	DB	0
?Process@CLocalPlayer@@QAEHXZ ENDP			; CLocalPlayer::Process
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ?HandlePassengerEntry@CLocalPlayer@@QAEXXZ
_TEXT	SEGMENT
tv165 = -256						; size = 4
_pVehicle$1 = -56					; size = 4
_ClosestVehicleID$2 = -44				; size = 2
_pVehiclePool$ = -32					; size = 4
_pControls$ = -20					; size = 4
_this$ = -8						; size = 4
?HandlePassengerEntry@CLocalPlayer@@QAEXXZ PROC		; CLocalPlayer::HandlePassengerEntry, COMDAT
; _this$ = ecx

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 425  : 	GTA_CONTROLSET *pControls = GameGetInternalKeys();

	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	DWORD PTR _pControls$[ebp], eax

; 426  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 427  : 
; 428  : 	if(pControls->wKeys1[8] && !pControls->wKeys2[8]) { // RECRUIT KEY JUST DOWN.

	mov	eax, 2
	shl	eax, 3
	mov	ecx, DWORD PTR _pControls$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	$LN2@HandlePass
	mov	eax, 2
	shl	eax, 3
	mov	ecx, DWORD PTR _pControls$[ebp]
	movzx	edx, WORD PTR [ecx+eax+48]
	test	edx, edx
	jne	$LN2@HandlePass

; 429  : 
; 430  : 		VEHICLEID ClosestVehicleID = pVehiclePool->FindNearestToLocalPlayerPed();

	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindNearestToLocalPlayerPed@CVehiclePool@@QAEHXZ ; CVehiclePool::FindNearestToLocalPlayerPed
	mov	WORD PTR _ClosestVehicleID$2[ebp], ax

; 431  : 
; 432  : 		if(ClosestVehicleID < MAX_VEHICLES && pVehiclePool->GetSlotState(ClosestVehicleID)) {

	movzx	eax, WORD PTR _ClosestVehicleID$2[ebp]
	cmp	eax, 702				; 000002beH
	jge	$LN2@HandlePass
	movzx	eax, WORD PTR _ClosestVehicleID$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetSlotState@CVehiclePool@@QAEHG@Z	; CVehiclePool::GetSlotState
	test	eax, eax
	je	SHORT $LN2@HandlePass

; 433  : 			CVehicle *pVehicle = pVehiclePool->GetAt(ClosestVehicleID);

	movzx	eax, WORD PTR _ClosestVehicleID$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$1[ebp], eax

; 434  : 			if(pVehicle->GetDistanceFromLocalPlayerPed() < 4.5f) {

	mov	ecx, DWORD PTR _pVehicle$1[ebp]
	call	?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ ; CEntity::GetDistanceFromLocalPlayerPed
	fstp	DWORD PTR tv165[ebp]
	movss	xmm0, DWORD PTR __real@40900000
	comiss	xmm0, DWORD PTR tv165[ebp]
	jbe	SHORT $LN2@HandlePass

; 435  : 				// If armed with the para, set to fists
; 436  : 				if(m_pPlayerPed->GetCurrentWeapon() == WEAPON_PARACHUTE) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	movzx	ecx, al
	cmp	ecx, 46					; 0000002eH
	jne	SHORT $LN1@HandlePass

; 437  : 					m_pPlayerPed->SetArmedWeapon(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon
$LN1@HandlePass:

; 438  : 				}
; 439  : 				// Enter locally
; 440  : 				m_pPlayerPed->EnterVehicle(pVehicle->m_dwGTAId,TRUE);

	push	1
	mov	eax, DWORD PTR _pVehicle$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?EnterVehicle@CPlayerPed@@QAEXHH@Z	; CPlayerPed::EnterVehicle

; 441  : 				// Send Net Notification
; 442  : 				SendEnterVehicleNotification(ClosestVehicleID,TRUE);

	push	1
	movzx	eax, WORD PTR _ClosestVehicleID$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z ; CLocalPlayer::SendEnterVehicleNotification
$LN2@HandlePass:

; 443  : 			}
; 444  : 		}
; 445  : 	}
; 446  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?HandlePassengerEntry@CLocalPlayer@@QAEXXZ ENDP		; CLocalPlayer::HandlePassengerEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.cpp
;	COMDAT ??0CLocalPlayer@@QAE@XZ
_TEXT	SEGMENT
_i$ = -17						; size = 1
_this$ = -8						; size = 4
??0CLocalPlayer@@QAE@XZ PROC				; CLocalPlayer::CLocalPlayer, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	m_bHasSpawnInfo = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+153], 0

; 55   : 	m_pPlayerPed = pGame->FindPlayerPed();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 56   : 	m_bIsActive = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 57   : 	m_bIsWasted = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 58   : 	m_ulThisSyncFrame = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+157], 0

; 59   : 	m_ulLastSyncFrame = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+161], 0

; 60   : 	m_wLastKeys = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+209], ax

; 61   : 	m_iDisplayZoneTick = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+39], 0

; 62   : 	m_dwLastSendTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+211], eax

; 63   : 	m_dwLastSendSpecTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+215], eax

; 64   : 	m_dwLastAimSendTick = m_dwLastSendTick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+211]
	mov	DWORD PTR [eax+219], edx

; 65   : 	m_dwLastStatsUpdateTick = m_dwLastSendTick;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+211]
	mov	DWORD PTR [eax+223], edx

; 66   : 	m_bWantsAnotherClass = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 67   : 	m_bWaitingForSpawnRequestReply = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 68   : 	m_iSelectedClass = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 69   : 	m_byteVirtualWorld = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0

; 70   : 	m_dwLastSpawnSelectionTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+178], eax

; 71   : 	m_dwLastHeadUpdate = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+227], eax

; 72   : 	m_bInRCMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+170], 0

; 73   : 
; 74   : 	m_bIsSpectating = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+186], 0

; 75   : 	m_byteSpectateType = SPECTATE_TYPE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+26], 0

; 76   : 	m_SpectateID = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+27], -1

; 77   : 	ResetAllSyncAttributes();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetAllSyncAttributes@CLocalPlayer@@QAEXXZ ; CLocalPlayer::ResetAllSyncAttributes

; 78   : 		
; 79   : 	BYTE i;
; 80   : 	for (i = 0; i < 13; i++)

	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $LN3@CLocalPlay
$LN2@CLocalPlay:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$LN3@CLocalPlay:
	movzx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 13					; 0000000dH
	jge	SHORT $LN1@CLocalPlay

; 81   : 	{
; 82   : 		m_byteLastWeapon[i] = 0;

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+43], 0

; 83   : 		m_dwLastAmmo[i] = 0;

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+56], 0

; 84   : 	}

	jmp	SHORT $LN2@CLocalPlay
$LN1@CLocalPlay:

; 85   : 	m_byteTeam = NO_TEAM;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+190], 255			; 000000ffH

; 86   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLocalPlayer@@QAE@XZ ENDP				; CLocalPlayer::CLocalPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@G@BitStream@RakNet@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 2
??$Write@G@BitStream@RakNet@@QAEXG@Z PROC		; RakNet::BitStream::Write<unsigned short>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	16					; 00000010H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	16					; 00000010H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@G@BitStream@RakNet@@QAEXG@Z ENDP		; RakNet::BitStream::Write<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ PROC		; CGame::FindPlayerPed, COMDAT
; _this$ = ecx

; 142  : 	CPlayerPed  *FindPlayerPed() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		if(m_pGamePlayer==NULL)	m_pGamePlayer = new CPlayerPed();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@FindPlayer
	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@FindPlayer
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPlayerPed@@QAE@XZ			; CPlayerPed::CPlayerPed
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@FindPlayer
$LN4@FindPlayer:
	mov	DWORD PTR tv74[ebp], 0
$LN5@FindPlayer:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@FindPlayer:

; 144  : 		return m_pGamePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 145  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ENDP		; CGame::FindPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetCamera@CGame@@QAEPAVCCamera@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCamera@CGame@@QAEPAVCCamera@@XZ PROC		; CGame::GetCamera, COMDAT
; _this$ = ecx

; 135  : 	CCamera     *GetCamera() {	return m_pGameCamera; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCamera@CGame@@QAEPAVCCamera@@XZ ENDP		; CGame::GetCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.h
;	COMDAT ?GetCameraExtendedZoom@CPlayerPed@@QAEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCameraExtendedZoom@CPlayerPed@@QAEMXZ PROC		; CPlayerPed::GetCameraExtendedZoom, COMDAT
; _this$ = ecx

; 46   : 	float GetCameraExtendedZoom() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 		return GameGetLocalPlayerCameraExtZoom();

	call	?GameGetLocalPlayerCameraExtZoom@@YGMXZ	; GameGetLocalPlayerCameraExtZoom

; 48   : 	};

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCameraExtendedZoom@CPlayerPed@@QAEMXZ ENDP		; CPlayerPed::GetCameraExtendedZoom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.h
;	COMDAT ?GetCameraMode@CPlayerPed@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCameraMode@CPlayerPed@@QAEEXZ PROC			; CPlayerPed::GetCameraMode, COMDAT
; _this$ = ecx

; 38   : 	BYTE GetCameraMode() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 		return GameGetLocalPlayerCameraMode();

	call	?GameGetLocalPlayerCameraMode@@YGEXZ	; GameGetLocalPlayerCameraMode

; 40   : 	};

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCameraMode@CPlayerPed@@QAEEXZ ENDP			; CPlayerPed::GetCameraMode
_TEXT	ENDS
END
