; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\LogCommandParser.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??4PlayerID@@QAEAAU0@ABU0@@Z			; PlayerID::operator=
PUBLIC	??0LogCommandParser@@QAE@XZ			; LogCommandParser::LogCommandParser
PUBLIC	??1LogCommandParser@@UAE@XZ			; LogCommandParser::~LogCommandParser
PUBLIC	?OnCommand@LogCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z ; LogCommandParser::OnCommand
PUBLIC	?GetName@LogCommandParser@@UBEPADXZ		; LogCommandParser::GetName
PUBLIC	?SendHelp@LogCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z ; LogCommandParser::SendHelp
PUBLIC	?AddChannel@LogCommandParser@@QAEXPBD@Z		; LogCommandParser::AddChannel
PUBLIC	?WriteLog@LogCommandParser@@QAAXPBD0ZZ		; LogCommandParser::WriteLog
PUBLIC	?OnNewIncomingConnection@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z ; LogCommandParser::OnNewIncomingConnection
PUBLIC	?OnConnectionLost@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z ; LogCommandParser::OnConnectionLost
PUBLIC	?OnTransportChange@LogCommandParser@@UAEXPAVTransportInterface@@@Z ; LogCommandParser::OnTransportChange
PUBLIC	?PrintChannels@LogCommandParser@@IBEXUPlayerID@@PAVTransportInterface@@@Z ; LogCommandParser::PrintChannels
PUBLIC	?Unsubscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ; LogCommandParser::Unsubscribe
PUBLIC	?Subscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ; LogCommandParser::Subscribe
PUBLIC	?GetChannelIndexFromName@LogCommandParser@@IAEIPBD@Z ; LogCommandParser::GetChannelIndexFromName
PUBLIC	??4PlayerIDAndChannel@LogCommandParser@@QAEAAU01@ABU01@@Z ; LogCommandParser::PlayerIDAndChannel::operator=
PUBLIC	??0?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::List<LogCommandParser::PlayerIDAndChannel>
PUBLIC	??1?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::~List<LogCommandParser::PlayerIDAndChannel>
PUBLIC	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
PUBLIC	?Insert@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXUPlayerIDAndChannel@LogCommandParser@@@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Insert
PUBLIC	?Del@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXI@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Del
PUBLIC	?Size@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEIXZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Size
PUBLIC	??_GLogCommandParser@@UAEPAXI@Z			; LogCommandParser::`scalar deleting destructor'
PUBLIC	??_7LogCommandParser@@6B@			; LogCommandParser::`vftable'
PUBLIC	??_C@_0EB@JKKDDEMD@?$FL?$DMChannelName?$DO?$FN?5?9?5Subscribes?5to?5@ ; `string'
PUBLIC	??_C@_09KDKJLHFG@Subscribe?$AA@			; `string'
PUBLIC	??_C@_0EF@OBDEEMFI@?$FL?$DMChannelName?$DO?$FN?5?9?5Unsubscribes?5f@ ; `string'
PUBLIC	??_C@_0M@NCNBIKLN@Unsubscribe?$AA@		; `string'
PUBLIC	??_C@_0BO@EIGINMJK@Subscribed?5to?5all?5channels?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0CI@PBOKMBIB@You?5are?5now?5subscribed?5to?5channe@ ; `string'
PUBLIC	??_C@_0BK@EHOMLJNL@Cannot?5find?5channel?5?$CFs?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0CM@LDNFCNMD@Subscribe?5takes?5either?50?5or?51?5pa@ ; `string'
PUBLIC	??_C@_0CC@PMDDIFND@Unsubscribed?5from?5all?5channels?4?$AN@ ; `string'
PUBLIC	??_C@_0CM@MKPKEJAH@You?5are?5now?5unsubscribed?5from?5ch@ ; `string'
PUBLIC	??_C@_0CO@GDCDOCCD@Unsubscribe?5takes?5either?50?5or?51?5@ ; `string'
PUBLIC	??_C@_06MGGMPEFL@Logger?$AA@			; `string'
PUBLIC	??_C@_0EC@CBMLMKML@The?5logger?5will?5accept?5user?5log?5@ ; `string'
PUBLIC	??_C@_0CP@NMOOHJHE@Each?5log?5is?5associated?5with?5a?5na@ ; `string'
PUBLIC	??_C@_0DL@FJGGHGKK@You?5can?5subscribe?5to?5or?5unsubscr@ ; `string'
PUBLIC	?__LINE__Var@?1??AddChannel@LogCommandParser@@QAEXPBD@Z@4JA ; `LogCommandParser::AddChannel'::`2'::__LINE__Var
PUBLIC	??_C@_1FK@LPPKDPHA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAo?$AAg?$AAc?$AAo?$AAm?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1DG@PIFDDPNI@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DN?$AA?$DN?$AA?$CI?$AAu?$AAn?$AAs?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$CJ?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0M@IINIIGCA@CHANNELS?3?$AN?6?$AA@		; `string'
PUBLIC	??_C@_08EIGAEAF@?$CFi?4?5?$CFs?$AN?6?$AA@	; `string'
PUBLIC	??_C@_07KMCPJIG@None?4?$AN?6?$AA@		; `string'
PUBLIC	??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ ; `string'
PUBLIC	??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_R4LogCommandParser@@6B@			; LogCommandParser::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVLogCommandParser@@@8			; LogCommandParser `RTTI Type Descriptor'
PUBLIC	??_R3LogCommandParser@@8			; LogCommandParser::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2LogCommandParser@@8			; LogCommandParser::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@LogCommandParser@@8		; LogCommandParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CommandParserInterface@@8		; CommandParserInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCommandParserInterface@@@8		; CommandParserInterface `RTTI Type Descriptor'
PUBLIC	??_R3CommandParserInterface@@8			; CommandParserInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CommandParserInterface@@8			; CommandParserInterface::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	??8PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator==
EXTRN	__wassert:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__stricmp:PROC
EXTRN	??0CommandParserInterface@@QAE@XZ:PROC		; CommandParserInterface::CommandParserInterface
EXTRN	??1CommandParserInterface@@UAE@XZ:PROC		; CommandParserInterface::~CommandParserInterface
EXTRN	?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z:PROC ; CommandParserInterface::GetRegisteredCommand
EXTRN	?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::SendCommandList
EXTRN	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z:PROC ; CommandParserInterface::RegisterCommand
EXTRN	?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	??_ELogCommandParser@@UAEPAXI@Z:PROC		; LogCommandParser::`vector deleting destructor'
EXTRN	__vsnprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB:BYTE ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R2CommandParserInterface@@8
rdata$r	SEGMENT
??_R2CommandParserInterface@@8 DD FLAT:??_R1A@?0A@EA@CommandParserInterface@@8 ; CommandParserInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CommandParserInterface@@8
rdata$r	SEGMENT
??_R3CommandParserInterface@@8 DD 00H			; CommandParserInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCommandParserInterface@@@8
data$r	SEGMENT
??_R0?AVCommandParserInterface@@@8 DD FLAT:??_7type_info@@6B@ ; CommandParserInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCommandParserInterface@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CommandParserInterface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CommandParserInterface@@8 DD FLAT:??_R0?AVCommandParserInterface@@@8 ; CommandParserInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@LogCommandParser@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@LogCommandParser@@8 DD FLAT:??_R0?AVLogCommandParser@@@8 ; LogCommandParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3LogCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_R2LogCommandParser@@8
rdata$r	SEGMENT
??_R2LogCommandParser@@8 DD FLAT:??_R1A@?0A@EA@LogCommandParser@@8 ; LogCommandParser::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R3LogCommandParser@@8
rdata$r	SEGMENT
??_R3LogCommandParser@@8 DD 00H				; LogCommandParser::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2LogCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVLogCommandParser@@@8
data$r	SEGMENT
??_R0?AVLogCommandParser@@@8 DD FLAT:??_7type_info@@6B@	; LogCommandParser `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVLogCommandParser@@', 00H
data$r	ENDS
;	COMDAT ??_R4LogCommandParser@@6B@
rdata$r	SEGMENT
??_R4LogCommandParser@@6B@ DD 00H			; LogCommandParser::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVLogCommandParser@@@8
	DD	FLAT:??_R3LogCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '>', 00H, '=', 00H, 'n', 00H, 'u', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
CONST	SEGMENT
??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'd', 00H, 's', 00H, '_'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMCPJIG@None?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_07KMCPJIG@None?4?$AN?6?$AA@ DB 'None.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EIGAEAF@?$CFi?4?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_08EIGAEAF@?$CFi?4?5?$CFs?$AN?6?$AA@ DB '%i. %s', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IINIIGCA@CHANNELS?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_0M@IINIIGCA@CHANNELS?3?$AN?6?$AA@ DB 'CHANNELS:', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PIFDDPNI@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DN?$AA?$DN?$AA?$CI?$AAu?$AAn?$AAs?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$CJ?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@PIFDDPNI@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DN?$AA?$DN?$AA?$CI?$AAu?$AAn?$AAs?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$CJ?$AA?9?$AA1?$AA?$AA@ DB 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '=', 00H, '='
	DB	00H, '(', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, ')', 00H, '-', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@LPPKDPHA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAo?$AAg?$AAc?$AAo?$AAm?$AAm?$AAa@
CONST	SEGMENT
??_C@_1FK@LPPKDPHA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAo?$AAg?$AAc?$AAo?$AAm?$AAm?$AAa@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'l', 00H, 'o', 00H, 'g'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 'n', 00H
	DB	'd', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AddChannel@LogCommandParser@@QAEXPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddChannel@LogCommandParser@@QAEXPBD@Z@4JA DD 061H ; `LogCommandParser::AddChannel'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DL@FJGGHGKK@You?5can?5subscribe?5to?5or?5unsubscr@
CONST	SEGMENT
??_C@_0DL@FJGGHGKK@You?5can?5subscribe?5to?5or?5unsubscr@ DB 'You can sub'
	DB	'scribe to or unsubscribe from named channels.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NMOOHJHE@Each?5log?5is?5associated?5with?5a?5na@
CONST	SEGMENT
??_C@_0CP@NMOOHJHE@Each?5log?5is?5associated?5with?5a?5na@ DB 'Each log i'
	DB	's associated with a named channel.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@CBMLMKML@The?5logger?5will?5accept?5user?5log?5@
CONST	SEGMENT
??_C@_0EC@CBMLMKML@The?5logger?5will?5accept?5user?5log?5@ DB 'The logger'
	DB	' will accept user log data via the Log(...) function.', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06MGGMPEFL@Logger?$AA@
CONST	SEGMENT
??_C@_06MGGMPEFL@Logger?$AA@ DB 'Logger', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GDCDOCCD@Unsubscribe?5takes?5either?50?5or?51?5@
CONST	SEGMENT
??_C@_0CO@GDCDOCCD@Unsubscribe?5takes?5either?50?5or?51?5@ DB 'Unsubscrib'
	DB	'e takes either 0 or 1 parameters.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MKPKEJAH@You?5are?5now?5unsubscribed?5from?5ch@
CONST	SEGMENT
??_C@_0CM@MKPKEJAH@You?5are?5now?5unsubscribed?5from?5ch@ DB 'You are now'
	DB	' unsubscribed from channel %s.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PMDDIFND@Unsubscribed?5from?5all?5channels?4?$AN@
CONST	SEGMENT
??_C@_0CC@PMDDIFND@Unsubscribed?5from?5all?5channels?4?$AN@ DB 'Unsubscri'
	DB	'bed from all channels.', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LDNFCNMD@Subscribe?5takes?5either?50?5or?51?5pa@
CONST	SEGMENT
??_C@_0CM@LDNFCNMD@Subscribe?5takes?5either?50?5or?51?5pa@ DB 'Subscribe '
	DB	'takes either 0 or 1 parameters.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EHOMLJNL@Cannot?5find?5channel?5?$CFs?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BK@EHOMLJNL@Cannot?5find?5channel?5?$CFs?4?$AN?6?$AA@ DB 'Cannot f'
	DB	'ind channel %s.', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PBOKMBIB@You?5are?5now?5subscribed?5to?5channe@
CONST	SEGMENT
??_C@_0CI@PBOKMBIB@You?5are?5now?5subscribed?5to?5channe@ DB 'You are now'
	DB	' subscribed to channel %s.', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EIGINMJK@Subscribed?5to?5all?5channels?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BO@EIGINMJK@Subscribed?5to?5all?5channels?4?$AN?6?$AA@ DB 'Subscri'
	DB	'bed to all channels.', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NCNBIKLN@Unsubscribe?$AA@
CONST	SEGMENT
??_C@_0M@NCNBIKLN@Unsubscribe?$AA@ DB 'Unsubscribe', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@OBDEEMFI@?$FL?$DMChannelName?$DO?$FN?5?9?5Unsubscribes?5f@
CONST	SEGMENT
??_C@_0EF@OBDEEMFI@?$FL?$DMChannelName?$DO?$FN?5?9?5Unsubscribes?5f@ DB '['
	DB	'<ChannelName>] - Unsubscribes from a named channel, or all ch'
	DB	'annels', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDKJLHFG@Subscribe?$AA@
CONST	SEGMENT
??_C@_09KDKJLHFG@Subscribe?$AA@ DB 'Subscribe', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@JKKDDEMD@?$FL?$DMChannelName?$DO?$FN?5?9?5Subscribes?5to?5@
CONST	SEGMENT
??_C@_0EB@JKKDDEMD@?$FL?$DMChannelName?$DO?$FN?5?9?5Subscribes?5to?5@ DB '['
	DB	'<ChannelName>] - Subscribes to a named channel, or all channe'
	DB	'ls', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7LogCommandParser@@6B@
CONST	SEGMENT
??_7LogCommandParser@@6B@ DD FLAT:??_R4LogCommandParser@@6B@ ; LogCommandParser::`vftable'
	DD	FLAT:??_ELogCommandParser@@UAEPAXI@Z
	DD	FLAT:?GetName@LogCommandParser@@UBEPADXZ
	DD	FLAT:?OnNewIncomingConnection@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z
	DD	FLAT:?OnConnectionLost@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z
	DD	FLAT:?SendHelp@LogCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?OnCommand@LogCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z
	DD	FLAT:?OnTransportChange@LogCommandParser@@UAEXPAVTransportInterface@@@Z
	DD	FLAT:?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z
	DD	FLAT:?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1LogCommandParser@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1LogCommandParser@@UAE@XZ$0
__ehfuncinfo$??1LogCommandParser@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1LogCommandParser@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0LogCommandParser@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0LogCommandParser@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0LogCommandParser@@QAE@XZ$1
__ehfuncinfo$??0LogCommandParser@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0LogCommandParser@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GLogCommandParser@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GLogCommandParser@@UAEPAXI@Z PROC			; LogCommandParser::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LogCommandParser@@UAE@XZ		; LogCommandParser::~LogCommandParser
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GLogCommandParser@@UAEPAXI@Z ENDP			; LogCommandParser::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Size@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEIXZ PROC ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Size, COMDAT
; _this$ = ecx

; 373  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 		return list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 375  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEIXZ ENDP ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Del@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = 8						; size = 4
?Del@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXI@Z PROC ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Del, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 354  : 		// Delete the last elements on the list.  No compression needed
; 355  : #ifdef _DEBUG
; 356  : 		assert(list_size>=num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN3@Del
	push	356					; 00000164H
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Del:

; 357  : #endif
; 358  : 		list_size-=num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 359  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Del@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXI@Z ENDP ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Insert@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXUPlayerIDAndChannel@LogCommandParser@@@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_array$3 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 10
?Insert@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXUPlayerIDAndChannel@LogCommandParser@@@Z PROC ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Insert, COMDAT
; _this$ = ecx

; 242  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 		// Reallocate list if necessary
; 244  : 
; 245  : 		if ( list_size == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@Insert

; 246  : 		{
; 247  : 			// allocate twice the currently allocated memory
; 248  : 			list_type * new_array;
; 249  : 
; 250  : 			if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Insert

; 251  : 				allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 16			; 00000010H

; 252  : 			else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 253  : 				allocation_size *= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@Insert:

; 254  : 
; 255  : 			new_array = new list_type [ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 10					; 0000000aH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _new_array$3[ebp], eax

; 256  : 
; 257  : 			// copy old array over
; 258  : 			//	for ( unsigned int counter = 0; counter < list_size; ++counter )
; 259  : 			//		new_array[ counter ] = listArray[ counter ];
; 260  : 
; 261  : 			// Don't call constructors, assignment operators, etc.
; 262  : 			memcpy(new_array, listArray, list_size*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 10
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _new_array$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 263  : 
; 264  : 			// set old array to point to the newly allocated and twice as large array
; 265  : 			delete[] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 266  : 
; 267  : 			listArray = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$3[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Insert:

; 268  : 		}
; 269  : 
; 270  : 		// Insert the new item at the correct spot
; 271  : 		listArray[ list_size ] = input;

	lea	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [ecx+4], 10
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	call	??4PlayerIDAndChannel@LogCommandParser@@QAEAAU01@ABU01@@Z

; 272  : 
; 273  : 		++list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 274  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Insert@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXUPlayerIDAndChannel@LogCommandParser@@@Z ENDP ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z PROC ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[], COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : #ifdef _DEBUG
; 187  : 		assert ( position < list_size );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@operator
	push	187					; 000000bbH
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 188  : #endif
; 189  : 		return listArray[ position ];

	imul	eax, DWORD PTR _position$[ebp], 10
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ENDP ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??1?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::~List<LogCommandParser::PlayerIDAndChannel>, COMDAT
; _this$ = ecx

; 121  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (allocation_size>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	SHORT $LN2@List

; 123  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@List:

; 124  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::~List<LogCommandParser::PlayerIDAndChannel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??0?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::List<LogCommandParser::PlayerIDAndChannel>, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 115  : 		listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 116  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::List<LogCommandParser::PlayerIDAndChannel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4PlayerIDAndChannel@LogCommandParser@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4PlayerIDAndChannel@LogCommandParser@@QAEAAU01@ABU01@@Z PROC ; LogCommandParser::PlayerIDAndChannel::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+6]
	mov	DWORD PTR [eax+6], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4PlayerIDAndChannel@LogCommandParser@@QAEAAU01@ABU01@@Z ENDP ; LogCommandParser::PlayerIDAndChannel::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?GetChannelIndexFromName@LogCommandParser@@IAEIPBD@Z
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_channelName$ = 8					; size = 4
?GetChannelIndexFromName@LogCommandParser@@IAEIPBD@Z PROC ; LogCommandParser::GetChannelIndexFromName, COMDAT
; _this$ = ecx

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 256  : 	unsigned i;
; 257  : 	for (i=0; i < 32; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@GetChannel
$LN4@GetChannel:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@GetChannel:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jae	SHORT $LN3@GetChannel

; 258  : 	{
; 259  : 		if (channelNames[i]==0)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+28], 0
	jne	SHORT $LN2@GetChannel

; 260  : 			return (unsigned) -1;

	or	eax, -1
	jmp	SHORT $LN6@GetChannel
$LN2@GetChannel:

; 261  : 
; 262  : 		if (_stricmp(channelNames[i], channelName)==0)

	mov	eax, DWORD PTR _channelName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+28]
	push	eax
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@GetChannel

; 263  : 			return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN6@GetChannel
$LN1@GetChannel:

; 264  : 	}

	jmp	SHORT $LN4@GetChannel
$LN3@GetChannel:

; 265  : 	return (unsigned)-1;

	or	eax, -1
$LN6@GetChannel:

; 266  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetChannelIndexFromName@LogCommandParser@@IAEIPBD@Z ENDP ; LogCommandParser::GetChannelIndexFromName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?Subscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z
_TEXT	SEGMENT
tv91 = -252						; size = 4
_newUser$ = -52						; size = 10
_channelIndex$ = -32					; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
_channelName$ = 16					; size = 4
?Subscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z PROC	; LogCommandParser::Subscribe, COMDAT
; _this$ = ecx

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 	unsigned i;
; 224  : 	unsigned channelIndex=(unsigned)-1;

	mov	DWORD PTR _channelIndex$[ebp], -1

; 225  : 	if (channelName)

	cmp	DWORD PTR _channelName$[ebp], 0
	je	SHORT $LN10@Subscribe

; 226  : 	{
; 227  : 		channelIndex = GetChannelIndexFromName(channelName);

	mov	eax, DWORD PTR _channelName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetChannelIndexFromName@LogCommandParser@@IAEIPBD@Z ; LogCommandParser::GetChannelIndexFromName
	mov	DWORD PTR _channelIndex$[ebp], eax

; 228  : 		if (channelIndex==(unsigned)-1)

	cmp	DWORD PTR _channelIndex$[ebp], -1
	jne	SHORT $LN10@Subscribe

; 229  : 			return channelIndex;

	mov	eax, DWORD PTR _channelIndex$[ebp]
	jmp	$LN11@Subscribe
$LN10@Subscribe:

; 230  : 	}
; 231  : 
; 232  : 	for (i=0; i < remoteUsers.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@Subscribe
$LN7@Subscribe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@Subscribe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEIXZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN6@Subscribe

; 233  : 	{
; 234  : 		if (remoteUsers[i].playerId==playerId)

	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	mov	ecx, eax
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Subscribe

; 235  : 		{
; 236  : 			if (channelName)

	cmp	DWORD PTR _channelName$[ebp], 0
	je	SHORT $LN4@Subscribe

; 237  : 				remoteUsers[i].channels|=1<<channelIndex; // Set this bit for an existing user

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	add	eax, 6
	mov	DWORD PTR tv91[ebp], eax
	mov	edx, 1
	mov	ecx, DWORD PTR _channelIndex$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR tv91[ebp]
	or	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx], edx

; 238  : 			else

	jmp	SHORT $LN3@Subscribe
$LN4@Subscribe:

; 239  : 				remoteUsers[i].channels=0xFFFF;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	mov	DWORD PTR [eax+6], 65535		; 0000ffffH
$LN3@Subscribe:

; 240  : 			return channelIndex;

	mov	eax, DWORD PTR _channelIndex$[ebp]
	jmp	SHORT $LN11@Subscribe
$LN5@Subscribe:

; 241  : 		}
; 242  : 	}

	jmp	$LN7@Subscribe
$LN6@Subscribe:

; 243  : 
; 244  : 	// Make a new user
; 245  : 	PlayerIDAndChannel newUser;
; 246  : 	newUser.playerId = playerId;

	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	lea	ecx, DWORD PTR _newUser$[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 247  : 	if (channelName)

	cmp	DWORD PTR _channelName$[ebp], 0
	je	SHORT $LN2@Subscribe

; 248  : 		newUser.channels=1<<channelIndex;

	mov	eax, 1
	mov	ecx, DWORD PTR _channelIndex$[ebp]
	shl	eax, cl
	mov	DWORD PTR _newUser$[ebp+6], eax

; 249  : 	else

	jmp	SHORT $LN1@Subscribe
$LN2@Subscribe:

; 250  : 		newUser.channels=0xFFFF;

	mov	DWORD PTR _newUser$[ebp+6], 65535	; 0000ffffH
$LN1@Subscribe:

; 251  : 	remoteUsers.Insert(newUser);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _newUser$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _newUser$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	cx, WORD PTR _newUser$[ebp+8]
	mov	WORD PTR [eax+8], cx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Insert@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXUPlayerIDAndChannel@LogCommandParser@@@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Insert

; 252  : 	return channelIndex;

	mov	eax, DWORD PTR _channelIndex$[ebp]
$LN11@Subscribe:

; 253  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Subscribe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN15@Subscribe:
	DD	1
	DD	$LN14@Subscribe
$LN14@Subscribe:
	DD	-52					; ffffffccH
	DD	10					; 0000000aH
	DD	$LN13@Subscribe
$LN13@Subscribe:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	85					; 00000055H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?Subscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ENDP	; LogCommandParser::Subscribe
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?Unsubscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z
_TEXT	SEGMENT
tv140 = -232						; size = 4
_channelIndex$1 = -32					; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
_channelName$ = 16					; size = 4
?Unsubscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z PROC ; LogCommandParser::Unsubscribe, COMDAT
; _this$ = ecx

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 195  : 	unsigned i;
; 196  : 	for (i=0; i < remoteUsers.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Unsubscrib
$LN6@Unsubscrib:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Unsubscrib:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEIXZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN5@Unsubscrib

; 197  : 	{
; 198  : 		if (remoteUsers[i].playerId==playerId)

	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	mov	ecx, eax
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	$LN4@Unsubscrib

; 199  : 		{
; 200  : 			if (channelName==0)

	cmp	DWORD PTR _channelName$[ebp], 0
	jne	SHORT $LN3@Unsubscrib

; 201  : 			{
; 202  : 				// Unsubscribe from all and delete this user.
; 203  : 				remoteUsers[i]=remoteUsers[remoteUsers.Size()-1];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEIXZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	mov	ecx, eax
	call	??4PlayerIDAndChannel@LogCommandParser@@QAEAAU01@ABU01@@Z

; 204  : 				remoteUsers.Del();

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Del@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAEXI@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Del

; 205  : 				return 0;

	xor	eax, eax
	jmp	SHORT $LN8@Unsubscrib

; 206  : 			}
; 207  : 			else

	jmp	SHORT $LN4@Unsubscrib
$LN3@Unsubscrib:

; 208  : 			{
; 209  : 				unsigned channelIndex;
; 210  : 				channelIndex = GetChannelIndexFromName(channelName);

	mov	eax, DWORD PTR _channelName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetChannelIndexFromName@LogCommandParser@@IAEIPBD@Z ; LogCommandParser::GetChannelIndexFromName
	mov	DWORD PTR _channelIndex$1[ebp], eax

; 211  : 				if (channelIndex!=(unsigned)-1)

	cmp	DWORD PTR _channelIndex$1[ebp], -1
	je	SHORT $LN1@Unsubscrib

; 212  : 				{
; 213  : 					remoteUsers[i].channels&=0xFFFF ^ (1<<channelIndex); // Unset this bit

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	add	eax, 6
	mov	DWORD PTR tv140[ebp], eax
	mov	edx, 1
	mov	ecx, DWORD PTR _channelIndex$1[ebp]
	shl	edx, cl
	xor	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR tv140[ebp]
	and	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv140[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@Unsubscrib:

; 214  : 				}
; 215  : 				return channelIndex;

	mov	eax, DWORD PTR _channelIndex$1[ebp]
	jmp	SHORT $LN8@Unsubscrib
$LN4@Unsubscrib:

; 216  : 			}
; 217  : 		}
; 218  : 	}

	jmp	$LN6@Unsubscrib
$LN5@Unsubscrib:

; 219  : 	return (unsigned)-1;

	or	eax, -1
$LN8@Unsubscrib:

; 220  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Unsubscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ENDP ; LogCommandParser::Unsubscribe
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?PrintChannels@LogCommandParser@@IBEXUPlayerID@@PAVTransportInterface@@@Z
_TEXT	SEGMENT
_anyChannels$ = -29					; size = 1
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
_transport$ = 16					; size = 4
?PrintChannels@LogCommandParser@@IBEXUPlayerID@@PAVTransportInterface@@@Z PROC ; LogCommandParser::PrintChannels, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 	unsigned i;
; 167  : 	bool anyChannels=false;

	mov	BYTE PTR _anyChannels$[ebp], 0

; 168  : 	transport->Send(playerId, "CHANNELS:\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0M@IINIIGCA@CHANNELS?3?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 169  : 	for (i=0; i < 32; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@PrintChann
$LN4@PrintChann:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@PrintChann:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jae	SHORT $LN3@PrintChann

; 170  : 	{
; 171  : 		if (channelNames[i])

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+28], 0
	je	SHORT $LN2@PrintChann

; 172  : 		{
; 173  : 			transport->Send(playerId, "%i. %s\r\n", i+1,channelNames[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+28]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_08EIGAEAF@?$CFi?4?5?$CFs?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 174  : 			anyChannels=true;

	mov	BYTE PTR _anyChannels$[ebp], 1
$LN2@PrintChann:

; 175  : 		}
; 176  : 	}

	jmp	SHORT $LN4@PrintChann
$LN3@PrintChann:

; 177  : 	if (anyChannels==false)

	movzx	eax, BYTE PTR _anyChannels$[ebp]
	test	eax, eax
	jne	SHORT $LN6@PrintChann

; 178  : 		transport->Send(playerId, "None.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_07KMCPJIG@None?4?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@PrintChann:

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PrintChannels@LogCommandParser@@IBEXUPlayerID@@PAVTransportInterface@@@Z ENDP ; LogCommandParser::PrintChannels
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?OnTransportChange@LogCommandParser@@UAEXPAVTransportInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_transport$ = 8						; size = 4
?OnTransportChange@LogCommandParser@@UAEXPAVTransportInterface@@@Z PROC ; LogCommandParser::OnTransportChange, COMDAT
; _this$ = ecx

; 269  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 270  : 	// I don't want users to have to pass TransportInterface *transport to Log.
; 271  : 	trans=transport;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	DWORD PTR [eax+156], ecx

; 272  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?OnTransportChange@LogCommandParser@@UAEXPAVTransportInterface@@@Z ENDP ; LogCommandParser::OnTransportChange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?OnConnectionLost@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
_transport$ = 16					; size = 4
?OnConnectionLost@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z PROC ; LogCommandParser::OnConnectionLost, COMDAT
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	Unsubscribe(playerId, 0);

	push	0
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unsubscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ; LogCommandParser::Unsubscribe

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?OnConnectionLost@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z ENDP ; LogCommandParser::OnConnectionLost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?OnNewIncomingConnection@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
_transport$ = 16					; size = 4
?OnNewIncomingConnection@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z PROC ; LogCommandParser::OnNewIncomingConnection, COMDAT
; _this$ = ecx

; 184  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 185  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?OnNewIncomingConnection@LogCommandParser@@UAEXUPlayerID@@PAVTransportInterface@@@Z ENDP ; LogCommandParser::OnNewIncomingConnection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?WriteLog@LogCommandParser@@QAAXPBD0ZZ
_TEXT	SEGMENT
$T1 = -796						; size = 4
$T2 = -784						; size = 4
$T3 = -772						; size = 4
_i$ = -568						; size = 4
_textLen$ = -556					; size = 4
_ap$ = -544						; size = 4
_text$ = -532						; size = 512
_channelIndex$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_channelName$ = 12					; size = 4
_format$ = 16						; size = 4
?WriteLog@LogCommandParser@@QAAXPBD0ZZ PROC		; LogCommandParser::WriteLog, COMDAT

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 800				; 00000320H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-800]
	mov	ecx, 200				; 000000c8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 119  : 	if (channelName==0 || format==0)

	cmp	DWORD PTR _channelName$[ebp], 0
	je	SHORT $LN10@WriteLog
	cmp	DWORD PTR _format$[ebp], 0
	jne	SHORT $LN11@WriteLog
$LN10@WriteLog:

; 120  : 		return;

	jmp	$LN13@WriteLog
$LN11@WriteLog:

; 121  : 
; 122  : 	unsigned channelIndex;
; 123  : 	channelIndex = GetChannelIndexFromName(channelName);

	mov	eax, DWORD PTR _channelName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetChannelIndexFromName@LogCommandParser@@IAEIPBD@Z ; LogCommandParser::GetChannelIndexFromName
	mov	DWORD PTR _channelIndex$[ebp], eax

; 124  : 	if (channelIndex==(unsigned)-1)

	cmp	DWORD PTR _channelIndex$[ebp], -1
	jne	SHORT $LN9@WriteLog

; 125  : 	{
; 126  : 		AddChannel(channelName);

	mov	eax, DWORD PTR _channelName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddChannel@LogCommandParser@@QAEXPBD@Z	; LogCommandParser::AddChannel
$LN9@WriteLog:

; 127  : 	}
; 128  : 
; 129  : 	char text[REMOTE_MAX_TEXT_INPUT];
; 130  : 	va_list ap;
; 131  : 	va_start(ap, format);

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax

; 132  : 	_vsnprintf(text, REMOTE_MAX_TEXT_INPUT, format, ap);

	mov	eax, DWORD PTR _ap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	__vsnprintf
	add	esp, 16					; 00000010H

; 133  : 	va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0

; 134  : 	text[REMOTE_MAX_TEXT_INPUT-1]=0;

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN14@WriteLog
	jmp	SHORT $LN15@WriteLog
$LN14@WriteLog:
	call	___report_rangecheckfailure
$LN15@WriteLog:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _text$[ebp+edx], 0

; 135  : 
; 136  : 	// Make sure that text ends in \r\n
; 137  : 	int textLen;
; 138  : 	textLen=(int)strlen(text);

	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _textLen$[ebp], eax

; 139  : 	if (textLen==0)

	cmp	DWORD PTR _textLen$[ebp], 0
	jne	SHORT $LN8@WriteLog

; 140  : 		return;

	jmp	$LN13@WriteLog
$LN8@WriteLog:

; 141  : 	if (text[textLen-1]=='\n')

	mov	eax, DWORD PTR _textLen$[ebp]
	movsx	ecx, BYTE PTR _text$[ebp+eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN7@WriteLog

; 142  : 	{
; 143  : 		text[textLen-1]=0;

	mov	eax, DWORD PTR _textLen$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 512			; 00000200H
	jae	SHORT $LN16@WriteLog
	jmp	SHORT $LN17@WriteLog
$LN16@WriteLog:
	call	___report_rangecheckfailure
$LN17@WriteLog:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _text$[ebp+ecx], 0
$LN7@WriteLog:

; 144  : 	}
; 145  : 	if (textLen < REMOTE_MAX_TEXT_INPUT-4)

	cmp	DWORD PTR _textLen$[ebp], 508		; 000001fcH
	jge	SHORT $LN6@WriteLog

; 146  : 		strcat(text, "\r\n");

	push	OFFSET ??_C@_02PCIJFNDE@?$AN?6?$AA@
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 147  : 	else

	jmp	SHORT $LN5@WriteLog
$LN6@WriteLog:

; 148  : 	{
; 149  : 		text[textLen-3]='\r';

	mov	eax, DWORD PTR _textLen$[ebp]
	mov	BYTE PTR _text$[ebp+eax-3], 13		; 0000000dH

; 150  : 		text[textLen-2]='\n';

	mov	eax, DWORD PTR _textLen$[ebp]
	mov	BYTE PTR _text$[ebp+eax-2], 10		; 0000000aH

; 151  : 		text[textLen-1]=0;

	mov	eax, DWORD PTR _textLen$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 512			; 00000200H
	jae	SHORT $LN18@WriteLog
	jmp	SHORT $LN19@WriteLog
$LN18@WriteLog:
	call	___report_rangecheckfailure
$LN19@WriteLog:
	mov	ecx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _text$[ebp+ecx], 0
$LN5@WriteLog:

; 152  : 	}
; 153  : 
; 154  : 	// For each user that subscribes to this channel, send to them.
; 155  : 	unsigned i;
; 156  : 	for (i=0; i < remoteUsers.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@WriteLog
$LN3@WriteLog:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@WriteLog:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEIXZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN13@WriteLog

; 157  : 	{
; 158  : 		if (remoteUsers[i].channels & (1 << channelIndex))

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	mov	edx, 1
	mov	ecx, DWORD PTR _channelIndex$[ebp]
	shl	edx, cl
	and	edx, DWORD PTR [eax+6]
	je	SHORT $LN1@WriteLog

; 159  : 		{
; 160  : 			trans->Send(remoteUsers[i].playerId, text);

	mov	esi, esp
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QBEAAUPlayerIDAndChannel@LogCommandParser@@I@Z ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::operator[]
	sub	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [edx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@WriteLog:

; 161  : 		}
; 162  : 	}

	jmp	$LN3@WriteLog
$LN13@WriteLog:

; 163  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@WriteLog
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 800				; 00000320H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@WriteLog:
	DD	1
	DD	$LN21@WriteLog
$LN21@WriteLog:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN20@WriteLog
$LN20@WriteLog:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
?WriteLog@LogCommandParser@@QAAXPBD0ZZ ENDP		; LogCommandParser::WriteLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?AddChannel@LogCommandParser@@QAEXPBD@Z
_TEXT	SEGMENT
_i$ = -32						; size = 4
_channelIndex$ = -20					; size = 4
_this$ = -8						; size = 4
_channelName$ = 8					; size = 4
?AddChannel@LogCommandParser@@QAEXPBD@Z PROC		; LogCommandParser::AddChannel, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	unsigned channelIndex;
; 99   : 	channelIndex = GetChannelIndexFromName(channelName);

	mov	eax, DWORD PTR _channelName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetChannelIndexFromName@LogCommandParser@@IAEIPBD@Z ; LogCommandParser::GetChannelIndexFromName
	mov	DWORD PTR _channelIndex$[ebp], eax

; 100  : 	// Each channel can only be added once.
; 101  : 	assert(channelIndex==(unsigned)-1);

	cmp	DWORD PTR _channelIndex$[ebp], -1
	je	SHORT $LN7@AddChannel
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddChannel@LogCommandParser@@QAEXPBD@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1FK@LPPKDPHA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAo?$AAg?$AAc?$AAo?$AAm?$AAm?$AAa@
	push	OFFSET ??_C@_1DG@PIFDDPNI@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$DN?$AA?$DN?$AA?$CI?$AAu?$AAn?$AAs?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?$CJ?$AA?9?$AA1?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@AddChannel:

; 102  : 
; 103  : 	unsigned i;
; 104  : 	for (i=0; i < 32; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@AddChannel
$LN3@AddChannel:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@AddChannel:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jae	SHORT $LN2@AddChannel

; 105  : 	{
; 106  : 		if (channelNames[i]==0)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+28], 0
	jne	SHORT $LN1@AddChannel

; 107  : 		{
; 108  : 			// Assuming a persistent static string.
; 109  : 			channelNames[i]=channelName;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _channelName$[ebp]
	mov	DWORD PTR [ecx+eax*4+28], edx

; 110  : 			return;

	jmp	SHORT $LN5@AddChannel
$LN1@AddChannel:

; 111  : 		}
; 112  : 	}

	jmp	SHORT $LN3@AddChannel
$LN2@AddChannel:

; 113  : 
; 114  : 	// No more available channels - max 32 with this implementation where I save subscribed channels with bit operations
; 115  : 	assert(0);

	xor	eax, eax
	jne	SHORT $LN5@AddChannel
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AddChannel@LogCommandParser@@QAEXPBD@Z@4JA
	add	ecx, 18					; 00000012H
	push	ecx
	push	OFFSET ??_C@_1FK@LPPKDPHA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAo?$AAg?$AAc?$AAo?$AAm?$AAm?$AAa@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@AddChannel:

; 116  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddChannel@LogCommandParser@@QAEXPBD@Z ENDP		; LogCommandParser::AddChannel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?SendHelp@LogCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_transport$ = 8						; size = 4
_playerId$ = 12						; size = 6
?SendHelp@LogCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z PROC ; LogCommandParser::SendHelp, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	transport->Send(playerId, "The logger will accept user log data via the Log(...) function.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EC@CBMLMKML@The?5logger?5will?5accept?5user?5log?5@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 92   : 	transport->Send(playerId, "Each log is associated with a named channel.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CP@NMOOHJHE@Each?5log?5is?5associated?5with?5a?5na@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : 	transport->Send(playerId, "You can subscribe to or unsubscribe from named channels.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DL@FJGGHGKK@You?5can?5subscribe?5to?5or?5unsubscr@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 94   : 	PrintChannels(playerId, transport);

	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrintChannels@LogCommandParser@@IBEXUPlayerID@@PAVTransportInterface@@@Z ; LogCommandParser::PrintChannels

; 95   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SendHelp@LogCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z ENDP ; LogCommandParser::SendHelp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?GetName@LogCommandParser@@UBEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetName@LogCommandParser@@UBEPADXZ PROC		; LogCommandParser::GetName, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	return "Logger";

	mov	eax, OFFSET ??_C@_06MGGMPEFL@Logger?$AA@

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetName@LogCommandParser@@UBEPADXZ ENDP		; LogCommandParser::GetName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ?OnCommand@LogCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z
_TEXT	SEGMENT
_channelIndex$1 = -32					; size = 4
_channelIndex$2 = -20					; size = 4
_this$ = -8						; size = 4
_command$ = 8						; size = 4
_numParameters$ = 12					; size = 4
_parameterList$ = 16					; size = 4
_transport$ = 20					; size = 4
_playerId$ = 24						; size = 6
_originalString$ = 32					; size = 4
?OnCommand@LogCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z PROC ; LogCommandParser::OnCommand, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 	if (strcmp(command, "Subscribe")==0)

	push	OFFSET ??_C@_09KDKJLHFG@Subscribe?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN15@OnCommand

; 33   : 	{
; 34   : 		unsigned channelIndex;
; 35   : 		if (numParameters==0)

	cmp	DWORD PTR _numParameters$[ebp], 0
	jne	SHORT $LN14@OnCommand

; 36   : 		{
; 37   : 			Subscribe(playerId, 0);

	push	0
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Subscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ; LogCommandParser::Subscribe

; 38   : 			transport->Send(playerId, "Subscribed to all channels.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BO@EIGINMJK@Subscribed?5to?5all?5channels?4?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN13@OnCommand
$LN14@OnCommand:

; 39   : 		}
; 40   : 		else if (numParameters==1)

	cmp	DWORD PTR _numParameters$[ebp], 1
	jne	$LN12@OnCommand

; 41   : 		{
; 42   : 			if ((channelIndex=Subscribe(playerId, parameterList[0]))!=(unsigned)-1)

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Subscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ; LogCommandParser::Subscribe
	mov	DWORD PTR _channelIndex$2[ebp], eax
	cmp	DWORD PTR _channelIndex$2[ebp], -1
	je	SHORT $LN11@OnCommand

; 43   : 			{
; 44   : 				transport->Send(playerId, "You are now subscribed to channel %s.\r\n", channelNames[channelIndex]);

	mov	esi, esp
	mov	eax, DWORD PTR _channelIndex$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+28]
	push	edx
	push	OFFSET ??_C@_0CI@PBOKMBIB@You?5are?5now?5subscribed?5to?5channe@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 45   : 			}
; 46   : 			else

	jmp	SHORT $LN10@OnCommand
$LN11@OnCommand:

; 47   : 			{
; 48   : 				transport->Send(playerId, "Cannot find channel %s.\r\n", parameterList[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	esi, esp
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	OFFSET ??_C@_0BK@EHOMLJNL@Cannot?5find?5channel?5?$CFs?4?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 				PrintChannels(playerId, transport);

	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrintChannels@LogCommandParser@@IBEXUPlayerID@@PAVTransportInterface@@@Z ; LogCommandParser::PrintChannels
$LN10@OnCommand:

; 50   : 			}
; 51   : 		}
; 52   : 		else

	jmp	SHORT $LN13@OnCommand
$LN12@OnCommand:

; 53   : 		{
; 54   : 			transport->Send(playerId, "Subscribe takes either 0 or 1 parameters.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CM@LDNFCNMD@Subscribe?5takes?5either?50?5or?51?5pa@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@OnCommand:

; 55   : 		}

	jmp	$LN8@OnCommand
$LN15@OnCommand:

; 56   : 	}
; 57   : 	else if (strcmp(command, "Unsubscribe")==0)

	push	OFFSET ??_C@_0M@NCNBIKLN@Unsubscribe?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN8@OnCommand

; 58   : 	{
; 59   : 		unsigned channelIndex;
; 60   : 		if (numParameters==0)

	cmp	DWORD PTR _numParameters$[ebp], 0
	jne	SHORT $LN6@OnCommand

; 61   : 		{
; 62   : 			Unsubscribe(playerId, 0);

	push	0
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unsubscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ; LogCommandParser::Unsubscribe

; 63   : 			transport->Send(playerId, "Unsubscribed from all channels.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CC@PMDDIFND@Unsubscribed?5from?5all?5channels?4?$AN@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN8@OnCommand
$LN6@OnCommand:

; 64   : 		}
; 65   : 		else if (numParameters==1)

	cmp	DWORD PTR _numParameters$[ebp], 1
	jne	$LN4@OnCommand

; 66   : 		{
; 67   : 			if ((channelIndex=Unsubscribe(playerId, parameterList[0]))!=(unsigned)-1)

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unsubscribe@LogCommandParser@@IAEIUPlayerID@@PBD@Z ; LogCommandParser::Unsubscribe
	mov	DWORD PTR _channelIndex$1[ebp], eax
	cmp	DWORD PTR _channelIndex$1[ebp], -1
	je	SHORT $LN3@OnCommand

; 68   : 			{
; 69   : 				transport->Send(playerId, "You are now unsubscribed from channel %s.\r\n", channelNames[channelIndex]);

	mov	esi, esp
	mov	eax, DWORD PTR _channelIndex$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+28]
	push	edx
	push	OFFSET ??_C@_0CM@MKPKEJAH@You?5are?5now?5unsubscribed?5from?5ch@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 70   : 			}
; 71   : 			else

	jmp	SHORT $LN2@OnCommand
$LN3@OnCommand:

; 72   : 			{
; 73   : 				transport->Send(playerId, "Cannot find channel %s.\r\n", parameterList[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	esi, esp
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	OFFSET ??_C@_0BK@EHOMLJNL@Cannot?5find?5channel?5?$CFs?4?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 74   : 				PrintChannels(playerId, transport);

	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrintChannels@LogCommandParser@@IBEXUPlayerID@@PAVTransportInterface@@@Z ; LogCommandParser::PrintChannels
$LN2@OnCommand:

; 75   : 			}
; 76   : 		}
; 77   : 		else

	jmp	SHORT $LN8@OnCommand
$LN4@OnCommand:

; 78   : 		{
; 79   : 			transport->Send(playerId, "Unsubscribe takes either 0 or 1 parameters.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CO@GDCDOCCD@Unsubscribe?5takes?5either?50?5or?51?5@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@OnCommand:

; 80   : 		}
; 81   : 	}
; 82   : 
; 83   : 	return true;

	mov	al, 1

; 84   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?OnCommand@LogCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z ENDP ; LogCommandParser::OnCommand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ??1LogCommandParser@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1LogCommandParser@@UAE@XZ PROC			; LogCommandParser::~LogCommandParser, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1LogCommandParser@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LogCommandParser@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 26   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::~List<LogCommandParser::PlayerIDAndChannel>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CommandParserInterface@@UAE@XZ	; CommandParserInterface::~CommandParserInterface
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1LogCommandParser@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandParserInterface@@UAE@XZ	; CommandParserInterface::~CommandParserInterface
__ehhandler$??1LogCommandParser@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1LogCommandParser@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1LogCommandParser@@UAE@XZ ENDP			; LogCommandParser::~LogCommandParser
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\logcommandparser.cpp
;	COMDAT ??0LogCommandParser@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0LogCommandParser@@QAE@XZ PROC			; LogCommandParser::LogCommandParser, COMDAT
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0LogCommandParser@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CommandParserInterface@@QAE@XZ	; CommandParserInterface::CommandParserInterface
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LogCommandParser@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::List<LogCommandParser::PlayerIDAndChannel>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 20   : 	RegisterCommand(CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS,"Subscribe","[<ChannelName>] - Subscribes to a named channel, or all channels");

	push	OFFSET ??_C@_0EB@JKKDDEMD@?$FL?$DMChannelName?$DO?$FN?5?9?5Subscribes?5to?5@
	push	OFFSET ??_C@_09KDKJLHFG@Subscribe?$AA@
	movzx	eax, BYTE PTR ?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 21   : 	RegisterCommand(CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS,"Unsubscribe","[<ChannelName>] - Unsubscribes from a named channel, or all channels");

	push	OFFSET ??_C@_0EF@OBDEEMFI@?$FL?$DMChannelName?$DO?$FN?5?9?5Unsubscribes?5f@
	push	OFFSET ??_C@_0M@NCNBIKLN@Unsubscribe?$AA@
	movzx	eax, BYTE PTR ?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 22   : 	memset(channelNames,0,sizeof(channelNames));

	push	128					; 00000080H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 23   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0LogCommandParser@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandParserInterface@@UAE@XZ	; CommandParserInterface::~CommandParserInterface
__unwindfunclet$??0LogCommandParser@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$List@UPlayerIDAndChannel@LogCommandParser@@@DataStructures@@QAE@XZ ; DataStructures::List<LogCommandParser::PlayerIDAndChannel>::~List<LogCommandParser::PlayerIDAndChannel>
__ehhandler$??0LogCommandParser@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0LogCommandParser@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0LogCommandParser@@QAE@XZ ENDP			; LogCommandParser::LogCommandParser
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.h
;	COMDAT ??4PlayerID@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4PlayerID@@QAEAAU0@ABU0@@Z PROC			; PlayerID::operator=, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		binaryAddress = input.binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 76   : 		port = input.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 77   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PlayerID@@QAEAAU0@ABU0@@Z ENDP			; PlayerID::operator=
_TEXT	ENDS
END
