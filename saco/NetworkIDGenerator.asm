; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\NetworkIDGenerator.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?staticItemID@NetworkIDGenerator@@0GA		; NetworkIDGenerator::staticItemID
_BSS	SEGMENT
?staticItemID@NetworkIDGenerator@@0GA DW 01H DUP (?)	; NetworkIDGenerator::staticItemID
_BSS	ENDS
CONST	SEGMENT
_UNASSIGNED_PLAYER_ID DD 0ffffffffH
	DW	0ffffH
	ORG $+2
_UNASSIGNED_NETWORK_ID DD 0ffffffffH
	DW	0ffffH
	DW	0ffffH
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??4PlayerID@@QAEAAU0@ABU0@@Z			; PlayerID::operator=
PUBLIC	??0NetworkIDNode@@QAE@XZ			; NetworkIDNode::NetworkIDNode
PUBLIC	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
PUBLIC	??8NetworkIDNode@@QBE_NABU0@@Z			; NetworkIDNode::operator==
PUBLIC	??ONetworkIDNode@@QBE_NABU0@@Z			; NetworkIDNode::operator>
PUBLIC	??MNetworkIDNode@@QBE_NABU0@@Z			; NetworkIDNode::operator<
PUBLIC	??4NetworkIDNode@@QAEAAU0@ABU0@@Z		; NetworkIDNode::operator=
PUBLIC	??0NetworkIDGenerator@@QAE@XZ			; NetworkIDGenerator::NetworkIDGenerator
PUBLIC	??1NetworkIDGenerator@@UAE@XZ			; NetworkIDGenerator::~NetworkIDGenerator
PUBLIC	?GetNetworkID@NetworkIDGenerator@@UAE?AUNetworkID@@XZ ; NetworkIDGenerator::GetNetworkID
PUBLIC	?SetNetworkID@NetworkIDGenerator@@UAEXUNetworkID@@@Z ; NetworkIDGenerator::SetNetworkID
PUBLIC	?SetParent@NetworkIDGenerator@@UAEXPAX@Z	; NetworkIDGenerator::SetParent
PUBLIC	?GetParent@NetworkIDGenerator@@UBEPAXXZ		; NetworkIDGenerator::GetParent
PUBLIC	??0?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ ; DataStructures::BinarySearchTree<NetworkIDNode>::BinarySearchTree<NetworkIDNode>
PUBLIC	??1?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ; DataStructures::BinarySearchTree<NetworkIDNode>::~BinarySearchTree<NetworkIDNode>
PUBLIC	?Size@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIXZ ; DataStructures::BinarySearchTree<NetworkIDNode>::Size
PUBLIC	?Clear@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXXZ ; DataStructures::BinarySearchTree<NetworkIDNode>::Clear
PUBLIC	?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Height
PUBLIC	?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Add
PUBLIC	?Del@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Del
PUBLIC	?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::DisplayBreadthFirstSearch
PUBLIC	?GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU3@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode
PUBLIC	?HeightRecursive@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::HeightRecursive
PUBLIC	?Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@PAPAU312@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Find
PUBLIC	?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent
PUBLIC	??_G?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::`scalar deleting destructor'
PUBLIC	??0?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::AVLBalancedBinarySearchTree<NetworkIDNode>
PUBLIC	??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::~AVLBalancedBinarySearchTree<NetworkIDNode>
PUBLIC	?Add@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Add
PUBLIC	?Del@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Del
PUBLIC	?BalanceTree@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@_N@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::BalanceTree
PUBLIC	?RotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateRight
PUBLIC	?RotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateLeft
PUBLIC	?DoubleRotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::DoubleRotateRight
PUBLIC	?DoubleRotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::DoubleRotateLeft
PUBLIC	?RightHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RightHigher
PUBLIC	?LeftHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::LeftHigher
PUBLIC	??_G?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`scalar deleting destructor'
PUBLIC	?GetStaticNetworkID@NetworkIDGenerator@@SAGXZ	; NetworkIDGenerator::GetStaticNetworkID
PUBLIC	?SetStaticNetworkID@NetworkIDGenerator@@SAXG@Z	; NetworkIDGenerator::SetStaticNetworkID
PUBLIC	?SetExternalPlayerID@NetworkIDGenerator@@SAXUPlayerID@@@Z ; NetworkIDGenerator::SetExternalPlayerID
PUBLIC	?GetExternalPlayerID@NetworkIDGenerator@@SA?AUPlayerID@@XZ ; NetworkIDGenerator::GetExternalPlayerID
PUBLIC	?RequiresSetParent@NetworkIDGenerator@@UBE_NXZ	; NetworkIDGenerator::RequiresSetParent
PUBLIC	?GET_BASE_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z ; NetworkIDGenerator::GET_BASE_OBJECT_FROM_ID
PUBLIC	?GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z ; NetworkIDGenerator::GET_OBJECT_FROM_ID
PUBLIC	?GenerateID@NetworkIDGenerator@@IAEXXZ		; NetworkIDGenerator::GenerateID
PUBLIC	??_GNetworkIDGenerator@@UAEPAXI@Z		; NetworkIDGenerator::`scalar deleting destructor'
PUBLIC	?GET_OBJECT_FROM_ID@@YAPAXUNetworkID@@@Z	; GET_OBJECT_FROM_ID
PUBLIC	??0?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
PUBLIC	?Pop@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Pop
PUBLIC	?Push@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXABQAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Push
PUBLIC	?Size@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Size
PUBLIC	??0?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
PUBLIC	??1?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
PUBLIC	?Add@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@ABQAU342@@Z ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Add
PUBLIC	?Del@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Del
PUBLIC	?Size@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Size
PUBLIC	?Peek@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Peek
PUBLIC	?Pop@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Pop
PUBLIC	?Clear@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Clear
PUBLIC	?Beginning@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Beginning
PUBLIC	?End@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::End
PUBLIC	??0?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
PUBLIC	??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
PUBLIC	??1?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
PUBLIC	??_7?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ ; DataStructures::BinarySearchTree<NetworkIDNode>::`vftable'
PUBLIC	??_7?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`vftable'
PUBLIC	?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
PUBLIC	?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A ; NetworkIDGenerator::externalPlayerId
PUBLIC	??_7NetworkIDGenerator@@6B@			; NetworkIDGenerator::`vftable'
PUBLIC	?__LINE__Var@?1??SetExternalPlayerID@NetworkIDGenerator@@SAXUPlayerID@@@Z@4JA@c10544b3 ; `NetworkIDGenerator::SetExternalPlayerID'::`2'::__LINE__Var
PUBLIC	??_C@_1FO@GDHNHDHO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAi@ ; `string'
PUBLIC	??_C@_1DO@FONFJDEJ@?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAI?$AAd?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAA?$AAS?$AAS?$AAI?$AAG?$AAN?$AAE?$AAD?$AA_?$AAP?$AAL?$AAA?$AAY?$AAE?$AAR?$AA_?$AAI?$AAD?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetParent@NetworkIDGenerator@@UAEXPAX@Z@4JA ; `NetworkIDGenerator::SetParent'::`2'::__LINE__Var
PUBLIC	??_C@_1EO@IPHFIFCO@?$AAn?$AAo?$AAd?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?9?$AA?$DO?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAP?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?$CB?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?1??GenerateID@NetworkIDGenerator@@IAEXXZ@4JA ; `NetworkIDGenerator::GenerateID'::`2'::__LINE__Var
PUBLIC	??_C@_1CO@EKDMJBHP@?$AAI?$AAs?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAI?$AAD?$AAA?$AAu?$AAt?$AAh?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EO@EECHBJKE@?$AAe?$AAx?$AAt?$AAe?$AAr?$AAn?$AAa?$AAl?$AAP?$AAl?$AAa?$AAy?$AAe?$AAr?$AAI?$AAd?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAA?$AAS?$AAS?$AAI?$AAG?$AAN?$AAE?$AAD?$AA_?$AAP?$AAL?$AAA@ ; `string'
PUBLIC	?__LINE__Var@?1??GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z@4JA@c10544b3 ; `NetworkIDGenerator::GET_OBJECT_FROM_ID'::`2'::__LINE__Var
PUBLIC	??_C@_1EG@OIAKELN@?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$DN?$AAf?$AAa?$AAl@ ; `string'
PUBLIC	?tempnode@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAUnode@23@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode'::`2'::tempnode
PUBLIC	?dummyptr@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAU4@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode'::`2'::dummyptr
PUBLIC	?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
PUBLIC	?parent@?1??FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::FindParent'::`2'::parent
PUBLIC	??_R4NetworkIDGenerator@@6B@			; NetworkIDGenerator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNetworkIDGenerator@@@8			; NetworkIDGenerator `RTTI Type Descriptor'
PUBLIC	??_R3NetworkIDGenerator@@8			; NetworkIDGenerator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NetworkIDGenerator@@8			; NetworkIDGenerator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NetworkIDGenerator@@8		; NetworkIDGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@@8 ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode> `RTTI Type Descriptor'
PUBLIC	??_R3?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8 ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8 ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8 ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8 ; DataStructures::BinarySearchTree<NetworkIDNode>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@8 ; DataStructures::BinarySearchTree<NetworkIDNode> `RTTI Type Descriptor'
PUBLIC	??_R3?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8 ; DataStructures::BinarySearchTree<NetworkIDNode>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8 ; DataStructures::BinarySearchTree<NetworkIDNode>::`RTTI Base Class Array'
PUBLIC	??_R4?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ ; DataStructures::BinarySearchTree<NetworkIDNode>::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	??9PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator!=
EXTRN	??4NetworkID@@QAEAAU0@ABU0@@Z:PROC		; NetworkID::operator=
EXTRN	??8NetworkID@@QBE_NABU0@@Z:PROC			; NetworkID::operator==
EXTRN	??9NetworkID@@QBE_NABU0@@Z:PROC			; NetworkID::operator!=
EXTRN	??ONetworkID@@QBE_NABU0@@Z:PROC			; NetworkID::operator>
EXTRN	??MNetworkID@@QBE_NABU0@@Z:PROC			; NetworkID::operator<
EXTRN	??_E?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z:PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::`vector deleting destructor'
EXTRN	??_E?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z:PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`vector deleting destructor'
EXTRN	??_ENetworkIDGenerator@@UAEPAXI@Z:PROC		; NetworkIDGenerator::`vector deleting destructor'
EXTRN	__wassert:PROC
EXTRN	@_RTC_AllocaHelper@12:PROC
EXTRN	@_RTC_CheckStackVars2@12:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alloca_probe_16:PROC
EXTRN	?peerToPeerMode@NetworkID@@2_NA:BYTE		; NetworkID::peerToPeerMode
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
	ALIGN	4

?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A DB 010H DUP (?) ; NetworkIDGenerator::IDTree
?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A DF 01H DUP (?) ; NetworkIDGenerator::externalPlayerId
_BSS	ENDS
;	COMDAT ?tempnode@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAUnode@23@A
_BSS	SEGMENT
?tempnode@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAUnode@23@A DD 01H DUP (?) ; `DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode'::`2'::tempnode
_BSS	ENDS
;	COMDAT ?dummyptr@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAU4@A
_BSS	SEGMENT
?dummyptr@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAU4@A DD 01H DUP (?) ; `DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode'::`2'::dummyptr
_BSS	ENDS
;	COMDAT ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A
_BSS	SEGMENT
?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A DD 01H DUP (?) ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
_BSS	ENDS
;	COMDAT ?parent@?1??FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@@Z@4PAU423@A
_BSS	SEGMENT
?parent@?1??FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@@Z@4PAU423@A DD 01H DUP (?) ; `DataStructures::BinarySearchTree<NetworkIDNode>::FindParent'::`2'::parent
_BSS	ENDS
CRT$XCU	SEGMENT
?IDTree$initializer$@NetworkIDGenerator@@2P6AXXZA DD FLAT:??__E?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A@@YAXXZ ; NetworkIDGenerator::IDTree$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R4?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@
rdata$r	SEGMENT
??_R4?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ DD 00H ; DataStructures::BinarySearchTree<NetworkIDNode>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@8
	DD	FLAT:??_R3?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	SEGMENT
??_R2?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8 DD FLAT:??_R1A@?0A@EA@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8 ; DataStructures::BinarySearchTree<NetworkIDNode>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	SEGMENT
??_R3?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8 DD 00H ; DataStructures::BinarySearchTree<NetworkIDNode>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@8
data$r	SEGMENT
??_R0?AV?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@8 DD FLAT:??_7type_info@@6B@ ; DataStructures::BinarySearchTree<NetworkIDNode> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@'
	DB	00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8 DD FLAT:??_R0?AV?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@8 ; DataStructures::BinarySearchTree<NetworkIDNode>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8 DD FLAT:??_R0?AV?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@@8 ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	SEGMENT
??_R2?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8 DD FLAT:??_R1A@?0A@EA@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8 ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	SEGMENT
??_R3?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8 DD 00H ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@@8
data$r	SEGMENT
??_R0?AV?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@@8 DD FLAT:??_7type_info@@6B@ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataS'
	DB	'tructures@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@
rdata$r	SEGMENT
??_R4?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ DD 00H ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@@8
	DD	FLAT:??_R3?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NetworkIDGenerator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NetworkIDGenerator@@8 DD FLAT:??_R0?AVNetworkIDGenerator@@@8 ; NetworkIDGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NetworkIDGenerator@@8
rdata$r	ENDS
;	COMDAT ??_R2NetworkIDGenerator@@8
rdata$r	SEGMENT
??_R2NetworkIDGenerator@@8 DD FLAT:??_R1A@?0A@EA@NetworkIDGenerator@@8 ; NetworkIDGenerator::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NetworkIDGenerator@@8
rdata$r	SEGMENT
??_R3NetworkIDGenerator@@8 DD 00H			; NetworkIDGenerator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NetworkIDGenerator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNetworkIDGenerator@@@8
data$r	SEGMENT
??_R0?AVNetworkIDGenerator@@@8 DD FLAT:??_7type_info@@6B@ ; NetworkIDGenerator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNetworkIDGenerator@@', 00H
data$r	ENDS
;	COMDAT ??_R4NetworkIDGenerator@@6B@
rdata$r	SEGMENT
??_R4NetworkIDGenerator@@6B@ DD 00H			; NetworkIDGenerator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNetworkIDGenerator@@@8
	DD	FLAT:??_R3NetworkIDGenerator@@8
rdata$r	ENDS
;	COMDAT ??_C@_1EG@OIAKELN@?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$DN?$AAf?$AAa?$AAl@
CONST	SEGMENT
??_C@_1EG@OIAKELN@?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$DN?$AAf?$AAa?$AAl@ DB 'o'
	DB	00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, '(', 00H, ')'
	DB	00H, '=', 00H, '=', 00H, 'f', 00H, 'a', 00H, 'l', 00H, 's', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z@4JA@c10544b3
_DATA	SEGMENT
?__LINE__Var@?1??GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z@4JA@c10544b3 DD 0106H ; `NetworkIDGenerator::GET_OBJECT_FROM_ID'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EO@EECHBJKE@?$AAe?$AAx?$AAt?$AAe?$AAr?$AAn?$AAa?$AAl?$AAP?$AAl?$AAa?$AAy?$AAe?$AAr?$AAI?$AAd?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAA?$AAS?$AAS?$AAI?$AAG?$AAN?$AAE?$AAD?$AA_?$AAP?$AAL?$AAA@
CONST	SEGMENT
??_C@_1EO@EECHBJKE@?$AAe?$AAx?$AAt?$AAe?$AAr?$AAn?$AAa?$AAl?$AAP?$AAl?$AAa?$AAy?$AAe?$AAr?$AAI?$AAd?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAA?$AAS?$AAS?$AAI?$AAG?$AAN?$AAE?$AAD?$AA_?$AAP?$AAL?$AAA@ DB 'e'
	DB	00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, 'P', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r'
	DB	00H, 'I', 00H, 'd', 00H, '!', 00H, '=', 00H, 'U', 00H, 'N', 00H
	DB	'A', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'G', 00H, 'N', 00H, 'E'
	DB	00H, 'D', 00H, '_', 00H, 'P', 00H, 'L', 00H, 'A', 00H, 'Y', 00H
	DB	'E', 00H, 'R', 00H, '_', 00H, 'I', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@EKDMJBHP@?$AAI?$AAs?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAI?$AAD?$AAA?$AAu?$AAt?$AAh?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@EKDMJBHP@?$AAI?$AAs?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAI?$AAD?$AAA?$AAu?$AAt?$AAh?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'I'
	DB	00H, 's', 00H, 'N', 00H, 'e', 00H, 't', 00H, 'w', 00H, 'o', 00H
	DB	'r', 00H, 'k', 00H, 'I', 00H, 'D', 00H, 'A', 00H, 'u', 00H, 't'
	DB	00H, 'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GenerateID@NetworkIDGenerator@@IAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GenerateID@NetworkIDGenerator@@IAEXXZ@4JA DD 0e1H ; `NetworkIDGenerator::GenerateID'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EO@IPHFIFCO@?$AAn?$AAo?$AAd?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?9?$AA?$DO?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAP?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?$CB?$AA?$DN@
CONST	SEGMENT
??_C@_1EO@IPHFIFCO@?$AAn?$AAo?$AAd?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?9?$AA?$DO?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAP?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?$CB?$AA?$DN@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, '-', 00H, '>', 00H, 'o', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '-', 00H, '>', 00H, 'G', 00H
	DB	'e', 00H, 't', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, '(', 00H, ')', 00H, '!', 00H, '=', 00H, 'p', 00H
	DB	'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetParent@NetworkIDGenerator@@UAEXPAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetParent@NetworkIDGenerator@@UAEXPAX@Z@4JA DD 0b8H ; `NetworkIDGenerator::SetParent'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@FONFJDEJ@?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAI?$AAd?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAA?$AAS?$AAS?$AAI?$AAG?$AAN?$AAE?$AAD?$AA_?$AAP?$AAL?$AAA?$AAY?$AAE?$AAR?$AA_?$AAI?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@FONFJDEJ@?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAI?$AAd?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAA?$AAS?$AAS?$AAI?$AAG?$AAN?$AAE?$AAD?$AA_?$AAP?$AAL?$AAA?$AAY?$AAE?$AAR?$AA_?$AAI?$AAD?$AA?$AA@ DB 'p'
	DB	00H, 'l', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, 'I', 00H
	DB	'd', 00H, '!', 00H, '=', 00H, 'U', 00H, 'N', 00H, 'A', 00H, 'S'
	DB	00H, 'S', 00H, 'I', 00H, 'G', 00H, 'N', 00H, 'E', 00H, 'D', 00H
	DB	'_', 00H, 'P', 00H, 'L', 00H, 'A', 00H, 'Y', 00H, 'E', 00H, 'R'
	DB	00H, '_', 00H, 'I', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GDHNHDHO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAi@
CONST	SEGMENT
??_C@_1FO@GDHNHDHO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAi@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'n', 00H, 'e', 00H, 't'
	DB	00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, 'i', 00H, 'd', 00H
	DB	'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetExternalPlayerID@NetworkIDGenerator@@SAXUPlayerID@@@Z@4JA@c10544b3
_DATA	SEGMENT
?__LINE__Var@?1??SetExternalPlayerID@NetworkIDGenerator@@SAXUPlayerID@@@Z@4JA@c10544b3 DD 07fH ; `NetworkIDGenerator::SetExternalPlayerID'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7NetworkIDGenerator@@6B@
CONST	SEGMENT
??_7NetworkIDGenerator@@6B@ DD FLAT:??_R4NetworkIDGenerator@@6B@ ; NetworkIDGenerator::`vftable'
	DD	FLAT:??_ENetworkIDGenerator@@UAEPAXI@Z
	DD	FLAT:?GetNetworkID@NetworkIDGenerator@@UAE?AUNetworkID@@XZ
	DD	FLAT:?SetNetworkID@NetworkIDGenerator@@UAEXUNetworkID@@@Z
	DD	FLAT:?SetParent@NetworkIDGenerator@@UAEXPAX@Z
	DD	FLAT:?GetParent@NetworkIDGenerator@@UBEPAXXZ
	DD	FLAT:__purecall
	DD	FLAT:?RequiresSetParent@NetworkIDGenerator@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@
CONST	SEGMENT
??_7?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ DD FLAT:??_R4?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`vftable'
	DD	FLAT:??_E?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@
CONST	SEGMENT
??_7?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ DD FLAT:??_R4?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@ ; DataStructures::BinarySearchTree<NetworkIDNode>::`vftable'
	DD	FLAT:??_E?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ$0
__ehfuncinfo$??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ$0
__ehfuncinfo$??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z$0
__ehfuncinfo$?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z$2
__ehfuncinfo$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetParent@NetworkIDGenerator@@UAEXPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetParent@NetworkIDGenerator@@UAEXPAX@Z$0
__ehfuncinfo$?SetParent@NetworkIDGenerator@@UAEXPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetParent@NetworkIDGenerator@@UAEXPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?externalPlayerId$initializer$@NetworkIDGenerator@@0P6AXXZA DD FLAT:??__E?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A@@YAXXZ ; NetworkIDGenerator::externalPlayerId$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ PROC ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ENDP ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ PROC ; DataStructures::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>, COMDAT
; _this$ = ecx

; 361  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 362  : 		this->Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Clear

; 363  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
__ehhandler$??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ENDP ; DataStructures::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ??0?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ PROC ; DataStructures::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>, COMDAT
; _this$ = ecx

; 222  : 		LinkedList()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ENDP ; DataStructures::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ?End@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?End@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::End, COMDAT
; _this$ = ecx

; 249  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 250  : 		if ( this->root )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@End

; 251  : 			this->position = this->root->previous;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax
$LN2@End:

; 252  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?End@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::End
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ?Beginning@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Beginning@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Beginning, COMDAT
; _this$ = ecx

; 242  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 		if ( this->root )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Beginning

; 244  : 			this->position = this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN2@Beginning:

; 245  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Beginning@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Beginning
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ?Clear@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_temp$3 = -32						; size = 4
_current$4 = -20					; size = 4
_this$ = -8						; size = 4
?Clear@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Clear, COMDAT
; _this$ = ecx

; 959  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 960  : 		if ( this->list_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@Clear

; 961  : 			return ;

	jmp	SHORT $LN8@Clear

; 962  : 		else

	jmp	SHORT $LN6@Clear
$LN7@Clear:

; 963  : 			if ( this->list_size == 1 )  // {delete root->item; delete root;}

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN5@Clear

; 964  : 			{
; 965  : 				delete this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 966  : 			}
; 967  : 
; 968  : 			else

	jmp	SHORT $LN6@Clear
$LN5@Clear:

; 969  : 			{
; 970  : 				node* current;
; 971  : 				node* temp;
; 972  : 
; 973  : 				current = this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _current$4[ebp], ecx
$LN3@Clear:

; 974  : 
; 975  : 				do
; 976  : 				{
; 977  : 					temp = current;

	mov	eax, DWORD PTR _current$4[ebp]
	mov	DWORD PTR _temp$3[ebp], eax

; 978  : 					current = current->next;

	mov	eax, DWORD PTR _current$4[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _current$4[ebp], ecx

; 979  : 					// delete temp->item;
; 980  : 					delete temp;

	mov	eax, DWORD PTR _temp$3[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 981  : 				}
; 982  : 
; 983  : 				while ( current != this->root );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _current$4[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Clear
$LN6@Clear:

; 984  : 			}
; 985  : 
; 986  : 			this->list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 987  : 			this->root = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 988  : 			this->position = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN8@Clear:

; 989  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ?Pop@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ
_TEXT	SEGMENT
_element$ = -20						; size = 4
_this$ = -8						; size = 4
?Pop@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Pop, COMDAT
; _this$ = ecx

; 894  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 895  : 		CircularLinkedListType element;
; 896  : 		element = Peek();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Peek@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Peek
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _element$[ebp], eax

; 897  : 		Del();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Del@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Del

; 898  : 		return CircularLinkedListType( element ); // return temporary

	mov	eax, DWORD PTR _element$[ebp]

; 899  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ?Peek@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Peek@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Peek, COMDAT
; _this$ = ecx

; 887  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 888  : 		// return *(position->item);
; 889  : 		return this->position->item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 890  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Peek@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Peek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ?Size@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Size, COMDAT
; _this$ = ecx

; 881  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 882  : 		return this->list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 883  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ?Del@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_position$ = -20					; size = 4
_this$ = -8						; size = 4
?Del@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Del, COMDAT
; _this$ = ecx

; 785  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 786  : 		node * new_position;
; 787  : 
; 788  : 		if ( this->list_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@Del

; 789  : 			return ;

	jmp	$LN6@Del

; 790  : 
; 791  : 		else

	jmp	$LN6@Del
$LN5@Del:

; 792  : 			if ( this->list_size == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@Del

; 793  : 			{
; 794  : 				// delete root->item;
; 795  : 				delete this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 796  : 				this->root = this->position = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 797  : 				this->list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 798  : 			}
; 799  : 
; 800  : 			else

	jmp	SHORT $LN6@Del
$LN3@Del:

; 801  : 			{
; 802  : 				( this->position->previous ) ->next = this->position->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 803  : 				( this->position->next ) ->previous = this->position->previous;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 804  : 				new_position = this->position->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _new_position$[ebp], edx

; 805  : 
; 806  : 				if ( this->position == this->root )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@Del

; 807  : 					this->root = new_position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_position$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN1@Del:

; 808  : 
; 809  : 				// delete position->item;
; 810  : 				delete this->position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 811  : 
; 812  : 				this->position = new_position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_position$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 813  : 
; 814  : 				this->list_size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN6@Del:

; 815  : 			}
; 816  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Del@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ?Add@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@ABQAU342@@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_new_node$ = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Add@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@ABQAU342@@Z PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Add, COMDAT
; _this$ = ecx

; 701  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 702  : 		node * new_node;
; 703  : 
; 704  : 		if ( this->list_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@Add

; 705  : 		{
; 706  : 			this->root = new typename CircularLinkedList::node;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+4], ecx

; 707  : 			// root->item = new CircularLinkedListType;
; 708  : 			// *(root->item)=input;
; 709  : 			this->root->item = input;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 710  : 			this->root->next = this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+8], eax

; 711  : 			this->root->previous = this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 712  : 			this->list_size = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1

; 713  : 			this->position = this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 714  : 			// return *(position->item);
; 715  : 			return this->position->item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	$LN5@Add

; 716  : 		}
; 717  : 
; 718  : 		else

	jmp	$LN5@Add
$LN4@Add:

; 719  : 			if ( list_size == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN2@Add

; 720  : 			{
; 721  : 				this->position = new typename CircularLinkedList::node;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+8], ecx

; 722  : 				// position->item = new CircularLinkedListType;
; 723  : 				this->root->next = this->position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 724  : 				this->root->previous = this->position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+4], eax

; 725  : 				this->position->previous = this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 726  : 				this->position->next = this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+8], eax

; 727  : 				// *(position->item)=input;
; 728  : 				this->position->item = input;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _input$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 729  : 				this->list_size = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 2

; 730  : 				this->position = this->root; // Don't move the position from the root

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 731  : 				// return *(position->item);
; 732  : 				return this->position->item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN5@Add

; 733  : 			}
; 734  : 
; 735  : 			else

	jmp	SHORT $LN5@Add
$LN2@Add:

; 736  : 			{
; 737  : 				/*
; 738  : 
; 739  : 				   B
; 740  : 			       |
; 741  : 				A --- C
; 742  : 
; 743  : 				new_node=B
; 744  : 				position=A
; 745  : 				position->next=C
; 746  : 
; 747  : 				Note that the order of the following statements is important  */
; 748  : 
; 749  : 				new_node = new typename CircularLinkedList::node;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _new_node$[ebp], eax

; 750  : 				// new_node->item = new CircularLinkedListType;
; 751  : 
; 752  : 				// *(new_node->item)=input;
; 753  : 				new_node->item = input;

	mov	eax, DWORD PTR _new_node$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 754  : 
; 755  : 				// Point last of B to A
; 756  : 				new_node->previous = this->position;

	mov	eax, DWORD PTR _new_node$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx

; 757  : 
; 758  : 				// Point next of B to C
; 759  : 				new_node->next = ( this->position->next );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _new_node$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax

; 760  : 
; 761  : 				// Point last of C to B
; 762  : 				( this->position->next ) ->previous = new_node;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _new_node$[ebp]
	mov	DWORD PTR [edx+4], eax

; 763  : 
; 764  : 				// Point next of A to B
; 765  : 				( this->position->next ) = new_node;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _new_node$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 766  : 
; 767  : 				// Increase the recorded size of the list by one
; 768  : 				this->list_size++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 769  : 
; 770  : 				// return *(new_node->item);
; 771  : 				return new_node->item;

	mov	eax, DWORD PTR _new_node$[ebp]
$LN5@Add:

; 772  : 			}
; 773  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@ABQAU342@@Z ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ??1?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>, COMDAT
; _this$ = ecx

; 355  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  : 		this->Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Clear

; 357  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::~CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_linkedlist.h
;	COMDAT ??0?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ PROC ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>, COMDAT
; _this$ = ecx

; 347  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 348  : 		this->root = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 349  : 		this->position = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 350  : 		this->list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 351  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ENDP ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queuelinkedlist.h
;	COMDAT ?Size@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ PROC ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Size, COMDAT
; _this$ = ecx

; 56   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 		return data.Size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Size

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ ENDP ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queuelinkedlist.h
;	COMDAT ?Push@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXABQAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Push@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXABQAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z PROC ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Push, COMDAT
; _this$ = ecx

; 83   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 		data.End();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?End@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::End

; 85   : 		data.Add( input );

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEAAPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@ABQAU342@@Z ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Add

; 86   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXABQAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ENDP ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queuelinkedlist.h
;	COMDAT ?Pop@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Pop@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ PROC ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Pop, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		data.Beginning();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Beginning@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXXZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Beginning

; 64   : 		return ( QueueType ) data.Pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Pop@?$CircularLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ; DataStructures::CircularLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Pop

; 65   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ENDP ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queuelinkedlist.h
;	COMDAT ??0?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ PROC ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>, COMDAT
; _this$ = ecx

; 51   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$LinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::LinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>

; 52   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ENDP ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?GET_OBJECT_FROM_ID@@YAPAXUNetworkID@@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 8
?GET_OBJECT_FROM_ID@@YAPAXUNetworkID@@@Z PROC		; GET_OBJECT_FROM_ID, COMDAT

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 285  : 	return NetworkIDGenerator::GET_OBJECT_FROM_ID( x );

	mov	eax, DWORD PTR _x$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z ; NetworkIDGenerator::GET_OBJECT_FROM_ID
	add	esp, 8

; 286  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GET_OBJECT_FROM_ID@@YAPAXUNetworkID@@@Z ENDP		; GET_OBJECT_FROM_ID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??__E?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A@@YAXXZ
text$di	SEGMENT
??__E?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A@@YAXXZ PROC ; `dynamic initializer for 'NetworkIDGenerator::externalPlayerId'', COMDAT

; 34   : PlayerID NetworkIDGenerator::externalPlayerId=UNASSIGNED_PLAYER_ID;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _UNASSIGNED_PLAYER_ID
	mov	DWORD PTR ?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A, eax
	mov	cx, WORD PTR _UNASSIGNED_PLAYER_ID+4
	mov	WORD PTR ?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A+4, cx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A@@YAXXZ ENDP ; `dynamic initializer for 'NetworkIDGenerator::externalPlayerId''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A@@YAXXZ
text$yd	SEGMENT
??__F?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'NetworkIDGenerator::IDTree'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::~AVLBalancedBinarySearchTree<NetworkIDNode>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'NetworkIDGenerator::IDTree''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??__E?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A@@YAXXZ
text$di	SEGMENT
??__E?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A@@YAXXZ PROC ; `dynamic initializer for 'NetworkIDGenerator::IDTree'', COMDAT

; 33   : DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode> NetworkIDGenerator::IDTree;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	??0?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::AVLBalancedBinarySearchTree<NetworkIDNode>
	push	OFFSET ??__F?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A@@YAXXZ ; `dynamic atexit destructor for 'NetworkIDGenerator::IDTree''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A@@YAXXZ ENDP ; `dynamic initializer for 'NetworkIDGenerator::IDTree''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GNetworkIDGenerator@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GNetworkIDGenerator@@UAEPAXI@Z PROC			; NetworkIDGenerator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NetworkIDGenerator@@UAE@XZ		; NetworkIDGenerator::~NetworkIDGenerator
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GNetworkIDGenerator@@UAEPAXI@Z ENDP			; NetworkIDGenerator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?GenerateID@NetworkIDGenerator@@IAEXXZ
_TEXT	SEGMENT
$T1 = -252						; size = 12
$T2 = -232						; size = 12
_collision$ = -20					; size = 4
_this$ = -8						; size = 4
?GenerateID@NetworkIDGenerator@@IAEXXZ PROC		; NetworkIDGenerator::GenerateID, COMDAT
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 	assert(IsNetworkIDAuthority());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@GenerateID
	mov	edx, DWORD PTR ?__LINE__Var@?1??GenerateID@NetworkIDGenerator@@IAEXXZ@4JA
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_1FO@GDHNHDHO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAi@
	push	OFFSET ??_C@_1CO@EKDMJBHP@?$AAI?$AAs?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAI?$AAD?$AAA?$AAu?$AAt?$AAh?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GenerateID:

; 227  : 
; 228  : 	NetworkIDNode* collision;
; 229  : 	do
; 230  : 	{
; 231  : 		networkID.localSystemId=staticItemID++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR ?staticItemID@NetworkIDGenerator@@0GA ; NetworkIDGenerator::staticItemID
	mov	WORD PTR [eax+10], cx
	mov	dx, WORD PTR ?staticItemID@NetworkIDGenerator@@0GA ; NetworkIDGenerator::staticItemID
	add	dx, 1
	mov	WORD PTR ?staticItemID@NetworkIDGenerator@@0GA, dx ; NetworkIDGenerator::staticItemID

; 232  : 		if (NetworkID::peerToPeerMode)

	movzx	eax, BYTE PTR ?peerToPeerMode@NetworkID@@2_NA ; NetworkID::peerToPeerMode
	test	eax, eax
	je	SHORT $LN1@GenerateID

; 233  : 		{
; 234  : 			 // If this assert hits you forgot to call SetExternalPlayerID
; 235  : 			assert(externalPlayerId!=UNASSIGNED_PLAYER_ID);

	push	OFFSET _UNASSIGNED_PLAYER_ID
	mov	ecx, OFFSET ?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A ; NetworkIDGenerator::externalPlayerId
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@GenerateID
	mov	ecx, DWORD PTR ?__LINE__Var@?1??GenerateID@NetworkIDGenerator@@IAEXXZ@4JA
	add	ecx, 10					; 0000000aH
	push	ecx
	push	OFFSET ??_C@_1FO@GDHNHDHO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAi@
	push	OFFSET ??_C@_1EO@EECHBJKE@?$AAe?$AAx?$AAt?$AAe?$AAr?$AAn?$AAa?$AAl?$AAP?$AAl?$AAa?$AAy?$AAe?$AAr?$AAI?$AAd?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAA?$AAS?$AAS?$AAI?$AAG?$AAN?$AAE?$AAD?$AA_?$AAP?$AAL?$AAA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@GenerateID:

; 236  : 			networkID.playerId=externalPlayerId;

	push	OFFSET ?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A ; NetworkIDGenerator::externalPlayerId
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=
$LN1@GenerateID:

; 237  : 		}
; 238  : 		collision = NetworkIDGenerator::IDTree.GetPointerToNode( NetworkIDNode( ( networkID ), 0 ) );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU3@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _collision$[ebp], eax

; 239  : 	}
; 240  : 	while ( collision );

	cmp	DWORD PTR _collision$[ebp], 0
	jne	$LN4@GenerateID

; 241  : 
; 242  : 	IDTree.Add( NetworkIDNode( networkID, this ) );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?Add@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Add

; 243  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateID@NetworkIDGenerator@@IAEXXZ ENDP		; NetworkIDGenerator::GenerateID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z
_TEXT	SEGMENT
_object$ = -8						; size = 4
_x$ = 8							; size = 8
?GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z PROC ; NetworkIDGenerator::GET_OBJECT_FROM_ID, COMDAT

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 263  : 	NetworkIDGenerator *object = (NetworkIDGenerator *) GET_BASE_OBJECT_FROM_ID( x );

	mov	eax, DWORD PTR _x$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?GET_BASE_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z ; NetworkIDGenerator::GET_BASE_OBJECT_FROM_ID
	add	esp, 8
	mov	DWORD PTR _object$[ebp], eax

; 264  : 	if (object)

	cmp	DWORD PTR _object$[ebp], 0
	je	SHORT $LN3@GET_OBJECT

; 265  : 	{
; 266  : 		if (object->GetParent())

	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@GET_OBJECT

; 267  : 		{
; 268  : 			return object->GetParent();

	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN4@GET_OBJECT

; 269  : 		}
; 270  : 		else

	jmp	SHORT $LN3@GET_OBJECT
$LN2@GET_OBJECT:

; 271  : 		{
; 272  : #ifdef _DEBUG
; 273  : 			// If this assert hit then this object requires a call to SetParent and it never got one.
; 274  : 			assert(object->RequiresSetParent()==false);

	mov	eax, DWORD PTR _object$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _object$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@GET_OBJECT
	mov	edx, DWORD PTR ?__LINE__Var@?1??GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z@4JA@c10544b3
	add	edx, 12					; 0000000cH
	push	edx
	push	OFFSET ??_C@_1FO@GDHNHDHO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAi@
	push	OFFSET ??_C@_1EG@OIAKELN@?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAs?$AAS?$AAe?$AAt?$AAP?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$DN?$AAf?$AAa?$AAl@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@GET_OBJECT:

; 275  : #endif
; 276  : 			return object;

	mov	eax, DWORD PTR _object$[ebp]
	jmp	SHORT $LN4@GET_OBJECT
$LN3@GET_OBJECT:

; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	return 0;

	xor	eax, eax
$LN4@GET_OBJECT:

; 281  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GET_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z ENDP ; NetworkIDGenerator::GET_OBJECT_FROM_ID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?GET_BASE_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z
_TEXT	SEGMENT
$T1 = -220						; size = 12
_n$ = -8						; size = 4
_x$ = 8							; size = 8
?GET_BASE_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z PROC ; NetworkIDGenerator::GET_BASE_OBJECT_FROM_ID, COMDAT

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 248  : 	if ( x == UNASSIGNED_NETWORK_ID )

	push	OFFSET _UNASSIGNED_NETWORK_ID
	lea	ecx, DWORD PTR _x$[ebp]
	call	??8NetworkID@@QBE_NABU0@@Z		; NetworkID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GET_BASE_O

; 249  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@GET_BASE_O
$LN2@GET_BASE_O:

; 250  : 
; 251  : 	NetworkIDNode *n = NetworkIDGenerator::IDTree.GetPointerToNode( NetworkIDNode( ( x ), 0 ) );

	push	0
	mov	eax, DWORD PTR _x$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU3@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _n$[ebp], edx

; 252  : 
; 253  : 	if ( n )

	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN1@GET_BASE_O

; 254  : 	{
; 255  : 		return n->object;

	mov	eax, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN3@GET_BASE_O
$LN1@GET_BASE_O:

; 256  : 	}
; 257  : 
; 258  : 	return 0;

	xor	eax, eax
$LN3@GET_BASE_O:

; 259  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GET_BASE_OBJECT_FROM_ID@NetworkIDGenerator@@SAPAXUNetworkID@@@Z ENDP ; NetworkIDGenerator::GET_BASE_OBJECT_FROM_ID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?RequiresSetParent@NetworkIDGenerator@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RequiresSetParent@NetworkIDGenerator@@UBE_NXZ PROC	; NetworkIDGenerator::RequiresSetParent, COMDAT
; _this$ = ecx

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 	return false;

	xor	al, al

; 141  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RequiresSetParent@NetworkIDGenerator@@UBE_NXZ ENDP	; NetworkIDGenerator::RequiresSetParent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?GetExternalPlayerID@NetworkIDGenerator@@SA?AUPlayerID@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetExternalPlayerID@NetworkIDGenerator@@SA?AUPlayerID@@XZ PROC ; NetworkIDGenerator::GetExternalPlayerID, COMDAT

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 134  : 	return externalPlayerId;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR ?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR ?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A+4
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetExternalPlayerID@NetworkIDGenerator@@SA?AUPlayerID@@XZ ENDP ; NetworkIDGenerator::GetExternalPlayerID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?SetExternalPlayerID@NetworkIDGenerator@@SAXUPlayerID@@@Z
_TEXT	SEGMENT
_playerId$ = 8						; size = 6
?SetExternalPlayerID@NetworkIDGenerator@@SAXUPlayerID@@@Z PROC ; NetworkIDGenerator::SetExternalPlayerID, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 128  : 	assert(playerId!=UNASSIGNED_PLAYER_ID);

	push	OFFSET _UNASSIGNED_PLAYER_ID
	lea	ecx, DWORD PTR _playerId$[ebp]
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@SetExterna
	mov	ecx, DWORD PTR ?__LINE__Var@?1??SetExternalPlayerID@NetworkIDGenerator@@SAXUPlayerID@@@Z@4JA@c10544b3
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_1FO@GDHNHDHO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAi@
	push	OFFSET ??_C@_1DO@FONFJDEJ@?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAI?$AAd?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAA?$AAS?$AAS?$AAI?$AAG?$AAN?$AAE?$AAD?$AA_?$AAP?$AAL?$AAA?$AAY?$AAE?$AAR?$AA_?$AAI?$AAD?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@SetExterna:

; 129  : 	externalPlayerId=playerId;

	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	mov	ecx, OFFSET ?externalPlayerId@NetworkIDGenerator@@0UPlayerID@@A ; NetworkIDGenerator::externalPlayerId
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 130  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetExternalPlayerID@NetworkIDGenerator@@SAXUPlayerID@@@Z ENDP ; NetworkIDGenerator::SetExternalPlayerID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?SetStaticNetworkID@NetworkIDGenerator@@SAXG@Z
_TEXT	SEGMENT
_i$ = 8							; size = 2
?SetStaticNetworkID@NetworkIDGenerator@@SAXG@Z PROC	; NetworkIDGenerator::SetStaticNetworkID, COMDAT

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 122  : 	staticItemID = i;

	mov	ax, WORD PTR _i$[ebp]
	mov	WORD PTR ?staticItemID@NetworkIDGenerator@@0GA, ax ; NetworkIDGenerator::staticItemID

; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetStaticNetworkID@NetworkIDGenerator@@SAXG@Z ENDP	; NetworkIDGenerator::SetStaticNetworkID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?GetStaticNetworkID@NetworkIDGenerator@@SAGXZ
_TEXT	SEGMENT
?GetStaticNetworkID@NetworkIDGenerator@@SAGXZ PROC	; NetworkIDGenerator::GetStaticNetworkID, COMDAT

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 115  : 	return staticItemID;

	mov	ax, WORD PTR ?staticItemID@NetworkIDGenerator@@0GA ; NetworkIDGenerator::staticItemID

; 116  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStaticNetworkID@NetworkIDGenerator@@SAGXZ ENDP	; NetworkIDGenerator::GetStaticNetworkID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::~AVLBalancedBinarySearchTree<NetworkIDNode>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?LeftHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
_A$ = 8							; size = 4
?LeftHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::LeftHigher, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		if ( A == 0 )

	cmp	DWORD PTR _A$[ebp], 0
	jne	SHORT $LN1@LeftHigher

; 245  : 			return false;

	xor	al, al
	jmp	SHORT $LN2@LeftHigher
$LN1@LeftHigher:

; 246  : 			
; 247  : 		return Height( A->left ) > Height( A->right );

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Height
	mov	esi, eax
	mov	edx, DWORD PTR _A$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Height
	cmp	esi, eax
	jbe	SHORT $LN4@LeftHigher
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN5@LeftHigher
$LN4@LeftHigher:
	mov	DWORD PTR tv82[ebp], 0
$LN5@LeftHigher:
	mov	al, BYTE PTR tv82[ebp]
$LN2@LeftHigher:

; 248  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?LeftHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::LeftHigher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?RightHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
_A$ = 8							; size = 4
?RightHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RightHigher, COMDAT
; _this$ = ecx

; 234  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 235  : 		if ( A == 0 )

	cmp	DWORD PTR _A$[ebp], 0
	jne	SHORT $LN1@RightHighe

; 236  : 			return false;

	xor	al, al
	jmp	SHORT $LN2@RightHighe
$LN1@RightHighe:

; 237  : 			
; 238  : 		return Height( A->right ) > Height( A->left );

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Height
	mov	esi, eax
	mov	edx, DWORD PTR _A$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Height
	cmp	esi, eax
	jbe	SHORT $LN4@RightHighe
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN5@RightHighe
$LN4@RightHighe:
	mov	DWORD PTR tv82[ebp], 0
$LN5@RightHighe:
	mov	al, BYTE PTR tv82[ebp]
$LN2@RightHighe:

; 239  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RightHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RightHigher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?DoubleRotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_A$ = 8							; size = 4
?DoubleRotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::DoubleRotateLeft, COMDAT
; _this$ = ecx

; 372  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 373  : 		// The left side of the right child must be higher for the tree to balance with a left rotation.  If it isn't, rotate it right before the normal rotation so it is.
; 374  : 		RotateRight( A->right->left );

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateRight

; 375  : 		RotateLeft( A->right );

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateLeft

; 376  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DoubleRotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::DoubleRotateLeft
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?DoubleRotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_A$ = 8							; size = 4
?DoubleRotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::DoubleRotateRight, COMDAT
; _this$ = ecx

; 308  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 309  : 		// The left side of the left child must be higher for the tree to balance with a right rotation.  If it isn't, rotate it left before the normal rotation so it is.
; 310  : 		RotateLeft( A->left->right );

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateLeft

; 311  : 		RotateRight( A->left );

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateRight

; 312  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DoubleRotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::DoubleRotateRight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?RotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z
_TEXT	SEGMENT
_D$ = -44						; size = 4
_B$ = -32						; size = 4
_A$ = -20						; size = 4
_this$ = -8						; size = 4
_C$ = 8							; size = 4
?RotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateLeft, COMDAT
; _this$ = ecx

; 316  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 317  : 		typename BinarySearchTree<BinarySearchTreeType>::node * A, *B, *D;
; 318  : 		/*
; 319  : 		  RIGHT ROTATION
; 320  : 		
; 321  : 		  A = parent(b)
; 322  : 		  b= parent(c)
; 323  : 		  c  = node to rotate around
; 324  : 		
; 325  : 		  A
; 326  : 		  | // Either direction
; 327  : 		  B
; 328  : 		  /   \
; 329  : 		  C
; 330  : 		  /  \
; 331  : 		  D
; 332  : 		
; 333  : 		  TO
; 334  : 		
; 335  : 		  A
; 336  : 		  | // Either Direction
; 337  : 		  C
; 338  : 		  /   \
; 339  : 		  B
; 340  : 		  /   \
; 341  : 		  D
; 342  : 		
; 343  : 		
; 344  : 		  <Leave all other branches branches AS-IS whether they point to another node or simply 0>
; 345  : 		
; 346  : 		*/
; 347  : 		
; 348  : 		B = FindParent( *( C->item ) );

	mov	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _B$[ebp], edx

; 349  : 		A = FindParent( *( B->item ) );

	mov	eax, DWORD PTR _B$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _A$[ebp], edx

; 350  : 		D = C->left;

	mov	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _D$[ebp], ecx

; 351  : 		
; 352  : 		if ( A )

	cmp	DWORD PTR _A$[ebp], 0
	je	SHORT $LN4@RotateLeft

; 353  : 		{
; 354  : 			// Direction was set by the last find_parent call
; 355  : 			
; 356  : 			if ( this->direction == this->LEFT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	SHORT $LN3@RotateLeft

; 357  : 				A->left = C;

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR _C$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 358  : 			else

	jmp	SHORT $LN2@RotateLeft
$LN3@RotateLeft:

; 359  : 				A->right = C;

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR _C$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@RotateLeft:

; 360  : 		}
; 361  : 		
; 362  : 		else

	jmp	SHORT $LN1@RotateLeft
$LN4@RotateLeft:

; 363  : 			this->root = C;  // If B has no parent parent then B must have been the root node

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _C$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN1@RotateLeft:

; 364  : 			
; 365  : 		B->right = D;

	mov	eax, DWORD PTR _B$[ebp]
	mov	ecx, DWORD PTR _D$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 366  : 		
; 367  : 		C->left = B;

	mov	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _B$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 368  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateLeft
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?RotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z
_TEXT	SEGMENT
_D$ = -44						; size = 4
_B$ = -32						; size = 4
_A$ = -20						; size = 4
_this$ = -8						; size = 4
_C$ = 8							; size = 4
?RotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateRight, COMDAT
; _this$ = ecx

; 252  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 		typename BinarySearchTree<BinarySearchTreeType>::node * A, *B, *D;
; 254  : 		/*
; 255  : 		  RIGHT ROTATION
; 256  : 		
; 257  : 		  A = parent(b)
; 258  : 		  b= parent(c)
; 259  : 		  c  = node to rotate around
; 260  : 		
; 261  : 		  A
; 262  : 		  | // Either direction
; 263  : 		  B
; 264  : 		  /   \
; 265  : 		  C
; 266  : 		  /   \
; 267  : 		  D
; 268  : 		
; 269  : 		  TO
; 270  : 		
; 271  : 		  A
; 272  : 		  | // Either Direction
; 273  : 		  C
; 274  : 		  /   \
; 275  : 		  B
; 276  : 		  /   \
; 277  : 		  D
; 278  : 		
; 279  : 		
; 280  : 		  <Leave all other branches branches AS-IS whether they point to another node or simply 0>
; 281  : 		
; 282  : 		*/
; 283  : 		
; 284  : 		B = FindParent( *( C->item ) );

	mov	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _B$[ebp], edx

; 285  : 		A = FindParent( *( B->item ) );

	mov	eax, DWORD PTR _B$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _A$[ebp], edx

; 286  : 		D = C->right;

	mov	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _D$[ebp], ecx

; 287  : 		
; 288  : 		if ( A )

	cmp	DWORD PTR _A$[ebp], 0
	je	SHORT $LN4@RotateRigh

; 289  : 		{
; 290  : 			// Direction was set by the last find_parent call
; 291  : 			
; 292  : 			if ( this->direction == this->LEFT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	SHORT $LN3@RotateRigh

; 293  : 				A->left = C;

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR _C$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 294  : 			else

	jmp	SHORT $LN2@RotateRigh
$LN3@RotateRigh:

; 295  : 				A->right = C;

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR _C$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@RotateRigh:

; 296  : 		}
; 297  : 		
; 298  : 		else

	jmp	SHORT $LN1@RotateRigh
$LN4@RotateRigh:

; 299  : 			this->root = C;  // If B has no parent parent then B must have been the root node

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _C$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN1@RotateRigh:

; 300  : 			
; 301  : 		B->left = D;

	mov	eax, DWORD PTR _B$[ebp]
	mov	ecx, DWORD PTR _D$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 302  : 		
; 303  : 		C->right = B;

	mov	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _B$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 304  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateRight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?BalanceTree@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@_N@Z
_TEXT	SEGMENT
_right_height$ = -32					; size = 4
_left_height$ = -20					; size = 4
_this$ = -8						; size = 4
_current$ = 8						; size = 4
_rotateOnce$ = 12					; size = 1
?BalanceTree@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@_N@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::BalanceTree, COMDAT
; _this$ = ecx

; 170  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN16@BalanceTre:

; 171  : 		int left_height, right_height;
; 172  : 		
; 173  : 		while ( current )

	cmp	DWORD PTR _current$[ebp], 0
	je	$LN17@BalanceTre

; 174  : 		{
; 175  : 			if ( current->left == 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN14@BalanceTre

; 176  : 				left_height = 0;

	mov	DWORD PTR _left_height$[ebp], 0

; 177  : 			else

	jmp	SHORT $LN13@BalanceTre
$LN14@BalanceTre:

; 178  : 				left_height = Height( current->left );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Height
	mov	DWORD PTR _left_height$[ebp], eax
$LN13@BalanceTre:

; 179  : 				
; 180  : 			if ( current->right == 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN12@BalanceTre

; 181  : 				right_height = 0;

	mov	DWORD PTR _right_height$[ebp], 0

; 182  : 			else

	jmp	SHORT $LN11@BalanceTre
$LN12@BalanceTre:

; 183  : 				right_height = Height( current->right );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Height
	mov	DWORD PTR _right_height$[ebp], eax
$LN11@BalanceTre:

; 184  : 				
; 185  : 			if ( right_height - left_height == 2 )

	mov	eax, DWORD PTR _right_height$[ebp]
	sub	eax, DWORD PTR _left_height$[ebp]
	cmp	eax, 2
	jne	SHORT $LN10@BalanceTre

; 186  : 			{
; 187  : 				if ( RightHigher( current->right ) )

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RightHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RightHigher
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@BalanceTre

; 188  : 					RotateLeft( current->right );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateLeft

; 189  : 				else

	jmp	SHORT $LN8@BalanceTre
$LN9@BalanceTre:

; 190  : 					DoubleRotateLeft( current );

	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoubleRotateLeft@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::DoubleRotateLeft
$LN8@BalanceTre:

; 191  : 					
; 192  : 				if ( rotateOnce )

	movzx	eax, BYTE PTR _rotateOnce$[ebp]
	test	eax, eax
	je	SHORT $LN7@BalanceTre

; 193  : 					break;

	jmp	SHORT $LN17@BalanceTre
$LN7@BalanceTre:

; 194  : 			}
; 195  : 			
; 196  : 			else

	jmp	SHORT $LN6@BalanceTre
$LN10@BalanceTre:

; 197  : 				if ( right_height - left_height == -2 )

	mov	eax, DWORD PTR _right_height$[ebp]
	sub	eax, DWORD PTR _left_height$[ebp]
	cmp	eax, -2					; fffffffeH
	jne	SHORT $LN6@BalanceTre

; 198  : 				{
; 199  : 					if ( LeftHigher( current->left ) )

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LeftHigher@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAE_NPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::LeftHigher
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@BalanceTre

; 200  : 						RotateRight( current->left );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::RotateRight

; 201  : 					else

	jmp	SHORT $LN3@BalanceTre
$LN4@BalanceTre:

; 202  : 						DoubleRotateRight( current );

	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoubleRotateRight@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::DoubleRotateRight
$LN3@BalanceTre:

; 203  : 						
; 204  : 					if ( rotateOnce )

	movzx	eax, BYTE PTR _rotateOnce$[ebp]
	test	eax, eax
	je	SHORT $LN6@BalanceTre

; 205  : 						break;

	jmp	SHORT $LN17@BalanceTre
$LN6@BalanceTre:

; 206  : 				}
; 207  : 				
; 208  : 			if ( current == this->root )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN1@BalanceTre

; 209  : 				break;

	jmp	SHORT $LN17@BalanceTre
$LN1@BalanceTre:

; 210  : 				
; 211  : 			current = FindParent( *( current->item ) );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _current$[ebp], edx

; 212  : 			
; 213  : 		}

	jmp	$LN16@BalanceTre
$LN17@BalanceTre:

; 214  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?BalanceTree@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@_N@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::BalanceTree
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?Del@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z
_TEXT	SEGMENT
_current$ = -20						; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Del@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Del, COMDAT
; _this$ = ecx

; 226  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 		typename BinarySearchTree<BinarySearchTreeType>::node * current = BinarySearchTree<BinarySearchTreeType>::Del( input );

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Del@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Del
	mov	DWORD PTR _current$[ebp], eax

; 228  : 		BalanceTree( current, false );

	push	0
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BalanceTree@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@_N@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::BalanceTree

; 229  : 		
; 230  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Del@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?Add@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z
_TEXT	SEGMENT
_current$ = -20						; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Add@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Add, COMDAT
; _this$ = ecx

; 218  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 	
; 220  : 		typename BinarySearchTree<BinarySearchTreeType>::node * current = BinarySearchTree<BinarySearchTreeType>::Add ( input );

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Add
	mov	DWORD PTR _current$[ebp], eax

; 221  : 		BalanceTree( current, true );

	push	1
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BalanceTree@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@AAEXPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@_N@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::BalanceTree

; 222  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::~AVLBalancedBinarySearchTree<NetworkIDNode>, COMDAT
; _this$ = ecx

; 380  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 381  : 		this->Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXXZ ; DataStructures::BinarySearchTree<NetworkIDNode>::Clear

; 382  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ; DataStructures::BinarySearchTree<NetworkIDNode>::~BinarySearchTree<NetworkIDNode>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ; DataStructures::BinarySearchTree<NetworkIDNode>::~BinarySearchTree<NetworkIDNode>
__ehhandler$??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::~AVLBalancedBinarySearchTree<NetworkIDNode>
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ??0?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ PROC ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::AVLBalancedBinarySearchTree<NetworkIDNode>, COMDAT
; _this$ = ecx

; 149  : 		AVLBalancedBinarySearchTree()	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ ; DataStructures::BinarySearchTree<NetworkIDNode>::BinarySearchTree<NetworkIDNode>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ ENDP ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::AVLBalancedBinarySearchTree<NetworkIDNode>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ; DataStructures::BinarySearchTree<NetworkIDNode>::~BinarySearchTree<NetworkIDNode>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAEPAXI@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_element$ = 8						; size = 4
?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 508  : 		static typename BinarySearchTree::node * parent;
; 509  : 		Find ( element, &parent );

	push	OFFSET ?parent@?1??FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::FindParent'::`2'::parent
	mov	eax, DWORD PTR _element$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@PAPAU312@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Find

; 510  : 		return parent;

	mov	eax, OFFSET ?parent@?1??FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::FindParent'::`2'::parent

; 511  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@PAPAU312@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_element$ = 8						; size = 4
_parent$ = 12						; size = 4
?Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@PAPAU312@@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::Find, COMDAT
; _this$ = ecx

; 448  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 449  : 		static typename BinarySearchTree::node * current;
; 450  : 		
; 451  : 		current = this->root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A, ecx ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current

; 452  : 		*parent = 0;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax], 0

; 453  : 		this->direction = this->ROOT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 3

; 454  : 		
; 455  : 		if ( BinarySearchTree_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN9@Find

; 456  : 		{
; 457  : 			this->direction = this->NOT_FOUND;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 458  : 			return current = 0;

	mov	DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A, 0 ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	eax, OFFSET ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	jmp	$LN10@Find
$LN9@Find:

; 459  : 		}
; 460  : 		
; 461  : 		// Check if the item is at the root
; 462  : 		if ( element == *( current->item ) )

	mov	eax, DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _element$[ebp]
	call	??8NetworkIDNode@@QBE_NABU0@@Z		; NetworkIDNode::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@Find

; 463  : 		{
; 464  : 			this->direction = this->ROOT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 3

; 465  : 			return current;

	mov	eax, OFFSET ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	jmp	$LN10@Find
$LN7@Find:

; 466  : 		}
; 467  : 
; 468  : #ifdef _MSC_VER
; 469  : #pragma warning( disable : 4127 ) // warning C4127: conditional expression is constant
; 470  : #endif
; 471  : 		while ( true )

	mov	eax, 1
	test	eax, eax
	je	$LN6@Find

; 472  : 		{
; 473  : 			// Move pointer
; 474  : 			
; 475  : 			if ( element < *( current->item ) )

	mov	eax, DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _element$[ebp]
	call	??MNetworkIDNode@@QBE_NABU0@@Z		; NetworkIDNode::operator<
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Find

; 476  : 			{
; 477  : 				*parent = current;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	DWORD PTR [eax], ecx

; 478  : 				this->direction = this->LEFT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 479  : 				current = current->left;

	mov	eax, DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A, ecx ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current

; 480  : 			}
; 481  : 			
; 482  : 			else

	jmp	SHORT $LN4@Find
$LN5@Find:

; 483  : 				if ( element > *( current->item ) )

	mov	eax, DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _element$[ebp]
	call	??ONetworkIDNode@@QBE_NABU0@@Z		; NetworkIDNode::operator>
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Find

; 484  : 				{
; 485  : 					*parent = current;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	DWORD PTR [eax], ecx

; 486  : 					this->direction = this->RIGHT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 2

; 487  : 					current = current->right;

	mov	eax, DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A, ecx ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
$LN4@Find:

; 488  : 				}
; 489  : 				
; 490  : 			if ( current == 0 )

	cmp	DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A, 0 ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	jne	SHORT $LN2@Find

; 491  : 				break;

	jmp	SHORT $LN6@Find
$LN2@Find:

; 492  : 				
; 493  : 			// Check if new position holds the item
; 494  : 			if ( element == *( current->item ) )

	mov	eax, DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _element$[ebp]
	call	??8NetworkIDNode@@QBE_NABU0@@Z		; NetworkIDNode::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@Find

; 495  : 			{
; 496  : 				return current;

	mov	eax, OFFSET ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	jmp	SHORT $LN10@Find
$LN1@Find:

; 497  : 			}
; 498  : 		}

	jmp	$LN7@Find
$LN6@Find:

; 499  : 		
; 500  : 		
; 501  : 		this->direction = this->NOT_FOUND;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 502  : 		return current = 0;

	mov	DWORD PTR ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A, 0 ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
	mov	eax, OFFSET ?current@?1??Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@23@ABUNetworkIDNode@@PAPAU423@@Z@4PAU423@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::Find'::`2'::current
$LN10@Find:

; 503  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@PAPAU312@@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::Find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?HeightRecursive@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEIPAUnode@12@@Z
_TEXT	SEGMENT
_right_height$ = -32					; size = 4
_left_height$ = -20					; size = 4
_this$ = -8						; size = 4
_current$ = 8						; size = 4
?HeightRecursive@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEIPAUnode@12@@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::HeightRecursive, COMDAT
; _this$ = ecx

; 402  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 		unsigned int left_height = 0, right_height = 0;

	mov	DWORD PTR _left_height$[ebp], 0
	mov	DWORD PTR _right_height$[ebp], 0

; 404  : 		
; 405  : 		if ( ( current->left == 0 ) && ( current->right == 0 ) )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@HeightRecu
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN5@HeightRecu

; 406  : 			return 1; // Leaf

	mov	eax, 1
	jmp	SHORT $LN6@HeightRecu
$LN5@HeightRecu:

; 407  : 			
; 408  : 		if ( current->left != 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@HeightRecu

; 409  : 			left_height = 1 + HeightRecursive( current->left );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeightRecursive@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::HeightRecursive
	add	eax, 1
	mov	DWORD PTR _left_height$[ebp], eax
$LN4@HeightRecu:

; 410  : 			
; 411  : 		if ( current->right != 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@HeightRecu

; 412  : 			right_height = 1 + HeightRecursive( current->right );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeightRecursive@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::HeightRecursive
	add	eax, 1
	mov	DWORD PTR _right_height$[ebp], eax
$LN3@HeightRecu:

; 413  : 			
; 414  : 		if ( left_height > right_height )

	mov	eax, DWORD PTR _left_height$[ebp]
	cmp	eax, DWORD PTR _right_height$[ebp]
	jbe	SHORT $LN2@HeightRecu

; 415  : 			return left_height;

	mov	eax, DWORD PTR _left_height$[ebp]
	jmp	SHORT $LN6@HeightRecu

; 416  : 		else

	jmp	SHORT $LN6@HeightRecu
$LN2@HeightRecu:

; 417  : 			return right_height;

	mov	eax, DWORD PTR _right_height$[ebp]
$LN6@HeightRecu:

; 418  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?HeightRecursive@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEIPAUnode@12@@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::HeightRecursive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_element$ = 8						; size = 4
?GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU3@@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode, COMDAT
; _this$ = ecx

; 435  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 		static typename BinarySearchTree::node * tempnode;
; 437  : 		static BinarySearchTreeType* dummyptr = 0;
; 438  : 		tempnode = Find ( element, &tempnode );

	push	OFFSET ?tempnode@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAUnode@23@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode'::`2'::tempnode
	mov	eax, DWORD PTR _element$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@PAPAU312@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Find
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?tempnode@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAUnode@23@A, ecx ; `DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode'::`2'::tempnode

; 439  : 		
; 440  : 		if ( this->direction == this->NOT_FOUND )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN1@GetPointer

; 441  : 			return dummyptr;

	mov	eax, OFFSET ?dummyptr@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAU4@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode'::`2'::dummyptr
	jmp	SHORT $LN2@GetPointer
$LN1@GetPointer:

; 442  : 			
; 443  : 		return tempnode->item;

	mov	eax, DWORD PTR ?tempnode@?1??GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU4@@Z@4PAUnode@23@A ; `DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode'::`2'::tempnode
$LN2@GetPointer:

; 444  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU3@@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z
_TEXT	SEGMENT
tv85 = -264						; size = 4
_tree_queue$2 = -64					; size = 12
_index$ = -44						; size = 4
_current$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_return_array$ = 8					; size = 4
?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::DisplayBreadthFirstSearch, COMDAT
; _this$ = ecx

; 943  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 944  : 		typename BinarySearchTree::node * current;
; 945  : 		unsigned int index = 0;

	mov	DWORD PTR _index$[ebp], 0

; 946  : 		
; 947  : 		// Display the tree using a breadth first search
; 948  : 		// Put the children of the current node into the queue
; 949  : 		// Pop the queue, put its children into the queue, repeat until queue is empty
; 950  : 		
; 951  : 		if ( BinarySearchTree_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN9@DisplayBre

; 952  : 			return ; // Do nothing for an empty tree

	jmp	$LN10@DisplayBre

; 953  : 			
; 954  : 		else

	jmp	$LN10@DisplayBre
$LN9@DisplayBre:

; 955  : 			if ( BinarySearchTree_size == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jne	SHORT $LN7@DisplayBre

; 956  : 			{
; 957  : 				return_array[ 0 ] = *( root->item );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _return_array$[ebp]
	call	??4NetworkIDNode@@QAEAAU0@ABU0@@Z

; 958  : 				return ;

	jmp	$LN10@DisplayBre

; 959  : 			}
; 960  : 			
; 961  : 			else

	jmp	$LN10@DisplayBre
$LN7@DisplayBre:

; 962  : 			{
; 963  : 				DataStructures::QueueLinkedList<node *> tree_queue;

	lea	ecx, DWORD PTR _tree_queue$2[ebp]
	call	??0?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 964  : 				
; 965  : 				// Add the root of the tree I am copying from
; 966  : 				tree_queue.Push( root );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _tree_queue$2[ebp]
	call	?Push@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXABQAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Push
$LN5@DisplayBre:

; 967  : 				
; 968  : 				do
; 969  : 				{
; 970  : 					current = tree_queue.Pop();

	lea	ecx, DWORD PTR _tree_queue$2[ebp]
	call	?Pop@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEPAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@XZ ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Pop
	mov	DWORD PTR _current$[ebp], eax

; 971  : 					return_array[ index++ ] = *( current->item );

	imul	eax, DWORD PTR _index$[ebp], 12
	add	eax, DWORD PTR _return_array$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR tv85[ebp]
	call	??4NetworkIDNode@@QAEAAU0@ABU0@@Z

; 972  : 					
; 973  : 					// Add the child or children of the tree I am copying from to the queue
; 974  : 					
; 975  : 					if ( current->left != 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@DisplayBre

; 976  : 						tree_queue.Push( current->left );

	mov	eax, DWORD PTR _current$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _tree_queue$2[ebp]
	call	?Push@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXABQAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Push
$LN2@DisplayBre:

; 977  : 						
; 978  : 					if ( current->right != 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@DisplayBre

; 979  : 						tree_queue.Push( current->right );

	mov	eax, DWORD PTR _current$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR _tree_queue$2[ebp]
	call	?Push@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEXABQAUnode@?$BinarySearchTree@UNetworkIDNode@@@2@@Z ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Push
$LN4@DisplayBre:

; 980  : 						
; 981  : 				}
; 982  : 				
; 983  : 				while ( tree_queue.Size() > 0 );

	lea	ecx, DWORD PTR _tree_queue$2[ebp]
	call	?Size@?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAEIXZ ; DataStructures::QueueLinkedList<DataStructures::BinarySearchTree<NetworkIDNode>::node *>::Size
	test	eax, eax
	ja	SHORT $LN5@DisplayBre

; 984  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tree_queue$2[ebp]
	call	??1?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
$LN10@DisplayBre:

; 985  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@DisplayBre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN16@DisplayBre:
	DD	1
	DD	$LN15@DisplayBre
$LN15@DisplayBre:
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN13@DisplayBre
$LN13@DisplayBre:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z$0:
	lea	ecx, DWORD PTR _tree_queue$2[ebp]
	jmp	??1?$QueueLinkedList@PAUnode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@@DataStructures@@QAE@XZ
__ehhandler$?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::DisplayBreadthFirstSearch
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?Del@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z
_TEXT	SEGMENT
$T1 = -356						; size = 4
$T2 = -344						; size = 4
$T3 = -332						; size = 4
$T4 = -320						; size = 4
$T5 = -308						; size = 4
$T6 = -296						; size = 4
$T7 = -284						; size = 4
$T8 = -272						; size = 4
$T9 = -260						; size = 4
$T10 = -248						; size = 4
_parent$ = -44						; size = 4
_current$ = -32						; size = 4
_node_to_delete$ = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Del@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::Del, COMDAT
; _this$ = ecx

; 547  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 548  : 		typename BinarySearchTree::node * node_to_delete, *current, *parent;
; 549  : 		
; 550  : 		if ( BinarySearchTree_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN28@Del

; 551  : 			return 0;

	xor	eax, eax
	jmp	$LN29@Del
$LN28@Del:

; 552  : 			
; 553  : 		if ( BinarySearchTree_size == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jne	SHORT $LN27@Del

; 554  : 		{
; 555  : 			Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXXZ ; DataStructures::BinarySearchTree<NetworkIDNode>::Clear

; 556  : 			return 0;

	xor	eax, eax
	jmp	$LN29@Del
$LN27@Del:

; 557  : 		}
; 558  : 		
; 559  : 		node_to_delete = Find( input, &parent );

	lea	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@PAPAU312@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::Find
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _node_to_delete$[ebp], edx

; 560  : 		
; 561  : 		if ( direction == NOT_FOUND )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN26@Del

; 562  : 			return 0;  // Couldn't find the element

	xor	eax, eax
	jmp	$LN29@Del
$LN26@Del:

; 563  : 			
; 564  : 		current = node_to_delete;

	mov	eax, DWORD PTR _node_to_delete$[ebp]
	mov	DWORD PTR _current$[ebp], eax

; 565  : 		
; 566  : 		// Replace the deleted node with the appropriate value
; 567  : 		if ( ( current->right ) == 0 && ( current->left ) == 0 )    // Leaf node, just remove it

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN25@Del
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN25@Del

; 568  : 		{
; 569  : 		
; 570  : 			if ( parent )

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN24@Del

; 571  : 			{
; 572  : 				if ( direction == LEFT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	SHORT $LN23@Del

; 573  : 					parent->left = 0;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax+4], 0

; 574  : 				else

	jmp	SHORT $LN24@Del
$LN23@Del:

; 575  : 					parent->right = 0;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN24@Del:

; 576  : 			}
; 577  : 			
; 578  : 			delete node_to_delete->item;

	mov	eax, DWORD PTR _node_to_delete$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 579  : 			delete node_to_delete;

	mov	eax, DWORD PTR _node_to_delete$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 580  : 			BinarySearchTree_size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 581  : 			return parent;

	mov	eax, DWORD PTR _parent$[ebp]
	jmp	$LN29@Del

; 582  : 		}
; 583  : 		else

	jmp	$LN29@Del
$LN25@Del:

; 584  : 			if ( ( current->right ) != 0 && ( current->left ) == 0 )   // Node has only one child, delete it and cause the parent to point to that child

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN20@Del
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN20@Del

; 585  : 			{
; 586  : 			
; 587  : 				if ( parent )

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN19@Del

; 588  : 				{
; 589  : 					if ( direction == RIGHT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN18@Del

; 590  : 						parent->right = current->right;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 591  : 					else

	jmp	SHORT $LN17@Del
$LN18@Del:

; 592  : 						parent->left = current->right;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
$LN17@Del:

; 593  : 				}
; 594  : 				
; 595  : 				else

	jmp	SHORT $LN16@Del
$LN19@Del:

; 596  : 					root = current->right; // Without a parent this must be the root node

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
$LN16@Del:

; 597  : 					
; 598  : 				delete node_to_delete->item;

	mov	eax, DWORD PTR _node_to_delete$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 599  : 				
; 600  : 				delete node_to_delete;

	mov	eax, DWORD PTR _node_to_delete$[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 601  : 				
; 602  : 				BinarySearchTree_size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 603  : 				
; 604  : 				return parent;

	mov	eax, DWORD PTR _parent$[ebp]
	jmp	$LN29@Del

; 605  : 			}
; 606  : 			else

	jmp	$LN29@Del
$LN20@Del:

; 607  : 				if ( ( current->right ) == 0 && ( current->left ) != 0 )   // Node has only one child, delete it and cause the parent to point to that child

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	$LN14@Del
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN14@Del

; 608  : 				{
; 609  : 				
; 610  : 					if ( parent )

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN13@Del

; 611  : 					{
; 612  : 						if ( direction == RIGHT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN12@Del

; 613  : 							parent->right = current->left;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 614  : 						else

	jmp	SHORT $LN11@Del
$LN12@Del:

; 615  : 							parent->left = current->left;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
$LN11@Del:

; 616  : 					}
; 617  : 					
; 618  : 					else

	jmp	SHORT $LN10@Del
$LN13@Del:

; 619  : 						root = current->left; // Without a parent this must be the root node

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Del:

; 620  : 						
; 621  : 					delete node_to_delete->item;

	mov	eax, DWORD PTR _node_to_delete$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 622  : 					
; 623  : 					delete node_to_delete;

	mov	eax, DWORD PTR _node_to_delete$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 624  : 					
; 625  : 					BinarySearchTree_size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 626  : 					
; 627  : 					return parent;

	mov	eax, DWORD PTR _parent$[ebp]
	jmp	$LN29@Del

; 628  : 				}
; 629  : 				else // Go right, then as left as far as you can

	jmp	$LN29@Del
$LN14@Del:

; 630  : 				{
; 631  : 					parent = current;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR _parent$[ebp], eax

; 632  : 					direction = RIGHT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 2

; 633  : 					current = current->right; // Must have a right branch because the if statements above indicated that it has 2 branches

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _current$[ebp], ecx
$LN8@Del:

; 634  : 					
; 635  : 					while ( current->left )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@Del

; 636  : 					{
; 637  : 						direction = LEFT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 638  : 						parent = current;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR _parent$[ebp], eax

; 639  : 						current = current->left;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _current$[ebp], ecx

; 640  : 					}

	jmp	SHORT $LN8@Del
$LN7@Del:

; 641  : 					
; 642  : 					// Replace the value held by the node to delete with the value pointed to by current;
; 643  : 					*( node_to_delete->item ) = *( current->item );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _node_to_delete$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	??4NetworkIDNode@@QAEAAU0@ABU0@@Z

; 644  : 					
; 645  : 					// Delete current.
; 646  : 					// If it is a leaf node just delete it
; 647  : 					if ( current->right == 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN6@Del

; 648  : 					{
; 649  : 						if ( direction == RIGHT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN5@Del

; 650  : 							parent->right = 0;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax+8], 0

; 651  : 						else

	jmp	SHORT $LN4@Del
$LN5@Del:

; 652  : 							parent->left = 0;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@Del:

; 653  : 							
; 654  : 						delete current->item;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T7[ebp], ecx
	mov	edx, DWORD PTR $T7[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 655  : 						
; 656  : 						delete current;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 657  : 						
; 658  : 						BinarySearchTree_size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 659  : 						
; 660  : 						return parent;

	mov	eax, DWORD PTR _parent$[ebp]
	jmp	SHORT $LN29@Del

; 661  : 					}
; 662  : 					
; 663  : 					else

	jmp	SHORT $LN29@Del
$LN6@Del:

; 664  : 					{
; 665  : 						// Skip this node and make its parent point to its right branch
; 666  : 						
; 667  : 						if ( direction == RIGHT )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN2@Del

; 668  : 							parent->right = current->right;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 669  : 						else

	jmp	SHORT $LN1@Del
$LN2@Del:

; 670  : 							parent->left = current->right;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
$LN1@Del:

; 671  : 							
; 672  : 						delete current->item;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T9[ebp], ecx
	mov	edx, DWORD PTR $T9[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 673  : 						
; 674  : 						delete current;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	ecx, DWORD PTR $T10[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 675  : 						
; 676  : 						BinarySearchTree_size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 677  : 						
; 678  : 						return parent;

	mov	eax, DWORD PTR _parent$[ebp]
$LN29@Del:

; 679  : 					}
; 680  : 				}
; 681  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@Del
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN33@Del:
	DD	1
	DD	$LN32@Del
$LN32@Del:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN31@Del
$LN31@Del:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?Del@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::Del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z
_TEXT	SEGMENT
tv173 = -352						; size = 4
tv142 = -352						; size = 4
tv79 = -352						; size = 4
$T2 = -344						; size = 4
$T3 = -332						; size = 4
$T4 = -320						; size = 4
$T5 = -308						; size = 4
$T6 = -296						; size = 4
$T7 = -284						; size = 4
$T8 = -272						; size = 4
$T9 = -260						; size = 4
$T10 = -248						; size = 4
_parent$ = -44						; size = 4
_current$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_input$ = 8						; size = 4
?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::Add, COMDAT
; _this$ = ecx

; 685  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 686  : 		typename BinarySearchTree::node * current, *parent;
; 687  : 		
; 688  : 		// Add the new element to the tree according to the following alogrithm:
; 689  : 		// 1.  If the current node is empty add the new leaf
; 690  : 		// 2.  If the element is less than the current node then go down the left branch
; 691  : 		// 3.  If the element is greater than the current node then go down the right branch
; 692  : 		
; 693  : 		if ( BinarySearchTree_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	$LN12@Add

; 694  : 		{
; 695  : 			BinarySearchTree_size = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 1

; 696  : 			root = new typename BinarySearchTree::node;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+4], ecx

; 697  : 			root->item = new BinarySearchTreeType;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN15@Add
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0NetworkIDNode@@QAE@XZ		; NetworkIDNode::NetworkIDNode
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN16@Add
$LN15@Add:
	mov	DWORD PTR tv79[ebp], 0
$LN16@Add:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax

; 698  : 			*( root->item ) = input;

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	call	??4NetworkIDNode@@QAEAAU0@ABU0@@Z

; 699  : 			root->left = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], 0

; 700  : 			root->right = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], 0

; 701  : 			
; 702  : 			return root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	jmp	$LN13@Add

; 703  : 		}
; 704  : 		
; 705  : 		else

	jmp	$LN13@Add
$LN12@Add:

; 706  : 		{
; 707  : 			// start at the root
; 708  : 			current = parent = root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _parent$[ebp], ecx
	mov	edx, DWORD PTR _parent$[ebp]
	mov	DWORD PTR _current$[ebp], edx
$LN10@Add:

; 709  : 
; 710  : #ifdef _MSC_VER
; 711  : #pragma warning( disable : 4127 ) // warning C4127: conditional expression is constant
; 712  : #endif
; 713  : 			while ( true )    // This loop traverses the tree to find a spot for insertion

	mov	eax, 1
	test	eax, eax
	je	$LN13@Add

; 714  : 			{
; 715  : 			
; 716  : 				if ( input < *( current->item ) )

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _input$[ebp]
	call	??MNetworkIDNode@@QBE_NABU0@@Z		; NetworkIDNode::operator<
	movzx	edx, al
	test	edx, edx
	je	$LN8@Add

; 717  : 				{
; 718  : 					if ( current->left == 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN7@Add

; 719  : 					{
; 720  : 						current->left = new typename BinarySearchTree::node;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR [eax+4], ecx

; 721  : 						current->left->item = new BinarySearchTreeType;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN17@Add
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0NetworkIDNode@@QAE@XZ		; NetworkIDNode::NetworkIDNode
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN18@Add
$LN17@Add:
	mov	DWORD PTR tv142[ebp], 0
$LN18@Add:
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR [edx], eax

; 722  : 						current = current->left;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _current$[ebp], ecx

; 723  : 						current->left = 0;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+4], 0

; 724  : 						current->right = 0;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+8], 0

; 725  : 						*( current->item ) = input;

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??4NetworkIDNode@@QAEAAU0@ABU0@@Z

; 726  : 						
; 727  : 						BinarySearchTree_size++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 728  : 						return current;

	mov	eax, DWORD PTR _current$[ebp]
	jmp	$LN13@Add

; 729  : 					}
; 730  : 					
; 731  : 					else

	jmp	SHORT $LN6@Add
$LN7@Add:

; 732  : 					{
; 733  : 						parent = current;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR _parent$[ebp], eax

; 734  : 						current = current->left;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _current$[ebp], ecx
$LN6@Add:

; 735  : 					}
; 736  : 				}
; 737  : 				
; 738  : 				else

	jmp	$LN5@Add
$LN8@Add:

; 739  : 					if ( input > *( current->item ) )

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _input$[ebp]
	call	??ONetworkIDNode@@QBE_NABU0@@Z		; NetworkIDNode::operator>
	movzx	edx, al
	test	edx, edx
	je	$LN4@Add

; 740  : 					{
; 741  : 						if ( current->right == 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	$LN3@Add

; 742  : 						{
; 743  : 							current->right = new typename BinarySearchTree::node;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T8[ebp], eax
	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [eax+8], ecx

; 744  : 							current->right->item = new BinarySearchTreeType;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN19@Add
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0NetworkIDNode@@QAE@XZ		; NetworkIDNode::NetworkIDNode
	mov	DWORD PTR tv173[ebp], eax
	jmp	SHORT $LN20@Add
$LN19@Add:
	mov	DWORD PTR tv173[ebp], 0
$LN20@Add:
	mov	eax, DWORD PTR tv173[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR [edx], eax

; 745  : 							current = current->right;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _current$[ebp], ecx

; 746  : 							current->left = 0;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+4], 0

; 747  : 							current->right = 0;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR [eax+8], 0

; 748  : 							*( current->item ) = input;

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	??4NetworkIDNode@@QAEAAU0@ABU0@@Z

; 749  : 							
; 750  : 							BinarySearchTree_size++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 751  : 							return current;

	mov	eax, DWORD PTR _current$[ebp]
	jmp	SHORT $LN13@Add

; 752  : 						}
; 753  : 						
; 754  : 						else

	jmp	SHORT $LN2@Add
$LN3@Add:

; 755  : 						{
; 756  : 							parent = current;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR _parent$[ebp], eax

; 757  : 							current = current->right;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _current$[ebp], ecx
$LN2@Add:

; 758  : 						}
; 759  : 					}
; 760  : 					
; 761  : 					else

	jmp	SHORT $LN5@Add
$LN4@Add:

; 762  : 						return 0; // ((input == current->item) == true) which is not allowed since the tree only takes discrete values.  Do nothing

	xor	eax, eax
	jmp	SHORT $LN13@Add
$LN5@Add:

; 763  : 			}

	jmp	$LN10@Add
$LN13@Add:

; 764  : 		}
; 765  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z$1:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z$2:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEPAUnode@12@ABUNetworkIDNode@@@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::Add
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_starting_node$ = 8					; size = 4
?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::Height, COMDAT
; _this$ = ecx

; 392  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 393  : 		if ( BinarySearchTree_size == 0 || starting_node == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@Height
	cmp	DWORD PTR _starting_node$[ebp], 0
	jne	SHORT $LN3@Height
$LN2@Height:

; 394  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN4@Height

; 395  : 		else

	jmp	SHORT $LN4@Height
$LN3@Height:

; 396  : 			return HeightRecursive( starting_node );

	mov	eax, DWORD PTR _starting_node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HeightRecursive@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEIPAUnode@12@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::HeightRecursive
$LN4@Height:

; 397  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Height@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIPAUnode@12@@Z ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::Height
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?Clear@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXXZ
_TEXT	SEGMENT
$T1 = -272						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
_parent$ = -32						; size = 4
_current$ = -20						; size = 4
_this$ = -8						; size = 4
?Clear@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXXZ PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::Clear, COMDAT
; _this$ = ecx

; 1089 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1090 : 		typename BinarySearchTree::node * current, *parent;
; 1091 : 		
; 1092 : 		current = root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _current$[ebp], ecx
$LN10@Clear:

; 1093 : 		
; 1094 : 		while ( BinarySearchTree_size > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jbe	$LN11@Clear

; 1095 : 		{
; 1096 : 			if ( BinarySearchTree_size == 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jne	SHORT $LN8@Clear

; 1097 : 			{
; 1098 : 				delete root->item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1099 : 				delete root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1100 : 				root = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1101 : 				BinarySearchTree_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1102 : 			}
; 1103 : 			
; 1104 : 			else

	jmp	$LN7@Clear
$LN8@Clear:

; 1105 : 			{
; 1106 : 				if ( current->left != 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@Clear

; 1107 : 				{
; 1108 : 					current = current->left;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _current$[ebp], ecx

; 1109 : 				}
; 1110 : 				
; 1111 : 				else

	jmp	$LN7@Clear
$LN6@Clear:

; 1112 : 					if ( current->right != 0 )

	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@Clear

; 1113 : 					{
; 1114 : 						current = current->right;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _current$[ebp], ecx

; 1115 : 					}
; 1116 : 					
; 1117 : 					else // leaf

	jmp	SHORT $LN7@Clear
$LN4@Clear:

; 1118 : 					{
; 1119 : 						// Not root node so must have a parent
; 1120 : 						parent = FindParent( *( current->item ) );

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindParent@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@IAEAAPAUnode@12@ABUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::FindParent
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _parent$[ebp], edx

; 1121 : 						
; 1122 : 						if ( ( parent->left ) == current )

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _current$[ebp]
	jne	SHORT $LN2@Clear

; 1123 : 							parent->left = 0;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1124 : 						else

	jmp	SHORT $LN1@Clear
$LN2@Clear:

; 1125 : 							parent->right = 0;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@Clear:

; 1126 : 							
; 1127 : 						delete current->item;

	mov	eax, DWORD PTR _current$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1128 : 						
; 1129 : 						delete current;

	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1130 : 						
; 1131 : 						current = parent;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	DWORD PTR _current$[ebp], eax

; 1132 : 						
; 1133 : 						BinarySearchTree_size--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN7@Clear:

; 1134 : 					}
; 1135 : 			}
; 1136 : 		}

	jmp	$LN10@Clear
$LN11@Clear:

; 1137 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXXZ ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ?Size@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIXZ PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::Size, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 		return BinarySearchTree_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 388  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIXZ ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ??1?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::~BinarySearchTree<NetworkIDNode>, COMDAT
; _this$ = ecx

; 429  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@

; 430  : 		this->Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXXZ ; DataStructures::BinarySearchTree<NetworkIDNode>::Clear

; 431  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@UAE@XZ ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::~BinarySearchTree<NetworkIDNode>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_binarysearchtree.h
;	COMDAT ??0?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ PROC ; DataStructures::BinarySearchTree<NetworkIDNode>::BinarySearchTree<NetworkIDNode>, COMDAT
; _this$ = ecx

; 422  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@6B@

; 423  : 		BinarySearchTree_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 424  : 		root = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 425  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAE@XZ ENDP ; DataStructures::BinarySearchTree<NetworkIDNode>::BinarySearchTree<NetworkIDNode>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?GetParent@NetworkIDGenerator@@UBEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetParent@NetworkIDGenerator@@UBEPAXXZ PROC		; NetworkIDGenerator::GetParent, COMDAT
; _this$ = ecx

; 220  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 	return parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 222  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetParent@NetworkIDGenerator@@UBEPAXXZ ENDP		; NetworkIDGenerator::GetParent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?SetParent@NetworkIDGenerator@@UAEXPAX@Z
_TEXT	SEGMENT
tv76 = -336						; size = 4
tv152 = -332						; size = 4
tv91 = -332						; size = 4
$T2 = -324						; size = 4
$T3 = -312						; size = 4
$T4 = -300						; size = 4
$T5 = -288						; size = 4
__$AllocaPad$$ = -84					; size = 4
_i$ = -72						; size = 4
_usedAlloca$ = -57					; size = 1
_nodeArray$ = -48					; size = 4
_size$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__parent$ = 8						; size = 4
?SetParent@NetworkIDGenerator@@UAEXPAX@Z PROC		; NetworkIDGenerator::SetParent, COMDAT
; _this$ = ecx

; 184  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetParent@NetworkIDGenerator@@UAEXPAX@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$AllocaPad$$[ebp], 0

; 185  : 	parent=_parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __parent$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 186  : 
; 187  : #ifdef _DEBUG
; 188  : 	// Avoid duplicate parents in the tree
; 189  : 	unsigned size = IDTree.Size();

	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?Size@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEIXZ ; DataStructures::BinarySearchTree<NetworkIDNode>::Size
	mov	DWORD PTR _size$[ebp], eax

; 190  : 	NetworkIDNode *nodeArray;
; 191  : 
; 192  : 	bool usedAlloca=false;

	mov	BYTE PTR _usedAlloca$[ebp], 0

; 193  : 	#if !defined(_COMPATIBILITY_1)
; 194  : 	if (sizeof(NetworkIDNode) * size < MAX_ALLOCA_STACK_ALLOCATION)

	imul	eax, DWORD PTR _size$[ebp], 12
	cmp	eax, 1048576				; 00100000H
	jae	SHORT $LN6@SetParent

; 195  : 	{
; 196  : 		nodeArray = (NetworkIDNode*) alloca(sizeof(NetworkIDNode) * size);

	imul	eax, DWORD PTR _size$[ebp], 12
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv152[ebp], eax
	mov	eax, DWORD PTR tv152[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv76[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv152[ebp]
	mov	ecx, DWORD PTR tv76[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv76[ebp], 32			; 00000020H
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _nodeArray$[ebp], edx

; 197  : 		usedAlloca=true;

	mov	BYTE PTR _usedAlloca$[ebp], 1

; 198  : 	}
; 199  : 	else

	jmp	$LN5@SetParent
$LN6@SetParent:

; 200  : 	#endif
; 201  : 		nodeArray = new NetworkIDNode[size];

	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN9@SetParent
	push	OFFSET ??0NetworkIDNode@@QAE@XZ		; NetworkIDNode::NetworkIDNode
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN10@SetParent
$LN9@SetParent:
	mov	DWORD PTR tv91[ebp], 0
$LN10@SetParent:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _nodeArray$[ebp], ecx
$LN5@SetParent:

; 202  : 
; 203  : 
; 204  : 	IDTree.DisplayBreadthFirstSearch( nodeArray );

	mov	eax, DWORD PTR _nodeArray$[ebp]
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?DisplayBreadthFirstSearch@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXPAUNetworkIDNode@@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::DisplayBreadthFirstSearch

; 205  : 	unsigned i;
; 206  : 	for (i=0; i < size; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SetParent
$LN3@SetParent:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SetParent:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@SetParent

; 207  : 	{
; 208  : 		// If this assert hits then this _parent is already in the tree.  Classes instance should never contain more than one NetworkIDGenerator
; 209  : 		assert(nodeArray->object->GetParent()!=parent);

	mov	eax, DWORD PTR _nodeArray$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _nodeArray$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jne	SHORT $LN11@SetParent
	mov	edx, DWORD PTR ?__LINE__Var@?1??SetParent@NetworkIDGenerator@@UAEXPAX@Z@4JA
	add	edx, 25					; 00000019H
	push	edx
	push	OFFSET ??_C@_1FO@GDHNHDHO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AAi@
	push	OFFSET ??_C@_1EO@IPHFIFCO@?$AAn?$AAo?$AAd?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?9?$AA?$DO?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAP?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?$CB?$AA?$DN@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@SetParent:

; 210  : 	}

	jmp	SHORT $LN3@SetParent
$LN2@SetParent:

; 211  : 	
; 212  : 	if (usedAlloca==false)

	movzx	eax, BYTE PTR _usedAlloca$[ebp]
	test	eax, eax
	jne	SHORT $LN7@SetParent

; 213  : 		delete [] nodeArray;

	mov	eax, DWORD PTR _nodeArray$[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@SetParent:

; 214  : 	
; 215  : #endif
; 216  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@SetParent
	push	DWORD PTR __$AllocaPad$$[ebp]
	call	@_RTC_CheckStackVars2@12
	pop	eax
	pop	edx
	lea	esp, DWORD PTR [ebp-352]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN16@SetParent:
	DD	1
	DD	$LN15@SetParent
$LN15@SetParent:
	DD	-84					; ffffffacH
	DD	4
	DD	$LN13@SetParent
$LN13@SetParent:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	36					; 00000024H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetParent@NetworkIDGenerator@@UAEXPAX@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetParent@NetworkIDGenerator@@UAEXPAX@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-340]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetParent@NetworkIDGenerator@@UAEXPAX@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetParent@NetworkIDGenerator@@UAEXPAX@Z ENDP		; NetworkIDGenerator::SetParent
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?SetNetworkID@NetworkIDGenerator@@UAEXUNetworkID@@@Z
_TEXT	SEGMENT
$T1 = -312						; size = 12
$T2 = -292						; size = 12
$T3 = -272						; size = 12
$T4 = -252						; size = 12
$T5 = -232						; size = 12
_collision$ = -20					; size = 4
_this$ = -8						; size = 4
_id$ = 8						; size = 8
?SetNetworkID@NetworkIDGenerator@@UAEXUNetworkID@@@Z PROC ; NetworkIDGenerator::SetNetworkID, COMDAT
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 	callGenerationCode=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 148  : 
; 149  : 	if ( id == UNASSIGNED_NETWORK_ID )

	push	OFFSET _UNASSIGNED_NETWORK_ID
	lea	ecx, DWORD PTR _id$[ebp]
	call	??8NetworkID@@QBE_NABU0@@Z		; NetworkID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@SetNetwork

; 150  : 	{
; 151  : 		// puts("Warning: NetworkIDGenerator passed UNASSIGNED_NETWORK_ID.  SetID ignored");
; 152  : 		return ;

	jmp	$LN6@SetNetwork
$LN5@SetNetwork:

; 153  : 	}
; 154  : 
; 155  : 	if ( networkID == id )

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8NetworkID@@QBE_NABU0@@Z		; NetworkID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@SetNetwork

; 156  : 	{
; 157  : 		// printf("NetworkIDGenerator passed %i which already exists in the tree.  SetID ignored", id);
; 158  : 		return ;

	jmp	$LN6@SetNetwork
$LN4@SetNetwork:

; 159  : 	}
; 160  : 
; 161  : 	NetworkIDNode* collision = NetworkIDGenerator::IDTree.GetPointerToNode( NetworkIDNode( ( id ), 0 ) );

	push	0
	mov	eax, DWORD PTR _id$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU3@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _collision$[ebp], edx

; 162  : 
; 163  : 	if ( collision )   // Tree should have only unique values.  The new value is already in use.

	cmp	DWORD PTR _collision$[ebp], 0
	je	SHORT $LN3@SetNetwork

; 164  : 	{
; 165  : 		//printf("Warning: NetworkIDGenerator::SetID passed %i, which has an existing node in the tree.  Old node removed, which will cause the item pointed to to be inaccessible to the network", id);
; 166  : 		IDTree.Del( NetworkIDNode( collision->networkID, collision->object ) );

	mov	eax, DWORD PTR _collision$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _collision$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?Del@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Del
$LN3@SetNetwork:

; 167  : 	}
; 168  : 
; 169  : 	if ( networkID == UNASSIGNED_NETWORK_ID )   // Object has not had an ID assigned so does not already exist in the tree

	push	OFFSET _UNASSIGNED_NETWORK_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??8NetworkID@@QBE_NABU0@@Z		; NetworkID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@SetNetwork

; 170  : 	{
; 171  : 		networkID = id;

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4NetworkID@@QAEAAU0@ABU0@@Z		; NetworkID::operator=

; 172  : 		IDTree.Add( NetworkIDNode( networkID, this ) );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?Add@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Add

; 173  : 	}
; 174  : 	else // Object already exists in the tree and has an assigned ID

	jmp	SHORT $LN6@SetNetwork
$LN2@SetNetwork:

; 175  : 	{
; 176  : 		IDTree.Del( NetworkIDNode( networkID, this ) ); // Delete the node with whatever ID the existing object is using

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?Del@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Del

; 177  : 		networkID = id;

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4NetworkID@@QAEAAU0@ABU0@@Z		; NetworkID::operator=

; 178  : 		IDTree.Add( NetworkIDNode( networkID, this ) );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?Add@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Add
$LN6@SetNetwork:

; 179  : 	}
; 180  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetNetworkID@NetworkIDGenerator@@UAEXUNetworkID@@@Z ENDP ; NetworkIDGenerator::SetNetworkID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ?GetNetworkID@NetworkIDGenerator@@UAE?AUNetworkID@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetNetworkID@NetworkIDGenerator@@UAE?AUNetworkID@@XZ PROC ; NetworkIDGenerator::GetNetworkID, COMDAT
; _this$ = ecx

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 	if (callGenerationCode && IsNetworkIDAuthority())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@GetNetwork
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetNetwork

; 103  : 	{
; 104  : 		GenerateID();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GenerateID@NetworkIDGenerator@@IAEXXZ	; NetworkIDGenerator::GenerateID

; 105  : 		callGenerationCode=false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0
$LN1@GetNetwork:

; 106  : 	}
; 107  : 
; 108  : 	return networkID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 109  : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNetworkID@NetworkIDGenerator@@UAE?AUNetworkID@@XZ ENDP ; NetworkIDGenerator::GetNetworkID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??1NetworkIDGenerator@@UAE@XZ
_TEXT	SEGMENT
$T1 = -252						; size = 12
$T2 = -232						; size = 12
_object$3 = -20						; size = 4
_this$ = -8						; size = 4
??1NetworkIDGenerator@@UAE@XZ PROC			; NetworkIDGenerator::~NetworkIDGenerator, COMDAT
; _this$ = ecx

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7NetworkIDGenerator@@6B@

; 88   : 	if (networkID!=UNASSIGNED_NETWORK_ID)

	push	OFFSET _UNASSIGNED_NETWORK_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??9NetworkID@@QBE_NABU0@@Z		; NetworkID::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@NetworkIDG

; 89   : 	{
; 90   : 		NetworkIDNode * object = NetworkIDGenerator::IDTree.GetPointerToNode( NetworkIDNode( ( networkID ), 0 ) );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?GetPointerToNode@?$BinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEAAPAUNetworkIDNode@@ABU3@@Z ; DataStructures::BinarySearchTree<NetworkIDNode>::GetPointerToNode
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _object$3[ebp], eax

; 91   : 		if ( object->object == this )

	mov	eax, DWORD PTR _object$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@NetworkIDG

; 92   : 			IDTree.Del( NetworkIDNode( object->networkID, 0 ) );

	push	0
	mov	eax, DWORD PTR _object$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ; NetworkIDNode::NetworkIDNode
	push	eax
	mov	ecx, OFFSET ?IDTree@NetworkIDGenerator@@2V?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@A ; NetworkIDGenerator::IDTree
	call	?Del@?$AVLBalancedBinarySearchTree@UNetworkIDNode@@@DataStructures@@QAEXABUNetworkIDNode@@@Z ; DataStructures::AVLBalancedBinarySearchTree<NetworkIDNode>::Del
$LN3@NetworkIDG:

; 93   : 	}
; 94   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1NetworkIDGenerator@@UAE@XZ ENDP			; NetworkIDGenerator::~NetworkIDGenerator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??0NetworkIDGenerator@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0NetworkIDGenerator@@QAE@XZ PROC			; NetworkIDGenerator::NetworkIDGenerator, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7NetworkIDGenerator@@6B@

; 78   : 	callGenerationCode=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1

; 79   : 	networkID=UNASSIGNED_NETWORK_ID;

	push	OFFSET _UNASSIGNED_NETWORK_ID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??4NetworkID@@QAEAAU0@ABU0@@Z		; NetworkID::operator=

; 80   : 	parent=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 81   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0NetworkIDGenerator@@QAE@XZ ENDP			; NetworkIDGenerator::NetworkIDGenerator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4NetworkIDNode@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4NetworkIDNode@@QAEAAU0@ABU0@@Z PROC			; NetworkIDNode::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4NetworkID@@QAEAAU0@ABU0@@Z		; NetworkID::operator=
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4NetworkIDNode@@QAEAAU0@ABU0@@Z ENDP			; NetworkIDNode::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??MNetworkIDNode@@QBE_NABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??MNetworkIDNode@@QBE_NABU0@@Z PROC			; NetworkIDNode::operator<, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	if ( networkID < right.networkID )

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??MNetworkID@@QBE_NABU0@@Z		; NetworkID::operator<
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator

; 55   : 		return !0;

	mov	al, 1
	jmp	SHORT $LN2@operator
$LN1@operator:

; 56   : 
; 57   : 	return 0;

	xor	al, al
$LN2@operator:

; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??MNetworkIDNode@@QBE_NABU0@@Z ENDP			; NetworkIDNode::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??ONetworkIDNode@@QBE_NABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??ONetworkIDNode@@QBE_NABU0@@Z PROC			; NetworkIDNode::operator>, COMDAT
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 	if ( networkID > right.networkID )

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ONetworkID@@QBE_NABU0@@Z		; NetworkID::operator>
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator

; 47   : 		return !0;

	mov	al, 1
	jmp	SHORT $LN2@operator
$LN1@operator:

; 48   : 
; 49   : 	return 0;

	xor	al, al
$LN2@operator:

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ONetworkIDNode@@QBE_NABU0@@Z ENDP			; NetworkIDNode::operator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??8NetworkIDNode@@QBE_NABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??8NetworkIDNode@@QBE_NABU0@@Z PROC			; NetworkIDNode::operator==, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	if ( networkID == right.networkID )

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8NetworkID@@QBE_NABU0@@Z		; NetworkID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@operator

; 39   : 		return !0;

	mov	al, 1
	jmp	SHORT $LN2@operator
$LN1@operator:

; 40   : 
; 41   : 	return 0;

	xor	al, al
$LN2@operator:

; 42   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8NetworkIDNode@@QBE_NABU0@@Z ENDP			; NetworkIDNode::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__networkID$ = 8					; size = 8
__object$ = 16						; size = 4
??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z PROC ; NetworkIDNode::NetworkIDNode, COMDAT
; _this$ = ecx

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 	networkID = _networkID;

	lea	eax, DWORD PTR __networkID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4NetworkID@@QAEAAU0@ABU0@@Z		; NetworkID::operator=

; 68   : 	object = _object;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __object$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 69   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0NetworkIDNode@@QAE@UNetworkID@@PAVNetworkIDGenerator@@@Z ENDP ; NetworkIDNode::NetworkIDNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networkidgenerator.cpp
;	COMDAT ??0NetworkIDNode@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0NetworkIDNode@@QAE@XZ PROC				; NetworkIDNode::NetworkIDNode, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	object = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 63   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0NetworkIDNode@@QAE@XZ ENDP				; NetworkIDNode::NetworkIDNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.h
;	COMDAT ??4PlayerID@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4PlayerID@@QAEAAU0@ABU0@@Z PROC			; PlayerID::operator=, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		binaryAddress = input.binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 76   : 		port = input.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 77   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PlayerID@@QAEAAU0@ABU0@@Z ENDP			; PlayerID::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
