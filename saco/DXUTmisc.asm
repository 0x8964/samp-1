; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\d3d9\common\DXUTmisc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?s_pd3dDevice@CDXUTDirectionWidget@@1PAUIDirect3DDevice9@@A ; CDXUTDirectionWidget::s_pd3dDevice
PUBLIC	?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
PUBLIC	?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A	; CDXUTDirectionWidget::s_pMesh
_BSS	SEGMENT
_s_hModD3D9 DD	01H DUP (?)
_s_DynamicDirect3DCreate9 DD 01H DUP (?)
_s_DynamicD3DPERF_BeginEvent DD 01H DUP (?)
_s_DynamicD3DPERF_EndEvent DD 01H DUP (?)
_s_DynamicD3DPERF_SetMarker DD 01H DUP (?)
_s_DynamicD3DPERF_SetRegion DD 01H DUP (?)
_s_DynamicD3DPERF_QueryRepeatFrame DD 01H DUP (?)
_s_DynamicD3DPERF_SetOptions DD 01H DUP (?)
_s_DynamicD3DPERF_GetStatus DD 01H DUP (?)
?s_pd3dDevice@CDXUTDirectionWidget@@1PAUIDirect3DDevice9@@A DD 01H DUP (?) ; CDXUTDirectionWidget::s_pd3dDevice
?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A DD 01H DUP (?) ; CDXUTDirectionWidget::s_pEffect
?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A DD 01H DUP (?) ; CDXUTDirectionWidget::s_pMesh
?s_strMediaSearchPath@?1??DXUTMediaSearchPath@@YAPADXZ@4PADA DB 0104H DUP (?) ; `DXUTMediaSearchPath'::`2'::s_strMediaSearchPath
_BSS	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?strrchr@@YAPADPADH@Z				; strrchr
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_atan2f
PUBLIC	_sqrtf
PUBLIC	??0D3DXVECTOR2@@QAE@XZ				; D3DXVECTOR2::D3DXVECTOR2
PUBLIC	??0D3DXVECTOR2@@QAE@MM@Z			; D3DXVECTOR2::D3DXVECTOR2
PUBLIC	??DD3DXVECTOR2@@QBE?AU0@M@Z			; D3DXVECTOR2::operator*
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
PUBLIC	??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator-=
PUBLIC	??XD3DXVECTOR3@@QAEAAU0@M@Z			; D3DXVECTOR3::operator*=
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
PUBLIC	??DD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator*
PUBLIC	??KD3DXVECTOR3@@QBE?AU0@M@Z			; D3DXVECTOR3::operator/
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??XD3DXMATRIX@@QAEAAU0@ABU0@@Z			; D3DXMATRIX::operator*=
PUBLIC	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z			; D3DXMATRIX::operator*
PUBLIC	??0_D3DXMATRIXA16@@QAE@XZ			; _D3DXMATRIXA16::_D3DXMATRIXA16
PUBLIC	??4_D3DXMATRIXA16@@QAEAAU0@ABUD3DXMATRIX@@@Z	; _D3DXMATRIXA16::operator=
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
PUBLIC	??0D3DXQUATERNION@@QAE@MMMM@Z			; D3DXQUATERNION::D3DXQUATERNION
PUBLIC	??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z		; D3DXQUATERNION::operator*
PUBLIC	??0D3DXCOLOR@@QAE@XZ				; D3DXCOLOR::D3DXCOLOR
PUBLIC	??0D3DXCOLOR@@QAE@MMMM@Z			; D3DXCOLOR::D3DXCOLOR
PUBLIC	??BD3DXCOLOR@@QBEKXZ				; D3DXCOLOR::operator unsigned long
PUBLIC	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z		; D3DXVec3Length
PUBLIC	?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3LengthSq
PUBLIC	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z		; D3DXVec3Dot
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
PUBLIC	?D3DXVec3Subtract@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Subtract
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ; D3DXQuaternionIdentity
PUBLIC	?DXTraceWrapper@@YGJPBDKJ0H@Z			; DXTraceWrapper
PUBLIC	?StringCopyWorkerA@@YGJPADIPBD@Z		; StringCopyWorkerA
PUBLIC	?StringCatWorkerA@@YGJPADIPBD@Z			; StringCatWorkerA
PUBLIC	?StringVPrintfWorkerA@@YGJPADIPBD0@Z		; StringVPrintfWorkerA
PUBLIC	?StringLengthWorkerA@@YGJPBDIPAI@Z		; StringLengthWorkerA
PUBLIC	?StringCchCopyA@@YGJPADIPBD@Z			; StringCchCopyA
PUBLIC	?StringCchCatA@@YGJPADIPBD@Z			; StringCchCatA
PUBLIC	?StringCchVPrintfA@@YGJPADIPBD0@Z		; StringCchVPrintfA
PUBLIC	?StringCchPrintfA@@YAJPADIPBDZZ			; StringCchPrintfA
PUBLIC	?StringCchLengthA@@YGJPBDIPAI@Z			; StringCchLengthA
PUBLIC	??0CDXUTTimer@@QAE@XZ				; CDXUTTimer::CDXUTTimer
PUBLIC	?Reset@CDXUTTimer@@QAEXXZ			; CDXUTTimer::Reset
PUBLIC	?Start@CDXUTTimer@@QAEXXZ			; CDXUTTimer::Start
PUBLIC	?Stop@CDXUTTimer@@QAEXXZ			; CDXUTTimer::Stop
PUBLIC	?Advance@CDXUTTimer@@QAEXXZ			; CDXUTTimer::Advance
PUBLIC	?GetAbsoluteTime@CDXUTTimer@@QAENXZ		; CDXUTTimer::GetAbsoluteTime
PUBLIC	?GetTime@CDXUTTimer@@QAENXZ			; CDXUTTimer::GetTime
PUBLIC	?GetElapsedTime@CDXUTTimer@@QAENXZ		; CDXUTTimer::GetElapsedTime
PUBLIC	?IsStopped@CDXUTTimer@@QAE_NXZ			; CDXUTTimer::IsStopped
PUBLIC	?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ	; DXUTGetGlobalTimer
PUBLIC	??1CDXUTResourceCache@@QAE@XZ			; CDXUTResourceCache::~CDXUTResourceCache
PUBLIC	?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@@Z ; CDXUTResourceCache::CreateTextureFromFile
PUBLIC	?CreateTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z ; CDXUTResourceCache::CreateTextureFromFileEx
PUBLIC	?CreateTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DTexture9@@@Z ; CDXUTResourceCache::CreateTextureFromResource
PUBLIC	?CreateTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z ; CDXUTResourceCache::CreateTextureFromResourceEx
PUBLIC	?CreateCubeTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DCubeTexture9@@@Z ; CDXUTResourceCache::CreateCubeTextureFromFile
PUBLIC	?CreateCubeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z ; CDXUTResourceCache::CreateCubeTextureFromFileEx
PUBLIC	?CreateCubeTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DCubeTexture9@@@Z ; CDXUTResourceCache::CreateCubeTextureFromResource
PUBLIC	?CreateCubeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z ; CDXUTResourceCache::CreateCubeTextureFromResourceEx
PUBLIC	?CreateVolumeTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DVolumeTexture9@@@Z ; CDXUTResourceCache::CreateVolumeTextureFromFile
PUBLIC	?CreateVolumeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z ; CDXUTResourceCache::CreateVolumeTextureFromFileEx
PUBLIC	?CreateVolumeTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DVolumeTexture9@@@Z ; CDXUTResourceCache::CreateVolumeTextureFromResource
PUBLIC	?CreateVolumeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z ; CDXUTResourceCache::CreateVolumeTextureFromResourceEx
PUBLIC	?CreateFontA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@IIIIHKKKKPBDPAPAUID3DXFont@@@Z ; CDXUTResourceCache::CreateFontA
PUBLIC	?CreateFontIndirectA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBU_D3DXFONT_DESCA@@PAPAUID3DXFont@@@Z ; CDXUTResourceCache::CreateFontIndirectA
PUBLIC	?CreateEffectFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPBU_D3DXMACRO@@PAUID3DXInclude@@KPAUID3DXEffectPool@@PAPAUID3DXEffect@@PAPAUID3DXBuffer@@@Z ; CDXUTResourceCache::CreateEffectFromFile
PUBLIC	?CreateEffectFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPBU_D3DXMACRO@@PAUID3DXInclude@@KPAUID3DXEffectPool@@PAPAUID3DXEffect@@PAPAUID3DXBuffer@@@Z ; CDXUTResourceCache::CreateEffectFromResource
PUBLIC	?OnCreateDevice@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTResourceCache::OnCreateDevice
PUBLIC	?OnResetDevice@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTResourceCache::OnResetDevice
PUBLIC	?OnLostDevice@CDXUTResourceCache@@QAEJXZ	; CDXUTResourceCache::OnLostDevice
PUBLIC	?OnDestroyDevice@CDXUTResourceCache@@QAEJXZ	; CDXUTResourceCache::OnDestroyDevice
PUBLIC	?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ ; DXUTGetGlobalResourceCache
PUBLIC	??0CDXUTResourceCache@@IAE@XZ			; CDXUTResourceCache::CDXUTResourceCache
PUBLIC	??0?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ ; CGrowableArray<DXUTCache_Texture>::CGrowableArray<DXUTCache_Texture>
PUBLIC	??1?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ ; CGrowableArray<DXUTCache_Texture>::~CGrowableArray<DXUTCache_Texture>
PUBLIC	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
PUBLIC	?SetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Texture>::SetSize
PUBLIC	?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z ; CGrowableArray<DXUTCache_Texture>::Add
PUBLIC	?GetAt@?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
PUBLIC	?Remove@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Texture>::Remove
PUBLIC	?RemoveAll@?$CGrowableArray@UDXUTCache_Texture@@@@QAEXXZ ; CGrowableArray<DXUTCache_Texture>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Texture@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Texture>::SetSizeInternal
PUBLIC	??0?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ	; CGrowableArray<DXUTCache_Effect>::CGrowableArray<DXUTCache_Effect>
PUBLIC	??1?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ	; CGrowableArray<DXUTCache_Effect>::~CGrowableArray<DXUTCache_Effect>
PUBLIC	??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::operator[]
PUBLIC	?SetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Effect>::SetSize
PUBLIC	?Add@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJABUDXUTCache_Effect@@@Z ; CGrowableArray<DXUTCache_Effect>::Add
PUBLIC	?GetAt@?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ ; CGrowableArray<DXUTCache_Effect>::GetSize
PUBLIC	?Remove@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Effect>::Remove
PUBLIC	?RemoveAll@?$CGrowableArray@UDXUTCache_Effect@@@@QAEXXZ ; CGrowableArray<DXUTCache_Effect>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Effect@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Effect>::SetSizeInternal
PUBLIC	??0?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ	; CGrowableArray<DXUTCache_Font>::CGrowableArray<DXUTCache_Font>
PUBLIC	??1?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ	; CGrowableArray<DXUTCache_Font>::~CGrowableArray<DXUTCache_Font>
PUBLIC	??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::operator[]
PUBLIC	?SetSize@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Font>::SetSize
PUBLIC	?Add@?$CGrowableArray@UDXUTCache_Font@@@@QAEJABUDXUTCache_Font@@@Z ; CGrowableArray<DXUTCache_Font>::Add
PUBLIC	?GetAt@?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@UDXUTCache_Font@@@@QBEHXZ ; CGrowableArray<DXUTCache_Font>::GetSize
PUBLIC	?Remove@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Font>::Remove
PUBLIC	?RemoveAll@?$CGrowableArray@UDXUTCache_Font@@@@QAEXXZ ; CGrowableArray<DXUTCache_Font>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Font@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Font>::SetSizeInternal
PUBLIC	??0CD3DArcBall@@QAE@XZ				; CD3DArcBall::CD3DArcBall
PUBLIC	?Reset@CD3DArcBall@@QAEXXZ			; CD3DArcBall::Reset
PUBLIC	?SetWindow@CD3DArcBall@@QAEXHHM@Z		; CD3DArcBall::SetWindow
PUBLIC	?SetOffset@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::SetOffset
PUBLIC	?OnBegin@CD3DArcBall@@QAEXHH@Z			; CD3DArcBall::OnBegin
PUBLIC	?OnMove@CD3DArcBall@@QAEXHH@Z			; CD3DArcBall::OnMove
PUBLIC	?OnEnd@CD3DArcBall@@QAEXXZ			; CD3DArcBall::OnEnd
PUBLIC	?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ; CD3DArcBall::HandleMessages
PUBLIC	?GetRotationMatrix@CD3DArcBall@@QAEPBUD3DXMATRIX@@XZ ; CD3DArcBall::GetRotationMatrix
PUBLIC	?IsBeingDragged@CD3DArcBall@@QBE_NXZ		; CD3DArcBall::IsBeingDragged
PUBLIC	?SetQuatNow@CD3DArcBall@@QAEXUD3DXQUATERNION@@@Z ; CD3DArcBall::SetQuatNow
PUBLIC	?QuatFromBallPoints@CD3DArcBall@@SA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; CD3DArcBall::QuatFromBallPoints
PUBLIC	?ScreenToVector@CD3DArcBall@@IAE?AUD3DXVECTOR3@@MM@Z ; CD3DArcBall::ScreenToVector
PUBLIC	??0CBaseCamera@@QAE@XZ				; CBaseCamera::CBaseCamera
PUBLIC	?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ; CBaseCamera::HandleMessages
PUBLIC	?Reset@CBaseCamera@@UAEXXZ			; CBaseCamera::Reset
PUBLIC	?SetViewParams@CBaseCamera@@UAEXPAUD3DXVECTOR3@@0@Z ; CBaseCamera::SetViewParams
PUBLIC	?SetProjParams@CBaseCamera@@UAEXMMMM@Z		; CBaseCamera::SetProjParams
PUBLIC	?SetDragRect@CBaseCamera@@UAEXAAUtagRECT@@@Z	; CBaseCamera::SetDragRect
PUBLIC	?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z ; CBaseCamera::MapKey
PUBLIC	?IsKeyDown@CBaseCamera@@IBE_NE@Z		; CBaseCamera::IsKeyDown
PUBLIC	?ConstrainToBoundary@CBaseCamera@@IAEXPAUD3DXVECTOR3@@@Z ; CBaseCamera::ConstrainToBoundary
PUBLIC	?UpdateMouseDelta@CBaseCamera@@IAEXM@Z		; CBaseCamera::UpdateMouseDelta
PUBLIC	?UpdateVelocity@CBaseCamera@@IAEXM@Z		; CBaseCamera::UpdateVelocity
PUBLIC	??0CFirstPersonCamera@@QAE@XZ			; CFirstPersonCamera::CFirstPersonCamera
PUBLIC	?FrameMove@CFirstPersonCamera@@UAEXM@Z		; CFirstPersonCamera::FrameMove
PUBLIC	?SetRotateButtons@CFirstPersonCamera@@QAEX_N00@Z ; CFirstPersonCamera::SetRotateButtons
PUBLIC	??0CModelViewerCamera@@QAE@XZ			; CModelViewerCamera::CModelViewerCamera
PUBLIC	?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z ; CModelViewerCamera::HandleMessages
PUBLIC	?FrameMove@CModelViewerCamera@@UAEXM@Z		; CModelViewerCamera::FrameMove
PUBLIC	?SetDragRect@CModelViewerCamera@@UAEXAAUtagRECT@@@Z ; CModelViewerCamera::SetDragRect
PUBLIC	?Reset@CModelViewerCamera@@UAEXXZ		; CModelViewerCamera::Reset
PUBLIC	?SetViewParams@CModelViewerCamera@@UAEXPAUD3DXVECTOR3@@0@Z ; CModelViewerCamera::SetViewParams
PUBLIC	?SetWindow@CModelViewerCamera@@QAEXHHM@Z	; CModelViewerCamera::SetWindow
PUBLIC	?SetRadius@CModelViewerCamera@@QAEXMMM@Z	; CModelViewerCamera::SetRadius
PUBLIC	??0CDXUTTextHelper@@QAE@PAUID3DXFont@@PAUID3DXSprite@@H@Z ; CDXUTTextHelper::CDXUTTextHelper
PUBLIC	?Begin@CDXUTTextHelper@@QAEXXZ			; CDXUTTextHelper::Begin
PUBLIC	?DrawFormattedTextLine@CDXUTTextHelper@@QAAJPBDZZ ; CDXUTTextHelper::DrawFormattedTextLine
PUBLIC	?DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z	; CDXUTTextHelper::DrawTextLine
PUBLIC	?DrawFormattedTextLine@CDXUTTextHelper@@QAAJAAUtagRECT@@KPBDZZ ; CDXUTTextHelper::DrawFormattedTextLine
PUBLIC	?DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z ; CDXUTTextHelper::DrawTextLine
PUBLIC	?End@CDXUTTextHelper@@QAEXXZ			; CDXUTTextHelper::End
PUBLIC	??0CDXUTLineManager@@QAE@XZ			; CDXUTLineManager::CDXUTLineManager
PUBLIC	??1CDXUTLineManager@@QAE@XZ			; CDXUTLineManager::~CDXUTLineManager
PUBLIC	?OnCreatedDevice@CDXUTLineManager@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTLineManager::OnCreatedDevice
PUBLIC	?OnResetDevice@CDXUTLineManager@@QAEJXZ		; CDXUTLineManager::OnResetDevice
PUBLIC	?OnRender@CDXUTLineManager@@QAEJXZ		; CDXUTLineManager::OnRender
PUBLIC	?OnLostDevice@CDXUTLineManager@@QAEJXZ		; CDXUTLineManager::OnLostDevice
PUBLIC	?OnDeletedDevice@CDXUTLineManager@@QAEJXZ	; CDXUTLineManager::OnDeletedDevice
PUBLIC	?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z ; CDXUTLineManager::AddLine
PUBLIC	?AddRect@CDXUTLineManager@@QAEJPAHUtagRECT@@KMM_N@Z ; CDXUTLineManager::AddRect
PUBLIC	?RemoveLine@CDXUTLineManager@@QAEJH@Z		; CDXUTLineManager::RemoveLine
PUBLIC	?RemoveAllLines@CDXUTLineManager@@QAEJXZ	; CDXUTLineManager::RemoveAllLines
PUBLIC	??0?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::CGrowableArray<CDXUTLineManager::LINE_NODE *>
PUBLIC	??1?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::~CGrowableArray<CDXUTLineManager::LINE_NODE *>
PUBLIC	?SetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJH@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSize
PUBLIC	?Add@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJABQAULINE_NODE@CDXUTLineManager@@@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::Add
PUBLIC	?SetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJHABQAULINE_NODE@CDXUTLineManager@@@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetAt
PUBLIC	?GetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEAAPAULINE_NODE@CDXUTLineManager@@H@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QBEHXZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetSize
PUBLIC	?RemoveAll@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEXXZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@IAEJH@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSizeInternal
PUBLIC	??0CDXUTDirectionWidget@@QAE@XZ			; CDXUTDirectionWidget::CDXUTDirectionWidget
PUBLIC	?StaticOnCreateDevice@CDXUTDirectionWidget@@SAJPAUIDirect3DDevice9@@@Z ; CDXUTDirectionWidget::StaticOnCreateDevice
PUBLIC	?OnResetDevice@CDXUTDirectionWidget@@QAEJPBU_D3DSURFACE_DESC@@@Z ; CDXUTDirectionWidget::OnResetDevice
PUBLIC	?OnRender@CDXUTDirectionWidget@@QAEJUD3DXCOLOR@@PBUD3DXMATRIX@@1PBUD3DXVECTOR3@@@Z ; CDXUTDirectionWidget::OnRender
PUBLIC	?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z ; CDXUTDirectionWidget::HandleMessages
PUBLIC	?StaticOnLostDevice@CDXUTDirectionWidget@@SAXXZ	; CDXUTDirectionWidget::StaticOnLostDevice
PUBLIC	?StaticOnDestroyDevice@CDXUTDirectionWidget@@SAXXZ ; CDXUTDirectionWidget::StaticOnDestroyDevice
PUBLIC	?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ	; CDXUTDirectionWidget::UpdateLightDir
PUBLIC	?DXUTDisplaySwitchingToREFWarning@@YAXXZ	; DXUTDisplaySwitchingToREFWarning
PUBLIC	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z	; DXUTFindDXSDKMediaFileCch
PUBLIC	?DXUTSetMediaSearchPath@@YAJPBD@Z		; DXUTSetMediaSearchPath
PUBLIC	?DXUTGetMediaSearchPath@@YAPBDXZ		; DXUTGetMediaSearchPath
PUBLIC	?DXUTD3DFormatToString@@YAPBDW4_D3DFORMAT@@_N@Z	; DXUTD3DFormatToString
PUBLIC	?DXUTGetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z	; DXUTGetCubeMapViewMatrix
PUBLIC	?DXUTOutputDebugStringW@@YAXPBDZZ		; DXUTOutputDebugStringW
PUBLIC	?DXUTOutputDebugStringA@@YAXPBDZZ		; DXUTOutputDebugStringA
PUBLIC	?DXUT_Dynamic_Direct3DCreate9@@YGPAUIDirect3D9@@I@Z ; DXUT_Dynamic_Direct3DCreate9
PUBLIC	?DXUT_Dynamic_D3DPERF_BeginEvent@@YGHKPBD@Z	; DXUT_Dynamic_D3DPERF_BeginEvent
PUBLIC	?DXUT_Dynamic_D3DPERF_EndEvent@@YGHXZ		; DXUT_Dynamic_D3DPERF_EndEvent
PUBLIC	?DXUT_Dynamic_D3DPERF_SetMarker@@YGXKPBD@Z	; DXUT_Dynamic_D3DPERF_SetMarker
PUBLIC	?DXUT_Dynamic_D3DPERF_SetRegion@@YGXKPBD@Z	; DXUT_Dynamic_D3DPERF_SetRegion
PUBLIC	?DXUT_Dynamic_D3DPERF_QueryRepeatFrame@@YGHXZ	; DXUT_Dynamic_D3DPERF_QueryRepeatFrame
PUBLIC	?DXUT_Dynamic_D3DPERF_SetOptions@@YGXK@Z	; DXUT_Dynamic_D3DPERF_SetOptions
PUBLIC	?DXUT_Dynamic_D3DPERF_GetStatus@@YGKXZ		; DXUT_Dynamic_D3DPERF_GetStatus
PUBLIC	?DXUTFindMediaSearchTypicalDirs@@YA_NPADHPBD00@Z ; DXUTFindMediaSearchTypicalDirs
PUBLIC	?DXUTFindMediaSearchParentDirs@@YA_NPADH00@Z	; DXUTFindMediaSearchParentDirs
PUBLIC	?DisplaySwitchToREFWarningProc@@YGHPAUHWND__@@IIJ@Z ; DisplaySwitchToREFWarningProc
PUBLIC	?DXUTMediaSearchPath@@YAPADXZ			; DXUTMediaSearchPath
PUBLIC	??_7CBaseCamera@@6B@				; CBaseCamera::`vftable'
PUBLIC	??_7CFirstPersonCamera@@6B@			; CFirstPersonCamera::`vftable'
PUBLIC	??_7CModelViewerCamera@@6B@			; CModelViewerCamera::`vftable'
PUBLIC	??_C@_0CD@JNJEACIN@Software?2Microsoft?2DirectX?59?40?5S@ ; `string'
PUBLIC	??_C@_0BE@ONMNIDPM@Skip?5Warning?5On?5REF?$AA@	; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0O@LMJDHGJK@MS?5Sans?5Serif?$AA@		; `string'
PUBLIC	??_C@_0KC@EOHLBFGP@Switching?5to?5the?5Direct3D?5refere@ ; `string'
PUBLIC	??_C@_04ILFHLBJA@?$CGYes?$AA@			; `string'
PUBLIC	??_C@_03MDIDAHKD@?$CGNo?$AA@			; `string'
PUBLIC	??_C@_0BC@KPPJBALB@?$CGDon?8t?5show?5again?$AA@	; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_08GDMOFFMA@media?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_05LGCFLFFL@?4?4?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_08OPCCNCAK@?$CFs?2?4?4?2?$CFs?$AA@	; `string'
PUBLIC	??_C@_0M@HKPCIGNN@?$CFs?2?4?4?2?4?4?2?$CFs?$AA@	; `string'
PUBLIC	??_C@_0M@NALGHNGE@?$CFs?2?4?4?2?$CFs?2?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0P@HEBEMA@?$CFs?2?4?4?2?4?4?2?$CFs?2?$CFs?$AA@ ; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_05BPCBICBK@?$CFs?2?4?4?$AA@		; `string'
PUBLIC	??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@		; `string'
PUBLIC	??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@		; `string'
PUBLIC	??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@		; `string'
PUBLIC	??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@		; `string'
PUBLIC	??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@		; `string'
PUBLIC	??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@		; `string'
PUBLIC	??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@		; `string'
PUBLIC	??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@		; `string'
PUBLIC	??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@		; `string'
PUBLIC	??_C@_09JNGIHEFB@D3DFMT_A8?$AA@			; `string'
PUBLIC	??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@		; `string'
PUBLIC	??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@		; `string'
PUBLIC	??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@	; `string'
PUBLIC	??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@		; `string'
PUBLIC	??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@		; `string'
PUBLIC	??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@		; `string'
PUBLIC	??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@	; `string'
PUBLIC	??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@	; `string'
PUBLIC	??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@		; `string'
PUBLIC	??_C@_09IAIMLNBG@D3DFMT_P8?$AA@			; `string'
PUBLIC	??_C@_09JFLAOHAC@D3DFMT_L8?$AA@			; `string'
PUBLIC	??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@		; `string'
PUBLIC	??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@		; `string'
PUBLIC	??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@		; `string'
PUBLIC	??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@		; `string'
PUBLIC	??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@		; `string'
PUBLIC	??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@		; `string'
PUBLIC	??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@		; `string'
PUBLIC	??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@	; `string'
PUBLIC	??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@		; `string'
PUBLIC	??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@		; `string'
PUBLIC	??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@		; `string'
PUBLIC	??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@		; `string'
PUBLIC	??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@		; `string'
PUBLIC	??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@		; `string'
PUBLIC	??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@		; `string'
PUBLIC	??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@	; `string'
PUBLIC	??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@		; `string'
PUBLIC	??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@		; `string'
PUBLIC	??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@		; `string'
PUBLIC	??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@		; `string'
PUBLIC	??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@		; `string'
PUBLIC	??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@		; `string'
PUBLIC	??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@		; `string'
PUBLIC	??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@	; `string'
PUBLIC	??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@		; `string'
PUBLIC	??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@		; `string'
PUBLIC	??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@	; `string'
PUBLIC	??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@	; `string'
PUBLIC	??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@		; `string'
PUBLIC	??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@		; `string'
PUBLIC	??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@	; `string'
PUBLIC	??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@		; `string'
PUBLIC	??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@		; `string'
PUBLIC	??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@	; `string'
PUBLIC	??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@		; `string'
PUBLIC	??_C@_0P@BJJPCHFI@Unknown?5format?$AA@		; `string'
PUBLIC	??_C@_07NCBDPBMK@D3DFMT_?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z@4JA ; `CDXUTTextHelper::DrawTextLine'::`2'::__LINE__Var
PUBLIC	??_C@_0N@LJGOJBAF@DrawTextLine?$AA@		; `string'
PUBLIC	??_C@_0CP@NFIJGOGO@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@ ; `string'
PUBLIC	??_C@_08JPMBLOLP@DrawText?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z@4JA ; `CDXUTTextHelper::DrawTextLine'::`2'::__LINE__Var
PUBLIC	??_C@_0BB@NKBHBICM@UI?2DXUTShared?4fx?$AA@	; `string'
PUBLIC	??_C@_0L@HCLLIMDN@UI?2arrow?4x?$AA@		; `string'
PUBLIC	??_C@_0BK@MCNKOHBK@RenderWith1LightNoTexture?$AA@ ; `string'
PUBLIC	??_C@_0BH@JOJPMGMM@g_MaterialDiffuseColor?$AA@	; `string'
PUBLIC	??_C@_09KLCMKMDE@?2d3d9?4dll?$AA@		; `string'
PUBLIC	??_C@_0BA@FAFMMBOF@Direct3DCreate9?$AA@		; `string'
PUBLIC	??_C@_0BD@CLFNPJIE@D3DPERF_BeginEvent?$AA@	; `string'
PUBLIC	??_C@_0BB@KDHKMPMH@D3DPERF_EndEvent?$AA@	; `string'
PUBLIC	??_C@_0BC@BJDCGGFC@D3DPERF_SetMarker?$AA@	; `string'
PUBLIC	??_C@_0BC@PKNMMAJB@D3DPERF_SetRegion?$AA@	; `string'
PUBLIC	??_C@_0BJ@IGNIEEPP@D3DPERF_QueryRepeatFrame?$AA@ ; `string'
PUBLIC	??_C@_0BD@NEPKLCIB@D3DPERF_SetOptions?$AA@	; `string'
PUBLIC	??_C@_0BC@HJIKALNB@D3DPERF_GetStatus?$AA@	; `string'
PUBLIC	??_C@_0CH@FHFOAIFP@DXTrace?3?5?$CFs?5?$CI?$CFd?$CJ?5returned?50x?$CFx?0?5@ ; `string'
PUBLIC	??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_R4CBaseCamera@@6B@				; CBaseCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseCamera@@@8				; CBaseCamera `RTTI Type Descriptor'
PUBLIC	??_R3CBaseCamera@@8				; CBaseCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseCamera@@8				; CBaseCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseCamera@@8			; CBaseCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFirstPersonCamera@@6B@			; CFirstPersonCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFirstPersonCamera@@@8			; CFirstPersonCamera `RTTI Type Descriptor'
PUBLIC	??_R3CFirstPersonCamera@@8			; CFirstPersonCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFirstPersonCamera@@8			; CFirstPersonCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFirstPersonCamera@@8		; CFirstPersonCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CModelViewerCamera@@6B@			; CModelViewerCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCModelViewerCamera@@@8			; CModelViewerCamera `RTTI Type Descriptor'
PUBLIC	??_R3CModelViewerCamera@@8			; CModelViewerCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CModelViewerCamera@@8			; CModelViewerCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CModelViewerCamera@@8		; CModelViewerCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@358637bd
PUBLIC	__real@3c23d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40000000
PUBLIC	__real@40490fdb
PUBLIC	__real@40a00000
PUBLIC	__real@437f0000
PUBLIC	__real@447a0000
PUBLIC	__real@7f7fffff
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fdb
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_memmove:PROC
EXTRN	_strrchr:PROC
EXTRN	_strstr:PROC
EXTRN	__imp__GetFileAttributesA@4:PROC
EXTRN	__imp__GetFullPathNameA@16:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__QueryPerformanceCounter@4:PROC
EXTRN	__imp__QueryPerformanceFrequency@4:PROC
EXTRN	__imp__GetSystemDirectoryA@8:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__lstrcmpA@8:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__DialogBoxIndirectParamA@20:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	__imp__CheckDlgButton@12:PROC
EXTRN	__imp__IsDlgButtonChecked@8:PROC
EXTRN	__imp__SetCapture@4:PROC
EXTRN	__imp__ReleaseCapture@0:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__GetForegroundWindow@0:PROC
EXTRN	__imp__SetWindowTextA@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__SetCursorPos@8:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	__imp__PtInRect@12:PROC
EXTRN	__imp__GetDesktopWindow@0:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	__imp__CompareStringA@24:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	__imp__RegSetValueExA@24:PROC
EXTRN	_free:PROC
EXTRN	_realloc:PROC
EXTRN	__wassert:PROC
EXTRN	_atan2:PROC
EXTRN	_sqrt:PROC
EXTRN	__vsnprintf:PROC
EXTRN	_sprintf:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixInverse@12:PROC
EXTRN	_D3DXMatrixScaling@16:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixRotationX@8:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	_D3DXMatrixRotationYawPitchRoll@16:PROC
EXTRN	_D3DXMatrixLookAtLH@16:PROC
EXTRN	_D3DXMatrixPerspectiveFovLH@20:PROC
EXTRN	_D3DXQuaternionRotationMatrix@8:PROC
EXTRN	_D3DXQuaternionMultiply@12:PROC
EXTRN	_D3DXCreateFontIndirectA@12:PROC
EXTRN	_D3DXCreateLine@8:PROC
EXTRN	_D3DXLoadMeshFromXA@32:PROC
EXTRN	_D3DXCreateEffectFromFileA@32:PROC
EXTRN	_D3DXCreateEffectFromResourceA@36:PROC
EXTRN	_D3DXCreateTextureFromFileExA@56:PROC
EXTRN	_D3DXCreateCubeTextureFromFileExA@52:PROC
EXTRN	_D3DXCreateVolumeTextureFromFileExA@60:PROC
EXTRN	_D3DXCreateTextureFromResourceExA@60:PROC
EXTRN	_D3DXCreateCubeTextureFromResourceExA@56:PROC
EXTRN	_D3DXCreateVolumeTextureFromResourceExA@64:PROC
EXTRN	?DXUTShutdown@@YAXH@Z:PROC			; DXUTShutdown
EXTRN	?DXUTGetHINSTANCE@@YAPAUHINSTANCE__@@XZ:PROC	; DXUTGetHINSTANCE
EXTRN	?DXUTGetHWND@@YAPAUHWND__@@XZ:PROC		; DXUTGetHWND
EXTRN	?DXUTGetFPS@@YAMXZ:PROC				; DXUTGetFPS
EXTRN	?DXUTGetWindowTitle@@YAPBDXZ:PROC		; DXUTGetWindowTitle
EXTRN	?DXUTGetShowMsgBoxOnError@@YA_NXZ:PROC		; DXUTGetShowMsgBoxOnError
EXTRN	?DXUTTrace@@YGJPBDKJ0_N@Z:PROC			; DXUTTrace
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__ftoui3:PROC
EXTRN	__ltod3:PROC
EXTRN	_memset:PROC
EXTRN	_IID_IDirect3DBaseTexture9:BYTE
EXTRN	_IID_IDirect3DTexture9:BYTE
EXTRN	_IID_IDirect3DCubeTexture9:BYTE
EXTRN	_IID_IDirect3DVolumeTexture9:BYTE
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?cache@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4V2@A DB 024H DUP (?) ; `DXUTGetGlobalResourceCache'::`2'::cache
?$S1@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4IA DD 01H DUP (?) ; `DXUTGetGlobalResourceCache'::`2'::$S1
?timer@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4V2@A DB 022H DUP (?) ; `DXUTGetGlobalTimer'::`2'::timer
	ALIGN	4

?$S2@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4IA DD 01H DUP (?) ; `DXUTGetGlobalTimer'::`2'::$S2
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-006
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CModelViewerCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CModelViewerCamera@@8 DD FLAT:??_R0?AVCModelViewerCamera@@@8 ; CModelViewerCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CModelViewerCamera@@8
rdata$r	SEGMENT
??_R2CModelViewerCamera@@8 DD FLAT:??_R1A@?0A@EA@CModelViewerCamera@@8 ; CModelViewerCamera::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R3CModelViewerCamera@@8
rdata$r	SEGMENT
??_R3CModelViewerCamera@@8 DD 00H			; CModelViewerCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCModelViewerCamera@@@8
data$r	SEGMENT
??_R0?AVCModelViewerCamera@@@8 DD FLAT:??_7type_info@@6B@ ; CModelViewerCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCModelViewerCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CModelViewerCamera@@6B@
rdata$r	SEGMENT
??_R4CModelViewerCamera@@6B@ DD 00H			; CModelViewerCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCModelViewerCamera@@@8
	DD	FLAT:??_R3CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFirstPersonCamera@@8 DD FLAT:??_R0?AVCFirstPersonCamera@@@8 ; CFirstPersonCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R2CFirstPersonCamera@@8 DD FLAT:??_R1A@?0A@EA@CFirstPersonCamera@@8 ; CFirstPersonCamera::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R3CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R3CFirstPersonCamera@@8 DD 00H			; CFirstPersonCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFirstPersonCamera@@@8
data$r	SEGMENT
??_R0?AVCFirstPersonCamera@@@8 DD FLAT:??_7type_info@@6B@ ; CFirstPersonCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFirstPersonCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CFirstPersonCamera@@6B@
rdata$r	SEGMENT
??_R4CFirstPersonCamera@@6B@ DD 00H			; CFirstPersonCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFirstPersonCamera@@@8
	DD	FLAT:??_R3CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseCamera@@8 DD FLAT:??_R0?AVCBaseCamera@@@8 ; CBaseCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseCamera@@8
rdata$r	SEGMENT
??_R2CBaseCamera@@8 DD FLAT:??_R1A@?0A@EA@CBaseCamera@@8 ; CBaseCamera::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseCamera@@8
rdata$r	SEGMENT
??_R3CBaseCamera@@8 DD 00H				; CBaseCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseCamera@@@8
data$r	SEGMENT
??_R0?AVCBaseCamera@@@8 DD FLAT:??_7type_info@@6B@	; CBaseCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBaseCamera@@6B@
rdata$r	SEGMENT
??_R4CBaseCamera@@6B@ DD 00H				; CBaseCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCamera@@@8
	DD	FLAT:??_R3CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'n'
	DB	00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'n', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'n'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 's', 00H, 'a', 00H, 'c', 00H
	DB	'o', 00H, '\', 00H, 'd', 00H, '3', 00H, 'd', 00H, '9', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'd', 00H, 'x', 00H, 'u', 00H, 't', 00H, 'm', 00H, 'i'
	DB	00H, 's', 00H, 'c', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FHFOAIFP@DXTrace?3?5?$CFs?5?$CI?$CFd?$CJ?5returned?50x?$CFx?0?5@
CONST	SEGMENT
??_C@_0CH@FHFOAIFP@DXTrace?3?5?$CFs?5?$CI?$CFd?$CJ?5returned?50x?$CFx?0?5@ DB 'D'
	DB	'XTrace: %s (%d) returned 0x%x, msg=%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HJIKALNB@D3DPERF_GetStatus?$AA@
CONST	SEGMENT
??_C@_0BC@HJIKALNB@D3DPERF_GetStatus?$AA@ DB 'D3DPERF_GetStatus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NEPKLCIB@D3DPERF_SetOptions?$AA@
CONST	SEGMENT
??_C@_0BD@NEPKLCIB@D3DPERF_SetOptions?$AA@ DB 'D3DPERF_SetOptions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IGNIEEPP@D3DPERF_QueryRepeatFrame?$AA@
CONST	SEGMENT
??_C@_0BJ@IGNIEEPP@D3DPERF_QueryRepeatFrame?$AA@ DB 'D3DPERF_QueryRepeatF'
	DB	'rame', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PKNMMAJB@D3DPERF_SetRegion?$AA@
CONST	SEGMENT
??_C@_0BC@PKNMMAJB@D3DPERF_SetRegion?$AA@ DB 'D3DPERF_SetRegion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BJDCGGFC@D3DPERF_SetMarker?$AA@
CONST	SEGMENT
??_C@_0BC@BJDCGGFC@D3DPERF_SetMarker?$AA@ DB 'D3DPERF_SetMarker', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KDHKMPMH@D3DPERF_EndEvent?$AA@
CONST	SEGMENT
??_C@_0BB@KDHKMPMH@D3DPERF_EndEvent?$AA@ DB 'D3DPERF_EndEvent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CLFNPJIE@D3DPERF_BeginEvent?$AA@
CONST	SEGMENT
??_C@_0BD@CLFNPJIE@D3DPERF_BeginEvent?$AA@ DB 'D3DPERF_BeginEvent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FAFMMBOF@Direct3DCreate9?$AA@
CONST	SEGMENT
??_C@_0BA@FAFMMBOF@Direct3DCreate9?$AA@ DB 'Direct3DCreate9', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KLCMKMDE@?2d3d9?4dll?$AA@
CONST	SEGMENT
??_C@_09KLCMKMDE@?2d3d9?4dll?$AA@ DB '\d3d9.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JOJPMGMM@g_MaterialDiffuseColor?$AA@
CONST	SEGMENT
??_C@_0BH@JOJPMGMM@g_MaterialDiffuseColor?$AA@ DB 'g_MaterialDiffuseColor'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MCNKOHBK@RenderWith1LightNoTexture?$AA@
CONST	SEGMENT
??_C@_0BK@MCNKOHBK@RenderWith1LightNoTexture?$AA@ DB 'RenderWith1LightNoT'
	DB	'exture', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HCLLIMDN@UI?2arrow?4x?$AA@
CONST	SEGMENT
??_C@_0L@HCLLIMDN@UI?2arrow?4x?$AA@ DB 'UI\arrow.x', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NKBHBICM@UI?2DXUTShared?4fx?$AA@
CONST	SEGMENT
??_C@_0BB@NKBHBICM@UI?2DXUTShared?4fx?$AA@ DB 'UI\DXUTShared.fx', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z@4JA DD 09a8H ; `CDXUTTextHelper::DrawTextLine'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08JPMBLOLP@DrawText?$AA@
CONST	SEGMENT
??_C@_08JPMBLOLP@DrawText?$AA@ DB 'DrawText', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NFIJGOGO@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
CONST	SEGMENT
??_C@_0CP@NFIJGOGO@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@ DB 'z:\sampsrc'
	DB	'\02xu1\saco\d3d9\common\dxutmisc.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LJGOJBAF@DrawTextLine?$AA@
CONST	SEGMENT
??_C@_0N@LJGOJBAF@DrawTextLine?$AA@ DB 'DrawTextLine', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z@4JA DD 0988H ; `CDXUTTextHelper::DrawTextLine'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07NCBDPBMK@D3DFMT_?$AA@
CONST	SEGMENT
??_C@_07NCBDPBMK@D3DFMT_?$AA@ DB 'D3DFMT_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BJJPCHFI@Unknown?5format?$AA@
CONST	SEGMENT
??_C@_0P@BJJPCHFI@Unknown?5format?$AA@ DB 'Unknown format', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@
CONST	SEGMENT
??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@ DB 'D3DFMT_CxV8U8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@
CONST	SEGMENT
??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@ DB 'D3DFMT_A32B32G32R32F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@
CONST	SEGMENT
??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@ DB 'D3DFMT_G32R32F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@
CONST	SEGMENT
??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@ DB 'D3DFMT_R32F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@
CONST	SEGMENT
??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@ DB 'D3DFMT_A16B16G16R16F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@
CONST	SEGMENT
??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@ DB 'D3DFMT_G16R16F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@
CONST	SEGMENT
??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@ DB 'D3DFMT_R16F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@
CONST	SEGMENT
??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@ DB 'D3DFMT_MULTI2_ARGB8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@
CONST	SEGMENT
??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@ DB 'D3DFMT_Q16W16V16U16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@
CONST	SEGMENT
??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@ DB 'D3DFMT_INDEX32', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@
CONST	SEGMENT
??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@ DB 'D3DFMT_INDEX16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@
CONST	SEGMENT
??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@ DB 'D3DFMT_VERTEXDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@
CONST	SEGMENT
??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@ DB 'D3DFMT_L16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@
CONST	SEGMENT
??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@ DB 'D3DFMT_D16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@
CONST	SEGMENT
??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@ DB 'D3DFMT_D24X4S4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@
CONST	SEGMENT
??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@ DB 'D3DFMT_D24X8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@
CONST	SEGMENT
??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@ DB 'D3DFMT_D24S8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@
CONST	SEGMENT
??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@ DB 'D3DFMT_D15S1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@
CONST	SEGMENT
??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@ DB 'D3DFMT_D32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@
CONST	SEGMENT
??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@ DB 'D3DFMT_D16_LOCKABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@
CONST	SEGMENT
??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@ DB 'D3DFMT_DXT5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@
CONST	SEGMENT
??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@ DB 'D3DFMT_DXT4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@
CONST	SEGMENT
??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@ DB 'D3DFMT_DXT3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@
CONST	SEGMENT
??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@ DB 'D3DFMT_DXT2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@
CONST	SEGMENT
??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@ DB 'D3DFMT_DXT1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@
CONST	SEGMENT
??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@ DB 'D3DFMT_YUY2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@
CONST	SEGMENT
??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@ DB 'D3DFMT_UYVY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@
CONST	SEGMENT
??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@ DB 'D3DFMT_A2W10V10U10', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@
CONST	SEGMENT
??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@ DB 'D3DFMT_V16U16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@
CONST	SEGMENT
??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@ DB 'D3DFMT_Q8W8V8U8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@
CONST	SEGMENT
??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@ DB 'D3DFMT_X8L8V8U8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@
CONST	SEGMENT
??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@ DB 'D3DFMT_L6V5U5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@
CONST	SEGMENT
??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@ DB 'D3DFMT_V8U8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@
CONST	SEGMENT
??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@ DB 'D3DFMT_A4L4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@
CONST	SEGMENT
??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@ DB 'D3DFMT_A8L8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JFLAOHAC@D3DFMT_L8?$AA@
CONST	SEGMENT
??_C@_09JFLAOHAC@D3DFMT_L8?$AA@ DB 'D3DFMT_L8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IAIMLNBG@D3DFMT_P8?$AA@
CONST	SEGMENT
??_C@_09IAIMLNBG@D3DFMT_P8?$AA@ DB 'D3DFMT_P8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@
CONST	SEGMENT
??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@ DB 'D3DFMT_A8P8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@
CONST	SEGMENT
??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@ DB 'D3DFMT_A16B16G16R16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@
CONST	SEGMENT
??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@ DB 'D3DFMT_A2R10G10B10', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@
CONST	SEGMENT
??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@ DB 'D3DFMT_G16R16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@
CONST	SEGMENT
??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@ DB 'D3DFMT_X8B8G8R8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@
CONST	SEGMENT
??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@ DB 'D3DFMT_A8B8G8R8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@
CONST	SEGMENT
??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@ DB 'D3DFMT_A2B10G10R10', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@
CONST	SEGMENT
??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@ DB 'D3DFMT_X4R4G4B4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@
CONST	SEGMENT
??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@ DB 'D3DFMT_A8R3G3B2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNGIHEFB@D3DFMT_A8?$AA@
CONST	SEGMENT
??_C@_09JNGIHEFB@D3DFMT_A8?$AA@ DB 'D3DFMT_A8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@
CONST	SEGMENT
??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@ DB 'D3DFMT_R3G3B2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@
CONST	SEGMENT
??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@ DB 'D3DFMT_A4R4G4B4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@
CONST	SEGMENT
??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@ DB 'D3DFMT_A1R5G5B5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@
CONST	SEGMENT
??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@ DB 'D3DFMT_X1R5G5B5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@
CONST	SEGMENT
??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@ DB 'D3DFMT_R5G6B5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@
CONST	SEGMENT
??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@ DB 'D3DFMT_X8R8G8B8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@
CONST	SEGMENT
??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@ DB 'D3DFMT_A8R8G8B8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@
CONST	SEGMENT
??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@ DB 'D3DFMT_R8G8B8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@
CONST	SEGMENT
??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@ DB 'D3DFMT_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BPCBICBK@?$CFs?2?4?4?$AA@
CONST	SEGMENT
??_C@_05BPCBICBK@?$CFs?2?4?4?$AA@ DB '%s\..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HEBEMA@?$CFs?2?4?4?2?4?4?2?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_0P@HEBEMA@?$CFs?2?4?4?2?4?4?2?$CFs?2?$CFs?$AA@ DB '%s\..\..\%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NALGHNGE@?$CFs?2?4?4?2?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@NALGHNGE@?$CFs?2?4?4?2?$CFs?2?$CFs?$AA@ DB '%s\..\%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HKPCIGNN@?$CFs?2?4?4?2?4?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@HKPCIGNN@?$CFs?2?4?4?2?4?4?2?$CFs?$AA@ DB '%s\..\..\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OPCCNCAK@?$CFs?2?4?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_08OPCCNCAK@?$CFs?2?4?4?2?$CFs?$AA@ DB '%s\..\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@ DB '%s\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@ DB '..\..\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGCFLFFL@?4?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_05LGCFLFFL@?4?4?2?$CFs?$AA@ DB '..\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDMOFFMA@media?2?$CFs?$AA@
CONST	SEGMENT
??_C@_08GDMOFFMA@media?2?$CFs?$AA@ DB 'media\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPPJBALB@?$CGDon?8t?5show?5again?$AA@
CONST	SEGMENT
??_C@_0BC@KPPJBALB@?$CGDon?8t?5show?5again?$AA@ DB '&Don''t show again', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03MDIDAHKD@?$CGNo?$AA@
CONST	SEGMENT
??_C@_03MDIDAHKD@?$CGNo?$AA@ DB '&No', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ILFHLBJA@?$CGYes?$AA@
CONST	SEGMENT
??_C@_04ILFHLBJA@?$CGYes?$AA@ DB '&Yes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0KC@EOHLBFGP@Switching?5to?5the?5Direct3D?5refere@
CONST	SEGMENT
??_C@_0KC@EOHLBFGP@Switching?5to?5the?5Direct3D?5refere@ DB 'Switching to'
	DB	' the Direct3D reference rasterizer, a software device', 0aH, 't'
	DB	'hat implements the entire Direct3D feature set, but runs very'
	DB	' slowly.', 0aH, 'Do you wish to continue?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LMJDHGJK@MS?5Sans?5Serif?$AA@
CONST	SEGMENT
??_C@_0O@LMJDHGJK@MS?5Sans?5Serif?$AA@ DB 'MS Sans Serif', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ONMNIDPM@Skip?5Warning?5On?5REF?$AA@
CONST	SEGMENT
??_C@_0BE@ONMNIDPM@Skip?5Warning?5On?5REF?$AA@ DB 'Skip Warning On REF', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNJEACIN@Software?2Microsoft?2DirectX?59?40?5S@
CONST	SEGMENT
??_C@_0CD@JNJEACIN@Software?2Microsoft?2DirectX?59?40?5S@ DB 'Software\Mi'
	DB	'crosoft\DirectX 9.0 SDK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CModelViewerCamera@@6B@
CONST	SEGMENT
??_7CModelViewerCamera@@6B@ DD FLAT:??_R4CModelViewerCamera@@6B@ ; CModelViewerCamera::`vftable'
	DD	FLAT:?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?FrameMove@CModelViewerCamera@@UAEXM@Z
	DD	FLAT:?Reset@CModelViewerCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CModelViewerCamera@@UAEXPAUD3DXVECTOR3@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CModelViewerCamera@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT ??_7CFirstPersonCamera@@6B@
CONST	SEGMENT
??_7CFirstPersonCamera@@6B@ DD FLAT:??_R4CFirstPersonCamera@@6B@ ; CFirstPersonCamera::`vftable'
	DD	FLAT:?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?FrameMove@CFirstPersonCamera@@UAEXM@Z
	DD	FLAT:?Reset@CBaseCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CBaseCamera@@UAEXPAUD3DXVECTOR3@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CBaseCamera@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT ??_7CBaseCamera@@6B@
CONST	SEGMENT
??_7CBaseCamera@@6B@ DD FLAT:??_R4CBaseCamera@@6B@	; CBaseCamera::`vftable'
	DD	FLAT:?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:__purecall
	DD	FLAT:?Reset@CBaseCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CBaseCamera@@UAEXPAUD3DXVECTOR3@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CBaseCamera@@UAEXAAUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z$0
__ehfuncinfo$?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDXUTLineManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTLineManager@@QAE@XZ$0
__ehfuncinfo$??1CDXUTLineManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDXUTLineManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDXUTResourceCache@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDXUTResourceCache@@IAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDXUTResourceCache@@IAE@XZ$1
__ehfuncinfo$??0CDXUTResourceCache@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDXUTResourceCache@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ$0
__ehfuncinfo$?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDXUTResourceCache@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTResourceCache@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDXUTResourceCache@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDXUTResourceCache@@QAE@XZ$2
__ehfuncinfo$??1CDXUTResourceCache@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CDXUTResourceCache@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ$0
__ehfuncinfo$?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_EnsureD3DAPIs@@YA_NXZ
_TEXT	SEGMENT
_wszPath$ = -272					; size = 261
__$ArrayPad$ = -4					; size = 4
?DXUT_EnsureD3DAPIs@@YA_NXZ PROC			; DXUT_EnsureD3DAPIs, COMDAT

; 2755 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 468				; 000001d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-468]
	mov	ecx, 117				; 00000075H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2756 :     // If module is non-NULL, this function has already been called.  Note
; 2757 :     // that this doesn't guarantee that all D3D9 procaddresses were found.
; 2758 :     if( s_hModD3D9 != NULL )

	cmp	DWORD PTR _s_hModD3D9, 0
	je	SHORT $LN3@DXUT_Ensur

; 2759 :         return true;

	mov	al, 1
	jmp	$LN4@DXUT_Ensur
$LN3@DXUT_Ensur:

; 2760 : 
; 2761 :     // This may fail if DirectX 9 isn't installed
; 2762 :     TCHAR wszPath[MAX_PATH+1];
; 2763 :     if( !::GetSystemDirectory( wszPath, MAX_PATH+1 ) )

	mov	esi, esp
	push	261					; 00000105H
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@DXUT_Ensur

; 2764 :         return false;

	xor	al, al
	jmp	$LN4@DXUT_Ensur
$LN2@DXUT_Ensur:

; 2765 :     StringCchCat( wszPath, MAX_PATH, "\\d3d9.dll" );

	push	OFFSET ??_C@_09KLCMKMDE@?2d3d9?4dll?$AA@
	push	260					; 00000104H
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 2766 :     s_hModD3D9 = LoadLibrary( wszPath );

	mov	esi, esp
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadLibraryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_hModD3D9, eax

; 2767 :     if( s_hModD3D9 == NULL ) 

	cmp	DWORD PTR _s_hModD3D9, 0
	jne	SHORT $LN1@DXUT_Ensur

; 2768 :         return false;

	xor	al, al
	jmp	$LN4@DXUT_Ensur
$LN1@DXUT_Ensur:

; 2769 :     s_DynamicDirect3DCreate9 = (LPDIRECT3DCREATE9)GetProcAddress( s_hModD3D9, "Direct3DCreate9" );

	mov	esi, esp
	push	OFFSET ??_C@_0BA@FAFMMBOF@Direct3DCreate9?$AA@
	mov	eax, DWORD PTR _s_hModD3D9
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_DynamicDirect3DCreate9, eax

; 2770 :     s_DynamicD3DPERF_BeginEvent = (LPD3DPERF_BEGINEVENT)GetProcAddress( s_hModD3D9, "D3DPERF_BeginEvent" );

	mov	esi, esp
	push	OFFSET ??_C@_0BD@CLFNPJIE@D3DPERF_BeginEvent?$AA@
	mov	eax, DWORD PTR _s_hModD3D9
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_DynamicD3DPERF_BeginEvent, eax

; 2771 :     s_DynamicD3DPERF_EndEvent = (LPD3DPERF_ENDEVENT)GetProcAddress( s_hModD3D9, "D3DPERF_EndEvent" );

	mov	esi, esp
	push	OFFSET ??_C@_0BB@KDHKMPMH@D3DPERF_EndEvent?$AA@
	mov	eax, DWORD PTR _s_hModD3D9
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_DynamicD3DPERF_EndEvent, eax

; 2772 :     s_DynamicD3DPERF_SetMarker = (LPD3DPERF_SETMARKER)GetProcAddress( s_hModD3D9, "D3DPERF_SetMarker" );

	mov	esi, esp
	push	OFFSET ??_C@_0BC@BJDCGGFC@D3DPERF_SetMarker?$AA@
	mov	eax, DWORD PTR _s_hModD3D9
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_DynamicD3DPERF_SetMarker, eax

; 2773 :     s_DynamicD3DPERF_SetRegion = (LPD3DPERF_SETREGION)GetProcAddress( s_hModD3D9, "D3DPERF_SetRegion" );

	mov	esi, esp
	push	OFFSET ??_C@_0BC@PKNMMAJB@D3DPERF_SetRegion?$AA@
	mov	eax, DWORD PTR _s_hModD3D9
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_DynamicD3DPERF_SetRegion, eax

; 2774 :     s_DynamicD3DPERF_QueryRepeatFrame = (LPD3DPERF_QUERYREPEATFRAME)GetProcAddress( s_hModD3D9, "D3DPERF_QueryRepeatFrame" );

	mov	esi, esp
	push	OFFSET ??_C@_0BJ@IGNIEEPP@D3DPERF_QueryRepeatFrame?$AA@
	mov	eax, DWORD PTR _s_hModD3D9
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_DynamicD3DPERF_QueryRepeatFrame, eax

; 2775 :     s_DynamicD3DPERF_SetOptions = (LPD3DPERF_SETOPTIONS)GetProcAddress( s_hModD3D9, "D3DPERF_SetOptions" );

	mov	esi, esp
	push	OFFSET ??_C@_0BD@NEPKLCIB@D3DPERF_SetOptions?$AA@
	mov	eax, DWORD PTR _s_hModD3D9
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_DynamicD3DPERF_SetOptions, eax

; 2776 :     s_DynamicD3DPERF_GetStatus = (LPD3DPERF_GETSTATUS)GetProcAddress( s_hModD3D9, "D3DPERF_GetStatus" );

	mov	esi, esp
	push	OFFSET ??_C@_0BC@HJIKALNB@D3DPERF_GetStatus?$AA@
	mov	eax, DWORD PTR _s_hModD3D9
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _s_DynamicD3DPERF_GetStatus, eax

; 2777 :     return true;

	mov	al, 1
$LN4@DXUT_Ensur:

; 2778 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DXUT_Ensur
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 468				; 000001d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@DXUT_Ensur:
	DD	1
	DD	$LN7@DXUT_Ensur
$LN7@DXUT_Ensur:
	DD	-272					; fffffef0H
	DD	261					; 00000105H
	DD	$LN6@DXUT_Ensur
$LN6@DXUT_Ensur:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?DXUT_EnsureD3DAPIs@@YA_NXZ ENDP			; DXUT_EnsureD3DAPIs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTMediaSearchPath@@YAPADXZ
_TEXT	SEGMENT
?DXUTMediaSearchPath@@YAPADXZ PROC			; DXUTMediaSearchPath, COMDAT

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 285  :     static TCHAR s_strMediaSearchPath[MAX_PATH] = {0};
; 286  :     return s_strMediaSearchPath;

	mov	eax, OFFSET ?s_strMediaSearchPath@?1??DXUTMediaSearchPath@@YAPADXZ@4PADA

; 287  : 
; 288  : }   

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUTMediaSearchPath@@YAPADXZ ENDP			; DXUTMediaSearchPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DisplaySwitchToREFWarningProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv156 = -196						; size = 4
tv149 = -196						; size = 4
tv139 = -196						; size = 4
tv131 = -196						; size = 4
tv93 = -196						; size = 4
tv64 = -196						; size = 4
_hDlg$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?DisplaySwitchToREFWarningProc@@YGHPAUHWND__@@IIJ@Z PROC ; DisplaySwitchToREFWarningProc, COMDAT

; 100  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 101  :     switch (message) 

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN7@DisplaySwi
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN6@DisplaySwi
	jmp	$LN8@DisplaySwi
$LN7@DisplaySwi:

; 102  :     { 
; 103  :         case WM_INITDIALOG:
; 104  :             // Easier to set text here than in the DLGITEMTEMPLATE
; 105  :             SetWindowText( hDlg, DXUTGetWindowTitle() );

	call	?DXUTGetWindowTitle@@YAPBDXZ		; DXUTGetWindowTitle
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowTextA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 106  :             SendMessage( GetDlgItem(hDlg, 0x100), STM_SETIMAGE, IMAGE_ICON, (LPARAM)LoadIcon(0, IDI_QUESTION));

	mov	esi, esp
	push	32514					; 00007f02H
	push	0
	call	DWORD PTR __imp__LoadIconA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	push	1
	push	370					; 00000172H
	mov	edi, esp
	push	256					; 00000100H
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 107  :             SetDlgItemText( hDlg, 0x101, "Switching to the Direct3D reference rasterizer, a software device\nthat implements the entire Direct3D feature set, but runs very slowly.\nDo you wish to continue?" ); 

	mov	esi, esp
	push	OFFSET ??_C@_0KC@EOHLBFGP@Switching?5to?5the?5Direct3D?5refere@
	push	257					; 00000101H
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 108  :             SetDlgItemText( hDlg, IDYES, "&Yes" );

	mov	esi, esp
	push	OFFSET ??_C@_04ILFHLBJA@?$CGYes?$AA@
	push	6
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 109  :             SetDlgItemText( hDlg, IDNO, "&No" );

	mov	esi, esp
	push	OFFSET ??_C@_03MDIDAHKD@?$CGNo?$AA@
	push	7
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 110  :             SetDlgItemText( hDlg, IDIGNORE, "&Don't show again" );

	mov	esi, esp
	push	OFFSET ??_C@_0BC@KPPJBALB@?$CGDon?8t?5show?5again?$AA@
	push	5
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 111  :             break;

	jmp	$LN8@DisplaySwi
$LN6@DisplaySwi:

; 112  : 
; 113  :         case WM_COMMAND: 
; 114  :             switch (LOWORD(wParam)) 

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	DWORD PTR tv93[ebp], ecx
	mov	edx, DWORD PTR tv93[ebp]
	sub	edx, 2
	mov	DWORD PTR tv93[ebp], edx
	cmp	DWORD PTR tv93[ebp], 5
	ja	$LN8@DisplaySwi
	mov	eax, DWORD PTR tv93[ebp]
	jmp	DWORD PTR $LN20@DisplaySwi[eax*4]
$LN3@DisplaySwi:

; 115  :             { 
; 116  :                 case IDIGNORE: CheckDlgButton( hDlg, IDIGNORE, (IsDlgButtonChecked( hDlg, IDIGNORE ) == BST_CHECKED) ? BST_UNCHECKED : BST_CHECKED ); EnableWindow( GetDlgItem( hDlg, IDNO ), (IsDlgButtonChecked( hDlg, IDIGNORE ) != BST_CHECKED) ); break;

	mov	esi, esp
	push	5
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__IsDlgButtonChecked@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@DisplaySwi
	mov	DWORD PTR tv131[ebp], 0
	jmp	SHORT $LN13@DisplaySwi
$LN12@DisplaySwi:
	mov	DWORD PTR tv131[ebp], 1
$LN13@DisplaySwi:
	mov	esi, esp
	mov	ecx, DWORD PTR tv131[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _hDlg$[ebp]
	push	edx
	call	DWORD PTR __imp__CheckDlgButton@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	5
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__IsDlgButtonChecked@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	je	SHORT $LN14@DisplaySwi
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN15@DisplaySwi
$LN14@DisplaySwi:
	mov	DWORD PTR tv139[ebp], 0
$LN15@DisplaySwi:
	mov	esi, esp
	mov	ecx, DWORD PTR tv139[ebp]
	push	ecx
	mov	edi, esp
	push	7
	mov	edx, DWORD PTR _hDlg$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN8@DisplaySwi
$LN2@DisplaySwi:

; 117  :                 case IDNO: EndDialog(hDlg, (IsDlgButtonChecked( hDlg, IDIGNORE ) == BST_CHECKED) ? IDNO|0x80 : IDNO|0x00 ); return TRUE; 

	mov	esi, esp
	push	5
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__IsDlgButtonChecked@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN16@DisplaySwi
	mov	DWORD PTR tv149[ebp], 135		; 00000087H
	jmp	SHORT $LN17@DisplaySwi
$LN16@DisplaySwi:
	mov	DWORD PTR tv149[ebp], 7
$LN17@DisplaySwi:
	mov	esi, esp
	mov	ecx, DWORD PTR tv149[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDlg$[ebp]
	push	edx
	call	DWORD PTR __imp__EndDialog@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, 1
	jmp	SHORT $LN10@DisplaySwi
$LN1@DisplaySwi:

; 118  :                 case IDCANCEL:
; 119  :                 case IDYES: EndDialog(hDlg, (IsDlgButtonChecked( hDlg, IDIGNORE ) == BST_CHECKED) ? IDYES|0x80 : IDYES|0x00 ); return TRUE; 

	mov	esi, esp
	push	5
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__IsDlgButtonChecked@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN18@DisplaySwi
	mov	DWORD PTR tv156[ebp], 134		; 00000086H
	jmp	SHORT $LN19@DisplaySwi
$LN18@DisplaySwi:
	mov	DWORD PTR tv156[ebp], 6
$LN19@DisplaySwi:
	mov	esi, esp
	mov	ecx, DWORD PTR tv156[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDlg$[ebp]
	push	edx
	call	DWORD PTR __imp__EndDialog@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, 1
	jmp	SHORT $LN10@DisplaySwi
$LN8@DisplaySwi:

; 120  :             } 
; 121  :             break;
; 122  :     } 
; 123  :     return FALSE; 

	xor	eax, eax
$LN10@DisplaySwi:

; 124  : } 

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN20@DisplaySwi:
	DD	$LN1@DisplaySwi
	DD	$LN8@DisplaySwi
	DD	$LN8@DisplaySwi
	DD	$LN3@DisplaySwi
	DD	$LN1@DisplaySwi
	DD	$LN2@DisplaySwi
?DisplaySwitchToREFWarningProc@@YGHPAUHWND__@@IIJ@Z ENDP ; DisplaySwitchToREFWarningProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTFindMediaSearchParentDirs@@YA_NPADH00@Z
_TEXT	SEGMENT
_strFilePart$ = -816					; size = 4
_strSearch$ = -804					; size = 260
_strFullFileName$ = -536				; size = 260
_strFullPath$ = -268					; size = 260
__$ArrayPad$ = -4					; size = 4
_strSearchPath$ = 8					; size = 4
_cchSearch$ = 12					; size = 4
_strStartAt$ = 16					; size = 4
_strLeafName$ = 20					; size = 4
?DXUTFindMediaSearchParentDirs@@YA_NPADH00@Z PROC	; DXUTFindMediaSearchParentDirs, COMDAT

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1012				; 000003f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1012]
	mov	ecx, 253				; 000000fdH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 487  :     TCHAR strFullPath[MAX_PATH] = {0};

	mov	BYTE PTR _strFullPath$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strFullPath$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 488  :     TCHAR strFullFileName[MAX_PATH] = {0};

	mov	BYTE PTR _strFullFileName$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strFullFileName$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 489  :     TCHAR strSearch[MAX_PATH] = {0};

	mov	BYTE PTR _strSearch$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strSearch$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 490  :     TCHAR* strFilePart = NULL;

	mov	DWORD PTR _strFilePart$[ebp], 0

; 491  : 
; 492  :     GetFullPathName( strStartAt, MAX_PATH, strFullPath, &strFilePart );

	mov	esi, esp
	lea	eax, DWORD PTR _strFilePart$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strFullPath$[ebp]
	push	ecx
	push	260					; 00000104H
	mov	edx, DWORD PTR _strStartAt$[ebp]
	push	edx
	call	DWORD PTR __imp__GetFullPathNameA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 493  :     if( strFilePart == NULL )

	cmp	DWORD PTR _strFilePart$[ebp], 0
	jne	SHORT $LN3@DXUTFindMe

; 494  :         return false;

	xor	al, al
	jmp	$LN5@DXUTFindMe
$LN3@DXUTFindMe:

; 495  :    
; 496  :     while( strFilePart != NULL && *strFilePart != '\0' )

	cmp	DWORD PTR _strFilePart$[ebp], 0
	je	$LN2@DXUTFindMe
	mov	eax, DWORD PTR _strFilePart$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN2@DXUTFindMe

; 497  :     {
; 498  :         StringCchPrintf( strFullFileName, MAX_PATH, "%s\\%s", strFullPath, strLeafName ); 

	mov	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strFullPath$[ebp]
	push	ecx
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	push	260					; 00000104H
	lea	edx, DWORD PTR _strFullFileName$[ebp]
	push	edx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 20					; 00000014H

; 499  :         if( GetFileAttributes( strFullFileName ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strFullFileName$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN1@DXUTFindMe

; 500  :         {
; 501  :             StringCchCopy( strSearchPath, cchSearch, strFullFileName ); 

	lea	eax, DWORD PTR _strFullFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchSearch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 502  :             return true;

	mov	al, 1
	jmp	SHORT $LN5@DXUTFindMe
$LN1@DXUTFindMe:

; 503  :         }
; 504  : 
; 505  :         StringCchPrintf( strSearch, MAX_PATH, "%s\\..", strFullPath ); 

	lea	eax, DWORD PTR _strFullPath$[ebp]
	push	eax
	push	OFFSET ??_C@_05BPCBICBK@?$CFs?2?4?4?$AA@
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strSearch$[ebp]
	push	ecx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 16					; 00000010H

; 506  :         GetFullPathName( strSearch, MAX_PATH, strFullPath, &strFilePart );

	mov	esi, esp
	lea	eax, DWORD PTR _strFilePart$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strFullPath$[ebp]
	push	ecx
	push	260					; 00000104H
	lea	edx, DWORD PTR _strSearch$[ebp]
	push	edx
	call	DWORD PTR __imp__GetFullPathNameA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 507  :     }

	jmp	$LN3@DXUTFindMe
$LN2@DXUTFindMe:

; 508  : 
; 509  :     return false;

	xor	al, al
$LN5@DXUTFindMe:

; 510  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DXUTFindMe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1012				; 000003f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@DXUTFindMe:
	DD	4
	DD	$LN11@DXUTFindMe
$LN11@DXUTFindMe:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN7@DXUTFindMe
	DD	-536					; fffffde8H
	DD	260					; 00000104H
	DD	$LN8@DXUTFindMe
	DD	-804					; fffffcdcH
	DD	260					; 00000104H
	DD	$LN9@DXUTFindMe
	DD	-816					; fffffcd0H
	DD	4
	DD	$LN10@DXUTFindMe
$LN10@DXUTFindMe:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN9@DXUTFindMe:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN8@DXUTFindMe:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN7@DXUTFindMe:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?DXUTFindMediaSearchParentDirs@@YA_NPADH00@Z ENDP	; DXUTFindMediaSearchParentDirs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTFindMediaSearchTypicalDirs@@YA_NPADHPBD00@Z
_TEXT	SEGMENT
_s_strSearchPath$ = -8					; size = 4
_strSearchPath$ = 8					; size = 4
_cchSearch$ = 12					; size = 4
_strLeaf$ = 16						; size = 4
_strExePath$ = 20					; size = 4
_strExeName$ = 24					; size = 4
?DXUTFindMediaSearchTypicalDirs@@YA_NPADHPBD00@Z PROC	; DXUTFindMediaSearchTypicalDirs, COMDAT

; 410  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 411  :     // Typical directories:
; 412  :     //      .\
; 413  :     //      ..\
; 414  :     //      ..\..\
; 415  :     //      %EXE_DIR%\
; 416  :     //      %EXE_DIR%\..\
; 417  :     //      %EXE_DIR%\..\..\
; 418  :     //      %EXE_DIR%\..\%EXE_NAME%
; 419  :     //      %EXE_DIR%\..\..\%EXE_NAME%
; 420  :     //      DXSDK media path
; 421  : 
; 422  :     // Search in .\  
; 423  :     StringCchCopy( strSearchPath, cchSearch, strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchSearch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 424  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN11@DXUTFindMe

; 425  :         return true;

	mov	al, 1
	jmp	$LN12@DXUTFindMe
$LN11@DXUTFindMe:

; 426  : 
; 427  :     // Search in ..\  
; 428  :     StringCchPrintf( strSearchPath, cchSearch, "..\\%s", strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	push	OFFSET ??_C@_05LGCFLFFL@?4?4?2?$CFs?$AA@
	mov	ecx, DWORD PTR _cchSearch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 16					; 00000010H

; 429  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN10@DXUTFindMe

; 430  :         return true;

	mov	al, 1
	jmp	$LN12@DXUTFindMe
$LN10@DXUTFindMe:

; 431  : 
; 432  :     // Search in ..\..\ 
; 433  :     StringCchPrintf( strSearchPath, cchSearch, "..\\..\\%s", strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	push	OFFSET ??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@
	mov	ecx, DWORD PTR _cchSearch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 16					; 00000010H

; 434  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN9@DXUTFindMe

; 435  :         return true;

	mov	al, 1
	jmp	$LN12@DXUTFindMe
$LN9@DXUTFindMe:

; 436  : 
; 437  :     // Search in ..\..\ 
; 438  :     StringCchPrintf( strSearchPath, cchSearch, "..\\..\\%s", strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	push	OFFSET ??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@
	mov	ecx, DWORD PTR _cchSearch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 16					; 00000010H

; 439  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN8@DXUTFindMe

; 440  :         return true;

	mov	al, 1
	jmp	$LN12@DXUTFindMe
$LN8@DXUTFindMe:

; 441  : 
; 442  :     // Search in the %EXE_DIR%\ 
; 443  :     StringCchPrintf( strSearchPath, cchSearch, "%s\\%s", strExePath, strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	mov	edx, DWORD PTR _cchSearch$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 20					; 00000014H

; 444  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN7@DXUTFindMe

; 445  :         return true;

	mov	al, 1
	jmp	$LN12@DXUTFindMe
$LN7@DXUTFindMe:

; 446  : 
; 447  :     // Search in the %EXE_DIR%\..\ 
; 448  :     StringCchPrintf( strSearchPath, cchSearch, "%s\\..\\%s", strExePath, strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	push	OFFSET ??_C@_08OPCCNCAK@?$CFs?2?4?4?2?$CFs?$AA@
	mov	edx, DWORD PTR _cchSearch$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 20					; 00000014H

; 449  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN6@DXUTFindMe

; 450  :         return true;

	mov	al, 1
	jmp	$LN12@DXUTFindMe
$LN6@DXUTFindMe:

; 451  : 
; 452  :     // Search in the %EXE_DIR%\..\..\ 
; 453  :     StringCchPrintf( strSearchPath, cchSearch, "%s\\..\\..\\%s", strExePath, strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@HKPCIGNN@?$CFs?2?4?4?2?4?4?2?$CFs?$AA@
	mov	edx, DWORD PTR _cchSearch$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 20					; 00000014H

; 454  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN5@DXUTFindMe

; 455  :         return true;

	mov	al, 1
	jmp	$LN12@DXUTFindMe
$LN5@DXUTFindMe:

; 456  : 
; 457  :     // Search in "%EXE_DIR%\..\%EXE_NAME%\".  This matches the DirectX SDK layout
; 458  :     StringCchPrintf( strSearchPath, cchSearch, "%s\\..\\%s\\%s", strExePath, strExeName, strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strExePath$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@NALGHNGE@?$CFs?2?4?4?2?$CFs?2?$CFs?$AA@
	mov	eax, DWORD PTR _cchSearch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strSearchPath$[ebp]
	push	ecx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 24					; 00000018H

; 459  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN4@DXUTFindMe

; 460  :         return true;

	mov	al, 1
	jmp	$LN12@DXUTFindMe
$LN4@DXUTFindMe:

; 461  : 
; 462  :     // Search in "%EXE_DIR%\..\..\%EXE_NAME%\".  This matches the DirectX SDK layout
; 463  :     StringCchPrintf( strSearchPath, cchSearch, "%s\\..\\..\\%s\\%s", strExePath, strExeName, strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strExePath$[ebp]
	push	edx
	push	OFFSET ??_C@_0P@HEBEMA@?$CFs?2?4?4?2?4?4?2?$CFs?2?$CFs?$AA@
	mov	eax, DWORD PTR _cchSearch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strSearchPath$[ebp]
	push	ecx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 24					; 00000018H

; 464  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN3@DXUTFindMe

; 465  :         return true;

	mov	al, 1
	jmp	SHORT $LN12@DXUTFindMe
$LN3@DXUTFindMe:

; 466  : 
; 467  :     // Search in media search dir 
; 468  :     TCHAR* s_strSearchPath = DXUTMediaSearchPath();

	call	?DXUTMediaSearchPath@@YAPADXZ		; DXUTMediaSearchPath
	mov	DWORD PTR _s_strSearchPath$[ebp], eax

; 469  :     if( s_strSearchPath[0] != 0 )

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _s_strSearchPath$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN2@DXUTFindMe

; 470  :     {
; 471  :         StringCchPrintf( strSearchPath, cchSearch, "%s%s", s_strSearchPath, strLeaf ); 

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s_strSearchPath$[ebp]
	push	ecx
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	mov	edx, DWORD PTR _cchSearch$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 20					; 00000014H

; 472  :         if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN2@DXUTFindMe

; 473  :             return true;

	mov	al, 1
	jmp	SHORT $LN12@DXUTFindMe
$LN2@DXUTFindMe:

; 474  :     }
; 475  : 
; 476  :     return false;

	xor	al, al
$LN12@DXUTFindMe:

; 477  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUTFindMediaSearchTypicalDirs@@YA_NPADHPBD00@Z ENDP	; DXUTFindMediaSearchTypicalDirs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fcache@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@YAXXZ
text$yd	SEGMENT
??__Fcache@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@YAXXZ PROC ; `DXUTGetGlobalResourceCache'::`2'::`dynamic atexit destructor for 'cache'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?cache@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4V2@A
	call	??1CDXUTResourceCache@@QAE@XZ		; CDXUTResourceCache::~CDXUTResourceCache
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fcache@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@YAXXZ ENDP ; `DXUTGetGlobalResourceCache'::`2'::`dynamic atexit destructor for 'cache''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_Dynamic_D3DPERF_GetStatus@@YGKXZ
_TEXT	SEGMENT
?DXUT_Dynamic_D3DPERF_GetStatus@@YGKXZ PROC		; DXUT_Dynamic_D3DPERF_GetStatus, COMDAT

; 2831 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2832 :     if( DXUT_EnsureD3DAPIs() && s_DynamicD3DPERF_GetStatus != NULL )

	call	?DXUT_EnsureD3DAPIs@@YA_NXZ		; DXUT_EnsureD3DAPIs
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DXUT_Dynam
	cmp	DWORD PTR _s_DynamicD3DPERF_GetStatus, 0
	je	SHORT $LN2@DXUT_Dynam

; 2833 :         return s_DynamicD3DPERF_GetStatus();

	mov	esi, esp
	call	DWORD PTR _s_DynamicD3DPERF_GetStatus
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@DXUT_Dynam

; 2834 :     else

	jmp	SHORT $LN3@DXUT_Dynam
$LN2@DXUT_Dynam:

; 2835 :         return 0;

	xor	eax, eax
$LN3@DXUT_Dynam:

; 2836 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUT_Dynamic_D3DPERF_GetStatus@@YGKXZ ENDP		; DXUT_Dynamic_D3DPERF_GetStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_Dynamic_D3DPERF_SetOptions@@YGXK@Z
_TEXT	SEGMENT
_dwOptions$ = 8						; size = 4
?DXUT_Dynamic_D3DPERF_SetOptions@@YGXK@Z PROC		; DXUT_Dynamic_D3DPERF_SetOptions, COMDAT

; 2825 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2826 :     if( DXUT_EnsureD3DAPIs() && s_DynamicD3DPERF_SetOptions != NULL )

	call	?DXUT_EnsureD3DAPIs@@YA_NXZ		; DXUT_EnsureD3DAPIs
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DXUT_Dynam
	cmp	DWORD PTR _s_DynamicD3DPERF_SetOptions, 0
	je	SHORT $LN2@DXUT_Dynam

; 2827 :         s_DynamicD3DPERF_SetOptions( dwOptions );

	mov	esi, esp
	mov	eax, DWORD PTR _dwOptions$[ebp]
	push	eax
	call	DWORD PTR _s_DynamicD3DPERF_SetOptions
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DXUT_Dynam:

; 2828 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DXUT_Dynamic_D3DPERF_SetOptions@@YGXK@Z ENDP		; DXUT_Dynamic_D3DPERF_SetOptions
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_Dynamic_D3DPERF_QueryRepeatFrame@@YGHXZ
_TEXT	SEGMENT
?DXUT_Dynamic_D3DPERF_QueryRepeatFrame@@YGHXZ PROC	; DXUT_Dynamic_D3DPERF_QueryRepeatFrame, COMDAT

; 2817 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2818 :     if( DXUT_EnsureD3DAPIs() && s_DynamicD3DPERF_QueryRepeatFrame != NULL )

	call	?DXUT_EnsureD3DAPIs@@YA_NXZ		; DXUT_EnsureD3DAPIs
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DXUT_Dynam
	cmp	DWORD PTR _s_DynamicD3DPERF_QueryRepeatFrame, 0
	je	SHORT $LN2@DXUT_Dynam

; 2819 :         return s_DynamicD3DPERF_QueryRepeatFrame();

	mov	esi, esp
	call	DWORD PTR _s_DynamicD3DPERF_QueryRepeatFrame
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@DXUT_Dynam

; 2820 :     else

	jmp	SHORT $LN3@DXUT_Dynam
$LN2@DXUT_Dynam:

; 2821 :         return FALSE;

	xor	eax, eax
$LN3@DXUT_Dynam:

; 2822 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUT_Dynamic_D3DPERF_QueryRepeatFrame@@YGHXZ ENDP	; DXUT_Dynamic_D3DPERF_QueryRepeatFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_Dynamic_D3DPERF_SetRegion@@YGXKPBD@Z
_TEXT	SEGMENT
_col$ = 8						; size = 4
_wszName$ = 12						; size = 4
?DXUT_Dynamic_D3DPERF_SetRegion@@YGXKPBD@Z PROC		; DXUT_Dynamic_D3DPERF_SetRegion, COMDAT

; 2811 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2812 :     if( DXUT_EnsureD3DAPIs() && s_DynamicD3DPERF_SetRegion != NULL )

	call	?DXUT_EnsureD3DAPIs@@YA_NXZ		; DXUT_EnsureD3DAPIs
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DXUT_Dynam
	cmp	DWORD PTR _s_DynamicD3DPERF_SetRegion, 0
	je	SHORT $LN2@DXUT_Dynam

; 2813 :         s_DynamicD3DPERF_SetRegion( col, wszName );

	mov	esi, esp
	mov	eax, DWORD PTR _wszName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	call	DWORD PTR _s_DynamicD3DPERF_SetRegion
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DXUT_Dynam:

; 2814 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?DXUT_Dynamic_D3DPERF_SetRegion@@YGXKPBD@Z ENDP		; DXUT_Dynamic_D3DPERF_SetRegion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_Dynamic_D3DPERF_SetMarker@@YGXKPBD@Z
_TEXT	SEGMENT
_col$ = 8						; size = 4
_wszName$ = 12						; size = 4
?DXUT_Dynamic_D3DPERF_SetMarker@@YGXKPBD@Z PROC		; DXUT_Dynamic_D3DPERF_SetMarker, COMDAT

; 2805 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2806 :     if( DXUT_EnsureD3DAPIs() && s_DynamicD3DPERF_SetMarker != NULL )

	call	?DXUT_EnsureD3DAPIs@@YA_NXZ		; DXUT_EnsureD3DAPIs
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DXUT_Dynam
	cmp	DWORD PTR _s_DynamicD3DPERF_SetMarker, 0
	je	SHORT $LN2@DXUT_Dynam

; 2807 :         s_DynamicD3DPERF_SetMarker( col, wszName );

	mov	esi, esp
	mov	eax, DWORD PTR _wszName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	call	DWORD PTR _s_DynamicD3DPERF_SetMarker
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DXUT_Dynam:

; 2808 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?DXUT_Dynamic_D3DPERF_SetMarker@@YGXKPBD@Z ENDP		; DXUT_Dynamic_D3DPERF_SetMarker
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_Dynamic_D3DPERF_EndEvent@@YGHXZ
_TEXT	SEGMENT
?DXUT_Dynamic_D3DPERF_EndEvent@@YGHXZ PROC		; DXUT_Dynamic_D3DPERF_EndEvent, COMDAT

; 2797 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2798 :     if( DXUT_EnsureD3DAPIs() && s_DynamicD3DPERF_EndEvent != NULL )

	call	?DXUT_EnsureD3DAPIs@@YA_NXZ		; DXUT_EnsureD3DAPIs
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DXUT_Dynam
	cmp	DWORD PTR _s_DynamicD3DPERF_EndEvent, 0
	je	SHORT $LN2@DXUT_Dynam

; 2799 :         return s_DynamicD3DPERF_EndEvent();

	mov	esi, esp
	call	DWORD PTR _s_DynamicD3DPERF_EndEvent
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@DXUT_Dynam

; 2800 :     else

	jmp	SHORT $LN3@DXUT_Dynam
$LN2@DXUT_Dynam:

; 2801 :         return -1;

	or	eax, -1
$LN3@DXUT_Dynam:

; 2802 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUT_Dynamic_D3DPERF_EndEvent@@YGHXZ ENDP		; DXUT_Dynamic_D3DPERF_EndEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_Dynamic_D3DPERF_BeginEvent@@YGHKPBD@Z
_TEXT	SEGMENT
_col$ = 8						; size = 4
_wszName$ = 12						; size = 4
?DXUT_Dynamic_D3DPERF_BeginEvent@@YGHKPBD@Z PROC	; DXUT_Dynamic_D3DPERF_BeginEvent, COMDAT

; 2789 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2790 :     if( DXUT_EnsureD3DAPIs() && s_DynamicD3DPERF_BeginEvent != NULL )

	call	?DXUT_EnsureD3DAPIs@@YA_NXZ		; DXUT_EnsureD3DAPIs
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DXUT_Dynam
	cmp	DWORD PTR _s_DynamicD3DPERF_BeginEvent, 0
	je	SHORT $LN2@DXUT_Dynam

; 2791 :         return s_DynamicD3DPERF_BeginEvent( col, wszName );

	mov	esi, esp
	mov	eax, DWORD PTR _wszName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _col$[ebp]
	push	ecx
	call	DWORD PTR _s_DynamicD3DPERF_BeginEvent
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@DXUT_Dynam

; 2792 :     else

	jmp	SHORT $LN3@DXUT_Dynam
$LN2@DXUT_Dynam:

; 2793 :         return -1;

	or	eax, -1
$LN3@DXUT_Dynam:

; 2794 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?DXUT_Dynamic_D3DPERF_BeginEvent@@YGHKPBD@Z ENDP	; DXUT_Dynamic_D3DPERF_BeginEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUT_Dynamic_Direct3DCreate9@@YGPAUIDirect3D9@@I@Z
_TEXT	SEGMENT
_SDKVersion$ = 8					; size = 4
?DXUT_Dynamic_Direct3DCreate9@@YGPAUIDirect3D9@@I@Z PROC ; DXUT_Dynamic_Direct3DCreate9, COMDAT

; 2781 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2782 :     if( DXUT_EnsureD3DAPIs() && s_DynamicDirect3DCreate9 != NULL )

	call	?DXUT_EnsureD3DAPIs@@YA_NXZ		; DXUT_EnsureD3DAPIs
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DXUT_Dynam
	cmp	DWORD PTR _s_DynamicDirect3DCreate9, 0
	je	SHORT $LN2@DXUT_Dynam

; 2783 :         return s_DynamicDirect3DCreate9( SDKVersion );

	mov	esi, esp
	mov	eax, DWORD PTR _SDKVersion$[ebp]
	push	eax
	call	DWORD PTR _s_DynamicDirect3DCreate9
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@DXUT_Dynam

; 2784 :     else

	jmp	SHORT $LN3@DXUT_Dynam
$LN2@DXUT_Dynam:

; 2785 :         return NULL;

	xor	eax, eax
$LN3@DXUT_Dynam:

; 2786 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DXUT_Dynamic_Direct3DCreate9@@YGPAUIDirect3D9@@I@Z ENDP ; DXUT_Dynamic_Direct3DCreate9
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTOutputDebugStringA@@YAXPBDZZ
_TEXT	SEGMENT
$T1 = -736						; size = 4
_args$ = -532						; size = 4
_strBuffer$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_strMsg$ = 8						; size = 4
?DXUTOutputDebugStringA@@YAXPBDZZ PROC			; DXUTOutputDebugStringA, COMDAT

; 2149 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 740				; 000002e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 185				; 000000b9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2150 : #if defined(DEBUG) | defined(_DEBUG)
; 2151 :     CHAR strBuffer[512];
; 2152 :     
; 2153 :     va_list args;
; 2154 :     va_start(args, strMsg);

	lea	eax, DWORD PTR _strMsg$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 2155 :     StringCchVPrintfA( strBuffer, 512, strMsg, args );

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strMsg$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _strBuffer$[ebp]
	push	edx
	call	?StringCchVPrintfA@@YGJPADIPBD0@Z	; StringCchVPrintfA

; 2156 :     strBuffer[511] = '\0';

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN3@DXUTOutput
	jmp	SHORT $LN4@DXUTOutput
$LN3@DXUTOutput:
	call	___report_rangecheckfailure
$LN4@DXUTOutput:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strBuffer$[ebp+edx], 0

; 2157 :     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 2158 : 
; 2159 :     OutputDebugStringA( strBuffer );

	mov	esi, esp
	lea	eax, DWORD PTR _strBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DXUTOutput:

; 2160 : #else
; 2161 :     UNREFERENCED_PARAMETER(strMsg);
; 2162 : #endif
; 2163 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DXUTOutput
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@DXUTOutput:
	DD	1
	DD	$LN6@DXUTOutput
$LN6@DXUTOutput:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN5@DXUTOutput
$LN5@DXUTOutput:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?DXUTOutputDebugStringA@@YAXPBDZZ ENDP			; DXUTOutputDebugStringA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTOutputDebugStringW@@YAXPBDZZ
_TEXT	SEGMENT
$T1 = -736						; size = 4
_args$ = -532						; size = 4
_strBuffer$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_strMsg$ = 8						; size = 4
?DXUTOutputDebugStringW@@YAXPBDZZ PROC			; DXUTOutputDebugStringW, COMDAT

; 2128 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 740				; 000002e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 185				; 000000b9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2129 : #if defined(DEBUG) | defined(_DEBUG)
; 2130 :     TCHAR strBuffer[512];
; 2131 :     
; 2132 :     va_list args;
; 2133 :     va_start(args, strMsg);

	lea	eax, DWORD PTR _strMsg$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 2134 :     StringCchVPrintfA( strBuffer, 512, strMsg, args );

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strMsg$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _strBuffer$[ebp]
	push	edx
	call	?StringCchVPrintfA@@YGJPADIPBD0@Z	; StringCchVPrintfA

; 2135 :     strBuffer[511] = L'\0';

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN3@DXUTOutput
	jmp	SHORT $LN4@DXUTOutput
$LN3@DXUTOutput:
	call	___report_rangecheckfailure
$LN4@DXUTOutput:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strBuffer$[ebp+edx], 0

; 2136 :     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 2137 : 
; 2138 :     OutputDebugString( strBuffer );

	mov	esi, esp
	lea	eax, DWORD PTR _strBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DXUTOutput:

; 2139 : #else
; 2140 :     UNREFERENCED_PARAMETER(strMsg);
; 2141 : #endif
; 2142 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DXUTOutput
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@DXUTOutput:
	DD	1
	DD	$LN6@DXUTOutput
$LN6@DXUTOutput:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN5@DXUTOutput
$LN5@DXUTOutput:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?DXUTOutputDebugStringW@@YAXPBDZZ ENDP			; DXUTOutputDebugStringW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTGetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z
_TEXT	SEGMENT
tv70 = -584						; size = 4
$T1 = -576						; size = 12
$T2 = -556						; size = 12
$T3 = -536						; size = 12
$T4 = -516						; size = 12
$T5 = -496						; size = 12
$T6 = -476						; size = 12
$T7 = -456						; size = 12
$T8 = -436						; size = 12
$T9 = -416						; size = 12
$T10 = -396						; size = 12
$T11 = -376						; size = 12
$T12 = -356						; size = 12
_mView$ = -144						; size = 64
_vUpDir$ = -60						; size = 12
_vLookDir$ = -40					; size = 12
_vEyePt$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_dwFace$ = 12						; size = 4
?DXUTGetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z PROC	; DXUTGetCubeMapViewMatrix, COMDAT

; 2010 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 584				; 00000248H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-584]
	mov	ecx, 146				; 00000092H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2011 :     D3DXVECTOR3 vEyePt   = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vEyePt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 2012 :     D3DXVECTOR3 vLookDir;

	lea	ecx, DWORD PTR _vLookDir$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 2013 :     D3DXVECTOR3 vUpDir;

	lea	ecx, DWORD PTR _vUpDir$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 2014 : 
; 2015 :     switch( dwFace )

	mov	eax, DWORD PTR _dwFace$[ebx]
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 5
	ja	$LN7@DXUTGetCub
	mov	ecx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN17@DXUTGetCub[ecx*4]
$LN6@DXUTGetCub:

; 2016 :     {
; 2017 :         case D3DCUBEMAP_FACE_POSITIVE_X:
; 2018 :             vLookDir = D3DXVECTOR3( 1.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 2019 :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 2020 :             break;

	jmp	$LN7@DXUTGetCub
$LN5@DXUTGetCub:

; 2021 :         case D3DCUBEMAP_FACE_NEGATIVE_X:
; 2022 :             vLookDir = D3DXVECTOR3(-1.0f, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 2023 :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 2024 :             break;

	jmp	$LN7@DXUTGetCub
$LN4@DXUTGetCub:

; 2025 :         case D3DCUBEMAP_FACE_POSITIVE_Y:
; 2026 :             vLookDir = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 2027 :             vUpDir   = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 2028 :             break;

	jmp	$LN7@DXUTGetCub
$LN3@DXUTGetCub:

; 2029 :         case D3DCUBEMAP_FACE_NEGATIVE_Y:
; 2030 :             vLookDir = D3DXVECTOR3( 0.0f,-1.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T7[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 2031 :             vUpDir   = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T8[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 2032 :             break;

	jmp	$LN7@DXUTGetCub
$LN2@DXUTGetCub:

; 2033 :         case D3DCUBEMAP_FACE_POSITIVE_Z:
; 2034 :             vLookDir = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T9[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 2035 :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T10[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 2036 :             break;

	jmp	$LN7@DXUTGetCub
$LN1@DXUTGetCub:

; 2037 :         case D3DCUBEMAP_FACE_NEGATIVE_Z:
; 2038 :             vLookDir = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T11[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 2039 :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T12[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax
$LN7@DXUTGetCub:

; 2040 :             break;
; 2041 :     }
; 2042 : 
; 2043 :     // Set the view transform for this cubemap surface
; 2044 :     D3DXMATRIXA16 mView;

	lea	ecx, DWORD PTR _mView$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16

; 2045 :     D3DXMatrixLookAtLH( &mView, &vEyePt, &vLookDir, &vUpDir );

	lea	eax, DWORD PTR _vUpDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vLookDir$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vEyePt$[ebp]
	push	edx
	lea	eax, DWORD PTR _mView$[ebp]
	push	eax
	call	_D3DXMatrixLookAtLH@16

; 2046 :     return mView;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _mView$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]

; 2047 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@DXUTGetCub
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN16@DXUTGetCub:
	DD	4
	DD	$LN15@DXUTGetCub
$LN15@DXUTGetCub:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN11@DXUTGetCub
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN12@DXUTGetCub
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN13@DXUTGetCub
	DD	-144					; ffffff70H
	DD	64					; 00000040H
	DD	$LN14@DXUTGetCub
$LN14@DXUTGetCub:
	DB	109					; 0000006dH
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN13@DXUTGetCub:
	DB	118					; 00000076H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN12@DXUTGetCub:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN11@DXUTGetCub:
	DB	118					; 00000076H
	DB	69					; 00000045H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	0
	npad	3
$LN17@DXUTGetCub:
	DD	$LN6@DXUTGetCub
	DD	$LN5@DXUTGetCub
	DD	$LN4@DXUTGetCub
	DD	$LN3@DXUTGetCub
	DD	$LN2@DXUTGetCub
	DD	$LN1@DXUTGetCub
?DXUTGetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z ENDP	; DXUTGetCubeMapViewMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTD3DFormatToString@@YAPBDW4_D3DFORMAT@@_N@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_pstr$ = -8						; size = 4
_format$ = 8						; size = 4
_bWithPrefix$ = 12					; size = 1
?DXUTD3DFormatToString@@YAPBDW4_D3DFORMAT@@_N@Z PROC	; DXUTD3DFormatToString, COMDAT

; 2054 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2055 :     TCHAR* pstr = NULL;

	mov	DWORD PTR _pstr$[ebp], 0

; 2056 :     switch( format )

	mov	eax, DWORD PTR _format$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 827606349		; 3154454dH
	jg	SHORT $LN65@DXUTD3DFor
	cmp	DWORD PTR tv64[ebp], 827606349		; 3154454dH
	je	$LN12@DXUTD3DFor
	cmp	DWORD PTR tv64[ebp], 117		; 00000075H
	ja	$LN4@DXUTD3DFor
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN67@DXUTD3DFor[ecx]
	jmp	DWORD PTR $LN68@DXUTD3DFor[edx*4]
$LN65@DXUTD3DFor:
	cmp	DWORD PTR tv64[ebp], 861165636		; 33545844H
	jg	SHORT $LN66@DXUTD3DFor
	cmp	DWORD PTR tv64[ebp], 861165636		; 33545844H
	je	$LN27@DXUTD3DFor
	cmp	DWORD PTR tv64[ebp], 827611204		; 31545844H
	je	$LN29@DXUTD3DFor
	cmp	DWORD PTR tv64[ebp], 844388420		; 32545844H
	je	$LN28@DXUTD3DFor
	cmp	DWORD PTR tv64[ebp], 844715353		; 32595559H
	je	$LN30@DXUTD3DFor
	jmp	$LN4@DXUTD3DFor
$LN66@DXUTD3DFor:
	cmp	DWORD PTR tv64[ebp], 877942852		; 34545844H
	je	$LN26@DXUTD3DFor
	cmp	DWORD PTR tv64[ebp], 894720068		; 35545844H
	je	$LN25@DXUTD3DFor
	cmp	DWORD PTR tv64[ebp], 1498831189		; 59565955H
	je	$LN31@DXUTD3DFor
	jmp	$LN4@DXUTD3DFor
$LN60@DXUTD3DFor:

; 2057 :     {
; 2058 :     case D3DFMT_UNKNOWN:         pstr = "D3DFMT_UNKNOWN"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@
	jmp	$LN61@DXUTD3DFor
$LN59@DXUTD3DFor:

; 2059 :     case D3DFMT_R8G8B8:          pstr = "D3DFMT_R8G8B8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN58@DXUTD3DFor:

; 2060 :     case D3DFMT_A8R8G8B8:        pstr = "D3DFMT_A8R8G8B8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN57@DXUTD3DFor:

; 2061 :     case D3DFMT_X8R8G8B8:        pstr = "D3DFMT_X8R8G8B8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN56@DXUTD3DFor:

; 2062 :     case D3DFMT_R5G6B5:          pstr = "D3DFMT_R5G6B5"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@
	jmp	$LN61@DXUTD3DFor
$LN55@DXUTD3DFor:

; 2063 :     case D3DFMT_X1R5G5B5:        pstr = "D3DFMT_X1R5G5B5"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@
	jmp	$LN61@DXUTD3DFor
$LN54@DXUTD3DFor:

; 2064 :     case D3DFMT_A1R5G5B5:        pstr = "D3DFMT_A1R5G5B5"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@
	jmp	$LN61@DXUTD3DFor
$LN53@DXUTD3DFor:

; 2065 :     case D3DFMT_A4R4G4B4:        pstr = "D3DFMT_A4R4G4B4"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@
	jmp	$LN61@DXUTD3DFor
$LN52@DXUTD3DFor:

; 2066 :     case D3DFMT_R3G3B2:          pstr = "D3DFMT_R3G3B2"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@
	jmp	$LN61@DXUTD3DFor
$LN51@DXUTD3DFor:

; 2067 :     case D3DFMT_A8:              pstr = "D3DFMT_A8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_09JNGIHEFB@D3DFMT_A8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN50@DXUTD3DFor:

; 2068 :     case D3DFMT_A8R3G3B2:        pstr = "D3DFMT_A8R3G3B2"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@
	jmp	$LN61@DXUTD3DFor
$LN49@DXUTD3DFor:

; 2069 :     case D3DFMT_X4R4G4B4:        pstr = "D3DFMT_X4R4G4B4"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@
	jmp	$LN61@DXUTD3DFor
$LN48@DXUTD3DFor:

; 2070 :     case D3DFMT_A2B10G10R10:     pstr = "D3DFMT_A2B10G10R10"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@
	jmp	$LN61@DXUTD3DFor
$LN47@DXUTD3DFor:

; 2071 :     case D3DFMT_A8B8G8R8:        pstr = "D3DFMT_A8B8G8R8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN46@DXUTD3DFor:

; 2072 :     case D3DFMT_X8B8G8R8:        pstr = "D3DFMT_X8B8G8R8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN45@DXUTD3DFor:

; 2073 :     case D3DFMT_G16R16:          pstr = "D3DFMT_G16R16"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@
	jmp	$LN61@DXUTD3DFor
$LN44@DXUTD3DFor:

; 2074 :     case D3DFMT_A2R10G10B10:     pstr = "D3DFMT_A2R10G10B10"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@
	jmp	$LN61@DXUTD3DFor
$LN43@DXUTD3DFor:

; 2075 :     case D3DFMT_A16B16G16R16:    pstr = "D3DFMT_A16B16G16R16"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@
	jmp	$LN61@DXUTD3DFor
$LN42@DXUTD3DFor:

; 2076 :     case D3DFMT_A8P8:            pstr = "D3DFMT_A8P8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN41@DXUTD3DFor:

; 2077 :     case D3DFMT_P8:              pstr = "D3DFMT_P8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_09IAIMLNBG@D3DFMT_P8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN40@DXUTD3DFor:

; 2078 :     case D3DFMT_L8:              pstr = "D3DFMT_L8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_09JFLAOHAC@D3DFMT_L8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN39@DXUTD3DFor:

; 2079 :     case D3DFMT_A8L8:            pstr = "D3DFMT_A8L8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN38@DXUTD3DFor:

; 2080 :     case D3DFMT_A4L4:            pstr = "D3DFMT_A4L4"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@
	jmp	$LN61@DXUTD3DFor
$LN37@DXUTD3DFor:

; 2081 :     case D3DFMT_V8U8:            pstr = "D3DFMT_V8U8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN36@DXUTD3DFor:

; 2082 :     case D3DFMT_L6V5U5:          pstr = "D3DFMT_L6V5U5"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@
	jmp	$LN61@DXUTD3DFor
$LN35@DXUTD3DFor:

; 2083 :     case D3DFMT_X8L8V8U8:        pstr = "D3DFMT_X8L8V8U8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN34@DXUTD3DFor:

; 2084 :     case D3DFMT_Q8W8V8U8:        pstr = "D3DFMT_Q8W8V8U8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN33@DXUTD3DFor:

; 2085 :     case D3DFMT_V16U16:          pstr = "D3DFMT_V16U16"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@
	jmp	$LN61@DXUTD3DFor
$LN32@DXUTD3DFor:

; 2086 :     case D3DFMT_A2W10V10U10:     pstr = "D3DFMT_A2W10V10U10"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@
	jmp	$LN61@DXUTD3DFor
$LN31@DXUTD3DFor:

; 2087 :     case D3DFMT_UYVY:            pstr = "D3DFMT_UYVY"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@
	jmp	$LN61@DXUTD3DFor
$LN30@DXUTD3DFor:

; 2088 :     case D3DFMT_YUY2:            pstr = "D3DFMT_YUY2"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@
	jmp	$LN61@DXUTD3DFor
$LN29@DXUTD3DFor:

; 2089 :     case D3DFMT_DXT1:            pstr = "D3DFMT_DXT1"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@
	jmp	$LN61@DXUTD3DFor
$LN28@DXUTD3DFor:

; 2090 :     case D3DFMT_DXT2:            pstr = "D3DFMT_DXT2"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@
	jmp	$LN61@DXUTD3DFor
$LN27@DXUTD3DFor:

; 2091 :     case D3DFMT_DXT3:            pstr = "D3DFMT_DXT3"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@
	jmp	$LN61@DXUTD3DFor
$LN26@DXUTD3DFor:

; 2092 :     case D3DFMT_DXT4:            pstr = "D3DFMT_DXT4"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@
	jmp	$LN61@DXUTD3DFor
$LN25@DXUTD3DFor:

; 2093 :     case D3DFMT_DXT5:            pstr = "D3DFMT_DXT5"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@
	jmp	$LN61@DXUTD3DFor
$LN24@DXUTD3DFor:

; 2094 :     case D3DFMT_D16_LOCKABLE:    pstr = "D3DFMT_D16_LOCKABLE"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@
	jmp	$LN61@DXUTD3DFor
$LN23@DXUTD3DFor:

; 2095 :     case D3DFMT_D32:             pstr = "D3DFMT_D32"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@
	jmp	$LN61@DXUTD3DFor
$LN22@DXUTD3DFor:

; 2096 :     case D3DFMT_D15S1:           pstr = "D3DFMT_D15S1"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@
	jmp	$LN61@DXUTD3DFor
$LN21@DXUTD3DFor:

; 2097 :     case D3DFMT_D24S8:           pstr = "D3DFMT_D24S8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN20@DXUTD3DFor:

; 2098 :     case D3DFMT_D24X8:           pstr = "D3DFMT_D24X8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@
	jmp	$LN61@DXUTD3DFor
$LN19@DXUTD3DFor:

; 2099 :     case D3DFMT_D24X4S4:         pstr = "D3DFMT_D24X4S4"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@
	jmp	$LN61@DXUTD3DFor
$LN18@DXUTD3DFor:

; 2100 :     case D3DFMT_D16:             pstr = "D3DFMT_D16"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN17@DXUTD3DFor:

; 2101 :     case D3DFMT_L16:             pstr = "D3DFMT_L16"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN16@DXUTD3DFor:

; 2102 :     case D3DFMT_VERTEXDATA:      pstr = "D3DFMT_VERTEXDATA"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN15@DXUTD3DFor:

; 2103 :     case D3DFMT_INDEX16:         pstr = "D3DFMT_INDEX16"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN14@DXUTD3DFor:

; 2104 :     case D3DFMT_INDEX32:         pstr = "D3DFMT_INDEX32"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN13@DXUTD3DFor:

; 2105 :     case D3DFMT_Q16W16V16U16:    pstr = "D3DFMT_Q16W16V16U16"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN12@DXUTD3DFor:

; 2106 :     case D3DFMT_MULTI2_ARGB8:    pstr = "D3DFMT_MULTI2_ARGB8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN11@DXUTD3DFor:

; 2107 :     case D3DFMT_R16F:            pstr = "D3DFMT_R16F"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN10@DXUTD3DFor:

; 2108 :     case D3DFMT_G16R16F:         pstr = "D3DFMT_G16R16F"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN9@DXUTD3DFor:

; 2109 :     case D3DFMT_A16B16G16R16F:   pstr = "D3DFMT_A16B16G16R16F"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN8@DXUTD3DFor:

; 2110 :     case D3DFMT_R32F:            pstr = "D3DFMT_R32F"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN7@DXUTD3DFor:

; 2111 :     case D3DFMT_G32R32F:         pstr = "D3DFMT_G32R32F"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN6@DXUTD3DFor:

; 2112 :     case D3DFMT_A32B32G32R32F:   pstr = "D3DFMT_A32B32G32R32F"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN5@DXUTD3DFor:

; 2113 :     case D3DFMT_CxV8U8:          pstr = "D3DFMT_CxV8U8"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@
	jmp	SHORT $LN61@DXUTD3DFor
$LN4@DXUTD3DFor:

; 2114 :     default:                     pstr = "Unknown format"; break;

	mov	DWORD PTR _pstr$[ebp], OFFSET ??_C@_0P@BJJPCHFI@Unknown?5format?$AA@
$LN61@DXUTD3DFor:

; 2115 :     }
; 2116 :     if( bWithPrefix || strstr( pstr, "D3DFMT_" )== NULL )

	movzx	eax, BYTE PTR _bWithPrefix$[ebp]
	test	eax, eax
	jne	SHORT $LN2@DXUTD3DFor
	push	OFFSET ??_C@_07NCBDPBMK@D3DFMT_?$AA@
	mov	eax, DWORD PTR _pstr$[ebp]
	push	eax
	call	?strstr@@YAPADPADPBD@Z			; strstr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@DXUTD3DFor
$LN2@DXUTD3DFor:

; 2117 :         return pstr;

	mov	eax, DWORD PTR _pstr$[ebp]
	jmp	SHORT $LN63@DXUTD3DFor

; 2118 :     else

	jmp	SHORT $LN63@DXUTD3DFor
$LN3@DXUTD3DFor:

; 2119 :         return pstr + lstrlen( "D3DFMT_" );

	mov	esi, esp
	push	OFFSET ??_C@_07NCBDPBMK@D3DFMT_?$AA@
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _pstr$[ebp]
$LN63@DXUTD3DFor:

; 2120 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN68@DXUTD3DFor:
	DD	$LN60@DXUTD3DFor
	DD	$LN59@DXUTD3DFor
	DD	$LN58@DXUTD3DFor
	DD	$LN57@DXUTD3DFor
	DD	$LN56@DXUTD3DFor
	DD	$LN55@DXUTD3DFor
	DD	$LN54@DXUTD3DFor
	DD	$LN53@DXUTD3DFor
	DD	$LN52@DXUTD3DFor
	DD	$LN51@DXUTD3DFor
	DD	$LN50@DXUTD3DFor
	DD	$LN49@DXUTD3DFor
	DD	$LN48@DXUTD3DFor
	DD	$LN47@DXUTD3DFor
	DD	$LN46@DXUTD3DFor
	DD	$LN45@DXUTD3DFor
	DD	$LN44@DXUTD3DFor
	DD	$LN43@DXUTD3DFor
	DD	$LN42@DXUTD3DFor
	DD	$LN41@DXUTD3DFor
	DD	$LN40@DXUTD3DFor
	DD	$LN39@DXUTD3DFor
	DD	$LN38@DXUTD3DFor
	DD	$LN37@DXUTD3DFor
	DD	$LN36@DXUTD3DFor
	DD	$LN35@DXUTD3DFor
	DD	$LN34@DXUTD3DFor
	DD	$LN33@DXUTD3DFor
	DD	$LN32@DXUTD3DFor
	DD	$LN24@DXUTD3DFor
	DD	$LN23@DXUTD3DFor
	DD	$LN22@DXUTD3DFor
	DD	$LN21@DXUTD3DFor
	DD	$LN20@DXUTD3DFor
	DD	$LN19@DXUTD3DFor
	DD	$LN18@DXUTD3DFor
	DD	$LN17@DXUTD3DFor
	DD	$LN16@DXUTD3DFor
	DD	$LN15@DXUTD3DFor
	DD	$LN14@DXUTD3DFor
	DD	$LN13@DXUTD3DFor
	DD	$LN11@DXUTD3DFor
	DD	$LN10@DXUTD3DFor
	DD	$LN9@DXUTD3DFor
	DD	$LN8@DXUTD3DFor
	DD	$LN7@DXUTD3DFor
	DD	$LN6@DXUTD3DFor
	DD	$LN5@DXUTD3DFor
	DD	$LN4@DXUTD3DFor
$LN67@DXUTD3DFor:
	DB	0
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	28					; 0000001cH
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	29					; 0000001dH
	DB	30					; 0000001eH
	DB	48					; 00000030H
	DB	31					; 0000001fH
	DB	48					; 00000030H
	DB	32					; 00000020H
	DB	48					; 00000030H
	DB	33					; 00000021H
	DB	48					; 00000030H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	39					; 00000027H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	48					; 00000030H
	DB	40					; 00000028H
	DB	41					; 00000029H
	DB	42					; 0000002aH
	DB	43					; 0000002bH
	DB	44					; 0000002cH
	DB	45					; 0000002dH
	DB	46					; 0000002eH
	DB	47					; 0000002fH
?DXUTD3DFormatToString@@YAPBDW4_D3DFORMAT@@_N@Z ENDP	; DXUTD3DFormatToString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTGetMediaSearchPath@@YAPBDXZ
_TEXT	SEGMENT
?DXUTGetMediaSearchPath@@YAPBDXZ PROC			; DXUTGetMediaSearchPath, COMDAT

; 292  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 293  :     return DXUTMediaSearchPath();

	call	?DXUTMediaSearchPath@@YAPADXZ		; DXUTMediaSearchPath

; 294  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUTGetMediaSearchPath@@YAPBDXZ ENDP			; DXUTGetMediaSearchPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTSetMediaSearchPath@@YAJPBD@Z
_TEXT	SEGMENT
_ch$1 = -32						; size = 4
_s_strSearchPath$ = -20					; size = 4
_hr$ = -8						; size = 4
_strPath$ = 8						; size = 4
?DXUTSetMediaSearchPath@@YAJPBD@Z PROC			; DXUTSetMediaSearchPath, COMDAT

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 300  :     HRESULT hr;
; 301  : 
; 302  :     TCHAR* s_strSearchPath = DXUTMediaSearchPath();

	call	?DXUTMediaSearchPath@@YAPADXZ		; DXUTMediaSearchPath
	mov	DWORD PTR _s_strSearchPath$[ebp], eax

; 303  : 
; 304  :     hr = StringCchCopy( s_strSearchPath, MAX_PATH, strPath );   

	mov	eax, DWORD PTR _strPath$[ebp]
	push	eax
	push	260					; 00000104H
	mov	ecx, DWORD PTR _s_strSearchPath$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA
	mov	DWORD PTR _hr$[ebp], eax

; 305  :     if( SUCCEEDED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@DXUTSetMed

; 306  :     {
; 307  :         // append slash if needed
; 308  :         size_t ch;
; 309  :         hr = StringCchLength( s_strSearchPath, MAX_PATH, &ch );

	lea	eax, DWORD PTR _ch$1[ebp]
	push	eax
	push	260					; 00000104H
	mov	ecx, DWORD PTR _s_strSearchPath$[ebp]
	push	ecx
	call	?StringCchLengthA@@YGJPBDIPAI@Z		; StringCchLengthA
	mov	DWORD PTR _hr$[ebp], eax

; 310  :         if( SUCCEEDED(hr) && s_strSearchPath[ch-1] != L'\\')

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@DXUTSetMed
	mov	eax, DWORD PTR _s_strSearchPath$[ebp]
	add	eax, DWORD PTR _ch$1[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN2@DXUTSetMed

; 311  :         {
; 312  :             hr = StringCchCat( s_strSearchPath, MAX_PATH, "\\" );

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	push	260					; 00000104H
	mov	eax, DWORD PTR _s_strSearchPath$[ebp]
	push	eax
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA
	mov	DWORD PTR _hr$[ebp], eax
$LN2@DXUTSetMed:

; 313  :         }
; 314  :     }
; 315  : 
; 316  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 317  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DXUTSetMed
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@DXUTSetMed:
	DD	1
	DD	$LN6@DXUTSetMed
$LN6@DXUTSetMed:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@DXUTSetMed
$LN5@DXUTSetMed:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
?DXUTSetMediaSearchPath@@YAJPBD@Z ENDP			; DXUTSetMediaSearchPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z
_TEXT	SEGMENT
$T1 = -1300						; size = 4
_strLeafName$ = -1096					; size = 260
_strLastSlash$ = -828					; size = 4
_strExeName$ = -816					; size = 260
_strExePath$ = -548					; size = 260
_strSearchFor$ = -280					; size = 260
_bFound$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
_strDestPath$ = 8					; size = 4
_cchDest$ = 12						; size = 4
_strFilename$ = 16					; size = 4
?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z PROC		; DXUTFindDXSDKMediaFileCch, COMDAT

; 326  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1304				; 00000518H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1304]
	mov	ecx, 326				; 00000146H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 327  :     bool bFound;
; 328  :     TCHAR strSearchFor[MAX_PATH];
; 329  :     
; 330  :     if( NULL==strFilename || strFilename[0] == 0 || NULL==strDestPath || cchDest < 10 )

	cmp	DWORD PTR _strFilename$[ebp], 0
	je	SHORT $LN9@DXUTFindDX
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _strFilename$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN9@DXUTFindDX
	cmp	DWORD PTR _strDestPath$[ebp], 0
	je	SHORT $LN9@DXUTFindDX
	cmp	DWORD PTR _cchDest$[ebp], 10		; 0000000aH
	jge	SHORT $LN10@DXUTFindDX
$LN9@DXUTFindDX:

; 331  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN12@DXUTFindDX
$LN10@DXUTFindDX:

; 332  : 
; 333  :     // Get the exe name, and exe path
; 334  :     TCHAR strExePath[MAX_PATH] = {0};

	mov	BYTE PTR _strExePath$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strExePath$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 335  :     TCHAR strExeName[MAX_PATH] = {0};

	mov	BYTE PTR _strExeName$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strExeName$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 336  :     TCHAR* strLastSlash = NULL;

	mov	DWORD PTR _strLastSlash$[ebp], 0

; 337  :     GetModuleFileName( NULL, strExePath, MAX_PATH );

	mov	esi, esp
	push	260					; 00000104H
	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__GetModuleFileNameA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 338  :     strExePath[MAX_PATH-1]=0;

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 260			; 00000104H
	jae	SHORT $LN13@DXUTFindDX
	jmp	SHORT $LN14@DXUTFindDX
$LN13@DXUTFindDX:
	call	___report_rangecheckfailure
$LN14@DXUTFindDX:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strExePath$[ebp+edx], 0

; 339  :     strLastSlash = strrchr( strExePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 340  :     if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN8@DXUTFindDX

; 341  :     {
; 342  :         StringCchCopy( strExeName, MAX_PATH, &strLastSlash[1] );

	mov	eax, 1
	shl	eax, 0
	add	eax, DWORD PTR _strLastSlash$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 343  : 
; 344  :         // Chop the exe name from the exe path
; 345  :         *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0

; 346  : 
; 347  :         // Chop the .exe from the exe name
; 348  :         strLastSlash = strrchr( strExeName, TEXT('.') );

	push	46					; 0000002eH
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 349  :         if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN8@DXUTFindDX

; 350  :             *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN8@DXUTFindDX:

; 351  :     }
; 352  : 
; 353  :     // Typical directories:
; 354  :     //      .\
; 355  :     //      ..\
; 356  :     //      ..\..\
; 357  :     //      %EXE_DIR%\
; 358  :     //      %EXE_DIR%\..\
; 359  :     //      %EXE_DIR%\..\..\
; 360  :     //      %EXE_DIR%\..\%EXE_NAME%
; 361  :     //      %EXE_DIR%\..\..\%EXE_NAME%
; 362  : 
; 363  :     // Typical directory search
; 364  :     bFound = DXUTFindMediaSearchTypicalDirs( strDestPath, cchDest, strFilename, strExePath, strExeName );

	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strFilename$[ebp]
	push	edx
	mov	eax, DWORD PTR _cchDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDestPath$[ebp]
	push	ecx
	call	?DXUTFindMediaSearchTypicalDirs@@YA_NPADHPBD00@Z ; DXUTFindMediaSearchTypicalDirs
	add	esp, 20					; 00000014H
	mov	BYTE PTR _bFound$[ebp], al

; 365  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN6@DXUTFindDX

; 366  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@DXUTFindDX
$LN6@DXUTFindDX:

; 367  : 
; 368  :     // Typical directory search again, but also look in a subdir called "\media\" 
; 369  :     StringCchPrintf( strSearchFor, MAX_PATH, "media\\%s", strFilename ); 

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	push	OFFSET ??_C@_08GDMOFFMA@media?2?$CFs?$AA@
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strSearchFor$[ebp]
	push	ecx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 16					; 00000010H

; 370  :     bFound = DXUTFindMediaSearchTypicalDirs( strDestPath, cchDest, strSearchFor, strExePath, strExeName );

	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSearchFor$[ebp]
	push	edx
	mov	eax, DWORD PTR _cchDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDestPath$[ebp]
	push	ecx
	call	?DXUTFindMediaSearchTypicalDirs@@YA_NPADHPBD00@Z ; DXUTFindMediaSearchTypicalDirs
	add	esp, 20					; 00000014H
	mov	BYTE PTR _bFound$[ebp], al

; 371  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN5@DXUTFindDX

; 372  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@DXUTFindDX
$LN5@DXUTFindDX:

; 373  : 
; 374  :     TCHAR strLeafName[MAX_PATH] = {0};

	mov	BYTE PTR _strLeafName$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strLeafName$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 375  : 
; 376  :     // Search all parent directories starting at .\ and using strFilename as the leaf name
; 377  :     StringCchCopy( strLeafName, MAX_PATH, strFilename ); 

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strLeafName$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 378  :     bFound = DXUTFindMediaSearchParentDirs( strDestPath, cchDest, ".", strLeafName );

	lea	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestPath$[ebp]
	push	edx
	call	?DXUTFindMediaSearchParentDirs@@YA_NPADH00@Z ; DXUTFindMediaSearchParentDirs
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$[ebp], al

; 379  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN4@DXUTFindDX

; 380  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@DXUTFindDX
$LN4@DXUTFindDX:

; 381  : 
; 382  :     // Search all parent directories starting at the exe's dir and using strFilename as the leaf name
; 383  :     bFound = DXUTFindMediaSearchParentDirs( strDestPath, cchDest, strExePath, strLeafName );

	lea	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _strDestPath$[ebp]
	push	eax
	call	?DXUTFindMediaSearchParentDirs@@YA_NPADH00@Z ; DXUTFindMediaSearchParentDirs
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$[ebp], al

; 384  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN3@DXUTFindDX

; 385  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@DXUTFindDX
$LN3@DXUTFindDX:

; 386  : 
; 387  :     // Search all parent directories starting at .\ and using "media\strFilename" as the leaf name
; 388  :     StringCchPrintf( strLeafName, MAX_PATH, "media\\%s", strFilename ); 

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	push	OFFSET ??_C@_08GDMOFFMA@media?2?$CFs?$AA@
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strLeafName$[ebp]
	push	ecx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 16					; 00000010H

; 389  :     bFound = DXUTFindMediaSearchParentDirs( strDestPath, cchDest, ".", strLeafName );

	lea	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestPath$[ebp]
	push	edx
	call	?DXUTFindMediaSearchParentDirs@@YA_NPADH00@Z ; DXUTFindMediaSearchParentDirs
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$[ebp], al

; 390  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN2@DXUTFindDX

; 391  :         return S_OK;

	xor	eax, eax
	jmp	SHORT $LN12@DXUTFindDX
$LN2@DXUTFindDX:

; 392  : 
; 393  :     // Search all parent directories starting at the exe's dir and using "media\strFilename" as the leaf name
; 394  :     bFound = DXUTFindMediaSearchParentDirs( strDestPath, cchDest, strExePath, strLeafName );

	lea	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _strDestPath$[ebp]
	push	eax
	call	?DXUTFindMediaSearchParentDirs@@YA_NPADH00@Z ; DXUTFindMediaSearchParentDirs
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$[ebp], al

; 395  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN1@DXUTFindDX

; 396  :         return S_OK;

	xor	eax, eax
	jmp	SHORT $LN12@DXUTFindDX
$LN1@DXUTFindDX:

; 397  : 
; 398  :     // On failure, return the file as the path but also return an error code
; 399  :     StringCchCopy( strDestPath, cchDest, strFilename );

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestPath$[ebp]
	push	edx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 400  : 
; 401  :     return DXUTERR_MEDIANOTFOUND;

	mov	eax, -2147219197			; 80040903H
$LN12@DXUTFindDX:

; 402  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@DXUTFindDX
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1304				; 00000518H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@DXUTFindDX:
	DD	4
	DD	$LN19@DXUTFindDX
$LN19@DXUTFindDX:
	DD	-280					; fffffee8H
	DD	260					; 00000104H
	DD	$LN15@DXUTFindDX
	DD	-548					; fffffddcH
	DD	260					; 00000104H
	DD	$LN16@DXUTFindDX
	DD	-816					; fffffcd0H
	DD	260					; 00000104H
	DD	$LN17@DXUTFindDX
	DD	-1096					; fffffbb8H
	DD	260					; 00000104H
	DD	$LN18@DXUTFindDX
$LN18@DXUTFindDX:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN17@DXUTFindDX:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN16@DXUTFindDX:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN15@DXUTFindDX:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z ENDP		; DXUTFindDXSDKMediaFileCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTDisplaySwitchingToREFWarning@@YAXXZ
_TEXT	SEGMENT
_nResult$1 = -260					; size = 4
_dtp$2 = -248						; size = 180
_dwSize$3 = -60						; size = 4
_dwType$4 = -48						; size = 4
_lResult$5 = -36					; size = 4
_hKey$6 = -24						; size = 4
_dwSkipWarning$7 = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
?DXUTDisplaySwitchingToREFWarning@@YAXXZ PROC		; DXUTDisplaySwitchingToREFWarning, COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 456				; 000001c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-456]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 42   :     if( DXUTGetShowMsgBoxOnError() )

	call	?DXUTGetShowMsgBoxOnError@@YA_NXZ	; DXUTGetShowMsgBoxOnError
	movzx	eax, al
	test	eax, eax
	je	$LN7@DXUTDispla

; 43   :     {
; 44   :         // Open the appropriate registry key
; 45   :         DWORD dwSkipWarning = 0;

	mov	DWORD PTR _dwSkipWarning$7[ebp], 0

; 46   :         HKEY hKey;
; 47   :         LONG lResult = RegOpenKeyEx( HKEY_CURRENT_USER, "Software\\Microsoft\\DirectX 9.0 SDK", 0, KEY_READ, &hKey );

	mov	esi, esp
	lea	eax, DWORD PTR _hKey$6[ebp]
	push	eax
	push	131097					; 00020019H
	push	0
	push	OFFSET ??_C@_0CD@JNJEACIN@Software?2Microsoft?2DirectX?59?40?5S@
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lResult$5[ebp], eax

; 48   :         if( ERROR_SUCCESS == lResult ) 

	cmp	DWORD PTR _lResult$5[ebp], 0
	jne	SHORT $LN5@DXUTDispla

; 49   :         {
; 50   :             DWORD dwType;
; 51   :             DWORD dwSize = sizeof(DWORD);

	mov	DWORD PTR _dwSize$3[ebp], 4

; 52   :             lResult = RegQueryValueEx( hKey, "Skip Warning On REF", NULL, &dwType, (BYTE*)&dwSkipWarning, &dwSize );

	mov	esi, esp
	lea	eax, DWORD PTR _dwSize$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwSkipWarning$7[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$4[ebp]
	push	edx
	push	0
	push	OFFSET ??_C@_0BE@ONMNIDPM@Skip?5Warning?5On?5REF?$AA@
	mov	eax, DWORD PTR _hKey$6[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lResult$5[ebp], eax

; 53   :             RegCloseKey( hKey );

	mov	esi, esp
	mov	eax, DWORD PTR _hKey$6[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@DXUTDispla:

; 54   :         }
; 55   : 
; 56   :         if( dwSkipWarning == 0 )

	cmp	DWORD PTR _dwSkipWarning$7[ebp], 0
	jne	$LN7@DXUTDispla

; 57   :         {
; 58   :             // Compact code to create a custom dialog box without using a template in a resource file.
; 59   :             // If this dialog were in a .rc file, this would be a lot simpler but every sample calling this function would
; 60   :             // need a copy of the dialog in its own .rc file. Also MessageBox API could be used here instead, but 
; 61   :             // the MessageBox API is simpler to call but it can't provide a "Don't show again" checkbox
; 62   :             typedef struct { DLGITEMTEMPLATE a; WORD b; WORD c; WORD d; WORD e; WORD f; } DXUT_DLG_ITEM; 
; 63   :             typedef struct { DLGTEMPLATE a; WORD b; WORD c; TCHAR d[2]; WORD e; TCHAR f[14]; DXUT_DLG_ITEM i1; DXUT_DLG_ITEM i2; DXUT_DLG_ITEM i3; DXUT_DLG_ITEM i4; DXUT_DLG_ITEM i5; } DXUT_DLG_DATA; 
; 64   : 
; 65   :             DXUT_DLG_DATA dtp = 
; 66   :             {                                                                                                                                                  
; 67   :                 {WS_CAPTION|WS_POPUP|WS_VISIBLE|WS_SYSMENU|DS_ABSALIGN|DS_3DLOOK|DS_SETFONT|DS_MODALFRAME|DS_CENTER,0,5,0,0,269,82},0,0," ",8,"MS Sans Serif", 
; 68   :                 {{WS_CHILD|WS_VISIBLE|SS_ICON|SS_CENTERIMAGE,0,7,7,24,24,0x100},0xFFFF,0x0082,0,0,0}, // icon
; 69   :                 {{WS_CHILD|WS_VISIBLE,0,40,7,230,25,0x101},0xFFFF,0x0082,0,0,0}, // static text
; 70   :                 {{WS_CHILD|WS_VISIBLE|BS_DEFPUSHBUTTON,0,80,39,50,14,IDYES},0xFFFF,0x0080,0,0,0}, // Yes button
; 71   :                 {{WS_CHILD|WS_VISIBLE,0,133,39,50,14,IDNO},0xFFFF,0x0080,0,0,0}, // No button
; 72   :                 {{WS_CHILD|WS_VISIBLE|BS_CHECKBOX,0,7,59,70,16,IDIGNORE},0xFFFF,0x0080,0,0,0}, // checkbox
; 73   :             }; 

	mov	DWORD PTR _dtp$2[ebp], -1865938747	; 90c808c5H
	mov	DWORD PTR _dtp$2[ebp+4], 0
	mov	eax, 5
	mov	WORD PTR _dtp$2[ebp+8], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+10], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+12], ax
	mov	eax, 269				; 0000010dH
	mov	WORD PTR _dtp$2[ebp+14], ax
	mov	eax, 82					; 00000052H
	mov	WORD PTR _dtp$2[ebp+16], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+18], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+20], ax
	mov	ax, WORD PTR ??_C@_01CLKCMJKC@?5?$AA@
	mov	WORD PTR _dtp$2[ebp+22], ax
	mov	eax, 8
	mov	WORD PTR _dtp$2[ebp+24], ax
	mov	eax, DWORD PTR ??_C@_0O@LMJDHGJK@MS?5Sans?5Serif?$AA@
	mov	DWORD PTR _dtp$2[ebp+26], eax
	mov	ecx, DWORD PTR ??_C@_0O@LMJDHGJK@MS?5Sans?5Serif?$AA@+4
	mov	DWORD PTR _dtp$2[ebp+30], ecx
	mov	edx, DWORD PTR ??_C@_0O@LMJDHGJK@MS?5Sans?5Serif?$AA@+8
	mov	DWORD PTR _dtp$2[ebp+34], edx
	mov	ax, WORD PTR ??_C@_0O@LMJDHGJK@MS?5Sans?5Serif?$AA@+12
	mov	WORD PTR _dtp$2[ebp+38], ax
	mov	DWORD PTR _dtp$2[ebp+40], 1342177795	; 50000203H
	mov	DWORD PTR _dtp$2[ebp+44], 0
	mov	eax, 7
	mov	WORD PTR _dtp$2[ebp+48], ax
	mov	eax, 7
	mov	WORD PTR _dtp$2[ebp+50], ax
	mov	eax, 24					; 00000018H
	mov	WORD PTR _dtp$2[ebp+52], ax
	mov	eax, 24					; 00000018H
	mov	WORD PTR _dtp$2[ebp+54], ax
	mov	eax, 256				; 00000100H
	mov	WORD PTR _dtp$2[ebp+56], ax
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _dtp$2[ebp+58], ax
	mov	eax, 130				; 00000082H
	mov	WORD PTR _dtp$2[ebp+60], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+62], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+64], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+66], ax
	mov	DWORD PTR _dtp$2[ebp+68], 1342177280	; 50000000H
	mov	DWORD PTR _dtp$2[ebp+72], 0
	mov	eax, 40					; 00000028H
	mov	WORD PTR _dtp$2[ebp+76], ax
	mov	eax, 7
	mov	WORD PTR _dtp$2[ebp+78], ax
	mov	eax, 230				; 000000e6H
	mov	WORD PTR _dtp$2[ebp+80], ax
	mov	eax, 25					; 00000019H
	mov	WORD PTR _dtp$2[ebp+82], ax
	mov	eax, 257				; 00000101H
	mov	WORD PTR _dtp$2[ebp+84], ax
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _dtp$2[ebp+86], ax
	mov	eax, 130				; 00000082H
	mov	WORD PTR _dtp$2[ebp+88], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+90], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+92], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+94], ax
	mov	DWORD PTR _dtp$2[ebp+96], 1342177281	; 50000001H
	mov	DWORD PTR _dtp$2[ebp+100], 0
	mov	eax, 80					; 00000050H
	mov	WORD PTR _dtp$2[ebp+104], ax
	mov	eax, 39					; 00000027H
	mov	WORD PTR _dtp$2[ebp+106], ax
	mov	eax, 50					; 00000032H
	mov	WORD PTR _dtp$2[ebp+108], ax
	mov	eax, 14					; 0000000eH
	mov	WORD PTR _dtp$2[ebp+110], ax
	mov	eax, 6
	mov	WORD PTR _dtp$2[ebp+112], ax
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _dtp$2[ebp+114], ax
	mov	eax, 128				; 00000080H
	mov	WORD PTR _dtp$2[ebp+116], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+118], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+120], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+122], ax
	mov	DWORD PTR _dtp$2[ebp+124], 1342177280	; 50000000H
	mov	DWORD PTR _dtp$2[ebp+128], 0
	mov	eax, 133				; 00000085H
	mov	WORD PTR _dtp$2[ebp+132], ax
	mov	eax, 39					; 00000027H
	mov	WORD PTR _dtp$2[ebp+134], ax
	mov	eax, 50					; 00000032H
	mov	WORD PTR _dtp$2[ebp+136], ax
	mov	eax, 14					; 0000000eH
	mov	WORD PTR _dtp$2[ebp+138], ax
	mov	eax, 7
	mov	WORD PTR _dtp$2[ebp+140], ax
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _dtp$2[ebp+142], ax
	mov	eax, 128				; 00000080H
	mov	WORD PTR _dtp$2[ebp+144], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+146], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+148], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+150], ax
	mov	DWORD PTR _dtp$2[ebp+152], 1342177282	; 50000002H
	mov	DWORD PTR _dtp$2[ebp+156], 0
	mov	eax, 7
	mov	WORD PTR _dtp$2[ebp+160], ax
	mov	eax, 59					; 0000003bH
	mov	WORD PTR _dtp$2[ebp+162], ax
	mov	eax, 70					; 00000046H
	mov	WORD PTR _dtp$2[ebp+164], ax
	mov	eax, 16					; 00000010H
	mov	WORD PTR _dtp$2[ebp+166], ax
	mov	eax, 5
	mov	WORD PTR _dtp$2[ebp+168], ax
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _dtp$2[ebp+170], ax
	mov	eax, 128				; 00000080H
	mov	WORD PTR _dtp$2[ebp+172], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+174], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+176], ax
	xor	eax, eax
	mov	WORD PTR _dtp$2[ebp+178], ax

; 74   : 
; 75   :             int nResult = (int) DialogBoxIndirect( DXUTGetHINSTANCE(), (DLGTEMPLATE*)&dtp, DXUTGetHWND(), DisplaySwitchToREFWarningProc ); 

	mov	esi, esp
	push	0
	push	OFFSET ?DisplaySwitchToREFWarningProc@@YGHPAUHWND__@@IIJ@Z ; DisplaySwitchToREFWarningProc
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	lea	eax, DWORD PTR _dtp$2[ebp]
	push	eax
	call	?DXUTGetHINSTANCE@@YAPAUHINSTANCE__@@XZ	; DXUTGetHINSTANCE
	push	eax
	call	DWORD PTR __imp__DialogBoxIndirectParamA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nResult$1[ebp], eax

; 76   : 
; 77   :             if( (nResult & 0x80) == 0x80 ) // "Don't show again" checkbox was checked

	mov	eax, DWORD PTR _nResult$1[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN3@DXUTDispla

; 78   :             {
; 79   :                 lResult = RegOpenKeyEx( HKEY_CURRENT_USER, "Software\\Microsoft\\DirectX 9.0 SDK", 0, KEY_WRITE, &hKey );

	mov	esi, esp
	lea	eax, DWORD PTR _hKey$6[ebp]
	push	eax
	push	131078					; 00020006H
	push	0
	push	OFFSET ??_C@_0CD@JNJEACIN@Software?2Microsoft?2DirectX?59?40?5S@
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lResult$5[ebp], eax

; 80   :                 if( ERROR_SUCCESS == lResult ) 

	cmp	DWORD PTR _lResult$5[ebp], 0
	jne	SHORT $LN3@DXUTDispla

; 81   :                 {
; 82   :                     dwSkipWarning = 1;

	mov	DWORD PTR _dwSkipWarning$7[ebp], 1

; 83   :                     RegSetValueEx( hKey, "Skip Warning On REF", 0, REG_DWORD, (BYTE*)&dwSkipWarning, sizeof(DWORD) );

	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _dwSkipWarning$7[ebp]
	push	eax
	push	4
	push	0
	push	OFFSET ??_C@_0BE@ONMNIDPM@Skip?5Warning?5On?5REF?$AA@
	mov	ecx, DWORD PTR _hKey$6[ebp]
	push	ecx
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   :                     RegCloseKey( hKey );

	mov	esi, esp
	mov	eax, DWORD PTR _hKey$6[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DXUTDispla:

; 85   :                 }
; 86   :             }
; 87   : 
; 88   :             // User choose not to continue
; 89   :             if( (nResult & 0x0F) == IDNO )

	mov	eax, DWORD PTR _nResult$1[ebp]
	and	eax, 15					; 0000000fH
	cmp	eax, 7
	jne	SHORT $LN7@DXUTDispla

; 90   :                 DXUTShutdown(1);

	push	1
	call	?DXUTShutdown@@YAXH@Z			; DXUTShutdown
	add	esp, 4
$LN7@DXUTDispla:

; 91   :         }
; 92   :     }
; 93   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@DXUTDispla
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 456				; 000001c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@DXUTDispla:
	DD	5
	DD	$LN14@DXUTDispla
$LN14@DXUTDispla:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN9@DXUTDispla
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@DXUTDispla
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN11@DXUTDispla
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN12@DXUTDispla
	DD	-248					; ffffff08H
	DD	180					; 000000b4H
	DD	$LN13@DXUTDispla
$LN13@DXUTDispla:
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	0
$LN12@DXUTDispla:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN11@DXUTDispla:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN10@DXUTDispla:
	DB	104					; 00000068H
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN9@DXUTDispla:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	87					; 00000057H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
?DXUTDisplaySwitchingToREFWarning@@YAXXZ ENDP		; DXUTDisplaySwitchingToREFWarning
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ
_TEXT	SEGMENT
$T1 = -672						; size = 64
$T2 = -600						; size = 64
$T3 = -528						; size = 64
_pZBasis$ = -264					; size = 4
_pYBasis$ = -252					; size = 4
_pXBasis$ = -240					; size = 4
_mRot$ = -228						; size = 64
_mLastRotInv$ = -156					; size = 64
_mInvView$ = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ PROC	; CDXUTDirectionWidget::UpdateLightDir, COMDAT
; _this$ = ecx

; 2696 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 676				; 000002a4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-676]
	mov	ecx, 169				; 000000a9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2697 :     D3DXMATRIX mInvView;

	lea	ecx, DWORD PTR _mInvView$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 2698 :     D3DXMatrixInverse(&mInvView, NULL, &m_mView);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 472				; 000001d8H
	push	eax
	push	0
	lea	ecx, DWORD PTR _mInvView$[ebp]
	push	ecx
	call	_D3DXMatrixInverse@12

; 2699 :     mInvView._41 = mInvView._42 = mInvView._43 = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mInvView$[ebp+56], xmm0
	movss	xmm0, DWORD PTR _mInvView$[ebp+56]
	movss	DWORD PTR _mInvView$[ebp+52], xmm0
	movss	xmm0, DWORD PTR _mInvView$[ebp+52]
	movss	DWORD PTR _mInvView$[ebp+48], xmm0

; 2700 : 
; 2701 :     D3DXMATRIX mLastRotInv;

	lea	ecx, DWORD PTR _mLastRotInv$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 2702 :     D3DXMatrixInverse(&mLastRotInv, NULL, &m_mRotSnapshot);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	push	0
	lea	ecx, DWORD PTR _mLastRotInv$[ebp]
	push	ecx
	call	_D3DXMatrixInverse@12

; 2703 : 
; 2704 :     D3DXMATRIX mRot = *m_ArcBall.GetRotationMatrix();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?GetRotationMatrix@CD3DArcBall@@QAEPBUD3DXMATRIX@@XZ ; CD3DArcBall::GetRotationMatrix
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _mRot$[ebp]
	rep movsd

; 2705 :     m_mRotSnapshot = mRot;

	lea	eax, DWORD PTR _mRot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??4_D3DXMATRIXA16@@QAEAAU0@ABUD3DXMATRIX@@@Z ; _D3DXMATRIXA16::operator=

; 2706 : 
; 2707 :     // Accumulate the delta of the arcball's rotation in view space.
; 2708 :     // Note that per-frame delta rotations could be problematic over long periods of time.
; 2709 :     m_mRot *= m_mView * mLastRotInv * mRot * mInvView;

	lea	eax, DWORD PTR _mInvView$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	edx, DWORD PTR _mRot$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR _mLastRotInv$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, eax
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, eax
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XD3DXMATRIX@@QAEAAU0@ABU0@@Z		; D3DXMATRIX::operator*=

; 2710 : 
; 2711 :     // Since we're accumulating delta rotations, we need to orthonormalize 
; 2712 :     // the matrix to prevent eventual matrix skew
; 2713 :     D3DXVECTOR3* pXBasis = (D3DXVECTOR3*) &m_mRot._11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pXBasis$[ebp], eax

; 2714 :     D3DXVECTOR3* pYBasis = (D3DXVECTOR3*) &m_mRot._21;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pYBasis$[ebp], eax

; 2715 :     D3DXVECTOR3* pZBasis = (D3DXVECTOR3*) &m_mRot._31;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pZBasis$[ebp], eax

; 2716 :     D3DXVec3Normalize( pXBasis, pXBasis );

	mov	eax, DWORD PTR _pXBasis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBasis$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 2717 :     D3DXVec3Cross( pYBasis, pZBasis, pXBasis );

	mov	eax, DWORD PTR _pXBasis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pZBasis$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pYBasis$[ebp]
	push	edx
	call	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Cross
	add	esp, 12					; 0000000cH

; 2718 :     D3DXVec3Normalize( pYBasis, pYBasis );

	mov	eax, DWORD PTR _pYBasis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pYBasis$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 2719 :     D3DXVec3Cross( pZBasis, pXBasis, pYBasis );

	mov	eax, DWORD PTR _pYBasis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBasis$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pZBasis$[ebp]
	push	edx
	call	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Cross
	add	esp, 12					; 0000000cH

; 2720 : 
; 2721 :     // Transform the default direction vector by the light's rotation matrix
; 2722 :     D3DXVec3TransformNormal( &m_vCurrentDir, &m_vDefaultDir, &m_mRot );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 448				; 000001c0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 460				; 000001ccH
	push	edx
	call	_D3DXVec3TransformNormal@12

; 2723 : 
; 2724 :     return S_OK;

	xor	eax, eax

; 2725 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@UpdateLigh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 676				; 000002a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@UpdateLigh:
	DD	3
	DD	$LN6@UpdateLigh
$LN6@UpdateLigh:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN3@UpdateLigh
	DD	-156					; ffffff64H
	DD	64					; 00000040H
	DD	$LN4@UpdateLigh
	DD	-228					; ffffff1cH
	DD	64					; 00000040H
	DD	$LN5@UpdateLigh
$LN5@UpdateLigh:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN4@UpdateLigh:
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
$LN3@UpdateLigh:
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ENDP	; CDXUTDirectionWidget::UpdateLightDir
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?StaticOnDestroyDevice@CDXUTDirectionWidget@@SAXXZ
_TEXT	SEGMENT
?StaticOnDestroyDevice@CDXUTDirectionWidget@@SAXXZ PROC	; CDXUTDirectionWidget::StaticOnDestroyDevice, COMDAT

; 2577 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2578 :     SAFE_RELEASE(s_pEffect);

	cmp	DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A, 0 ; CDXUTDirectionWidget::s_pEffect
	je	SHORT $LN2@StaticOnDe
	mov	eax, DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A, 0 ; CDXUTDirectionWidget::s_pEffect
$LN2@StaticOnDe:

; 2579 :     SAFE_RELEASE(s_pMesh);

	cmp	DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A, 0 ; CDXUTDirectionWidget::s_pMesh
	je	SHORT $LN3@StaticOnDe
	mov	eax, DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A, 0 ; CDXUTDirectionWidget::s_pMesh
$LN3@StaticOnDe:

; 2580 : }    

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StaticOnDestroyDevice@CDXUTDirectionWidget@@SAXXZ ENDP	; CDXUTDirectionWidget::StaticOnDestroyDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?StaticOnLostDevice@CDXUTDirectionWidget@@SAXXZ
_TEXT	SEGMENT
?StaticOnLostDevice@CDXUTDirectionWidget@@SAXXZ PROC	; CDXUTDirectionWidget::StaticOnLostDevice, COMDAT

; 2569 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2570 :     if( s_pEffect )

	cmp	DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A, 0 ; CDXUTDirectionWidget::s_pEffect
	je	SHORT $LN2@StaticOnLo

; 2571 :         s_pEffect->OnLostDevice();

	mov	eax, DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	push	edx
	mov	eax, DWORD PTR [ecx+276]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@StaticOnLo:

; 2572 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StaticOnLostDevice@CDXUTDirectionWidget@@SAXXZ ENDP	; CDXUTDirectionWidget::StaticOnLostDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv64 = -256						; size = 4
_iMouseY$1 = -56					; size = 4
_iMouseX$2 = -44					; size = 4
_iMouseY$3 = -32					; size = 4
_iMouseX$4 = -20					; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z PROC ; CDXUTDirectionWidget::HandleMessages, COMDAT
; _this$ = ecx

; 2586 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2587 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 8
	ja	$LN13@HandleMess
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN17@HandleMess[edx]
	jmp	DWORD PTR $LN18@HandleMess[eax*4]
$LN12@HandleMess:

; 2588 :     {
; 2589 :         case WM_LBUTTONDOWN:
; 2590 :         case WM_MBUTTONDOWN:
; 2591 :         case WM_RBUTTONDOWN:
; 2592 :         {
; 2593 :             if( ((m_nRotateMask & MOUSE_LEFT_BUTTON) != 0 && uMsg == WM_LBUTTONDOWN) ||
; 2594 :                 ((m_nRotateMask & MOUSE_MIDDLE_BUTTON) != 0 && uMsg == WM_MBUTTONDOWN) ||
; 2595 :                 ((m_nRotateMask & MOUSE_RIGHT_BUTTON) != 0 && uMsg == WM_RBUTTONDOWN) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 1
	je	SHORT $LN9@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN10@HandleMess
$LN9@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 2
	je	SHORT $LN8@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN10@HandleMess
$LN8@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 4
	je	SHORT $LN11@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	jne	SHORT $LN11@HandleMess
$LN10@HandleMess:

; 2596 :             {
; 2597 :                 int iMouseX = (int)(short)LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseX$4[ebp], ecx

; 2598 :                 int iMouseY = (int)(short)HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$3[ebp], ecx

; 2599 :                 m_ArcBall.OnBegin( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?OnBegin@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnBegin

; 2600 :                 SetCapture(hWnd);

	mov	esi, esp
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@HandleMess:

; 2601 :             }
; 2602 :             return TRUE;

	mov	eax, 1
	jmp	$LN15@HandleMess
$LN7@HandleMess:

; 2603 :         }
; 2604 : 
; 2605 :         case WM_MOUSEMOVE:
; 2606 :         {
; 2607 :             if( m_ArcBall.IsBeingDragged() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?IsBeingDragged@CD3DArcBall@@QBE_NXZ	; CD3DArcBall::IsBeingDragged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@HandleMess

; 2608 :             {
; 2609 :                 int iMouseX = (int)(short)LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseX$2[ebp], ecx

; 2610 :                 int iMouseY = (int)(short)HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$1[ebp], ecx

; 2611 :                 m_ArcBall.OnMove( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?OnMove@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnMove

; 2612 :                 UpdateLightDir();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ; CDXUTDirectionWidget::UpdateLightDir
$LN6@HandleMess:

; 2613 :             }
; 2614 :             return TRUE;

	mov	eax, 1
	jmp	SHORT $LN15@HandleMess
$LN5@HandleMess:

; 2615 :         }
; 2616 : 
; 2617 :         case WM_LBUTTONUP:
; 2618 :         case WM_MBUTTONUP:
; 2619 :         case WM_RBUTTONUP:
; 2620 :         {
; 2621 :             if( ((m_nRotateMask & MOUSE_LEFT_BUTTON) != 0 && uMsg == WM_LBUTTONUP) ||
; 2622 :                 ((m_nRotateMask & MOUSE_MIDDLE_BUTTON) != 0 && uMsg == WM_MBUTTONUP) ||
; 2623 :                 ((m_nRotateMask & MOUSE_RIGHT_BUTTON) != 0 && uMsg == WM_RBUTTONUP) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 1
	je	SHORT $LN2@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	je	SHORT $LN3@HandleMess
$LN2@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 2
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	je	SHORT $LN3@HandleMess
$LN1@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 4
	je	SHORT $LN4@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	jne	SHORT $LN4@HandleMess
$LN3@HandleMess:

; 2624 :             {
; 2625 :                 m_ArcBall.OnEnd();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd

; 2626 :                 ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@HandleMess:

; 2627 :             }
; 2628 : 
; 2629 :             UpdateLightDir();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ; CDXUTDirectionWidget::UpdateLightDir

; 2630 :             return TRUE;

	mov	eax, 1
	jmp	SHORT $LN15@HandleMess
$LN13@HandleMess:

; 2631 :         }
; 2632 :     }
; 2633 : 
; 2634 :     return 0;

	xor	eax, eax
$LN15@HandleMess:

; 2635 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN18@HandleMess:
	DD	$LN7@HandleMess
	DD	$LN12@HandleMess
	DD	$LN5@HandleMess
	DD	$LN13@HandleMess
$LN17@HandleMess:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	1
	DB	2
	DB	3
	DB	1
	DB	2
?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z ENDP ; CDXUTDirectionWidget::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnRender@CDXUTDirectionWidget@@QAEJUD3DXCOLOR@@PBUD3DXMATRIX@@1PBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
$T1 = -1176						; size = 64
$T2 = -1100						; size = 12
$T3 = -1080						; size = 64
$T4 = -1008						; size = 64
$T5 = -936						; size = 64
$T6 = -861						; size = 1
_iSubset$7 = -660					; size = 4
_mWorld$ = -648						; size = 64
_vL$ = -572						; size = 12
_vUp$ = -552						; size = 12
_vAt$ = -532						; size = 12
_mRotateB$ = -512					; size = 64
_mRotateA$ = -440					; size = 64
_vEyePt$ = -368						; size = 12
_mWorldViewProj$ = -336					; size = 64
_mTrans$ = -256						; size = 64
_mScale$ = -184						; size = 64
_mRotate$ = -112					; size = 64
_cPasses$ = -36						; size = 4
_iPass$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_color$ = 8						; size = 16
_pmView$ = 24						; size = 4
_pmProj$ = 28						; size = 4
_pEyePt$ = 32						; size = 4
?OnRender@CDXUTDirectionWidget@@QAEJUD3DXCOLOR@@PBUD3DXMATRIX@@1PBUD3DXVECTOR3@@@Z PROC ; CDXUTDirectionWidget::OnRender, COMDAT
; _this$ = ecx

; 2641 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1192				; 000004a8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1192]
	mov	ecx, 298				; 0000012aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T6[ebp], 0

; 2642 :     m_mView = *pmView;

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 472				; 000001d8H
	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _pmView$[ebx]
	rep movsd

; 2643 : 
; 2644 :     // Render the light spheres so the user can visually see the light dir
; 2645 :     UINT iPass, cPasses;
; 2646 :     D3DXMATRIX mRotate;

	lea	ecx, DWORD PTR _mRotate$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 2647 :     D3DXMATRIX mScale;

	lea	ecx, DWORD PTR _mScale$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 2648 :     D3DXMATRIX mTrans;

	lea	ecx, DWORD PTR _mTrans$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 2649 :     D3DXMATRIXA16 mWorldViewProj;

	lea	ecx, DWORD PTR _mWorldViewProj$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16

; 2650 :     HRESULT hr;
; 2651 : 
; 2652 :     s_pEffect->SetTechnique( "RenderWith1LightNoTexture" );

	mov	esi, esp
	push	OFFSET ??_C@_0BK@MCNKOHBK@RenderWith1LightNoTexture?$AA@
	mov	eax, DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	push	edx
	mov	eax, DWORD PTR [ecx+232]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2653 :     s_pEffect->SetVector( "g_MaterialDiffuseColor", (D3DXVECTOR4*)&color);

	mov	esi, esp
	lea	eax, DWORD PTR _color$[ebx]
	push	eax
	push	OFFSET ??_C@_0BH@JOJPMGMM@g_MaterialDiffuseColor?$AA@
	mov	ecx, DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	push	eax
	mov	ecx, DWORD PTR [edx+136]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2654 : 
; 2655 :     D3DXVECTOR3 vEyePt;

	lea	ecx, DWORD PTR _vEyePt$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 2656 :     D3DXVec3Normalize( &vEyePt, pEyePt );

	mov	eax, DWORD PTR _pEyePt$[ebx]
	push	eax
	lea	ecx, DWORD PTR _vEyePt$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 2657 :     V( s_pEffect->SetValue( "g_LightDir", &vEyePt, sizeof(D3DXVECTOR3) ) );
; 2658 : 
; 2659 :     // Rotate arrow model to point towards origin
; 2660 :     D3DXMATRIX mRotateA, mRotateB;

	lea	ecx, DWORD PTR _mRotateA$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	lea	ecx, DWORD PTR _mRotateB$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 2661 :     D3DXVECTOR3 vAt = D3DXVECTOR3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vAt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 2662 :     D3DXVECTOR3 vUp = D3DXVECTOR3(0,1,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vUp$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 2663 :     D3DXMatrixRotationX( &mRotateB, D3DX_PI );

	push	ecx
	movss	xmm0, DWORD PTR __real@40490fdb
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _mRotateB$[ebp]
	push	eax
	call	_D3DXMatrixRotationX@8

; 2664 :     D3DXMatrixLookAtLH( &mRotateA, &m_vCurrentDir, &vAt, &vUp );

	lea	eax, DWORD PTR _vUp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vAt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 460				; 000001ccH
	push	edx
	lea	eax, DWORD PTR _mRotateA$[ebp]
	push	eax
	call	_D3DXMatrixLookAtLH@16

; 2665 :     D3DXMatrixInverse( &mRotateA, NULL, &mRotateA );

	lea	eax, DWORD PTR _mRotateA$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _mRotateA$[ebp]
	push	ecx
	call	_D3DXMatrixInverse@12

; 2666 :     mRotate = mRotateB * mRotateA;

	lea	eax, DWORD PTR _mRotateA$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mRotateB$[ebp]
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _mRotate$[ebp]
	rep movsd

; 2667 : 
; 2668 :     D3DXVECTOR3 vL = m_vCurrentDir * m_fRadius * 1.0f;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _vL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+128]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 460				; 000001ccH
	call	??DD3DXVECTOR3@@QBE?AU0@M@Z		; D3DXVECTOR3::operator*
	mov	ecx, eax
	call	??DD3DXVECTOR3@@QBE?AU0@M@Z		; D3DXVECTOR3::operator*

; 2669 :     D3DXMatrixTranslation( &mTrans, vL.x, vL.y, vL.z );

	push	ecx
	movss	xmm0, DWORD PTR _vL$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vL$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vL$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _mTrans$[ebp]
	push	eax
	call	_D3DXMatrixTranslation@16

; 2670 :     D3DXMatrixScaling( &mScale, m_fRadius*0.2f, m_fRadius*0.2f, m_fRadius*0.2f );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+128]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+128]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+128]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _mScale$[ebp]
	push	eax
	call	_D3DXMatrixScaling@16

; 2671 : 
; 2672 :     D3DXMATRIX mWorld = mRotate * mScale * mTrans;

	lea	eax, DWORD PTR _mTrans$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mWorld$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mScale$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR _mRotate$[ebp]
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, eax
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*

; 2673 :     mWorldViewProj = mWorld * (m_mView) * (*pmProj);

	mov	eax, DWORD PTR _pmProj$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 472				; 000001d8H
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR _mWorld$[ebp]
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, eax
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	push	eax
	lea	ecx, DWORD PTR _mWorldViewProj$[ebp]
	call	??4_D3DXMATRIXA16@@QAEAAU0@ABUD3DXMATRIX@@@Z ; _D3DXMATRIXA16::operator=

; 2674 : 
; 2675 :     V( s_pEffect->SetMatrix( "g_mWorldViewProjection", &mWorldViewProj ) );
; 2676 :     V( s_pEffect->SetMatrix( "g_mWorld", &mWorld ) );
; 2677 : 
; 2678 :     for( int iSubset=0; iSubset<2; iSubset++ )

	mov	DWORD PTR _iSubset$7[ebp], 0
	jmp	SHORT $LN6@OnRender
$LN5@OnRender:
	mov	eax, DWORD PTR _iSubset$7[ebp]
	add	eax, 1
	mov	DWORD PTR _iSubset$7[ebp], eax
$LN6@OnRender:
	cmp	DWORD PTR _iSubset$7[ebp], 2
	jge	SHORT $LN4@OnRender

; 2679 :     {
; 2680 :         V( s_pEffect->Begin(&cPasses, 0) );
; 2681 :         for (iPass = 0; iPass < cPasses; iPass++)

	mov	DWORD PTR _iPass$[ebp], 0
	jmp	SHORT $LN3@OnRender
$LN2@OnRender:
	mov	eax, DWORD PTR _iPass$[ebp]
	add	eax, 1
	mov	DWORD PTR _iPass$[ebp], eax
$LN3@OnRender:
	cmp	BYTE PTR $T6[ebp], 0
	jne	SHORT $LN9@OnRender
	push	OFFSET $LN10@OnRender
	call	__RTC_UninitUse
	add	esp, 4
$LN9@OnRender:
	mov	eax, DWORD PTR _iPass$[ebp]
	cmp	eax, DWORD PTR _cPasses$[ebp]
	jae	SHORT $LN1@OnRender

; 2682 :         {
; 2683 :             V( s_pEffect->BeginPass(iPass) );
; 2684 :             V( s_pMesh->DrawSubset(iSubset) );
; 2685 :             V( s_pEffect->EndPass() );
; 2686 :         }

	jmp	SHORT $LN2@OnRender
$LN1@OnRender:

; 2687 :         V( s_pEffect->End() );
; 2688 :     }

	jmp	SHORT $LN5@OnRender
$LN4@OnRender:

; 2689 : 
; 2690 :     return S_OK;

	xor	eax, eax

; 2691 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@OnRender
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	28					; 0000001cH
	npad	3
$LN23@OnRender:
	DD	11					; 0000000bH
	DD	$LN22@OnRender
$LN22@OnRender:
	DD	-112					; ffffff90H
	DD	64					; 00000040H
	DD	$LN11@OnRender
	DD	-184					; ffffff48H
	DD	64					; 00000040H
	DD	$LN12@OnRender
	DD	-256					; ffffff00H
	DD	64					; 00000040H
	DD	$LN13@OnRender
	DD	-336					; fffffeb0H
	DD	64					; 00000040H
	DD	$LN14@OnRender
	DD	-368					; fffffe90H
	DD	12					; 0000000cH
	DD	$LN15@OnRender
	DD	-440					; fffffe48H
	DD	64					; 00000040H
	DD	$LN16@OnRender
	DD	-512					; fffffe00H
	DD	64					; 00000040H
	DD	$LN17@OnRender
	DD	-532					; fffffdecH
	DD	12					; 0000000cH
	DD	$LN18@OnRender
	DD	-552					; fffffdd8H
	DD	12					; 0000000cH
	DD	$LN19@OnRender
	DD	-572					; fffffdc4H
	DD	12					; 0000000cH
	DD	$LN20@OnRender
	DD	-648					; fffffd78H
	DD	64					; 00000040H
	DD	$LN21@OnRender
$LN21@OnRender:
	DB	109					; 0000006dH
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN20@OnRender:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	0
$LN19@OnRender:
	DB	118					; 00000076H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	0
$LN18@OnRender:
	DB	118					; 00000076H
	DB	65					; 00000041H
	DB	116					; 00000074H
	DB	0
$LN17@OnRender:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	0
$LN16@OnRender:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	65					; 00000041H
	DB	0
$LN15@OnRender:
	DB	118					; 00000076H
	DB	69					; 00000045H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	0
$LN14@OnRender:
	DB	109					; 0000006dH
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	106					; 0000006aH
	DB	0
$LN13@OnRender:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN12@OnRender:
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN11@OnRender:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN10@OnRender:
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?OnRender@CDXUTDirectionWidget@@QAEJUD3DXCOLOR@@PBUD3DXMATRIX@@1PBUD3DXVECTOR3@@@Z ENDP ; CDXUTDirectionWidget::OnRender
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnResetDevice@CDXUTDirectionWidget@@QAEJPBU_D3DSURFACE_DESC@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pBackBufferSurfaceDesc$ = 8				; size = 4
?OnResetDevice@CDXUTDirectionWidget@@QAEJPBU_D3DSURFACE_DESC@@@Z PROC ; CDXUTDirectionWidget::OnResetDevice, COMDAT
; _this$ = ecx

; 2561 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2562 :     m_ArcBall.SetWindow( pBackBufferSurfaceDesc->Width, pBackBufferSurfaceDesc->Height );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pBackBufferSurfaceDesc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _pBackBufferSurfaceDesc$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?SetWindow@CD3DArcBall@@QAEXHHM@Z	; CD3DArcBall::SetWindow

; 2563 :     return S_OK;

	xor	eax, eax

; 2564 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?OnResetDevice@CDXUTDirectionWidget@@QAEJPBU_D3DSURFACE_DESC@@@Z ENDP ; CDXUTDirectionWidget::OnResetDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?StaticOnCreateDevice@CDXUTDirectionWidget@@SAJPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
$T1 = -508						; size = 4
$T2 = -496						; size = 4
_rgdwAdjacency$ = -292					; size = 4
_str$ = -268						; size = 260
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
?StaticOnCreateDevice@CDXUTDirectionWidget@@SAJPAUIDirect3DDevice9@@@Z PROC ; CDXUTDirectionWidget::StaticOnCreateDevice, COMDAT

; 2522 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2523 :     TCHAR str[MAX_PATH];
; 2524 :     HRESULT hr;
; 2525 : 
; 2526 :     s_pd3dDevice = pd3dDevice;

	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	DWORD PTR ?s_pd3dDevice@CDXUTDirectionWidget@@1PAUIDirect3DDevice9@@A, eax ; CDXUTDirectionWidget::s_pd3dDevice

; 2527 :    
; 2528 :     // Read the D3DX effect file
; 2529 :     DXUTFindDXSDKMediaFileCch( str, MAX_PATH, "UI\\DXUTShared.fx" );

	push	OFFSET ??_C@_0BB@NKBHBICM@UI?2DXUTShared?4fx?$AA@
	push	260					; 00000104H
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z ; DXUTFindDXSDKMediaFileCch
	add	esp, 12					; 0000000cH

; 2530 : 
; 2531 :     // If this fails, there should be debug output as to 
; 2532 :     // why the .fx file failed to compile
; 2533 :     D3DXCreateEffectFromFileA( s_pd3dDevice, str, NULL, NULL, D3DXFX_NOT_CLONEABLE, NULL, &s_pEffect, NULL );

	push	0
	push	OFFSET ?s_pEffect@CDXUTDirectionWidget@@1PAUID3DXEffect@@A ; CDXUTDirectionWidget::s_pEffect
	push	0
	push	2048					; 00000800H
	push	0
	push	0
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?s_pd3dDevice@CDXUTDirectionWidget@@1PAUIDirect3DDevice9@@A ; CDXUTDirectionWidget::s_pd3dDevice
	push	ecx
	call	_D3DXCreateEffectFromFileA@32

; 2534 : 
; 2535 :     // Load the mesh with D3DX and get back a ID3DXMesh*.  For this
; 2536 :     // sample we'll ignore the X file's embedded materials since we know 
; 2537 :     // exactly the model we're loading.  See the mesh samples such as
; 2538 :     // "OptimizedMesh" for a more generic mesh loading example.
; 2539 :     DXUTFindDXSDKMediaFileCch( str, MAX_PATH, "UI\\arrow.x" );

	push	OFFSET ??_C@_0L@HCLLIMDN@UI?2arrow?4x?$AA@
	push	260					; 00000104H
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z ; DXUTFindDXSDKMediaFileCch
	add	esp, 12					; 0000000cH

; 2540 : 
; 2541 :     D3DXLoadMeshFromX( str, D3DXMESH_MANAGED, s_pd3dDevice, NULL, 
; 2542 :                                  NULL, NULL, NULL, &s_pMesh);

	push	OFFSET ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR ?s_pd3dDevice@CDXUTDirectionWidget@@1PAUIDirect3DDevice9@@A ; CDXUTDirectionWidget::s_pd3dDevice
	push	eax
	push	544					; 00000220H
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_D3DXLoadMeshFromXA@32

; 2543 : 
; 2544 :     // Optimize the mesh for this graphics card's vertex cache 
; 2545 :     // so when rendering the mesh's triangle list the vertices will 
; 2546 :     // cache hit more often so it won't have to re-execute the vertex shader 
; 2547 :     // on those vertices so it will improve perf.     
; 2548 :     DWORD* rgdwAdjacency = new DWORD[s_pMesh->GetNumFaces() * 3];

	mov	eax, DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	imul	eax, eax, 3
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _rgdwAdjacency$[ebp], eax

; 2549 :     if( rgdwAdjacency == NULL )

	cmp	DWORD PTR _rgdwAdjacency$[ebp], 0
	jne	SHORT $LN1@StaticOnCr

; 2550 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN2@StaticOnCr
$LN1@StaticOnCr:

; 2551 :     s_pMesh->GenerateAdjacency(1e-6f,rgdwAdjacency);

	mov	esi, esp
	mov	eax, DWORD PTR _rgdwAdjacency$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@358637bd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	push	eax
	mov	ecx, DWORD PTR [edx+88]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2552 :     s_pMesh->OptimizeInplace(D3DXMESHOPT_VERTEXCACHE, rgdwAdjacency, NULL, NULL, NULL);

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _rgdwAdjacency$[ebp]
	push	eax
	push	67108864				; 04000000H
	mov	ecx, DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?s_pMesh@CDXUTDirectionWidget@@1PAUID3DXMesh@@A ; CDXUTDirectionWidget::s_pMesh
	push	eax
	mov	ecx, DWORD PTR [edx+108]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2553 :     delete []rgdwAdjacency;

	mov	eax, DWORD PTR _rgdwAdjacency$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2554 : 
; 2555 :     return S_OK;

	xor	eax, eax
$LN2@StaticOnCr:

; 2556 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@StaticOnCr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@StaticOnCr:
	DD	1
	DD	$LN5@StaticOnCr
$LN5@StaticOnCr:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN4@StaticOnCr
$LN4@StaticOnCr:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?StaticOnCreateDevice@CDXUTDirectionWidget@@SAJPAUIDirect3DDevice9@@@Z ENDP ; CDXUTDirectionWidget::StaticOnCreateDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??0CDXUTDirectionWidget@@QAE@XZ
_TEXT	SEGMENT
$T1 = -224						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CDXUTDirectionWidget@@QAE@XZ PROC			; CDXUTDirectionWidget::CDXUTDirectionWidget, COMDAT
; _this$ = ecx

; 2508 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0CD3DArcBall@@QAE@XZ			; CD3DArcBall::CD3DArcBall
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 448				; 000001c0H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 460				; 000001ccH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 2509 :     m_fRadius = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+128], xmm0

; 2510 :     m_vDefaultDir = D3DXVECTOR3(0,1,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 448				; 000001c0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 2511 :     m_vCurrentDir = m_vDefaultDir;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 448				; 000001c0H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 460				; 000001ccH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 2512 :     m_nRotateMask = MOUSE_RIGHT_BUTTON;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 4

; 2513 : 
; 2514 :     D3DXMatrixIdentity( &m_mView );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 472				; 000001d8H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 2515 :     D3DXMatrixIdentity( &m_mRot );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 2516 :     D3DXMatrixIdentity( &m_mRotSnapshot );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 2517 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDXUTDirectionWidget@@QAE@XZ ENDP			; CDXUTDirectionWidget::CDXUTDirectionWidget
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@IAEJH@Z PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@IAEJH@Z ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEXXZ PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJH@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEXXZ ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QBEHXZ PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QBEHXZ ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEAAPAULINE_NODE@CDXUTLineManager@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEAAPAULINE_NODE@CDXUTLineManager@@H@Z PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEAAPAULINE_NODE@CDXUTLineManager@@H@Z ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJHABQAULINE_NODE@CDXUTLineManager@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
_value$ = 12						; size = 4
?SetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJHABQAULINE_NODE@CDXUTLineManager@@@Z PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetAt, COMDAT
; _this$ = ecx

; 791  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 792  :     // Validate arguments
; 793  :     if( nIndex < 0 ||
; 794  :         nIndex >= m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@SetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@SetAt
$LN1@SetAt:

; 795  :     {
; 796  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN5@SetAt
	push	796					; 0000031cH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@SetAt:

; 797  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@SetAt
$LN2@SetAt:

; 798  :     }
; 799  : 
; 800  :     m_pData[nIndex] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*4], eax

; 801  :     return S_OK;

	xor	eax, eax
$LN3@SetAt:

; 802  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJHABQAULINE_NODE@CDXUTLineManager@@@Z ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJABQAULINE_NODE@CDXUTLineManager@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJABQAULINE_NODE@CDXUTLineManager@@@Z PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@IAEJH@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJABQAULINE_NODE@CDXUTLineManager@@@Z ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJH@Z PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@IAEJH@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJH@Z ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::~CGrowableArray<CDXUTLineManager::LINE_NODE *>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEXXZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::~CGrowableArray<CDXUTLineManager::LINE_NODE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ PROC ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::CGrowableArray<CDXUTLineManager::LINE_NODE *>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ ENDP ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::CGrowableArray<CDXUTLineManager::LINE_NODE *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?RemoveAllLines@CDXUTLineManager@@QAEJXZ
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_pLineNode$3 = -32					; size = 4
_i$4 = -20						; size = 4
_this$ = -8						; size = 4
?RemoveAllLines@CDXUTLineManager@@QAEJXZ PROC		; CDXUTLineManager::RemoveAllLines, COMDAT
; _this$ = ecx

; 2395 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2396 :     for( int i=0; i<m_LinesList.GetSize(); i++ )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN5@RemoveAllL
$LN4@RemoveAllL:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN5@RemoveAllL:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QBEHXZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetSize
	cmp	DWORD PTR _i$4[ebp], eax
	jge	SHORT $LN3@RemoveAllL

; 2397 :     {
; 2398 :         LINE_NODE* pLineNode = m_LinesList.GetAt(i);

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEAAPAULINE_NODE@CDXUTLineManager@@H@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pLineNode$3[ebp], ecx

; 2399 :         if( pLineNode )

	cmp	DWORD PTR _pLineNode$3[ebp], 0
	je	SHORT $LN2@RemoveAllL

; 2400 :         {
; 2401 :             SAFE_DELETE_ARRAY( pLineNode->pVertexList );

	mov	eax, DWORD PTR _pLineNode$3[ebp]
	cmp	DWORD PTR [eax+17], 0
	je	SHORT $LN1@RemoveAllL
	mov	eax, DWORD PTR _pLineNode$3[ebp]
	mov	ecx, DWORD PTR [eax+17]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _pLineNode$3[ebp]
	mov	DWORD PTR [eax+17], 0
$LN1@RemoveAllL:

; 2402 :             delete pLineNode;

	mov	eax, DWORD PTR _pLineNode$3[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@RemoveAllL:

; 2403 :         }
; 2404 :     }

	jmp	SHORT $LN4@RemoveAllL
$LN3@RemoveAllL:

; 2405 :     m_LinesList.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEXXZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::RemoveAll

; 2406 : 
; 2407 :     return S_OK;

	xor	eax, eax

; 2408 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAllLines@CDXUTLineManager@@QAEJXZ ENDP		; CDXUTLineManager::RemoveAllLines
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?RemoveLine@CDXUTLineManager@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_pLineNode$4 = -32					; size = 4
_i$5 = -20						; size = 4
_this$ = -8						; size = 4
_nLineID$ = 8						; size = 4
?RemoveLine@CDXUTLineManager@@QAEJH@Z PROC		; CDXUTLineManager::RemoveLine, COMDAT
; _this$ = ecx

; 2377 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2378 :     for( int i=0; i<m_LinesList.GetSize(); i++ )

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN5@RemoveLine
$LN4@RemoveLine:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN5@RemoveLine:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QBEHXZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetSize
	cmp	DWORD PTR _i$5[ebp], eax
	jge	$LN3@RemoveLine

; 2379 :     {
; 2380 :         LINE_NODE* pLineNode = m_LinesList.GetAt(i);

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEAAPAULINE_NODE@CDXUTLineManager@@H@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pLineNode$4[ebp], ecx

; 2381 :         if( pLineNode && pLineNode->nLineID == nLineID )

	cmp	DWORD PTR _pLineNode$4[ebp], 0
	je	SHORT $LN2@RemoveLine
	mov	eax, DWORD PTR _pLineNode$4[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _nLineID$[ebp]
	jne	SHORT $LN2@RemoveLine

; 2382 :         {
; 2383 :             SAFE_DELETE_ARRAY( pLineNode->pVertexList );

	mov	eax, DWORD PTR _pLineNode$4[ebp]
	cmp	DWORD PTR [eax+17], 0
	je	SHORT $LN1@RemoveLine
	mov	eax, DWORD PTR _pLineNode$4[ebp]
	mov	ecx, DWORD PTR [eax+17]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _pLineNode$4[ebp]
	mov	DWORD PTR [eax+17], 0
$LN1@RemoveLine:

; 2384 :             delete pLineNode;

	mov	eax, DWORD PTR _pLineNode$4[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2385 :             m_LinesList.SetAt(i, NULL);

	mov	DWORD PTR $T3[ebp], 0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJHABQAULINE_NODE@CDXUTLineManager@@@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::SetAt
$LN2@RemoveLine:

; 2386 :         }
; 2387 :     }

	jmp	$LN4@RemoveLine
$LN3@RemoveLine:

; 2388 : 
; 2389 :     return S_OK;

	xor	eax, eax

; 2390 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveLine@CDXUTLineManager@@QAEJH@Z ENDP		; CDXUTLineManager::RemoveLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?AddRect@CDXUTLineManager@@QAEJPAHUtagRECT@@KMM_N@Z
_TEXT	SEGMENT
_vertexList$1 = -132					; size = 40
_vertexList$2 = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pnLineID$ = 8						; size = 4
_rc$ = 12						; size = 16
_Color$ = 28						; size = 4
_fWidth$ = 32						; size = 4
_fScaleRatio$ = 36					; size = 4
_bAntiAlias$ = 40					; size = 1
?AddRect@CDXUTLineManager@@QAEJPAHUtagRECT@@KMM_N@Z PROC ; CDXUTLineManager::AddRect, COMDAT
; _this$ = ecx

; 2320 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2321 :     if( fWidth > 2.0f )

	movss	xmm0, DWORD PTR _fWidth$[ebp]
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	$LN2@AddRect

; 2322 :     {
; 2323 :         D3DXVECTOR2 vertexList[8];

	push	OFFSET ??0D3DXVECTOR2@@QAE@XZ		; D3DXVECTOR2::D3DXVECTOR2
	push	8
	push	8
	lea	eax, DWORD PTR _vertexList$2[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 2324 : 
; 2325 :         vertexList[0].x = (float)rc.left;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp]
	mov	eax, 8
	imul	ecx, eax, 0
	movss	DWORD PTR _vertexList$2[ebp+ecx], xmm0

; 2326 :         vertexList[0].y = (float)rc.top - (fWidth/2.0f);

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+4]
	movss	xmm1, DWORD PTR _fWidth$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	mov	eax, 8
	imul	ecx, eax, 0
	movss	DWORD PTR _vertexList$2[ebp+ecx+4], xmm0

; 2327 : 
; 2328 :         vertexList[1].x = (float)rc.left;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp]
	mov	eax, 8
	shl	eax, 0
	movss	DWORD PTR _vertexList$2[ebp+eax], xmm0

; 2329 :         vertexList[1].y = (float)rc.bottom + (fWidth/2.0f);

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+12]
	movss	xmm1, DWORD PTR _fWidth$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	mov	eax, 8
	shl	eax, 0
	movss	DWORD PTR _vertexList$2[ebp+eax+4], xmm0

; 2330 : 
; 2331 :         vertexList[2].x = (float)rc.left;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp]
	mov	eax, 8
	shl	eax, 1
	movss	DWORD PTR _vertexList$2[ebp+eax], xmm0

; 2332 :         vertexList[2].y = (float)rc.bottom - 0.5f;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+12]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 8
	shl	eax, 1
	movss	DWORD PTR _vertexList$2[ebp+eax+4], xmm0

; 2333 : 
; 2334 :         vertexList[3].x = (float)rc.right;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+8]
	mov	eax, 8
	imul	ecx, eax, 3
	movss	DWORD PTR _vertexList$2[ebp+ecx], xmm0

; 2335 :         vertexList[3].y = (float)rc.bottom - 0.5f;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+12]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 8
	imul	ecx, eax, 3
	movss	DWORD PTR _vertexList$2[ebp+ecx+4], xmm0

; 2336 : 
; 2337 :         vertexList[4].x = (float)rc.right;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+8]
	mov	eax, 8
	shl	eax, 2
	movss	DWORD PTR _vertexList$2[ebp+eax], xmm0

; 2338 :         vertexList[4].y = (float)rc.bottom + (fWidth/2.0f);

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+12]
	movss	xmm1, DWORD PTR _fWidth$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	mov	eax, 8
	shl	eax, 2
	movss	DWORD PTR _vertexList$2[ebp+eax+4], xmm0

; 2339 : 
; 2340 :         vertexList[5].x = (float)rc.right;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+8]
	mov	eax, 8
	imul	ecx, eax, 5
	movss	DWORD PTR _vertexList$2[ebp+ecx], xmm0

; 2341 :         vertexList[5].y = (float)rc.top - (fWidth/2.0f);

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+4]
	movss	xmm1, DWORD PTR _fWidth$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	mov	eax, 8
	imul	ecx, eax, 5
	movss	DWORD PTR _vertexList$2[ebp+ecx+4], xmm0

; 2342 : 
; 2343 :         vertexList[6].x = (float)rc.right;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+8]
	mov	eax, 8
	imul	ecx, eax, 6
	movss	DWORD PTR _vertexList$2[ebp+ecx], xmm0

; 2344 :         vertexList[6].y = (float)rc.top;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+4]
	mov	eax, 8
	imul	ecx, eax, 6
	movss	DWORD PTR _vertexList$2[ebp+ecx+4], xmm0

; 2345 : 
; 2346 :         vertexList[7].x = (float)rc.left;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp]
	mov	eax, 8
	imul	ecx, eax, 7
	movss	DWORD PTR _vertexList$2[ebp+ecx], xmm0

; 2347 :         vertexList[7].y = (float)rc.top;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+4]
	mov	eax, 8
	imul	ecx, eax, 7
	movss	DWORD PTR _vertexList$2[ebp+ecx+4], xmm0

; 2348 :         
; 2349 :         return AddLine( pnLineID, vertexList, 8, Color, fWidth, fScaleRatio, bAntiAlias );

	movzx	eax, BYTE PTR _bAntiAlias$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _fScaleRatio$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fWidth$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _Color$[ebp]
	push	ecx
	push	8
	lea	edx, DWORD PTR _vertexList$2[ebp]
	push	edx
	mov	eax, DWORD PTR _pnLineID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z ; CDXUTLineManager::AddLine
	jmp	$LN1@AddRect

; 2350 :     }
; 2351 :     else

	jmp	$LN1@AddRect
$LN2@AddRect:

; 2352 :     {
; 2353 :         D3DXVECTOR2 vertexList[5];

	push	OFFSET ??0D3DXVECTOR2@@QAE@XZ		; D3DXVECTOR2::D3DXVECTOR2
	push	5
	push	8
	lea	eax, DWORD PTR _vertexList$1[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 2354 :         vertexList[0].x = (float)rc.left;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp]
	mov	eax, 8
	imul	ecx, eax, 0
	movss	DWORD PTR _vertexList$1[ebp+ecx], xmm0

; 2355 :         vertexList[0].y = (float)rc.top;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+4]
	mov	eax, 8
	imul	ecx, eax, 0
	movss	DWORD PTR _vertexList$1[ebp+ecx+4], xmm0

; 2356 : 
; 2357 :         vertexList[1].x = (float)rc.left;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp]
	mov	eax, 8
	shl	eax, 0
	movss	DWORD PTR _vertexList$1[ebp+eax], xmm0

; 2358 :         vertexList[1].y = (float)rc.bottom;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+12]
	mov	eax, 8
	shl	eax, 0
	movss	DWORD PTR _vertexList$1[ebp+eax+4], xmm0

; 2359 : 
; 2360 :         vertexList[2].x = (float)rc.right;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+8]
	mov	eax, 8
	shl	eax, 1
	movss	DWORD PTR _vertexList$1[ebp+eax], xmm0

; 2361 :         vertexList[2].y = (float)rc.bottom;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+12]
	mov	eax, 8
	shl	eax, 1
	movss	DWORD PTR _vertexList$1[ebp+eax+4], xmm0

; 2362 : 
; 2363 :         vertexList[3].x = (float)rc.right;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+8]
	mov	eax, 8
	imul	ecx, eax, 3
	movss	DWORD PTR _vertexList$1[ebp+ecx], xmm0

; 2364 :         vertexList[3].y = (float)rc.top;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+4]
	mov	eax, 8
	imul	ecx, eax, 3
	movss	DWORD PTR _vertexList$1[ebp+ecx+4], xmm0

; 2365 : 
; 2366 :         vertexList[4].x = (float)rc.left;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp]
	mov	eax, 8
	shl	eax, 2
	movss	DWORD PTR _vertexList$1[ebp+eax], xmm0

; 2367 :         vertexList[4].y = (float)rc.top;

	cvtsi2ss xmm0, DWORD PTR _rc$[ebp+4]
	mov	eax, 8
	shl	eax, 2
	movss	DWORD PTR _vertexList$1[ebp+eax+4], xmm0

; 2368 :         
; 2369 :         return AddLine( pnLineID, vertexList, 5, Color, fWidth, fScaleRatio, bAntiAlias );

	movzx	eax, BYTE PTR _bAntiAlias$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _fScaleRatio$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fWidth$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _Color$[ebp]
	push	ecx
	push	5
	lea	edx, DWORD PTR _vertexList$1[ebp]
	push	edx
	mov	eax, DWORD PTR _pnLineID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z ; CDXUTLineManager::AddLine
$LN1@AddRect:

; 2370 :     }
; 2371 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@AddRect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	1
$LN8@AddRect:
	DD	2
	DD	$LN7@AddRect
$LN7@AddRect:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN5@AddRect
	DD	-132					; ffffff7cH
	DD	40					; 00000028H
	DD	$LN6@AddRect
$LN6@AddRect:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN5@AddRect:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?AddRect@CDXUTLineManager@@QAEJPAHUtagRECT@@KMM_N@Z ENDP ; CDXUTLineManager::AddRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z
_TEXT	SEGMENT
tv129 = -320						; size = 4
$T2 = -312						; size = 4
$T3 = -300						; size = 4
$T4 = -288						; size = 4
$T5 = -276						; size = 4
$T6 = -264						; size = 4
$T7 = -252						; size = 8
_i$8 = -44						; size = 4
_pLineNode$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pnLineID$ = 8						; size = 4
_pVertexList$ = 12					; size = 4
_dwVertexListCount$ = 16				; size = 4
_Color$ = 20						; size = 4
_fWidth$ = 24						; size = 4
_fScaleRatio$ = 28					; size = 4
_bAntiAlias$ = 32					; size = 1
?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z PROC ; CDXUTLineManager::AddLine, COMDAT
; _this$ = ecx

; 2283 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2284 :     if( pVertexList == NULL || dwVertexListCount == 0 )

	cmp	DWORD PTR _pVertexList$[ebp], 0
	je	SHORT $LN7@AddLine
	cmp	DWORD PTR _dwVertexListCount$[ebp], 0
	jne	SHORT $LN8@AddLine
$LN7@AddLine:

; 2285 :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN9@AddLine
$LN8@AddLine:

; 2286 : 
; 2287 :     LINE_NODE* pLineNode = new LINE_NODE;

	push	25					; 00000019H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pLineNode$[ebp], eax

; 2288 :     if( pLineNode == NULL )

	cmp	DWORD PTR _pLineNode$[ebp], 0
	jne	SHORT $LN6@AddLine

; 2289 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN9@AddLine
$LN6@AddLine:

; 2290 :     ZeroMemory( pLineNode, sizeof(LINE_NODE) );

	push	25					; 00000019H
	push	0
	mov	eax, DWORD PTR _pLineNode$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2291 : 
; 2292 :     pLineNode->nLineID = m_LinesList.GetSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QBEHXZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetSize
	mov	ecx, DWORD PTR _pLineNode$[ebp]
	mov	DWORD PTR [ecx], eax

; 2293 :     pLineNode->Color = Color;

	mov	eax, DWORD PTR _pLineNode$[ebp]
	mov	ecx, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 2294 :     pLineNode->fWidth = fWidth;

	mov	eax, DWORD PTR _pLineNode$[ebp]
	movss	xmm0, DWORD PTR _fWidth$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 2295 :     pLineNode->bAntiAlias = bAntiAlias;

	mov	eax, DWORD PTR _pLineNode$[ebp]
	mov	cl, BYTE PTR _bAntiAlias$[ebp]
	mov	BYTE PTR [eax+12], cl

; 2296 :     pLineNode->dwVertexListCount = dwVertexListCount;

	mov	eax, DWORD PTR _pLineNode$[ebp]
	mov	ecx, DWORD PTR _dwVertexListCount$[ebp]
	mov	DWORD PTR [eax+21], ecx

; 2297 : 
; 2298 :     if( pnLineID )

	cmp	DWORD PTR _pnLineID$[ebp], 0
	je	SHORT $LN5@AddLine

; 2299 :         *pnLineID = pLineNode->nLineID;

	mov	eax, DWORD PTR _pnLineID$[ebp]
	mov	ecx, DWORD PTR _pLineNode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@AddLine:

; 2300 : 
; 2301 :     pLineNode->pVertexList = new D3DXVECTOR2[dwVertexListCount];

	mov	eax, DWORD PTR _dwVertexListCount$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN11@AddLine
	push	OFFSET ??0D3DXVECTOR2@@QAE@XZ		; D3DXVECTOR2::D3DXVECTOR2
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN12@AddLine
$LN11@AddLine:
	mov	DWORD PTR tv129[ebp], 0
$LN12@AddLine:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pLineNode$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+17], edx

; 2302 :     if( pLineNode->pVertexList == NULL )

	mov	eax, DWORD PTR _pLineNode$[ebp]
	cmp	DWORD PTR [eax+17], 0
	jne	SHORT $LN4@AddLine

; 2303 :     {
; 2304 :         delete pLineNode;

	mov	eax, DWORD PTR _pLineNode$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2305 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN9@AddLine
$LN4@AddLine:

; 2306 :     }
; 2307 :     for( DWORD i=0; i<dwVertexListCount; i++ )

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN3@AddLine
$LN2@AddLine:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN3@AddLine:
	mov	eax, DWORD PTR _i$8[ebp]
	cmp	eax, DWORD PTR _dwVertexListCount$[ebp]
	jae	SHORT $LN1@AddLine

; 2308 :     {
; 2309 :         pLineNode->pVertexList[i] = pVertexList[i] * fScaleRatio;

	push	ecx
	movss	xmm0, DWORD PTR _fScaleRatio$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _pVertexList$[ebp]
	lea	ecx, DWORD PTR [edx+ecx*8]
	call	??DD3DXVECTOR2@@QBE?AU0@M@Z		; D3DXVECTOR2::operator*
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _pLineNode$[ebp]
	mov	eax, DWORD PTR [eax+17]
	mov	esi, DWORD PTR _i$8[ebp]
	mov	DWORD PTR [eax+esi*8], ecx
	mov	DWORD PTR [eax+esi*8+4], edx

; 2310 :     }

	jmp	SHORT $LN2@AddLine
$LN1@AddLine:

; 2311 : 
; 2312 :     m_LinesList.Add( pLineNode );

	lea	eax, DWORD PTR _pLineNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEJABQAULINE_NODE@CDXUTLineManager@@@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::Add

; 2313 : 
; 2314 :     return S_OK;

	xor	eax, eax
$LN9@AddLine:

; 2315 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@AddLine
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	2
$LN17@AddLine:
	DD	1
	DD	$LN16@AddLine
$LN16@AddLine:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN14@AddLine
$LN14@AddLine:
	DB	112					; 00000070H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddLine@CDXUTLineManager@@QAEJPAHPAUD3DXVECTOR2@@KKMM_N@Z ENDP ; CDXUTLineManager::AddLine
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnDeletedDevice@CDXUTLineManager@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnDeletedDevice@CDXUTLineManager@@QAEJXZ PROC		; CDXUTLineManager::OnDeletedDevice, COMDAT
; _this$ = ecx

; 2273 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2274 :     RemoveAllLines();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAllLines@CDXUTLineManager@@QAEJXZ ; CDXUTLineManager::RemoveAllLines

; 2275 :     SAFE_RELEASE( m_pD3DXLine );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@OnDeletedD
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN1@OnDeletedD:

; 2276 : 
; 2277 :     return S_OK;

	xor	eax, eax

; 2278 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnDeletedDevice@CDXUTLineManager@@QAEJXZ ENDP		; CDXUTLineManager::OnDeletedDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnLostDevice@CDXUTLineManager@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnLostDevice@CDXUTLineManager@@QAEJXZ PROC		; CDXUTLineManager::OnLostDevice, COMDAT
; _this$ = ecx

; 2263 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2264 :     if( m_pD3DXLine )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@OnLostDevi

; 2265 :         m_pD3DXLine->OnLostDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@OnLostDevi:

; 2266 : 
; 2267 :     return S_OK;

	xor	eax, eax

; 2268 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnLostDevice@CDXUTLineManager@@QAEJXZ ENDP		; CDXUTLineManager::OnLostDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnRender@CDXUTLineManager@@QAEJXZ
_TEXT	SEGMENT
_pLineNode$1 = -80					; size = 4
_i$2 = -68						; size = 4
_bLastAntiAlias$ = -53					; size = 1
_fLastWidth$ = -44					; size = 4
_bDrawingHasBegun$ = -29				; size = 1
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?OnRender@CDXUTLineManager@@QAEJXZ PROC			; CDXUTLineManager::OnRender, COMDAT
; _this$ = ecx

; 2207 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2208 :     HRESULT hr;
; 2209 :     if( NULL == m_pD3DXLine )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN13@OnRender

; 2210 :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN14@OnRender
$LN13@OnRender:

; 2211 : 
; 2212 :     bool bDrawingHasBegun = false;

	mov	BYTE PTR _bDrawingHasBegun$[ebp], 0

; 2213 :     float fLastWidth = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fLastWidth$[ebp], xmm0

; 2214 :     bool bLastAntiAlias = false;

	mov	BYTE PTR _bLastAntiAlias$[ebp], 0

; 2215 :     
; 2216 :     for( int i=0; i<m_LinesList.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN12@OnRender
$LN11@OnRender:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN12@OnRender:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QBEHXZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN10@OnRender

; 2217 :     {
; 2218 :         LINE_NODE* pLineNode = m_LinesList.GetAt(i);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAt@?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAEAAPAULINE_NODE@CDXUTLineManager@@H@Z ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pLineNode$1[ebp], ecx

; 2219 :         if( pLineNode )

	cmp	DWORD PTR _pLineNode$1[ebp], 0
	je	$LN3@OnRender

; 2220 :         {
; 2221 :             if( !bDrawingHasBegun || 
; 2222 :                 fLastWidth != pLineNode->fWidth || 
; 2223 :                 bLastAntiAlias != pLineNode->bAntiAlias )

	movzx	eax, BYTE PTR _bDrawingHasBegun$[ebp]
	test	eax, eax
	je	SHORT $LN7@OnRender
	mov	eax, DWORD PTR _pLineNode$1[ebp]
	movss	xmm0, DWORD PTR _fLastWidth$[ebp]
	ucomiss	xmm0, DWORD PTR [eax+8]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@OnRender
	movzx	eax, BYTE PTR _bLastAntiAlias$[ebp]
	mov	ecx, DWORD PTR _pLineNode$1[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	cmp	eax, edx
	je	$LN8@OnRender
$LN7@OnRender:

; 2224 :             {
; 2225 :                 if( bDrawingHasBegun )

	movzx	eax, BYTE PTR _bDrawingHasBegun$[ebp]
	test	eax, eax
	je	SHORT $LN5@OnRender

; 2226 :                 {
; 2227 :                     hr = m_pD3DXLine->End();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 2228 :                     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@OnRender

; 2229 :                         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN14@OnRender
$LN5@OnRender:

; 2230 :                 }
; 2231 : 
; 2232 :                 m_pD3DXLine->SetWidth( pLineNode->fWidth );

	mov	esi, esp
	mov	eax, DWORD PTR _pLineNode$1[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2233 :                 m_pD3DXLine->SetAntialias( pLineNode->bAntiAlias );

	mov	eax, DWORD PTR _pLineNode$1[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2234 : 
; 2235 :                 fLastWidth = pLineNode->fWidth;

	mov	eax, DWORD PTR _pLineNode$1[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _fLastWidth$[ebp], xmm0

; 2236 :                 bLastAntiAlias = pLineNode->bAntiAlias;

	mov	eax, DWORD PTR _pLineNode$1[ebp]
	mov	cl, BYTE PTR [eax+12]
	mov	BYTE PTR _bLastAntiAlias$[ebp], cl

; 2237 : 
; 2238 :                 hr = m_pD3DXLine->Begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 2239 :                 if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@OnRender

; 2240 :                     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN14@OnRender
$LN4@OnRender:

; 2241 :                 bDrawingHasBegun = true;

	mov	BYTE PTR _bDrawingHasBegun$[ebp], 1
$LN8@OnRender:

; 2242 :             }
; 2243 : 
; 2244 :             hr = m_pD3DXLine->Draw( pLineNode->pVertexList, pLineNode->dwVertexListCount, pLineNode->Color );

	mov	esi, esp
	mov	eax, DWORD PTR _pLineNode$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pLineNode$1[ebp]
	mov	eax, DWORD PTR [edx+21]
	push	eax
	mov	ecx, DWORD PTR _pLineNode$1[ebp]
	mov	edx, DWORD PTR [ecx+17]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 2245 :             if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@OnRender

; 2246 :                 return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN14@OnRender
$LN3@OnRender:

; 2247 :         }
; 2248 :     }

	jmp	$LN11@OnRender
$LN10@OnRender:

; 2249 : 
; 2250 :     if( bDrawingHasBegun )

	movzx	eax, BYTE PTR _bDrawingHasBegun$[ebp]
	test	eax, eax
	je	SHORT $LN1@OnRender

; 2251 :     {
; 2252 :         hr = m_pD3DXLine->End();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 2253 :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@OnRender

; 2254 :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN14@OnRender
$LN1@OnRender:

; 2255 :     }
; 2256 : 
; 2257 :     return S_OK;

	xor	eax, eax
$LN14@OnRender:

; 2258 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnRender@CDXUTLineManager@@QAEJXZ ENDP			; CDXUTLineManager::OnRender
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnResetDevice@CDXUTLineManager@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnResetDevice@CDXUTLineManager@@QAEJXZ PROC		; CDXUTLineManager::OnResetDevice, COMDAT
; _this$ = ecx

; 2197 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2198 :     if( m_pD3DXLine )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@OnResetDev

; 2199 :         m_pD3DXLine->OnResetDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+76]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@OnResetDev:

; 2200 : 
; 2201 :     return S_OK;

	xor	eax, eax

; 2202 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnResetDevice@CDXUTLineManager@@QAEJXZ ENDP		; CDXUTLineManager::OnResetDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnCreatedDevice@CDXUTLineManager@@QAEJPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
?OnCreatedDevice@CDXUTLineManager@@QAEJPAUIDirect3DDevice9@@@Z PROC ; CDXUTLineManager::OnCreatedDevice, COMDAT
; _this$ = ecx

; 2183 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2184 :     m_pd3dDevice = pd3dDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2185 : 
; 2186 :     HRESULT hr;
; 2187 :     hr = D3DXCreateLine( m_pd3dDevice, &m_pD3DXLine );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_D3DXCreateLine@8
	mov	DWORD PTR _hr$[ebp], eax

; 2188 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@OnCreatedD

; 2189 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@OnCreatedD
$LN1@OnCreatedD:

; 2190 : 
; 2191 :     return S_OK;

	xor	eax, eax
$LN2@OnCreatedD:

; 2192 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?OnCreatedDevice@CDXUTLineManager@@QAEJPAUIDirect3DDevice9@@@Z ENDP ; CDXUTLineManager::OnCreatedDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??1CDXUTLineManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTLineManager@@QAE@XZ PROC			; CDXUTLineManager::~CDXUTLineManager, COMDAT
; _this$ = ecx

; 2176 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTLineManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2177 :     OnDeletedDevice();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnDeletedDevice@CDXUTLineManager@@QAEJXZ ; CDXUTLineManager::OnDeletedDevice

; 2178 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::~CGrowableArray<CDXUTLineManager::LINE_NODE *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDXUTLineManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::~CGrowableArray<CDXUTLineManager::LINE_NODE *>
__ehhandler$??1CDXUTLineManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTLineManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTLineManager@@QAE@XZ ENDP			; CDXUTLineManager::~CDXUTLineManager
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??0CDXUTLineManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CDXUTLineManager@@QAE@XZ PROC			; CDXUTLineManager::CDXUTLineManager, COMDAT
; _this$ = ecx

; 2168 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CGrowableArray@PAULINE_NODE@CDXUTLineManager@@@@QAE@XZ ; CGrowableArray<CDXUTLineManager::LINE_NODE *>::CGrowableArray<CDXUTLineManager::LINE_NODE *>

; 2169 :     m_pd3dDevice = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 2170 :     m_pD3DXLine = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 2171 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDXUTLineManager@@QAE@XZ ENDP			; CDXUTLineManager::CDXUTLineManager
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?End@CDXUTTextHelper@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?End@CDXUTTextHelper@@QAEXXZ PROC			; CDXUTTextHelper::End, COMDAT
; _this$ = ecx

; 2494 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2495 :     if( m_pSprite )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@End

; 2496 :         m_pSprite->End();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@End:

; 2497 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?End@CDXUTTextHelper@@QAEXXZ ENDP			; CDXUTTextHelper::End
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_rc$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_strMsg$ = 16						; size = 4
?DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z PROC ; CDXUTTextHelper::DrawTextLine, COMDAT
; _this$ = ecx

; 2472 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2473 :     if( NULL == m_pFont ) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@DrawTextLi

; 2474 :         return DXUT_ERR_MSGBOX( "DrawTextLine", E_INVALIDARG );

	push	1
	push	OFFSET ??_C@_0N@LJGOJBAF@DrawTextLine?$AA@
	push	-2147024809				; 80070057H
	mov	eax, DWORD PTR ?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0CP@NFIJGOGO@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXUTTrace@@YGJPBDKJ0_N@Z		; DXUTTrace
	jmp	SHORT $LN3@DrawTextLi
$LN2@DrawTextLi:

; 2475 : 
; 2476 :     HRESULT hr;
; 2477 :     hr = m_pFont->DrawText( m_pSprite, strMsg, -1, &rc, dwFlags, m_clr );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??BD3DXCOLOR@@QBEKXZ			; D3DXCOLOR::operator unsigned long
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _strMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 2478 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@DrawTextLi

; 2479 :         return DXTRACE_ERR_MSGBOX( "DrawText", hr );

	push	1
	push	OFFSET ??_C@_08JPMBLOLP@DrawText?$AA@
	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z@4JA
	add	ecx, 7
	push	ecx
	push	OFFSET ??_C@_0CP@NFIJGOGO@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper
	jmp	SHORT $LN3@DrawTextLi
$LN1@DrawTextLi:

; 2480 : 
; 2481 :     m_pt.y += m_nLineHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 2482 : 
; 2483 :     return S_OK;

	xor	eax, eax
$LN3@DrawTextLi:

; 2484 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z ENDP ; CDXUTTextHelper::DrawTextLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DrawFormattedTextLine@CDXUTTextHelper@@QAAJAAUtagRECT@@KPBDZZ
_TEXT	SEGMENT
$T1 = -736						; size = 4
_args$ = -532						; size = 4
_strBuffer$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_rc$ = 12						; size = 4
_dwFlags$ = 16						; size = 4
_strMsg$ = 20						; size = 4
?DrawFormattedTextLine@CDXUTTextHelper@@QAAJAAUtagRECT@@KPBDZZ PROC ; CDXUTTextHelper::DrawFormattedTextLine, COMDAT

; 2458 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 740				; 000002e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 185				; 000000b9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2459 :     TCHAR strBuffer[512];
; 2460 :     
; 2461 :     va_list args;
; 2462 :     va_start(args, strMsg);

	lea	eax, DWORD PTR _strMsg$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 2463 :     StringCchVPrintf( strBuffer, 512, strMsg, args );

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strMsg$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _strBuffer$[ebp]
	push	edx
	call	?StringCchVPrintfA@@YGJPADIPBD0@Z	; StringCchVPrintfA

; 2464 :     strBuffer[511] = L'\0';

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN3@DrawFormat
	jmp	SHORT $LN4@DrawFormat
$LN3@DrawFormat:
	call	___report_rangecheckfailure
$LN4@DrawFormat:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strBuffer$[ebp+edx], 0

; 2465 :     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 2466 : 
; 2467 :     return DrawTextLine( rc, dwFlags, strBuffer );

	lea	eax, DWORD PTR _strBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTextLine@CDXUTTextHelper@@QAEJAAUtagRECT@@KPBD@Z ; CDXUTTextHelper::DrawTextLine
$LN2@DrawFormat:

; 2468 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DrawFormat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@DrawFormat:
	DD	1
	DD	$LN6@DrawFormat
$LN6@DrawFormat:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN5@DrawFormat
$LN5@DrawFormat:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?DrawFormattedTextLine@CDXUTTextHelper@@QAAJAAUtagRECT@@KPBDZZ ENDP ; CDXUTTextHelper::DrawFormattedTextLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z
_TEXT	SEGMENT
_rc$ = -48						; size = 16
_hr$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_strMsg$ = 8						; size = 4
?DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z PROC		; CDXUTTextHelper::DrawTextLine, COMDAT
; _this$ = ecx

; 2440 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2441 :     if( NULL == m_pFont ) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@DrawTextLi

; 2442 :         return DXUT_ERR_MSGBOX( "DrawTextLine", E_INVALIDARG );

	push	1
	push	OFFSET ??_C@_0N@LJGOJBAF@DrawTextLine?$AA@
	push	-2147024809				; 80070057H
	mov	eax, DWORD PTR ?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0CP@NFIJGOGO@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXUTTrace@@YGJPBDKJ0_N@Z		; DXUTTrace
	jmp	$LN3@DrawTextLi
$LN2@DrawTextLi:

; 2443 : 
; 2444 :     HRESULT hr;
; 2445 :     RECT rc;
; 2446 :     SetRect( &rc, m_pt.x, m_pt.y, 0, 0 ); 

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2447 :     hr = m_pFont->DrawText( m_pSprite, strMsg, -1, &rc, DT_NOCLIP, m_clr );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??BD3DXCOLOR@@QBEKXZ			; D3DXCOLOR::operator unsigned long
	mov	esi, esp
	push	eax
	push	256					; 00000100H
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _strMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 2448 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@DrawTextLi

; 2449 :         return DXTRACE_ERR_MSGBOX( "DrawText", hr );

	push	1
	push	OFFSET ??_C@_08JPMBLOLP@DrawText?$AA@
	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z@4JA
	add	ecx, 9
	push	ecx
	push	OFFSET ??_C@_0CP@NFIJGOGO@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper
	jmp	SHORT $LN3@DrawTextLi
$LN1@DrawTextLi:

; 2450 : 
; 2451 :     m_pt.y += m_nLineHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 2452 : 
; 2453 :     return S_OK;

	xor	eax, eax
$LN3@DrawTextLi:

; 2454 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DrawTextLi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@DrawTextLi:
	DD	1
	DD	$LN6@DrawTextLi
$LN6@DrawTextLi:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN5@DrawTextLi
$LN5@DrawTextLi:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
?DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z ENDP		; CDXUTTextHelper::DrawTextLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DrawFormattedTextLine@CDXUTTextHelper@@QAAJPBDZZ
_TEXT	SEGMENT
$T1 = -736						; size = 4
_args$ = -532						; size = 4
_strBuffer$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_strMsg$ = 12						; size = 4
?DrawFormattedTextLine@CDXUTTextHelper@@QAAJPBDZZ PROC	; CDXUTTextHelper::DrawFormattedTextLine, COMDAT

; 2425 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 740				; 000002e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 185				; 000000b9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2426 :     TCHAR strBuffer[512];
; 2427 :     
; 2428 :     va_list args;
; 2429 :     va_start(args, strMsg);

	lea	eax, DWORD PTR _strMsg$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 2430 :     StringCchVPrintf( strBuffer, 512, strMsg, args );

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strMsg$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _strBuffer$[ebp]
	push	edx
	call	?StringCchVPrintfA@@YGJPADIPBD0@Z	; StringCchVPrintfA

; 2431 :     strBuffer[511] = L'\0';

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN3@DrawFormat
	jmp	SHORT $LN4@DrawFormat
$LN3@DrawFormat:
	call	___report_rangecheckfailure
$LN4@DrawFormat:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strBuffer$[ebp+edx], 0

; 2432 :     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 2433 : 
; 2434 :     return DrawTextLine( strBuffer );

	lea	eax, DWORD PTR _strBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTextLine@CDXUTTextHelper@@QAEJPBD@Z ; CDXUTTextHelper::DrawTextLine
$LN2@DrawFormat:

; 2435 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DrawFormat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@DrawFormat:
	DD	1
	DD	$LN6@DrawFormat
$LN6@DrawFormat:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN5@DrawFormat
$LN5@DrawFormat:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?DrawFormattedTextLine@CDXUTTextHelper@@QAAJPBDZZ ENDP	; CDXUTTextHelper::DrawFormattedTextLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?Begin@CDXUTTextHelper@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Begin@CDXUTTextHelper@@QAEXXZ PROC			; CDXUTTextHelper::Begin, COMDAT
; _this$ = ecx

; 2489 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2490 :     if( m_pSprite )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Begin

; 2491 :         m_pSprite->Begin( D3DXSPRITE_ALPHABLEND | D3DXSPRITE_SORT_TEXTURE );

	mov	esi, esp
	push	48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Begin:

; 2492 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Begin@CDXUTTextHelper@@QAEXXZ ENDP			; CDXUTTextHelper::Begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??0CDXUTTextHelper@@QAE@PAUID3DXFont@@PAUID3DXSprite@@H@Z
_TEXT	SEGMENT
$T1 = -224						; size = 16
_this$ = -8						; size = 4
_pFont$ = 8						; size = 4
_pSprite$ = 12						; size = 4
_nLineHeight$ = 16					; size = 4
??0CDXUTTextHelper@@QAE@PAUID3DXFont@@PAUID3DXSprite@@H@Z PROC ; CDXUTTextHelper::CDXUTTextHelper, COMDAT
; _this$ = ecx

; 2413 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0D3DXCOLOR@@QAE@XZ			; D3DXCOLOR::D3DXCOLOR

; 2414 :     m_pFont = pFont;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	DWORD PTR [eax], ecx

; 2415 :     m_pSprite = pSprite;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSprite$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 2416 :     m_clr = D3DXCOLOR(1,1,1,1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXCOLOR@@QAE@MMMM@Z		; D3DXCOLOR::D3DXCOLOR
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2417 :     m_pt.x = 0; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 2418 :     m_pt.y = 0; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2419 :     m_nLineHeight = nLineHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nLineHeight$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 2420 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CDXUTTextHelper@@QAE@PAUID3DXFont@@PAUID3DXSprite@@H@Z ENDP ; CDXUTTextHelper::CDXUTTextHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetRadius@CModelViewerCamera@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fDefaultRadius$ = 8					; size = 4
_fMinRadius$ = 12					; size = 4
_fMaxRadius$ = 16					; size = 4
?SetRadius@CModelViewerCamera@@QAEXMMM@Z PROC		; CModelViewerCamera::SetRadius, COMDAT
; _this$ = ecx

; 403  :     void SetRadius( float fDefaultRadius=5.0f, float fMinRadius=1.0f, float fMaxRadius=FLT_MAX  ) { m_fDefaultRadius = m_fRadius = fDefaultRadius; m_fMinRadius = fMinRadius; m_fMaxRadius = fMaxRadius; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fDefaultRadius$[ebp]
	movss	DWORD PTR [eax+1178], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fDefaultRadius$[ebp]
	movss	DWORD PTR [ecx+1182], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fMinRadius$[ebp]
	movss	DWORD PTR [eax+1186], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fMaxRadius$[ebp]
	movss	DWORD PTR [eax+1190], xmm0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetRadius@CModelViewerCamera@@QAEXMMM@Z ENDP		; CModelViewerCamera::SetRadius
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetWindow@CModelViewerCamera@@QAEXHHM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nWidth$ = 8						; size = 4
_nHeight$ = 12						; size = 4
_fArcballRadius$ = 16					; size = 4
?SetWindow@CModelViewerCamera@@QAEXHHM@Z PROC		; CModelViewerCamera::SetWindow, COMDAT
; _this$ = ecx

; 402  :     void SetWindow( int nWidth, int nHeight, float fArcballRadius=0.9f ) { m_WorldArcBall.SetWindow( nWidth, nHeight, fArcballRadius ); m_ViewArcBall.SetWindow( nWidth, nHeight, fArcballRadius ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR _fArcballRadius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nWidth$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	?SetWindow@CD3DArcBall@@QAEXHHM@Z	; CD3DArcBall::SetWindow
	push	ecx
	movss	xmm0, DWORD PTR _fArcballRadius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nWidth$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?SetWindow@CD3DArcBall@@QAEXHHM@Z	; CD3DArcBall::SetWindow
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetWindow@CModelViewerCamera@@QAEXHHM@Z ENDP		; CModelViewerCamera::SetWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?SetViewParams@CModelViewerCamera@@UAEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_vEyeToPoint$ = -152					; size = 12
_vUp$ = -132						; size = 12
_mRotation$ = -112					; size = 64
_quat$ = -36						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pvEyePt$ = 8						; size = 4
_pvLookatPt$ = 12					; size = 4
?SetViewParams@CModelViewerCamera@@UAEXPAUD3DXVECTOR3@@0@Z PROC ; CModelViewerCamera::SetViewParams, COMDAT
; _this$ = ecx

; 1916 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1917 :     CBaseCamera::SetViewParams( pvEyePt, pvLookatPt );

	mov	eax, DWORD PTR _pvLookatPt$[ebx]
	push	eax
	mov	ecx, DWORD PTR _pvEyePt$[ebx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetViewParams@CBaseCamera@@UAEXPAUD3DXVECTOR3@@0@Z ; CBaseCamera::SetViewParams

; 1918 : 
; 1919 :     // Propogate changes to the member arcball
; 1920 :     D3DXQUATERNION quat;

	lea	ecx, DWORD PTR _quat$[ebp]
	call	??0D3DXQUATERNION@@QAE@XZ		; D3DXQUATERNION::D3DXQUATERNION

; 1921 :     D3DXMATRIXA16 mRotation;

	lea	ecx, DWORD PTR _mRotation$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16

; 1922 :     D3DXVECTOR3 vUp(0,1,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vUp$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1923 :     D3DXMatrixLookAtLH( &mRotation, pvEyePt, pvLookatPt, &vUp );

	lea	eax, DWORD PTR _vUp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pvLookatPt$[ebx]
	push	ecx
	mov	edx, DWORD PTR _pvEyePt$[ebx]
	push	edx
	lea	eax, DWORD PTR _mRotation$[ebp]
	push	eax
	call	_D3DXMatrixLookAtLH@16

; 1924 :     D3DXQuaternionRotationMatrix( &quat, &mRotation );

	lea	eax, DWORD PTR _mRotation$[ebp]
	push	eax
	lea	ecx, DWORD PTR _quat$[ebp]
	push	ecx
	call	_D3DXQuaternionRotationMatrix@8

; 1925 :     m_ViewArcBall.SetQuatNow( quat );

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _quat$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _quat$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _quat$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _quat$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?SetQuatNow@CD3DArcBall@@QAEXUD3DXQUATERNION@@@Z ; CD3DArcBall::SetQuatNow

; 1926 : 
; 1927 :     // Set the radius according to the distance
; 1928 :     D3DXVECTOR3 vEyeToPoint;

	lea	ecx, DWORD PTR _vEyeToPoint$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1929 :     D3DXVec3Subtract( &vEyeToPoint, pvLookatPt, pvEyePt );

	mov	eax, DWORD PTR _pvEyePt$[ebx]
	push	eax
	mov	ecx, DWORD PTR _pvLookatPt$[ebx]
	push	ecx
	lea	edx, DWORD PTR _vEyeToPoint$[ebp]
	push	edx
	call	?D3DXVec3Subtract@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Subtract
	add	esp, 12					; 0000000cH

; 1930 :     SetRadius( D3DXVec3Length( &vEyeToPoint ) );

	push	ecx
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _vEyeToPoint$[ebp]
	push	eax
	call	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3Length
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRadius@CModelViewerCamera@@QAEXMMM@Z ; CModelViewerCamera::SetRadius

; 1931 : 
; 1932 :     // View information changed. FrameMove should be called.
; 1933 :     m_bDragSinceLastUpdate = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1194], 1

; 1934 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SetViewPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN8@SetViewPar:
	DD	4
	DD	$LN7@SetViewPar
$LN7@SetViewPar:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN3@SetViewPar
	DD	-112					; ffffff90H
	DD	64					; 00000040H
	DD	$LN4@SetViewPar
	DD	-132					; ffffff7cH
	DD	12					; 0000000cH
	DD	$LN5@SetViewPar
	DD	-152					; ffffff68H
	DD	12					; 0000000cH
	DD	$LN6@SetViewPar
$LN6@SetViewPar:
	DB	118					; 00000076H
	DB	69					; 00000045H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN5@SetViewPar:
	DB	118					; 00000076H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	0
$LN4@SetViewPar:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN3@SetViewPar:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?SetViewParams@CModelViewerCamera@@UAEXPAUD3DXVECTOR3@@0@Z ENDP ; CModelViewerCamera::SetViewParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?Reset@CModelViewerCamera@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Reset@CModelViewerCamera@@UAEXXZ PROC			; CModelViewerCamera::Reset, COMDAT
; _this$ = ecx

; 1898 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1899 :     CBaseCamera::Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CBaseCamera@@UAEXXZ		; CBaseCamera::Reset

; 1900 : 
; 1901 :     D3DXMatrixIdentity( &m_mWorld );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1100				; 0000044cH
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1902 :     D3DXMatrixIdentity( &m_mModelRot );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1036				; 0000040cH
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1903 :     D3DXMatrixIdentity( &m_mModelLastRot );    

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 972				; 000003ccH
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1904 :     D3DXMatrixIdentity( &m_mCameraRotLast );    

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1195				; 000004abH
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1905 : 
; 1906 :     m_fRadius = m_fDefaultRadius;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1182]
	mov	DWORD PTR [eax+1178], edx

; 1907 :     m_WorldArcBall.Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	?Reset@CD3DArcBall@@QAEXXZ		; CD3DArcBall::Reset

; 1908 :     m_ViewArcBall.Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?Reset@CD3DArcBall@@QAEXXZ		; CD3DArcBall::Reset

; 1909 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CModelViewerCamera@@UAEXXZ ENDP			; CModelViewerCamera::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?SetDragRect@CModelViewerCamera@@UAEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rc$ = 8						; size = 4
?SetDragRect@CModelViewerCamera@@UAEXAAUtagRECT@@@Z PROC ; CModelViewerCamera::SetDragRect, COMDAT
; _this$ = ecx

; 1885 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1886 :     CBaseCamera::SetDragRect( rc );

	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDragRect@CBaseCamera@@UAEXAAUtagRECT@@@Z ; CBaseCamera::SetDragRect

; 1887 : 
; 1888 :     m_WorldArcBall.SetOffset( rc.left, rc.top );

	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	?SetOffset@CD3DArcBall@@QAEXHH@Z	; CD3DArcBall::SetOffset

; 1889 :     m_ViewArcBall.SetOffset( rc.left, rc.top );

	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?SetOffset@CD3DArcBall@@QAEXHH@Z	; CD3DArcBall::SetOffset

; 1890 :     SetWindow( rc.right - rc.left, rc.bottom - rc.top );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindow@CModelViewerCamera@@QAEXHHM@Z ; CModelViewerCamera::SetWindow

; 1891 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragRect@CModelViewerCamera@@UAEXAAUtagRECT@@@Z ENDP ; CModelViewerCamera::SetDragRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?FrameMove@CModelViewerCamera@@UAEXM@Z
_TEXT	SEGMENT
tv190 = -1200						; size = 4
tv179 = -1200						; size = 4
$T1 = -1192						; size = 12
$T2 = -1172						; size = 12
$T3 = -1152						; size = 64
$T4 = -1080						; size = 64
$T5 = -1008						; size = 64
$T6 = -936						; size = 64
_mTrans$ = -672						; size = 64
_pZBasis$ = -600					; size = 4
_pYBasis$ = -588					; size = 4
_pXBasis$ = -576					; size = 4
_mCameraRotDelta$7 = -564				; size = 64
_mCameraLastRotInv$8 = -492				; size = 64
_mModelRot$ = -420					; size = 64
_mModelLastRotInv$ = -348				; size = 64
_mInvView$ = -276					; size = 64
_vPosDeltaWorld$ = -204					; size = 12
_vLocalAhead$ = -184					; size = 12
_vLocalUp$ = -164					; size = 12
_vWorldAhead$ = -144					; size = 12
_vWorldUp$ = -124					; size = 12
_mCameraRot$ = -104					; size = 64
_vPosDelta$ = -32					; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?FrameMove@CModelViewerCamera@@UAEXM@Z PROC		; CModelViewerCamera::FrameMove, COMDAT
; _this$ = ecx

; 1783 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1200				; 000004b0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1200]
	mov	ecx, 300				; 0000012cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1784 :     if( IsKeyDown(m_aKeys[CAM_RESET]) )

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+132]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@FrameMove

; 1785 :         Reset();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@FrameMove:

; 1786 : 
; 1787 :     // If no dragged has happend since last time FrameMove is called,
; 1788 :     // no need to handle again.
; 1789 :     if( !m_bDragSinceLastUpdate )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1194]
	test	ecx, ecx
	jne	SHORT $LN5@FrameMove

; 1790 :         return;

	jmp	$LN7@FrameMove
$LN5@FrameMove:

; 1791 :     m_bDragSinceLastUpdate = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1194], 0

; 1792 : 
; 1793 :     // If no mouse button is held down, 
; 1794 :     // Get the mouse movement (if any) if the mouse button are down
; 1795 :     if( m_nCurrentButtonMask != 0 ) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+151], 0
	je	SHORT $LN4@FrameMove

; 1796 :         UpdateMouseDelta( fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateMouseDelta@CBaseCamera@@IAEXM@Z	; CBaseCamera::UpdateMouseDelta
$LN4@FrameMove:

; 1797 : 
; 1798 :     // Get amount of velocity based on the keyboard input and drag (if any)
; 1799 :     UpdateVelocity( fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateVelocity@CBaseCamera@@IAEXM@Z	; CBaseCamera::UpdateVelocity

; 1800 : 
; 1801 :     // Simple euler method to calculate position delta
; 1802 :     D3DXVECTOR3 vPosDelta = m_vVelocity * fElapsedTime;

	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _vPosDelta$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 243				; 000000f3H
	call	??DD3DXVECTOR3@@QBE?AU0@M@Z		; D3DXVECTOR3::operator*

; 1803 : 
; 1804 :     // Change the radius from the camera to the model based on wheel scrolling
; 1805 :     if( m_nMouseWheelDelta && m_nZoomButtonMask == MOUSE_WHEEL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+155], 0
	je	SHORT $LN3@FrameMove
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1168], 8
	jne	SHORT $LN3@FrameMove

; 1806 :         m_fRadius -= m_nMouseWheelDelta * m_fRadius * 0.1f;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+155]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+1178]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1178]
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+1178], xmm1
$LN3@FrameMove:

; 1807 :     m_fRadius = __min( m_fMaxRadius, m_fRadius );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+1178]
	comiss	xmm0, DWORD PTR [eax+1190]
	jbe	SHORT $LN9@FrameMove
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1190]
	movss	DWORD PTR tv179[ebp], xmm0
	jmp	SHORT $LN10@FrameMove
$LN9@FrameMove:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1178]
	movss	DWORD PTR tv179[ebp], xmm0
$LN10@FrameMove:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv179[ebp]
	movss	DWORD PTR [ecx+1178], xmm0

; 1808 :     m_fRadius = __max( m_fMinRadius, m_fRadius );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1186]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+1178]
	jbe	SHORT $LN11@FrameMove
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+1186]
	movss	DWORD PTR tv190[ebp], xmm0
	jmp	SHORT $LN12@FrameMove
$LN11@FrameMove:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1178]
	movss	DWORD PTR tv190[ebp], xmm0
$LN12@FrameMove:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR [ecx+1178], xmm0

; 1809 :     m_nMouseWheelDelta = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+155], 0

; 1810 : 
; 1811 :     // Get the inverse of the arcball's rotation matrix
; 1812 :     D3DXMATRIX mCameraRot;

	lea	ecx, DWORD PTR _mCameraRot$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1813 :     D3DXMatrixInverse( &mCameraRot, NULL, m_ViewArcBall.GetRotationMatrix() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?GetRotationMatrix@CD3DArcBall@@QAEPBUD3DXMATRIX@@XZ ; CD3DArcBall::GetRotationMatrix
	push	eax
	push	0
	lea	eax, DWORD PTR _mCameraRot$[ebp]
	push	eax
	call	_D3DXMatrixInverse@12

; 1814 : 
; 1815 :     // Transform vectors based on camera's rotation matrix
; 1816 :     D3DXVECTOR3 vWorldUp, vWorldAhead;

	lea	ecx, DWORD PTR _vWorldUp$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	lea	ecx, DWORD PTR _vWorldAhead$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1817 :     D3DXVECTOR3 vLocalUp    = D3DXVECTOR3(0,1,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vLocalUp$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1818 :     D3DXVECTOR3 vLocalAhead = D3DXVECTOR3(0,0,1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vLocalAhead$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1819 :     D3DXVec3TransformCoord( &vWorldUp, &vLocalUp, &mCameraRot );

	lea	eax, DWORD PTR _mCameraRot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vLocalUp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vWorldUp$[ebp]
	push	edx
	call	_D3DXVec3TransformCoord@12

; 1820 :     D3DXVec3TransformCoord( &vWorldAhead, &vLocalAhead, &mCameraRot );

	lea	eax, DWORD PTR _mCameraRot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vLocalAhead$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vWorldAhead$[ebp]
	push	edx
	call	_D3DXVec3TransformCoord@12

; 1821 : 
; 1822 :     // Transform the position delta by the camera's rotation 
; 1823 :     D3DXVECTOR3 vPosDeltaWorld;

	lea	ecx, DWORD PTR _vPosDeltaWorld$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1824 :     D3DXVec3TransformCoord( &vPosDeltaWorld, &vPosDelta, &mCameraRot );

	lea	eax, DWORD PTR _mCameraRot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vPosDelta$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vPosDeltaWorld$[ebp]
	push	edx
	call	_D3DXVec3TransformCoord@12

; 1825 : 
; 1826 :     // Move the lookAt position 
; 1827 :     m_vLookAt += vPosDeltaWorld;

	lea	eax, DWORD PTR _vPosDeltaWorld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 207				; 000000cfH
	call	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z		; D3DXVECTOR3::operator+=

; 1828 :     if( m_bClipToBoundary )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+311]
	test	ecx, ecx
	je	SHORT $LN2@FrameMove

; 1829 :         ConstrainToBoundary( &m_vLookAt );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 207				; 000000cfH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstrainToBoundary@CBaseCamera@@IAEXPAUD3DXVECTOR3@@@Z ; CBaseCamera::ConstrainToBoundary
$LN2@FrameMove:

; 1830 : 
; 1831 :     // Update the eye point based on a radius away from the lookAt position
; 1832 :     m_vEye = m_vLookAt - vWorldAhead * m_fRadius;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+1178]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vWorldAhead$[ebp]
	call	??DD3DXVECTOR3@@QBE?AU0@M@Z		; D3DXVECTOR3::operator*
	push	eax
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 207				; 000000cfH
	call	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z		; D3DXVECTOR3::operator-
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 195				; 000000c3H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1833 : 
; 1834 :     // Update the view matrix
; 1835 :     D3DXMatrixLookAtLH( &m_mView, &m_vEye, &m_vLookAt, &vWorldUp );

	lea	eax, DWORD PTR _vWorldUp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 207				; 000000cfH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 195				; 000000c3H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_D3DXMatrixLookAtLH@16

; 1836 : 
; 1837 :     D3DXMATRIX mInvView;

	lea	ecx, DWORD PTR _mInvView$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1838 :     D3DXMatrixInverse( &mInvView, NULL, &m_mView );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	push	0
	lea	ecx, DWORD PTR _mInvView$[ebp]
	push	ecx
	call	_D3DXMatrixInverse@12

; 1839 :     mInvView._41 = mInvView._42 = mInvView._43 = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mInvView$[ebp+56], xmm0
	movss	xmm0, DWORD PTR _mInvView$[ebp+56]
	movss	DWORD PTR _mInvView$[ebp+52], xmm0
	movss	xmm0, DWORD PTR _mInvView$[ebp+52]
	movss	DWORD PTR _mInvView$[ebp+48], xmm0

; 1840 : 
; 1841 :     D3DXMATRIX mModelLastRotInv;

	lea	ecx, DWORD PTR _mModelLastRotInv$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1842 :     D3DXMatrixInverse(&mModelLastRotInv, NULL, &m_mModelLastRot);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 972				; 000003ccH
	push	eax
	push	0
	lea	ecx, DWORD PTR _mModelLastRotInv$[ebp]
	push	ecx
	call	_D3DXMatrixInverse@12

; 1843 : 
; 1844 :     // Accumulate the delta of the arcball's rotation in view space.
; 1845 :     // Note that per-frame delta rotations could be problematic over long periods of time.
; 1846 :     D3DXMATRIX mModelRot;

	lea	ecx, DWORD PTR _mModelRot$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1847 :     mModelRot = *m_WorldArcBall.GetRotationMatrix();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	?GetRotationMatrix@CD3DArcBall@@QAEPBUD3DXMATRIX@@XZ ; CD3DArcBall::GetRotationMatrix
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _mModelRot$[ebp]
	rep movsd

; 1848 :     m_mModelRot *= m_mView * mModelLastRotInv * mModelRot * mInvView;

	lea	eax, DWORD PTR _mInvView$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	lea	edx, DWORD PTR _mModelRot$[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR _mModelLastRotInv$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, eax
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, eax
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1036				; 0000040cH
	call	??XD3DXMATRIX@@QAEAAU0@ABU0@@Z		; D3DXMATRIX::operator*=

; 1849 : 
; 1850 :     if( m_ViewArcBall.IsBeingDragged() && m_bAttachCameraToModel && !IsKeyDown(m_aKeys[CAM_CONTROLDOWN]) )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?IsBeingDragged@CD3DArcBall@@QBE_NXZ	; CD3DArcBall::IsBeingDragged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@FrameMove
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1176]
	test	ecx, ecx
	je	SHORT $LN1@FrameMove
	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+132]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@FrameMove

; 1851 :     {
; 1852 :         // Attach camera to model by inverse of the model rotation
; 1853 :         D3DXMATRIX mCameraLastRotInv;

	lea	ecx, DWORD PTR _mCameraLastRotInv$8[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1854 :         D3DXMatrixInverse(&mCameraLastRotInv, NULL, &m_mCameraRotLast);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1195				; 000004abH
	push	eax
	push	0
	lea	ecx, DWORD PTR _mCameraLastRotInv$8[ebp]
	push	ecx
	call	_D3DXMatrixInverse@12

; 1855 :         D3DXMATRIX mCameraRotDelta = mCameraLastRotInv * mCameraRot; // local to world matrix

	lea	eax, DWORD PTR _mCameraRot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mCameraRotDelta$7[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mCameraLastRotInv$8[ebp]
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*

; 1856 :         m_mModelRot *= mCameraRotDelta;

	lea	eax, DWORD PTR _mCameraRotDelta$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1036				; 0000040cH
	call	??XD3DXMATRIX@@QAEAAU0@ABU0@@Z		; D3DXMATRIX::operator*=
$LN1@FrameMove:

; 1857 :     }
; 1858 :     m_mCameraRotLast = mCameraRot; 

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 1195				; 000004abH
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _mCameraRot$[ebp]
	rep movsd

; 1859 : 
; 1860 :     m_mModelLastRot = mModelRot;

	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 972				; 000003ccH
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _mModelRot$[ebp]
	rep movsd

; 1861 : 
; 1862 :     // Since we're accumulating delta rotations, we need to orthonormalize 
; 1863 :     // the matrix to prevent eventual matrix skew
; 1864 :     D3DXVECTOR3* pXBasis = (D3DXVECTOR3*) &m_mModelRot._11;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1036				; 0000040cH
	mov	DWORD PTR _pXBasis$[ebp], eax

; 1865 :     D3DXVECTOR3* pYBasis = (D3DXVECTOR3*) &m_mModelRot._21;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1052				; 0000041cH
	mov	DWORD PTR _pYBasis$[ebp], eax

; 1866 :     D3DXVECTOR3* pZBasis = (D3DXVECTOR3*) &m_mModelRot._31;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1068				; 0000042cH
	mov	DWORD PTR _pZBasis$[ebp], eax

; 1867 :     D3DXVec3Normalize( pXBasis, pXBasis );

	mov	eax, DWORD PTR _pXBasis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBasis$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 1868 :     D3DXVec3Cross( pYBasis, pZBasis, pXBasis );

	mov	eax, DWORD PTR _pXBasis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pZBasis$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pYBasis$[ebp]
	push	edx
	call	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Cross
	add	esp, 12					; 0000000cH

; 1869 :     D3DXVec3Normalize( pYBasis, pYBasis );

	mov	eax, DWORD PTR _pYBasis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pYBasis$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 1870 :     D3DXVec3Cross( pZBasis, pXBasis, pYBasis );

	mov	eax, DWORD PTR _pYBasis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pXBasis$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pZBasis$[ebp]
	push	edx
	call	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Cross
	add	esp, 12					; 0000000cH

; 1871 : 
; 1872 :     // Translate the rotation matrix to the same position as the lookAt position
; 1873 :     m_mModelRot._41 = m_vLookAt.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+207]
	mov	DWORD PTR [eax+1084], edx

; 1874 :     m_mModelRot._42 = m_vLookAt.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+211]
	mov	DWORD PTR [eax+1088], edx

; 1875 :     m_mModelRot._43 = m_vLookAt.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+215]
	mov	DWORD PTR [eax+1092], edx

; 1876 : 
; 1877 :     // Translate world matrix so its at the center of the model
; 1878 :     D3DXMATRIX mTrans;

	lea	ecx, DWORD PTR _mTrans$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1879 :     D3DXMatrixTranslation( &mTrans, -m_vModelCenter.x, -m_vModelCenter.y, -m_vModelCenter.z );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+968]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+964]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+960]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _mTrans$[ebp]
	push	eax
	call	_D3DXMatrixTranslation@16

; 1880 :     m_mWorld = mTrans * m_mModelRot;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1036				; 0000040cH
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mTrans$[ebp]
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 1100				; 0000044cH
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	rep movsd
$LN7@FrameMove:

; 1881 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@FrameMove
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1200				; 000004b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN27@FrameMove:
	DD	13					; 0000000dH
	DD	$LN26@FrameMove
$LN26@FrameMove:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN13@FrameMove
	DD	-104					; ffffff98H
	DD	64					; 00000040H
	DD	$LN14@FrameMove
	DD	-124					; ffffff84H
	DD	12					; 0000000cH
	DD	$LN15@FrameMove
	DD	-144					; ffffff70H
	DD	12					; 0000000cH
	DD	$LN16@FrameMove
	DD	-164					; ffffff5cH
	DD	12					; 0000000cH
	DD	$LN17@FrameMove
	DD	-184					; ffffff48H
	DD	12					; 0000000cH
	DD	$LN18@FrameMove
	DD	-204					; ffffff34H
	DD	12					; 0000000cH
	DD	$LN19@FrameMove
	DD	-276					; fffffeecH
	DD	64					; 00000040H
	DD	$LN20@FrameMove
	DD	-348					; fffffea4H
	DD	64					; 00000040H
	DD	$LN21@FrameMove
	DD	-420					; fffffe5cH
	DD	64					; 00000040H
	DD	$LN22@FrameMove
	DD	-492					; fffffe14H
	DD	64					; 00000040H
	DD	$LN23@FrameMove
	DD	-564					; fffffdccH
	DD	64					; 00000040H
	DD	$LN24@FrameMove
	DD	-672					; fffffd60H
	DD	64					; 00000040H
	DD	$LN25@FrameMove
$LN25@FrameMove:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN24@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN23@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
$LN22@FrameMove:
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN21@FrameMove:
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
$LN20@FrameMove:
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN19@FrameMove:
	DB	118					; 00000076H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN18@FrameMove:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	65					; 00000041H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN17@FrameMove:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	0
$LN16@FrameMove:
	DB	118					; 00000076H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN15@FrameMove:
	DB	118					; 00000076H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	0
$LN14@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN13@FrameMove:
	DB	118					; 00000076H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?FrameMove@CModelViewerCamera@@UAEXM@Z ENDP		; CModelViewerCamera::FrameMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_iMouseY$1 = -80					; size = 4
_iMouseX$2 = -68					; size = 4
_iMouseY$3 = -56					; size = 4
_iMouseX$4 = -44					; size = 4
_iMouseY$5 = -32					; size = 4
_iMouseX$6 = -20					; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z PROC ; CModelViewerCamera::HandleMessages, COMDAT
; _this$ = ecx

; 1942 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1943 :     CBaseCamera::HandleMessages( hWnd, uMsg, wParam, lParam );

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ; CBaseCamera::HandleMessages

; 1944 : 
; 1945 :     if( ( (uMsg == WM_LBUTTONDOWN || uMsg == WM_LBUTTONDBLCLK ) && m_nRotateModelButtonMask & MOUSE_LEFT_BUTTON) ||
; 1946 :         ( (uMsg == WM_MBUTTONDOWN || uMsg == WM_MBUTTONDBLCLK ) && m_nRotateModelButtonMask & MOUSE_MIDDLE_BUTTON) ||
; 1947 :         ( (uMsg == WM_RBUTTONDOWN || uMsg == WM_RBUTTONDBLCLK ) && m_nRotateModelButtonMask & MOUSE_RIGHT_BUTTON) )

	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN22@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	jne	SHORT $LN23@HandleMess
$LN22@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1164]
	and	ecx, 1
	jne	SHORT $LN24@HandleMess
$LN23@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN20@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 521		; 00000209H
	jne	SHORT $LN21@HandleMess
$LN20@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1164]
	and	ecx, 2
	jne	SHORT $LN24@HandleMess
$LN21@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	je	SHORT $LN19@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 518		; 00000206H
	jne	SHORT $LN25@HandleMess
$LN19@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1164]
	and	ecx, 4
	je	SHORT $LN25@HandleMess
$LN24@HandleMess:

; 1948 :     {
; 1949 :         int iMouseX = (short)LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseX$6[ebp], ecx

; 1950 :         int iMouseY = (short)HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$5[ebp], ecx

; 1951 :         m_WorldArcBall.OnBegin( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	?OnBegin@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnBegin
$LN25@HandleMess:

; 1952 :     }
; 1953 : 
; 1954 :     if( ( (uMsg == WM_LBUTTONDOWN || uMsg == WM_LBUTTONDBLCLK ) && m_nRotateCameraButtonMask & MOUSE_LEFT_BUTTON) ||
; 1955 :         ( (uMsg == WM_MBUTTONDOWN || uMsg == WM_MBUTTONDBLCLK ) && m_nRotateCameraButtonMask & MOUSE_MIDDLE_BUTTON) ||
; 1956 :         ( (uMsg == WM_RBUTTONDOWN || uMsg == WM_RBUTTONDBLCLK ) && m_nRotateCameraButtonMask & MOUSE_RIGHT_BUTTON) )

	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN15@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	jne	SHORT $LN16@HandleMess
$LN15@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1172]
	and	ecx, 1
	jne	SHORT $LN17@HandleMess
$LN16@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN13@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 521		; 00000209H
	jne	SHORT $LN14@HandleMess
$LN13@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1172]
	and	ecx, 2
	jne	SHORT $LN17@HandleMess
$LN14@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	je	SHORT $LN12@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 518		; 00000206H
	jne	SHORT $LN18@HandleMess
$LN12@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1172]
	and	ecx, 4
	je	SHORT $LN18@HandleMess
$LN17@HandleMess:

; 1957 :     {
; 1958 :         int iMouseX = (short)LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseX$4[ebp], ecx

; 1959 :         int iMouseY = (short)HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$3[ebp], ecx

; 1960 :         m_ViewArcBall.OnBegin( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?OnBegin@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnBegin
$LN18@HandleMess:

; 1961 :     }
; 1962 : 
; 1963 :     if( uMsg == WM_MOUSEMOVE )

	cmp	DWORD PTR _uMsg$[ebp], 512		; 00000200H
	jne	SHORT $LN11@HandleMess

; 1964 :     {
; 1965 :         int iMouseX = (short)LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseX$2[ebp], ecx

; 1966 :         int iMouseY = (short)HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$1[ebp], ecx

; 1967 :         m_WorldArcBall.OnMove( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	?OnMove@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnMove

; 1968 :         m_ViewArcBall.OnMove( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?OnMove@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnMove
$LN11@HandleMess:

; 1969 :     }
; 1970 : 
; 1971 :     if( (uMsg == WM_LBUTTONUP && m_nRotateModelButtonMask & MOUSE_LEFT_BUTTON) ||
; 1972 :         (uMsg == WM_MBUTTONUP && m_nRotateModelButtonMask & MOUSE_MIDDLE_BUTTON) ||
; 1973 :         (uMsg == WM_RBUTTONUP && m_nRotateModelButtonMask & MOUSE_RIGHT_BUTTON) )

	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	jne	SHORT $LN8@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1164]
	and	ecx, 1
	jne	SHORT $LN9@HandleMess
$LN8@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	jne	SHORT $LN7@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1164]
	and	ecx, 2
	jne	SHORT $LN9@HandleMess
$LN7@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	jne	SHORT $LN10@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1164]
	and	ecx, 4
	je	SHORT $LN10@HandleMess
$LN9@HandleMess:

; 1974 :     {
; 1975 :         m_WorldArcBall.OnEnd();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
$LN10@HandleMess:

; 1976 :     }
; 1977 : 
; 1978 :     if( (uMsg == WM_LBUTTONUP && m_nRotateCameraButtonMask & MOUSE_LEFT_BUTTON) ||
; 1979 :         (uMsg == WM_MBUTTONUP && m_nRotateCameraButtonMask & MOUSE_MIDDLE_BUTTON) ||
; 1980 :         (uMsg == WM_RBUTTONUP && m_nRotateCameraButtonMask & MOUSE_RIGHT_BUTTON) )

	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	jne	SHORT $LN4@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1172]
	and	ecx, 1
	jne	SHORT $LN5@HandleMess
$LN4@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	jne	SHORT $LN3@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1172]
	and	ecx, 2
	jne	SHORT $LN5@HandleMess
$LN3@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	jne	SHORT $LN6@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1172]
	and	ecx, 4
	je	SHORT $LN6@HandleMess
$LN5@HandleMess:

; 1981 :     {
; 1982 :         m_ViewArcBall.OnEnd();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
$LN6@HandleMess:

; 1983 :     }
; 1984 : 
; 1985 :     if( uMsg == WM_LBUTTONDOWN ||
; 1986 :         uMsg == WM_LBUTTONDBLCLK ||
; 1987 :         uMsg == WM_MBUTTONDOWN ||
; 1988 :         uMsg == WM_MBUTTONDBLCLK ||
; 1989 :         uMsg == WM_RBUTTONDOWN ||
; 1990 :         uMsg == WM_RBUTTONDBLCLK ||
; 1991 :         uMsg == WM_LBUTTONUP ||
; 1992 :         uMsg == WM_MBUTTONUP ||
; 1993 :         uMsg == WM_RBUTTONUP ||
; 1994 :         uMsg == WM_MOUSEWHEEL ||
; 1995 :         uMsg == WM_MOUSEMOVE )

	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 521		; 00000209H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 518		; 00000206H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 522		; 0000020aH
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 512		; 00000200H
	jne	SHORT $LN2@HandleMess
$LN1@HandleMess:

; 1996 :     {
; 1997 :         m_bDragSinceLastUpdate = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1194], 1
$LN2@HandleMess:

; 1998 :     }
; 1999 : 
; 2000 :     return FALSE;

	xor	eax, eax

; 2001 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z ENDP ; CModelViewerCamera::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??0CModelViewerCamera@@QAE@XZ
_TEXT	SEGMENT
$T1 = -224						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CModelViewerCamera@@QAE@XZ PROC			; CModelViewerCamera::CModelViewerCamera, COMDAT
; _this$ = ecx

; 1755 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseCamera@@QAE@XZ			; CBaseCamera::CBaseCamera
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CModelViewerCamera@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	??0CD3DArcBall@@QAE@XZ			; CD3DArcBall::CD3DArcBall
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??0CD3DArcBall@@QAE@XZ			; CD3DArcBall::CD3DArcBall
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 960				; 000003c0H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 972				; 000003ccH
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1036				; 0000040cH
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1100				; 0000044cH
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1195				; 000004abH
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1756 :     D3DXMatrixIdentity( &m_mWorld );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1100				; 0000044cH
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1757 :     D3DXMatrixIdentity( &m_mModelRot );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1036				; 0000040cH
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1758 :     D3DXMatrixIdentity( &m_mModelLastRot );    

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 972				; 000003ccH
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1759 :     D3DXMatrixIdentity( &m_mCameraRotLast );    

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1195				; 000004abH
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1760 :     m_vModelCenter = D3DXVECTOR3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 960				; 000003c0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1761 :     m_fRadius    = 5.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [eax+1178], xmm0

; 1762 :     m_fDefaultRadius = 5.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [eax+1182], xmm0

; 1763 :     m_fMinRadius = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+1186], xmm0

; 1764 :     m_fMaxRadius = FLT_MAX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [eax+1190], xmm0

; 1765 :     m_bLimitPitch = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1177], 0

; 1766 :     m_bEnablePositionMovement = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+309], 0

; 1767 :     m_bAttachCameraToModel = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1176], 0

; 1768 : 
; 1769 :     m_nRotateModelButtonMask  = MOUSE_LEFT_BUTTON;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1164], 1

; 1770 :     m_nZoomButtonMask         = MOUSE_WHEEL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1168], 8

; 1771 :     m_nRotateCameraButtonMask = MOUSE_RIGHT_BUTTON;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1172], 4

; 1772 :     m_bDragSinceLastUpdate    = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1194], 1

; 1773 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CModelViewerCamera@@QAE@XZ ENDP			; CModelViewerCamera::CModelViewerCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?SetRotateButtons@CFirstPersonCamera@@QAEX_N00@Z
_TEXT	SEGMENT
tv74 = -216						; size = 4
tv70 = -212						; size = 4
tv67 = -208						; size = 4
_this$ = -8						; size = 4
_bLeft$ = 8						; size = 1
_bMiddle$ = 12						; size = 1
_bRight$ = 16						; size = 1
?SetRotateButtons@CFirstPersonCamera@@QAEX_N00@Z PROC	; CFirstPersonCamera::SetRotateButtons, COMDAT
; _this$ = ecx

; 1744 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1745 :     m_nActiveButtonMask = ( bLeft ? MOUSE_LEFT_BUTTON : 0 ) |
; 1746 :                           ( bMiddle ? MOUSE_MIDDLE_BUTTON : 0 ) |
; 1747 :                           ( bRight ? MOUSE_RIGHT_BUTTON : 0 );

	movzx	eax, BYTE PTR _bLeft$[ebp]
	test	eax, eax
	je	SHORT $LN3@SetRotateB
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@SetRotateB
$LN3@SetRotateB:
	mov	DWORD PTR tv67[ebp], 0
$LN4@SetRotateB:
	movzx	ecx, BYTE PTR _bMiddle$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@SetRotateB
	mov	DWORD PTR tv70[ebp], 2
	jmp	SHORT $LN6@SetRotateB
$LN5@SetRotateB:
	mov	DWORD PTR tv70[ebp], 0
$LN6@SetRotateB:
	movzx	edx, BYTE PTR _bRight$[ebp]
	test	edx, edx
	je	SHORT $LN7@SetRotateB
	mov	DWORD PTR tv74[ebp], 4
	jmp	SHORT $LN8@SetRotateB
$LN7@SetRotateB:
	mov	DWORD PTR tv74[ebp], 0
$LN8@SetRotateB:
	mov	eax, DWORD PTR tv67[ebp]
	or	eax, DWORD PTR tv70[ebp]
	or	eax, DWORD PTR tv74[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+401], eax

; 1748 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetRotateButtons@CFirstPersonCamera@@QAEX_N00@Z ENDP	; CFirstPersonCamera::SetRotateButtons
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?FrameMove@CFirstPersonCamera@@UAEXM@Z
_TEXT	SEGMENT
tv361 = -448						; size = 4
tv233 = -448						; size = 4
tv214 = -448						; size = 4
$T1 = -440						; size = 12
_vPosDeltaWorld$ = -228					; size = 12
_vLocalAhead$ = -208					; size = 12
_vLocalUp$ = -188					; size = 12
_vWorldAhead$ = -168					; size = 12
_vWorldUp$ = -148					; size = 12
_mCameraRot$ = -128					; size = 64
_fPitchDelta$2 = -56					; size = 4
_fYawDelta$3 = -44					; size = 4
_vPosDelta$ = -32					; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?FrameMove@CFirstPersonCamera@@UAEXM@Z PROC		; CFirstPersonCamera::FrameMove, COMDAT
; _this$ = ecx

; 1668 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 448				; 000001c0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-448]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1669 :     if( DXUTGetGlobalTimer()->IsStopped() )

	call	?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ ; DXUTGetGlobalTimer
	mov	ecx, eax
	call	?IsStopped@CDXUTTimer@@QAE_NXZ		; CDXUTTimer::IsStopped
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@FrameMove

; 1670 :         fElapsedTime = 1.0f / DXUTGetFPS();

	call	?DXUTGetFPS@@YAMXZ			; DXUTGetFPS
	fstp	DWORD PTR tv361[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv361[ebp]
	movss	DWORD PTR _fElapsedTime$[ebp], xmm0
$LN7@FrameMove:

; 1671 : 
; 1672 :     if( IsKeyDown(m_aKeys[CAM_RESET]) )

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+132]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@FrameMove

; 1673 :         Reset();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@FrameMove:

; 1674 : 
; 1675 :     // Get the mouse movement (if any) if the mouse button are down
; 1676 :     if( m_nActiveButtonMask & m_nCurrentButtonMask )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+401]
	and	edx, DWORD PTR [ecx+151]
	je	SHORT $LN5@FrameMove

; 1677 :         UpdateMouseDelta( fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateMouseDelta@CBaseCamera@@IAEXM@Z	; CBaseCamera::UpdateMouseDelta
$LN5@FrameMove:

; 1678 : 
; 1679 :     // Get amount of velocity based on the keyboard input and drag (if any)
; 1680 :     UpdateVelocity( fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateVelocity@CBaseCamera@@IAEXM@Z	; CBaseCamera::UpdateVelocity

; 1681 : 
; 1682 :     // Simple euler method to calculate position delta
; 1683 :     D3DXVECTOR3 vPosDelta = m_vVelocity * fElapsedTime;

	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _vPosDelta$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 243				; 000000f3H
	call	??DD3DXVECTOR3@@QBE?AU0@M@Z		; D3DXVECTOR3::operator*

; 1684 : 
; 1685 :     // If rotating the camera 
; 1686 :     if( m_nActiveButtonMask & m_nCurrentButtonMask )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+401]
	and	edx, DWORD PTR [ecx+151]
	je	$LN4@FrameMove

; 1687 :     {
; 1688 :         // Update the pitch & yaw angle based on mouse movement
; 1689 :         float fYawDelta   = m_vRotVelocity.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+276]
	movss	DWORD PTR _fYawDelta$3[ebp], xmm0

; 1690 :         float fPitchDelta = m_vRotVelocity.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+280]
	movss	DWORD PTR _fPitchDelta$2[ebp], xmm0

; 1691 : 
; 1692 :         // Invert pitch if requested
; 1693 :         if( m_bInvertPitch )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+308]
	test	ecx, ecx
	je	SHORT $LN3@FrameMove

; 1694 :             fPitchDelta = -fPitchDelta;

	movss	xmm0, DWORD PTR _fPitchDelta$2[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _fPitchDelta$2[ebp], xmm0
$LN3@FrameMove:

; 1695 : 
; 1696 :         m_fCameraPitchAngle += fPitchDelta;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+223]
	addss	xmm0, DWORD PTR _fPitchDelta$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+223], xmm0

; 1697 :         m_fCameraYawAngle   += fYawDelta;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+219]
	addss	xmm0, DWORD PTR _fYawDelta$3[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+219], xmm0

; 1698 : 
; 1699 :         // Limit pitch to straight up or straight down
; 1700 :         m_fCameraPitchAngle = __max( -D3DX_PI/2.0f,  m_fCameraPitchAngle );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bfc90fdb
	comiss	xmm0, DWORD PTR [eax+223]
	jbe	SHORT $LN10@FrameMove
	movss	xmm0, DWORD PTR __real@bfc90fdb
	movss	DWORD PTR tv214[ebp], xmm0
	jmp	SHORT $LN11@FrameMove
$LN10@FrameMove:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+223]
	movss	DWORD PTR tv214[ebp], xmm0
$LN11@FrameMove:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv214[ebp]
	movss	DWORD PTR [edx+223], xmm0

; 1701 :         m_fCameraPitchAngle = __min( +D3DX_PI/2.0f,  m_fCameraPitchAngle );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+223]
	comiss	xmm0, DWORD PTR __real@3fc90fdb
	jbe	SHORT $LN12@FrameMove
	movss	xmm0, DWORD PTR __real@3fc90fdb
	movss	DWORD PTR tv233[ebp], xmm0
	jmp	SHORT $LN13@FrameMove
$LN12@FrameMove:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+223]
	movss	DWORD PTR tv233[ebp], xmm0
$LN13@FrameMove:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv233[ebp]
	movss	DWORD PTR [edx+223], xmm0
$LN4@FrameMove:

; 1702 :     }
; 1703 : 
; 1704 :     // Make a rotation matrix based on the camera's yaw & pitch
; 1705 :     D3DXMATRIX mCameraRot;

	lea	ecx, DWORD PTR _mCameraRot$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1706 :     D3DXMatrixRotationYawPitchRoll( &mCameraRot, m_fCameraYawAngle, m_fCameraPitchAngle, 0 );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+223]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+219]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _mCameraRot$[ebp]
	push	edx
	call	_D3DXMatrixRotationYawPitchRoll@16

; 1707 : 
; 1708 :     // Transform vectors based on camera's rotation matrix
; 1709 :     D3DXVECTOR3 vWorldUp, vWorldAhead;

	lea	ecx, DWORD PTR _vWorldUp$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	lea	ecx, DWORD PTR _vWorldAhead$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1710 :     D3DXVECTOR3 vLocalUp    = D3DXVECTOR3(0,1,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vLocalUp$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1711 :     D3DXVECTOR3 vLocalAhead = D3DXVECTOR3(0,0,1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vLocalAhead$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1712 :     D3DXVec3TransformCoord( &vWorldUp, &vLocalUp, &mCameraRot );

	lea	eax, DWORD PTR _mCameraRot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vLocalUp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vWorldUp$[ebp]
	push	edx
	call	_D3DXVec3TransformCoord@12

; 1713 :     D3DXVec3TransformCoord( &vWorldAhead, &vLocalAhead, &mCameraRot );

	lea	eax, DWORD PTR _mCameraRot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vLocalAhead$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vWorldAhead$[ebp]
	push	edx
	call	_D3DXVec3TransformCoord@12

; 1714 : 
; 1715 :     // Transform the position delta by the camera's rotation 
; 1716 :     D3DXVECTOR3 vPosDeltaWorld;

	lea	ecx, DWORD PTR _vPosDeltaWorld$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1717 :     if( !m_bEnableYAxisMovement )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+310]
	test	ecx, ecx
	jne	SHORT $LN2@FrameMove

; 1718 :     {
; 1719 :         // If restricting Y movement, do not include pitch
; 1720 :         // when transforming position delta vector.
; 1721 :         D3DXMatrixRotationYawPitchRoll( &mCameraRot, m_fCameraYawAngle, 0.0f, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+219]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _mCameraRot$[ebp]
	push	ecx
	call	_D3DXMatrixRotationYawPitchRoll@16
$LN2@FrameMove:

; 1722 :     }
; 1723 :     D3DXVec3TransformCoord( &vPosDeltaWorld, &vPosDelta, &mCameraRot );

	lea	eax, DWORD PTR _mCameraRot$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vPosDelta$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vPosDeltaWorld$[ebp]
	push	edx
	call	_D3DXVec3TransformCoord@12

; 1724 : 
; 1725 :     // Move the eye position 
; 1726 :     m_vEye += vPosDeltaWorld;

	lea	eax, DWORD PTR _vPosDeltaWorld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 195				; 000000c3H
	call	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z		; D3DXVECTOR3::operator+=

; 1727 :     if( m_bClipToBoundary )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+311]
	test	ecx, ecx
	je	SHORT $LN1@FrameMove

; 1728 :         ConstrainToBoundary( &m_vEye );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 195				; 000000c3H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstrainToBoundary@CBaseCamera@@IAEXPAUD3DXVECTOR3@@@Z ; CBaseCamera::ConstrainToBoundary
$LN1@FrameMove:

; 1729 : 
; 1730 :     // Update the lookAt position based on the eye position 
; 1731 :     m_vLookAt = m_vEye + vWorldAhead;

	lea	eax, DWORD PTR _vWorldAhead$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 195				; 000000c3H
	call	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z		; D3DXVECTOR3::operator+
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 207				; 000000cfH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 1732 : 
; 1733 :     // Update the view matrix
; 1734 :     D3DXMatrixLookAtLH( &m_mView, &m_vEye, &m_vLookAt, &vWorldUp );

	lea	eax, DWORD PTR _vWorldUp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 207				; 000000cfH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 195				; 000000c3H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_D3DXMatrixLookAtLH@16

; 1735 : 
; 1736 :     D3DXMatrixInverse( &m_mCameraWorld, NULL, &m_mView );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 337				; 00000151H
	push	ecx
	call	_D3DXMatrixInverse@12

; 1737 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@FrameMove
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 448				; 000001c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN22@FrameMove:
	DD	7
	DD	$LN21@FrameMove
$LN21@FrameMove:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN14@FrameMove
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN15@FrameMove
	DD	-148					; ffffff6cH
	DD	12					; 0000000cH
	DD	$LN16@FrameMove
	DD	-168					; ffffff58H
	DD	12					; 0000000cH
	DD	$LN17@FrameMove
	DD	-188					; ffffff44H
	DD	12					; 0000000cH
	DD	$LN18@FrameMove
	DD	-208					; ffffff30H
	DD	12					; 0000000cH
	DD	$LN19@FrameMove
	DD	-228					; ffffff1cH
	DD	12					; 0000000cH
	DD	$LN20@FrameMove
$LN20@FrameMove:
	DB	118					; 00000076H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN19@FrameMove:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	65					; 00000041H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN18@FrameMove:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	0
$LN17@FrameMove:
	DB	118					; 00000076H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN16@FrameMove:
	DB	118					; 00000076H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	0
$LN15@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN14@FrameMove:
	DB	118					; 00000076H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?FrameMove@CFirstPersonCamera@@UAEXM@Z ENDP		; CFirstPersonCamera::FrameMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??0CFirstPersonCamera@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CFirstPersonCamera@@QAE@XZ PROC			; CFirstPersonCamera::CFirstPersonCamera, COMDAT
; _this$ = ecx

; 1658 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseCamera@@QAE@XZ			; CBaseCamera::CBaseCamera
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFirstPersonCamera@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 337				; 00000151H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+401], 7

; 1659 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFirstPersonCamera@@QAE@XZ ENDP			; CFirstPersonCamera::CFirstPersonCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?UpdateVelocity@CBaseCamera@@IAEXM@Z
_TEXT	SEGMENT
tv291 = -364						; size = 4
$T1 = -356						; size = 12
$T2 = -336						; size = 12
$T3 = -316						; size = 12
_vAccel$ = -104						; size = 12
_mRotDelta$ = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?UpdateVelocity@CBaseCamera@@IAEXM@Z PROC		; CBaseCamera::UpdateVelocity, COMDAT
; _this$ = ecx

; 1514 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1515 :     D3DXMATRIX mRotDelta;

	lea	ecx, DWORD PTR _mRotDelta$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1516 :     D3DXVECTOR3 vAccel = D3DXVECTOR3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vAccel$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1517 : 
; 1518 :     if( m_bEnablePositionMovement )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+309]
	test	ecx, ecx
	je	$LN7@UpdateVelo

; 1519 :     {
; 1520 :         // Update acceleration vector based on keyboard state
; 1521 :         if( IsKeyDown(m_aKeys[CAM_MOVE_FORWARD]) )

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+132]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@UpdateVelo

; 1522 :             vAccel.z += 1.0f;

	movss	xmm0, DWORD PTR _vAccel$[ebp+8]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vAccel$[ebp+8], xmm0
$LN13@UpdateVelo:

; 1523 :         if( IsKeyDown(m_aKeys[CAM_MOVE_BACKWARD]) )

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+132]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@UpdateVelo

; 1524 :             vAccel.z -= 1.0f;

	movss	xmm0, DWORD PTR _vAccel$[ebp+8]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vAccel$[ebp+8], xmm0
$LN12@UpdateVelo:

; 1525 :         if( m_bEnableYAxisMovement )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+310]
	test	ecx, ecx
	je	SHORT $LN9@UpdateVelo

; 1526 :         {
; 1527 :             if( IsKeyDown(m_aKeys[CAM_MOVE_UP]) )

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+132]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@UpdateVelo

; 1528 :                 vAccel.y += 1.0f;

	movss	xmm0, DWORD PTR _vAccel$[ebp+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vAccel$[ebp+4], xmm0
$LN10@UpdateVelo:

; 1529 :             if( IsKeyDown(m_aKeys[CAM_MOVE_DOWN]) )

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+132]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@UpdateVelo

; 1530 :                 vAccel.y -= 1.0f;

	movss	xmm0, DWORD PTR _vAccel$[ebp+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vAccel$[ebp+4], xmm0
$LN9@UpdateVelo:

; 1531 :         }
; 1532 :         if( IsKeyDown(m_aKeys[CAM_STRAFE_RIGHT]) )

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+132]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@UpdateVelo

; 1533 :             vAccel.x += 1.0f;

	movss	xmm0, DWORD PTR _vAccel$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vAccel$[ebp], xmm0
$LN8@UpdateVelo:

; 1534 :         if( IsKeyDown(m_aKeys[CAM_STRAFE_LEFT]) )

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+132]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@UpdateVelo

; 1535 :             vAccel.x -= 1.0f;

	movss	xmm0, DWORD PTR _vAccel$[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vAccel$[ebp], xmm0
$LN7@UpdateVelo:

; 1536 :     }
; 1537 : 
; 1538 :     // Normalize vector so if moving 2 dirs (left & forward), 
; 1539 :     // the camera doesn't move faster than if moving in 1 dir
; 1540 :     D3DXVec3Normalize( &vAccel, &vAccel );

	lea	eax, DWORD PTR _vAccel$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vAccel$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 1541 : 
; 1542 :     // Scale the acceleration vector
; 1543 :     vAccel *= m_fMoveScaler;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+304]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vAccel$[ebp]
	call	??XD3DXVECTOR3@@QAEAAU0@M@Z		; D3DXVECTOR3::operator*=

; 1544 : 
; 1545 :     if( m_bMovementDrag )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+255]
	test	ecx, ecx
	je	$LN6@UpdateVelo

; 1546 :     {
; 1547 :         // Is there any acceleration this frame?
; 1548 :         if( D3DXVec3LengthSq( &vAccel ) > 0 )

	lea	eax, DWORD PTR _vAccel$[ebp]
	push	eax
	call	?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z ; D3DXVec3LengthSq
	add	esp, 4
	fstp	DWORD PTR tv291[ebp]
	movss	xmm0, DWORD PTR tv291[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@UpdateVelo

; 1549 :         {
; 1550 :             // If so, then this means the user has pressed a movement key\
; 1551 :             // so change the velocity immediately to acceleration 
; 1552 :             // upon keyboard input.  This isn't normal physics
; 1553 :             // but it will give a quick response to keyboard input
; 1554 :             m_vVelocity = vAccel;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 243				; 000000f3H
	mov	ecx, DWORD PTR _vAccel$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vAccel$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vAccel$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 1555 :             m_fDragTimer = m_fTotalDragTimeToZero;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR [eax+268], edx

; 1556 :             m_vVelocityDrag = vAccel / m_fDragTimer;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+268]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vAccel$[ebp]
	call	??KD3DXVECTOR3@@QBE?AU0@M@Z		; D3DXVECTOR3::operator/
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 256				; 00000100H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 1557 :         }
; 1558 :         else 

	jmp	$LN2@UpdateVelo
$LN5@UpdateVelo:

; 1559 :         {
; 1560 :             // If no key being pressed, then slowly decrease velocity to 0
; 1561 :             if( m_fDragTimer > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+268]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@UpdateVelo

; 1562 :             {
; 1563 :                 // Drag until timer is <= 0
; 1564 :                 m_vVelocity -= m_vVelocityDrag * fElapsedTime;

	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	??DD3DXVECTOR3@@QBE?AU0@M@Z		; D3DXVECTOR3::operator*
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 243				; 000000f3H
	call	??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z		; D3DXVECTOR3::operator-=

; 1565 :                 m_fDragTimer -= fElapsedTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+268]
	subss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+268], xmm0

; 1566 :             }
; 1567 :             else

	jmp	SHORT $LN2@UpdateVelo
$LN3@UpdateVelo:

; 1568 :             {
; 1569 :                 // Zero velocity
; 1570 :                 m_vVelocity = D3DXVECTOR3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 243				; 000000f3H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN2@UpdateVelo:

; 1571 :             }
; 1572 :         }
; 1573 :     }
; 1574 :     else

	jmp	SHORT $LN1@UpdateVelo
$LN6@UpdateVelo:

; 1575 :     {
; 1576 :         // No drag, so immediately change the velocity
; 1577 :         m_vVelocity = vAccel;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 243				; 000000f3H
	mov	ecx, DWORD PTR _vAccel$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vAccel$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vAccel$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
$LN1@UpdateVelo:

; 1578 :     }
; 1579 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@UpdateVelo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN20@UpdateVelo:
	DD	2
	DD	$LN19@UpdateVelo
$LN19@UpdateVelo:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN17@UpdateVelo
	DD	-104					; ffffff98H
	DD	12					; 0000000cH
	DD	$LN18@UpdateVelo
$LN18@UpdateVelo:
	DB	118					; 00000076H
	DB	65					; 00000041H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN17@UpdateVelo:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?UpdateVelocity@CBaseCamera@@IAEXM@Z ENDP		; CBaseCamera::UpdateVelocity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?UpdateMouseDelta@CBaseCamera@@IAEXM@Z
_TEXT	SEGMENT
$T1 = -316						; size = 8
_fPercentOfOld$ = -108					; size = 4
_fPercentOfNew$ = -96					; size = 4
_rcDesktop$2 = -84					; size = 16
_ptCenter$3 = -60					; size = 8
_ptCurMousePos$ = -44					; size = 8
_ptCurMouseDelta$ = -28					; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?UpdateMouseDelta@CBaseCamera@@IAEXM@Z PROC		; CBaseCamera::UpdateMouseDelta, COMDAT
; _this$ = ecx

; 1465 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1466 :     UNREFERENCED_PARAMETER( fElapsedTime );
; 1467 : 
; 1468 :     POINT ptCurMouseDelta;
; 1469 :     POINT ptCurMousePos;
; 1470 :     
; 1471 :     // Get current position of mouse
; 1472 :     GetCursorPos( &ptCurMousePos );

	mov	esi, esp
	lea	eax, DWORD PTR _ptCurMousePos$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1473 : 
; 1474 :     // Calc how far it's moved since last frame
; 1475 :     ptCurMouseDelta.x = ptCurMousePos.x - m_ptLastMousePosition.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptCurMousePos$[ebp]
	sub	ecx, DWORD PTR [eax+140]
	mov	DWORD PTR _ptCurMouseDelta$[ebp], ecx

; 1476 :     ptCurMouseDelta.y = ptCurMousePos.y - m_ptLastMousePosition.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptCurMousePos$[ebp+4]
	sub	ecx, DWORD PTR [eax+144]
	mov	DWORD PTR _ptCurMouseDelta$[ebp+4], ecx

; 1477 : 
; 1478 :     // Record current position for next time
; 1479 :     m_ptLastMousePosition = ptCurMousePos;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptCurMousePos$[ebp]
	mov	DWORD PTR [eax+140], ecx
	mov	edx, DWORD PTR _ptCurMousePos$[ebp+4]
	mov	DWORD PTR [eax+144], edx

; 1480 : 
; 1481 :     if( m_bResetCursorAfterMove )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+336]
	test	ecx, ecx
	je	SHORT $LN1@UpdateMous

; 1482 :     {
; 1483 :         // Set position of camera to center of desktop, 
; 1484 :         // so it always has room to move.  This is very useful
; 1485 :         // if the cursor is hidden.  If this isn't done and cursor is hidden, 
; 1486 :         // then invisible cursor will hit the edge of the screen 
; 1487 :         // and the user can't tell what happened
; 1488 :         POINT ptCenter;
; 1489 :         RECT rcDesktop;
; 1490 :         GetWindowRect( GetDesktopWindow(), &rcDesktop );

	mov	esi, esp
	lea	eax, DWORD PTR _rcDesktop$2[ebp]
	push	eax
	mov	edi, esp
	call	DWORD PTR __imp__GetDesktopWindow@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__GetWindowRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1491 :         ptCenter.x = (rcDesktop.right - rcDesktop.left) / 2;

	mov	eax, DWORD PTR _rcDesktop$2[ebp+8]
	sub	eax, DWORD PTR _rcDesktop$2[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _ptCenter$3[ebp], eax

; 1492 :         ptCenter.y = (rcDesktop.bottom - rcDesktop.top) / 2;   

	mov	eax, DWORD PTR _rcDesktop$2[ebp+12]
	sub	eax, DWORD PTR _rcDesktop$2[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _ptCenter$3[ebp+4], eax

; 1493 :         SetCursorPos( ptCenter.x, ptCenter.y );

	mov	esi, esp
	mov	eax, DWORD PTR _ptCenter$3[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ptCenter$3[ebp]
	push	ecx
	call	DWORD PTR __imp__SetCursorPos@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1494 :         m_ptLastMousePosition = ptCenter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptCenter$3[ebp]
	mov	DWORD PTR [eax+140], ecx
	mov	edx, DWORD PTR _ptCenter$3[ebp+4]
	mov	DWORD PTR [eax+144], edx
$LN1@UpdateMous:

; 1495 :     }
; 1496 : 
; 1497 :     // Smooth the relative mouse data over a few frames so it isn't 
; 1498 :     // jerky when moving slowly at low frame rates.
; 1499 :     float fPercentOfNew =  1.0f / m_fFramesToSmoothMouseData;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [eax+167]
	movss	DWORD PTR _fPercentOfNew$[ebp], xmm0

; 1500 :     float fPercentOfOld =  1.0f - fPercentOfNew;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _fPercentOfNew$[ebp]
	movss	DWORD PTR _fPercentOfOld$[ebp], xmm0

; 1501 :     m_vMouseDelta.x = m_vMouseDelta.x*fPercentOfOld + ptCurMouseDelta.x*fPercentOfNew;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+159]
	mulss	xmm0, DWORD PTR _fPercentOfOld$[ebp]
	cvtsi2ss xmm1, DWORD PTR _ptCurMouseDelta$[ebp]
	mulss	xmm1, DWORD PTR _fPercentOfNew$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+159], xmm0

; 1502 :     m_vMouseDelta.y = m_vMouseDelta.y*fPercentOfOld + ptCurMouseDelta.y*fPercentOfNew;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+163]
	mulss	xmm0, DWORD PTR _fPercentOfOld$[ebp]
	cvtsi2ss xmm1, DWORD PTR _ptCurMouseDelta$[ebp+4]
	mulss	xmm1, DWORD PTR _fPercentOfNew$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+163], xmm0

; 1503 : 
; 1504 :     m_vRotVelocity = m_vMouseDelta * m_fRotationScaler;

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+300]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 159				; 0000009fH
	call	??DD3DXVECTOR2@@QBE?AU0@M@Z		; D3DXVECTOR2::operator*
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], edx
	mov	DWORD PTR [ecx+280], eax

; 1505 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@UpdateMous
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN9@UpdateMous:
	DD	4
	DD	$LN8@UpdateMous
$LN8@UpdateMous:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN4@UpdateMous
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN5@UpdateMous
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN6@UpdateMous
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN7@UpdateMous
$LN7@UpdateMous:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN6@UpdateMous:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN5@UpdateMous:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN4@UpdateMous:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?UpdateMouseDelta@CBaseCamera@@IAEXM@Z ENDP		; CBaseCamera::UpdateMouseDelta
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?ConstrainToBoundary@CBaseCamera@@IAEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv289 = -208						; size = 4
tv256 = -208						; size = 4
tv223 = -208						; size = 4
tv192 = -208						; size = 4
tv159 = -208						; size = 4
tv94 = -208						; size = 4
_this$ = -8						; size = 4
_pV$ = 8						; size = 4
?ConstrainToBoundary@CBaseCamera@@IAEXPAUD3DXVECTOR3@@@Z PROC ; CBaseCamera::ConstrainToBoundary, COMDAT
; _this$ = ecx

; 1588 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1589 :     // Constrain vector to a bounding box 
; 1590 :     pV->x = __max(pV->x, m_vMinBoundary.x);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	comiss	xmm0, DWORD PTR [eax+312]
	jbe	SHORT $LN3@ConstrainT
	mov	edx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR tv94[ebp], xmm0
	jmp	SHORT $LN4@ConstrainT
$LN3@ConstrainT:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+312]
	movss	DWORD PTR tv94[ebp], xmm0
$LN4@ConstrainT:
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR tv94[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1591 :     pV->y = __max(pV->y, m_vMinBoundary.y);

	mov	eax, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+316]
	jbe	SHORT $LN5@ConstrainT
	mov	edx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR tv159[ebp], xmm0
	jmp	SHORT $LN6@ConstrainT
$LN5@ConstrainT:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+316]
	movss	DWORD PTR tv159[ebp], xmm0
$LN6@ConstrainT:
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1592 :     pV->z = __max(pV->z, m_vMinBoundary.z);

	mov	eax, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	comiss	xmm0, DWORD PTR [ecx+320]
	jbe	SHORT $LN7@ConstrainT
	mov	edx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv192[ebp], xmm0
	jmp	SHORT $LN8@ConstrainT
$LN7@ConstrainT:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+320]
	movss	DWORD PTR tv192[ebp], xmm0
$LN8@ConstrainT:
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR tv192[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1593 : 
; 1594 :     pV->x = __min(pV->x, m_vMaxBoundary.x);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	mov	ecx, DWORD PTR _pV$[ebp]
	comiss	xmm0, DWORD PTR [ecx]
	jbe	SHORT $LN9@ConstrainT
	mov	edx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR tv223[ebp], xmm0
	jmp	SHORT $LN10@ConstrainT
$LN9@ConstrainT:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+324]
	movss	DWORD PTR tv223[ebp], xmm0
$LN10@ConstrainT:
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR tv223[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1595 :     pV->y = __min(pV->y, m_vMaxBoundary.y);

	mov	eax, DWORD PTR _pV$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+328]
	comiss	xmm0, DWORD PTR [eax+4]
	jbe	SHORT $LN11@ConstrainT
	mov	edx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR tv256[ebp], xmm0
	jmp	SHORT $LN12@ConstrainT
$LN11@ConstrainT:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+328]
	movss	DWORD PTR tv256[ebp], xmm0
$LN12@ConstrainT:
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1596 :     pV->z = __min(pV->z, m_vMaxBoundary.z);

	mov	eax, DWORD PTR _pV$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+332]
	comiss	xmm0, DWORD PTR [eax+8]
	jbe	SHORT $LN13@ConstrainT
	mov	edx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR tv289[ebp], xmm0
	jmp	SHORT $LN14@ConstrainT
$LN13@ConstrainT:
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+332]
	movss	DWORD PTR tv289[ebp], xmm0
$LN14@ConstrainT:
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR tv289[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1597 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstrainToBoundary@CBaseCamera@@IAEXPAUD3DXVECTOR3@@@Z ENDP ; CBaseCamera::ConstrainToBoundary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?IsKeyDown@CBaseCamera@@IBE_NE@Z
_TEXT	SEGMENT
tv67 = -208						; size = 4
_this$ = -8						; size = 4
_key$ = 8						; size = 1
?IsKeyDown@CBaseCamera@@IBE_NE@Z PROC			; CBaseCamera::IsKeyDown, COMDAT
; _this$ = ecx

; 296  :     bool IsKeyDown( BYTE key ) const { return( (key & KEY_IS_DOWN_MASK) == KEY_IS_DOWN_MASK ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _key$[ebp]
	and	eax, 1
	je	SHORT $LN3@IsKeyDown
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsKeyDown
$LN3@IsKeyDown:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsKeyDown:
	mov	al, BYTE PTR tv67[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsKeyDown@CBaseCamera@@IBE_NE@Z ENDP			; CBaseCamera::IsKeyDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_nKey$ = 8						; size = 4
?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z PROC ; CBaseCamera::MapKey, COMDAT
; _this$ = ecx

; 1606 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1607 :     // This could be upgraded to a method that's user-definable but for 
; 1608 :     // simplicity, we'll use a hardcoded mapping.
; 1609 :     switch( nKey )

	mov	eax, DWORD PTR _nKey$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 17					; 00000011H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 88			; 00000058H
	ja	$LN21@MapKey
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN25@MapKey[edx]
	jmp	DWORD PTR $LN26@MapKey[eax*4]
$LN20@MapKey:

; 1610 :     {
; 1611 :         case VK_CONTROL:  return CAM_CONTROLDOWN;

	mov	eax, 7
	jmp	$LN23@MapKey
$LN19@MapKey:

; 1612 :         case VK_LEFT:  return CAM_STRAFE_LEFT;

	xor	eax, eax
	jmp	SHORT $LN23@MapKey
$LN18@MapKey:

; 1613 :         case VK_RIGHT: return CAM_STRAFE_RIGHT;

	mov	eax, 1
	jmp	SHORT $LN23@MapKey
$LN17@MapKey:

; 1614 :         case VK_UP:    return CAM_MOVE_FORWARD;

	mov	eax, 2
	jmp	SHORT $LN23@MapKey
$LN16@MapKey:

; 1615 :         case VK_DOWN:  return CAM_MOVE_BACKWARD;

	mov	eax, 3
	jmp	SHORT $LN23@MapKey
$LN15@MapKey:

; 1616 :         case VK_PRIOR: return CAM_MOVE_UP;        // pgup

	mov	eax, 4
	jmp	SHORT $LN23@MapKey
$LN14@MapKey:

; 1617 :         case VK_NEXT:  return CAM_MOVE_DOWN;      // pgdn

	mov	eax, 5
	jmp	SHORT $LN23@MapKey
$LN13@MapKey:

; 1618 : 
; 1619 :         case 'A':      return CAM_STRAFE_LEFT;

	xor	eax, eax
	jmp	SHORT $LN23@MapKey
$LN12@MapKey:

; 1620 :         case 'D':      return CAM_STRAFE_RIGHT;

	mov	eax, 1
	jmp	SHORT $LN23@MapKey
$LN11@MapKey:

; 1621 :         case 'W':      return CAM_MOVE_FORWARD;

	mov	eax, 2
	jmp	SHORT $LN23@MapKey
$LN10@MapKey:

; 1622 :         case 'S':      return CAM_MOVE_BACKWARD;

	mov	eax, 3
	jmp	SHORT $LN23@MapKey
$LN9@MapKey:

; 1623 :         case 'Q':      return CAM_MOVE_DOWN;

	mov	eax, 5
	jmp	SHORT $LN23@MapKey
$LN8@MapKey:

; 1624 :         case 'E':      return CAM_MOVE_UP;

	mov	eax, 4
	jmp	SHORT $LN23@MapKey
$LN7@MapKey:

; 1625 : 
; 1626 :         case VK_NUMPAD4: return CAM_STRAFE_LEFT;

	xor	eax, eax
	jmp	SHORT $LN23@MapKey
$LN6@MapKey:

; 1627 :         case VK_NUMPAD6: return CAM_STRAFE_RIGHT;

	mov	eax, 1
	jmp	SHORT $LN23@MapKey
$LN5@MapKey:

; 1628 :         case VK_NUMPAD8: return CAM_MOVE_FORWARD;

	mov	eax, 2
	jmp	SHORT $LN23@MapKey
$LN4@MapKey:

; 1629 :         case VK_NUMPAD2: return CAM_MOVE_BACKWARD;

	mov	eax, 3
	jmp	SHORT $LN23@MapKey
$LN3@MapKey:

; 1630 :         case VK_NUMPAD9: return CAM_MOVE_UP;        

	mov	eax, 4
	jmp	SHORT $LN23@MapKey
$LN2@MapKey:

; 1631 :         case VK_NUMPAD3: return CAM_MOVE_DOWN;      

	mov	eax, 5
	jmp	SHORT $LN23@MapKey
$LN1@MapKey:

; 1632 : 
; 1633 :         case VK_HOME:   return CAM_RESET;

	mov	eax, 6
	jmp	SHORT $LN23@MapKey
$LN21@MapKey:

; 1634 :     }
; 1635 : 
; 1636 :     return CAM_UNKNOWN;

	mov	eax, 255				; 000000ffH
$LN23@MapKey:

; 1637 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN26@MapKey:
	DD	$LN20@MapKey
	DD	$LN15@MapKey
	DD	$LN14@MapKey
	DD	$LN1@MapKey
	DD	$LN19@MapKey
	DD	$LN17@MapKey
	DD	$LN18@MapKey
	DD	$LN16@MapKey
	DD	$LN13@MapKey
	DD	$LN12@MapKey
	DD	$LN8@MapKey
	DD	$LN9@MapKey
	DD	$LN10@MapKey
	DD	$LN11@MapKey
	DD	$LN4@MapKey
	DD	$LN2@MapKey
	DD	$LN7@MapKey
	DD	$LN6@MapKey
	DD	$LN5@MapKey
	DD	$LN3@MapKey
	DD	$LN21@MapKey
$LN25@MapKey:
	DB	0
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	1
	DB	2
	DB	20					; 00000014H
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	8
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	9
	DB	10					; 0000000aH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	11					; 0000000bH
	DB	20					; 00000014H
	DB	12					; 0000000cH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	13					; 0000000dH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	20					; 00000014H
	DB	17					; 00000011H
	DB	20					; 00000014H
	DB	18					; 00000012H
	DB	19					; 00000013H
?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z ENDP ; CBaseCamera::MapKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetDragRect@CBaseCamera@@UAEXAAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rc$ = 8						; size = 4
?SetDragRect@CBaseCamera@@UAEXAAUtagRECT@@@Z PROC	; CBaseCamera::SetDragRect, COMDAT
; _this$ = ecx

; 272  :     virtual void SetDragRect( RECT &rc ) { m_rcDrag = rc; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 227				; 000000e3H
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragRect@CBaseCamera@@UAEXAAUtagRECT@@@Z ENDP	; CBaseCamera::SetDragRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?SetProjParams@CBaseCamera@@UAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fFOV$ = 8						; size = 4
_fAspect$ = 12						; size = 4
_fNearPlane$ = 16					; size = 4
_fFarPlane$ = 20					; size = 4
?SetProjParams@CBaseCamera@@UAEXMMMM@Z PROC		; CBaseCamera::SetProjParams, COMDAT
; _this$ = ecx

; 1358 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1359 :     // Set attributes for the projection matrix
; 1360 :     m_fFOV        = fFOV;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fFOV$[ebp]
	movss	DWORD PTR [eax+284], xmm0

; 1361 :     m_fAspect     = fAspect;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fAspect$[ebp]
	movss	DWORD PTR [eax+288], xmm0

; 1362 :     m_fNearPlane  = fNearPlane;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fNearPlane$[ebp]
	movss	DWORD PTR [eax+292], xmm0

; 1363 :     m_fFarPlane   = fFarPlane;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fFarPlane$[ebp]
	movss	DWORD PTR [eax+296], xmm0

; 1364 : 
; 1365 :     D3DXMatrixPerspectiveFovLH( &m_mProj, fFOV, fAspect, fNearPlane, fFarPlane );

	push	ecx
	movss	xmm0, DWORD PTR _fFarPlane$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fNearPlane$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fAspect$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fFOV$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	_D3DXMatrixPerspectiveFovLH@20

; 1366 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetProjParams@CBaseCamera@@UAEXMMMM@Z ENDP		; CBaseCamera::SetProjParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?SetViewParams@CBaseCamera@@UAEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv262 = -328						; size = 4
_fLen$ = -128						; size = 4
_pZBasis$ = -116					; size = 4
_mInvView$ = -104					; size = 64
_vUp$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pvEyePt$ = 8						; size = 4
_pvLookatPt$ = 12					; size = 4
?SetViewParams@CBaseCamera@@UAEXPAUD3DXVECTOR3@@0@Z PROC ; CBaseCamera::SetViewParams, COMDAT
; _this$ = ecx

; 1326 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1327 :     if( NULL == pvEyePt || NULL == pvLookatPt )

	cmp	DWORD PTR _pvEyePt$[ebp], 0
	je	SHORT $LN1@SetViewPar
	cmp	DWORD PTR _pvLookatPt$[ebp], 0
	jne	SHORT $LN2@SetViewPar
$LN1@SetViewPar:

; 1328 :         return;

	jmp	$LN3@SetViewPar
$LN2@SetViewPar:

; 1329 : 
; 1330 :     m_vDefaultEye = m_vEye = *pvEyePt;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 195				; 000000c3H
	mov	ecx, DWORD PTR _pvEyePt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 195				; 000000c3H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 171				; 000000abH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1331 :     m_vDefaultLookAt = m_vLookAt = *pvLookatPt;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 207				; 000000cfH
	mov	ecx, DWORD PTR _pvLookatPt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 207				; 000000cfH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 183				; 000000b7H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx

; 1332 : 
; 1333 :     // Calc the view matrix
; 1334 :     D3DXVECTOR3 vUp(0,1,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vUp$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1335 :     D3DXMatrixLookAtLH( &m_mView, pvEyePt, pvLookatPt, &vUp );

	lea	eax, DWORD PTR _vUp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pvLookatPt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pvEyePt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_D3DXMatrixLookAtLH@16

; 1336 : 
; 1337 :     D3DXMATRIX mInvView;

	lea	ecx, DWORD PTR _mInvView$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 1338 :     D3DXMatrixInverse( &mInvView, NULL, &m_mView );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	push	0
	lea	ecx, DWORD PTR _mInvView$[ebp]
	push	ecx
	call	_D3DXMatrixInverse@12

; 1339 : 
; 1340 :     // The axis basis vectors and camera position are stored inside the 
; 1341 :     // position matrix in the 4 rows of the camera's world matrix.
; 1342 :     // To figure out the yaw/pitch of the camera, we just need the Z basis vector
; 1343 :     D3DXVECTOR3* pZBasis = (D3DXVECTOR3*) &mInvView._31;

	lea	eax, DWORD PTR _mInvView$[ebp+32]
	mov	DWORD PTR _pZBasis$[ebp], eax

; 1344 : 
; 1345 :     m_fCameraYawAngle   = atan2f( pZBasis->x, pZBasis->z );

	mov	eax, DWORD PTR _pZBasis$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pZBasis$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+219]

; 1346 :     float fLen = sqrtf(pZBasis->z*pZBasis->z + pZBasis->x*pZBasis->x);

	mov	eax, DWORD PTR _pZBasis$[ebp]
	mov	ecx, DWORD PTR _pZBasis$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pZBasis$[ebp]
	mov	eax, DWORD PTR _pZBasis$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _fLen$[ebp]

; 1347 :     m_fCameraPitchAngle = -atan2f( pZBasis->y, fLen );

	push	ecx
	movss	xmm0, DWORD PTR _fLen$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pZBasis$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	fstp	DWORD PTR tv262[ebp]
	movss	xmm0, DWORD PTR tv262[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+223], xmm0
$LN3@SetViewPar:

; 1348 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SetViewPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@SetViewPar:
	DD	2
	DD	$LN7@SetViewPar
$LN7@SetViewPar:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN5@SetViewPar
	DD	-104					; ffffff98H
	DD	64					; 00000040H
	DD	$LN6@SetViewPar
$LN6@SetViewPar:
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN5@SetViewPar:
	DB	118					; 00000076H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	0
?SetViewParams@CBaseCamera@@UAEXPAUD3DXVECTOR3@@0@Z ENDP ; CBaseCamera::SetViewParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?Reset@CBaseCamera@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Reset@CBaseCamera@@UAEXXZ PROC				; CBaseCamera::Reset, COMDAT
; _this$ = ecx

; 1646 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1647 :     SetViewParams( &m_vDefaultEye, &m_vDefaultLookAt );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 183				; 000000b7H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 171				; 000000abH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1648 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CBaseCamera@@UAEXXZ ENDP				; CBaseCamera::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv64 = -248						; size = 4
_ptCursor$1 = -48					; size = 8
_mappedKey$2 = -32					; size = 4
_mappedKey$3 = -20					; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z PROC	; CBaseCamera::HandleMessages, COMDAT
; _this$ = ecx

; 1375 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1376 :     UNREFERENCED_PARAMETER( hWnd );
; 1377 :     UNREFERENCED_PARAMETER( lParam );
; 1378 : 
; 1379 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 513		; 00000201H
	ja	SHORT $LN23@HandleMess
	cmp	DWORD PTR tv64[ebp], 513		; 00000201H
	je	$LN13@HandleMess
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	je	SHORT $LN18@HandleMess
	cmp	DWORD PTR tv64[ebp], 257		; 00000101H
	je	$LN15@HandleMess
	jmp	$LN19@HandleMess
$LN23@HandleMess:
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 514				; 00000202H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 8
	ja	$LN19@HandleMess
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN24@HandleMess[edx]
	jmp	DWORD PTR $LN28@HandleMess[eax*4]
$LN18@HandleMess:

; 1380 :     {
; 1381 :         case WM_KEYDOWN:
; 1382 :         {
; 1383 :             // Map this key to a D3DUtil_CameraKeys enum and update the
; 1384 :             // state of m_aKeys[] by adding the KEY_WAS_DOWN_MASK|KEY_IS_DOWN_MASK mask
; 1385 :             // only if the key is not down
; 1386 :             D3DUtil_CameraKeys mappedKey = MapKey( (UINT)wParam );

	mov	esi, esp
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _mappedKey$3[ebp], eax

; 1387 :             if( mappedKey != CAM_UNKNOWN )

	cmp	DWORD PTR _mappedKey$3[ebp], 255	; 000000ffH
	je	SHORT $LN17@HandleMess

; 1388 :             {
; 1389 :                 if( FALSE == IsKeyDown(m_aKeys[mappedKey]) )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _mappedKey$3[ebp]
	movzx	ecx, BYTE PTR [eax+132]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN17@HandleMess

; 1390 :                     m_aKeys[ mappedKey ] = KEY_WAS_DOWN_MASK | KEY_IS_DOWN_MASK;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _mappedKey$3[ebp]
	mov	BYTE PTR [eax+132], 129			; 00000081H
$LN17@HandleMess:

; 1391 :             }
; 1392 :             break;

	jmp	$LN19@HandleMess
$LN15@HandleMess:

; 1393 :         }
; 1394 : 
; 1395 :         case WM_KEYUP:
; 1396 :         {
; 1397 :             // Map this key to a D3DUtil_CameraKeys enum and update the
; 1398 :             // state of m_aKeys[] by removing the KEY_IS_DOWN_MASK mask.
; 1399 :             D3DUtil_CameraKeys mappedKey = MapKey( (UINT)wParam );

	mov	esi, esp
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _mappedKey$2[ebp], eax

; 1400 :             if( mappedKey != CAM_UNKNOWN && (DWORD)mappedKey < 8 )

	cmp	DWORD PTR _mappedKey$2[ebp], 255	; 000000ffH
	je	SHORT $LN14@HandleMess
	cmp	DWORD PTR _mappedKey$2[ebp], 8
	jae	SHORT $LN14@HandleMess

; 1401 :                 m_aKeys[ mappedKey ] &= ~KEY_IS_DOWN_MASK;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _mappedKey$2[ebp]
	movzx	ecx, BYTE PTR [eax+132]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _mappedKey$2[ebp]
	mov	BYTE PTR [edx+132], cl
$LN14@HandleMess:

; 1402 :             break;

	jmp	$LN19@HandleMess
$LN13@HandleMess:

; 1403 :         }
; 1404 : 
; 1405 :         case WM_RBUTTONDOWN:
; 1406 :         case WM_MBUTTONDOWN:
; 1407 :         case WM_LBUTTONDOWN:
; 1408 :         case WM_RBUTTONDBLCLK:
; 1409 :         case WM_MBUTTONDBLCLK:
; 1410 :         case WM_LBUTTONDBLCLK:
; 1411 :         {
; 1412 :             // Compute the drag rectangle in screen coord.
; 1413 :             POINT ptCursor = { (short)LOWORD(lParam), (short)HIWORD(lParam) };

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _ptCursor$1[ebp], ecx
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _ptCursor$1[ebp+4], ecx

; 1414 : 
; 1415 :             // Update member var state
; 1416 :             if( ( uMsg == WM_LBUTTONDOWN || uMsg == WM_LBUTTONDBLCLK ) && PtInRect( &m_rcDrag, ptCursor ) )

	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN11@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	jne	SHORT $LN12@HandleMess
$LN11@HandleMess:
	mov	esi, esp
	mov	eax, DWORD PTR _ptCursor$1[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ptCursor$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 227				; 000000e3H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN12@HandleMess

; 1417 :                 { m_bMouseLButtonDown = true; m_nCurrentButtonMask |= MOUSE_LEFT_BUTTON; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+151]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+151], ecx
$LN12@HandleMess:

; 1418 :             if( ( uMsg == WM_MBUTTONDOWN || uMsg == WM_MBUTTONDBLCLK ) && PtInRect( &m_rcDrag, ptCursor ) )

	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN9@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 521		; 00000209H
	jne	SHORT $LN10@HandleMess
$LN9@HandleMess:
	mov	esi, esp
	mov	eax, DWORD PTR _ptCursor$1[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ptCursor$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 227				; 000000e3H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN10@HandleMess

; 1419 :                 { m_bMouseMButtonDown = true; m_nCurrentButtonMask |= MOUSE_MIDDLE_BUTTON; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+151]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+151], ecx
$LN10@HandleMess:

; 1420 :             if( ( uMsg == WM_RBUTTONDOWN || uMsg == WM_RBUTTONDBLCLK ) && PtInRect( &m_rcDrag, ptCursor ) )

	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	je	SHORT $LN7@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 518		; 00000206H
	jne	SHORT $LN8@HandleMess
$LN7@HandleMess:
	mov	esi, esp
	mov	eax, DWORD PTR _ptCursor$1[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ptCursor$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 227				; 000000e3H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN8@HandleMess

; 1421 :                 { m_bMouseRButtonDown = true; m_nCurrentButtonMask |= MOUSE_RIGHT_BUTTON; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+150], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+151]
	or	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+151], ecx
$LN8@HandleMess:

; 1422 : 
; 1423 :             // Capture the mouse, so if the mouse button is 
; 1424 :             // released outside the window, we'll get the WM_LBUTTONUP message
; 1425 :             SetCapture(hWnd);

	mov	esi, esp
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1426 :             GetCursorPos( &m_ptLastMousePosition );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 140				; 0000008cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1427 :             return TRUE;

	mov	eax, 1
	jmp	$LN21@HandleMess
$LN6@HandleMess:

; 1428 :         }
; 1429 : 
; 1430 :         case WM_RBUTTONUP: 
; 1431 :         case WM_MBUTTONUP: 
; 1432 :         case WM_LBUTTONUP:   
; 1433 :         {
; 1434 :             // Update member var state
; 1435 :             if( uMsg == WM_LBUTTONUP ) { m_bMouseLButtonDown = false; m_nCurrentButtonMask &= ~MOUSE_LEFT_BUTTON; }

	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	jne	SHORT $LN5@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+151]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+151], ecx
$LN5@HandleMess:

; 1436 :             if( uMsg == WM_MBUTTONUP ) { m_bMouseMButtonDown = false; m_nCurrentButtonMask &= ~MOUSE_MIDDLE_BUTTON; }

	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	jne	SHORT $LN4@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+151]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+151], ecx
$LN4@HandleMess:

; 1437 :             if( uMsg == WM_RBUTTONUP ) { m_bMouseRButtonDown = false; m_nCurrentButtonMask &= ~MOUSE_RIGHT_BUTTON; }

	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	jne	SHORT $LN3@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+150], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+151]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+151], ecx
$LN3@HandleMess:

; 1438 : 
; 1439 :             // Release the capture if no mouse buttons down
; 1440 :             if( !m_bMouseLButtonDown  && 
; 1441 :                 !m_bMouseRButtonDown &&
; 1442 :                 !m_bMouseMButtonDown )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	test	ecx, ecx
	jne	SHORT $LN2@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	jne	SHORT $LN2@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+149]
	test	ecx, ecx
	jne	SHORT $LN2@HandleMess

; 1443 :             {
; 1444 :                 ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@HandleMess:

; 1445 :             }
; 1446 :             break;

	jmp	SHORT $LN19@HandleMess
$LN1@HandleMess:

; 1447 :         }
; 1448 : 
; 1449 :         case WM_MOUSEWHEEL: 
; 1450 :             // Update member var state
; 1451 :             m_nMouseWheelDelta = (short)HIWORD(wParam) / 120;

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	cwde
	cdq
	mov	ecx, 120				; 00000078H
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+155], eax
$LN19@HandleMess:

; 1452 :             break;
; 1453 :     }
; 1454 : 
; 1455 :     return FALSE;

	xor	eax, eax
$LN21@HandleMess:

; 1456 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@HandleMess
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN27@HandleMess:
	DD	1
	DD	$LN26@HandleMess
$LN26@HandleMess:
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN25@HandleMess
$LN25@HandleMess:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
	npad	3
$LN28@HandleMess:
	DD	$LN6@HandleMess
	DD	$LN13@HandleMess
	DD	$LN1@HandleMess
$LN24@HandleMess:
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	2
?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ENDP	; CBaseCamera::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??0CBaseCamera@@QAE@XZ
_TEXT	SEGMENT
$T1 = -356						; size = 12
$T2 = -336						; size = 12
$T3 = -316						; size = 12
$T4 = -296						; size = 12
$T5 = -276						; size = 8
$T6 = -260						; size = 8
_vLookatPt$ = -52					; size = 12
_vEyePt$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CBaseCamera@@QAE@XZ PROC				; CBaseCamera::CBaseCamera, COMDAT
; _this$ = ecx

; 1273 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBaseCamera@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 159				; 0000009fH
	call	??0D3DXVECTOR2@@QAE@XZ			; D3DXVECTOR2::D3DXVECTOR2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 171				; 000000abH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 183				; 000000b7H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 195				; 000000c3H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 207				; 000000cfH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 243				; 000000f3H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 276				; 00000114H
	call	??0D3DXVECTOR2@@QAE@XZ			; D3DXVECTOR2::D3DXVECTOR2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1274 :     ZeroMemory( m_aKeys, sizeof(BYTE)*CAM_MAX_KEYS );

	push	8
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 132				; 00000084H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1275 : 
; 1276 :     // Set attributes for the view matrix
; 1277 :     D3DXVECTOR3 vEyePt    = D3DXVECTOR3(0.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vEyePt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1278 :     D3DXVECTOR3 vLookatPt = D3DXVECTOR3(0.0f,0.0f,1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vLookatPt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1279 : 
; 1280 :     // Setup the view matrix
; 1281 :     SetViewParams( &vEyePt, &vLookatPt );

	lea	eax, DWORD PTR _vLookatPt$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vEyePt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetViewParams@CBaseCamera@@UAEXPAUD3DXVECTOR3@@0@Z ; CBaseCamera::SetViewParams

; 1282 : 
; 1283 :     // Setup the projection matrix
; 1284 :     SetProjParams( D3DX_PI/4, 1.0f, 1.0f, 1000.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f490fdb
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetProjParams@CBaseCamera@@UAEXMMMM@Z	; CBaseCamera::SetProjParams

; 1285 : 
; 1286 :     GetCursorPos( &m_ptLastMousePosition );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 140				; 0000008cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1287 :     m_bMouseLButtonDown = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+148], 0

; 1288 :     m_bMouseMButtonDown = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+149], 0

; 1289 :     m_bMouseRButtonDown = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+150], 0

; 1290 :     m_nCurrentButtonMask = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+151], 0

; 1291 :     m_nMouseWheelDelta = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+155], 0

; 1292 : 
; 1293 :     m_fCameraYawAngle = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+219], xmm0

; 1294 :     m_fCameraPitchAngle = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+223], xmm0

; 1295 : 
; 1296 :     SetRect( &m_rcDrag, LONG_MIN, LONG_MIN, LONG_MAX, LONG_MAX );

	mov	esi, esp
	push	2147483647				; 7fffffffH
	push	2147483647				; 7fffffffH
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 227				; 000000e3H
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1297 :     m_vVelocity     = D3DXVECTOR3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 243				; 000000f3H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1298 :     m_bMovementDrag = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+255], 0

; 1299 :     m_vVelocityDrag = D3DXVECTOR3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1300 :     m_fDragTimer    = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+268], xmm0

; 1301 :     m_fTotalDragTimeToZero = 0.25;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [eax+272], xmm0

; 1302 :     m_vRotVelocity = D3DXVECTOR2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0D3DXVECTOR2@@QAE@MM@Z		; D3DXVECTOR2::D3DXVECTOR2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+276], ecx
	mov	DWORD PTR [eax+280], edx

; 1303 : 
; 1304 :     m_fRotationScaler = 0.01f;           

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [eax+300], xmm0

; 1305 :     m_fMoveScaler = 5.0f;           

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [eax+304], xmm0

; 1306 : 
; 1307 :     m_bInvertPitch = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+308], 0

; 1308 :     m_bEnableYAxisMovement = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+310], 1

; 1309 :     m_bEnablePositionMovement = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+309], 1

; 1310 : 
; 1311 :     m_vMouseDelta   = D3DXVECTOR2(0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0D3DXVECTOR2@@QAE@MM@Z		; D3DXVECTOR2::D3DXVECTOR2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+159], ecx
	mov	DWORD PTR [eax+163], edx

; 1312 :     m_fFramesToSmoothMouseData = 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+167], xmm0

; 1313 : 
; 1314 :     m_bClipToBoundary = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+311], 0

; 1315 :     m_vMinBoundary = D3DXVECTOR3(-1,-1,-1);

	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1316 :     m_vMaxBoundary = D3DXVECTOR3(1,1,1);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1317 : 
; 1318 :     m_bResetCursorAfterMove = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+336], 0

; 1319 : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@CBaseCamer
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@CBaseCamer:
	DD	2
	DD	$LN5@CBaseCamer
$LN5@CBaseCamer:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN3@CBaseCamer
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN4@CBaseCamer
$LN4@CBaseCamer:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	0
$LN3@CBaseCamer:
	DB	118					; 00000076H
	DB	69					; 00000045H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	0
??0CBaseCamera@@QAE@XZ ENDP				; CBaseCamera::CBaseCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?ScreenToVector@CD3DArcBall@@IAE?AUD3DXVECTOR3@@MM@Z
_TEXT	SEGMENT
tv176 = -268						; size = 4
_scale$1 = -68						; size = 4
_mag$ = -56						; size = 4
_z$ = -44						; size = 4
_y$ = -32						; size = 4
_x$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fScreenPtX$ = 12					; size = 4
_fScreenPtY$ = 16					; size = 4
?ScreenToVector@CD3DArcBall@@IAE?AUD3DXVECTOR3@@MM@Z PROC ; CD3DArcBall::ScreenToVector, COMDAT
; _this$ = ecx

; 1119 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1120 :     // Scale to screen
; 1121 :     FLOAT x   = -(fScreenPtX - m_Offset.x - m_nWidth/2)  / (m_fRadius*m_nWidth/2);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+192]
	movss	xmm1, DWORD PTR _fScreenPtX$[ebp]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+200]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	subss	xmm1, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+216]
	divss	xmm0, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	movss	DWORD PTR _x$[ebp], xmm1

; 1122 :     FLOAT y   =  (fScreenPtY - m_Offset.y - m_nHeight/2) / (m_fRadius*m_nHeight/2);

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+196]
	movss	xmm1, DWORD PTR _fScreenPtY$[ebp]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+204]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+204]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+216]
	divss	xmm0, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	movss	DWORD PTR _y$[ebp], xmm1

; 1123 : 
; 1124 :     FLOAT z   = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _z$[ebp], xmm0

; 1125 :     FLOAT mag = x*x + y*y;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _mag$[ebp], xmm0

; 1126 : 
; 1127 :     if( mag > 1.0f )

	movss	xmm0, DWORD PTR _mag$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN2@ScreenToVe

; 1128 :     {
; 1129 :         FLOAT scale = 1.0f/sqrtf(mag);

	push	ecx
	movss	xmm0, DWORD PTR _mag$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR tv176[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR _scale$1[ebp], xmm0

; 1130 :         x *= scale;

	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _scale$1[ebp]
	movss	DWORD PTR _x$[ebp], xmm0

; 1131 :         y *= scale;

	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _scale$1[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 1132 :     }
; 1133 :     else

	jmp	SHORT $LN1@ScreenToVe
$LN2@ScreenToVe:

; 1134 :         z = sqrtf( 1.0f - mag );

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _mag$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _z$[ebp]
$LN1@ScreenToVe:

; 1135 : 
; 1136 :     // Return vector
; 1137 :     return D3DXVECTOR3( x, y, z );

	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1138 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ScreenToVector@CD3DArcBall@@IAE?AUD3DXVECTOR3@@MM@Z ENDP ; CD3DArcBall::ScreenToVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?QuatFromBallPoints@CD3DArcBall@@SA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_fDot$ = -32						; size = 4
_vPart$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_vFrom$ = 12						; size = 4
_vTo$ = 16						; size = 4
?QuatFromBallPoints@CD3DArcBall@@SA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z PROC ; CD3DArcBall::QuatFromBallPoints, COMDAT

; 1145 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1146 :     D3DXVECTOR3 vPart;

	lea	ecx, DWORD PTR _vPart$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1147 :     float fDot = D3DXVec3Dot(&vFrom, &vTo);

	mov	eax, DWORD PTR _vTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vFrom$[ebp]
	push	ecx
	call	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z	; D3DXVec3Dot
	add	esp, 8
	fstp	DWORD PTR _fDot$[ebp]

; 1148 :     D3DXVec3Cross(&vPart, &vFrom, &vTo);

	mov	eax, DWORD PTR _vTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vFrom$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vPart$[ebp]
	push	edx
	call	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Cross
	add	esp, 12					; 0000000cH

; 1149 : 
; 1150 :     return D3DXQUATERNION(vPart.x, vPart.y, vPart.z, fDot);

	push	ecx
	movss	xmm0, DWORD PTR _fDot$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vPart$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vPart$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vPart$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXQUATERNION@@QAE@MMMM@Z		; D3DXQUATERNION::D3DXQUATERNION
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1151 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@QuatFromBa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@QuatFromBa:
	DD	1
	DD	$LN4@QuatFromBa
$LN4@QuatFromBa:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@QuatFromBa
$LN3@QuatFromBa:
	DB	118					; 00000076H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
?QuatFromBallPoints@CD3DArcBall@@SA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ENDP ; CD3DArcBall::QuatFromBallPoints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetQuatNow@CD3DArcBall@@QAEXUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_q$ = 8							; size = 16
?SetQuatNow@CD3DArcBall@@QAEXUD3DXQUATERNION@@@Z PROC	; CD3DArcBall::SetQuatNow, COMDAT
; _this$ = ecx

; 197  :     void        SetQuatNow( D3DXQUATERNION q ) { m_qNow = q; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _q$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _q$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _q$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetQuatNow@CD3DArcBall@@QAEXUD3DXQUATERNION@@@Z ENDP	; CD3DArcBall::SetQuatNow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?IsBeingDragged@CD3DArcBall@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsBeingDragged@CD3DArcBall@@QBE_NXZ PROC		; CD3DArcBall::IsBeingDragged, COMDAT
; _this$ = ecx

; 195  :     bool        IsBeingDragged() const                      { return m_bDrag; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+256]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBeingDragged@CD3DArcBall@@QBE_NXZ ENDP		; CD3DArcBall::IsBeingDragged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetRotationMatrix@CD3DArcBall@@QAEPBUD3DXMATRIX@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetRotationMatrix@CD3DArcBall@@QAEPBUD3DXMATRIX@@XZ PROC ; CD3DArcBall::GetRotationMatrix, COMDAT
; _this$ = ecx

; 192  :     const D3DXMATRIX* GetRotationMatrix()                   { return D3DXMatrixRotationQuaternion(&m_mRotation, &m_qNow); };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_D3DXMatrixRotationQuaternion@8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRotationMatrix@CD3DArcBall@@QAEPBUD3DXMATRIX@@XZ ENDP ; CD3DArcBall::GetRotationMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv71 = -256						; size = 4
_fDeltaY$1 = -56					; size = 4
_fDeltaX$2 = -44					; size = 4
_iMouseY$ = -32						; size = 4
_iMouseX$ = -20						; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z PROC	; CD3DArcBall::HandleMessages, COMDAT
; _this$ = ecx

; 1201 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1202 :     // Current mouse position
; 1203 :     int iMouseX = (short)LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseX$[ebp], ecx

; 1204 :     int iMouseY = (short)HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$[ebp], ecx

; 1205 : 
; 1206 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 9
	ja	$LN12@HandleMess
	mov	edx, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN16@HandleMess[edx*4]
$LN11@HandleMess:

; 1207 :     {
; 1208 :         case WM_LBUTTONDOWN:
; 1209 :         case WM_LBUTTONDBLCLK:
; 1210 :             SetCapture( hWnd );

	mov	esi, esp
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1211 :             OnBegin( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnBegin@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnBegin

; 1212 :             return TRUE;

	mov	eax, 1
	jmp	$LN14@HandleMess
$LN10@HandleMess:

; 1213 : 
; 1214 :         case WM_LBUTTONUP:
; 1215 :             ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1216 :             OnEnd();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd

; 1217 :             return TRUE;

	mov	eax, 1
	jmp	$LN14@HandleMess
$LN9@HandleMess:

; 1218 : 
; 1219 :         case WM_RBUTTONDOWN:
; 1220 :         case WM_RBUTTONDBLCLK:
; 1221 :         case WM_MBUTTONDOWN:
; 1222 :         case WM_MBUTTONDBLCLK:
; 1223 :             SetCapture( hWnd );

	mov	esi, esp
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1224 :             // Store off the position of the cursor when the button is pressed
; 1225 :             m_ptLastMouse.x = iMouseX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iMouseX$[ebp]
	mov	DWORD PTR [eax+257], ecx

; 1226 :             m_ptLastMouse.y = iMouseY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iMouseY$[ebp]
	mov	DWORD PTR [eax+261], ecx

; 1227 :             return TRUE;

	mov	eax, 1
	jmp	$LN14@HandleMess
$LN8@HandleMess:

; 1228 : 
; 1229 :         case WM_RBUTTONUP:
; 1230 :         case WM_MBUTTONUP:
; 1231 :             ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1232 :             return TRUE;

	mov	eax, 1
	jmp	$LN14@HandleMess
$LN7@HandleMess:

; 1233 : 
; 1234 :         case WM_MOUSEMOVE:
; 1235 :             if( MK_LBUTTON&wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 1
	je	SHORT $LN6@HandleMess

; 1236 :             {
; 1237 :                 OnMove( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnMove@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnMove
	jmp	$LN4@HandleMess
$LN6@HandleMess:

; 1238 :             }
; 1239 :             else if( (MK_RBUTTON&wParam) || (MK_MBUTTON&wParam) )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 2
	jne	SHORT $LN3@HandleMess
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 16					; 00000010H
	je	$LN4@HandleMess
$LN3@HandleMess:

; 1240 :             {
; 1241 :                 // Normalize based on size of window and bounding sphere radius
; 1242 :                 FLOAT fDeltaX = ( m_ptLastMouse.x-iMouseX ) * m_fRadiusTranslation / m_nWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+257]
	sub	ecx, DWORD PTR _iMouseX$[ebp]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+220]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+200]
	divss	xmm0, xmm1
	movss	DWORD PTR _fDeltaX$2[ebp], xmm0

; 1243 :                 FLOAT fDeltaY = ( m_ptLastMouse.y-iMouseY ) * m_fRadiusTranslation / m_nHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+261]
	sub	ecx, DWORD PTR _iMouseY$[ebp]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+220]
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [eax+204]
	divss	xmm0, xmm1
	movss	DWORD PTR _fDeltaY$1[ebp], xmm0

; 1244 : 
; 1245 :                 if( wParam & MK_RBUTTON )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 2
	je	SHORT $LN2@HandleMess

; 1246 :                 {
; 1247 :                     D3DXMatrixTranslation( &m_mTranslationDelta, -2*fDeltaX, 2*fDeltaY, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _fDeltaY$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _fDeltaX$2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 128				; 00000080H
	push	eax
	call	_D3DXMatrixTranslation@16

; 1248 :                     D3DXMatrixMultiply( &m_mTranslation, &m_mTranslation, &m_mTranslationDelta );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 128				; 00000080H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_D3DXMatrixMultiply@12

; 1249 :                 }
; 1250 :                 else  // wParam & MK_MBUTTON

	jmp	SHORT $LN1@HandleMess
$LN2@HandleMess:

; 1251 :                 {
; 1252 :                     D3DXMatrixTranslation( &m_mTranslationDelta, 0.0f, 0.0f, 5*fDeltaY );

	movss	xmm0, DWORD PTR __real@40a00000
	mulss	xmm0, DWORD PTR _fDeltaY$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 128				; 00000080H
	push	eax
	call	_D3DXMatrixTranslation@16

; 1253 :                     D3DXMatrixMultiply( &m_mTranslation, &m_mTranslation, &m_mTranslationDelta );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 128				; 00000080H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	call	_D3DXMatrixMultiply@12
$LN1@HandleMess:

; 1254 :                 }
; 1255 : 
; 1256 :                 // Store mouse coordinate
; 1257 :                 m_ptLastMouse.x = iMouseX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iMouseX$[ebp]
	mov	DWORD PTR [eax+257], ecx

; 1258 :                 m_ptLastMouse.y = iMouseY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iMouseY$[ebp]
	mov	DWORD PTR [eax+261], ecx
$LN4@HandleMess:

; 1259 :             }
; 1260 :             return TRUE;

	mov	eax, 1
	jmp	SHORT $LN14@HandleMess
$LN12@HandleMess:

; 1261 :     }
; 1262 : 
; 1263 :     return FALSE;

	xor	eax, eax
$LN14@HandleMess:

; 1264 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN16@HandleMess:
	DD	$LN7@HandleMess
	DD	$LN11@HandleMess
	DD	$LN10@HandleMess
	DD	$LN11@HandleMess
	DD	$LN9@HandleMess
	DD	$LN8@HandleMess
	DD	$LN9@HandleMess
	DD	$LN9@HandleMess
	DD	$LN8@HandleMess
	DD	$LN9@HandleMess
?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ENDP	; CD3DArcBall::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnEnd@CD3DArcBall@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnEnd@CD3DArcBall@@QAEXXZ PROC				; CD3DArcBall::OnEnd, COMDAT
; _this$ = ecx

; 1190 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1191 :     m_bDrag = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 0

; 1192 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnEnd@CD3DArcBall@@QAEXXZ ENDP				; CD3DArcBall::OnEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnMove@CD3DArcBall@@QAEXHH@Z
_TEXT	SEGMENT
$T1 = -272						; size = 12
$T2 = -252						; size = 16
$T3 = -228						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?OnMove@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::OnMove, COMDAT
; _this$ = ecx

; 1177 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1178 :     if (m_bDrag) 

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+256]
	test	ecx, ecx
	je	$LN1@OnMove

; 1179 :     { 
; 1180 :         m_vCurrentPt = ScreenToVector( (float)nX, (float)nY );

	cvtsi2ss xmm0, DWORD PTR _nY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _nX$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScreenToVector@CD3DArcBall@@IAE?AUD3DXVECTOR3@@MM@Z ; CD3DArcBall::ScreenToVector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 277				; 00000115H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1181 :         m_qNow = m_qDown * QuatFromBallPoints( m_vDownPt, m_vCurrentPt );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 277				; 00000115H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 265				; 00000109H
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	?QuatFromBallPoints@CD3DArcBall@@SA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; CD3DArcBall::QuatFromBallPoints
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	call	??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z	; D3DXQUATERNION::operator*
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
$LN1@OnMove:

; 1182 :     }
; 1183 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?OnMove@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::OnMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnBegin@CD3DArcBall@@QAEXHH@Z
_TEXT	SEGMENT
$T1 = -224						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?OnBegin@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::OnBegin, COMDAT
; _this$ = ecx

; 1158 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1159 :     // Only enter the drag state if the click falls
; 1160 :     // inside the click rectangle.
; 1161 :     if( nX >= m_Offset.x &&
; 1162 :         nX < m_Offset.x + m_nWidth &&
; 1163 :         nY >= m_Offset.y &&
; 1164 :         nY < m_Offset.y + m_nHeight )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nX$[ebp]
	cmp	ecx, DWORD PTR [eax+192]
	jl	$LN1@OnBegin
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+200]
	cmp	DWORD PTR _nX$[ebp], ecx
	jge	$LN1@OnBegin
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nY$[ebp]
	cmp	ecx, DWORD PTR [eax+196]
	jl	$LN1@OnBegin
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+204]
	cmp	DWORD PTR _nY$[ebp], ecx
	jge	SHORT $LN1@OnBegin

; 1165 :     {
; 1166 :         m_bDrag = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 1

; 1167 :         m_qDown = m_qNow;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 1168 :         m_vDownPt = ScreenToVector( (float)nX, (float)nY );

	cvtsi2ss xmm0, DWORD PTR _nY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _nX$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScreenToVector@CD3DArcBall@@IAE?AUD3DXVECTOR3@@MM@Z ; CD3DArcBall::ScreenToVector
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 265				; 00000109H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN1@OnBegin:

; 1169 :     }
; 1170 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?OnBegin@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::OnBegin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetOffset@CD3DArcBall@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?SetOffset@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::SetOffset, COMDAT
; _this$ = ecx

; 181  :     void SetOffset( INT nX, INT nY ) { m_Offset.x = nX; m_Offset.y = nY; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nX$[ebp]
	mov	DWORD PTR [eax+192], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nY$[ebp]
	mov	DWORD PTR [eax+196], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetOffset@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::SetOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetWindow@CD3DArcBall@@QAEXHHM@Z
_TEXT	SEGMENT
$T1 = -216						; size = 8
_this$ = -8						; size = 4
_nWidth$ = 8						; size = 4
_nHeight$ = 12						; size = 4
_fRadius$ = 16						; size = 4
?SetWindow@CD3DArcBall@@QAEXHHM@Z PROC			; CD3DArcBall::SetWindow, COMDAT
; _this$ = ecx

; 180  :     void SetWindow( INT nWidth, INT nHeight, FLOAT fRadius = 0.9f ) { m_nWidth = nWidth; m_nHeight = nHeight; m_fRadius = fRadius; m_vCenter = D3DXVECTOR2(m_nWidth/2.0f,m_nHeight/2.0f); }

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nWidth$[ebp]
	mov	DWORD PTR [eax+200], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nHeight$[ebp]
	mov	DWORD PTR [eax+204], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fRadius$[ebp]
	movss	DWORD PTR [eax+216], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+204]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+200]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXVECTOR2@@QAE@MM@Z		; D3DXVECTOR2::D3DXVECTOR2
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+208], edx
	mov	DWORD PTR [ecx+212], eax
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetWindow@CD3DArcBall@@QAEXHHM@Z ENDP			; CD3DArcBall::SetWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?Reset@CD3DArcBall@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Reset@CD3DArcBall@@QAEXXZ PROC				; CD3DArcBall::Reset, COMDAT
; _this$ = ecx

; 1103 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1104 :     D3DXQuaternionIdentity( &m_qDown );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	call	?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ; D3DXQuaternionIdentity
	add	esp, 4

; 1105 :     D3DXQuaternionIdentity( &m_qNow );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	call	?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ; D3DXQuaternionIdentity
	add	esp, 4

; 1106 :     D3DXMatrixIdentity( &m_mRotation );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1107 :     D3DXMatrixIdentity( &m_mTranslation );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1108 :     D3DXMatrixIdentity( &m_mTranslationDelta );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 128				; 00000080H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1109 :     m_bDrag = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 0

; 1110 :     m_fRadiusTranslation = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+220], xmm0

; 1111 :     m_fRadius = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+216], xmm0

; 1112 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CD3DArcBall@@QAEXXZ ENDP				; CD3DArcBall::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??0CD3DArcBall@@QAE@XZ
_TEXT	SEGMENT
$T1 = -268						; size = 12
$T2 = -248						; size = 12
_rc$ = -36						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CD3DArcBall@@QAE@XZ PROC				; CD3DArcBall::CD3DArcBall, COMDAT
; _this$ = ecx

; 1086 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??0D3DXVECTOR2@@QAE@XZ			; D3DXVECTOR2::D3DXVECTOR2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	call	??0D3DXQUATERNION@@QAE@XZ		; D3DXQUATERNION::D3DXQUATERNION
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0D3DXQUATERNION@@QAE@XZ		; D3DXQUATERNION::D3DXQUATERNION
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 265				; 00000109H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 277				; 00000115H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1087 :     Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CD3DArcBall@@QAEXXZ		; CD3DArcBall::Reset

; 1088 :     m_vDownPt = D3DXVECTOR3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 265				; 00000109H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1089 :     m_vCurrentPt = D3DXVECTOR3(0,0,0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 277				; 00000115H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 1090 :     m_Offset.x = m_Offset.y = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], 0

; 1091 : 
; 1092 :     RECT rc;
; 1093 :     GetClientRect( GetForegroundWindow(), &rc );

	mov	esi, esp
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	edi, esp
	call	DWORD PTR __imp__GetForegroundWindow@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1094 :     SetWindow( rc.right, rc.bottom );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rc$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindow@CD3DArcBall@@QAEXHHM@Z	; CD3DArcBall::SetWindow

; 1095 : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@CD3DArcBal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@CD3DArcBal:
	DD	1
	DD	$LN4@CD3DArcBal
$LN4@CD3DArcBal:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN3@CD3DArcBal
$LN3@CD3DArcBal:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
??0CD3DArcBall@@QAE@XZ ENDP				; CD3DArcBall::CD3DArcBall
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@UDXUTCache_Font@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@UDXUTCache_Font@@@@IAEJH@Z PROC ; CGrowableArray<DXUTCache_Font>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	imul	eax, DWORD PTR _nNewMaxSize$[ebp], 60
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@UDXUTCache_Font@@@@IAEJH@Z ENDP ; CGrowableArray<DXUTCache_Font>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@UDXUTCache_Font@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@UDXUTCache_Font@@@@QAEXXZ PROC ; CGrowableArray<DXUTCache_Font>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Font>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@UDXUTCache_Font@@@@QAEXXZ ENDP ; CGrowableArray<DXUTCache_Font>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Remove@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?Remove@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z PROC ; CGrowableArray<DXUTCache_Font>::Remove, COMDAT
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  :     if( nIndex < 0 || 
; 872  :         nIndex >= m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@Remove
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@Remove
$LN1@Remove:

; 873  :     {
; 874  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN5@Remove
	push	874					; 0000036aH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@Remove:

; 875  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 876  :     }
; 877  : 
; 878  :     // Destruct the element to be removed
; 879  :     m_pData[nIndex].~TYPE();
; 880  : 
; 881  :     // Compact the array and decrease the size
; 882  :     MoveMemory( &m_pData[nIndex], &m_pData[nIndex+1], sizeof(TYPE) * (m_nSize - (nIndex+1)) );

	mov	eax, DWORD PTR _nIndex$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	imul	eax, edx, 60
	push	eax
	mov	ecx, DWORD PTR _nIndex$[ebp]
	add	ecx, 1
	imul	edx, ecx, 60
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	imul	ecx, DWORD PTR _nIndex$[ebp], 60
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH

; 883  :     --m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 884  : 
; 885  :     return S_OK;

	xor	eax, eax
$LN3@Remove:

; 886  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTCache_Font>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@UDXUTCache_Font@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@UDXUTCache_Font@@@@QBEHXZ PROC ; CGrowableArray<DXUTCache_Font>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@UDXUTCache_Font@@@@QBEHXZ ENDP ; CGrowableArray<DXUTCache_Font>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z PROC ; CGrowableArray<DXUTCache_Font>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	imul	eax, DWORD PTR _nIndex$[ebp], 60
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ENDP ; CGrowableArray<DXUTCache_Font>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@UDXUTCache_Font@@@@QAEJABUDXUTCache_Font@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@UDXUTCache_Font@@@@QAEJABUDXUTCache_Font@@@Z PROC ; CGrowableArray<DXUTCache_Font>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Font@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Font>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 60
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	push	60					; 0000003cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 60
	mov	edx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edx]
	add	edi, ecx
	mov	ecx, 15					; 0000000fH
	mov	esi, DWORD PTR _value$[ebp]
	rep movsd

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@UDXUTCache_Font@@@@QAEJABUDXUTCache_Font@@@Z ENDP ; CGrowableArray<DXUTCache_Font>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z PROC ; CGrowableArray<DXUTCache_Font>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Font@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Font>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	imul	eax, DWORD PTR _i$2[ebp], 60
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	push	60					; 0000003cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTCache_Font>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z PROC ; CGrowableArray<DXUTCache_Font>::operator[], COMDAT
; _this$ = ecx

; 25   :     TYPE& operator[]( int nIndex ) { return GetAt( nIndex ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAt@?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::GetAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ENDP ; CGrowableArray<DXUTCache_Font>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ PROC	; CGrowableArray<DXUTCache_Font>::~CGrowableArray<DXUTCache_Font>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@UDXUTCache_Font@@@@QAEXXZ ; CGrowableArray<DXUTCache_Font>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ ENDP	; CGrowableArray<DXUTCache_Font>::~CGrowableArray<DXUTCache_Font>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ PROC	; CGrowableArray<DXUTCache_Font>::CGrowableArray<DXUTCache_Font>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ ENDP	; CGrowableArray<DXUTCache_Font>::CGrowableArray<DXUTCache_Font>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@UDXUTCache_Effect@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@UDXUTCache_Effect@@@@IAEJH@Z PROC ; CGrowableArray<DXUTCache_Effect>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	imul	eax, DWORD PTR _nNewMaxSize$[ebp], 276
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@UDXUTCache_Effect@@@@IAEJH@Z ENDP ; CGrowableArray<DXUTCache_Effect>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@UDXUTCache_Effect@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@UDXUTCache_Effect@@@@QAEXXZ PROC ; CGrowableArray<DXUTCache_Effect>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Effect>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@UDXUTCache_Effect@@@@QAEXXZ ENDP ; CGrowableArray<DXUTCache_Effect>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Remove@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?Remove@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z PROC ; CGrowableArray<DXUTCache_Effect>::Remove, COMDAT
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  :     if( nIndex < 0 || 
; 872  :         nIndex >= m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@Remove
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@Remove
$LN1@Remove:

; 873  :     {
; 874  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN5@Remove
	push	874					; 0000036aH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@Remove:

; 875  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 876  :     }
; 877  : 
; 878  :     // Destruct the element to be removed
; 879  :     m_pData[nIndex].~TYPE();
; 880  : 
; 881  :     // Compact the array and decrease the size
; 882  :     MoveMemory( &m_pData[nIndex], &m_pData[nIndex+1], sizeof(TYPE) * (m_nSize - (nIndex+1)) );

	mov	eax, DWORD PTR _nIndex$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	imul	eax, edx, 276
	push	eax
	mov	ecx, DWORD PTR _nIndex$[ebp]
	add	ecx, 1
	imul	edx, ecx, 276
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	imul	ecx, DWORD PTR _nIndex$[ebp], 276
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH

; 883  :     --m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 884  : 
; 885  :     return S_OK;

	xor	eax, eax
$LN3@Remove:

; 886  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTCache_Effect>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ PROC ; CGrowableArray<DXUTCache_Effect>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ ENDP ; CGrowableArray<DXUTCache_Effect>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z PROC ; CGrowableArray<DXUTCache_Effect>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	imul	eax, DWORD PTR _nIndex$[ebp], 276
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ENDP ; CGrowableArray<DXUTCache_Effect>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJABUDXUTCache_Effect@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJABUDXUTCache_Effect@@@Z PROC ; CGrowableArray<DXUTCache_Effect>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Effect@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Effect>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 276
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	push	276					; 00000114H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 276
	mov	edx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edx]
	add	edi, ecx
	mov	ecx, 69					; 00000045H
	mov	esi, DWORD PTR _value$[ebp]
	rep movsd

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJABUDXUTCache_Effect@@@Z ENDP ; CGrowableArray<DXUTCache_Effect>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z PROC ; CGrowableArray<DXUTCache_Effect>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Effect@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Effect>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	imul	eax, DWORD PTR _i$2[ebp], 276
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	push	276					; 00000114H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTCache_Effect>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z PROC ; CGrowableArray<DXUTCache_Effect>::operator[], COMDAT
; _this$ = ecx

; 25   :     TYPE& operator[]( int nIndex ) { return GetAt( nIndex ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAt@?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::GetAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ENDP ; CGrowableArray<DXUTCache_Effect>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ PROC	; CGrowableArray<DXUTCache_Effect>::~CGrowableArray<DXUTCache_Effect>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@UDXUTCache_Effect@@@@QAEXXZ ; CGrowableArray<DXUTCache_Effect>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ ENDP	; CGrowableArray<DXUTCache_Effect>::~CGrowableArray<DXUTCache_Effect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ PROC	; CGrowableArray<DXUTCache_Effect>::CGrowableArray<DXUTCache_Effect>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ ENDP	; CGrowableArray<DXUTCache_Effect>::CGrowableArray<DXUTCache_Effect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@UDXUTCache_Texture@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@UDXUTCache_Texture@@@@IAEJH@Z PROC ; CGrowableArray<DXUTCache_Texture>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	imul	eax, DWORD PTR _nNewMaxSize$[ebp], 304
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@UDXUTCache_Texture@@@@IAEJH@Z ENDP ; CGrowableArray<DXUTCache_Texture>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@UDXUTCache_Texture@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@UDXUTCache_Texture@@@@QAEXXZ PROC ; CGrowableArray<DXUTCache_Texture>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Texture>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@UDXUTCache_Texture@@@@QAEXXZ ENDP ; CGrowableArray<DXUTCache_Texture>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Remove@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?Remove@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z PROC ; CGrowableArray<DXUTCache_Texture>::Remove, COMDAT
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  :     if( nIndex < 0 || 
; 872  :         nIndex >= m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@Remove
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@Remove
$LN1@Remove:

; 873  :     {
; 874  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN5@Remove
	push	874					; 0000036aH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@Remove:

; 875  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 876  :     }
; 877  : 
; 878  :     // Destruct the element to be removed
; 879  :     m_pData[nIndex].~TYPE();
; 880  : 
; 881  :     // Compact the array and decrease the size
; 882  :     MoveMemory( &m_pData[nIndex], &m_pData[nIndex+1], sizeof(TYPE) * (m_nSize - (nIndex+1)) );

	mov	eax, DWORD PTR _nIndex$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	imul	eax, edx, 304
	push	eax
	mov	ecx, DWORD PTR _nIndex$[ebp]
	add	ecx, 1
	imul	edx, ecx, 304
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	imul	ecx, DWORD PTR _nIndex$[ebp], 304
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH

; 883  :     --m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 884  : 
; 885  :     return S_OK;

	xor	eax, eax
$LN3@Remove:

; 886  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTCache_Texture>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ PROC ; CGrowableArray<DXUTCache_Texture>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ENDP ; CGrowableArray<DXUTCache_Texture>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z PROC ; CGrowableArray<DXUTCache_Texture>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	imul	eax, DWORD PTR _nIndex$[ebp], 304
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ENDP ; CGrowableArray<DXUTCache_Texture>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z PROC ; CGrowableArray<DXUTCache_Texture>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Texture@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Texture>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 304
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	push	304					; 00000130H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 304
	mov	edx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edx]
	add	edi, ecx
	mov	ecx, 76					; 0000004cH
	mov	esi, DWORD PTR _value$[ebp]
	rep movsd

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z ENDP ; CGrowableArray<DXUTCache_Texture>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z PROC ; CGrowableArray<DXUTCache_Texture>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@UDXUTCache_Texture@@@@IAEJH@Z ; CGrowableArray<DXUTCache_Texture>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	imul	eax, DWORD PTR _i$2[ebp], 304
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	push	304					; 00000130H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTCache_Texture>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z PROC ; CGrowableArray<DXUTCache_Texture>::operator[], COMDAT
; _this$ = ecx

; 25   :     TYPE& operator[]( int nIndex ) { return GetAt( nIndex ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAt@?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::GetAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ENDP ; CGrowableArray<DXUTCache_Texture>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ PROC	; CGrowableArray<DXUTCache_Texture>::~CGrowableArray<DXUTCache_Texture>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@UDXUTCache_Texture@@@@QAEXXZ ; CGrowableArray<DXUTCache_Texture>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ ENDP	; CGrowableArray<DXUTCache_Texture>::~CGrowableArray<DXUTCache_Texture>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ PROC	; CGrowableArray<DXUTCache_Texture>::CGrowableArray<DXUTCache_Texture>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ ENDP	; CGrowableArray<DXUTCache_Texture>::CGrowableArray<DXUTCache_Texture>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0CDXUTResourceCache@@IAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CDXUTResourceCache@@IAE@XZ PROC			; CDXUTResourceCache::CDXUTResourceCache, COMDAT
; _this$ = ecx

; 161  :     CDXUTResourceCache() { }

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDXUTResourceCache@@IAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ ; CGrowableArray<DXUTCache_Texture>::CGrowableArray<DXUTCache_Texture>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ ; CGrowableArray<DXUTCache_Effect>::CGrowableArray<DXUTCache_Effect>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ ; CGrowableArray<DXUTCache_Font>::CGrowableArray<DXUTCache_Font>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDXUTResourceCache@@IAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ ; CGrowableArray<DXUTCache_Texture>::~CGrowableArray<DXUTCache_Texture>
__unwindfunclet$??0CDXUTResourceCache@@IAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ ; CGrowableArray<DXUTCache_Effect>::~CGrowableArray<DXUTCache_Effect>
__ehhandler$??0CDXUTResourceCache@@IAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDXUTResourceCache@@IAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDXUTResourceCache@@IAE@XZ ENDP			; CDXUTResourceCache::CDXUTResourceCache
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ PROC ; DXUTGetGlobalResourceCache, COMDAT

; 16   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 17   :     // Using an accessor function gives control of the construction order
; 18   :     static CDXUTResourceCache cache;

	mov	eax, DWORD PTR ?$S1@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4IA
	and	eax, 1
	jne	SHORT $LN1@DXUTGetGlo
	mov	eax, DWORD PTR ?$S1@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4IA
	or	eax, 1
	mov	DWORD PTR ?$S1@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4IA, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?cache@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4V2@A
	call	??0CDXUTResourceCache@@IAE@XZ		; CDXUTResourceCache::CDXUTResourceCache
	push	OFFSET ??__Fcache@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@YAXXZ ; `DXUTGetGlobalResourceCache'::`2'::`dynamic atexit destructor for 'cache''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN1@DXUTGetGlo:

; 19   :     return cache;

	mov	eax, OFFSET ?cache@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4V2@A

; 20   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ$0:
	mov	eax, DWORD PTR ?$S1@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?1??DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ@4IA, eax
	ret	0
__ehhandler$?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DXUTGetGlobalResourceCache@@YAAAVCDXUTResourceCache@@XZ ENDP ; DXUTGetGlobalResourceCache
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnDestroyDevice@CDXUTResourceCache@@QAEJXZ
_TEXT	SEGMENT
tv187 = -244						; size = 4
tv153 = -244						; size = 4
tv87 = -244						; size = 4
_i$1 = -44						; size = 4
_i$2 = -32						; size = 4
_i$3 = -20						; size = 4
_this$ = -8						; size = 4
?OnDestroyDevice@CDXUTResourceCache@@QAEJXZ PROC	; CDXUTResourceCache::OnDestroyDevice, COMDAT
; _this$ = ecx

; 1062 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1063 :     // Release all resources
; 1064 :     for( int i = m_EffectCache.GetSize() - 1; i >= 0; --i )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ ; CGrowableArray<DXUTCache_Effect>::GetSize
	sub	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN12@OnDestroyD
$LN11@OnDestroyD:
	mov	eax, DWORD PTR _i$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN12@OnDestroyD:
	cmp	DWORD PTR _i$3[ebp], 0
	jl	SHORT $LN10@OnDestroyD

; 1065 :     {
; 1066 :         SAFE_RELEASE( m_EffectCache[i].pEffect );

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::operator[]
	cmp	DWORD PTR [eax+272], 0
	je	SHORT $LN9@OnDestroyD
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::operator[]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR tv87[ebp], ecx
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::operator[]
	mov	DWORD PTR [eax+272], 0
$LN9@OnDestroyD:

; 1067 :         m_EffectCache.Remove( i );

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Remove@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Effect>::Remove

; 1068 :     }

	jmp	$LN11@OnDestroyD
$LN10@OnDestroyD:

; 1069 :     for( int i = m_FontCache.GetSize() - 1; i >= 0; --i )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?GetSize@?$CGrowableArray@UDXUTCache_Font@@@@QBEHXZ ; CGrowableArray<DXUTCache_Font>::GetSize
	sub	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN8@OnDestroyD
$LN7@OnDestroyD:
	mov	eax, DWORD PTR _i$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN8@OnDestroyD:
	cmp	DWORD PTR _i$2[ebp], 0
	jl	SHORT $LN6@OnDestroyD

; 1070 :     {
; 1071 :         SAFE_RELEASE( m_FontCache[i].pFont );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::operator[]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN5@OnDestroyD
	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::operator[]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR tv153[ebp], ecx
	mov	edx, DWORD PTR tv153[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv153[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::operator[]
	mov	DWORD PTR [eax+56], 0
$LN5@OnDestroyD:

; 1072 :         m_FontCache.Remove( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Remove@?$CGrowableArray@UDXUTCache_Font@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Font>::Remove

; 1073 :     }

	jmp	SHORT $LN7@OnDestroyD
$LN6@OnDestroyD:

; 1074 :     for( int i = m_TextureCache.GetSize() - 1; i >= 0; --i )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
	sub	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN4@OnDestroyD
$LN3@OnDestroyD:
	mov	eax, DWORD PTR _i$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@OnDestroyD:
	cmp	DWORD PTR _i$1[ebp], 0
	jl	SHORT $LN2@OnDestroyD

; 1075 :     {
; 1076 :         SAFE_RELEASE( m_TextureCache[i].pTexture );

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	cmp	DWORD PTR [eax+300], 0
	je	SHORT $LN1@OnDestroyD
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	ecx, DWORD PTR [eax+300]
	mov	DWORD PTR tv187[ebp], ecx
	mov	edx, DWORD PTR tv187[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv187[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	DWORD PTR [eax+300], 0
$LN1@OnDestroyD:

; 1077 :         m_TextureCache.Remove( i );

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Texture>::Remove

; 1078 :     }

	jmp	SHORT $LN3@OnDestroyD
$LN2@OnDestroyD:

; 1079 : 
; 1080 :     return S_OK;

	xor	eax, eax

; 1081 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnDestroyDevice@CDXUTResourceCache@@QAEJXZ ENDP	; CDXUTResourceCache::OnDestroyDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnLostDevice@CDXUTResourceCache@@QAEJXZ
_TEXT	SEGMENT
tv155 = -244						; size = 4
tv91 = -244						; size = 4
tv76 = -244						; size = 4
_i$1 = -44						; size = 4
_i$2 = -32						; size = 4
_i$3 = -20						; size = 4
_this$ = -8						; size = 4
?OnLostDevice@CDXUTResourceCache@@QAEJXZ PROC		; CDXUTResourceCache::OnLostDevice, COMDAT
; _this$ = ecx

; 1041 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1042 :     // Call OnLostDevice on all effect and font objects
; 1043 :     for( int i = 0; i < m_EffectCache.GetSize(); ++i )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN11@OnLostDevi
$LN10@OnLostDevi:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN11@OnLostDevi:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ ; CGrowableArray<DXUTCache_Effect>::GetSize
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN9@OnLostDevi

; 1044 :         m_EffectCache[i].pEffect->OnLostDevice();

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::operator[]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR tv76[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+276]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN10@OnLostDevi
$LN9@OnLostDevi:

; 1045 :     for( int i = 0; i < m_FontCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN8@OnLostDevi
$LN7@OnLostDevi:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN8@OnLostDevi:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?GetSize@?$CGrowableArray@UDXUTCache_Font@@@@QBEHXZ ; CGrowableArray<DXUTCache_Font>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN6@OnLostDevi

; 1046 :         m_FontCache[i].pFont->OnLostDevice();

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::operator[]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR tv91[ebp], ecx
	mov	edx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN7@OnLostDevi
$LN6@OnLostDevi:

; 1047 : 
; 1048 :     // Release all the default pool textures
; 1049 :     for( int i = m_TextureCache.GetSize() - 1; i >= 0; --i )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
	sub	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN5@OnLostDevi
$LN4@OnLostDevi:
	mov	eax, DWORD PTR _i$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@OnLostDevi:
	cmp	DWORD PTR _i$1[ebp], 0
	jl	$LN3@OnLostDevi

; 1050 :         if( m_TextureCache[i].Pool == D3DPOOL_DEFAULT )

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	cmp	DWORD PTR [eax+292], 0
	jne	SHORT $LN2@OnLostDevi

; 1051 :         {
; 1052 :             SAFE_RELEASE( m_TextureCache[i].pTexture );

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	cmp	DWORD PTR [eax+300], 0
	je	SHORT $LN1@OnLostDevi
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	ecx, DWORD PTR [eax+300]
	mov	DWORD PTR tv155[ebp], ecx
	mov	edx, DWORD PTR tv155[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv155[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	DWORD PTR [eax+300], 0
$LN1@OnLostDevi:

; 1053 :             m_TextureCache.Remove( i );  // Remove the entry

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJH@Z ; CGrowableArray<DXUTCache_Texture>::Remove
$LN2@OnLostDevi:

; 1054 :         }

	jmp	$LN4@OnLostDevi
$LN3@OnLostDevi:

; 1055 : 
; 1056 :     return S_OK;

	xor	eax, eax

; 1057 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnLostDevice@CDXUTResourceCache@@QAEJXZ ENDP		; CDXUTResourceCache::OnLostDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnResetDevice@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv76 = -232						; size = 4
_i$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
?OnResetDevice@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@@Z PROC ; CDXUTResourceCache::OnResetDevice, COMDAT
; _this$ = ecx

; 1027 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1028 :     // Call OnResetDevice on all effect and font objects
; 1029 :     for( int i = 0; i < m_EffectCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@OnResetDev
$LN5@OnResetDev:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@OnResetDev:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ ; CGrowableArray<DXUTCache_Effect>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN4@OnResetDev

; 1030 :         m_EffectCache[i].pEffect->OnResetDevice();

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::operator[]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR tv76[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+280]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@OnResetDev
$LN4@OnResetDev:

; 1031 :     for( int i = 0; i < m_FontCache.GetSize(); ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@OnResetDev
$LN2@OnResetDev:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@OnResetDev:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?GetSize@?$CGrowableArray@UDXUTCache_Font@@@@QBEHXZ ; CGrowableArray<DXUTCache_Font>::GetSize
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN1@OnResetDev

; 1032 :         m_FontCache[i].pFont->OnResetDevice();

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::operator[]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR tv91[ebp], ecx
	mov	edx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+68]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@OnResetDev
$LN1@OnResetDev:

; 1033 : 
; 1034 : 
; 1035 :     return S_OK;

	xor	eax, eax

; 1036 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?OnResetDevice@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@@Z ENDP ; CDXUTResourceCache::OnResetDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?OnCreateDevice@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
?OnCreateDevice@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@@Z PROC ; CDXUTResourceCache::OnCreateDevice, COMDAT
; _this$ = ecx

; 1020 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1021 :     return S_OK;

	xor	eax, eax

; 1022 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?OnCreateDevice@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@@Z ENDP ; CDXUTResourceCache::OnCreateDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateEffectFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPBU_D3DXMACRO@@PAUID3DXInclude@@KPAUID3DXEffectPool@@PAPAUID3DXEffect@@PAPAUID3DXBuffer@@@Z
_TEXT	SEGMENT
_NewEntry$ = -332					; size = 276
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_hSrcModule$ = 12					; size = 4
_pSrcResource$ = 16					; size = 4
_pDefines$ = 20						; size = 4
_pInclude$ = 24						; size = 4
_Flags$ = 28						; size = 4
_pPool$ = 32						; size = 4
_ppEffect$ = 36						; size = 4
_ppCompilationErrors$ = 40				; size = 4
?CreateEffectFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPBU_D3DXMACRO@@PAUID3DXInclude@@KPAUID3DXEffectPool@@PAPAUID3DXEffect@@PAPAUID3DXBuffer@@@Z PROC ; CDXUTResourceCache::CreateEffectFromResource, COMDAT
; _this$ = ecx

; 974  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 975  :     // Search the cache for a matching entry.
; 976  :     for( int i = 0; i < m_EffectCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateEffe
$LN4@CreateEffe:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateEffe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ ; CGrowableArray<DXUTCache_Effect>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@CreateEffe

; 977  :     {
; 978  :         DXUTCache_Effect &Entry = m_EffectCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 979  : 
; 980  :         if( Entry.Location == DXUTCACHE_LOCATION_RESOURCE &&
; 981  :             Entry.hSrcModule == hSrcModule &&
; 982  :             !lstrcmpA( Entry.wszSource, pSrcResource ) &&
; 983  :             Entry.dwFlags == Flags )

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN2@CreateEffe
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+264]
	cmp	ecx, DWORD PTR _hSrcModule$[ebp]
	jne	SHORT $LN2@CreateEffe
	mov	esi, esp
	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@CreateEffe
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _Flags$[ebp]
	jne	SHORT $LN2@CreateEffe

; 984  :         {
; 985  :             // A match is found.  Increment the ref coutn and return the ID3DXEffect object.
; 986  :             *ppEffect = Entry.pEffect;

	mov	eax, DWORD PTR _ppEffect$[ebp]
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR [eax], edx

; 987  :             (*ppEffect)->AddRef();

	mov	eax, DWORD PTR _ppEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ppEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 988  :             return S_OK;

	xor	eax, eax
	jmp	$LN6@CreateEffe
$LN2@CreateEffe:

; 989  :         }
; 990  :     }

	jmp	$LN4@CreateEffe
$LN3@CreateEffe:

; 991  : 
; 992  :     HRESULT hr;
; 993  : 
; 994  :     // No matching entry.  Load the resource and create a new entry.
; 995  :     hr = D3DXCreateEffectFromResource( pDevice, hSrcModule, pSrcResource, pDefines, pInclude, Flags,
; 996  :                                        pPool, ppEffect, ppCompilationErrors );

	mov	eax, DWORD PTR _ppCompilationErrors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPool$[ebp]
	push	edx
	mov	eax, DWORD PTR _Flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInclude$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDefines$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hSrcModule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	_D3DXCreateEffectFromResourceA@36
	mov	DWORD PTR _hr$[ebp], eax

; 997  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateEffe

; 998  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@CreateEffe
$LN1@CreateEffe:

; 999  : 
; 1000 :     DXUTCache_Effect NewEntry;
; 1001 :     NewEntry.Location = DXUTCACHE_LOCATION_RESOURCE;

	mov	DWORD PTR _NewEntry$[ebp], 1

; 1002 :     NewEntry.hSrcModule = hSrcModule;

	mov	eax, DWORD PTR _hSrcModule$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+264], eax

; 1003 :     StringCchCopy( NewEntry.wszSource, MAX_PATH, pSrcResource );

	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _NewEntry$[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 1004 :     NewEntry.dwFlags = Flags;

	mov	eax, DWORD PTR _Flags$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+268], eax

; 1005 :     NewEntry.pEffect = *ppEffect;

	mov	eax, DWORD PTR _ppEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _NewEntry$[ebp+272], ecx

; 1006 :     NewEntry.pEffect->AddRef();

	mov	eax, DWORD PTR _NewEntry$[ebp+272]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _NewEntry$[ebp+272]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1007 : 
; 1008 :     m_EffectCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJABUDXUTCache_Effect@@@Z ; CGrowableArray<DXUTCache_Effect>::Add

; 1009 :     return S_OK;

	xor	eax, eax
$LN6@CreateEffe:

; 1010 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateEffe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	2
$LN10@CreateEffe:
	DD	1
	DD	$LN9@CreateEffe
$LN9@CreateEffe:
	DD	-332					; fffffeb4H
	DD	276					; 00000114H
	DD	$LN8@CreateEffe
$LN8@CreateEffe:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateEffectFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPBU_D3DXMACRO@@PAUID3DXInclude@@KPAUID3DXEffectPool@@PAPAUID3DXEffect@@PAPAUID3DXBuffer@@@Z ENDP ; CDXUTResourceCache::CreateEffectFromResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateEffectFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPBU_D3DXMACRO@@PAUID3DXInclude@@KPAUID3DXEffectPool@@PAPAUID3DXEffect@@PAPAUID3DXBuffer@@@Z
_TEXT	SEGMENT
_NewEntry$ = -332					; size = 276
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_pSrcFile$ = 12						; size = 4
_pDefines$ = 16						; size = 4
_pInclude$ = 20						; size = 4
_Flags$ = 24						; size = 4
_pPool$ = 28						; size = 4
_ppEffect$ = 32						; size = 4
_ppCompilationErrors$ = 36				; size = 4
?CreateEffectFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPBU_D3DXMACRO@@PAUID3DXInclude@@KPAUID3DXEffectPool@@PAPAUID3DXEffect@@PAPAUID3DXBuffer@@@Z PROC ; CDXUTResourceCache::CreateEffectFromFile, COMDAT
; _this$ = ecx

; 936  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 937  :     // Search the cache for a matching entry.
; 938  :     for( int i = 0; i < m_EffectCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateEffe
$LN4@CreateEffe:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateEffe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSize@?$CGrowableArray@UDXUTCache_Effect@@@@QBEHXZ ; CGrowableArray<DXUTCache_Effect>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN3@CreateEffe

; 939  :     {
; 940  :         DXUTCache_Effect &Entry = m_EffectCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CGrowableArray@UDXUTCache_Effect@@@@QAEAAUDXUTCache_Effect@@H@Z ; CGrowableArray<DXUTCache_Effect>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 941  : 
; 942  :         if( Entry.Location == DXUTCACHE_LOCATION_FILE &&
; 943  :             !lstrcmpA( Entry.wszSource, pSrcFile ) &&
; 944  :             Entry.dwFlags == Flags )

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@CreateEffe
	mov	esi, esp
	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@CreateEffe
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _Flags$[ebp]
	jne	SHORT $LN2@CreateEffe

; 945  :         {
; 946  :             // A match is found.  Increment the ref coutn and return the ID3DXEffect object.
; 947  :             *ppEffect = Entry.pEffect;

	mov	eax, DWORD PTR _ppEffect$[ebp]
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR [eax], edx

; 948  :             (*ppEffect)->AddRef();

	mov	eax, DWORD PTR _ppEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ppEffect$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 949  :             return S_OK;

	xor	eax, eax
	jmp	$LN6@CreateEffe
$LN2@CreateEffe:

; 950  :         }
; 951  :     }

	jmp	$LN4@CreateEffe
$LN3@CreateEffe:

; 952  : 
; 953  :     HRESULT hr;
; 954  : 
; 955  :     // No matching entry.  Load the resource and create a new entry.
; 956  :     hr = D3DXCreateEffectFromFile( pDevice, pSrcFile, pDefines, pInclude, Flags, pPool, ppEffect, ppCompilationErrors );

	mov	eax, DWORD PTR _ppCompilationErrors$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppEffect$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pPool$[ebp]
	push	edx
	mov	eax, DWORD PTR _Flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInclude$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDefines$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	_D3DXCreateEffectFromFileA@32
	mov	DWORD PTR _hr$[ebp], eax

; 957  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateEffe

; 958  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@CreateEffe
$LN1@CreateEffe:

; 959  : 
; 960  :     DXUTCache_Effect NewEntry;
; 961  :     NewEntry.Location = DXUTCACHE_LOCATION_FILE;

	mov	DWORD PTR _NewEntry$[ebp], 0

; 962  :     StringCchCopy( NewEntry.wszSource, MAX_PATH, pSrcFile );

	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _NewEntry$[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 963  :     NewEntry.dwFlags = Flags;

	mov	eax, DWORD PTR _Flags$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+268], eax

; 964  :     NewEntry.pEffect = *ppEffect;

	mov	eax, DWORD PTR _ppEffect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _NewEntry$[ebp+272], ecx

; 965  :     NewEntry.pEffect->AddRef();

	mov	eax, DWORD PTR _NewEntry$[ebp+272]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _NewEntry$[ebp+272]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 966  : 
; 967  :     m_EffectCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CGrowableArray@UDXUTCache_Effect@@@@QAEJABUDXUTCache_Effect@@@Z ; CGrowableArray<DXUTCache_Effect>::Add

; 968  :     return S_OK;

	xor	eax, eax
$LN6@CreateEffe:

; 969  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateEffe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
	npad	2
$LN10@CreateEffe:
	DD	1
	DD	$LN9@CreateEffe
$LN9@CreateEffe:
	DD	-332					; fffffeb4H
	DD	276					; 00000114H
	DD	$LN8@CreateEffe
$LN8@CreateEffe:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateEffectFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPBU_D3DXMACRO@@PAUID3DXInclude@@KPAUID3DXEffectPool@@PAPAUID3DXEffect@@PAPAUID3DXBuffer@@@Z ENDP ; CDXUTResourceCache::CreateEffectFromFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateFontIndirectA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBU_D3DXFONT_DESCA@@PAPAUID3DXFont@@@Z
_TEXT	SEGMENT
_NewEntry$ = -116					; size = 60
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_pDesc$ = 12						; size = 4
_ppFont$ = 16						; size = 4
?CreateFontIndirectA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBU_D3DXFONT_DESCA@@PAPAUID3DXFont@@@Z PROC ; CDXUTResourceCache::CreateFontIndirectA, COMDAT
; _this$ = ecx

; 891  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 892  :     // Search the cache for a matching entry.
; 893  :     for( int i = 0; i < m_FontCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateFont
$LN4@CreateFont:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateFont:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?GetSize@?$CGrowableArray@UDXUTCache_Font@@@@QBEHXZ ; CGrowableArray<DXUTCache_Font>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@CreateFont

; 894  :     {
; 895  :         DXUTCache_Font &Entry = m_FontCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CGrowableArray@UDXUTCache_Font@@@@QAEAAUDXUTCache_Font@@H@Z ; CGrowableArray<DXUTCache_Font>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 896  : 
; 897  :         if( Entry.Width == pDesc->Width &&
; 898  :             Entry.Height == pDesc->Height &&
; 899  :             Entry.Weight == pDesc->Weight &&
; 900  :             Entry.MipLevels == pDesc->MipLevels &&
; 901  :             Entry.Italic == pDesc->Italic &&
; 902  :             Entry.CharSet == pDesc->CharSet &&
; 903  :             Entry.OutputPrecision == pDesc->OutputPrecision &&
; 904  :             Entry.Quality == pDesc->Quality &&
; 905  :             Entry.PitchAndFamily == pDesc->PitchAndFamily &&
; 906  :             CompareString( LOCALE_USER_DEFAULT, NORM_IGNORECASE,
; 907  :                            Entry.FaceName, -1,
; 908  :                            pDesc->FaceName, -1 ) == CSTR_EQUAL )

	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR _pDesc$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	$LN2@CreateFont
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR _pDesc$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	$LN2@CreateFont
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR _pDesc$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN2@CreateFont
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR _pDesc$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	jne	$LN2@CreateFont
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR _pDesc$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jne	$LN2@CreateFont
	mov	eax, DWORD PTR _Entry$1[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	mov	edx, DWORD PTR _pDesc$[ebp]
	movzx	eax, BYTE PTR [edx+20]
	cmp	ecx, eax
	jne	$LN2@CreateFont
	mov	eax, DWORD PTR _Entry$1[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	mov	edx, DWORD PTR _pDesc$[ebp]
	movzx	eax, BYTE PTR [edx+21]
	cmp	ecx, eax
	jne	SHORT $LN2@CreateFont
	mov	eax, DWORD PTR _Entry$1[ebp]
	movzx	ecx, BYTE PTR [eax+22]
	mov	edx, DWORD PTR _pDesc$[ebp]
	movzx	eax, BYTE PTR [edx+22]
	cmp	ecx, eax
	jne	SHORT $LN2@CreateFont
	mov	eax, DWORD PTR _Entry$1[ebp]
	movzx	ecx, BYTE PTR [eax+23]
	mov	edx, DWORD PTR _pDesc$[ebp]
	movzx	eax, BYTE PTR [edx+23]
	cmp	ecx, eax
	jne	SHORT $LN2@CreateFont
	mov	esi, esp
	push	-1
	mov	eax, DWORD PTR _pDesc$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	push	-1
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	1
	push	1024					; 00000400H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	jne	SHORT $LN2@CreateFont

; 909  :         {
; 910  :             // A match is found.  Increment the reference and return the ID3DXFont object.
; 911  :             Entry.pFont->AddRef();

	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _Entry$1[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 912  :             *ppFont = Entry.pFont;

	mov	eax, DWORD PTR _ppFont$[ebp]
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx

; 913  :             return S_OK;

	xor	eax, eax
	jmp	SHORT $LN6@CreateFont
$LN2@CreateFont:

; 914  :         }
; 915  :     }

	jmp	$LN4@CreateFont
$LN3@CreateFont:

; 916  : 
; 917  :     HRESULT hr;
; 918  : 
; 919  :     // No matching entry.  Load the resource and create a new entry.
; 920  :     hr = D3DXCreateFontIndirect( pDevice, pDesc, ppFont );

	mov	eax, DWORD PTR _ppFont$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	_D3DXCreateFontIndirectA@12
	mov	DWORD PTR _hr$[ebp], eax

; 921  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateFont

; 922  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@CreateFont
$LN1@CreateFont:

; 923  : 
; 924  :     DXUTCache_Font NewEntry;
; 925  :     (D3DXFONT_DESC &)NewEntry = *pDesc;

	mov	ecx, 14					; 0000000eH
	mov	esi, DWORD PTR _pDesc$[ebp]
	lea	edi, DWORD PTR _NewEntry$[ebp]
	rep movsd

; 926  :     NewEntry.pFont = *ppFont;

	mov	eax, DWORD PTR _ppFont$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _NewEntry$[ebp+56], ecx

; 927  :     NewEntry.pFont->AddRef();

	mov	eax, DWORD PTR _NewEntry$[ebp+56]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _NewEntry$[ebp+56]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 928  : 
; 929  :     m_FontCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$CGrowableArray@UDXUTCache_Font@@@@QAEJABUDXUTCache_Font@@@Z ; CGrowableArray<DXUTCache_Font>::Add

; 930  :     return S_OK;

	xor	eax, eax
$LN6@CreateFont:

; 931  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateFont
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN10@CreateFont:
	DD	1
	DD	$LN9@CreateFont
$LN9@CreateFont:
	DD	-116					; ffffff8cH
	DD	60					; 0000003cH
	DD	$LN8@CreateFont
$LN8@CreateFont:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateFontIndirectA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBU_D3DXFONT_DESCA@@PAPAUID3DXFont@@@Z ENDP ; CDXUTResourceCache::CreateFontIndirectA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateFontA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@IIIIHKKKKPBDPAPAUID3DXFont@@@Z
_TEXT	SEGMENT
_Desc$ = -76						; size = 56
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_Height$ = 12						; size = 4
_Width$ = 16						; size = 4
_Weight$ = 20						; size = 4
_MipLevels$ = 24					; size = 4
_Italic$ = 28						; size = 4
_CharSet$ = 32						; size = 4
_OutputPrecision$ = 36					; size = 4
_Quality$ = 40						; size = 4
_PitchAndFamily$ = 44					; size = 4
_pFacename$ = 48					; size = 4
_ppFont$ = 52						; size = 4
?CreateFontA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@IIIIHKKKKPBDPAPAUID3DXFont@@@Z PROC ; CDXUTResourceCache::CreateFontA, COMDAT
; _this$ = ecx

; 871  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 872  :     D3DXFONT_DESC Desc;
; 873  :     
; 874  :     Desc.Height = Height;

	mov	eax, DWORD PTR _Height$[ebp]
	mov	DWORD PTR _Desc$[ebp], eax

; 875  :     Desc.Width = Width;

	mov	eax, DWORD PTR _Width$[ebp]
	mov	DWORD PTR _Desc$[ebp+4], eax

; 876  :     Desc.Weight = Weight;

	mov	eax, DWORD PTR _Weight$[ebp]
	mov	DWORD PTR _Desc$[ebp+8], eax

; 877  :     Desc.MipLevels = MipLevels;

	mov	eax, DWORD PTR _MipLevels$[ebp]
	mov	DWORD PTR _Desc$[ebp+12], eax

; 878  :     Desc.Italic = Italic;

	mov	eax, DWORD PTR _Italic$[ebp]
	mov	DWORD PTR _Desc$[ebp+16], eax

; 879  :     Desc.CharSet = (BYTE)CharSet;

	mov	al, BYTE PTR _CharSet$[ebp]
	mov	BYTE PTR _Desc$[ebp+20], al

; 880  :     Desc.OutputPrecision = (BYTE)OutputPrecision;

	mov	al, BYTE PTR _OutputPrecision$[ebp]
	mov	BYTE PTR _Desc$[ebp+21], al

; 881  :     Desc.Quality = (BYTE)Quality;

	mov	al, BYTE PTR _Quality$[ebp]
	mov	BYTE PTR _Desc$[ebp+22], al

; 882  :     Desc.PitchAndFamily = (BYTE)PitchAndFamily;

	mov	al, BYTE PTR _PitchAndFamily$[ebp]
	mov	BYTE PTR _Desc$[ebp+23], al

; 883  :     StringCchCopy( Desc.FaceName, LF_FACESIZE, pFacename );

	mov	eax, DWORD PTR _pFacename$[ebp]
	push	eax
	push	32					; 00000020H
	lea	ecx, DWORD PTR _Desc$[ebp+24]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 884  : 
; 885  :     return CreateFontIndirect( pDevice, &Desc, ppFont );

	mov	eax, DWORD PTR _ppFont$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Desc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateFontIndirectA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBU_D3DXFONT_DESCA@@PAPAUID3DXFont@@@Z ; CDXUTResourceCache::CreateFontIndirectA

; 886  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@CreateFont
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
	npad	1
$LN5@CreateFont:
	DD	1
	DD	$LN4@CreateFont
$LN4@CreateFont:
	DD	-76					; ffffffb4H
	DD	56					; 00000038H
	DD	$LN3@CreateFont
$LN3@CreateFont:
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
?CreateFontA@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@IIIIHKKKKPBDPAPAUID3DXFont@@@Z ENDP ; CDXUTResourceCache::CreateFontA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateVolumeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z
_TEXT	SEGMENT
_NewEntry$ = -360					; size = 304
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_hSrcModule$ = 12					; size = 4
_pSrcResource$ = 16					; size = 4
_Width$ = 20						; size = 4
_Height$ = 24						; size = 4
_Depth$ = 28						; size = 4
_MipLevels$ = 32					; size = 4
_Usage$ = 36						; size = 4
_Format$ = 40						; size = 4
_Pool$ = 44						; size = 4
_Filter$ = 48						; size = 4
_MipFilter$ = 52					; size = 4
_ColorKey$ = 56						; size = 4
_pSrcInfo$ = 60						; size = 4
_pPalette$ = 64						; size = 4
_ppVolumeTexture$ = 68					; size = 4
?CreateVolumeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z PROC ; CDXUTResourceCache::CreateVolumeTextureFromResourceEx, COMDAT
; _this$ = ecx

; 820  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 821  :     // Search the cache for a matching entry.
; 822  :     for( int i = 0; i < m_TextureCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateVolu
$LN4@CreateVolu:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateVolu:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@CreateVolu

; 823  :     {
; 824  :         DXUTCache_Texture &Entry = m_TextureCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 825  :         if( Entry.Location == DXUTCACHE_LOCATION_RESOURCE &&
; 826  :             Entry.hSrcModule == hSrcModule &&
; 827  :             !lstrcmpA( Entry.wszSource, pSrcResource ) &&
; 828  :             Entry.Width == Width &&
; 829  :             Entry.Height == Height &&
; 830  :             Entry.Depth == Depth &&
; 831  :             Entry.MipLevels == MipLevels &&
; 832  :             Entry.Usage == Usage &&
; 833  :             Entry.Format == Format &&
; 834  :             Entry.Pool == Pool &&
; 835  :             Entry.Type == D3DRTYPE_VOLUMETEXTURE )

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+264]
	cmp	ecx, DWORD PTR _hSrcModule$[ebp]
	jne	$LN2@CreateVolu
	mov	esi, esp
	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _Width$[ebp]
	jne	$LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+272]
	cmp	ecx, DWORD PTR _Height$[ebp]
	jne	$LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+276]
	cmp	ecx, DWORD PTR _Depth$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _MipLevels$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+284]
	cmp	ecx, DWORD PTR _Usage$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+288]
	cmp	ecx, DWORD PTR _Format$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+292]
	cmp	ecx, DWORD PTR _Pool$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax+296], 4
	jne	SHORT $LN2@CreateVolu

; 836  :         {
; 837  :             // A match is found. Obtain the IDirect3DVolumeTexture9 interface and return that.
; 838  :             return Entry.pTexture->QueryInterface( IID_IDirect3DVolumeTexture9, (LPVOID*)ppVolumeTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _ppVolumeTexture$[ebp]
	push	eax
	push	OFFSET _IID_IDirect3DVolumeTexture9
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@CreateVolu
$LN2@CreateVolu:

; 839  :         }
; 840  :     }

	jmp	$LN4@CreateVolu
$LN3@CreateVolu:

; 841  : 
; 842  :     HRESULT hr;
; 843  : 
; 844  :     // No matching entry.  Load the resource and create a new entry.
; 845  :     hr = D3DXCreateVolumeTextureFromResourceEx( pDevice, hSrcModule, pSrcResource, Width, Height, Depth, MipLevels, Usage,
; 846  :                                                 Format, Pool, Filter, MipFilter, ColorKey, pSrcInfo, pPalette, ppVolumeTexture );

	mov	eax, DWORD PTR _ppVolumeTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPalette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrcInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _ColorKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _MipFilter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Filter$[ebp]
	push	edx
	mov	eax, DWORD PTR _Pool$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Usage$[ebp]
	push	edx
	mov	eax, DWORD PTR _MipLevels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcResource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hSrcModule$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_D3DXCreateVolumeTextureFromResourceExA@64
	mov	DWORD PTR _hr$[ebp], eax

; 847  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateVolu

; 848  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN6@CreateVolu
$LN1@CreateVolu:

; 849  : 
; 850  :     DXUTCache_Texture NewEntry;
; 851  :     NewEntry.Location = DXUTCACHE_LOCATION_RESOURCE;

	mov	DWORD PTR _NewEntry$[ebp], 1

; 852  :     NewEntry.hSrcModule = hSrcModule;

	mov	eax, DWORD PTR _hSrcModule$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+264], eax

; 853  :     StringCchCopy( NewEntry.wszSource, MAX_PATH, pSrcResource );

	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _NewEntry$[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 854  :     NewEntry.Width = Width;

	mov	eax, DWORD PTR _Width$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+268], eax

; 855  :     NewEntry.Height = Height;

	mov	eax, DWORD PTR _Height$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+272], eax

; 856  :     NewEntry.Depth = Depth;

	mov	eax, DWORD PTR _Depth$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+276], eax

; 857  :     NewEntry.MipLevels = MipLevels;

	mov	eax, DWORD PTR _MipLevels$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+280], eax

; 858  :     NewEntry.Usage = Usage;

	mov	eax, DWORD PTR _Usage$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+284], eax

; 859  :     NewEntry.Format = Format;

	mov	eax, DWORD PTR _Format$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+288], eax

; 860  :     NewEntry.Pool = Pool;

	mov	eax, DWORD PTR _Pool$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+292], eax

; 861  :     NewEntry.Type = D3DRTYPE_VOLUMETEXTURE;

	mov	DWORD PTR _NewEntry$[ebp+296], 4

; 862  :     (*ppVolumeTexture)->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&NewEntry.pTexture );

	mov	esi, esp
	lea	eax, DWORD PTR _NewEntry$[ebp+300]
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _ppVolumeTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppVolumeTexture$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 863  : 
; 864  :     m_TextureCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z ; CGrowableArray<DXUTCache_Texture>::Add

; 865  :     return S_OK;

	xor	eax, eax
$LN6@CreateVolu:

; 866  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateVolu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
	npad	1
$LN10@CreateVolu:
	DD	1
	DD	$LN9@CreateVolu
$LN9@CreateVolu:
	DD	-360					; fffffe98H
	DD	304					; 00000130H
	DD	$LN8@CreateVolu
$LN8@CreateVolu:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateVolumeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z ENDP ; CDXUTResourceCache::CreateVolumeTextureFromResourceEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateVolumeTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DVolumeTexture9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_hSrcModule$ = 12					; size = 4
_pSrcResource$ = 16					; size = 4
_ppVolumeTexture$ = 20					; size = 4
?CreateVolumeTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DVolumeTexture9@@@Z PROC ; CDXUTResourceCache::CreateVolumeTextureFromResource, COMDAT
; _this$ = ecx

; 811  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 812  :     return CreateVolumeTextureFromResourceEx( pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT,
; 813  :                                               D3DX_DEFAULT, D3DX_DEFAULT, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED,
; 814  :                                               D3DX_DEFAULT, D3DX_DEFAULT, 0, NULL, NULL, ppVolumeTexture );

	mov	eax, DWORD PTR _ppVolumeTexture$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	-1
	push	-1
	push	1
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	-1
	mov	ecx, DWORD PTR _pSrcResource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hSrcModule$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateVolumeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z ; CDXUTResourceCache::CreateVolumeTextureFromResourceEx

; 815  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CreateVolumeTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DVolumeTexture9@@@Z ENDP ; CDXUTResourceCache::CreateVolumeTextureFromResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateVolumeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z
_TEXT	SEGMENT
_NewEntry$ = -360					; size = 304
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_pSrcFile$ = 12						; size = 4
_Width$ = 16						; size = 4
_Height$ = 20						; size = 4
_Depth$ = 24						; size = 4
_MipLevels$ = 28					; size = 4
_Usage$ = 32						; size = 4
_Format$ = 36						; size = 4
_Pool$ = 40						; size = 4
_Filter$ = 44						; size = 4
_MipFilter$ = 48					; size = 4
_ColorKey$ = 52						; size = 4
_pSrcInfo$ = 56						; size = 4
_pPalette$ = 60						; size = 4
_ppTexture$ = 64					; size = 4
?CreateVolumeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z PROC ; CDXUTResourceCache::CreateVolumeTextureFromFileEx, COMDAT
; _this$ = ecx

; 762  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 763  :     // Search the cache for a matching entry.
; 764  :     for( int i = 0; i < m_TextureCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateVolu
$LN4@CreateVolu:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateVolu:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@CreateVolu

; 765  :     {
; 766  :         DXUTCache_Texture &Entry = m_TextureCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 767  :         if( Entry.Location == DXUTCACHE_LOCATION_FILE &&
; 768  :             !lstrcmpA( Entry.wszSource, pSrcFile ) &&
; 769  :             Entry.Width == Width &&
; 770  :             Entry.Height == Height &&
; 771  :             Entry.Depth == Depth &&
; 772  :             Entry.MipLevels == MipLevels &&
; 773  :             Entry.Usage == Usage &&
; 774  :             Entry.Format == Format &&
; 775  :             Entry.Pool == Pool &&
; 776  :             Entry.Type == D3DRTYPE_VOLUMETEXTURE )

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN2@CreateVolu
	mov	esi, esp
	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _Width$[ebp]
	jne	$LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+272]
	cmp	ecx, DWORD PTR _Height$[ebp]
	jne	$LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+276]
	cmp	ecx, DWORD PTR _Depth$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _MipLevels$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+284]
	cmp	ecx, DWORD PTR _Usage$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+288]
	cmp	ecx, DWORD PTR _Format$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+292]
	cmp	ecx, DWORD PTR _Pool$[ebp]
	jne	SHORT $LN2@CreateVolu
	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax+296], 4
	jne	SHORT $LN2@CreateVolu

; 777  :         {
; 778  :             // A match is found. Obtain the IDirect3DVolumeTexture9 interface and return that.
; 779  :             return Entry.pTexture->QueryInterface( IID_IDirect3DVolumeTexture9, (LPVOID*)ppTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	push	OFFSET _IID_IDirect3DVolumeTexture9
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@CreateVolu
$LN2@CreateVolu:

; 780  :         }
; 781  :     }

	jmp	$LN4@CreateVolu
$LN3@CreateVolu:

; 782  : 
; 783  :     HRESULT hr;
; 784  : 
; 785  :     // No matching entry.  Load the resource and create a new entry.
; 786  :     hr = D3DXCreateVolumeTextureFromFileEx( pDevice, pSrcFile, Width, Height, Depth, MipLevels, Usage, Format,
; 787  :                                             Pool, Filter, MipFilter, ColorKey, pSrcInfo, pPalette, ppTexture );

	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPalette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrcInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _ColorKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _MipFilter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Filter$[ebp]
	push	edx
	mov	eax, DWORD PTR _Pool$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Usage$[ebp]
	push	edx
	mov	eax, DWORD PTR _MipLevels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcFile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	_D3DXCreateVolumeTextureFromFileExA@60
	mov	DWORD PTR _hr$[ebp], eax

; 788  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateVolu

; 789  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN6@CreateVolu
$LN1@CreateVolu:

; 790  : 
; 791  :     DXUTCache_Texture NewEntry;
; 792  :     NewEntry.Location = DXUTCACHE_LOCATION_FILE;

	mov	DWORD PTR _NewEntry$[ebp], 0

; 793  :     StringCchCopy( NewEntry.wszSource, MAX_PATH, pSrcFile );

	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _NewEntry$[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 794  :     NewEntry.Width = Width;

	mov	eax, DWORD PTR _Width$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+268], eax

; 795  :     NewEntry.Height = Height;

	mov	eax, DWORD PTR _Height$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+272], eax

; 796  :     NewEntry.Depth = Depth;

	mov	eax, DWORD PTR _Depth$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+276], eax

; 797  :     NewEntry.MipLevels = MipLevels;

	mov	eax, DWORD PTR _MipLevels$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+280], eax

; 798  :     NewEntry.Usage = Usage;

	mov	eax, DWORD PTR _Usage$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+284], eax

; 799  :     NewEntry.Format = Format;

	mov	eax, DWORD PTR _Format$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+288], eax

; 800  :     NewEntry.Pool = Pool;

	mov	eax, DWORD PTR _Pool$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+292], eax

; 801  :     NewEntry.Type = D3DRTYPE_VOLUMETEXTURE;

	mov	DWORD PTR _NewEntry$[ebp+296], 4

; 802  :     (*ppTexture)->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&NewEntry.pTexture );

	mov	esi, esp
	lea	eax, DWORD PTR _NewEntry$[ebp+300]
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _ppTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppTexture$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 803  : 
; 804  :     m_TextureCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z ; CGrowableArray<DXUTCache_Texture>::Add

; 805  :     return S_OK;

	xor	eax, eax
$LN6@CreateVolu:

; 806  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateVolu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	60					; 0000003cH
	npad	1
$LN10@CreateVolu:
	DD	1
	DD	$LN9@CreateVolu
$LN9@CreateVolu:
	DD	-360					; fffffe98H
	DD	304					; 00000130H
	DD	$LN8@CreateVolu
$LN8@CreateVolu:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateVolumeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z ENDP ; CDXUTResourceCache::CreateVolumeTextureFromFileEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateVolumeTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DVolumeTexture9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pSrcFile$ = 12						; size = 4
_ppVolumeTexture$ = 16					; size = 4
?CreateVolumeTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DVolumeTexture9@@@Z PROC ; CDXUTResourceCache::CreateVolumeTextureFromFile, COMDAT
; _this$ = ecx

; 753  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 754  :     return CreateVolumeTextureFromFileEx( pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT,
; 755  :                                           0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED, D3DX_DEFAULT, D3DX_DEFAULT,
; 756  :                                           0, NULL, NULL, ppVolumeTexture );

	mov	eax, DWORD PTR _ppVolumeTexture$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	-1
	push	-1
	push	1
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	push	-1
	mov	ecx, DWORD PTR _pSrcFile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateVolumeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DVolumeTexture9@@@Z ; CDXUTResourceCache::CreateVolumeTextureFromFileEx

; 757  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CreateVolumeTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DVolumeTexture9@@@Z ENDP ; CDXUTResourceCache::CreateVolumeTextureFromFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateCubeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z
_TEXT	SEGMENT
_NewEntry$ = -360					; size = 304
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_hSrcModule$ = 12					; size = 4
_pSrcResource$ = 16					; size = 4
_Size$ = 20						; size = 4
_MipLevels$ = 24					; size = 4
_Usage$ = 28						; size = 4
_Format$ = 32						; size = 4
_Pool$ = 36						; size = 4
_Filter$ = 40						; size = 4
_MipFilter$ = 44					; size = 4
_ColorKey$ = 48						; size = 4
_pSrcInfo$ = 52						; size = 4
_pPalette$ = 56						; size = 4
_ppCubeTexture$ = 60					; size = 4
?CreateCubeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z PROC ; CDXUTResourceCache::CreateCubeTextureFromResourceEx, COMDAT
; _this$ = ecx

; 706  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 707  :     // Search the cache for a matching entry.
; 708  :     for( int i = 0; i < m_TextureCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateCube
$LN4@CreateCube:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateCube:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@CreateCube

; 709  :     {
; 710  :         DXUTCache_Texture &Entry = m_TextureCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 711  :         if( Entry.Location == DXUTCACHE_LOCATION_RESOURCE &&
; 712  :             Entry.hSrcModule == hSrcModule &&
; 713  :             !lstrcmpA( Entry.wszSource, pSrcResource ) &&
; 714  :             Entry.Width == Size &&
; 715  :             Entry.MipLevels == MipLevels &&
; 716  :             Entry.Usage == Usage &&
; 717  :             Entry.Format == Format &&
; 718  :             Entry.Pool == Pool &&
; 719  :             Entry.Type == D3DRTYPE_CUBETEXTURE )

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+264]
	cmp	ecx, DWORD PTR _hSrcModule$[ebp]
	jne	$LN2@CreateCube
	mov	esi, esp
	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _Size$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _MipLevels$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+284]
	cmp	ecx, DWORD PTR _Usage$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+288]
	cmp	ecx, DWORD PTR _Format$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+292]
	cmp	ecx, DWORD PTR _Pool$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax+296], 5
	jne	SHORT $LN2@CreateCube

; 720  :         {
; 721  :             // A match is found. Obtain the IDirect3DCubeTexture9 interface and return that.
; 722  :             return Entry.pTexture->QueryInterface( IID_IDirect3DCubeTexture9, (LPVOID*)ppCubeTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _ppCubeTexture$[ebp]
	push	eax
	push	OFFSET _IID_IDirect3DCubeTexture9
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@CreateCube
$LN2@CreateCube:

; 723  :         }
; 724  :     }

	jmp	$LN4@CreateCube
$LN3@CreateCube:

; 725  : 
; 726  :     HRESULT hr;
; 727  : 
; 728  :     // No matching entry.  Load the resource and create a new entry.
; 729  :     hr = D3DXCreateCubeTextureFromResourceEx( pDevice, hSrcModule, pSrcResource, Size, MipLevels, Usage, Format,
; 730  :                                               Pool, Filter, MipFilter, ColorKey, pSrcInfo, pPalette, ppCubeTexture );

	mov	eax, DWORD PTR _ppCubeTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPalette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrcInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _ColorKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _MipFilter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Filter$[ebp]
	push	edx
	mov	eax, DWORD PTR _Pool$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Usage$[ebp]
	push	edx
	mov	eax, DWORD PTR _MipLevels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrcResource$[ebp]
	push	edx
	mov	eax, DWORD PTR _hSrcModule$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	_D3DXCreateCubeTextureFromResourceExA@56
	mov	DWORD PTR _hr$[ebp], eax

; 731  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateCube

; 732  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@CreateCube
$LN1@CreateCube:

; 733  : 
; 734  :     DXUTCache_Texture NewEntry;
; 735  :     NewEntry.Location = DXUTCACHE_LOCATION_RESOURCE;

	mov	DWORD PTR _NewEntry$[ebp], 1

; 736  :     NewEntry.hSrcModule = hSrcModule;

	mov	eax, DWORD PTR _hSrcModule$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+264], eax

; 737  :     StringCchCopy( NewEntry.wszSource, MAX_PATH, pSrcResource );

	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _NewEntry$[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 738  :     NewEntry.Width = Size;

	mov	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+268], eax

; 739  :     NewEntry.MipLevels = MipLevels;

	mov	eax, DWORD PTR _MipLevels$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+280], eax

; 740  :     NewEntry.Usage = Usage;

	mov	eax, DWORD PTR _Usage$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+284], eax

; 741  :     NewEntry.Format = Format;

	mov	eax, DWORD PTR _Format$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+288], eax

; 742  :     NewEntry.Pool = Pool;

	mov	eax, DWORD PTR _Pool$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+292], eax

; 743  :     NewEntry.Type = D3DRTYPE_CUBETEXTURE;

	mov	DWORD PTR _NewEntry$[ebp+296], 5

; 744  :     (*ppCubeTexture)->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&NewEntry.pTexture );

	mov	esi, esp
	lea	eax, DWORD PTR _NewEntry$[ebp+300]
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _ppCubeTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppCubeTexture$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 745  : 
; 746  :     m_TextureCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z ; CGrowableArray<DXUTCache_Texture>::Add

; 747  :     return S_OK;

	xor	eax, eax
$LN6@CreateCube:

; 748  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateCube
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	56					; 00000038H
$LN10@CreateCube:
	DD	1
	DD	$LN9@CreateCube
$LN9@CreateCube:
	DD	-360					; fffffe98H
	DD	304					; 00000130H
	DD	$LN8@CreateCube
$LN8@CreateCube:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateCubeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z ENDP ; CDXUTResourceCache::CreateCubeTextureFromResourceEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateCubeTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DCubeTexture9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_hSrcModule$ = 12					; size = 4
_pSrcResource$ = 16					; size = 4
_ppCubeTexture$ = 20					; size = 4
?CreateCubeTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DCubeTexture9@@@Z PROC ; CDXUTResourceCache::CreateCubeTextureFromResource, COMDAT
; _this$ = ecx

; 697  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 698  :     return CreateCubeTextureFromResourceEx( pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT,
; 699  :                                             0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED, D3DX_DEFAULT, D3DX_DEFAULT,
; 700  :                                             0, NULL, NULL, ppCubeTexture );

	mov	eax, DWORD PTR _ppCubeTexture$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	-1
	push	-1
	push	1
	push	0
	push	0
	push	-1
	push	-1
	mov	ecx, DWORD PTR _pSrcResource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hSrcModule$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateCubeTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z ; CDXUTResourceCache::CreateCubeTextureFromResourceEx

; 701  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CreateCubeTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DCubeTexture9@@@Z ENDP ; CDXUTResourceCache::CreateCubeTextureFromResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateCubeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z
_TEXT	SEGMENT
_NewEntry$ = -360					; size = 304
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_pSrcFile$ = 12						; size = 4
_Size$ = 16						; size = 4
_MipLevels$ = 20					; size = 4
_Usage$ = 24						; size = 4
_Format$ = 28						; size = 4
_Pool$ = 32						; size = 4
_Filter$ = 36						; size = 4
_MipFilter$ = 40					; size = 4
_ColorKey$ = 44						; size = 4
_pSrcInfo$ = 48						; size = 4
_pPalette$ = 52						; size = 4
_ppCubeTexture$ = 56					; size = 4
?CreateCubeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z PROC ; CDXUTResourceCache::CreateCubeTextureFromFileEx, COMDAT
; _this$ = ecx

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 653  :     // Search the cache for a matching entry.
; 654  :     for( int i = 0; i < m_TextureCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateCube
$LN4@CreateCube:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateCube:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@CreateCube

; 655  :     {
; 656  :         DXUTCache_Texture &Entry = m_TextureCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 657  :         if( Entry.Location == DXUTCACHE_LOCATION_FILE &&
; 658  :             !lstrcmpA( Entry.wszSource, pSrcFile ) &&
; 659  :             Entry.Width == Size &&
; 660  :             Entry.MipLevels == MipLevels &&
; 661  :             Entry.Usage == Usage &&
; 662  :             Entry.Format == Format &&
; 663  :             Entry.Pool == Pool &&
; 664  :             Entry.Type == D3DRTYPE_CUBETEXTURE )

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN2@CreateCube
	mov	esi, esp
	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _Size$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _MipLevels$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+284]
	cmp	ecx, DWORD PTR _Usage$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+288]
	cmp	ecx, DWORD PTR _Format$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+292]
	cmp	ecx, DWORD PTR _Pool$[ebp]
	jne	SHORT $LN2@CreateCube
	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax+296], 5
	jne	SHORT $LN2@CreateCube

; 665  :         {
; 666  :             // A match is found. Obtain the IDirect3DCubeTexture9 interface and return that.
; 667  :             return Entry.pTexture->QueryInterface( IID_IDirect3DCubeTexture9, (LPVOID*)ppCubeTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _ppCubeTexture$[ebp]
	push	eax
	push	OFFSET _IID_IDirect3DCubeTexture9
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@CreateCube
$LN2@CreateCube:

; 668  :         }
; 669  :     }

	jmp	$LN4@CreateCube
$LN3@CreateCube:

; 670  : 
; 671  :     HRESULT hr;
; 672  : 
; 673  :     // No matching entry.  Load the resource and create a new entry.
; 674  :     hr = D3DXCreateCubeTextureFromFileEx( pDevice, pSrcFile, Size, MipLevels, Usage, Format, Pool, Filter,
; 675  :                                           MipFilter, ColorKey, pSrcInfo, pPalette, ppCubeTexture );

	mov	eax, DWORD PTR _ppCubeTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPalette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrcInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _ColorKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _MipFilter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Filter$[ebp]
	push	edx
	mov	eax, DWORD PTR _Pool$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Usage$[ebp]
	push	edx
	mov	eax, DWORD PTR _MipLevels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrcFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	call	_D3DXCreateCubeTextureFromFileExA@52
	mov	DWORD PTR _hr$[ebp], eax

; 676  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateCube

; 677  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@CreateCube
$LN1@CreateCube:

; 678  : 
; 679  :     DXUTCache_Texture NewEntry;
; 680  :     NewEntry.Location = DXUTCACHE_LOCATION_FILE;

	mov	DWORD PTR _NewEntry$[ebp], 0

; 681  :     StringCchCopy( NewEntry.wszSource, MAX_PATH, pSrcFile );

	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _NewEntry$[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 682  :     NewEntry.Width = Size;

	mov	eax, DWORD PTR _Size$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+268], eax

; 683  :     NewEntry.MipLevels = MipLevels;

	mov	eax, DWORD PTR _MipLevels$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+280], eax

; 684  :     NewEntry.Usage = Usage;

	mov	eax, DWORD PTR _Usage$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+284], eax

; 685  :     NewEntry.Format = Format;

	mov	eax, DWORD PTR _Format$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+288], eax

; 686  :     NewEntry.Pool = Pool;

	mov	eax, DWORD PTR _Pool$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+292], eax

; 687  :     NewEntry.Type = D3DRTYPE_CUBETEXTURE;

	mov	DWORD PTR _NewEntry$[ebp+296], 5

; 688  :     (*ppCubeTexture)->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&NewEntry.pTexture );

	mov	esi, esp
	lea	eax, DWORD PTR _NewEntry$[ebp+300]
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _ppCubeTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppCubeTexture$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 689  : 
; 690  :     m_TextureCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z ; CGrowableArray<DXUTCache_Texture>::Add

; 691  :     return S_OK;

	xor	eax, eax
$LN6@CreateCube:

; 692  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateCube
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	52					; 00000034H
$LN10@CreateCube:
	DD	1
	DD	$LN9@CreateCube
$LN9@CreateCube:
	DD	-360					; fffffe98H
	DD	304					; 00000130H
	DD	$LN8@CreateCube
$LN8@CreateCube:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateCubeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z ENDP ; CDXUTResourceCache::CreateCubeTextureFromFileEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateCubeTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DCubeTexture9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pSrcFile$ = 12						; size = 4
_ppCubeTexture$ = 16					; size = 4
?CreateCubeTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DCubeTexture9@@@Z PROC ; CDXUTResourceCache::CreateCubeTextureFromFile, COMDAT
; _this$ = ecx

; 643  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 644  :     return CreateCubeTextureFromFileEx( pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, 0,
; 645  :                                         D3DFMT_UNKNOWN, D3DPOOL_MANAGED, D3DX_DEFAULT, D3DX_DEFAULT,
; 646  :                                         0, NULL, NULL, ppCubeTexture );

	mov	eax, DWORD PTR _ppCubeTexture$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	-1
	push	-1
	push	1
	push	0
	push	0
	push	-1
	push	-1
	mov	ecx, DWORD PTR _pSrcFile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateCubeTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DCubeTexture9@@@Z ; CDXUTResourceCache::CreateCubeTextureFromFileEx

; 647  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CreateCubeTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DCubeTexture9@@@Z ENDP ; CDXUTResourceCache::CreateCubeTextureFromFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z
_TEXT	SEGMENT
_NewEntry$ = -360					; size = 304
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_hSrcModule$ = 12					; size = 4
_pSrcResource$ = 16					; size = 4
_Width$ = 20						; size = 4
_Height$ = 24						; size = 4
_MipLevels$ = 28					; size = 4
_Usage$ = 32						; size = 4
_Format$ = 36						; size = 4
_Pool$ = 40						; size = 4
_Filter$ = 44						; size = 4
_MipFilter$ = 48					; size = 4
_ColorKey$ = 52						; size = 4
_pSrcInfo$ = 56						; size = 4
_pPalette$ = 60						; size = 4
_ppTexture$ = 64					; size = 4
?CreateTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z PROC ; CDXUTResourceCache::CreateTextureFromResourceEx, COMDAT
; _this$ = ecx

; 594  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 595  :     // Search the cache for a matching entry.
; 596  :     for( int i = 0; i < m_TextureCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateText
$LN4@CreateText:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateText:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@CreateText

; 597  :     {
; 598  :         DXUTCache_Texture &Entry = m_TextureCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 599  :         if( Entry.Location == DXUTCACHE_LOCATION_RESOURCE &&
; 600  :             Entry.hSrcModule == hSrcModule &&
; 601  :             !lstrcmpA( Entry.wszSource, pSrcResource ) &&
; 602  :             Entry.Width == Width &&
; 603  :             Entry.Height == Height &&
; 604  :             Entry.MipLevels == MipLevels &&
; 605  :             Entry.Usage == Usage &&
; 606  :             Entry.Format == Format &&
; 607  :             Entry.Pool == Pool &&
; 608  :             Entry.Type == D3DRTYPE_TEXTURE )

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax], 1
	jne	$LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+264]
	cmp	ecx, DWORD PTR _hSrcModule$[ebp]
	jne	$LN2@CreateText
	mov	esi, esp
	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _Width$[ebp]
	jne	$LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+272]
	cmp	ecx, DWORD PTR _Height$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _MipLevels$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+284]
	cmp	ecx, DWORD PTR _Usage$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+288]
	cmp	ecx, DWORD PTR _Format$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+292]
	cmp	ecx, DWORD PTR _Pool$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax+296], 3
	jne	SHORT $LN2@CreateText

; 609  :         {
; 610  :             // A match is found. Obtain the IDirect3DTexture9 interface and return that.
; 611  :             return Entry.pTexture->QueryInterface( IID_IDirect3DTexture9, (LPVOID*)ppTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	push	OFFSET _IID_IDirect3DTexture9
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@CreateText
$LN2@CreateText:

; 612  :         }
; 613  :     }

	jmp	$LN4@CreateText
$LN3@CreateText:

; 614  : 
; 615  :     HRESULT hr;
; 616  : 
; 617  :     // No matching entry.  Load the resource and create a new entry.
; 618  :     hr = D3DXCreateTextureFromResourceEx( pDevice, hSrcModule, pSrcResource, Width, Height, MipLevels, Usage,
; 619  :                                           Format, Pool, Filter, MipFilter, ColorKey, pSrcInfo, pPalette, ppTexture );

	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPalette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrcInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _ColorKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _MipFilter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Filter$[ebp]
	push	edx
	mov	eax, DWORD PTR _Pool$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Usage$[ebp]
	push	edx
	mov	eax, DWORD PTR _MipLevels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hSrcModule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	call	_D3DXCreateTextureFromResourceExA@60
	mov	DWORD PTR _hr$[ebp], eax

; 620  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateText

; 621  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN6@CreateText
$LN1@CreateText:

; 622  : 
; 623  :     DXUTCache_Texture NewEntry;
; 624  :     NewEntry.Location = DXUTCACHE_LOCATION_RESOURCE;

	mov	DWORD PTR _NewEntry$[ebp], 1

; 625  :     NewEntry.hSrcModule = hSrcModule;

	mov	eax, DWORD PTR _hSrcModule$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+264], eax

; 626  :     StringCchCopy( NewEntry.wszSource, MAX_PATH, pSrcResource );

	mov	eax, DWORD PTR _pSrcResource$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _NewEntry$[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 627  :     NewEntry.Width = Width;

	mov	eax, DWORD PTR _Width$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+268], eax

; 628  :     NewEntry.Height = Height;

	mov	eax, DWORD PTR _Height$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+272], eax

; 629  :     NewEntry.MipLevels = MipLevels;

	mov	eax, DWORD PTR _MipLevels$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+280], eax

; 630  :     NewEntry.Usage = Usage;

	mov	eax, DWORD PTR _Usage$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+284], eax

; 631  :     NewEntry.Format = Format;

	mov	eax, DWORD PTR _Format$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+288], eax

; 632  :     NewEntry.Pool = Pool;

	mov	eax, DWORD PTR _Pool$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+292], eax

; 633  :     NewEntry.Type = D3DRTYPE_TEXTURE;

	mov	DWORD PTR _NewEntry$[ebp+296], 3

; 634  :     (*ppTexture)->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&NewEntry.pTexture );

	mov	esi, esp
	lea	eax, DWORD PTR _NewEntry$[ebp+300]
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _ppTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppTexture$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 635  : 
; 636  :     m_TextureCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z ; CGrowableArray<DXUTCache_Texture>::Add

; 637  :     return S_OK;

	xor	eax, eax
$LN6@CreateText:

; 638  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	60					; 0000003cH
	npad	1
$LN10@CreateText:
	DD	1
	DD	$LN9@CreateText
$LN9@CreateText:
	DD	-360					; fffffe98H
	DD	304					; 00000130H
	DD	$LN8@CreateText
$LN8@CreateText:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z ENDP ; CDXUTResourceCache::CreateTextureFromResourceEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DTexture9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_hSrcModule$ = 12					; size = 4
_pSrcResource$ = 16					; size = 4
_ppTexture$ = 20					; size = 4
?CreateTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DTexture9@@@Z PROC ; CDXUTResourceCache::CreateTextureFromResource, COMDAT
; _this$ = ecx

; 585  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  :     return CreateTextureFromResourceEx( pDevice, hSrcModule, pSrcResource, D3DX_DEFAULT, D3DX_DEFAULT,
; 587  :                                         D3DX_DEFAULT, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED, D3DX_DEFAULT,
; 588  :                                         D3DX_DEFAULT, 0, NULL, NULL, ppTexture );

	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	-1
	push	-1
	push	1
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	mov	ecx, DWORD PTR _pSrcResource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hSrcModule$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateTextureFromResourceEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z ; CDXUTResourceCache::CreateTextureFromResourceEx

; 589  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CreateTextureFromResource@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PAUHINSTANCE__@@PBDPAPAUIDirect3DTexture9@@@Z ENDP ; CDXUTResourceCache::CreateTextureFromResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z
_TEXT	SEGMENT
_NewEntry$ = -360					; size = 304
_hr$ = -48						; size = 4
_Entry$1 = -36						; size = 4
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_pSrcFile$ = 12						; size = 4
_Width$ = 16						; size = 4
_Height$ = 20						; size = 4
_MipLevels$ = 24					; size = 4
_Usage$ = 28						; size = 4
_Format$ = 32						; size = 4
_Pool$ = 36						; size = 4
_Filter$ = 40						; size = 4
_MipFilter$ = 44					; size = 4
_ColorKey$ = 48						; size = 4
_pSrcInfo$ = 52						; size = 4
_pPalette$ = 56						; size = 4
_ppTexture$ = 60					; size = 4
?CreateTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z PROC ; CDXUTResourceCache::CreateTextureFromFileEx, COMDAT
; _this$ = ecx

; 538  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 539  :     // Search the cache for a matching entry.
; 540  :     for( int i = 0; i < m_TextureCache.GetSize(); ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@CreateText
$LN4@CreateText:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@CreateText:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CGrowableArray@UDXUTCache_Texture@@@@QBEHXZ ; CGrowableArray<DXUTCache_Texture>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@CreateText

; 541  :     {
; 542  :         DXUTCache_Texture &Entry = m_TextureCache[i];

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CGrowableArray@UDXUTCache_Texture@@@@QAEAAUDXUTCache_Texture@@H@Z ; CGrowableArray<DXUTCache_Texture>::operator[]
	mov	DWORD PTR _Entry$1[ebp], eax

; 543  :         if( Entry.Location == DXUTCACHE_LOCATION_FILE &&
; 544  :             !lstrcmpA( Entry.wszSource, pSrcFile ) &&
; 545  :             Entry.Width == Width &&
; 546  :             Entry.Height == Height &&
; 547  :             Entry.MipLevels == MipLevels &&
; 548  :             Entry.Usage == Usage &&
; 549  :             Entry.Format == Format &&
; 550  :             Entry.Pool == Pool &&
; 551  :             Entry.Type == D3DRTYPE_TEXTURE )

	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN2@CreateText
	mov	esi, esp
	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Entry$1[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcmpA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _Width$[ebp]
	jne	$LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+272]
	cmp	ecx, DWORD PTR _Height$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+280]
	cmp	ecx, DWORD PTR _MipLevels$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+284]
	cmp	ecx, DWORD PTR _Usage$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+288]
	cmp	ecx, DWORD PTR _Format$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+292]
	cmp	ecx, DWORD PTR _Pool$[ebp]
	jne	SHORT $LN2@CreateText
	mov	eax, DWORD PTR _Entry$1[ebp]
	cmp	DWORD PTR [eax+296], 3
	jne	SHORT $LN2@CreateText

; 552  :         {
; 553  :             // A match is found. Obtain the IDirect3DTexture9 interface and return that.
; 554  :             return Entry.pTexture->QueryInterface( IID_IDirect3DTexture9, (LPVOID*)ppTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	push	OFFSET _IID_IDirect3DTexture9
	mov	ecx, DWORD PTR _Entry$1[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	eax, DWORD PTR _Entry$1[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@CreateText
$LN2@CreateText:

; 555  :         }
; 556  :     }

	jmp	$LN4@CreateText
$LN3@CreateText:

; 557  : 
; 558  :     HRESULT hr;
; 559  : 
; 560  :     // No matching entry.  Load the resource and create a new entry.
; 561  :     hr = D3DXCreateTextureFromFileEx( pDevice, pSrcFile, Width, Height, MipLevels, Usage, Format,
; 562  :                                       Pool, Filter, MipFilter, ColorKey, pSrcInfo, pPalette, ppTexture );

	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPalette$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pSrcInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _ColorKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _MipFilter$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Filter$[ebp]
	push	edx
	mov	eax, DWORD PTR _Pool$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Usage$[ebp]
	push	edx
	mov	eax, DWORD PTR _MipLevels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDevice$[ebp]
	push	ecx
	call	_D3DXCreateTextureFromFileExA@56
	mov	DWORD PTR _hr$[ebp], eax

; 563  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateText

; 564  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@CreateText
$LN1@CreateText:

; 565  : 
; 566  :     DXUTCache_Texture NewEntry;
; 567  :     NewEntry.Location = DXUTCACHE_LOCATION_FILE;

	mov	DWORD PTR _NewEntry$[ebp], 0

; 568  :     StringCchCopy( NewEntry.wszSource, MAX_PATH, pSrcFile );

	mov	eax, DWORD PTR _pSrcFile$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _NewEntry$[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 569  :     NewEntry.Width = Width;

	mov	eax, DWORD PTR _Width$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+268], eax

; 570  :     NewEntry.Height = Height;

	mov	eax, DWORD PTR _Height$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+272], eax

; 571  :     NewEntry.MipLevels = MipLevels;

	mov	eax, DWORD PTR _MipLevels$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+280], eax

; 572  :     NewEntry.Usage = Usage;

	mov	eax, DWORD PTR _Usage$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+284], eax

; 573  :     NewEntry.Format = Format;

	mov	eax, DWORD PTR _Format$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+288], eax

; 574  :     NewEntry.Pool = Pool;

	mov	eax, DWORD PTR _Pool$[ebp]
	mov	DWORD PTR _NewEntry$[ebp+292], eax

; 575  :     NewEntry.Type = D3DRTYPE_TEXTURE;

	mov	DWORD PTR _NewEntry$[ebp+296], 3

; 576  :     (*ppTexture)->QueryInterface( IID_IDirect3DBaseTexture9, (LPVOID*)&NewEntry.pTexture );

	mov	esi, esp
	lea	eax, DWORD PTR _NewEntry$[ebp+300]
	push	eax
	push	OFFSET _IID_IDirect3DBaseTexture9
	mov	ecx, DWORD PTR _ppTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppTexture$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 577  : 
; 578  :     m_TextureCache.Add( NewEntry );

	lea	eax, DWORD PTR _NewEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CGrowableArray@UDXUTCache_Texture@@@@QAEJABUDXUTCache_Texture@@@Z ; CGrowableArray<DXUTCache_Texture>::Add

; 579  :     return S_OK;

	xor	eax, eax
$LN6@CreateText:

; 580  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	56					; 00000038H
$LN10@CreateText:
	DD	1
	DD	$LN9@CreateText
$LN9@CreateText:
	DD	-360					; fffffe98H
	DD	304					; 00000130H
	DD	$LN8@CreateText
$LN8@CreateText:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?CreateTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z ENDP ; CDXUTResourceCache::CreateTextureFromFileEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pSrcFile$ = 12						; size = 4
_ppTexture$ = 16					; size = 4
?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@@Z PROC ; CDXUTResourceCache::CreateTextureFromFile, COMDAT
; _this$ = ecx

; 529  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 530  :     return CreateTextureFromFileEx( pDevice, pSrcFile, D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT,
; 531  :                                     0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED, D3DX_DEFAULT, D3DX_DEFAULT,
; 532  :                                     0, NULL, NULL, ppTexture );

	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	-1
	push	-1
	push	1
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	mov	ecx, DWORD PTR _pSrcFile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateTextureFromFileEx@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDIIIKW4_D3DFORMAT@@W4_D3DPOOL@@KKKPAU_D3DXIMAGE_INFO@@PAUtagPALETTEENTRY@@PAPAUIDirect3DTexture9@@@Z ; CDXUTResourceCache::CreateTextureFromFileEx

; 533  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@@Z ENDP ; CDXUTResourceCache::CreateTextureFromFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??1CDXUTResourceCache@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTResourceCache@@QAE@XZ PROC			; CDXUTResourceCache::~CDXUTResourceCache, COMDAT
; _this$ = ecx

; 519  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTResourceCache@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 520  :     OnDestroyDevice();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnDestroyDevice@CDXUTResourceCache@@QAEJXZ ; CDXUTResourceCache::OnDestroyDevice

; 521  : 
; 522  :     m_TextureCache.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@UDXUTCache_Texture@@@@QAEXXZ ; CGrowableArray<DXUTCache_Texture>::RemoveAll

; 523  :     m_EffectCache.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?RemoveAll@?$CGrowableArray@UDXUTCache_Effect@@@@QAEXXZ ; CGrowableArray<DXUTCache_Effect>::RemoveAll

; 524  :     m_FontCache.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?RemoveAll@?$CGrowableArray@UDXUTCache_Font@@@@QAEXXZ ; CGrowableArray<DXUTCache_Font>::RemoveAll

; 525  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ ; CGrowableArray<DXUTCache_Font>::~CGrowableArray<DXUTCache_Font>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ ; CGrowableArray<DXUTCache_Effect>::~CGrowableArray<DXUTCache_Effect>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ ; CGrowableArray<DXUTCache_Texture>::~CGrowableArray<DXUTCache_Texture>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDXUTResourceCache@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CGrowableArray@UDXUTCache_Texture@@@@QAE@XZ ; CGrowableArray<DXUTCache_Texture>::~CGrowableArray<DXUTCache_Texture>
__unwindfunclet$??1CDXUTResourceCache@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CGrowableArray@UDXUTCache_Effect@@@@QAE@XZ ; CGrowableArray<DXUTCache_Effect>::~CGrowableArray<DXUTCache_Effect>
__unwindfunclet$??1CDXUTResourceCache@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CGrowableArray@UDXUTCache_Font@@@@QAE@XZ ; CGrowableArray<DXUTCache_Font>::~CGrowableArray<DXUTCache_Font>
__ehhandler$??1CDXUTResourceCache@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTResourceCache@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTResourceCache@@QAE@XZ ENDP			; CDXUTResourceCache::~CDXUTResourceCache
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ PROC		; DXUTGetGlobalTimer, COMDAT

; 22   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 23   :     // Using an accessor function gives control of the construction order
; 24   :     static CDXUTTimer timer;

	mov	eax, DWORD PTR ?$S2@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4IA
	and	eax, 1
	jne	SHORT $LN1@DXUTGetGlo
	mov	eax, DWORD PTR ?$S2@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4IA
	or	eax, 1
	mov	DWORD PTR ?$S2@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4IA, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?timer@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4V2@A
	call	??0CDXUTTimer@@QAE@XZ			; CDXUTTimer::CDXUTTimer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN1@DXUTGetGlo:

; 25   :     return &timer;

	mov	eax, OFFSET ?timer@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4V2@A

; 26   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ$0:
	mov	eax, DWORD PTR ?$S2@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S2@?1??DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ@4IA, eax
	ret	0
__ehhandler$?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ ENDP		; DXUTGetGlobalTimer
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?IsStopped@CDXUTTimer@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsStopped@CDXUTTimer@@QAE_NXZ PROC			; CDXUTTimer::IsStopped, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  :     return m_bTimerStopped;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+1]

; 277  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStopped@CDXUTTimer@@QAE_NXZ ENDP			; CDXUTTimer::IsStopped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?GetElapsedTime@CDXUTTimer@@QAENXZ
_TEXT	SEGMENT
tv150 = -244						; size = 8
tv81 = -240						; size = 4
_fElapsedTime$ = -40					; size = 8
_qwTime$ = -24						; size = 8
_this$ = -8						; size = 4
?GetElapsedTime@CDXUTTimer@@QAENXZ PROC			; CDXUTTimer::GetElapsedTime, COMDAT
; _this$ = ecx

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 256  :     if( !m_bUsingQPF )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@GetElapsed

; 257  :         return -1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	$LN4@GetElapsed
$LN3@GetElapsed:

; 258  : 
; 259  :     // Get either the current time or the stop time
; 260  :     LARGE_INTEGER qwTime;
; 261  :     if( m_llStopTime != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv81[ebp], eax
	mov	ecx, DWORD PTR tv81[ebp]
	mov	edx, DWORD PTR tv81[ebp]
	mov	eax, DWORD PTR [ecx+10]
	or	eax, DWORD PTR [edx+14]
	je	SHORT $LN2@GetElapsed

; 262  :         qwTime.QuadPart = m_llStopTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+10]
	mov	DWORD PTR _qwTime$[ebp], ecx
	mov	edx, DWORD PTR [eax+14]
	mov	DWORD PTR _qwTime$[ebp+4], edx

; 263  :     else

	jmp	SHORT $LN1@GetElapsed
$LN2@GetElapsed:

; 264  :         QueryPerformanceCounter( &qwTime );

	mov	esi, esp
	lea	eax, DWORD PTR _qwTime$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetElapsed:

; 265  : 
; 266  :     double fElapsedTime = (double) ( qwTime.QuadPart - m_llLastElapsedTime ) / (double) m_llQPFTicksPerSec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$[ebp]
	sub	ecx, DWORD PTR [eax+18]
	mov	edx, DWORD PTR _qwTime$[ebp+4]
	sbb	edx, DWORD PTR [eax+22]
	call	__ltod3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+2]
	mov	edx, DWORD PTR [ecx+6]
	mov	ecx, eax
	movsd	QWORD PTR tv150[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv150[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fElapsedTime$[ebp], xmm1

; 267  :     m_llLastElapsedTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$[ebp]
	mov	DWORD PTR [eax+18], ecx
	mov	edx, DWORD PTR _qwTime$[ebp+4]
	mov	DWORD PTR [eax+22], edx

; 268  : 
; 269  :     return fElapsedTime;

	fld	QWORD PTR _fElapsedTime$[ebp]
$LN4@GetElapsed:

; 270  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetElapsed
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@GetElapsed:
	DD	1
	DD	$LN7@GetElapsed
$LN7@GetElapsed:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN6@GetElapsed
$LN6@GetElapsed:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?GetElapsedTime@CDXUTTimer@@QAENXZ ENDP			; CDXUTTimer::GetElapsedTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?GetTime@CDXUTTimer@@QAENXZ
_TEXT	SEGMENT
tv145 = -244						; size = 8
tv80 = -240						; size = 4
_fAppTime$ = -40					; size = 8
_qwTime$ = -24						; size = 8
_this$ = -8						; size = 4
?GetTime@CDXUTTimer@@QAENXZ PROC			; CDXUTTimer::GetTime, COMDAT
; _this$ = ecx

; 236  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 237  :     if( !m_bUsingQPF )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@GetTime

; 238  :         return -1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	$LN4@GetTime
$LN3@GetTime:

; 239  : 
; 240  :     // Get either the current time or the stop time
; 241  :     LARGE_INTEGER qwTime;
; 242  :     if( m_llStopTime != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	mov	edx, DWORD PTR tv80[ebp]
	mov	eax, DWORD PTR [ecx+10]
	or	eax, DWORD PTR [edx+14]
	je	SHORT $LN2@GetTime

; 243  :         qwTime.QuadPart = m_llStopTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+10]
	mov	DWORD PTR _qwTime$[ebp], ecx
	mov	edx, DWORD PTR [eax+14]
	mov	DWORD PTR _qwTime$[ebp+4], edx

; 244  :     else

	jmp	SHORT $LN1@GetTime
$LN2@GetTime:

; 245  :         QueryPerformanceCounter( &qwTime );

	mov	esi, esp
	lea	eax, DWORD PTR _qwTime$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetTime:

; 246  : 
; 247  :     double fAppTime = (double) ( qwTime.QuadPart - m_llBaseTime ) / (double) m_llQPFTicksPerSec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$[ebp]
	sub	ecx, DWORD PTR [eax+26]
	mov	edx, DWORD PTR _qwTime$[ebp+4]
	sbb	edx, DWORD PTR [eax+30]
	call	__ltod3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+2]
	mov	edx, DWORD PTR [ecx+6]
	mov	ecx, eax
	movsd	QWORD PTR tv145[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv145[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fAppTime$[ebp], xmm1

; 248  : 
; 249  :     return fAppTime;

	fld	QWORD PTR _fAppTime$[ebp]
$LN4@GetTime:

; 250  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetTime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@GetTime:
	DD	1
	DD	$LN7@GetTime
$LN7@GetTime:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN6@GetTime
$LN6@GetTime:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?GetTime@CDXUTTimer@@QAENXZ ENDP			; CDXUTTimer::GetTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?GetAbsoluteTime@CDXUTTimer@@QAENXZ
_TEXT	SEGMENT
tv136 = -244						; size = 8
tv78 = -240						; size = 4
_fTime$ = -40						; size = 8
_qwTime$ = -24						; size = 8
_this$ = -8						; size = 4
?GetAbsoluteTime@CDXUTTimer@@QAENXZ PROC		; CDXUTTimer::GetAbsoluteTime, COMDAT
; _this$ = ecx

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  :     if( !m_bUsingQPF )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@GetAbsolut

; 219  :         return -1.0;

	fld	QWORD PTR __real@bff0000000000000
	jmp	SHORT $LN4@GetAbsolut
$LN3@GetAbsolut:

; 220  : 
; 221  :     // Get either the current time or the stop time
; 222  :     LARGE_INTEGER qwTime;
; 223  :     if( m_llStopTime != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [ecx+10]
	or	eax, DWORD PTR [edx+14]
	je	SHORT $LN2@GetAbsolut

; 224  :         qwTime.QuadPart = m_llStopTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+10]
	mov	DWORD PTR _qwTime$[ebp], ecx
	mov	edx, DWORD PTR [eax+14]
	mov	DWORD PTR _qwTime$[ebp+4], edx

; 225  :     else

	jmp	SHORT $LN1@GetAbsolut
$LN2@GetAbsolut:

; 226  :         QueryPerformanceCounter( &qwTime );

	mov	esi, esp
	lea	eax, DWORD PTR _qwTime$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetAbsolut:

; 227  : 
; 228  :     double fTime = qwTime.QuadPart / (double) m_llQPFTicksPerSec;

	mov	edx, DWORD PTR _qwTime$[ebp+4]
	mov	ecx, DWORD PTR _qwTime$[ebp]
	call	__ltod3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2]
	mov	edx, DWORD PTR [eax+6]
	movsd	QWORD PTR tv136[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv136[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fTime$[ebp], xmm1

; 229  : 
; 230  :     return fTime;

	fld	QWORD PTR _fTime$[ebp]
$LN4@GetAbsolut:

; 231  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetAbsolut
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@GetAbsolut:
	DD	1
	DD	$LN7@GetAbsolut
$LN7@GetAbsolut:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN6@GetAbsolut
$LN6@GetAbsolut:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?GetAbsoluteTime@CDXUTTimer@@QAENXZ ENDP		; CDXUTTimer::GetAbsoluteTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?Advance@CDXUTTimer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Advance@CDXUTTimer@@QAEXXZ PROC			; CDXUTTimer::Advance, COMDAT
; _this$ = ecx

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  :     if( !m_bUsingQPF )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@Advance

; 209  :         return;

	jmp	SHORT $LN2@Advance
$LN1@Advance:

; 210  : 
; 211  :     m_llStopTime += m_llQPFTicksPerSec/10;

	mov	eax, DWORD PTR _this$[ebp]
	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR [eax+6]
	push	ecx
	mov	edx, DWORD PTR [eax+2]
	push	edx
	call	__alldiv
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+10]
	adc	edx, DWORD PTR [ecx+14]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+10], eax
	mov	DWORD PTR [ecx+14], edx
$LN2@Advance:

; 212  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Advance@CDXUTTimer@@QAEXXZ ENDP			; CDXUTTimer::Advance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?Stop@CDXUTTimer@@QAEXXZ
_TEXT	SEGMENT
tv80 = -224						; size = 4
_qwTime$1 = -24						; size = 8
_this$ = -8						; size = 4
?Stop@CDXUTTimer@@QAEXXZ PROC				; CDXUTTimer::Stop, COMDAT
; _this$ = ecx

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  :     if( !m_bUsingQPF )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@Stop

; 187  :         return;

	jmp	SHORT $LN5@Stop
$LN4@Stop:

; 188  : 
; 189  :     if( !m_bTimerStopped )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN5@Stop

; 190  :     {
; 191  :         // Get either the current time or the stop time
; 192  :         LARGE_INTEGER qwTime;
; 193  :         if( m_llStopTime != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	mov	edx, DWORD PTR tv80[ebp]
	mov	eax, DWORD PTR [ecx+10]
	or	eax, DWORD PTR [edx+14]
	je	SHORT $LN2@Stop

; 194  :             qwTime.QuadPart = m_llStopTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+10]
	mov	DWORD PTR _qwTime$1[ebp], ecx
	mov	edx, DWORD PTR [eax+14]
	mov	DWORD PTR _qwTime$1[ebp+4], edx

; 195  :         else

	jmp	SHORT $LN1@Stop
$LN2@Stop:

; 196  :             QueryPerformanceCounter( &qwTime );

	mov	esi, esp
	lea	eax, DWORD PTR _qwTime$1[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Stop:

; 197  : 
; 198  :         m_llStopTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$1[ebp]
	mov	DWORD PTR [eax+10], ecx
	mov	edx, DWORD PTR _qwTime$1[ebp+4]
	mov	DWORD PTR [eax+14], edx

; 199  :         m_llLastElapsedTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$1[ebp]
	mov	DWORD PTR [eax+18], ecx
	mov	edx, DWORD PTR _qwTime$1[ebp+4]
	mov	DWORD PTR [eax+22], edx

; 200  :         m_bTimerStopped = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1
$LN5@Stop:

; 201  :     }
; 202  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Stop
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@Stop:
	DD	1
	DD	$LN8@Stop
$LN8@Stop:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN7@Stop
$LN7@Stop:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?Stop@CDXUTTimer@@QAEXXZ ENDP				; CDXUTTimer::Stop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?Start@CDXUTTimer@@QAEXXZ
_TEXT	SEGMENT
_qwTime$ = -24						; size = 8
_this$ = -8						; size = 4
?Start@CDXUTTimer@@QAEXXZ PROC				; CDXUTTimer::Start, COMDAT
; _this$ = ecx

; 167  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  :     if( !m_bUsingQPF )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@Start

; 169  :         return;

	jmp	SHORT $LN3@Start
$LN2@Start:

; 170  : 
; 171  :     // Get the current time
; 172  :     LARGE_INTEGER qwTime;
; 173  :     QueryPerformanceCounter( &qwTime );

	mov	esi, esp
	lea	eax, DWORD PTR _qwTime$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 174  : 
; 175  :     if( m_bTimerStopped )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN1@Start

; 176  :         m_llBaseTime += qwTime.QuadPart - m_llStopTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$[ebp]
	sub	ecx, DWORD PTR [eax+10]
	mov	edx, DWORD PTR _qwTime$[ebp+4]
	sbb	edx, DWORD PTR [eax+14]
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+26]
	adc	edx, DWORD PTR [eax+30]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+26], ecx
	mov	DWORD PTR [eax+30], edx
$LN1@Start:

; 177  :     m_llStopTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+10], 0
	mov	DWORD PTR [eax+14], 0

; 178  :     m_llLastElapsedTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$[ebp]
	mov	DWORD PTR [eax+18], ecx
	mov	edx, DWORD PTR _qwTime$[ebp+4]
	mov	DWORD PTR [eax+22], edx

; 179  :     m_bTimerStopped = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0
$LN3@Start:

; 180  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Start
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Start:
	DD	1
	DD	$LN6@Start
$LN6@Start:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN5@Start
$LN5@Start:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?Start@CDXUTTimer@@QAEXXZ ENDP				; CDXUTTimer::Start
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?Reset@CDXUTTimer@@QAEXXZ
_TEXT	SEGMENT
tv77 = -224						; size = 4
_qwTime$ = -24						; size = 8
_this$ = -8						; size = 4
?Reset@CDXUTTimer@@QAEXXZ PROC				; CDXUTTimer::Reset, COMDAT
; _this$ = ecx

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  :     if( !m_bUsingQPF )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@Reset

; 149  :         return;

	jmp	SHORT $LN4@Reset
$LN3@Reset:

; 150  : 
; 151  :     // Get either the current time or the stop time
; 152  :     LARGE_INTEGER qwTime;
; 153  :     if( m_llStopTime != 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	mov	edx, DWORD PTR tv77[ebp]
	mov	eax, DWORD PTR [ecx+10]
	or	eax, DWORD PTR [edx+14]
	je	SHORT $LN2@Reset

; 154  :         qwTime.QuadPart = m_llStopTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+10]
	mov	DWORD PTR _qwTime$[ebp], ecx
	mov	edx, DWORD PTR [eax+14]
	mov	DWORD PTR _qwTime$[ebp+4], edx

; 155  :     else

	jmp	SHORT $LN1@Reset
$LN2@Reset:

; 156  :         QueryPerformanceCounter( &qwTime );

	mov	esi, esp
	lea	eax, DWORD PTR _qwTime$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Reset:

; 157  : 
; 158  :     m_llBaseTime        = qwTime.QuadPart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$[ebp]
	mov	DWORD PTR [eax+26], ecx
	mov	edx, DWORD PTR _qwTime$[ebp+4]
	mov	DWORD PTR [eax+30], edx

; 159  :     m_llLastElapsedTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTime$[ebp]
	mov	DWORD PTR [eax+18], ecx
	mov	edx, DWORD PTR _qwTime$[ebp+4]
	mov	DWORD PTR [eax+22], edx

; 160  :     m_llStopTime        = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+10], 0
	mov	DWORD PTR [eax+14], 0

; 161  :     m_bTimerStopped     = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0
$LN4@Reset:

; 162  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Reset
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@Reset:
	DD	1
	DD	$LN7@Reset
$LN7@Reset:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN6@Reset
$LN6@Reset:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?Reset@CDXUTTimer@@QAEXXZ ENDP				; CDXUTTimer::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ??0CDXUTTimer@@QAE@XZ
_TEXT	SEGMENT
tv74 = -221						; size = 1
_qwTicksPerSec$ = -24					; size = 8
_this$ = -8						; size = 4
??0CDXUTTimer@@QAE@XZ PROC				; CDXUTTimer::CDXUTTimer, COMDAT
; _this$ = ecx

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 130  :     m_bUsingQPF         = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0

; 131  :     m_bTimerStopped     = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1

; 132  :     m_llQPFTicksPerSec  = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2], 0
	mov	DWORD PTR [eax+6], 0

; 133  : 
; 134  :     m_llStopTime        = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+10], 0
	mov	DWORD PTR [eax+14], 0

; 135  :     m_llLastElapsedTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+18], 0
	mov	DWORD PTR [eax+22], 0

; 136  :     m_llBaseTime        = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+26], 0
	mov	DWORD PTR [eax+30], 0

; 137  : 
; 138  :     // Use QueryPerformanceFrequency() to get frequency of timer.  
; 139  :     LARGE_INTEGER qwTicksPerSec;
; 140  :     m_bUsingQPF = (bool) (QueryPerformanceFrequency( &qwTicksPerSec ) != 0);

	mov	esi, esp
	lea	eax, DWORD PTR _qwTicksPerSec$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceFrequency@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@CDXUTTimer
	mov	BYTE PTR tv74[ebp], 1
	jmp	SHORT $LN4@CDXUTTimer
$LN3@CDXUTTimer:
	mov	BYTE PTR tv74[ebp], 0
$LN4@CDXUTTimer:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR [ecx], dl

; 141  :     m_llQPFTicksPerSec = qwTicksPerSec.QuadPart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qwTicksPerSec$[ebp]
	mov	DWORD PTR [eax+2], ecx
	mov	edx, DWORD PTR _qwTicksPerSec$[ebp+4]
	mov	DWORD PTR [eax+6], edx

; 142  : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CDXUTTimer
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@CDXUTTimer:
	DD	1
	DD	$LN6@CDXUTTimer
$LN6@CDXUTTimer:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN5@CDXUTTimer
$LN5@CDXUTTimer:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
??0CDXUTTimer@@QAE@XZ ENDP				; CDXUTTimer::CDXUTTimer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchLengthA@@YGJPBDIPAI@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_psz$ = 8						; size = 4
_cchMax$ = 12						; size = 4
_pcch$ = 16						; size = 4
?StringCchLengthA@@YGJPBDIPAI@Z PROC			; StringCchLengthA, COMDAT

; 4096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4097 :     HRESULT hr;
; 4098 : 
; 4099 :     if ((psz == NULL) || (cchMax > STRSAFE_MAX_CCH))

	cmp	DWORD PTR _psz$[ebp], 0
	je	SHORT $LN2@StringCchL
	cmp	DWORD PTR _cchMax$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN3@StringCchL
$LN2@StringCchL:

; 4100 :     {
; 4101 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 4102 :     }
; 4103 :     else

	jmp	SHORT $LN1@StringCchL
$LN3@StringCchL:

; 4104 :     {
; 4105 :         hr = StringLengthWorkerA(psz, cchMax, pcch);

	mov	eax, DWORD PTR _pcch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchMax$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psz$[ebp]
	push	edx
	call	?StringLengthWorkerA@@YGJPBDIPAI@Z	; StringLengthWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCchL:

; 4106 :     }
; 4107 : 
; 4108 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4109 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCchLengthA@@YGJPBDIPAI@Z ENDP			; StringCchLengthA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchPrintfA@@YAJPADIPBDZZ
_TEXT	SEGMENT
_argList$1 = -20					; size = 4
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
?StringCchPrintfA@@YAJPADIPBDZZ PROC			; StringCchPrintfA, COMDAT

; 2678 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2679 :     HRESULT hr;
; 2680 : 
; 2681 :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchP

; 2682 :     {
; 2683 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 2684 :     }
; 2685 :     else

	jmp	SHORT $LN1@StringCchP
$LN2@StringCchP:

; 2686 :     {
; 2687 :         va_list argList;
; 2688 : 
; 2689 :         va_start(argList, pszFormat);

	lea	eax, DWORD PTR _pszFormat$[ebp+4]
	mov	DWORD PTR _argList$1[ebp], eax

; 2690 : 
; 2691 :         hr = StringVPrintfWorkerA(pszDest, cchDest, pszFormat, argList);

	mov	eax, DWORD PTR _argList$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszDest$[ebp]
	push	eax
	call	?StringVPrintfWorkerA@@YGJPADIPBD0@Z	; StringVPrintfWorkerA
	mov	DWORD PTR _hr$[ebp], eax

; 2692 : 
; 2693 :         va_end(argList);

	mov	DWORD PTR _argList$1[ebp], 0
$LN1@StringCchP:

; 2694 :     }
; 2695 : 
; 2696 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 2697 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StringCchPrintfA@@YAJPADIPBDZZ ENDP			; StringCchPrintfA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchVPrintfA@@YGJPADIPBD0@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
_argList$ = 20						; size = 4
?StringCchVPrintfA@@YGJPADIPBD0@Z PROC			; StringCchVPrintfA, COMDAT

; 2453 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2454 :     HRESULT hr;
; 2455 : 
; 2456 :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchV

; 2457 :     {
; 2458 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 2459 :     }
; 2460 :     else

	jmp	SHORT $LN1@StringCchV
$LN2@StringCchV:

; 2461 :     {
; 2462 :         hr = StringVPrintfWorkerA(pszDest, cchDest, pszFormat, argList);

	mov	eax, DWORD PTR _argList$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszDest$[ebp]
	push	eax
	call	?StringVPrintfWorkerA@@YGJPADIPBD0@Z	; StringVPrintfWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCchV:

; 2463 :     }
; 2464 : 
; 2465 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 2466 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?StringCchVPrintfA@@YGJPADIPBD0@Z ENDP			; StringCchVPrintfA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchCatA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCchCatA@@YGJPADIPBD@Z PROC			; StringCchCatA, COMDAT

; 1347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1348 :     HRESULT hr;
; 1349 : 
; 1350 :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchC

; 1351 :     {
; 1352 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 1353 :     }
; 1354 :     else

	jmp	SHORT $LN1@StringCchC
$LN2@StringCchC:

; 1355 :     {
; 1356 :         hr = StringCatWorkerA(pszDest, cchDest, pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringCatWorkerA@@YGJPADIPBD@Z		; StringCatWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCchC:

; 1357 :     }
; 1358 : 
; 1359 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1360 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCchCatA@@YGJPADIPBD@Z ENDP			; StringCchCatA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchCopyA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCchCopyA@@YGJPADIPBD@Z PROC			; StringCchCopyA, COMDAT

; 231  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 232  :     HRESULT hr;
; 233  : 
; 234  :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchC

; 235  :     {
; 236  :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 237  :     }
; 238  :     else

	jmp	SHORT $LN1@StringCchC
$LN2@StringCchC:

; 239  :     {
; 240  :         hr = StringCopyWorkerA(pszDest, cchDest, pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringCopyWorkerA@@YGJPADIPBD@Z	; StringCopyWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCchC:

; 241  :     }
; 242  : 
; 243  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 244  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCchCopyA@@YGJPADIPBD@Z ENDP			; StringCchCopyA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringLengthWorkerA@@YGJPBDIPAI@Z
_TEXT	SEGMENT
_cchMaxPrev$ = -20					; size = 4
_hr$ = -8						; size = 4
_psz$ = 8						; size = 4
_cchMax$ = 12						; size = 4
_pcch$ = 16						; size = 4
?StringLengthWorkerA@@YGJPBDIPAI@Z PROC			; StringLengthWorkerA, COMDAT

; 5963 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5964 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 5965 :     size_t cchMaxPrev = cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchMaxPrev$[ebp], eax
$LN4@StringLeng:

; 5966 : 
; 5967 :     while (cchMax && (*psz != '\0'))

	cmp	DWORD PTR _cchMax$[ebp], 0
	je	SHORT $LN3@StringLeng
	mov	eax, DWORD PTR _psz$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StringLeng

; 5968 :     {
; 5969 :         psz++;

	mov	eax, DWORD PTR _psz$[ebp]
	add	eax, 1
	mov	DWORD PTR _psz$[ebp], eax

; 5970 :         cchMax--;

	mov	eax, DWORD PTR _cchMax$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchMax$[ebp], eax

; 5971 :     }

	jmp	SHORT $LN4@StringLeng
$LN3@StringLeng:

; 5972 : 
; 5973 :     if (cchMax == 0)

	cmp	DWORD PTR _cchMax$[ebp], 0
	jne	SHORT $LN2@StringLeng

; 5974 :     {
; 5975 :         // the string is longer than cchMax
; 5976 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
$LN2@StringLeng:

; 5977 :     }
; 5978 : 
; 5979 :     if (SUCCEEDED(hr) && pcch)

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringLeng
	cmp	DWORD PTR _pcch$[ebp], 0
	je	SHORT $LN1@StringLeng

; 5980 :     {
; 5981 :         *pcch = cchMaxPrev - cchMax;

	mov	eax, DWORD PTR _cchMaxPrev$[ebp]
	sub	eax, DWORD PTR _cchMax$[ebp]
	mov	ecx, DWORD PTR _pcch$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@StringLeng:

; 5982 :     }
; 5983 : 
; 5984 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 5985 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringLengthWorkerA@@YGJPBDIPAI@Z ENDP			; StringLengthWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringVPrintfWorkerA@@YGJPADIPBD0@Z
_TEXT	SEGMENT
_cchMax$1 = -32						; size = 4
_iRet$2 = -20						; size = 4
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
_argList$ = 20						; size = 4
?StringVPrintfWorkerA@@YGJPADIPBD0@Z PROC		; StringVPrintfWorkerA, COMDAT

; 5579 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5580 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 5581 : 
; 5582 :     if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN6@StringVPri

; 5583 :     {
; 5584 :         // can not null terminate a zero-byte dest buffer
; 5585 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 5586 :     }
; 5587 :     else

	jmp	SHORT $LN5@StringVPri
$LN6@StringVPri:

; 5588 :     {
; 5589 :         int iRet;
; 5590 :         size_t cchMax;
; 5591 : 
; 5592 :         // leave the last space for the null terminator
; 5593 :         cchMax = cchDest - 1;

	mov	eax, DWORD PTR _cchDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchMax$1[ebp], eax

; 5594 : 
; 5595 :         iRet = _vsnprintf(pszDest, cchMax, pszFormat, argList);

	mov	eax, DWORD PTR _argList$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchMax$1[ebp]
	push	edx
	mov	eax, DWORD PTR _pszDest$[ebp]
	push	eax
	call	__vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iRet$2[ebp], eax

; 5596 :         // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 5597 : 
; 5598 :         if ((iRet < 0) || (((size_t)iRet) > cchMax))

	cmp	DWORD PTR _iRet$2[ebp], 0
	jl	SHORT $LN3@StringVPri
	mov	eax, DWORD PTR _iRet$2[ebp]
	cmp	eax, DWORD PTR _cchMax$1[ebp]
	jbe	SHORT $LN4@StringVPri
$LN3@StringVPri:

; 5599 :         {
; 5600 :             // need to null terminate the string
; 5601 :             pszDest += cchMax;

	mov	eax, DWORD PTR _pszDest$[ebp]
	add	eax, DWORD PTR _cchMax$1[ebp]
	mov	DWORD PTR _pszDest$[ebp], eax

; 5602 :             *pszDest = '\0';

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	BYTE PTR [eax], 0

; 5603 : 
; 5604 :             // we have truncated pszDest
; 5605 :             hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR _hr$[ebp], -2147024774	; 8007007aH
	jmp	SHORT $LN5@StringVPri
$LN4@StringVPri:

; 5606 :         }
; 5607 :         else if (((size_t)iRet) == cchMax)

	mov	eax, DWORD PTR _iRet$2[ebp]
	cmp	eax, DWORD PTR _cchMax$1[ebp]
	jne	SHORT $LN5@StringVPri

; 5608 :         {
; 5609 :             // need to null terminate the string
; 5610 :             pszDest += cchMax;

	mov	eax, DWORD PTR _pszDest$[ebp]
	add	eax, DWORD PTR _cchMax$1[ebp]
	mov	DWORD PTR _pszDest$[ebp], eax

; 5611 :             *pszDest = '\0';

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	BYTE PTR [eax], 0
$LN5@StringVPri:

; 5612 :         }
; 5613 :     }
; 5614 : 
; 5615 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 5616 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?StringVPrintfWorkerA@@YGJPADIPBD0@Z ENDP		; StringVPrintfWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCatWorkerA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_cchDestCurrent$ = -20					; size = 4
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCatWorkerA@@YGJPADIPBD@Z PROC			; StringCatWorkerA, COMDAT

; 4923 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4924 :    HRESULT hr;
; 4925 :    size_t cchDestCurrent;
; 4926 : 
; 4927 :    hr = StringLengthWorkerA(pszDest, cchDest, &cchDestCurrent);

	lea	eax, DWORD PTR _cchDestCurrent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringLengthWorkerA@@YGJPBDIPAI@Z	; StringLengthWorkerA
	mov	DWORD PTR _hr$[ebp], eax

; 4928 : 
; 4929 :    if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringCatW

; 4930 :    {
; 4931 :        hr = StringCopyWorkerA(pszDest + cchDestCurrent,
; 4932 :                               cchDest - cchDestCurrent,
; 4933 :                               pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	sub	ecx, DWORD PTR _cchDestCurrent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	add	edx, DWORD PTR _cchDestCurrent$[ebp]
	push	edx
	call	?StringCopyWorkerA@@YGJPADIPBD@Z	; StringCopyWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCatW:

; 4934 :    }
; 4935 : 
; 4936 :    return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4937 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@StringCatW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN6@StringCatW:
	DD	1
	DD	$LN5@StringCatW
$LN5@StringCatW:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@StringCatW
$LN4@StringCatW:
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?StringCatWorkerA@@YGJPADIPBD@Z ENDP			; StringCatWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCopyWorkerA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCopyWorkerA@@YGJPADIPBD@Z PROC			; StringCopyWorkerA, COMDAT

; 4247 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4248 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 4249 : 
; 4250 :     if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN3@StringCopy

; 4251 :     {
; 4252 :         // can not null terminate a zero-byte dest buffer
; 4253 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 4254 :     }
; 4255 :     else

	jmp	SHORT $LN4@StringCopy
$LN3@StringCopy:

; 4256 :     {
; 4257 :         while (cchDest && (*pszSrc != '\0'))

	cmp	DWORD PTR _cchDest$[ebp], 0
	je	SHORT $LN2@StringCopy
	mov	eax, DWORD PTR _pszSrc$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@StringCopy

; 4258 :         {
; 4259 :             *pszDest++ = *pszSrc++;

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pszDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pszDest$[ebp], eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pszSrc$[ebp], ecx

; 4260 :             cchDest--;

	mov	eax, DWORD PTR _cchDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchDest$[ebp], eax

; 4261 :         }

	jmp	SHORT $LN3@StringCopy
$LN2@StringCopy:

; 4262 : 
; 4263 :         if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN1@StringCopy

; 4264 :         {
; 4265 :             // we are going to truncate pszDest
; 4266 :             pszDest--;

	mov	eax, DWORD PTR _pszDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pszDest$[ebp], eax

; 4267 :             hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR _hr$[ebp], -2147024774	; 8007007aH
$LN1@StringCopy:

; 4268 :         }
; 4269 : 
; 4270 :         *pszDest= '\0';

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	BYTE PTR [eax], 0
$LN4@StringCopy:

; 4271 :     }
; 4272 : 
; 4273 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4274 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCopyWorkerA@@YGJPADIPBD@Z ENDP			; StringCopyWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.cpp
;	COMDAT ?DXTraceWrapper@@YGJPBDKJ0H@Z
_TEXT	SEGMENT
_szBuffer$ = -1032					; size = 1024
__$ArrayPad$ = -4					; size = 4
_strFile$ = 8						; size = 4
_dwLine$ = 12						; size = 4
_hr$ = 16						; size = 4
_strMsg$ = 20						; size = 4
_bPopMsgBox$ = 24					; size = 4
?DXTraceWrapper@@YGJPBDKJ0H@Z PROC			; DXTraceWrapper, COMDAT

; 2841 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1228				; 000004ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1228]
	mov	ecx, 307				; 00000133H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2842 : #ifdef _DEBUG
; 2843 : 	TCHAR szBuffer[1024];
; 2844 : 	sprintf(szBuffer, "DXTrace: %s (%d) returned 0x%x, msg=%s", strFile, dwLine, hr, strMsg);

	mov	eax, DWORD PTR _strMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwLine$[ebp]
	push	edx
	mov	eax, DWORD PTR _strFile$[ebp]
	push	eax
	push	OFFSET ??_C@_0CH@FHFOAIFP@DXTrace?3?5?$CFs?5?$CI?$CFd?$CJ?5returned?50x?$CFx?0?5@
	lea	ecx, DWORD PTR _szBuffer$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 24					; 00000018H

; 2845 : 	OutputDebugString(szBuffer);

	mov	esi, esp
	lea	eax, DWORD PTR _szBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2846 : #endif
; 2847 : 	return 0;

	xor	eax, eax

; 2848 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DXTraceWra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1228				; 000004ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN5@DXTraceWra:
	DD	1
	DD	$LN4@DXTraceWra
$LN4@DXTraceWra:
	DD	-1032					; fffffbf8H
	DD	1024					; 00000400H
	DD	$LN3@DXTraceWra
$LN3@DXTraceWra:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?DXTraceWrapper@@YGJPBDKJ0H@Z ENDP			; DXTraceWrapper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z PROC ; D3DXQuaternionIdentity, COMDAT

; 2056 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2057 : #ifdef D3DX_DEBUG
; 2058 :     if(!pOut)
; 2059 :         return NULL;
; 2060 : #endif
; 2061 : 
; 2062 :     pOut->x = pOut->y = pOut->z = 0.0f;

	mov	eax, DWORD PTR _pOut$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	ecx, DWORD PTR _pOut$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _pOut$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0

; 2063 :     pOut->w = 1.0f;

	mov	eax, DWORD PTR _pOut$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 2064 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 2065 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ENDP ; D3DXQuaternionIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1981 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1982 : #ifdef D3DX_DEBUG
; 1983 :     if(!pOut)
; 1984 :         return NULL;
; 1985 : #endif
; 1986 : 
; 1987 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1988 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1989 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1990 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 1991 : 
; 1992 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1993 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1994 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXVec3Subtract@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Subtract@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Subtract, COMDAT

; 1772 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1773 : #ifdef D3DX_DEBUG
; 1774 :     if(!pOut || !pV1 || !pV2)
; 1775 :         return NULL;
; 1776 : #endif
; 1777 : 
; 1778 :     pOut->x = pV1->x - pV2->x;

	mov	eax, DWORD PTR _pV1$[ebp]
	mov	ecx, DWORD PTR _pV2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pOut$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1779 :     pOut->y = pV1->y - pV2->y;

	mov	eax, DWORD PTR _pV1$[ebp]
	mov	ecx, DWORD PTR _pV2$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pOut$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 1780 :     pOut->z = pV1->z - pV2->z;

	mov	eax, DWORD PTR _pV1$[ebp]
	mov	ecx, DWORD PTR _pV2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pOut$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 1781 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1782 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXVec3Subtract@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Subtract
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Cross, COMDAT

; 1740 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1741 :     D3DXVECTOR3 v;

	lea	ecx, DWORD PTR _v$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1742 : 
; 1743 : #ifdef D3DX_DEBUG
; 1744 :     if(!pOut || !pV1 || !pV2)
; 1745 :         return NULL;
; 1746 : #endif
; 1747 : 
; 1748 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

	mov	eax, DWORD PTR _pV1$[ebp]
	mov	ecx, DWORD PTR _pV2$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pV1$[ebp]
	mov	eax, DWORD PTR _pV2$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+4]
	subss	xmm0, xmm1
	movss	DWORD PTR _v$[ebp], xmm0

; 1749 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

	mov	eax, DWORD PTR _pV1$[ebp]
	mov	ecx, DWORD PTR _pV2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pV1$[ebp]
	mov	eax, DWORD PTR _pV2$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+8]
	subss	xmm0, xmm1
	movss	DWORD PTR _v$[ebp+4], xmm0

; 1750 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

	mov	eax, DWORD PTR _pV1$[ebp]
	mov	ecx, DWORD PTR _pV2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pV1$[ebp]
	mov	eax, DWORD PTR _pV2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax]
	subss	xmm0, xmm1
	movss	DWORD PTR _v$[ebp+8], xmm0

; 1751 : 
; 1752 :     *pOut = v;

	mov	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _v$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 1753 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1754 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@D3DXVec3Cr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@D3DXVec3Cr:
	DD	1
	DD	$LN4@D3DXVec3Cr
$LN4@D3DXVec3Cr:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@D3DXVec3Cr
$LN3@D3DXVec3Cr:
	DB	118					; 00000076H
	DB	0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv141 = -196						; size = 4
_pV1$ = 8						; size = 4
_pV2$ = 12						; size = 4
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z PROC		; D3DXVec3Dot, COMDAT

; 1729 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1730 : #ifdef D3DX_DEBUG
; 1731 :     if(!pV1 || !pV2)
; 1732 :         return 0.0f;
; 1733 : #endif
; 1734 : 
; 1735 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

	mov	eax, DWORD PTR _pV1$[ebp]
	mov	ecx, DWORD PTR _pV2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pV1$[ebp]
	mov	eax, DWORD PTR _pV2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _pV1$[ebp]
	mov	edx, DWORD PTR _pV2$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv141[ebp], xmm0
	fld	DWORD PTR tv141[ebp]

; 1736 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z ENDP		; D3DXVec3Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv141 = -196						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3LengthSq, COMDAT

; 1718 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1719 : #ifdef D3DX_DEBUG
; 1720 :     if(!pV)
; 1721 :         return 0.0f;
; 1722 : #endif
; 1723 : 
; 1724 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

	mov	eax, DWORD PTR _pV$[ebp]
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pV$[ebp]
	mov	eax, DWORD PTR _pV$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _pV$[ebp]
	mov	edx, DWORD PTR _pV$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv141[ebp], xmm0
	fld	DWORD PTR tv141[ebp]

; 1725 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXVec3LengthSq@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3LengthSq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pV$ = 8						; size = 4
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3Length, COMDAT

; 1703 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1704 : #ifdef D3DX_DEBUG
; 1705 :     if(!pV)
; 1706 :         return 0.0f;
; 1707 : #endif
; 1708 : 
; 1709 : #ifdef __cplusplus
; 1710 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

	mov	eax, DWORD PTR _pV$[ebp]
	mov	ecx, DWORD PTR _pV$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pV$[ebp]
	mov	eax, DWORD PTR _pV$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _pV$[ebp]
	mov	edx, DWORD PTR _pV$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4

; 1711 : #else
; 1712 :     return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
; 1713 : #endif
; 1714 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??BD3DXCOLOR@@QBEKXZ
_TEXT	SEGMENT
tv138 = -260						; size = 4
tv95 = -260						; size = 4
tv84 = -260						; size = 4
tv73 = -260						; size = 4
tv139 = -256						; size = 4
tv128 = -256						; size = 4
tv85 = -256						; size = 4
tv74 = -256						; size = 4
_dwA$ = -56						; size = 4
_dwB$ = -44						; size = 4
_dwG$ = -32						; size = 4
_dwR$ = -20						; size = 4
_this$ = -8						; size = 4
??BD3DXCOLOR@@QBEKXZ PROC				; D3DXCOLOR::operator unsigned long, COMDAT
; _this$ = ecx

; 1401 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1402 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN5@operator
	mov	DWORD PTR tv74[ebp], 255		; 000000ffH
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx]
	jb	SHORT $LN3@operator
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	call	__ftoui3
	mov	DWORD PTR tv73[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN6@operator:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _dwR$[ebp], ecx

; 1403 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN9@operator
	mov	DWORD PTR tv85[ebp], 255		; 000000ffH
	jmp	SHORT $LN10@operator
$LN9@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+4]
	jb	SHORT $LN7@operator
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	call	__ftoui3
	mov	DWORD PTR tv84[ebp], eax
$LN8@operator:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv85[ebp], eax
$LN10@operator:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _dwG$[ebp], ecx

; 1404 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN13@operator
	mov	DWORD PTR tv128[ebp], 255		; 000000ffH
	jmp	SHORT $LN14@operator
$LN13@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+8]
	jb	SHORT $LN11@operator
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	call	__ftoui3
	mov	DWORD PTR tv95[ebp], eax
$LN12@operator:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv128[ebp], eax
$LN14@operator:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _dwB$[ebp], ecx

; 1405 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN17@operator
	mov	DWORD PTR tv139[ebp], 255		; 000000ffH
	jmp	SHORT $LN18@operator
$LN17@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+12]
	jb	SHORT $LN15@operator
	mov	DWORD PTR tv138[ebp], 0
	jmp	SHORT $LN16@operator
$LN15@operator:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	call	__ftoui3
	mov	DWORD PTR tv138[ebp], eax
$LN16@operator:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN18@operator:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _dwA$[ebp], ecx

; 1406 : 
; 1407 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

	mov	eax, DWORD PTR _dwA$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _dwR$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _dwG$[ebp]
	shl	edx, 8
	or	eax, edx
	or	eax, DWORD PTR _dwB$[ebp]

; 1408 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??BD3DXCOLOR@@QBEKXZ ENDP				; D3DXCOLOR::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
??0D3DXCOLOR@@QAE@MMMM@Z PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 1390 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1391 :     r = fr;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fr$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1392 :     g = fg;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fg$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1393 :     b = fb;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fb$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 1394 :     a = fa;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fa$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1395 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0D3DXCOLOR@@QAE@MMMM@Z ENDP				; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXCOLOR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXCOLOR@@QAE@XZ PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 516  :     D3DXCOLOR() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXCOLOR@@QAE@XZ ENDP				; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
_qT$ = -32						; size = 16
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_q$ = 12						; size = 4
??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z PROC			; D3DXQUATERNION::operator*, COMDAT
; _this$ = ecx

; 1174 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1175 :     D3DXQUATERNION qT;

	lea	ecx, DWORD PTR _qT$[ebp]
	call	??0D3DXQUATERNION@@QAE@XZ		; D3DXQUATERNION::D3DXQUATERNION

; 1176 :     D3DXQuaternionMultiply(&qT, this, &q);

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _qT$[ebp]
	push	edx
	call	_D3DXQuaternionMultiply@12

; 1177 :     return qT;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _qT$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _qT$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _qT$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _qT$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1178 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@operator
$LN3@operator:
	DB	113					; 00000071H
	DB	84					; 00000054H
	DB	0
??DD3DXQUATERNION@@QBE?AU0@ABU0@@Z ENDP			; D3DXQUATERNION::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fw$ = 20						; size = 4
??0D3DXQUATERNION@@QAE@MMMM@Z PROC			; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 1073 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1074 :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1075 :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fy$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1076 :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fz$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 1077 :     w = fw;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fw$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1078 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0D3DXQUATERNION@@QAE@MMMM@Z ENDP			; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 429  :     D3DXQUATERNION() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??4_D3DXMATRIXA16@@QAEAAU0@ABUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rhs$ = 8						; size = 4
??4_D3DXMATRIXA16@@QAEAAU0@ABUD3DXMATRIX@@@Z PROC	; _D3DXMATRIXA16::operator=, COMDAT
; _this$ = ecx

; 1036 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1037 :     memcpy(&_11, &rhs, sizeof(D3DXMATRIX));

	push	64					; 00000040H
	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1038 :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1039 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4_D3DXMATRIXA16@@QAEAAU0@ABUD3DXMATRIX@@@Z ENDP	; _D3DXMATRIXA16::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0_D3DXMATRIXA16@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_D3DXMATRIXA16@@QAE@XZ PROC				; _D3DXMATRIXA16::_D3DXMATRIXA16, COMDAT
; _this$ = ecx

; 382  :     _D3DXMATRIXA16() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_D3DXMATRIXA16@@QAE@XZ ENDP				; _D3DXMATRIXA16::_D3DXMATRIXA16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??DD3DXMATRIX@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
_matT$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat$ = 12						; size = 4
??DD3DXMATRIX@@QBE?AU0@ABU0@@Z PROC			; D3DXMATRIX::operator*, COMDAT
; _this$ = ecx

; 884  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 885  :     D3DXMATRIX matT;

	lea	ecx, DWORD PTR _matT$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 886  :     D3DXMatrixMultiply(&matT, this, &mat);

	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _matT$[ebp]
	push	edx
	call	_D3DXMatrixMultiply@12

; 887  :     return matT;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _matT$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 888  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN3@operator
$LN3@operator:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	0
??DD3DXMATRIX@@QBE?AU0@ABU0@@Z ENDP			; D3DXMATRIX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??XD3DXMATRIX@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_mat$ = 8						; size = 4
??XD3DXMATRIX@@QAEAAU0@ABU0@@Z PROC			; D3DXMATRIX::operator*=, COMDAT
; _this$ = ecx

; 817  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 818  :     D3DXMatrixMultiply(this, this, &mat);

	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_D3DXMatrixMultiply@12

; 819  :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 820  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??XD3DXMATRIX@@QAEAAU0@ABU0@@Z ENDP			; D3DXMATRIX::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??KD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
_fInv$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??KD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator/, COMDAT
; _this$ = ecx

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 400  :     FLOAT fInv = 1.0f / f;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _f$[ebp]
	movss	DWORD PTR _fInv$[ebp], xmm0

; 401  :     return D3DXVECTOR3(x * fInv, y * fInv, z * fInv);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _fInv$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _fInv$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _fInv$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??KD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator/
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??DD3DXVECTOR3@@QBE?AU0@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR3@@QBE?AU0@M@Z PROC			; D3DXVECTOR3::operator*, COMDAT
; _this$ = ecx

; 393  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 394  :     return D3DXVECTOR3(x * f, y * f, z * f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _f$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _f$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR _f$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 395  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??DD3DXVECTOR3@@QBE?AU0@M@Z ENDP			; D3DXVECTOR3::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 387  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 388  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 389  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 381  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 382  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 383  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??XD3DXVECTOR3@@QAEAAU0@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_f$ = 8							; size = 4
??XD3DXVECTOR3@@QAEAAU0@M@Z PROC			; D3DXVECTOR3::operator*=, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 347  :     x *= f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 348  :     y *= f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 349  :     z *= f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 350  :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 351  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XD3DXVECTOR3@@QAEAAU0@M@Z ENDP			; D3DXVECTOR3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-=, COMDAT
; _this$ = ecx

; 337  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 338  :     x -= v.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 339  :     y -= v.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 340  :     z -= v.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 341  :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 342  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ZD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 329  :     x += v.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 330  :     y += v.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 331  :     z += v.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 332  :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 333  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 305  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 306  :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fy$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 307  :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fz$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 308  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??DD3DXVECTOR2@@QBE?AU0@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
??DD3DXVECTOR2@@QBE?AU0@M@Z PROC			; D3DXVECTOR2::operator*, COMDAT
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  :     return D3DXVECTOR2(x * f, y * f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _f$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _f$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR2@@QAE@MM@Z		; D3DXVECTOR2::D3DXVECTOR2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 176  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??DD3DXVECTOR2@@QBE?AU0@M@Z ENDP			; D3DXVECTOR2::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
??0D3DXVECTOR2@@QAE@MM@Z PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 91   :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 92   :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fy$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 93   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0D3DXVECTOR2@@QAE@MM@Z ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXVECTOR2@@QAE@XZ PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 91   :     D3DXVECTOR2() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXVECTOR2@@QAE@XZ ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 775  :     return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 776  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -196						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 648  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 649  :     return (float)atan2(_Y, _X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 650  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 103  :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __Where$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\string.h
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT

; 228  :         { return (char*)strstr((const char*)_Str, _SubStr); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __SubStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strstr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\string.h
;	COMDAT ?strrchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADPADH@Z PROC				; strrchr, COMDAT

; 226  :         { return (char*)strrchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strrchr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?strrchr@@YAPADPADH@Z ENDP				; strrchr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
