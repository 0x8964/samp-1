; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\net\netrpc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_change_car_skin DW 06edH
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_add_car_component DW 06e7H
	DB	'iiv', 00H
	ORG $+12
	ORG $+2
_is_component_available DW 06eaH
	DB	'i', 00H
	ORG $+14
	ORG $+2
_request_car_component DW 06e9H
	DB	'i', 00H
	ORG $+14
CONST	ENDS
PUBLIC	?ToggleCheckpoints@CGame@@QAEXH@Z		; CGame::ToggleCheckpoints
PUBLIC	?ToggleRaceCheckpoints@CGame@@QAEXH@Z		; CGame::ToggleRaceCheckpoints
PUBLIC	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ	; CGame::FindPlayerPed
PUBLIC	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z	; RakNet::BitStream::Read<bool>
PUBLIC	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z		; RakNet::BitStream::Read<unsigned short>
PUBLIC	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z		; RakNet::BitStream::Read<unsigned long>
PUBLIC	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
PUBLIC	?IsActive@CRemotePlayer@@QAEHXZ			; CRemotePlayer::IsActive
PUBLIC	?RegisterRPCs@@YAXPAVRakClientInterface@@@Z	; RegisterRPCs
PUBLIC	?UnRegisterRPCs@@YAXPAVRakClientInterface@@@Z	; UnRegisterRPCs
PUBLIC	?GetLocalPlayerName@CPlayerPool@@QAEPADXZ	; CPlayerPool::GetLocalPlayerName
PUBLIC	?GetPlayerName@CPlayerPool@@QAEPADE@Z		; CPlayerPool::GetPlayerName
PUBLIC	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
PUBLIC	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z	; CPlayerPool::GetAt
PUBLIC	?GetSlotState@CPlayerPool@@QAEHE@Z		; CPlayerPool::GetSlotState
PUBLIC	?SetLocalPlayerID@CPlayerPool@@QAEXE@Z		; CPlayerPool::SetLocalPlayerID
PUBLIC	?GetLocalPlayerID@CPlayerPool@@QAEEXZ		; CPlayerPool::GetLocalPlayerID
PUBLIC	?UpdateScore@CPlayerPool@@QAEXEH@Z		; CPlayerPool::UpdateScore
PUBLIC	?UpdatePing@CPlayerPool@@QAEXEK@Z		; CPlayerPool::UpdatePing
PUBLIC	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z	; CVehiclePool::GetAt
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
PUBLIC	?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ	; CNetGame::GetPickupPool
PUBLIC	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
PUBLIC	?GetGameState@CNetGame@@QAEHXZ			; CNetGame::GetGameState
PUBLIC	?SetGameState@CNetGame@@QAEXH@Z			; CNetGame::SetGameState
PUBLIC	?SetLanMode@CNetGame@@QAEXH@Z			; CNetGame::SetLanMode
PUBLIC	?ServerJoin@@YAXPAURPCParameters@@@Z		; ServerJoin
PUBLIC	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z		; RakNet::BitStream::Read<unsigned char>
PUBLIC	?ServerQuit@@YAXPAURPCParameters@@@Z		; ServerQuit
PUBLIC	?InitGame@@YAXPAURPCParameters@@@Z		; InitGame
PUBLIC	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z		; RakNet::BitStream::Read<int>
PUBLIC	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z		; RakNet::BitStream::Read<float>
PUBLIC	?Chat@@YAXPAURPCParameters@@@Z			; Chat
PUBLIC	?Privmsg@@YAXPAURPCParameters@@@Z		; Privmsg
PUBLIC	?TeamPrivmsg@@YAXPAURPCParameters@@@Z		; TeamPrivmsg
PUBLIC	?RequestClass@@YAXPAURPCParameters@@@Z		; RequestClass
PUBLIC	?RequestSpawn@@YAXPAURPCParameters@@@Z		; RequestSpawn
PUBLIC	?Spawn@@YAXPAURPCParameters@@@Z			; Spawn
PUBLIC	?Death@@YAXPAURPCParameters@@@Z			; Death
PUBLIC	?EnterVehicle@@YAXPAURPCParameters@@@Z		; EnterVehicle
PUBLIC	?ExitVehicle@@YAXPAURPCParameters@@@Z		; ExitVehicle
PUBLIC	?VehicleSpawn@@YAXPAURPCParameters@@@Z		; VehicleSpawn
PUBLIC	?SetCheckpoint@@YAXPAURPCParameters@@@Z		; SetCheckpoint
PUBLIC	?DisableCheckpoint@@YAXPAURPCParameters@@@Z	; DisableCheckpoint
PUBLIC	?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z	; SetRaceCheckpoint
PUBLIC	?DisableRaceCheckpoint@@YAXPAURPCParameters@@@Z	; DisableRaceCheckpoint
PUBLIC	?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z	; UpdateScoresPingsIPs
PUBLIC	?SvrStats@@YAXPAURPCParameters@@@Z		; SvrStats
PUBLIC	?GameModeRestart@@YAXPAURPCParameters@@@Z	; GameModeRestart
PUBLIC	?ConnectionRejected@@YAXPAURPCParameters@@@Z	; ConnectionRejected
PUBLIC	?ClientMessage@@YAXPAURPCParameters@@@Z		; ClientMessage
PUBLIC	?WorldTime@@YAXPAURPCParameters@@@Z		; WorldTime
PUBLIC	?Pickup@@YAXPAURPCParameters@@@Z		; Pickup
PUBLIC	?DestroyPickup@@YAXPAURPCParameters@@@Z		; DestroyPickup
PUBLIC	?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z	; DestroyWeaponPickup
PUBLIC	?ScmEvent@@YAXPAURPCParameters@@@Z		; ScmEvent
PUBLIC	?Weather@@YAXPAURPCParameters@@@Z		; Weather
PUBLIC	?SetTimeEx@@YAXPAURPCParameters@@@Z		; SetTimeEx
PUBLIC	?ToggleClock@@YAXPAURPCParameters@@@Z		; ToggleClock
PUBLIC	?VehicleDestroy@@YAXPAURPCParameters@@@Z	; VehicleDestroy
PUBLIC	?Instagib@@YAXPAURPCParameters@@@Z		; Instagib
PUBLIC	?ACServerProtected@@YAXPAURPCParameters@@@Z	; ACServerProtected
PUBLIC	??_C@_0BD@KFGPICNB@Connected?5to?5?$CF?464s?$AA@ ; `string'
PUBLIC	??_C@_0BC@PKJNNCMA@PM?5sent?5to?5?$CFs?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BB@DKFJCKKK@Team?5PM?5sent?3?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0DF@FHGNCEJE@DISCONNECTED?4?5THE?5SERVER?5DID?5NOT@ ; `string'
PUBLIC	??_C@_0CD@KKBLHDMA@CONNECTION?5REJECTED?4?5BAD?5NICKNAM@ ; `string'
PUBLIC	??_C@_0DD@OJMCIJGC@Please?5choose?5another?5nick?5betwe@ ; `string'
PUBLIC	??_C@_0CF@HFPHDI@containing?5only?5A?9Z?5a?9z?50?99?5?$FL?5?$FN?5@ ; `string'
PUBLIC	??_C@_0DE@JENICEMD@Use?5?1quit?5to?5exit?5or?5press?5ESC?5a@ ; `string'
PUBLIC	??_C@_0BE@OCOLJLIB@CONNECTION?5REJECTED?$AA@	; `string'
PUBLIC	??_C@_0CA@ELECFPLF@YOUR?8RE?5USING?5AN?5INCORRECT?5MOD?$CB?$AA@ ; `string'
PUBLIC	??_C@_0CF@JGECIGLM@Connection?5was?5closed?5by?5the?5ser@ ; `string'
PUBLIC	??_C@_0CN@HMNEEMPB@Unable?5to?5allocate?5a?5player?5slot@ ; `string'
PUBLIC	??_C@_02KEKBNNLK@xy?$AA@			; `string'
PUBLIC	??_C@_02BOGAIONP@ab?$AA@			; `string'
PUBLIC	??_C@_02HHLLPJO@ac?$AA@				; `string'
PUBLIC	??_C@_02EIDKCJFJ@ad?$AA@			; `string'
PUBLIC	??_C@_02FBCBBIBI@ae?$AA@			; `string'
PUBLIC	??_C@_02HKAMELNL@af?$AA@			; `string'
PUBLIC	??_C@_02GDBHHKJK@ag?$AA@			; `string'
PUBLIC	??_C@_02OEIPGGFF@ah?$AA@			; `string'
PUBLIC	??_C@_02PNJEFHBE@ai?$AA@			; `string'
PUBLIC	??_C@_02NGLJAENH@aj?$AA@			; `string'
PUBLIC	??_C@_02MPKCDFJG@ak?$AA@			; `string'
PUBLIC	??_C@_02IAODKDFB@al?$AA@			; `string'
PUBLIC	??_C@_02JJPIJCBA@am?$AA@			; `string'
PUBLIC	??_C@_02LCNFMBND@an?$AA@			; `string'
PUBLIC	??_C@_02KLMOPAJC@ao?$AA@			; `string'
PUBLIC	??_C@_02GGJEPOAM@ap?$AA@			; `string'
PUBLIC	??_C@_02HPIPMPEN@aq?$AA@			; `string'
PUBLIC	??_C@_02FEKCJMIO@ar?$AA@			; `string'
PUBLIC	??_C@_02ENLJKNMP@as?$AA@			; `string'
PUBLIC	??_C@_02JOPBDKMM@em?$AA@			; `string'
PUBLIC	??_C@_02CPIDLAI@at?$AA@				; `string'
PUBLIC	??_C@_02BLODAKEJ@au?$AA@			; `string'
PUBLIC	??_C@_02DAMOFJIK@av?$AA@			; `string'
PUBLIC	??_C@_02CJNFGIML@aw?$AA@			; `string'
PUBLIC	??_C@_02KOENHEAE@ax?$AA@			; `string'
PUBLIC	??_C@_02LHFGEFEF@ay?$AA@			; `string'
PUBLIC	??_C@_02JMHLBGIG@az?$AA@			; `string'
PUBLIC	??_C@_02DHALGDEF@ba?$AA@			; `string'
PUBLIC	??_C@_02BMCGDAIG@bb?$AA@			; `string'
PUBLIC	??_C@_02FDNABMH@bc?$AA@				; `string'
PUBLIC	??_C@_02FDGHKGEB@be?$AA@			; `string'
PUBLIC	??_C@_02HIEKPFIC@bf?$AA@			; `string'
PUBLIC	??_C@_02EKHMJHAA@bd?$AA@			; `string'
PUBLIC	__real@00000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_sprintf:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z:PROC	; CEntity::GetMatrix
EXTRN	?SetColor@CVehicle@@QAEXHH@Z:PROC		; CVehicle::SetColor
EXTRN	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z:PROC ; CPlayerPed::RemoveFromVehicleAndPutAt
EXTRN	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ:PROC ; CPlayerPed::GetGtaVehicle
EXTRN	??0CPlayerPed@@QAE@XZ:PROC			; CPlayerPed::CPlayerPed
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	?RequestModel@CGame@@QAEXH@Z:PROC		; CGame::RequestModel
EXTRN	?LoadRequestedModels@CGame@@QAEXXZ:PROC		; CGame::LoadRequestedModels
EXTRN	?SetWorldTime@CGame@@QAEXHH@Z:PROC		; CGame::SetWorldTime
EXTRN	?GetWorldTime@CGame@@QAEXPAH0@Z:PROC		; CGame::GetWorldTime
EXTRN	?SetGravity@CGame@@QAEXM@Z:PROC			; CGame::SetGravity
EXTRN	?EnableClock@CGame@@QAEXE@Z:PROC		; CGame::EnableClock
EXTRN	?EnableStuntBonus@CGame@@QAEX_N@Z:PROC		; CGame::EnableStuntBonus
EXTRN	?SetCheckpointInformation@CGame@@QAEXPAU_VECTOR@@0@Z:PROC ; CGame::SetCheckpointInformation
EXTRN	?SetRaceCheckpointInformation@CGame@@QAEXEPAU_VECTOR@@0M@Z:PROC ; CGame::SetRaceCheckpointInformation
EXTRN	?DisableEnterExits@CGame@@QAEXXZ:PROC		; CGame::DisableEnterExits
EXTRN	??0BitStream@RakNet@@QAE@PADI_N@Z:PROC		; RakNet::BitStream::BitStream
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?Read@BitStream@RakNet@@QAE_NPADH@Z:PROC	; RakNet::BitStream::Read
EXTRN	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z:PROC	; RakNet::BitStream::ReadBits
EXTRN	?SetSpawnInfo@CLocalPlayer@@QAEXPAU_PLAYER_SPAWN_INFO@@@Z:PROC ; CLocalPlayer::SetSpawnInfo
EXTRN	?Spawn@CLocalPlayer@@QAEHXZ:PROC		; CLocalPlayer::Spawn
EXTRN	?GetPlayerColorAsARGB@CLocalPlayer@@QAEKXZ:PROC	; CLocalPlayer::GetPlayerColorAsARGB
EXTRN	?HandleClassSelectionOutcome@CLocalPlayer@@QAEXH@Z:PROC ; CLocalPlayer::HandleClassSelectionOutcome
EXTRN	?HandleClassSelection@CLocalPlayer@@QAEXXZ:PROC	; CLocalPlayer::HandleClassSelection
EXTRN	?ForceOutOfCurrentVehicle@CRemotePlayer@@QAEXXZ:PROC ; CRemotePlayer::ForceOutOfCurrentVehicle
EXTRN	?Say@CRemotePlayer@@QAEXPAE@Z:PROC		; CRemotePlayer::Say
EXTRN	?Privmsg@CRemotePlayer@@QAEXPAD@Z:PROC		; CRemotePlayer::Privmsg
EXTRN	?TeamPrivmsg@CRemotePlayer@@QAEXPAD@Z:PROC	; CRemotePlayer::TeamPrivmsg
EXTRN	?Spawn@CRemotePlayer@@QAEHEHPAU_VECTOR@@MK@Z:PROC ; CRemotePlayer::Spawn
EXTRN	?HandleDeath@CRemotePlayer@@QAEXXZ:PROC		; CRemotePlayer::HandleDeath
EXTRN	?EnterVehicle@CRemotePlayer@@QAEXGH@Z:PROC	; CRemotePlayer::EnterVehicle
EXTRN	?ExitVehicle@CRemotePlayer@@QAEXXZ:PROC		; CRemotePlayer::ExitVehicle
EXTRN	?New@CPlayerPool@@QAEHEPAD@Z:PROC		; CPlayerPool::New
EXTRN	?Delete@CPlayerPool@@QAEHEE@Z:PROC		; CPlayerPool::Delete
EXTRN	?New@CVehiclePool@@QAEHGHPAU_VECTOR@@MHH0MHPAD@Z:PROC ; CVehiclePool::New
EXTRN	?Delete@CVehiclePool@@QAEHG@Z:PROC		; CVehiclePool::Delete
EXTRN	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z:PROC ; CVehiclePool::FindIDFromGtaPtr
EXTRN	?FindGtaIDFromID@CVehiclePool@@QAEHH@Z:PROC	; CVehiclePool::FindGtaIDFromID
EXTRN	?New@CPickupPool@@QAEXPAU_PICKUP@@H@Z:PROC	; CPickupPool::New
EXTRN	?Destroy@CPickupPool@@QAEXH@Z:PROC		; CPickupPool::Destroy
EXTRN	?DestroyDropped@CPickupPool@@QAEXE@Z:PROC	; CPickupPool::DestroyDropped
EXTRN	?InitGameLogic@CNetGame@@QAEXXZ:PROC		; CNetGame::InitGameLogic
EXTRN	?ShutdownForGameModeRestart@CNetGame@@QAEXXZ:PROC ; CNetGame::ShutdownForGameModeRestart
EXTRN	?AddChatMessage@CChatWindow@@QAEXPADK0@Z:PROC	; CChatWindow::AddChatMessage
EXTRN	?AddInfoMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddInfoMessage
EXTRN	?AddDebugMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddDebugMessage
EXTRN	?AddClientMessage@CChatWindow@@QAEXKPAD@Z:PROC	; CChatWindow::AddClientMessage
EXTRN	?ProcessIncommingEvent@@YAXEHKKK@Z:PROC		; ProcessIncommingEvent
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pChatWindow@@3PAVCChatWindow@@A:DWORD		; pChatWindow
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	?RakServerStats@@3URakNetStatisticsStruct@@A:BYTE ; RakServerStats
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_02EKHMJHAA@bd?$AA@
CONST	SEGMENT
??_C@_02EKHMJHAA@bd?$AA@ DB 'bd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIEKPFIC@bf?$AA@
CONST	SEGMENT
??_C@_02HIEKPFIC@bf?$AA@ DB 'bf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FDGHKGEB@be?$AA@
CONST	SEGMENT
??_C@_02FDGHKGEB@be?$AA@ DB 'be', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FDNABMH@bc?$AA@
CONST	SEGMENT
??_C@_02FDNABMH@bc?$AA@ DB 'bc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BMCGDAIG@bb?$AA@
CONST	SEGMENT
??_C@_02BMCGDAIG@bb?$AA@ DB 'bb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DHALGDEF@ba?$AA@
CONST	SEGMENT
??_C@_02DHALGDEF@ba?$AA@ DB 'ba', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JMHLBGIG@az?$AA@
CONST	SEGMENT
??_C@_02JMHLBGIG@az?$AA@ DB 'az', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHFGEFEF@ay?$AA@
CONST	SEGMENT
??_C@_02LHFGEFEF@ay?$AA@ DB 'ay', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KOENHEAE@ax?$AA@
CONST	SEGMENT
??_C@_02KOENHEAE@ax?$AA@ DB 'ax', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CJNFGIML@aw?$AA@
CONST	SEGMENT
??_C@_02CJNFGIML@aw?$AA@ DB 'aw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DAMOFJIK@av?$AA@
CONST	SEGMENT
??_C@_02DAMOFJIK@av?$AA@ DB 'av', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BLODAKEJ@au?$AA@
CONST	SEGMENT
??_C@_02BLODAKEJ@au?$AA@ DB 'au', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CPIDLAI@at?$AA@
CONST	SEGMENT
??_C@_02CPIDLAI@at?$AA@ DB 'at', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOPBDKMM@em?$AA@
CONST	SEGMENT
??_C@_02JOPBDKMM@em?$AA@ DB 'em', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02ENLJKNMP@as?$AA@
CONST	SEGMENT
??_C@_02ENLJKNMP@as?$AA@ DB 'as', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FEKCJMIO@ar?$AA@
CONST	SEGMENT
??_C@_02FEKCJMIO@ar?$AA@ DB 'ar', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HPIPMPEN@aq?$AA@
CONST	SEGMENT
??_C@_02HPIPMPEN@aq?$AA@ DB 'aq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GGJEPOAM@ap?$AA@
CONST	SEGMENT
??_C@_02GGJEPOAM@ap?$AA@ DB 'ap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KLMOPAJC@ao?$AA@
CONST	SEGMENT
??_C@_02KLMOPAJC@ao?$AA@ DB 'ao', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LCNFMBND@an?$AA@
CONST	SEGMENT
??_C@_02LCNFMBND@an?$AA@ DB 'an', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JJPIJCBA@am?$AA@
CONST	SEGMENT
??_C@_02JJPIJCBA@am?$AA@ DB 'am', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAODKDFB@al?$AA@
CONST	SEGMENT
??_C@_02IAODKDFB@al?$AA@ DB 'al', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPKCDFJG@ak?$AA@
CONST	SEGMENT
??_C@_02MPKCDFJG@ak?$AA@ DB 'ak', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NGLJAENH@aj?$AA@
CONST	SEGMENT
??_C@_02NGLJAENH@aj?$AA@ DB 'aj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNJEFHBE@ai?$AA@
CONST	SEGMENT
??_C@_02PNJEFHBE@ai?$AA@ DB 'ai', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OEIPGGFF@ah?$AA@
CONST	SEGMENT
??_C@_02OEIPGGFF@ah?$AA@ DB 'ah', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GDBHHKJK@ag?$AA@
CONST	SEGMENT
??_C@_02GDBHHKJK@ag?$AA@ DB 'ag', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HKAMELNL@af?$AA@
CONST	SEGMENT
??_C@_02HKAMELNL@af?$AA@ DB 'af', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FBCBBIBI@ae?$AA@
CONST	SEGMENT
??_C@_02FBCBBIBI@ae?$AA@ DB 'ae', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EIDKCJFJ@ad?$AA@
CONST	SEGMENT
??_C@_02EIDKCJFJ@ad?$AA@ DB 'ad', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HHLLPJO@ac?$AA@
CONST	SEGMENT
??_C@_02HHLLPJO@ac?$AA@ DB 'ac', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BOGAIONP@ab?$AA@
CONST	SEGMENT
??_C@_02BOGAIONP@ab?$AA@ DB 'ab', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEKBNNLK@xy?$AA@
CONST	SEGMENT
??_C@_02KEKBNNLK@xy?$AA@ DB 'xy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HMNEEMPB@Unable?5to?5allocate?5a?5player?5slot@
CONST	SEGMENT
??_C@_0CN@HMNEEMPB@Unable?5to?5allocate?5a?5player?5slot@ DB 'Unable to a'
	DB	'llocate a player slot. Try again.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JGECIGLM@Connection?5was?5closed?5by?5the?5ser@
CONST	SEGMENT
??_C@_0CF@JGECIGLM@Connection?5was?5closed?5by?5the?5ser@ DB 'Connection '
	DB	'was closed by the server.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@ELECFPLF@YOUR?8RE?5USING?5AN?5INCORRECT?5MOD?$CB?$AA@
CONST	SEGMENT
??_C@_0CA@ELECFPLF@YOUR?8RE?5USING?5AN?5INCORRECT?5MOD?$CB?$AA@ DB 'YOUR'''
	DB	'RE USING AN INCORRECT MOD!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OCOLJLIB@CONNECTION?5REJECTED?$AA@
CONST	SEGMENT
??_C@_0BE@OCOLJLIB@CONNECTION?5REJECTED?$AA@ DB 'CONNECTION REJECTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JENICEMD@Use?5?1quit?5to?5exit?5or?5press?5ESC?5a@
CONST	SEGMENT
??_C@_0DE@JENICEMD@Use?5?1quit?5to?5exit?5or?5press?5ESC?5a@ DB 'Use /qui'
	DB	't to exit or press ESC and select Quit Game', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HFPHDI@containing?5only?5A?9Z?5a?9z?50?99?5?$FL?5?$FN?5@
CONST	SEGMENT
??_C@_0CF@HFPHDI@containing?5only?5A?9Z?5a?9z?50?99?5?$FL?5?$FN?5@ DB 'co'
	DB	'ntaining only A-Z a-z 0-9 [ ] or _', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OJMCIJGC@Please?5choose?5another?5nick?5betwe@
CONST	SEGMENT
??_C@_0DD@OJMCIJGC@Please?5choose?5another?5nick?5betwe@ DB 'Please choos'
	DB	'e another nick between 3-16 characters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KKBLHDMA@CONNECTION?5REJECTED?4?5BAD?5NICKNAM@
CONST	SEGMENT
??_C@_0CD@KKBLHDMA@CONNECTION?5REJECTED?4?5BAD?5NICKNAM@ DB 'CONNECTION R'
	DB	'EJECTED. BAD NICKNAME!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FHGNCEJE@DISCONNECTED?4?5THE?5SERVER?5DID?5NOT@
CONST	SEGMENT
??_C@_0DF@FHGNCEJE@DISCONNECTED?4?5THE?5SERVER?5DID?5NOT@ DB 'DISCONNECTE'
	DB	'D. THE SERVER DID NOT ALLOW A CONNECTION.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DKFJCKKK@Team?5PM?5sent?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BB@DKFJCKKK@Team?5PM?5sent?3?5?$CFs?$AA@ DB 'Team PM sent: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PKJNNCMA@PM?5sent?5to?5?$CFs?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BC@PKJNNCMA@PM?5sent?5to?5?$CFs?3?5?$CFs?$AA@ DB 'PM sent to %s: %'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KFGPICNB@Connected?5to?5?$CF?464s?$AA@
CONST	SEGMENT
??_C@_0BD@KFGPICNB@Connected?5to?5?$CF?464s?$AA@ DB 'Connected to %.64s', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Instagib@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Instagib@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?Instagib@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Instagib@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?VehicleDestroy@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VehicleDestroy@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?VehicleDestroy@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?VehicleDestroy@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ToggleClock@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ToggleClock@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?ToggleClock@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ToggleClock@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetTimeEx@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetTimeEx@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?SetTimeEx@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetTimeEx@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Weather@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Weather@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?Weather@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Weather@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ScmEvent@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScmEvent@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?ScmEvent@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ScmEvent@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DestroyPickup@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DestroyPickup@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?DestroyPickup@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DestroyPickup@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Pickup@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Pickup@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?Pickup@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Pickup@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?WorldTime@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WorldTime@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?WorldTime@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WorldTime@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ClientMessage@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ClientMessage@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?ClientMessage@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ClientMessage@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConnectionRejected@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConnectionRejected@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?ConnectionRejected@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConnectionRejected@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SvrStats@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SvrStats@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?SvrStats@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SvrStats@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetCheckpoint@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetCheckpoint@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?SetCheckpoint@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetCheckpoint@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?VehicleSpawn@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?VehicleSpawn@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?VehicleSpawn@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?VehicleSpawn@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ExitVehicle@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ExitVehicle@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?ExitVehicle@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ExitVehicle@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EnterVehicle@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EnterVehicle@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?EnterVehicle@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EnterVehicle@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Death@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Death@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?Death@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Death@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Spawn@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Spawn@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?Spawn@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Spawn@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RequestSpawn@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RequestSpawn@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?RequestSpawn@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RequestSpawn@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RequestClass@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RequestClass@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?RequestClass@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RequestClass@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TeamPrivmsg@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TeamPrivmsg@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?TeamPrivmsg@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TeamPrivmsg@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Privmsg@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Privmsg@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?Privmsg@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Privmsg@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Chat@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Chat@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?Chat@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Chat@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitGame@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitGame@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?InitGame@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitGame@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ServerQuit@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ServerQuit@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?ServerQuit@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ServerQuit@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ServerJoin@@YAXPAURPCParameters@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ServerJoin@@YAXPAURPCParameters@@@Z$0
__ehfuncinfo$?ServerJoin@@YAXPAURPCParameters@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ServerJoin@@YAXPAURPCParameters@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0
__ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?ACServerProtected@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_rpcParams$ = 8						; size = 4
?ACServerProtected@@YAXPAURPCParameters@@@Z PROC	; ACServerProtected, COMDAT

; 955  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 956  : 	
; 957  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ACServerProtected@@YAXPAURPCParameters@@@Z ENDP	; ACServerProtected
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?Instagib@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?Instagib@@YAXPAURPCParameters@@@Z PROC			; Instagib, COMDAT

; 942  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Instagib@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 943  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 944  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 945  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 946  : 
; 947  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 948  : 	bsData.Read(pNetGame->m_bInstagib);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 41					; 00000029H
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 949  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Instagib
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@Instagib:
	DD	2
	DD	$LN7@Instagib
$LN7@Instagib:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN4@Instagib
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN5@Instagib
$LN5@Instagib:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN4@Instagib:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Instagib@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Instagib@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Instagib@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Instagib@@YAXPAURPCParameters@@@Z ENDP			; Instagib
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?VehicleDestroy@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_x$ = -489						; size = 1
_mat$2 = -480						; size = 64
_pPlayerPool$ = -408					; size = 4
_pRemotePlayer$ = -396					; size = 4
_pVehicle$ = -384					; size = 4
_MyVehicleID$ = -372					; size = 2
_VehicleID$ = -360					; size = 2
_bsData$ = -348						; size = 273
_pVehiclePool$ = -64					; size = 4
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?VehicleDestroy@@YAXPAURPCParameters@@@Z PROC		; VehicleDestroy, COMDAT

; 894  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?VehicleDestroy@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 676				; 000002a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-688]
	mov	ecx, 169				; 000000a9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 895  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 896  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 897  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 898  : 
; 899  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 900  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 901  : 
; 902  : 	VEHICLEID VehicleID;
; 903  : 	VEHICLEID MyVehicleID;
; 904  : 
; 905  : 	bsData.Read(VehicleID);

	lea	eax, DWORD PTR _VehicleID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 906  : 
; 907  : 	CVehicle *pVehicle = pVehiclePool->GetAt(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$[ebp], eax

; 908  : 	CRemotePlayer *pRemotePlayer;
; 909  : 	CPlayerPool *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 910  : 
; 911  : 	if(!pVehicle) return;

	cmp	DWORD PTR _pVehicle$[ebp], 0
	jne	SHORT $LN6@VehicleDes
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN7@VehicleDes
$LN6@VehicleDes:

; 912  : 			
; 913  : 	MyVehicleID = pVehiclePool->FindIDFromGtaPtr(pGame->FindPlayerPed()->GetGtaVehicle());

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _MyVehicleID$[ebp], ax

; 914  : 
; 915  : 	if (MyVehicleID == VehicleID)

	movzx	eax, WORD PTR _MyVehicleID$[ebp]
	movzx	ecx, WORD PTR _VehicleID$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN5@VehicleDes

; 916  : 	{
; 917  : 		MATRIX4X4 mat;
; 918  : 		pGame->FindPlayerPed()->GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 919  : 		pGame->FindPlayerPed()->RemoveFromVehicleAndPutAt(mat.pos.X,mat.pos.Y,mat.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _mat$2[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$2[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$2[ebp+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ; CPlayerPed::RemoveFromVehicleAndPutAt
$LN5@VehicleDes:

; 920  : 	}
; 921  : 
; 922  : 	// we'll also need to remove any remote player that
; 923  : 	// is in this vehicle.
; 924  : 	BYTE x=0;

	mov	BYTE PTR _x$[ebp], 0
$LN4@VehicleDes:

; 925  : 	while(x!=MAX_PLAYERS) {

	movzx	eax, BYTE PTR _x$[ebp]
	cmp	eax, 204				; 000000ccH
	je	SHORT $LN3@VehicleDes

; 926  : 		if(pPlayerPool->GetSlotState(x)) {

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	SHORT $LN1@VehicleDes

; 927  : 			pRemotePlayer = pPlayerPool->GetAt(x);

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemotePlayer$[ebp], eax

; 928  : 			if( pRemotePlayer->IsActive() && 
; 929  : 				pRemotePlayer->m_pCurrentVehicle == pVehicle )

	mov	ecx, DWORD PTR _pRemotePlayer$[ebp]
	call	?IsActive@CRemotePlayer@@QAEHXZ		; CRemotePlayer::IsActive
	test	eax, eax
	je	SHORT $LN1@VehicleDes
	mov	eax, DWORD PTR _pRemotePlayer$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	cmp	ecx, DWORD PTR _pVehicle$[ebp]
	jne	SHORT $LN1@VehicleDes

; 930  : 			{
; 931  : 				pRemotePlayer->ForceOutOfCurrentVehicle();

	mov	ecx, DWORD PTR _pRemotePlayer$[ebp]
	call	?ForceOutOfCurrentVehicle@CRemotePlayer@@QAEXXZ ; CRemotePlayer::ForceOutOfCurrentVehicle
$LN1@VehicleDes:

; 932  : 			}
; 933  : 		}
; 934  : 		x++;

	mov	al, BYTE PTR _x$[ebp]
	add	al, 1
	mov	BYTE PTR _x$[ebp], al

; 935  : 	}

	jmp	SHORT $LN4@VehicleDes
$LN3@VehicleDes:

; 936  : 	pNetGame->GetVehiclePool()->Delete(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	ecx, eax
	call	?Delete@CVehiclePool@@QAEHG@Z		; CVehiclePool::Delete

; 937  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN7@VehicleDes:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@VehicleDes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 688				; 000002b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@VehicleDes:
	DD	4
	DD	$LN15@VehicleDes
$LN15@VehicleDes:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN10@VehicleDes
	DD	-348					; fffffea4H
	DD	273					; 00000111H
	DD	$LN11@VehicleDes
	DD	-360					; fffffe98H
	DD	2
	DD	$LN12@VehicleDes
	DD	-480					; fffffe20H
	DD	64					; 00000040H
	DD	$LN13@VehicleDes
$LN13@VehicleDes:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN12@VehicleDes:
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN11@VehicleDes:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN10@VehicleDes:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?VehicleDestroy@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?VehicleDestroy@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-692]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?VehicleDestroy@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?VehicleDestroy@@YAXPAURPCParameters@@@Z ENDP		; VehicleDestroy
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?ToggleClock@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_byteClock$ = -329					; size = 1
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?ToggleClock@@YAXPAURPCParameters@@@Z PROC		; ToggleClock, COMDAT

; 871  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ToggleClock@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 872  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 873  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 874  : 	//PlayerID sender = rpcParams->sender;
; 875  : 
; 876  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 877  : 	BYTE byteClock;
; 878  : 	bsData.Read(byteClock);

	lea	eax, DWORD PTR _byteClock$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 879  : 	pGame->EnableClock(byteClock);	

	movzx	eax, BYTE PTR _byteClock$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?EnableClock@CGame@@QAEXE@Z		; CGame::EnableClock

; 880  : 	if (byteClock)

	movzx	eax, BYTE PTR _byteClock$[ebp]
	test	eax, eax
	je	SHORT $LN2@ToggleCloc

; 881  : 	{
; 882  : 		pNetGame->m_byteHoldTime = 0;

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	BYTE PTR [eax+40], 0

; 883  : 	}
; 884  : 	else

	jmp	SHORT $LN1@ToggleCloc
$LN2@ToggleCloc:

; 885  : 	{
; 886  : 		pNetGame->m_byteHoldTime = 1;

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	BYTE PTR [eax+40], 1

; 887  : 		pGame->GetWorldTime((int*)&pNetGame->m_byteWorldTime, (int*)&pNetGame->m_byteWorldMinute);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 62					; 0000003eH
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	ecx, 61					; 0000003dH
	push	ecx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetWorldTime@CGame@@QAEXPAH0@Z		; CGame::GetWorldTime
$LN1@ToggleCloc:

; 888  : 	}
; 889  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ToggleCloc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@ToggleCloc:
	DD	2
	DD	$LN9@ToggleCloc
$LN9@ToggleCloc:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN6@ToggleCloc
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN7@ToggleCloc
$LN7@ToggleCloc:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@ToggleCloc:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ToggleClock@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ToggleClock@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-532]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ToggleClock@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ToggleClock@@YAXPAURPCParameters@@@Z ENDP		; ToggleClock
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?SetTimeEx@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_byteMinute$ = -341					; size = 1
_byteHour$ = -329					; size = 1
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?SetTimeEx@@YAXPAURPCParameters@@@Z PROC		; SetTimeEx, COMDAT

; 852  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetTimeEx@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-540]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 853  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 854  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 855  : 	//PlayerID sender = rpcParams->sender;
; 856  : 
; 857  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 858  : 	BYTE byteHour;
; 859  : 	BYTE byteMinute;
; 860  : 	bsData.Read(byteHour);

	lea	eax, DWORD PTR _byteHour$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 861  : 	bsData.Read(byteMinute);

	lea	eax, DWORD PTR _byteMinute$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 862  : 	//pNetGame->m_byteHoldTime = 0;
; 863  : 	pGame->SetWorldTime(byteHour, byteMinute);

	movzx	eax, BYTE PTR _byteMinute$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _byteHour$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetWorldTime@CGame@@QAEXHH@Z		; CGame::SetWorldTime

; 864  : 	pNetGame->m_byteWorldTime = byteHour;

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	cl, BYTE PTR _byteHour$[ebp]
	mov	BYTE PTR [eax+61], cl

; 865  : 	pNetGame->m_byteWorldMinute = byteMinute;

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	cl, BYTE PTR _byteMinute$[ebp]
	mov	BYTE PTR [eax+62], cl

; 866  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SetTimeEx
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 540				; 0000021cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@SetTimeEx:
	DD	3
	DD	$LN8@SetTimeEx
$LN8@SetTimeEx:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@SetTimeEx
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN5@SetTimeEx
	DD	-341					; fffffeabH
	DD	1
	DD	$LN6@SetTimeEx
$LN6@SetTimeEx:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN5@SetTimeEx:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	72					; 00000048H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN4@SetTimeEx:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetTimeEx@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SetTimeEx@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-544]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetTimeEx@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetTimeEx@@YAXPAURPCParameters@@@Z ENDP		; SetTimeEx
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?Weather@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_byteWeather$ = -329					; size = 1
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?Weather@@YAXPAURPCParameters@@@Z PROC			; Weather, COMDAT

; 838  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Weather@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 839  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 840  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 841  : 	//PlayerID sender = rpcParams->sender;
; 842  : 
; 843  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 844  : 	BYTE byteWeather;
; 845  : 	bsData.Read(byteWeather);

	lea	eax, DWORD PTR _byteWeather$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 846  : 	pNetGame->m_byteWeather = byteWeather;	

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	cl, BYTE PTR _byteWeather$[ebp]
	mov	BYTE PTR [eax+63], cl

; 847  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Weather
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@Weather:
	DD	2
	DD	$LN7@Weather
$LN7@Weather:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@Weather
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN5@Weather
$LN5@Weather:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	87					; 00000057H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN4@Weather:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Weather@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Weather@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-532]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Weather@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Weather@@YAXPAURPCParameters@@@Z ENDP			; Weather
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?ScmEvent@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_dwParam3$ = -380					; size = 4
_dwParam2$ = -368					; size = 4
_dwParam1$ = -356					; size = 4
_iEvent$ = -344						; size = 4
_bytePlayerID$ = -329					; size = 1
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?ScmEvent@@YAXPAURPCParameters@@@Z PROC			; ScmEvent, COMDAT

; 815  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ScmEvent@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 564				; 00000234H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-576]
	mov	ecx, 141				; 0000008dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 816  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 817  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 818  : 	//PlayerID sender = rpcParams->sender;
; 819  : 
; 820  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 821  : 	
; 822  : 	BYTE bytePlayerID;
; 823  : 	int iEvent;
; 824  : 	DWORD dwParam1,dwParam2,dwParam3;
; 825  : 
; 826  : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 827  : 	bsData.Read(iEvent);

	lea	eax, DWORD PTR _iEvent$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 828  : 	bsData.Read(dwParam1);

	lea	eax, DWORD PTR _dwParam1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z	; RakNet::BitStream::Read<unsigned long>

; 829  : 	bsData.Read(dwParam2);

	lea	eax, DWORD PTR _dwParam2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z	; RakNet::BitStream::Read<unsigned long>

; 830  : 	bsData.Read(dwParam3);

	lea	eax, DWORD PTR _dwParam3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z	; RakNet::BitStream::Read<unsigned long>

; 831  : 
; 832  : 	ProcessIncommingEvent(bytePlayerID,iEvent,dwParam1,dwParam2,dwParam3);

	mov	eax, DWORD PTR _dwParam3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwParam2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwParam1$[ebp]
	push	edx
	mov	eax, DWORD PTR _iEvent$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bytePlayerID$[ebp]
	push	ecx
	call	?ProcessIncommingEvent@@YAXEHKKK@Z	; ProcessIncommingEvent
	add	esp, 20					; 00000014H

; 833  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ScmEvent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 576				; 00000240H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@ScmEvent:
	DD	6
	DD	$LN11@ScmEvent
$LN11@ScmEvent:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@ScmEvent
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN5@ScmEvent
	DD	-344					; fffffea8H
	DD	4
	DD	$LN6@ScmEvent
	DD	-356					; fffffe9cH
	DD	4
	DD	$LN7@ScmEvent
	DD	-368					; fffffe90H
	DD	4
	DD	$LN8@ScmEvent
	DD	-380					; fffffe84H
	DD	4
	DD	$LN9@ScmEvent
$LN9@ScmEvent:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	51					; 00000033H
	DB	0
$LN8@ScmEvent:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	50					; 00000032H
	DB	0
$LN7@ScmEvent:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	49					; 00000031H
	DB	0
$LN6@ScmEvent:
	DB	105					; 00000069H
	DB	69					; 00000045H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN5@ScmEvent:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN4@ScmEvent:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScmEvent@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ScmEvent@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-580]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ScmEvent@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ScmEvent@@YAXPAURPCParameters@@@Z ENDP			; ScmEvent
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_byteIndex$ = -329					; size = 1
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z PROC	; DestroyWeaponPickup, COMDAT

; 798  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 799  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 800  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 801  : 	//PlayerID sender = rpcParams->sender;
; 802  : 
; 803  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 804  : 
; 805  : 	BYTE byteIndex;
; 806  : 
; 807  : 	bsData.Read(byteIndex);

	lea	eax, DWORD PTR _byteIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 808  : 
; 809  : 	pNetGame->GetPickupPool()->DestroyDropped(byteIndex);

	movzx	eax, BYTE PTR _byteIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ ; CNetGame::GetPickupPool
	mov	ecx, eax
	call	?DestroyDropped@CPickupPool@@QAEXE@Z	; CPickupPool::DestroyDropped

; 810  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DestroyWea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@DestroyWea:
	DD	2
	DD	$LN7@DestroyWea
$LN7@DestroyWea:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@DestroyWea
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN5@DestroyWea
$LN5@DestroyWea:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN4@DestroyWea:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-532]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z ENDP	; DestroyWeaponPickup
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?DestroyPickup@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_iIndex$ = -332						; size = 4
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?DestroyPickup@@YAXPAURPCParameters@@@Z PROC		; DestroyPickup, COMDAT

; 781  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DestroyPickup@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 782  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 783  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 784  : 	//PlayerID sender = rpcParams->sender;
; 785  : 
; 786  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 787  : 
; 788  : 	int iIndex;
; 789  : 
; 790  : 	bsData.Read(iIndex);

	lea	eax, DWORD PTR _iIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 791  : 
; 792  : 	pNetGame->GetPickupPool()->Destroy(iIndex);

	mov	eax, DWORD PTR _iIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ ; CNetGame::GetPickupPool
	mov	ecx, eax
	call	?Destroy@CPickupPool@@QAEXH@Z		; CPickupPool::Destroy

; 793  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DestroyPic
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@DestroyPic:
	DD	2
	DD	$LN7@DestroyPic
$LN7@DestroyPic:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@DestroyPic
	DD	-332					; fffffeb4H
	DD	4
	DD	$LN5@DestroyPic
$LN5@DestroyPic:
	DB	105					; 00000069H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN4@DestroyPic:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DestroyPickup@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?DestroyPickup@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-532]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DestroyPickup@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DestroyPickup@@YAXPAURPCParameters@@@Z ENDP		; DestroyPickup
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?Pickup@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_iIndex$ = -360						; size = 4
_Pickup$ = -348						; size = 20
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?Pickup@@YAXPAURPCParameters@@@Z PROC			; Pickup, COMDAT

; 760  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Pickup@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 761  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 762  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 763  : 	//PlayerID sender = rpcParams->sender;
; 764  : 
; 765  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 766  : 
; 767  : 	PICKUP Pickup;
; 768  : 	int iIndex;
; 769  : 
; 770  : 	bsData.Read(iIndex);

	lea	eax, DWORD PTR _iIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 771  : 	bsData.Read((PCHAR)&Pickup, sizeof (PICKUP));

	push	20					; 00000014H
	lea	eax, DWORD PTR _Pickup$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 772  : 
; 773  : 	//pChatWindow->AddDebugMessage("Pickup: %d %d %f %f %f",iModel,iType,x,y,z);
; 774  : 
; 775  : 	pNetGame->GetPickupPool()->New(&Pickup, iIndex);

	mov	eax, DWORD PTR _iIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Pickup$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ ; CNetGame::GetPickupPool
	mov	ecx, eax
	call	?New@CPickupPool@@QAEXPAU_PICKUP@@H@Z	; CPickupPool::New

; 776  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Pickup
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@Pickup:
	DD	3
	DD	$LN8@Pickup
$LN8@Pickup:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@Pickup
	DD	-348					; fffffea4H
	DD	20					; 00000014H
	DD	$LN5@Pickup
	DD	-360					; fffffe98H
	DD	4
	DD	$LN6@Pickup
$LN6@Pickup:
	DB	105					; 00000069H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN5@Pickup:
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	0
$LN4@Pickup:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Pickup@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Pickup@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Pickup@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Pickup@@YAXPAURPCParameters@@@Z ENDP			; Pickup
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?WorldTime@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_byteWorldTime$ = -329					; size = 1
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?WorldTime@@YAXPAURPCParameters@@@Z PROC		; WorldTime, COMDAT

; 746  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WorldTime@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 747  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 748  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 749  : 	//PlayerID sender = rpcParams->sender;
; 750  : 
; 751  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 752  : 	BYTE byteWorldTime;
; 753  : 	bsData.Read(byteWorldTime);

	lea	eax, DWORD PTR _byteWorldTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 754  : 	pNetGame->m_byteWorldTime = byteWorldTime;	

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	cl, BYTE PTR _byteWorldTime$[ebp]
	mov	BYTE PTR [eax+61], cl

; 755  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@WorldTime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@WorldTime:
	DD	2
	DD	$LN7@WorldTime
$LN7@WorldTime:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@WorldTime
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN5@WorldTime
$LN5@WorldTime:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN4@WorldTime:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WorldTime@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?WorldTime@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-532]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WorldTime@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WorldTime@@YAXPAURPCParameters@@@Z ENDP		; WorldTime
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?ClientMessage@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_szMsg$ = -356						; size = 4
_dwColor$ = -344					; size = 4
_dwStrLen$ = -332					; size = 4
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?ClientMessage@@YAXPAURPCParameters@@@Z PROC		; ClientMessage, COMDAT

; 723  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ClientMessage@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 540				; 0000021cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-552]
	mov	ecx, 135				; 00000087H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 724  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 725  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 726  : 	//PlayerID sender = rpcParams->sender;
; 727  : 
; 728  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 729  : 	DWORD dwStrLen;
; 730  : 	DWORD dwColor;
; 731  : 
; 732  : 	bsData.Read(dwColor);

	lea	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z	; RakNet::BitStream::Read<unsigned long>

; 733  : 	bsData.Read(dwStrLen);

	lea	eax, DWORD PTR _dwStrLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z	; RakNet::BitStream::Read<unsigned long>

; 734  : 	char* szMsg = (char*)malloc(dwStrLen+1);

	mov	eax, DWORD PTR _dwStrLen$[ebp]
	add	eax, 1
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _szMsg$[ebp], eax

; 735  : 	bsData.Read(szMsg, dwStrLen);

	mov	eax, DWORD PTR _dwStrLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szMsg$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 736  : 	szMsg[dwStrLen] = 0;

	mov	eax, DWORD PTR _szMsg$[ebp]
	add	eax, DWORD PTR _dwStrLen$[ebp]
	mov	BYTE PTR [eax], 0

; 737  : 
; 738  : 	pChatWindow->AddClientMessage(dwColor,szMsg);

	mov	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwColor$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	call	?AddClientMessage@CChatWindow@@QAEXKPAD@Z ; CChatWindow::AddClientMessage

; 739  : 
; 740  : 	free(szMsg);

	mov	eax, DWORD PTR _szMsg$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 741  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ClientMess
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 552				; 00000228H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@ClientMess:
	DD	3
	DD	$LN8@ClientMess
$LN8@ClientMess:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@ClientMess
	DD	-332					; fffffeb4H
	DD	4
	DD	$LN5@ClientMess
	DD	-344					; fffffea8H
	DD	4
	DD	$LN6@ClientMess
$LN6@ClientMess:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN5@ClientMess:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN4@ClientMess:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ClientMessage@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ClientMessage@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-556]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ClientMessage@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ClientMessage@@YAXPAURPCParameters@@@Z ENDP		; ClientMessage
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?ConnectionRejected@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
tv137 = -532						; size = 4
_byteRejectReason$ = -329				; size = 1
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?ConnectionRejected@@YAXPAURPCParameters@@@Z PROC	; ConnectionRejected, COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ConnectionRejected@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 687  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 688  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 689  : 	//PlayerID sender = rpcParams->sender;
; 690  : 
; 691  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 692  : 	BYTE byteRejectReason;
; 693  : 
; 694  : 	bsData.Read(byteRejectReason);

	lea	eax, DWORD PTR _byteRejectReason$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 695  : 
; 696  : 	if(byteRejectReason==REJECT_REASON_BAD_VERSION) {

	movzx	eax, BYTE PTR _byteRejectReason$[ebp]
	cmp	eax, 1
	jne	SHORT $LN7@Connection

; 697  : 		pChatWindow->AddInfoMessage("DISCONNECTED. THE SERVER DID NOT ALLOW A CONNECTION.");

	push	OFFSET ??_C@_0DF@FHGNCEJE@DISCONNECTED?4?5THE?5SERVER?5DID?5NOT@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8
	jmp	$LN6@Connection
$LN7@Connection:

; 698  : 	}
; 699  : 	else if(byteRejectReason==REJECT_REASON_BAD_NICKNAME)

	movzx	eax, BYTE PTR _byteRejectReason$[ebp]
	cmp	eax, 2
	jne	SHORT $LN5@Connection

; 700  : 	{
; 701  : 		pChatWindow->AddInfoMessage("CONNECTION REJECTED. BAD NICKNAME!");

	push	OFFSET ??_C@_0CD@KKBLHDMA@CONNECTION?5REJECTED?4?5BAD?5NICKNAM@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8

; 702  : 		pChatWindow->AddInfoMessage("Please choose another nick between 3-16 characters");

	push	OFFSET ??_C@_0DD@OJMCIJGC@Please?5choose?5another?5nick?5betwe@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8

; 703  : 		pChatWindow->AddInfoMessage("containing only A-Z a-z 0-9 [ ] or _");

	push	OFFSET ??_C@_0CF@HFPHDI@containing?5only?5A?9Z?5a?9z?50?99?5?$FL?5?$FN?5@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8

; 704  : 		pChatWindow->AddInfoMessage("Use /quit to exit or press ESC and select Quit Game");

	push	OFFSET ??_C@_0DE@JENICEMD@Use?5?1quit?5to?5exit?5or?5press?5ESC?5a@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8
	jmp	SHORT $LN6@Connection
$LN5@Connection:

; 705  : 	}
; 706  : 	else if(byteRejectReason==REJECT_REASON_BAD_MOD)

	movzx	eax, BYTE PTR _byteRejectReason$[ebp]
	cmp	eax, 3
	jne	SHORT $LN3@Connection

; 707  : 	{
; 708  : 		pChatWindow->AddInfoMessage("CONNECTION REJECTED");

	push	OFFSET ??_C@_0BE@OCOLJLIB@CONNECTION?5REJECTED?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8

; 709  : 		pChatWindow->AddInfoMessage("YOUR'RE USING AN INCORRECT MOD!");

	push	OFFSET ??_C@_0CA@ELECFPLF@YOUR?8RE?5USING?5AN?5INCORRECT?5MOD?$CB?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8
	jmp	SHORT $LN6@Connection
$LN3@Connection:

; 710  : 	}
; 711  : 	else if(byteRejectReason==REJECT_REASON_BAD_PLAYERID)

	movzx	eax, BYTE PTR _byteRejectReason$[ebp]
	cmp	eax, 4
	jne	SHORT $LN6@Connection

; 712  : 	{
; 713  : 		pChatWindow->AddInfoMessage("Connection was closed by the server.");

	push	OFFSET ??_C@_0CF@JGECIGLM@Connection?5was?5closed?5by?5the?5ser@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8

; 714  : 		pChatWindow->AddInfoMessage("Unable to allocate a player slot. Try again.");

	push	OFFSET ??_C@_0CN@HMNEEMPB@Unable?5to?5allocate?5a?5player?5slot@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8
$LN6@Connection:

; 715  : 	}
; 716  : 
; 717  : 	pNetGame->GetRakClient()->Disconnect(500);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv137[ebp], eax
	mov	esi, esp
	push	0
	push	500					; 000001f4H
	mov	eax, DWORD PTR tv137[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 718  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Connection
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@Connection:
	DD	2
	DD	$LN14@Connection
$LN14@Connection:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN11@Connection
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN12@Connection
$LN12@Connection:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN11@Connection:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConnectionRejected@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ConnectionRejected@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ConnectionRejected@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ConnectionRejected@@YAXPAURPCParameters@@@Z ENDP	; ConnectionRejected
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?GameModeRestart@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_rpcParams$ = 8						; size = 4
?GameModeRestart@@YAXPAURPCParameters@@@Z PROC		; GameModeRestart, COMDAT

; 675  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 676  : 	//PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);
; 677  : 	//int iBitLength = rpcParams->numberOfBitsOfData;
; 678  : 	//PlayerID sender = rpcParams->sender;
; 679  : 
; 680  : 	pNetGame->ShutdownForGameModeRestart();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?ShutdownForGameModeRestart@CNetGame@@QAEXXZ ; CNetGame::ShutdownForGameModeRestart

; 681  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GameModeRestart@@YAXPAURPCParameters@@@Z ENDP		; GameModeRestart
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?SvrStats@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?SvrStats@@YAXPAURPCParameters@@@Z PROC			; SvrStats, COMDAT

; 665  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SvrStats@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-516]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 666  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 667  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 668  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 669  : 	bsData.Read((char *)&RakServerStats,sizeof(RakNetStatisticsStruct));

	push	196					; 000000c4H
	push	OFFSET ?RakServerStats@@3URakNetStatisticsStruct@@A ; RakServerStats
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 670  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SvrStats
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 516				; 00000204H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@SvrStats:
	DD	1
	DD	$LN6@SvrStats
$LN6@SvrStats:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@SvrStats
$LN4@SvrStats:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SvrStats@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SvrStats@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-520]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SvrStats@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SvrStats@@YAXPAURPCParameters@@@Z ENDP			; SvrStats
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_i$2 = -377						; size = 1
_pPlayerPool$ = -368					; size = 4
_dwPlayerPing$ = -356					; size = 4
_iPlayerScore$ = -344					; size = 4
_bytePlayerId$ = -329					; size = 1
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z PROC	; UpdateScoresPingsIPs, COMDAT

; 637  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 564				; 00000234H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-576]
	mov	ecx, 141				; 0000008dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 638  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 639  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 640  : 	//PlayerID sender = rpcParams->sender;
; 641  : 
; 642  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 643  : 
; 644  : 	BYTE bytePlayerId;
; 645  : 	int  iPlayerScore;
; 646  : 	DWORD dwPlayerPing;
; 647  : 
; 648  : 	CPlayerPool* pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 649  : 
; 650  : 	for (BYTE i=0; i<(iBitLength/8)/9; i++)

	mov	BYTE PTR _i$2[ebp], 0
	jmp	SHORT $LN3@UpdateScor
$LN2@UpdateScor:
	mov	al, BYTE PTR _i$2[ebp]
	add	al, 1
	mov	BYTE PTR _i$2[ebp], al
$LN3@UpdateScor:
	movzx	ecx, BYTE PTR _i$2[ebp]
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	cdq
	mov	esi, 9
	idiv	esi
	cmp	ecx, eax
	jge	SHORT $LN1@UpdateScor

; 651  : 	{
; 652  : 		bsData.Read(bytePlayerId);

	lea	eax, DWORD PTR _bytePlayerId$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 653  : 		bsData.Read(iPlayerScore);

	lea	eax, DWORD PTR _iPlayerScore$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 654  : 		bsData.Read(dwPlayerPing);

	lea	eax, DWORD PTR _dwPlayerPing$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z	; RakNet::BitStream::Read<unsigned long>

; 655  : 
; 656  : 		pPlayerPool->UpdateScore(bytePlayerId, iPlayerScore);

	mov	eax, DWORD PTR _iPlayerScore$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bytePlayerId$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?UpdateScore@CPlayerPool@@QAEXEH@Z	; CPlayerPool::UpdateScore

; 657  : 		pPlayerPool->UpdatePing(bytePlayerId, dwPlayerPing);

	mov	eax, DWORD PTR _dwPlayerPing$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bytePlayerId$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?UpdatePing@CPlayerPool@@QAEXEK@Z	; CPlayerPool::UpdatePing

; 658  : 	}

	jmp	$LN2@UpdateScor
$LN1@UpdateScor:

; 659  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@UpdateScor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 576				; 00000240H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@UpdateScor:
	DD	4
	DD	$LN12@UpdateScor
$LN12@UpdateScor:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN7@UpdateScor
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN8@UpdateScor
	DD	-344					; fffffea8H
	DD	4
	DD	$LN9@UpdateScor
	DD	-356					; fffffe9cH
	DD	4
	DD	$LN10@UpdateScor
$LN10@UpdateScor:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN9@UpdateScor:
	DB	105					; 00000069H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN8@UpdateScor:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
$LN7@UpdateScor:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-580]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z ENDP	; UpdateScoresPingsIPs
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?DisableRaceCheckpoint@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_rpcParams$ = 8						; size = 4
?DisableRaceCheckpoint@@YAXPAURPCParameters@@@Z PROC	; DisableRaceCheckpoint, COMDAT

; 626  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 627  : 	//PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);
; 628  : 	//int iBitLength = rpcParams->numberOfBitsOfData;
; 629  : 	//PlayerID sender = rpcParams->sender;
; 630  : 
; 631  : 	pGame->ToggleRaceCheckpoints(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleRaceCheckpoints@CGame@@QAEXH@Z	; CGame::ToggleRaceCheckpoints

; 632  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DisableRaceCheckpoint@@YAXPAURPCParameters@@@Z ENDP	; DisableRaceCheckpoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_Next$ = -408						; size = 12
_Pos$ = -388						; size = 12
_byteType$ = -365					; size = 1
_fZ$ = -356						; size = 4
_fY$ = -344						; size = 4
_fX$ = -332						; size = 4
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z PROC	; SetRaceCheckpoint, COMDAT

; 592  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 592				; 00000250H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-604]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 593  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 594  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 595  : 	//PlayerID sender = rpcParams->sender;
; 596  : 
; 597  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 598  : 	float fX, fY, fZ;
; 599  : 	BYTE byteType; //, byteSize;
; 600  : 	VECTOR Pos,Next;
; 601  : 
; 602  : 	bsData.Read(byteType);

	lea	eax, DWORD PTR _byteType$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 603  : 	bsData.Read(fX);

	lea	eax, DWORD PTR _fX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 604  : 	bsData.Read(fY);

	lea	eax, DWORD PTR _fY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 605  : 	bsData.Read(fZ);

	lea	eax, DWORD PTR _fZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 606  : 	Pos.X = fX;

	movss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR _Pos$[ebp], xmm0

; 607  : 	Pos.Y = fY;

	movss	xmm0, DWORD PTR _fY$[ebp]
	movss	DWORD PTR _Pos$[ebp+4], xmm0

; 608  : 	Pos.Z = fZ;

	movss	xmm0, DWORD PTR _fZ$[ebp]
	movss	DWORD PTR _Pos$[ebp+8], xmm0

; 609  : 
; 610  : 	bsData.Read(fX);

	lea	eax, DWORD PTR _fX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 611  : 	bsData.Read(fY);

	lea	eax, DWORD PTR _fY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 612  : 	bsData.Read(fZ);

	lea	eax, DWORD PTR _fZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 613  : 	Next.X = fX;

	movss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR _Next$[ebp], xmm0

; 614  : 	Next.Y = fY;

	movss	xmm0, DWORD PTR _fY$[ebp]
	movss	DWORD PTR _Next$[ebp+4], xmm0

; 615  : 	Next.Z = fZ;

	movss	xmm0, DWORD PTR _fZ$[ebp]
	movss	DWORD PTR _Next$[ebp+8], xmm0

; 616  : 
; 617  : 	bsData.Read(fX);

	lea	eax, DWORD PTR _fX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 618  : 
; 619  : 	pGame->SetRaceCheckpointInformation(byteType, &Pos, &Next, fX);

	push	ecx
	movss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _Next$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Pos$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _byteType$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetRaceCheckpointInformation@CGame@@QAEXEPAU_VECTOR@@0M@Z ; CGame::SetRaceCheckpointInformation

; 620  : 	pGame->ToggleRaceCheckpoints(TRUE);

	push	1
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleRaceCheckpoints@CGame@@QAEXH@Z	; CGame::ToggleRaceCheckpoints

; 621  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@SetRaceChe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 604				; 0000025cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@SetRaceChe:
	DD	7
	DD	$LN12@SetRaceChe
$LN12@SetRaceChe:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@SetRaceChe
	DD	-332					; fffffeb4H
	DD	4
	DD	$LN5@SetRaceChe
	DD	-344					; fffffea8H
	DD	4
	DD	$LN6@SetRaceChe
	DD	-356					; fffffe9cH
	DD	4
	DD	$LN7@SetRaceChe
	DD	-365					; fffffe93H
	DD	1
	DD	$LN8@SetRaceChe
	DD	-388					; fffffe7cH
	DD	12					; 0000000cH
	DD	$LN9@SetRaceChe
	DD	-408					; fffffe68H
	DD	12					; 0000000cH
	DD	$LN10@SetRaceChe
$LN10@SetRaceChe:
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN9@SetRaceChe:
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN8@SetRaceChe:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN7@SetRaceChe:
	DB	102					; 00000066H
	DB	90					; 0000005aH
	DB	0
$LN6@SetRaceChe:
	DB	102					; 00000066H
	DB	89					; 00000059H
	DB	0
$LN5@SetRaceChe:
	DB	102					; 00000066H
	DB	88					; 00000058H
	DB	0
$LN4@SetRaceChe:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-608]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z ENDP	; SetRaceCheckpoint
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?DisableCheckpoint@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_rpcParams$ = 8						; size = 4
?DisableCheckpoint@@YAXPAURPCParameters@@@Z PROC	; DisableCheckpoint, COMDAT

; 581  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 582  : 	//PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);
; 583  : 	//int iBitLength = rpcParams->numberOfBitsOfData;
; 584  : 	//PlayerID sender = rpcParams->sender;
; 585  : 
; 586  : 	pGame->ToggleCheckpoints(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleCheckpoints@CGame@@QAEXH@Z	; CGame::ToggleCheckpoints

; 587  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DisableCheckpoint@@YAXPAURPCParameters@@@Z ENDP	; DisableCheckpoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?SetCheckpoint@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_Extent$ = -408						; size = 12
_Pos$ = -388						; size = 12
_fSize$ = -368						; size = 4
_fZ$ = -356						; size = 4
_fY$ = -344						; size = 4
_fX$ = -332						; size = 4
_bsData$ = -320						; size = 273
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?SetCheckpoint@@YAXPAURPCParameters@@@Z PROC		; SetCheckpoint, COMDAT

; 552  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetCheckpoint@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 592				; 00000250H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-604]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 553  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 554  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 555  : 	//PlayerID sender = rpcParams->sender;
; 556  : 
; 557  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 558  : 	float fX, fY, fZ, fSize;
; 559  : 
; 560  : 	bsData.Read(fX);

	lea	eax, DWORD PTR _fX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 561  : 	bsData.Read(fY);

	lea	eax, DWORD PTR _fY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 562  : 	bsData.Read(fZ);

	lea	eax, DWORD PTR _fZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 563  : 	bsData.Read(fSize);

	lea	eax, DWORD PTR _fSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 564  : 
; 565  : 	VECTOR Pos,Extent;
; 566  : 
; 567  : 	Pos.X = fX;

	movss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR _Pos$[ebp], xmm0

; 568  : 	Pos.Y = fY;

	movss	xmm0, DWORD PTR _fY$[ebp]
	movss	DWORD PTR _Pos$[ebp+4], xmm0

; 569  : 	Pos.Z = fZ;

	movss	xmm0, DWORD PTR _fZ$[ebp]
	movss	DWORD PTR _Pos$[ebp+8], xmm0

; 570  : 	Extent.X = fSize;

	movss	xmm0, DWORD PTR _fSize$[ebp]
	movss	DWORD PTR _Extent$[ebp], xmm0

; 571  : 	Extent.Y = fSize;

	movss	xmm0, DWORD PTR _fSize$[ebp]
	movss	DWORD PTR _Extent$[ebp+4], xmm0

; 572  : 	Extent.Z = fSize;

	movss	xmm0, DWORD PTR _fSize$[ebp]
	movss	DWORD PTR _Extent$[ebp+8], xmm0

; 573  : 
; 574  : 	pGame->SetCheckpointInformation(&Pos, &Extent);

	lea	eax, DWORD PTR _Extent$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetCheckpointInformation@CGame@@QAEXPAU_VECTOR@@0@Z ; CGame::SetCheckpointInformation

; 575  : 	pGame->ToggleCheckpoints(TRUE);

	push	1
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleCheckpoints@CGame@@QAEXH@Z	; CGame::ToggleCheckpoints

; 576  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@SetCheckpo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 604				; 0000025cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@SetCheckpo:
	DD	7
	DD	$LN12@SetCheckpo
$LN12@SetCheckpo:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN4@SetCheckpo
	DD	-332					; fffffeb4H
	DD	4
	DD	$LN5@SetCheckpo
	DD	-344					; fffffea8H
	DD	4
	DD	$LN6@SetCheckpo
	DD	-356					; fffffe9cH
	DD	4
	DD	$LN7@SetCheckpo
	DD	-368					; fffffe90H
	DD	4
	DD	$LN8@SetCheckpo
	DD	-388					; fffffe7cH
	DD	12					; 0000000cH
	DD	$LN9@SetCheckpo
	DD	-408					; fffffe68H
	DD	12					; 0000000cH
	DD	$LN10@SetCheckpo
$LN10@SetCheckpo:
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN9@SetCheckpo:
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN8@SetCheckpo:
	DB	102					; 00000066H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN7@SetCheckpo:
	DB	102					; 00000066H
	DB	90					; 0000005aH
	DB	0
$LN6@SetCheckpo:
	DB	102					; 00000066H
	DB	89					; 00000059H
	DB	0
$LN5@SetCheckpo:
	DB	102					; 00000066H
	DB	88					; 00000058H
	DB	0
$LN4@SetCheckpo:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetCheckpoint@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SetCheckpoint@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-608]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetCheckpoint@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetCheckpoint@@YAXPAURPCParameters@@@Z ENDP		; SetCheckpoint
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?VehicleSpawn@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_iWait$2 = -632						; size = 4
_v$3 = -620						; size = 4
_data$4 = -608						; size = 4
_i$5 = -596						; size = 4
_pDataStart$6 = -584					; size = 4
_iVehicle$ = -572					; size = 4
_cNumberPlate$ = -560					; size = 9
_m_CarModInfo$ = -540					; size = 23
_bHasCarModInfo$ = -505					; size = 1
_bHasNumberPlate$ = -493				; size = 1
_iInterior$ = -484					; size = 4
_iColor2$ = -472					; size = 4
_iColor1$ = -460					; size = 4
_fHealth$ = -448					; size = 4
_fSpawnRotation$ = -436					; size = 4
_fRotation$ = -424					; size = 4
_vecSpawnPos$ = -412					; size = 12
_vecPos$ = -392						; size = 12
_iVehicleType$ = -372					; size = 4
_VehicleID$ = -360					; size = 2
_bsData$ = -348						; size = 273
_pVehiclePool$ = -64					; size = 4
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?VehicleSpawn@@YAXPAURPCParameters@@@Z PROC		; VehicleSpawn, COMDAT

; 451  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?VehicleSpawn@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 816				; 00000330H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-828]
	mov	ecx, 204				; 000000ccH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 452  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 453  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 454  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 455  : 
; 456  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 457  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 458  : 	VEHICLEID VehicleID=0;

	xor	eax, eax
	mov	WORD PTR _VehicleID$[ebp], ax

; 459  : 	int iVehicleType;
; 460  : 	VECTOR vecPos;
; 461  : 	VECTOR vecSpawnPos;
; 462  : 	float fRotation;
; 463  : 	float fSpawnRotation;
; 464  : 	float fHealth;
; 465  : 	int iColor1, iColor2;
; 466  : 	int iInterior;
; 467  : 	bool bHasNumberPlate = false;

	mov	BYTE PTR _bHasNumberPlate$[ebp], 0

; 468  : 	bool bHasCarModInfo = false;

	mov	BYTE PTR _bHasCarModInfo$[ebp], 0

; 469  : 
; 470  : 	CAR_MOD_INFO	m_CarModInfo;
; 471  : 	CHAR cNumberPlate[9];
; 472  : 
; 473  : 	memset(&m_CarModInfo,0,sizeof(CAR_MOD_INFO));

	push	23					; 00000017H
	push	0
	lea	eax, DWORD PTR _m_CarModInfo$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 474  : 	memset(&cNumberPlate[0],0,9);

	push	9
	push	0
	mov	eax, 1
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _cNumberPlate$[ebp+ecx]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 475  : 
; 476  : 	bsData.Read(VehicleID);

	lea	eax, DWORD PTR _VehicleID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 477  : 	bsData.Read(iVehicleType);

	lea	eax, DWORD PTR _iVehicleType$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 478  : 	bsData.Read(vecPos.X);

	lea	eax, DWORD PTR _vecPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 479  : 	bsData.Read(vecPos.Y);

	lea	eax, DWORD PTR _vecPos$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 480  : 	bsData.Read(vecPos.Z);

	lea	eax, DWORD PTR _vecPos$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 481  : 	bsData.Read(fRotation);

	lea	eax, DWORD PTR _fRotation$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 482  : 	bsData.Read(iColor1);

	lea	eax, DWORD PTR _iColor1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 483  : 	bsData.Read(iColor2);

	lea	eax, DWORD PTR _iColor2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 484  : 	bsData.Read(fHealth);

	lea	eax, DWORD PTR _fHealth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 485  : 	bsData.Read(vecSpawnPos.X);

	lea	eax, DWORD PTR _vecSpawnPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 486  : 	bsData.Read(vecSpawnPos.Y);

	lea	eax, DWORD PTR _vecSpawnPos$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 487  : 	bsData.Read(vecSpawnPos.Z);

	lea	eax, DWORD PTR _vecSpawnPos$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 488  : 	bsData.Read(fSpawnRotation);

	lea	eax, DWORD PTR _fSpawnRotation$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 489  : 	bsData.Read(iInterior);

	lea	eax, DWORD PTR _iInterior$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 490  : 
; 491  : 	bsData.Read(bHasNumberPlate);

	lea	eax, DWORD PTR _bHasNumberPlate$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 492  : 	if(bHasNumberPlate) {

	movzx	eax, BYTE PTR _bHasNumberPlate$[ebp]
	test	eax, eax
	je	SHORT $LN15@VehicleSpa

; 493  : 		bsData.Read(cNumberPlate, 9); // Constant size defined by SA

	push	9
	lea	eax, DWORD PTR _cNumberPlate$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read
$LN15@VehicleSpa:

; 494  : 	}
; 495  : 
; 496  : 	bsData.Read(bHasCarModInfo);

	lea	eax, DWORD PTR _bHasCarModInfo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 497  : 	if(bHasCarModInfo) {

	movzx	eax, BYTE PTR _bHasCarModInfo$[ebp]
	test	eax, eax
	je	SHORT $LN14@VehicleSpa

; 498  : 		bsData.Read((PCHAR)&m_CarModInfo, sizeof(m_CarModInfo));

	push	23					; 00000017H
	lea	eax, DWORD PTR _m_CarModInfo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 499  : 	} else {

	jmp	SHORT $LN13@VehicleSpa
$LN14@VehicleSpa:

; 500  : 		m_CarModInfo.iColor0 = -1;

	mov	DWORD PTR _m_CarModInfo$[ebp+15], -1

; 501  : 		m_CarModInfo.iColor1 = -1;

	mov	DWORD PTR _m_CarModInfo$[ebp+19], -1
$LN13@VehicleSpa:

; 502  : 	}
; 503  : 
; 504  : 	if (!pVehiclePool->New(VehicleID,iVehicleType, &vecPos,fRotation,iColor1,iColor2,&vecSpawnPos,fSpawnRotation, iInterior, cNumberPlate))

	lea	eax, DWORD PTR _cNumberPlate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iInterior$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fSpawnRotation$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _vecSpawnPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _iColor2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iColor1$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fRotation$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _vecPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _iVehicleType$[ebp]
	push	eax
	movzx	ecx, WORD PTR _VehicleID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?New@CVehiclePool@@QAEHGHPAU_VECTOR@@MHH0MHPAD@Z ; CVehiclePool::New
	test	eax, eax
	jne	SHORT $LN12@VehicleSpa

; 505  : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN16@VehicleSpa
$LN12@VehicleSpa:

; 506  : 		
; 507  : 	int iVehicle = pVehiclePool->FindGtaIDFromID(VehicleID);

	movzx	eax, WORD PTR _VehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindGtaIDFromID@CVehiclePool@@QAEHH@Z	; CVehiclePool::FindGtaIDFromID
	mov	DWORD PTR _iVehicle$[ebp], eax

; 508  : 
; 509  : 	if (iVehicle)

	cmp	DWORD PTR _iVehicle$[ebp], 0
	je	$LN2@VehicleSpa

; 510  : 	{
; 511  : 		BYTE*	pDataStart	= (BYTE*)&m_CarModInfo.byteCarMod0;

	lea	eax, DWORD PTR _m_CarModInfo$[ebp]
	mov	DWORD PTR _pDataStart$6[ebp], eax

; 512  : 		for(int i = 0; i < 14; i++)

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN10@VehicleSpa
$LN9@VehicleSpa:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN10@VehicleSpa:
	cmp	DWORD PTR _i$5[ebp], 14			; 0000000eH
	jge	$LN8@VehicleSpa

; 513  : 		{
; 514  : 			DWORD data = pDataStart[i];

	mov	eax, DWORD PTR _pDataStart$6[ebp]
	add	eax, DWORD PTR _i$5[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _data$4[ebp], ecx

; 515  : 			DWORD v = 0;

	mov	DWORD PTR _v$3[ebp], 0

; 516  : 
; 517  : 			if (data == 0)

	cmp	DWORD PTR _data$4[ebp], 0
	jne	SHORT $LN7@VehicleSpa

; 518  : 				continue;

	jmp	SHORT $LN9@VehicleSpa
$LN7@VehicleSpa:

; 519  : 
; 520  : 			data += 1000;

	mov	eax, DWORD PTR _data$4[ebp]
	add	eax, 1000				; 000003e8H
	mov	DWORD PTR _data$4[ebp], eax

; 521  : 
; 522  : 			pGame->RequestModel(data);

	mov	eax, DWORD PTR _data$4[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel

; 523  : 			pGame->LoadRequestedModels();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?LoadRequestedModels@CGame@@QAEXXZ	; CGame::LoadRequestedModels

; 524  : 			ScriptCommand(&request_car_component,data);

	mov	eax, DWORD PTR _data$4[ebp]
	push	eax
	push	OFFSET _request_car_component
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 525  : 
; 526  : 			int iWait = 10;

	mov	DWORD PTR _iWait$2[ebp], 10		; 0000000aH
$LN6@VehicleSpa:

; 527  : 			while(!ScriptCommand(&is_component_available,data) && iWait) {

	mov	eax, DWORD PTR _data$4[ebp]
	push	eax
	push	OFFSET _is_component_available
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@VehicleSpa
	cmp	DWORD PTR _iWait$2[ebp], 0
	je	SHORT $LN5@VehicleSpa

; 528  : 				Sleep(5);

	mov	esi, esp
	push	5
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 529  : 				iWait--;

	mov	eax, DWORD PTR _iWait$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _iWait$2[ebp], eax

; 530  : 			}

	jmp	SHORT $LN6@VehicleSpa
$LN5@VehicleSpa:

; 531  : 			if(!iWait) {

	cmp	DWORD PTR _iWait$2[ebp], 0
	jne	SHORT $LN4@VehicleSpa

; 532  : 				//pChatWindow->AddDebugMessage("Timeout on car component.");
; 533  : 				continue;

	jmp	$LN9@VehicleSpa
$LN4@VehicleSpa:

; 534  : 			}
; 535  : 			//pChatWindow->AddDebugMessage("CarComponent: %u,%u,%u",VehicleID,data,iVehicleType);
; 536  : 			ScriptCommand(&add_car_component,iVehicle,data,&v);

	lea	eax, DWORD PTR _v$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _iVehicle$[ebp]
	push	edx
	push	OFFSET _add_car_component
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H

; 537  : 		}

	jmp	$LN9@VehicleSpa
$LN8@VehicleSpa:

; 538  : 
; 539  : 		if(m_CarModInfo.bytePaintJob)

	movzx	eax, BYTE PTR _m_CarModInfo$[ebp+14]
	test	eax, eax
	je	SHORT $LN3@VehicleSpa

; 540  : 			ScriptCommand(&change_car_skin,iVehicle,m_CarModInfo.bytePaintJob);

	movzx	eax, BYTE PTR _m_CarModInfo$[ebp+14]
	push	eax
	mov	ecx, DWORD PTR _iVehicle$[ebp]
	push	ecx
	push	OFFSET _change_car_skin
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN3@VehicleSpa:

; 541  : 
; 542  : 		if(m_CarModInfo.iColor0 != -1 || m_CarModInfo.iColor1 != -1) 

	cmp	DWORD PTR _m_CarModInfo$[ebp+15], -1
	jne	SHORT $LN1@VehicleSpa
	cmp	DWORD PTR _m_CarModInfo$[ebp+19], -1
	je	SHORT $LN2@VehicleSpa
$LN1@VehicleSpa:

; 543  : 			pVehiclePool->GetAt(VehicleID)->SetColor(m_CarModInfo.iColor0,m_CarModInfo.iColor1);

	mov	eax, DWORD PTR _m_CarModInfo$[ebp+19]
	push	eax
	mov	ecx, DWORD PTR _m_CarModInfo$[ebp+15]
	push	ecx
	movzx	edx, WORD PTR _VehicleID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	ecx, eax
	call	?SetColor@CVehicle@@QAEXHH@Z		; CVehicle::SetColor
$LN2@VehicleSpa:

; 544  : 	}
; 545  : 
; 546  : 
; 547  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN16@VehicleSpa:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@VehicleSpa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 828				; 0000033cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN38@VehicleSpa:
	DD	17					; 00000011H
	DD	$LN37@VehicleSpa
$LN37@VehicleSpa:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN19@VehicleSpa
	DD	-348					; fffffea4H
	DD	273					; 00000111H
	DD	$LN20@VehicleSpa
	DD	-360					; fffffe98H
	DD	2
	DD	$LN21@VehicleSpa
	DD	-372					; fffffe8cH
	DD	4
	DD	$LN22@VehicleSpa
	DD	-392					; fffffe78H
	DD	12					; 0000000cH
	DD	$LN23@VehicleSpa
	DD	-412					; fffffe64H
	DD	12					; 0000000cH
	DD	$LN24@VehicleSpa
	DD	-424					; fffffe58H
	DD	4
	DD	$LN25@VehicleSpa
	DD	-436					; fffffe4cH
	DD	4
	DD	$LN26@VehicleSpa
	DD	-448					; fffffe40H
	DD	4
	DD	$LN27@VehicleSpa
	DD	-460					; fffffe34H
	DD	4
	DD	$LN28@VehicleSpa
	DD	-472					; fffffe28H
	DD	4
	DD	$LN29@VehicleSpa
	DD	-484					; fffffe1cH
	DD	4
	DD	$LN30@VehicleSpa
	DD	-493					; fffffe13H
	DD	1
	DD	$LN31@VehicleSpa
	DD	-505					; fffffe07H
	DD	1
	DD	$LN32@VehicleSpa
	DD	-540					; fffffde4H
	DD	23					; 00000017H
	DD	$LN33@VehicleSpa
	DD	-560					; fffffdd0H
	DD	9
	DD	$LN34@VehicleSpa
	DD	-620					; fffffd94H
	DD	4
	DD	$LN35@VehicleSpa
$LN35@VehicleSpa:
	DB	118					; 00000076H
	DB	0
$LN34@VehicleSpa:
	DB	99					; 00000063H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN33@VehicleSpa:
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN32@VehicleSpa:
	DB	98					; 00000062H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN31@VehicleSpa:
	DB	98					; 00000062H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN30@VehicleSpa:
	DB	105					; 00000069H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN29@VehicleSpa:
	DB	105					; 00000069H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN28@VehicleSpa:
	DB	105					; 00000069H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	49					; 00000031H
	DB	0
$LN27@VehicleSpa:
	DB	102					; 00000066H
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN26@VehicleSpa:
	DB	102					; 00000066H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN25@VehicleSpa:
	DB	102					; 00000066H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN24@VehicleSpa:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN23@VehicleSpa:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN22@VehicleSpa:
	DB	105					; 00000069H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN21@VehicleSpa:
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN20@VehicleSpa:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN19@VehicleSpa:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?VehicleSpawn@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?VehicleSpawn@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-832]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?VehicleSpawn@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?VehicleSpawn@@YAXPAURPCParameters@@@Z ENDP		; VehicleSpawn
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?ExitVehicle@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_pVehiclePool$ = -384					; size = 4
_pRemotePlayer$ = -372					; size = 4
_VehicleID$ = -360					; size = 2
_bytePlayerID$ = -345					; size = 1
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?ExitVehicle@@YAXPAURPCParameters@@@Z PROC		; ExitVehicle, COMDAT

; 426  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ExitVehicle@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 568				; 00000238H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-580]
	mov	ecx, 142				; 0000008eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 427  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 428  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 429  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 430  : 
; 431  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 432  : 	BYTE bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 433  : 	VEHICLEID VehicleID=0;

	xor	eax, eax
	mov	WORD PTR _VehicleID$[ebp], ax

; 434  : 
; 435  : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 436  : 	bsData.Read(VehicleID);

	lea	eax, DWORD PTR _VehicleID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 437  : 
; 438  : 	CRemotePlayer *pRemotePlayer = pNetGame->GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemotePlayer$[ebp], eax

; 439  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 440  : 
; 441  : 	if(pRemotePlayer) {

	cmp	DWORD PTR _pRemotePlayer$[ebp], 0
	je	SHORT $LN1@ExitVehicl

; 442  : 		pRemotePlayer->ExitVehicle();

	mov	ecx, DWORD PTR _pRemotePlayer$[ebp]
	call	?ExitVehicle@CRemotePlayer@@QAEXXZ	; CRemotePlayer::ExitVehicle
$LN1@ExitVehicl:

; 443  : 	}
; 444  : 
; 445  : 	//pChatWindow->AddDebugMessage("Player(%u)::ExitVehicle(%u)",bytePlayerID,byteVehicleID);
; 446  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ExitVehicl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 580				; 00000244H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN11@ExitVehicl:
	DD	4
	DD	$LN10@ExitVehicl
$LN10@ExitVehicl:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN5@ExitVehicl
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN6@ExitVehicl
	DD	-345					; fffffea7H
	DD	1
	DD	$LN7@ExitVehicl
	DD	-360					; fffffe98H
	DD	2
	DD	$LN8@ExitVehicl
$LN8@ExitVehicl:
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN7@ExitVehicl:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN6@ExitVehicl:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN5@ExitVehicl:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ExitVehicle@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ExitVehicle@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-584]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ExitVehicle@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ExitVehicle@@YAXPAURPCParameters@@@Z ENDP		; ExitVehicle
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?EnterVehicle@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_pVehiclePool$ = -408					; size = 4
_pRemotePlayer$ = -396					; size = 4
_bPassenger$ = -384					; size = 4
_bytePassenger$ = -369					; size = 1
_VehicleID$ = -360					; size = 2
_bytePlayerID$ = -345					; size = 1
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?EnterVehicle@@YAXPAURPCParameters@@@Z PROC		; EnterVehicle, COMDAT

; 395  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnterVehicle@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 592				; 00000250H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-604]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 396  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 397  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 398  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 399  : 
; 400  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 401  : 	BYTE bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 402  : 	VEHICLEID VehicleID=0;

	xor	eax, eax
	mov	WORD PTR _VehicleID$[ebp], ax

; 403  : 	BYTE bytePassenger=0;

	mov	BYTE PTR _bytePassenger$[ebp], 0

; 404  : 	BOOL bPassenger=FALSE;

	mov	DWORD PTR _bPassenger$[ebp], 0

; 405  : 
; 406  : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 407  : 	bsData.Read(VehicleID);

	lea	eax, DWORD PTR _VehicleID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 408  : 	bsData.Read(bytePassenger);

	lea	eax, DWORD PTR _bytePassenger$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 409  : 
; 410  : 	if(bytePassenger) bPassenger = TRUE;

	movzx	eax, BYTE PTR _bytePassenger$[ebp]
	test	eax, eax
	je	SHORT $LN2@EnterVehic
	mov	DWORD PTR _bPassenger$[ebp], 1
$LN2@EnterVehic:

; 411  : 
; 412  : 	CRemotePlayer *pRemotePlayer = pNetGame->GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemotePlayer$[ebp], eax

; 413  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 414  : 
; 415  : 	if(pRemotePlayer) {

	cmp	DWORD PTR _pRemotePlayer$[ebp], 0
	je	SHORT $LN1@EnterVehic

; 416  : 		pRemotePlayer->EnterVehicle(VehicleID,bPassenger);

	mov	eax, DWORD PTR _bPassenger$[ebp]
	push	eax
	movzx	ecx, WORD PTR _VehicleID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pRemotePlayer$[ebp]
	call	?EnterVehicle@CRemotePlayer@@QAEXGH@Z	; CRemotePlayer::EnterVehicle
$LN1@EnterVehic:

; 417  : 	}
; 418  : 
; 419  : 	//pChatWindow->AddDebugMessage("Player(%u)::EnterVehicle(%u)",bytePlayerID,byteVehicleID);
; 420  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@EnterVehic
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 604				; 0000025cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@EnterVehic:
	DD	5
	DD	$LN12@EnterVehic
$LN12@EnterVehic:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN6@EnterVehic
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN7@EnterVehic
	DD	-345					; fffffea7H
	DD	1
	DD	$LN8@EnterVehic
	DD	-360					; fffffe98H
	DD	2
	DD	$LN9@EnterVehic
	DD	-369					; fffffe8fH
	DD	1
	DD	$LN10@EnterVehic
$LN10@EnterVehic:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN9@EnterVehic:
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN8@EnterVehic:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN7@EnterVehic:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN6@EnterVehic:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EnterVehicle@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?EnterVehicle@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-608]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EnterVehicle@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EnterVehicle@@YAXPAURPCParameters@@@Z ENDP		; EnterVehicle
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?Death@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_pRemotePed$2 = -372					; size = 4
_pRemotePlayer$ = -360					; size = 4
_bytePlayerID$ = -345					; size = 1
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?Death@@YAXPAURPCParameters@@@Z PROC			; Death, COMDAT

; 355  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Death@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-568]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 356  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 357  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 358  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 359  : 
; 360  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 361  : 
; 362  : 	BYTE bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 363  : 
; 364  : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 365  : 
; 366  : 	CRemotePlayer *pRemotePlayer = pNetGame->GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemotePlayer$[ebp], eax

; 367  : 	if(pRemotePlayer) {

	cmp	DWORD PTR _pRemotePlayer$[ebp], 0
	je	SHORT $LN1@Death

; 368  : 		CPlayerPed* pRemotePed = pRemotePlayer->GetPlayerPed();

	mov	ecx, DWORD PTR _pRemotePlayer$[ebp]
	call	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
	mov	DWORD PTR _pRemotePed$2[ebp], eax

; 369  : 		#ifdef WANT_PICKUP
; 370  : 		if (pRemotePed->GetDistanceFromLocalPlayerPed() <= 100.0f)
; 371  : 		{
; 372  : 			MATRIX4X4 matPlayer;
; 373  : 			pRemotePed->GetMatrix(&matPlayer);
; 374  : 
; 375  : 			WEAPON_SLOT_TYPE * WeaponSlot = pRemotePlayer->GetCurrentWeaponSlot()
; 376  : 			if (WeaponSlot->dwType != 0 &&
; 377  : 				WeaponSlot->dwType != WEAPON_GRENADE &&
; 378  : 				WeaponSlot->dwType != WEAPON_TEARGAS &&
; 379  : 				WeaponSlot->dwType != WEAPON_MOLTOV)
; 380  : 			{
; 381  : 				//DWORD hnd = 0;
; 382  : 				//ScriptCommand(&create_pickup_with_ammo, pGame->GetWeaponModelIDFromWeapon(pRemotePed->m_pPed->WeaponSlots[i].dwType), 4, pRemotePed->m_pPed->WeaponSlots[i].dwAmmoInClip, matPlayer.pos.X + rand()%4, matPlayer.pos.Y + rand()%4, matPlayer.pos.Z, &hnd);	
; 383  : 				pNetGame->GetPickupPool()->New(pGame->GetWeaponModelIDFromWeapon(WeaponSlot->dwType), matPlayer.pos.X, matPlayer.pos.Y, matPlayer.pos.Z, WeaponSlot->dwAmmoInClip, bytePlayerID);
; 384  : 			}
; 385  : 		}
; 386  : 		#endif
; 387  : 		pRemotePlayer->HandleDeath();

	mov	ecx, DWORD PTR _pRemotePlayer$[ebp]
	call	?HandleDeath@CRemotePlayer@@QAEXXZ	; CRemotePlayer::HandleDeath
$LN1@Death:

; 388  : 	}
; 389  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Death
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 568				; 00000238H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@Death:
	DD	3
	DD	$LN9@Death
$LN9@Death:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN5@Death
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN6@Death
	DD	-345					; fffffea7H
	DD	1
	DD	$LN7@Death
$LN7@Death:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN6@Death:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN5@Death:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Death@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Death@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-572]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Death@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Death@@YAXPAURPCParameters@@@Z ENDP			; Death
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?Spawn@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_dwColor$ = -428					; size = 4
_fRotation$ = -416					; size = 4
_vecPos$ = -404						; size = 12
_iSkin$ = -384						; size = 4
_byteTeam$ = -369					; size = 1
_bytePlayerID$ = -357					; size = 1
_pRemotePlayer$ = -348					; size = 4
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?Spawn@@YAXPAURPCParameters@@@Z PROC			; Spawn, COMDAT

; 320  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Spawn@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 612				; 00000264H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-624]
	mov	ecx, 153				; 00000099H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 321  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 322  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 323  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 324  : 
; 325  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 326  : 	CRemotePlayer *pRemotePlayer;
; 327  : 
; 328  : 	BYTE bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 329  : 	BYTE byteTeam=0;

	mov	BYTE PTR _byteTeam$[ebp], 0

; 330  : 	int iSkin=0;

	mov	DWORD PTR _iSkin$[ebp], 0

; 331  : 	VECTOR vecPos;
; 332  : 	float fRotation=0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fRotation$[ebp], xmm0

; 333  : 	DWORD dwColor=0;

	mov	DWORD PTR _dwColor$[ebp], 0

; 334  : 
; 335  : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 336  : 	bsData.Read(byteTeam);

	lea	eax, DWORD PTR _byteTeam$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 337  : 	bsData.Read(iSkin);

	lea	eax, DWORD PTR _iSkin$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 338  : 	bsData.Read(vecPos.X);

	lea	eax, DWORD PTR _vecPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 339  : 	bsData.Read(vecPos.Y);

	lea	eax, DWORD PTR _vecPos$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 340  : 	bsData.Read(vecPos.Z);

	lea	eax, DWORD PTR _vecPos$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 341  : 	bsData.Read(fRotation);

	lea	eax, DWORD PTR _fRotation$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 342  : 	bsData.Read(dwColor);

	lea	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z	; RakNet::BitStream::Read<unsigned long>

; 343  : 
; 344  : 	pRemotePlayer = pNetGame->GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemotePlayer$[ebp], eax

; 345  : 
; 346  : 	if(pRemotePlayer) 

	cmp	DWORD PTR _pRemotePlayer$[ebp], 0
	je	SHORT $LN1@Spawn

; 347  : 		pRemotePlayer->Spawn(byteTeam,iSkin,&vecPos,fRotation,dwColor);

	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _fRotation$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vecPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iSkin$[ebp]
	push	edx
	movzx	eax, BYTE PTR _byteTeam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRemotePlayer$[ebp]
	call	?Spawn@CRemotePlayer@@QAEHEHPAU_VECTOR@@MK@Z ; CRemotePlayer::Spawn
$LN1@Spawn:

; 348  : 		
; 349  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Spawn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 624				; 00000270H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@Spawn:
	DD	8
	DD	$LN14@Spawn
$LN14@Spawn:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN5@Spawn
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN6@Spawn
	DD	-357					; fffffe9bH
	DD	1
	DD	$LN7@Spawn
	DD	-369					; fffffe8fH
	DD	1
	DD	$LN8@Spawn
	DD	-384					; fffffe80H
	DD	4
	DD	$LN9@Spawn
	DD	-404					; fffffe6cH
	DD	12					; 0000000cH
	DD	$LN10@Spawn
	DD	-416					; fffffe60H
	DD	4
	DD	$LN11@Spawn
	DD	-428					; fffffe54H
	DD	4
	DD	$LN12@Spawn
$LN12@Spawn:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN11@Spawn:
	DB	102					; 00000066H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN10@Spawn:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN9@Spawn:
	DB	105					; 00000069H
	DB	83					; 00000053H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN8@Spawn:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN7@Spawn:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN6@Spawn:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN5@Spawn:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Spawn@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Spawn@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-628]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Spawn@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Spawn@@YAXPAURPCParameters@@@Z ENDP			; Spawn
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?RequestSpawn@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_pPlayer$ = -360					; size = 4
_bsData$ = -348						; size = 273
_byteRequestOutcome$ = -61				; size = 1
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?RequestSpawn@@YAXPAURPCParameters@@@Z PROC		; RequestSpawn, COMDAT

; 299  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RequestSpawn@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 300  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 301  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 302  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 303  : 
; 304  : 	BYTE byteRequestOutcome=0;

	mov	BYTE PTR _byteRequestOutcome$[ebp], 0

; 305  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 306  : 	bsData.Read(byteRequestOutcome);

	lea	eax, DWORD PTR _byteRequestOutcome$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 307  : 	CLocalPlayer *pPlayer = pNetGame->GetPlayerPool()->GetLocalPlayer();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	DWORD PTR _pPlayer$[ebp], eax

; 308  : 	if (byteRequestOutcome == 2 || (byteRequestOutcome && pPlayer->m_bWaitingForSpawnRequestReply)) {

	movzx	eax, BYTE PTR _byteRequestOutcome$[ebp]
	cmp	eax, 2
	je	SHORT $LN2@RequestSpa
	movzx	eax, BYTE PTR _byteRequestOutcome$[ebp]
	test	eax, eax
	je	SHORT $LN3@RequestSpa
	mov	eax, DWORD PTR _pPlayer$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@RequestSpa
$LN2@RequestSpa:

; 309  : 		pPlayer->Spawn();

	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?Spawn@CLocalPlayer@@QAEHXZ		; CLocalPlayer::Spawn

; 310  : 	}
; 311  : 	else {

	jmp	SHORT $LN1@RequestSpa
$LN3@RequestSpa:

; 312  : 		pPlayer->m_bWaitingForSpawnRequestReply = false;

	mov	eax, DWORD PTR _pPlayer$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN1@RequestSpa:

; 313  : 	}
; 314  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@RequestSpa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@RequestSpa:
	DD	3
	DD	$LN11@RequestSpa
$LN11@RequestSpa:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN7@RequestSpa
	DD	-61					; ffffffc3H
	DD	1
	DD	$LN8@RequestSpa
	DD	-348					; fffffea4H
	DD	273					; 00000111H
	DD	$LN9@RequestSpa
$LN9@RequestSpa:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN8@RequestSpa:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN7@RequestSpa:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RequestSpawn@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?RequestSpawn@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RequestSpawn@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RequestSpawn@@YAXPAURPCParameters@@@Z ENDP		; RequestSpawn
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?RequestClass@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_pPlayer$ = -416					; size = 4
_SpawnInfo$ = -404					; size = 45
_byteRequestOutcome$ = -345				; size = 1
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?RequestClass@@YAXPAURPCParameters@@@Z PROC		; RequestClass, COMDAT

; 273  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RequestClass@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 600				; 00000258H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-612]
	mov	ecx, 150				; 00000096H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 274  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 275  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 276  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 277  : 
; 278  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 279  : 	BYTE byteRequestOutcome=0;

	mov	BYTE PTR _byteRequestOutcome$[ebp], 0

; 280  : 	PLAYER_SPAWN_INFO SpawnInfo;
; 281  : 	CLocalPlayer *pPlayer = pNetGame->GetPlayerPool()->GetLocalPlayer();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	DWORD PTR _pPlayer$[ebp], eax

; 282  : 
; 283  : 	bsData.Read(byteRequestOutcome);

	lea	eax, DWORD PTR _byteRequestOutcome$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 284  : 	bsData.Read((PCHAR)&SpawnInfo,sizeof(PLAYER_SPAWN_INFO));

	push	45					; 0000002dH
	lea	eax, DWORD PTR _SpawnInfo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 285  : 
; 286  : 	if(byteRequestOutcome) {

	movzx	eax, BYTE PTR _byteRequestOutcome$[ebp]
	test	eax, eax
	je	SHORT $LN2@RequestCla

; 287  : 		pPlayer->SetSpawnInfo(&SpawnInfo);

	lea	eax, DWORD PTR _SpawnInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?SetSpawnInfo@CLocalPlayer@@QAEXPAU_PLAYER_SPAWN_INFO@@@Z ; CLocalPlayer::SetSpawnInfo

; 288  : 		pPlayer->HandleClassSelectionOutcome(TRUE);

	push	1
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?HandleClassSelectionOutcome@CLocalPlayer@@QAEXH@Z ; CLocalPlayer::HandleClassSelectionOutcome

; 289  : 	}
; 290  : 	else {

	jmp	SHORT $LN1@RequestCla
$LN2@RequestCla:

; 291  : 		pPlayer->HandleClassSelectionOutcome(FALSE);

	push	0
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?HandleClassSelectionOutcome@CLocalPlayer@@QAEXH@Z ; CLocalPlayer::HandleClassSelectionOutcome
$LN1@RequestCla:

; 292  : 	}
; 293  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@RequestCla
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 612				; 00000264H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@RequestCla:
	DD	4
	DD	$LN11@RequestCla
$LN11@RequestCla:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN6@RequestCla
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN7@RequestCla
	DD	-345					; fffffea7H
	DD	1
	DD	$LN8@RequestCla
	DD	-404					; fffffe6cH
	DD	45					; 0000002dH
	DD	$LN9@RequestCla
$LN9@RequestCla:
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN8@RequestCla:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN7@RequestCla:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN6@RequestCla:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RequestClass@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?RequestClass@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-616]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RequestClass@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RequestClass@@YAXPAURPCParameters@@@Z ENDP		; RequestClass
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?TeamPrivmsg@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
$T2 = -1116						; size = 4
_pRemotePlayer$3 = -912					; size = 4
_szTempBuffer$4 = -900					; size = 256
_pPlayerPool$ = -636					; size = 4
_szText$ = -624						; size = 256
_byteTextLen$ = -357					; size = 1
_bytePlayerID$ = -345					; size = 1
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?TeamPrivmsg@@YAXPAURPCParameters@@@Z PROC		; TeamPrivmsg, COMDAT

; 233  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TeamPrivmsg@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1108				; 00000454H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1120]
	mov	ecx, 277				; 00000115H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 234  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 235  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 236  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 237  : 
; 238  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 239  : 
; 240  : 	if(pNetGame->GetGameState() != GAMESTATE_CONNECTED)	return;

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	je	SHORT $LN5@TeamPrivms
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN7@TeamPrivms
$LN5@TeamPrivms:

; 241  : 
; 242  :     BYTE bytePlayerID;
; 243  : 	BYTE byteTextLen;
; 244  : 	CHAR szText[256];
; 245  : 
; 246  : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 247  : 	bsData.Read(byteTextLen);

	lea	eax, DWORD PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 248  : 
; 249  : 	if(byteTextLen > MAX_CMD_INPUT) return;

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN4@TeamPrivms
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN7@TeamPrivms
$LN4@TeamPrivms:

; 250  : 
; 251  : 	bsData.Read(szText,byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szText$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 252  : 
; 253  : 	szText[byteTextLen] = '\0';

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 256			; 00000100H
	jae	SHORT $LN8@TeamPrivms
	jmp	SHORT $LN9@TeamPrivms
$LN8@TeamPrivms:
	call	___report_rangecheckfailure
$LN9@TeamPrivms:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _szText$[ebp+ecx], 0

; 254  : 
; 255  : 	CPlayerPool* pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 256  : 	if (bytePlayerID == pPlayerPool->GetLocalPlayerID())

	movzx	esi, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayerID@CPlayerPool@@QAEEXZ	; CPlayerPool::GetLocalPlayerID
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN3@TeamPrivms

; 257  : 	{
; 258  : 		char szTempBuffer[256];
; 259  : 		sprintf(szTempBuffer, "Team PM sent: %s", szText);

	lea	eax, DWORD PTR _szText$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@DKFJCKKK@Team?5PM?5sent?3?5?$CFs?$AA@
	lea	ecx, DWORD PTR _szTempBuffer$4[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 260  : 		pChatWindow->AddClientMessage(D3DCOLOR_ARGB(255,220,24,26), szTempBuffer);

	lea	eax, DWORD PTR _szTempBuffer$4[ebp]
	push	eax
	push	-2353126				; ffdc181aH
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	call	?AddClientMessage@CChatWindow@@QAEXKPAD@Z ; CChatWindow::AddClientMessage

; 261  : 	} else {

	jmp	SHORT $LN2@TeamPrivms
$LN3@TeamPrivms:

; 262  : 		CRemotePlayer *pRemotePlayer = pNetGame->GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemotePlayer$3[ebp], eax

; 263  : 		if(pRemotePlayer) {

	cmp	DWORD PTR _pRemotePlayer$3[ebp], 0
	je	SHORT $LN2@TeamPrivms

; 264  : 			pRemotePlayer->TeamPrivmsg(szText);

	lea	eax, DWORD PTR _szText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRemotePlayer$3[ebp]
	call	?TeamPrivmsg@CRemotePlayer@@QAEXPAD@Z	; CRemotePlayer::TeamPrivmsg
$LN2@TeamPrivms:

; 265  : 		}
; 266  : 	}
; 267  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN7@TeamPrivms:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TeamPrivms
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1120				; 00000460H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@TeamPrivms:
	DD	6
	DD	$LN18@TeamPrivms
$LN18@TeamPrivms:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN11@TeamPrivms
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN12@TeamPrivms
	DD	-345					; fffffea7H
	DD	1
	DD	$LN13@TeamPrivms
	DD	-357					; fffffe9bH
	DD	1
	DD	$LN14@TeamPrivms
	DD	-624					; fffffd90H
	DD	256					; 00000100H
	DD	$LN15@TeamPrivms
	DD	-900					; fffffc7cH
	DD	256					; 00000100H
	DD	$LN16@TeamPrivms
$LN16@TeamPrivms:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@TeamPrivms:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN14@TeamPrivms:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN13@TeamPrivms:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN12@TeamPrivms:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN11@TeamPrivms:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TeamPrivmsg@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?TeamPrivmsg@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TeamPrivmsg@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TeamPrivmsg@@YAXPAURPCParameters@@@Z ENDP		; TeamPrivmsg
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?Privmsg@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
$T2 = -1128						; size = 4
_pRemotePlayer$3 = -924					; size = 4
_pPlayerPool$ = -912					; size = 4
_szStr$ = -900						; size = 256
_szText$ = -636						; size = 256
_byteTextLen$ = -369					; size = 1
_byteToPlayerID$ = -357					; size = 1
_bytePlayerID$ = -345					; size = 1
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?Privmsg@@YAXPAURPCParameters@@@Z PROC			; Privmsg, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Privmsg@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1120				; 00000460H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1132]
	mov	ecx, 280				; 00000118H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 192  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 193  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 194  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 195  : 
; 196  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 197  : 
; 198  : 	if(pNetGame->GetGameState() != GAMESTATE_CONNECTED)	return;

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	je	SHORT $LN5@Privmsg
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN7@Privmsg
$LN5@Privmsg:

; 199  : 
; 200  : 	BYTE bytePlayerID;
; 201  : 	BYTE byteToPlayerID;
; 202  : 	BYTE byteTextLen;
; 203  : 	CHAR szText[256];
; 204  : 	CHAR szStr[256];
; 205  : 
; 206  : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 207  : 	bsData.Read(byteToPlayerID);

	lea	eax, DWORD PTR _byteToPlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 208  : 	bsData.Read(byteTextLen);

	lea	eax, DWORD PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 209  : 
; 210  : 	if(byteTextLen > MAX_CMD_INPUT) return;

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN4@Privmsg
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN7@Privmsg
$LN4@Privmsg:

; 211  : 
; 212  : 	bsData.Read(szText,byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szText$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 213  : 
; 214  : 	szText[byteTextLen] = '\0';

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 256			; 00000100H
	jae	SHORT $LN8@Privmsg
	jmp	SHORT $LN9@Privmsg
$LN8@Privmsg:
	call	___report_rangecheckfailure
$LN9@Privmsg:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _szText$[ebp+ecx], 0

; 215  : 
; 216  : 	CPlayerPool* pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 217  : 	if (bytePlayerID == pPlayerPool->GetLocalPlayerID())

	movzx	esi, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayerID@CPlayerPool@@QAEEXZ	; CPlayerPool::GetLocalPlayerID
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN3@Privmsg

; 218  : 	{
; 219  : 		sprintf(szStr, "PM sent to %s: %s", pPlayerPool->GetPlayerName(byteToPlayerID), szText);

	lea	eax, DWORD PTR _szText$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _byteToPlayerID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetPlayerName@CPlayerPool@@QAEPADE@Z	; CPlayerPool::GetPlayerName
	push	eax
	push	OFFSET ??_C@_0BC@PKJNNCMA@PM?5sent?5to?5?$CFs?3?5?$CFs?$AA@
	lea	edx, DWORD PTR _szStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 220  : 		pChatWindow->AddClientMessage(D3DCOLOR_ARGB(255,220,24,26), szStr);

	lea	eax, DWORD PTR _szStr$[ebp]
	push	eax
	push	-2353126				; ffdc181aH
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	call	?AddClientMessage@CChatWindow@@QAEXKPAD@Z ; CChatWindow::AddClientMessage

; 221  : 	} else {

	jmp	SHORT $LN2@Privmsg
$LN3@Privmsg:

; 222  : 		CRemotePlayer *pRemotePlayer = pNetGame->GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemotePlayer$3[ebp], eax

; 223  : 		if(pRemotePlayer) {

	cmp	DWORD PTR _pRemotePlayer$3[ebp], 0
	je	SHORT $LN2@Privmsg

; 224  : 			pRemotePlayer->Privmsg(szText);	

	lea	eax, DWORD PTR _szText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRemotePlayer$3[ebp]
	call	?Privmsg@CRemotePlayer@@QAEXPAD@Z	; CRemotePlayer::Privmsg
$LN2@Privmsg:

; 225  : 		}
; 226  : 	}
; 227  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN7@Privmsg:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Privmsg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1132				; 0000046cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@Privmsg:
	DD	7
	DD	$LN19@Privmsg
$LN19@Privmsg:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN11@Privmsg
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN12@Privmsg
	DD	-345					; fffffea7H
	DD	1
	DD	$LN13@Privmsg
	DD	-357					; fffffe9bH
	DD	1
	DD	$LN14@Privmsg
	DD	-369					; fffffe8fH
	DD	1
	DD	$LN15@Privmsg
	DD	-636					; fffffd84H
	DD	256					; 00000100H
	DD	$LN16@Privmsg
	DD	-900					; fffffc7cH
	DD	256					; 00000100H
	DD	$LN17@Privmsg
$LN17@Privmsg:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN16@Privmsg:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN15@Privmsg:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN14@Privmsg:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN13@Privmsg:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN12@Privmsg:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN11@Privmsg:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Privmsg@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Privmsg@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1136]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Privmsg@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Privmsg@@YAXPAURPCParameters@@@Z ENDP			; Privmsg
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?Chat@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
$T2 = -852						; size = 4
_pRemotePlayer$3 = -648					; size = 4
_pPlayerPool$ = -636					; size = 4
_szText$ = -624						; size = 256
_byteTextLen$ = -357					; size = 1
_bytePlayerID$ = -345					; size = 1
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?Chat@@YAXPAURPCParameters@@@Z PROC			; Chat, COMDAT

; 151  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Chat@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 844				; 0000034cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-856]
	mov	ecx, 211				; 000000d3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 152  : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 153  : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 154  : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 155  : 
; 156  : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 157  : 	BYTE bytePlayerID;
; 158  : 	BYTE byteTextLen;
; 159  : 
; 160  : 	if(pNetGame->GetGameState() != GAMESTATE_CONNECTED)	return;

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	je	SHORT $LN5@Chat
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN7@Chat
$LN5@Chat:

; 161  : 
; 162  : 	unsigned char szText[256];
; 163  : 	memset(szText,0,256);

	push	256					; 00000100H
	push	0
	lea	eax, DWORD PTR _szText$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 164  : 
; 165  : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 166  : 	bsData.Read(byteTextLen);

	lea	eax, DWORD PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 167  : 
; 168  : 	if(byteTextLen > MAX_CMD_INPUT) return;

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	cmp	eax, 128				; 00000080H
	jle	SHORT $LN4@Chat
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN7@Chat
$LN4@Chat:

; 169  : 
; 170  : 	bsData.Read((char*)szText,byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szText$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 171  : 
; 172  : 	szText[byteTextLen] = '\0';

	movzx	eax, BYTE PTR _byteTextLen$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 256			; 00000100H
	jae	SHORT $LN8@Chat
	jmp	SHORT $LN9@Chat
$LN8@Chat:
	call	___report_rangecheckfailure
$LN9@Chat:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _szText$[ebp+ecx], 0

; 173  : 
; 174  : 	CPlayerPool* pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 175  : 	if (bytePlayerID == pPlayerPool->GetLocalPlayerID())

	movzx	esi, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayerID@CPlayerPool@@QAEEXZ	; CPlayerPool::GetLocalPlayerID
	movzx	eax, al
	cmp	esi, eax
	jne	SHORT $LN3@Chat

; 176  : 	{
; 177  : 		pChatWindow->AddChatMessage(pPlayerPool->GetLocalPlayerName(),
; 178  : 			pPlayerPool->GetLocalPlayer()->GetPlayerColorAsARGB(), (char*)szText);

	lea	eax, DWORD PTR _szText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, eax
	call	?GetPlayerColorAsARGB@CLocalPlayer@@QAEKXZ ; CLocalPlayer::GetPlayerColorAsARGB
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayerName@CPlayerPool@@QAEPADXZ ; CPlayerPool::GetLocalPlayerName
	push	eax
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	call	?AddChatMessage@CChatWindow@@QAEXPADK0@Z ; CChatWindow::AddChatMessage

; 179  : 	} else {

	jmp	SHORT $LN2@Chat
$LN3@Chat:

; 180  : 		CRemotePlayer *pRemotePlayer = pNetGame->GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemotePlayer$3[ebp], eax

; 181  : 		if(pRemotePlayer) {

	cmp	DWORD PTR _pRemotePlayer$3[ebp], 0
	je	SHORT $LN2@Chat

; 182  : 			pRemotePlayer->Say(szText);	

	lea	eax, DWORD PTR _szText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRemotePlayer$3[ebp]
	call	?Say@CRemotePlayer@@QAEXPAE@Z		; CRemotePlayer::Say
$LN2@Chat:

; 183  : 		}
; 184  : 	}
; 185  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN7@Chat:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Chat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 856				; 00000358H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@Chat:
	DD	5
	DD	$LN17@Chat
$LN17@Chat:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN11@Chat
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN12@Chat
	DD	-345					; fffffea7H
	DD	1
	DD	$LN13@Chat
	DD	-357					; fffffe9bH
	DD	1
	DD	$LN14@Chat
	DD	-624					; fffffd90H
	DD	256					; 00000100H
	DD	$LN15@Chat
$LN15@Chat:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN14@Chat:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN13@Chat:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN12@Chat:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN11@Chat:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Chat@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Chat@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-860]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Chat@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Chat@@YAXPAURPCParameters@@@Z ENDP			; Chat
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@M@BitStream@RakNet@@QAE_NAAM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@M@BitStream@RakNet@@QAE_NAAM@Z PROC		; RakNet::BitStream::Read<float>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@M@BitStream@RakNet@@QAE_NAAM@Z ENDP		; RakNet::BitStream::Read<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@H@BitStream@RakNet@@QAE_NAAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@H@BitStream@RakNet@@QAE_NAAH@Z PROC		; RakNet::BitStream::Read<int>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@H@BitStream@RakNet@@QAE_NAAH@Z ENDP		; RakNet::BitStream::Read<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?InitGame@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_byteStrLen$ = -393					; size = 1
_bStuntBonus$ = -381					; size = 1
_bLanMode$ = -369					; size = 1
_byteMyPlayerID$ = -357					; size = 1
_pPlayerPool$ = -348					; size = 4
_bsInitGame$ = -336					; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?InitGame@@YAXPAURPCParameters@@@Z PROC			; InitGame, COMDAT

; 88   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitGame@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 580				; 00000244H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-592]
	mov	ecx, 145				; 00000091H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 89   : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 90   : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 91   : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 92   : 
; 93   : 	RakNet::BitStream bsInitGame(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 94   : 	CPlayerPool *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 95   : 	BYTE byteMyPlayerID;
; 96   : 	bool bLanMode, bStuntBonus;
; 97   : 
; 98   : 	bsInitGame.Read(pNetGame->m_iSpawnsAvailable);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 54					; 00000036H
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 99   : 	bsInitGame.Read(byteMyPlayerID);

	lea	eax, DWORD PTR _byteMyPlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 100  : 	bsInitGame.Read(pNetGame->m_bShowPlayerTags);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 59					; 0000003bH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 101  : 	bsInitGame.Read(pNetGame->m_bShowPlayerMarkers);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 58					; 0000003aH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 102  : 	bsInitGame.Read(pNetGame->m_bTirePopping);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 60					; 0000003cH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 103  : 	bsInitGame.Read(pNetGame->m_byteWorldTime);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 61					; 0000003dH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 104  : 	bsInitGame.Read(pNetGame->m_byteWeather);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 63					; 0000003fH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 105  : 	bsInitGame.Read(pNetGame->m_fGravity);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 106  : 	bsInitGame.Read(bLanMode);

	lea	eax, DWORD PTR _bLanMode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 107  : 	bsInitGame.Read((int)pNetGame->m_iDeathDropMoney);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 36					; 00000024H
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@H@BitStream@RakNet@@QAE_NAAH@Z	; RakNet::BitStream::Read<int>

; 108  : 	bsInitGame.Read(pNetGame->m_bInstagib);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 41					; 00000029H
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 109  : 	bsInitGame.Read(pNetGame->m_bZoneNames);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 42					; 0000002aH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 110  : 	bsInitGame.Read(pNetGame->m_bUseCJWalk);	

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 44					; 0000002cH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 111  : 	bsInitGame.Read(pNetGame->m_bAllowWeapons);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 81					; 00000051H
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 112  : 	bsInitGame.Read(pNetGame->m_bLimitGlobalChatRadius);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 43					; 0000002bH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 113  : 	bsInitGame.Read(pNetGame->m_fGlobalChatRadius);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 45					; 0000002dH
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 114  : 	bsInitGame.Read(bStuntBonus);

	lea	eax, DWORD PTR _bStuntBonus$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 115  : 	bsInitGame.Read(pNetGame->m_fNameTagDrawDistance);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 49					; 00000031H
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 116  : 	bsInitGame.Read(pNetGame->m_bDisableEnterExits);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 53					; 00000035H
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 117  : 
; 118  : 	BYTE byteStrLen;
; 119  : 	bsInitGame.Read(byteStrLen);

	lea	eax, DWORD PTR _byteStrLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 120  : 	if(byteStrLen) {

	movzx	eax, BYTE PTR _byteStrLen$[ebp]
	test	eax, eax
	je	SHORT $LN3@InitGame

; 121  : 		memset(pNetGame->m_szHostName,0,sizeof(pNetGame->m_szHostName));

	push	256					; 00000100H
	push	0
	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 98					; 00000062H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 122  : 		bsInitGame.Read(pNetGame->m_szHostName, byteStrLen);

	movzx	eax, BYTE PTR _byteStrLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	ecx, 98					; 00000062H
	push	ecx
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read
$LN3@InitGame:

; 123  : 	}
; 124  : 	pNetGame->m_szHostName[byteStrLen] = '\0';

	movzx	eax, BYTE PTR _byteStrLen$[ebp]
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	BYTE PTR [ecx+eax+98], 0

; 125  : 
; 126  : 	pPlayerPool->SetLocalPlayerID(byteMyPlayerID);

	movzx	eax, BYTE PTR _byteMyPlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?SetLocalPlayerID@CPlayerPool@@QAEXE@Z	; CPlayerPool::SetLocalPlayerID

; 127  : 	pGame->EnableStuntBonus(bStuntBonus);

	movzx	eax, BYTE PTR _bStuntBonus$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?EnableStuntBonus@CGame@@QAEX_N@Z	; CGame::EnableStuntBonus

; 128  : 	if (bLanMode) pNetGame->SetLanMode(TRUE);

	movzx	eax, BYTE PTR _bLanMode$[ebp]
	test	eax, eax
	je	SHORT $LN2@InitGame
	push	1
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?SetLanMode@CNetGame@@QAEXH@Z		; CNetGame::SetLanMode
$LN2@InitGame:

; 129  : 
; 130  : 	pNetGame->InitGameLogic();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?InitGameLogic@CNetGame@@QAEXXZ		; CNetGame::InitGameLogic

; 131  : 
; 132  : 	// Set the gravity now
; 133  : 	pGame->SetGravity(pNetGame->m_fGravity);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetGravity@CGame@@QAEXM@Z		; CGame::SetGravity

; 134  : 
; 135  : 	// Disable the enter/exits if needed.
; 136  : 	if(pNetGame->m_bDisableEnterExits) {

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	movzx	ecx, BYTE PTR [eax+53]
	test	ecx, ecx
	je	SHORT $LN1@InitGame

; 137  : 		pGame->DisableEnterExits();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisableEnterExits@CGame@@QAEXXZ	; CGame::DisableEnterExits
$LN1@InitGame:

; 138  : 	}
; 139  : 	
; 140  : 	pNetGame->SetGameState(GAMESTATE_CONNECTED);

	push	2
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?SetGameState@CNetGame@@QAEXH@Z		; CNetGame::SetGameState

; 141  : 	pPlayerPool->GetLocalPlayer()->HandleClassSelection();

	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, eax
	call	?HandleClassSelection@CLocalPlayer@@QAEXXZ ; CLocalPlayer::HandleClassSelection

; 142  : 
; 143  : 	pChatWindow->AddDebugMessage("Connected to %.64s",pNetGame->m_szHostName);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	eax, 98					; 00000062H
	push	eax
	push	OFFSET ??_C@_0BD@KFGPICNB@Connected?5to?5?$CF?464s?$AA@
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	ecx
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 12					; 0000000cH

; 144  : 
; 145  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@InitGame
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 592				; 00000250H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@InitGame:
	DD	6
	DD	$LN14@InitGame
$LN14@InitGame:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN7@InitGame
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN8@InitGame
	DD	-357					; fffffe9bH
	DD	1
	DD	$LN9@InitGame
	DD	-369					; fffffe8fH
	DD	1
	DD	$LN10@InitGame
	DD	-381					; fffffe83H
	DD	1
	DD	$LN11@InitGame
	DD	-393					; fffffe77H
	DD	1
	DD	$LN12@InitGame
$LN12@InitGame:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN11@InitGame:
	DB	98					; 00000062H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	0
$LN10@InitGame:
	DB	98					; 00000062H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN9@InitGame:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	77					; 0000004dH
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN8@InitGame:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	71					; 00000047H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN7@InitGame:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitGame@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsInitGame$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?InitGame@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-596]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitGame@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitGame@@YAXPAURPCParameters@@@Z ENDP			; InitGame
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?ServerQuit@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
_byteReason$ = -369					; size = 1
_bytePlayerID$ = -357					; size = 1
_pPlayerPool$ = -348					; size = 4
_bsData$ = -336						; size = 273
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?ServerQuit@@YAXPAURPCParameters@@@Z PROC		; ServerQuit, COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ServerQuit@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-568]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 68   : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 69   : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 70   : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 71   : 
; 72   : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 73   : 	CPlayerPool *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 74   : 	BYTE bytePlayerID;
; 75   : 	BYTE byteReason;
; 76   : 
; 77   : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 78   : 	bsData.Read(byteReason);

	lea	eax, DWORD PTR _byteReason$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 79   : 
; 80   : 	// Delete this client from the player pool.
; 81   : 	pPlayerPool->Delete(bytePlayerID,byteReason);

	movzx	eax, BYTE PTR _byteReason$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bytePlayerID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?Delete@CPlayerPool@@QAEHEE@Z		; CPlayerPool::Delete

; 82   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ServerQuit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 568				; 00000238H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@ServerQuit:
	DD	4
	DD	$LN9@ServerQuit
$LN9@ServerQuit:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN4@ServerQuit
	DD	-336					; fffffeb0H
	DD	273					; 00000111H
	DD	$LN5@ServerQuit
	DD	-357					; fffffe9bH
	DD	1
	DD	$LN6@ServerQuit
	DD	-369					; fffffe8fH
	DD	1
	DD	$LN7@ServerQuit
$LN7@ServerQuit:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN6@ServerQuit:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN5@ServerQuit:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN4@ServerQuit:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ServerQuit@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ServerQuit@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-572]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ServerQuit@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ServerQuit@@YAXPAURPCParameters@@@Z ENDP		; ServerQuit
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@E@BitStream@RakNet@@QAE_NAAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@E@BitStream@RakNet@@QAE_NAAE@Z PROC		; RakNet::BitStream::Read<unsigned char>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	8
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@E@BitStream@RakNet@@QAE_NAAE@Z ENDP		; RakNet::BitStream::Read<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?ServerJoin@@YAXPAURPCParameters@@@Z
_TEXT	SEGMENT
$T2 = -612						; size = 4
_pPlayerPool$ = -408					; size = 4
_bsData$ = -396						; size = 273
_byteNameLen$ = -109					; size = 1
_bytePlayerID$ = -97					; size = 1
_szPlayerName$ = -88					; size = 25
_sender$ = -52						; size = 6
_iBitLength$ = -36					; size = 4
_Data$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rpcParams$ = 8						; size = 4
?ServerJoin@@YAXPAURPCParameters@@@Z PROC		; ServerJoin, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ServerJoin@@YAXPAURPCParameters@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 604				; 0000025cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-616]
	mov	ecx, 151				; 00000097H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 36   : 	PCHAR Data = reinterpret_cast<PCHAR>(rpcParams->input);

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Data$[ebp], ecx

; 37   : 	int iBitLength = rpcParams->numberOfBitsOfData;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _iBitLength$[ebp], ecx

; 38   : 	PlayerID sender = rpcParams->sender;

	mov	eax, DWORD PTR _rpcParams$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sender$[ebp], ecx
	mov	dx, WORD PTR [eax+4]
	mov	WORD PTR _sender$[ebp+4], dx

; 39   : 
; 40   : 	CHAR szPlayerName[MAX_PLAYER_NAME+1];
; 41   : 	BYTE bytePlayerID;
; 42   : 	BYTE byteNameLen=0;

	mov	BYTE PTR _byteNameLen$[ebp], 0

; 43   : 
; 44   : 	RakNet::BitStream bsData(Data,(iBitLength/8)+1,false);

	push	0
	mov	eax, DWORD PTR _iBitLength$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _Data$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 45   : 	CPlayerPool *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 46   : 	
; 47   : 	bsData.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 48   : 	bsData.Read(byteNameLen);

	lea	eax, DWORD PTR _byteNameLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 49   : 	bsData.Read(szPlayerName,byteNameLen);

	movzx	eax, BYTE PTR _byteNameLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szPlayerName$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 50   : 	szPlayerName[byteNameLen] = '\0';

	movzx	eax, BYTE PTR _byteNameLen$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 25			; 00000019H
	jae	SHORT $LN3@ServerJoin
	jmp	SHORT $LN4@ServerJoin
$LN3@ServerJoin:
	call	___report_rangecheckfailure
$LN4@ServerJoin:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _szPlayerName$[ebp+ecx], 0

; 51   : 
; 52   : 	// Add this client to the player pool.
; 53   : 	pPlayerPool->New(bytePlayerID, szPlayerName);

	lea	eax, DWORD PTR _szPlayerName$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bytePlayerID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?New@CPlayerPool@@QAEHEPAD@Z		; CPlayerPool::New

; 54   : 
; 55   : 	/*
; 56   : 	switch (bytePlayerState) {
; 57   : 		case PLAYER_STATE_SPECTATING:
; 58   : 			pPlayerPool->GetAt(bytePlayerID)->SetState(PLAYER_STATE_SPECTATING);
; 59   : 	}*/
; 60   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsData$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN2@ServerJoin:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@ServerJoin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 616				; 00000268H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@ServerJoin:
	DD	5
	DD	$LN12@ServerJoin
$LN12@ServerJoin:
	DD	-52					; ffffffccH
	DD	6
	DD	$LN6@ServerJoin
	DD	-88					; ffffffa8H
	DD	25					; 00000019H
	DD	$LN7@ServerJoin
	DD	-97					; ffffff9fH
	DD	1
	DD	$LN8@ServerJoin
	DD	-109					; ffffff93H
	DD	1
	DD	$LN9@ServerJoin
	DD	-396					; fffffe74H
	DD	273					; 00000111H
	DD	$LN10@ServerJoin
$LN10@ServerJoin:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN9@ServerJoin:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN8@ServerJoin:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN7@ServerJoin:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN6@ServerJoin:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ServerJoin@@YAXPAURPCParameters@@@Z$0:
	lea	ecx, DWORD PTR _bsData$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ServerJoin@@YAXPAURPCParameters@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-620]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ServerJoin@@YAXPAURPCParameters@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ServerJoin@@YAXPAURPCParameters@@@Z ENDP		; ServerJoin
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?SetLanMode@CNetGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bMode$ = 8						; size = 4
?SetLanMode@CNetGame@@QAEXH@Z PROC			; CNetGame::SetLanMode, COMDAT
; _this$ = ecx

; 109  : 	void SetLanMode(BOOL bMode) { m_bLanMode = bMode; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bMode$[ebp]
	mov	DWORD PTR [eax+94], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLanMode@CNetGame@@QAEXH@Z ENDP			; CNetGame::SetLanMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?SetGameState@CNetGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iGameState$ = 8					; size = 4
?SetGameState@CNetGame@@QAEXH@Z PROC			; CNetGame::SetGameState, COMDAT
; _this$ = ecx

; 106  : 	void SetGameState(int iGameState) { m_iGameState = iGameState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iGameState$[ebp]
	mov	DWORD PTR [eax+90], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGameState@CNetGame@@QAEXH@Z ENDP			; CNetGame::SetGameState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetGameState@CNetGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGameState@CNetGame@@QAEHXZ PROC			; CNetGame::GetGameState, COMDAT
; _this$ = ecx

; 105  : 	int GetGameState() { return m_iGameState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+90]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameState@CNetGame@@QAEHXZ ENDP			; CNetGame::GetGameState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ PROC ; CNetGame::GetRakClient, COMDAT
; _this$ = ecx

; 103  : 	RakClientInterface * GetRakClient() { return m_pRakClient; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ENDP ; CNetGame::GetRakClient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ PROC	; CNetGame::GetPickupPool, COMDAT
; _this$ = ecx

; 98   : 	CPickupPool * GetPickupPool() { return m_pPickupPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ ENDP	; CNetGame::GetPickupPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ PROC	; CNetGame::GetVehiclePool, COMDAT
; _this$ = ecx

; 97   : 	CVehiclePool * GetVehiclePool() { return m_pVehiclePool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ENDP	; CNetGame::GetVehiclePool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\vehiclepool.h
;	COMDAT ?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_VehicleID$ = 8						; size = 2
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z PROC		; CVehiclePool::GetAt, COMDAT
; _this$ = ecx

; 58   : 	CVehicle* GetAt(VEHICLEID VehicleID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(VehicleID >= MAX_VEHICLES || !m_bVehicleSlotState[VehicleID]) { return NULL; }

	movzx	eax, WORD PTR _VehicleID$[ebp]
	cmp	eax, 702				; 000002beH
	jge	SHORT $LN1@GetAt
	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN2@GetAt
$LN1@GetAt:
	xor	eax, eax
	jmp	SHORT $LN3@GetAt
$LN2@GetAt:

; 60   : 		return m_pVehicles[VehicleID];

	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+2808]
$LN3@GetAt:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ENDP		; CVehiclePool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?UpdatePing@CPlayerPool@@QAEXEK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerId$ = 8					; size = 1
_dwPing$ = 12						; size = 4
?UpdatePing@CPlayerPool@@QAEXEK@Z PROC			; CPlayerPool::UpdatePing, COMDAT
; _this$ = ecx

; 83   : 	void UpdatePing(BYTE bytePlayerId, DWORD dwPing) { 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 		if (bytePlayerId == m_byteLocalPlayerID)

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	cmp	eax, edx
	jne	SHORT $LN3@UpdatePing

; 85   : 		{
; 86   : 			m_dwLocalPlayerPing = dwPing;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwPing$[ebp]
	mov	DWORD PTR [eax+9], ecx

; 87   : 		} else {

	jmp	SHORT $LN4@UpdatePing
$LN3@UpdatePing:

; 88   : 			if (bytePlayerId > MAX_PLAYERS-1) { return; }

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	cmp	eax, 203				; 000000cbH
	jle	SHORT $LN1@UpdatePing
	jmp	SHORT $LN4@UpdatePing
$LN1@UpdatePing:

; 89   : 			m_dwPlayerPings[bytePlayerId] = dwPing;

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwPing$[ebp]
	mov	DWORD PTR [ecx+eax*4+1645], edx
$LN4@UpdatePing:

; 90   : 		}
; 91   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdatePing@CPlayerPool@@QAEXEK@Z ENDP			; CPlayerPool::UpdatePing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?UpdateScore@CPlayerPool@@QAEXEH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerId$ = 8					; size = 1
_iScore$ = 12						; size = 4
?UpdateScore@CPlayerPool@@QAEXEH@Z PROC			; CPlayerPool::UpdateScore, COMDAT
; _this$ = ecx

; 73   : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 		if (bytePlayerId == m_byteLocalPlayerID)

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	cmp	eax, edx
	jne	SHORT $LN3@UpdateScor

; 75   : 		{
; 76   : 			m_iLocalPlayerScore = iScore;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iScore$[ebp]
	mov	DWORD PTR [eax+5], ecx

; 77   : 		} else {

	jmp	SHORT $LN4@UpdateScor
$LN3@UpdateScor:

; 78   : 			if (bytePlayerId > MAX_PLAYERS-1) { return; }

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	cmp	eax, 203				; 000000cbH
	jle	SHORT $LN1@UpdateScor
	jmp	SHORT $LN4@UpdateScor
$LN1@UpdateScor:

; 79   : 			m_iPlayerScores[bytePlayerId] = iScore;

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iScore$[ebp]
	mov	DWORD PTR [ecx+eax*4+3277], edx
$LN4@UpdateScor:

; 80   : 		}
; 81   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateScore@CPlayerPool@@QAEXEH@Z ENDP			; CPlayerPool::UpdateScore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayerID@CPlayerPool@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayerID@CPlayerPool@@QAEEXZ PROC		; CPlayerPool::GetLocalPlayerID, COMDAT
; _this$ = ecx

; 68   : 	BYTE GetLocalPlayerID() { return m_byteLocalPlayerID; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayerID@CPlayerPool@@QAEEXZ ENDP		; CPlayerPool::GetLocalPlayerID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?SetLocalPlayerID@CPlayerPool@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_byteID$ = 8						; size = 1
?SetLocalPlayerID@CPlayerPool@@QAEXE@Z PROC		; CPlayerPool::SetLocalPlayerID, COMDAT
; _this$ = ecx

; 63   : 	void SetLocalPlayerID(BYTE byteID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 		strcpy(m_szPlayerNames[byteID],m_szLocalPlayerName);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 9193				; 000023e9H
	push	eax
	movzx	ecx, BYTE PTR _byteID$[ebp]
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4093]
	push	ecx
	call	_strcpy
	add	esp, 8

; 65   : 		m_byteLocalPlayerID = byteID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _byteID$[ebp]
	mov	BYTE PTR [eax+4], cl

; 66   : 	};

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLocalPlayerID@CPlayerPool@@QAEXE@Z ENDP		; CPlayerPool::SetLocalPlayerID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetSlotState@CPlayerPool@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetSlotState@CPlayerPool@@QAEHE@Z PROC			; CPlayerPool::GetSlotState, COMDAT
; _this$ = ecx

; 58   : 	BOOL GetSlotState(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(bytePlayerID > MAX_PLAYERS) { return FALSE; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 60   : 		return m_bPlayerSlotState[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+13]
$LN2@GetSlotSta:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CPlayerPool@@QAEHE@Z ENDP			; CPlayerPool::GetSlotState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerPool::GetAt, COMDAT
; _this$ = ecx

; 52   : 	CRemotePlayer* GetAt(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if(bytePlayerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 54   : 		return m_pPlayers[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+829]
$LN2@GetAt:

; 55   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerPool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ PROC ; CPlayerPool::GetLocalPlayer, COMDAT
; _this$ = ecx

; 46   : 	CLocalPlayer * GetLocalPlayer() { return m_pLocalPlayer; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ENDP ; CPlayerPool::GetLocalPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetPlayerName@CPlayerPool@@QAEPADE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetPlayerName@CPlayerPool@@QAEPADE@Z PROC		; CPlayerPool::GetPlayerName, COMDAT
; _this$ = ecx

; 41   : 	PCHAR GetPlayerName(BYTE bytePlayerID) { return m_szPlayerNames[bytePlayerID]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	imul	ecx, eax, 25
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4093]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerName@CPlayerPool@@QAEPADE@Z ENDP		; CPlayerPool::GetPlayerName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayerName@CPlayerPool@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayerName@CPlayerPool@@QAEPADXZ PROC		; CPlayerPool::GetLocalPlayerName, COMDAT
; _this$ = ecx

; 40   : 	PCHAR GetLocalPlayerName() { return m_szLocalPlayerName; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 9193				; 000023e9H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayerName@CPlayerPool@@QAEPADXZ ENDP		; CPlayerPool::GetLocalPlayerName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?UnRegisterRPCs@@YAXPAVRakClientInterface@@@Z
_TEXT	SEGMENT
_pRakClient$ = 8					; size = 4
?UnRegisterRPCs@@YAXPAVRakClientInterface@@@Z PROC	; UnRegisterRPCs, COMDAT

; 1001 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1002 : 	UNREGISTER_STATIC_RPC(pRakClient,ServerJoin);

	mov	esi, esp
	push	OFFSET ??_C@_02KEKBNNLK@xy?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1003 : 	UNREGISTER_STATIC_RPC(pRakClient,ServerQuit);

	mov	esi, esp
	push	OFFSET ??_C@_02BOGAIONP@ab?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1004 : 	UNREGISTER_STATIC_RPC(pRakClient,InitGame);

	mov	esi, esp
	push	OFFSET ??_C@_02HHLLPJO@ac?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1005 : 	UNREGISTER_STATIC_RPC(pRakClient,Chat);

	mov	esi, esp
	push	OFFSET ??_C@_02EIDKCJFJ@ad?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1006 : 	UNREGISTER_STATIC_RPC(pRakClient,Privmsg);

	mov	esi, esp
	push	OFFSET ??_C@_02FBCBBIBI@ae?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1007 : 	UNREGISTER_STATIC_RPC(pRakClient,TeamPrivmsg);

	mov	esi, esp
	push	OFFSET ??_C@_02HKAMELNL@af?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1008 : 	UNREGISTER_STATIC_RPC(pRakClient,RequestClass);

	mov	esi, esp
	push	OFFSET ??_C@_02GDBHHKJK@ag?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1009 : 	UNREGISTER_STATIC_RPC(pRakClient,RequestSpawn);

	mov	esi, esp
	push	OFFSET ??_C@_02OEIPGGFF@ah?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1010 : 	UNREGISTER_STATIC_RPC(pRakClient,Spawn);

	mov	esi, esp
	push	OFFSET ??_C@_02PNJEFHBE@ai?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1011 : 	UNREGISTER_STATIC_RPC(pRakClient,Death);

	mov	esi, esp
	push	OFFSET ??_C@_02NGLJAENH@aj?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1012 : 	UNREGISTER_STATIC_RPC(pRakClient,EnterVehicle);

	mov	esi, esp
	push	OFFSET ??_C@_02MPKCDFJG@ak?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1013 : 	UNREGISTER_STATIC_RPC(pRakClient,ExitVehicle);

	mov	esi, esp
	push	OFFSET ??_C@_02IAODKDFB@al?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1014 : 	UNREGISTER_STATIC_RPC(pRakClient,VehicleSpawn);

	mov	esi, esp
	push	OFFSET ??_C@_02JJPIJCBA@am?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1015 : 	UNREGISTER_STATIC_RPC(pRakClient,VehicleDestroy);

	mov	esi, esp
	push	OFFSET ??_C@_02LCNFMBND@an?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1016 : 	UNREGISTER_STATIC_RPC(pRakClient,SetCheckpoint);

	mov	esi, esp
	push	OFFSET ??_C@_02KLMOPAJC@ao?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1017 : 	UNREGISTER_STATIC_RPC(pRakClient,DisableCheckpoint);

	mov	esi, esp
	push	OFFSET ??_C@_02GGJEPOAM@ap?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1018 : 	UNREGISTER_STATIC_RPC(pRakClient,SetRaceCheckpoint);

	mov	esi, esp
	push	OFFSET ??_C@_02HPIPMPEN@aq?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1019 : 	UNREGISTER_STATIC_RPC(pRakClient,DisableRaceCheckpoint);

	mov	esi, esp
	push	OFFSET ??_C@_02FEKCJMIO@ar?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1020 : 	UNREGISTER_STATIC_RPC(pRakClient,UpdateScoresPingsIPs);

	mov	esi, esp
	push	OFFSET ??_C@_02ENLJKNMP@as?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1021 : 	UNREGISTER_STATIC_RPC(pRakClient,SvrStats);

	mov	esi, esp
	push	OFFSET ??_C@_02JOPBDKMM@em?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1022 : 	UNREGISTER_STATIC_RPC(pRakClient,GameModeRestart);

	mov	esi, esp
	push	OFFSET ??_C@_02CPIDLAI@at?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1023 : 	UNREGISTER_STATIC_RPC(pRakClient,ConnectionRejected);

	mov	esi, esp
	push	OFFSET ??_C@_02BLODAKEJ@au?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1024 : 	UNREGISTER_STATIC_RPC(pRakClient,ClientMessage);

	mov	esi, esp
	push	OFFSET ??_C@_02DAMOFJIK@av?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1025 : 	UNREGISTER_STATIC_RPC(pRakClient,WorldTime);

	mov	esi, esp
	push	OFFSET ??_C@_02CJNFGIML@aw?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1026 : 	UNREGISTER_STATIC_RPC(pRakClient,Pickup);

	mov	esi, esp
	push	OFFSET ??_C@_02KOENHEAE@ax?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1027 : 	UNREGISTER_STATIC_RPC(pRakClient,DestroyPickup);

	mov	esi, esp
	push	OFFSET ??_C@_02LHFGEFEF@ay?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1028 : 	UNREGISTER_STATIC_RPC(pRakClient,DestroyWeaponPickup);

	mov	esi, esp
	push	OFFSET ??_C@_02JMHLBGIG@az?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1029 : 	UNREGISTER_STATIC_RPC(pRakClient,ScmEvent);

	mov	esi, esp
	push	OFFSET ??_C@_02DHALGDEF@ba?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1030 : 	UNREGISTER_STATIC_RPC(pRakClient,Weather);

	mov	esi, esp
	push	OFFSET ??_C@_02BMCGDAIG@bb?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1031 : 	UNREGISTER_STATIC_RPC(pRakClient,Instagib);

	mov	esi, esp
	push	OFFSET ??_C@_02FDNABMH@bc?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1032 : 	UNREGISTER_STATIC_RPC(pRakClient,SetTimeEx);

	mov	esi, esp
	push	OFFSET ??_C@_02FDGHKGEB@be?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1033 : 	UNREGISTER_STATIC_RPC(pRakClient,ToggleClock);

	mov	esi, esp
	push	OFFSET ??_C@_02HIEKPFIC@bf?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1034 : 	UNREGISTER_STATIC_RPC(pRakClient,ACServerProtected);

	mov	esi, esp
	push	OFFSET ??_C@_02EKHMJHAA@bd?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1035 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UnRegisterRPCs@@YAXPAVRakClientInterface@@@Z ENDP	; UnRegisterRPCs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netrpc.cpp
;	COMDAT ?RegisterRPCs@@YAXPAVRakClientInterface@@@Z
_TEXT	SEGMENT
_pRakClient$ = 8					; size = 4
?RegisterRPCs@@YAXPAVRakClientInterface@@@Z PROC	; RegisterRPCs, COMDAT

; 962  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 963  : 	REGISTER_STATIC_RPC(pRakClient,ServerJoin);

	mov	esi, esp
	push	OFFSET ?ServerJoin@@YAXPAURPCParameters@@@Z ; ServerJoin
	push	OFFSET ??_C@_02KEKBNNLK@xy?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 964  : 	REGISTER_STATIC_RPC(pRakClient,ServerQuit);	

	mov	esi, esp
	push	OFFSET ?ServerQuit@@YAXPAURPCParameters@@@Z ; ServerQuit
	push	OFFSET ??_C@_02BOGAIONP@ab?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 965  : 	REGISTER_STATIC_RPC(pRakClient,InitGame);

	mov	esi, esp
	push	OFFSET ?InitGame@@YAXPAURPCParameters@@@Z ; InitGame
	push	OFFSET ??_C@_02HHLLPJO@ac?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 966  : 	REGISTER_STATIC_RPC(pRakClient,Chat);

	mov	esi, esp
	push	OFFSET ?Chat@@YAXPAURPCParameters@@@Z	; Chat
	push	OFFSET ??_C@_02EIDKCJFJ@ad?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 967  : 	REGISTER_STATIC_RPC(pRakClient,Privmsg);

	mov	esi, esp
	push	OFFSET ?Privmsg@@YAXPAURPCParameters@@@Z ; Privmsg
	push	OFFSET ??_C@_02FBCBBIBI@ae?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 968  : 	REGISTER_STATIC_RPC(pRakClient,TeamPrivmsg);

	mov	esi, esp
	push	OFFSET ?TeamPrivmsg@@YAXPAURPCParameters@@@Z ; TeamPrivmsg
	push	OFFSET ??_C@_02HKAMELNL@af?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 969  : 	REGISTER_STATIC_RPC(pRakClient,RequestClass);

	mov	esi, esp
	push	OFFSET ?RequestClass@@YAXPAURPCParameters@@@Z ; RequestClass
	push	OFFSET ??_C@_02GDBHHKJK@ag?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 970  : 	REGISTER_STATIC_RPC(pRakClient,RequestSpawn);

	mov	esi, esp
	push	OFFSET ?RequestSpawn@@YAXPAURPCParameters@@@Z ; RequestSpawn
	push	OFFSET ??_C@_02OEIPGGFF@ah?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 971  : 	REGISTER_STATIC_RPC(pRakClient,Spawn);

	mov	esi, esp
	push	OFFSET ?Spawn@@YAXPAURPCParameters@@@Z	; Spawn
	push	OFFSET ??_C@_02PNJEFHBE@ai?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 972  : 	REGISTER_STATIC_RPC(pRakClient,Death);

	mov	esi, esp
	push	OFFSET ?Death@@YAXPAURPCParameters@@@Z	; Death
	push	OFFSET ??_C@_02NGLJAENH@aj?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 973  : 	REGISTER_STATIC_RPC(pRakClient,EnterVehicle);

	mov	esi, esp
	push	OFFSET ?EnterVehicle@@YAXPAURPCParameters@@@Z ; EnterVehicle
	push	OFFSET ??_C@_02MPKCDFJG@ak?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 974  : 	REGISTER_STATIC_RPC(pRakClient,ExitVehicle);

	mov	esi, esp
	push	OFFSET ?ExitVehicle@@YAXPAURPCParameters@@@Z ; ExitVehicle
	push	OFFSET ??_C@_02IAODKDFB@al?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 975  : 	REGISTER_STATIC_RPC(pRakClient,VehicleSpawn);

	mov	esi, esp
	push	OFFSET ?VehicleSpawn@@YAXPAURPCParameters@@@Z ; VehicleSpawn
	push	OFFSET ??_C@_02JJPIJCBA@am?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 976  : 	REGISTER_STATIC_RPC(pRakClient,VehicleDestroy);

	mov	esi, esp
	push	OFFSET ?VehicleDestroy@@YAXPAURPCParameters@@@Z ; VehicleDestroy
	push	OFFSET ??_C@_02LCNFMBND@an?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 977  : 	REGISTER_STATIC_RPC(pRakClient,SetCheckpoint); //14

	mov	esi, esp
	push	OFFSET ?SetCheckpoint@@YAXPAURPCParameters@@@Z ; SetCheckpoint
	push	OFFSET ??_C@_02KLMOPAJC@ao?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 978  : 	REGISTER_STATIC_RPC(pRakClient,DisableCheckpoint);

	mov	esi, esp
	push	OFFSET ?DisableCheckpoint@@YAXPAURPCParameters@@@Z ; DisableCheckpoint
	push	OFFSET ??_C@_02GGJEPOAM@ap?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 979  : 	REGISTER_STATIC_RPC(pRakClient,SetRaceCheckpoint);

	mov	esi, esp
	push	OFFSET ?SetRaceCheckpoint@@YAXPAURPCParameters@@@Z ; SetRaceCheckpoint
	push	OFFSET ??_C@_02HPIPMPEN@aq?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 980  : 	REGISTER_STATIC_RPC(pRakClient,DisableRaceCheckpoint);

	mov	esi, esp
	push	OFFSET ?DisableRaceCheckpoint@@YAXPAURPCParameters@@@Z ; DisableRaceCheckpoint
	push	OFFSET ??_C@_02FEKCJMIO@ar?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 981  : 	REGISTER_STATIC_RPC(pRakClient,UpdateScoresPingsIPs);

	mov	esi, esp
	push	OFFSET ?UpdateScoresPingsIPs@@YAXPAURPCParameters@@@Z ; UpdateScoresPingsIPs
	push	OFFSET ??_C@_02ENLJKNMP@as?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 982  : 	REGISTER_STATIC_RPC(pRakClient,SvrStats);

	mov	esi, esp
	push	OFFSET ?SvrStats@@YAXPAURPCParameters@@@Z ; SvrStats
	push	OFFSET ??_C@_02JOPBDKMM@em?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 983  : 	REGISTER_STATIC_RPC(pRakClient,GameModeRestart);

	mov	esi, esp
	push	OFFSET ?GameModeRestart@@YAXPAURPCParameters@@@Z ; GameModeRestart
	push	OFFSET ??_C@_02CPIDLAI@at?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 984  : 	REGISTER_STATIC_RPC(pRakClient,ConnectionRejected);

	mov	esi, esp
	push	OFFSET ?ConnectionRejected@@YAXPAURPCParameters@@@Z ; ConnectionRejected
	push	OFFSET ??_C@_02BLODAKEJ@au?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 985  : 	REGISTER_STATIC_RPC(pRakClient,ClientMessage);

	mov	esi, esp
	push	OFFSET ?ClientMessage@@YAXPAURPCParameters@@@Z ; ClientMessage
	push	OFFSET ??_C@_02DAMOFJIK@av?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 986  : 	REGISTER_STATIC_RPC(pRakClient,WorldTime);

	mov	esi, esp
	push	OFFSET ?WorldTime@@YAXPAURPCParameters@@@Z ; WorldTime
	push	OFFSET ??_C@_02CJNFGIML@aw?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 987  : 	REGISTER_STATIC_RPC(pRakClient,Pickup);

	mov	esi, esp
	push	OFFSET ?Pickup@@YAXPAURPCParameters@@@Z	; Pickup
	push	OFFSET ??_C@_02KOENHEAE@ax?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 988  : 	REGISTER_STATIC_RPC(pRakClient,DestroyPickup);

	mov	esi, esp
	push	OFFSET ?DestroyPickup@@YAXPAURPCParameters@@@Z ; DestroyPickup
	push	OFFSET ??_C@_02LHFGEFEF@ay?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 989  : 	REGISTER_STATIC_RPC(pRakClient,DestroyWeaponPickup);

	mov	esi, esp
	push	OFFSET ?DestroyWeaponPickup@@YAXPAURPCParameters@@@Z ; DestroyWeaponPickup
	push	OFFSET ??_C@_02JMHLBGIG@az?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 990  : 	REGISTER_STATIC_RPC(pRakClient,ScmEvent);

	mov	esi, esp
	push	OFFSET ?ScmEvent@@YAXPAURPCParameters@@@Z ; ScmEvent
	push	OFFSET ??_C@_02DHALGDEF@ba?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 991  : 	REGISTER_STATIC_RPC(pRakClient,Weather);

	mov	esi, esp
	push	OFFSET ?Weather@@YAXPAURPCParameters@@@Z ; Weather
	push	OFFSET ??_C@_02BMCGDAIG@bb?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 992  : 	REGISTER_STATIC_RPC(pRakClient,Instagib);

	mov	esi, esp
	push	OFFSET ?Instagib@@YAXPAURPCParameters@@@Z ; Instagib
	push	OFFSET ??_C@_02FDNABMH@bc?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 993  : 	REGISTER_STATIC_RPC(pRakClient,SetTimeEx);

	mov	esi, esp
	push	OFFSET ?SetTimeEx@@YAXPAURPCParameters@@@Z ; SetTimeEx
	push	OFFSET ??_C@_02FDGHKGEB@be?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 994  : 	REGISTER_STATIC_RPC(pRakClient,ToggleClock); // 31

	mov	esi, esp
	push	OFFSET ?ToggleClock@@YAXPAURPCParameters@@@Z ; ToggleClock
	push	OFFSET ??_C@_02HIEKPFIC@bf?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 995  : 	REGISTER_STATIC_RPC(pRakClient,ACServerProtected);

	mov	esi, esp
	push	OFFSET ?ACServerProtected@@YAXPAURPCParameters@@@Z ; ACServerProtected
	push	OFFSET ??_C@_02EKHMJHAA@bd?$AA@
	mov	eax, DWORD PTR _pRakClient$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pRakClient$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 996  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RegisterRPCs@@YAXPAVRakClientInterface@@@Z ENDP	; RegisterRPCs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?IsActive@CRemotePlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsActive@CRemotePlayer@@QAEHXZ PROC			; CRemotePlayer::IsActive, COMDAT
; _this$ = ecx

; 104  : 	BOOL IsActive() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 		if(m_byteState != PLAYER_STATE_NONE && m_byteState != PLAYER_STATE_SPECTATING) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+315]
	test	ecx, ecx
	je	SHORT $LN1@IsActive
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+315]
	cmp	ecx, 9
	je	SHORT $LN1@IsActive

; 106  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@IsActive
$LN1@IsActive:

; 107  : 		}
; 108  : 		return FALSE;

	xor	eax, eax
$LN2@IsActive:

; 109  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsActive@CRemotePlayer@@QAEHXZ ENDP			; CRemotePlayer::IsActive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ PROC	; CRemotePlayer::GetPlayerPed, COMDAT
; _this$ = ecx

; 102  : 	CPlayerPed * GetPlayerPed() { return m_pPlayerPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ENDP	; CRemotePlayer::GetPlayerPed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@K@BitStream@RakNet@@QAE_NAAK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@K@BitStream@RakNet@@QAE_NAAK@Z PROC		; RakNet::BitStream::Read<unsigned long>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@K@BitStream@RakNet@@QAE_NAAK@Z ENDP		; RakNet::BitStream::Read<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@G@BitStream@RakNet@@QAE_NAAG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@G@BitStream@RakNet@@QAE_NAAG@Z PROC		; RakNet::BitStream::Read<unsigned short>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@G@BitStream@RakNet@@QAE_NAAG@Z ENDP		; RakNet::BitStream::Read<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z PROC		; RakNet::BitStream::Read<bool>, COMDAT
; _this$ = ecx

; 1019 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1020 : 		if ( readOffset + 1 > numberOfBitsUsed )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jle	SHORT $LN3@Read

; 1021 : 			return false;

	xor	al, al
	jmp	SHORT $LN4@Read
$LN3@Read:

; 1022 : 
; 1023 : 		if ( data[ readOffset >> 3 ] & ( 0x80 >> ( readOffset++ % 8 ) ) )   // Is it faster to just write it out here?

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN6@Read
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN6@Read:
	mov	eax, 128				; 00000080H
	sar	eax, cl
	and	edx, eax
	mov	DWORD PTR tv82[ebp], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN2@Read

; 1024 : 			var = true;

	mov	eax, DWORD PTR _var$[ebp]
	mov	BYTE PTR [eax], 1

; 1025 : 		else

	jmp	SHORT $LN1@Read
$LN2@Read:

; 1026 : 			var = false;

	mov	eax, DWORD PTR _var$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@Read:

; 1027 : 
; 1028 : 		return true;

	mov	al, 1
$LN4@Read:

; 1029 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ENDP		; RakNet::BitStream::Read<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ PROC		; CGame::FindPlayerPed, COMDAT
; _this$ = ecx

; 142  : 	CPlayerPed  *FindPlayerPed() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		if(m_pGamePlayer==NULL)	m_pGamePlayer = new CPlayerPed();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@FindPlayer
	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@FindPlayer
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPlayerPed@@QAE@XZ			; CPlayerPed::CPlayerPed
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@FindPlayer
$LN4@FindPlayer:
	mov	DWORD PTR tv74[ebp], 0
$LN5@FindPlayer:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@FindPlayer:

; 144  : 		return m_pGamePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 145  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ENDP		; CGame::FindPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?ToggleRaceCheckpoints@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bEnabled$ = 8						; size = 4
?ToggleRaceCheckpoints@CGame@@QAEXH@Z PROC		; CGame::ToggleRaceCheckpoints, COMDAT
; _this$ = ecx

; 110  : 	void   ToggleRaceCheckpoints(BOOL bEnabled){ m_bRaceCheckpointsEnabled = bEnabled; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bEnabled$[ebp]
	mov	DWORD PTR [eax+69], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleRaceCheckpoints@CGame@@QAEXH@Z ENDP		; CGame::ToggleRaceCheckpoints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?ToggleCheckpoints@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bEnabled$ = 8						; size = 4
?ToggleCheckpoints@CGame@@QAEXH@Z PROC			; CGame::ToggleCheckpoints, COMDAT
; _this$ = ecx

; 105  : 	void   ToggleCheckpoints(BOOL bEnabled){ m_bCheckpointsEnabled = bEnabled; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bEnabled$[ebp]
	mov	DWORD PTR [eax+32], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleCheckpoints@CGame@@QAEXH@Z ENDP			; CGame::ToggleCheckpoints
_TEXT	ENDS
END
