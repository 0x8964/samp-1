; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\game\entity.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_put_train_at DW 07c7H
	DB	'ifff', 00H
	ORG $+11
CONST	ENDS
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?Add@CEntity@@UAEXXZ				; CEntity::Add
PUBLIC	?Remove@CEntity@@UAEXXZ				; CEntity::Remove
PUBLIC	?IsAdded@CEntity@@QAEHXZ			; CEntity::IsAdded
PUBLIC	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z	; CEntity::GetMatrix
PUBLIC	?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z		; CEntity::SetMatrix
PUBLIC	?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z	; CEntity::GetMoveSpeedVector
PUBLIC	?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z	; CEntity::SetMoveSpeedVector
PUBLIC	?GetTurnSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z	; CEntity::GetTurnSpeedVector
PUBLIC	?SetTurnSpeedVector@CEntity@@QAEXU_VECTOR@@@Z	; CEntity::SetTurnSpeedVector
PUBLIC	?GetModelIndex@CEntity@@QAEIXZ			; CEntity::GetModelIndex
PUBLIC	?SetModelIndex@CEntity@@QAEXI@Z			; CEntity::SetModelIndex
PUBLIC	?TeleportTo@CEntity@@QAEXMMM@Z			; CEntity::TeleportTo
PUBLIC	?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ	; CEntity::GetDistanceFromLocalPlayerPed
PUBLIC	?GetDistanceFromPoint@CEntity@@QAEMMMM@Z	; CEntity::GetDistanceFromPoint
PUBLIC	?ApplyMoveSpeed@CEntity@@QAEXXZ			; CEntity::ApplyMoveSpeed
PUBLIC	?IsStationary@CEntity@@QAEHXZ			; CEntity::IsStationary
PUBLIC	?EnforceWorldBoundries@CEntity@@QAEHMMMM@Z	; CEntity::EnforceWorldBoundries
PUBLIC	?HasExceededWorldBoundries@CEntity@@QAEHMMMM@Z	; CEntity::HasExceededWorldBoundries
PUBLIC	?GetCamera@CGame@@QAEPAVCCamera@@XZ		; CGame::GetCamera
PUBLIC	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ	; CGame::FindPlayerPed
PUBLIC	?IsSpectating@CLocalPlayer@@QAEHXZ		; CLocalPlayer::IsSpectating
PUBLIC	?IsInRCMode@CLocalPlayer@@QAEHXZ		; CLocalPlayer::IsInRCMode
PUBLIC	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	??_C@_0CP@NAFGPBJ@CEntity?3?3Add?5?9?5m_pEntity?5?$DN?$DN?5NULL@ ; `string'
PUBLIC	??_C@_0BH@HEKFCBNB@CEntity?3?3Add?5failed?4?4?4?$AA@ ; `string'
PUBLIC	??_C@_0DC@MBJBAPBE@CEntity?3?3Remove?5?9?5m_pEntity?5?$DN?$DN?5N@ ; `string'
PUBLIC	??_C@_0BK@DLCKBAPA@CEntity?3?3Remove?5failed?4?4?4?$AA@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3d23d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@461c4000
PUBLIC	__real@be4ccccd
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	_sqrt:PROC
EXTRN	??0CPlayerPed@@QAE@XZ:PROC			; CPlayerPed::CPlayerPed
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	?GetMatrix@CCamera@@QAEXPAU_MATRIX4X4@@@Z:PROC	; CCamera::GetMatrix
EXTRN	?RequestModel@CGame@@QAEXH@Z:PROC		; CGame::RequestModel
EXTRN	?LoadRequestedModels@CGame@@QAEXXZ:PROC		; CGame::LoadRequestedModels
EXTRN	?IsModelLoaded@CGame@@QAEHH@Z:PROC		; CGame::IsModelLoaded
EXTRN	?RemoveModel@CGame@@QAEXH@Z:PROC		; CGame::RemoveModel
EXTRN	?WorldRemoveEntity@@YGXPAK@Z:PROC		; WorldRemoveEntity
EXTRN	?WorldAddEntity@@YGXPAK@Z:PROC			; WorldAddEntity
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BK@DLCKBAPA@CEntity?3?3Remove?5failed?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BK@DLCKBAPA@CEntity?3?3Remove?5failed?4?4?4?$AA@ DB 'CEntity::Remo'
	DB	've failed...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@MBJBAPBE@CEntity?3?3Remove?5?9?5m_pEntity?5?$DN?$DN?5N@
CONST	SEGMENT
??_C@_0DC@MBJBAPBE@CEntity?3?3Remove?5?9?5m_pEntity?5?$DN?$DN?5N@ DB 'CEn'
	DB	'tity::Remove - m_pEntity == NULL or CPlaceable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HEKFCBNB@CEntity?3?3Add?5failed?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BH@HEKFCBNB@CEntity?3?3Add?5failed?4?4?4?$AA@ DB 'CEntity::Add fai'
	DB	'led...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NAFGPBJ@CEntity?3?3Add?5?9?5m_pEntity?5?$DN?$DN?5NULL@
CONST	SEGMENT
??_C@_0CP@NAFGPBJ@CEntity?3?3Add?5?9?5m_pEntity?5?$DN?$DN?5NULL@ DB 'CEnt'
	DB	'ity::Add - m_pEntity == NULL or CPlaceable', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0
__ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ PROC ; CPlayerPool::GetLocalPlayer, COMDAT
; _this$ = ecx

; 46   : 	CLocalPlayer * GetLocalPlayer() { return m_pLocalPlayer; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ENDP ; CPlayerPool::GetLocalPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?IsInRCMode@CLocalPlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsInRCMode@CLocalPlayer@@QAEHXZ PROC			; CLocalPlayer::IsInRCMode, COMDAT
; _this$ = ecx

; 260  : 	BOOL IsInRCMode() { return m_bInRCMode; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+170]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsInRCMode@CLocalPlayer@@QAEHXZ ENDP			; CLocalPlayer::IsInRCMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?IsSpectating@CLocalPlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsSpectating@CLocalPlayer@@QAEHXZ PROC			; CLocalPlayer::IsSpectating, COMDAT
; _this$ = ecx

; 254  : 	BOOL IsSpectating() { return m_bIsSpectating; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+186]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSpectating@CLocalPlayer@@QAEHXZ ENDP			; CLocalPlayer::IsSpectating
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ PROC		; CGame::FindPlayerPed, COMDAT
; _this$ = ecx

; 142  : 	CPlayerPed  *FindPlayerPed() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		if(m_pGamePlayer==NULL)	m_pGamePlayer = new CPlayerPed();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@FindPlayer
	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@FindPlayer
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPlayerPed@@QAE@XZ			; CPlayerPed::CPlayerPed
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@FindPlayer
$LN4@FindPlayer:
	mov	DWORD PTR tv74[ebp], 0
$LN5@FindPlayer:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@FindPlayer:

; 144  : 		return m_pGamePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 145  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ENDP		; CGame::FindPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetCamera@CGame@@QAEPAVCCamera@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCamera@CGame@@QAEPAVCCamera@@XZ PROC		; CGame::GetCamera, COMDAT
; _this$ = ecx

; 135  : 	CCamera     *GetCamera() {	return m_pGameCamera; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCamera@CGame@@QAEPAVCCamera@@XZ ENDP		; CGame::GetCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?HasExceededWorldBoundries@CEntity@@QAEHMMMM@Z
_TEXT	SEGMENT
_matWorld$ = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fPX$ = 8						; size = 4
_fZX$ = 12						; size = 4
_fPY$ = 16						; size = 4
_fNY$ = 20						; size = 4
?HasExceededWorldBoundries@CEntity@@QAEHMMMM@Z PROC	; CEntity::HasExceededWorldBoundries, COMDAT
; _this$ = ecx

; 378  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 379  : 	MATRIX4X4 matWorld;
; 380  : 
; 381  : 	if(!m_pEntity) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@HasExceede
	xor	eax, eax
	jmp	SHORT $LN9@HasExceede
$LN8@HasExceede:

; 382  : 
; 383  : 	GetMatrix(&matWorld);

	lea	eax, DWORD PTR _matWorld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 384  : 
; 385  : 	if(matWorld.pos.X > fPX) {

	movss	xmm0, DWORD PTR _matWorld$[ebp+48]
	comiss	xmm0, DWORD PTR _fPX$[ebp]
	jbe	SHORT $LN7@HasExceede

; 386  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN9@HasExceede
	jmp	SHORT $LN1@HasExceede
$LN7@HasExceede:

; 387  : 	}
; 388  : 	else if(matWorld.pos.X < fZX) {

	movss	xmm0, DWORD PTR _fZX$[ebp]
	comiss	xmm0, DWORD PTR _matWorld$[ebp+48]
	jbe	SHORT $LN5@HasExceede

; 389  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN9@HasExceede
	jmp	SHORT $LN1@HasExceede
$LN5@HasExceede:

; 390  : 	}
; 391  : 	else if(matWorld.pos.Y > fPY) {

	movss	xmm0, DWORD PTR _matWorld$[ebp+52]
	comiss	xmm0, DWORD PTR _fPY$[ebp]
	jbe	SHORT $LN3@HasExceede

; 392  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN9@HasExceede
	jmp	SHORT $LN1@HasExceede
$LN3@HasExceede:

; 393  : 	}
; 394  : 	else if(matWorld.pos.Y < fNY) {

	movss	xmm0, DWORD PTR _fNY$[ebp]
	comiss	xmm0, DWORD PTR _matWorld$[ebp+52]
	jbe	SHORT $LN1@HasExceede

; 395  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN9@HasExceede
$LN1@HasExceede:

; 396  : 	}
; 397  : 	return FALSE;

	xor	eax, eax
$LN9@HasExceede:

; 398  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@HasExceede
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN13@HasExceede:
	DD	1
	DD	$LN12@HasExceede
$LN12@HasExceede:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN11@HasExceede
$LN11@HasExceede:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
?HasExceededWorldBoundries@CEntity@@QAEHMMMM@Z ENDP	; CEntity::HasExceededWorldBoundries
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?EnforceWorldBoundries@CEntity@@QAEHMMMM@Z
_TEXT	SEGMENT
_vecMoveSpeed$ = -104					; size = 12
_matWorld$ = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fPX$ = 8						; size = 4
_fZX$ = 12						; size = 4
_fPY$ = 16						; size = 4
_fNY$ = 20						; size = 4
?EnforceWorldBoundries@CEntity@@QAEHMMMM@Z PROC		; CEntity::EnforceWorldBoundries, COMDAT
; _this$ = ecx

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 317  : 	MATRIX4X4 matWorld;
; 318  : 	VECTOR vecMoveSpeed;
; 319  : 
; 320  : 	if(!m_pEntity) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN12@EnforceWor
	xor	eax, eax
	jmp	$LN13@EnforceWor
$LN12@EnforceWor:

; 321  : 
; 322  : 	GetMatrix(&matWorld);

	lea	eax, DWORD PTR _matWorld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 323  : 	GetMoveSpeedVector(&vecMoveSpeed);

	lea	eax, DWORD PTR _vecMoveSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z ; CEntity::GetMoveSpeedVector

; 324  : 
; 325  : 	if(matWorld.pos.X > fPX)

	movss	xmm0, DWORD PTR _matWorld$[ebp+48]
	comiss	xmm0, DWORD PTR _fPX$[ebp]
	jbe	$LN11@EnforceWor

; 326  : 	{
; 327  : 		if(vecMoveSpeed.X != 0.0f) {

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN10@EnforceWor

; 328  : 			vecMoveSpeed.X = -0.2f;

	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR _vecMoveSpeed$[ebp], xmm0

; 329  : 			vecMoveSpeed.Z = 0.1f;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _vecMoveSpeed$[ebp+8], xmm0
$LN10@EnforceWor:

; 330  : 		}
; 331  : 		SetMoveSpeedVector(vecMoveSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecMoveSpeed$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ; CEntity::SetMoveSpeedVector

; 332  : 		matWorld.pos.Z += 0.04f;

	movss	xmm0, DWORD PTR _matWorld$[ebp+56]
	addss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR _matWorld$[ebp+56], xmm0

; 333  : 		SetMatrix(matWorld);

	sub	esp, 64					; 00000040H
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _matWorld$[ebp]
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z	; CEntity::SetMatrix

; 334  : 		return TRUE;

	mov	eax, 1
	jmp	$LN13@EnforceWor
	jmp	$LN2@EnforceWor
$LN11@EnforceWor:

; 335  : 	}
; 336  : 	else if(matWorld.pos.X < fZX)

	movss	xmm0, DWORD PTR _fZX$[ebp]
	comiss	xmm0, DWORD PTR _matWorld$[ebp+48]
	jbe	$LN8@EnforceWor

; 337  : 	{
; 338  : 		if(vecMoveSpeed.X != 0.0f) {

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@EnforceWor

; 339  : 			vecMoveSpeed.X = 0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _vecMoveSpeed$[ebp], xmm0

; 340  : 			vecMoveSpeed.Z = 0.1f;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _vecMoveSpeed$[ebp+8], xmm0
$LN7@EnforceWor:

; 341  : 		}
; 342  : 		SetMoveSpeedVector(vecMoveSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecMoveSpeed$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ; CEntity::SetMoveSpeedVector

; 343  : 		matWorld.pos.Z += 0.04f;

	movss	xmm0, DWORD PTR _matWorld$[ebp+56]
	addss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR _matWorld$[ebp+56], xmm0

; 344  : 		SetMatrix(matWorld);

	sub	esp, 64					; 00000040H
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _matWorld$[ebp]
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z	; CEntity::SetMatrix

; 345  : 		return TRUE;

	mov	eax, 1
	jmp	$LN13@EnforceWor
	jmp	$LN2@EnforceWor
$LN8@EnforceWor:

; 346  : 	}
; 347  : 	else if(matWorld.pos.Y > fPY)

	movss	xmm0, DWORD PTR _matWorld$[ebp+52]
	comiss	xmm0, DWORD PTR _fPY$[ebp]
	jbe	$LN5@EnforceWor

; 348  : 	{
; 349  : 		if(vecMoveSpeed.Y != 0.0f) {

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@EnforceWor

; 350  : 			vecMoveSpeed.Y = -0.2f;

	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR _vecMoveSpeed$[ebp+4], xmm0

; 351  : 			vecMoveSpeed.Z = 0.1f;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _vecMoveSpeed$[ebp+8], xmm0
$LN4@EnforceWor:

; 352  : 		}
; 353  : 
; 354  : 		SetMoveSpeedVector(vecMoveSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecMoveSpeed$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ; CEntity::SetMoveSpeedVector

; 355  : 		matWorld.pos.Z += 0.04f;

	movss	xmm0, DWORD PTR _matWorld$[ebp+56]
	addss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR _matWorld$[ebp+56], xmm0

; 356  : 		SetMatrix(matWorld);

	sub	esp, 64					; 00000040H
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _matWorld$[ebp]
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z	; CEntity::SetMatrix

; 357  : 		return TRUE;

	mov	eax, 1
	jmp	$LN13@EnforceWor
	jmp	$LN2@EnforceWor
$LN5@EnforceWor:

; 358  : 	}
; 359  : 	else if(matWorld.pos.Y < fNY)

	movss	xmm0, DWORD PTR _fNY$[ebp]
	comiss	xmm0, DWORD PTR _matWorld$[ebp+52]
	jbe	SHORT $LN2@EnforceWor

; 360  : 	{
; 361  : 		if(vecMoveSpeed.Y != 0.0f) {

	movss	xmm0, DWORD PTR _vecMoveSpeed$[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@EnforceWor

; 362  : 			vecMoveSpeed.Y = 0.2f;

	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _vecMoveSpeed$[ebp+4], xmm0

; 363  : 			vecMoveSpeed.Z = 0.1f;

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _vecMoveSpeed$[ebp+8], xmm0
$LN1@EnforceWor:

; 364  : 		}
; 365  : 
; 366  : 		SetMoveSpeedVector(vecMoveSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecMoveSpeed$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ; CEntity::SetMoveSpeedVector

; 367  : 		matWorld.pos.Z += 0.04f;

	movss	xmm0, DWORD PTR _matWorld$[ebp+56]
	addss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR _matWorld$[ebp+56], xmm0

; 368  : 		SetMatrix(matWorld);

	sub	esp, 64					; 00000040H
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _matWorld$[ebp]
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z	; CEntity::SetMatrix

; 369  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN13@EnforceWor
$LN2@EnforceWor:

; 370  : 	}
; 371  : 
; 372  : 	return FALSE;

	xor	eax, eax
$LN13@EnforceWor:

; 373  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@EnforceWor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN18@EnforceWor:
	DD	2
	DD	$LN17@EnforceWor
$LN17@EnforceWor:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN15@EnforceWor
	DD	-104					; ffffff98H
	DD	12					; 0000000cH
	DD	$LN16@EnforceWor
$LN16@EnforceWor:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN15@EnforceWor:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
?EnforceWorldBoundries@CEntity@@QAEHMMMM@Z ENDP		; CEntity::EnforceWorldBoundries
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?IsStationary@CEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsStationary@CEntity@@QAEHXZ PROC			; CEntity::IsStationary, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  :     if( m_pEntity->vecMoveSpeed.X == 0.0f &&
; 119  : 		m_pEntity->vecMoveSpeed.Y == 0.0f &&
; 120  : 		m_pEntity->vecMoveSpeed.Z == 0.0f )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+68]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsStationa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+72]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsStationa
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR [ecx+76]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@IsStationa

; 121  : 	{
; 122  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@IsStationa
$LN1@IsStationa:

; 123  : 	}
; 124  :     return FALSE;

	xor	eax, eax
$LN2@IsStationa:

; 125  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStationary@CEntity@@QAEHXZ ENDP			; CEntity::IsStationary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?ApplyMoveSpeed@CEntity@@QAEXXZ
_TEXT	SEGMENT
_dwEnt$ = -20						; size = 4
_this$ = -8						; size = 4
?ApplyMoveSpeed@CEntity@@QAEXXZ PROC			; CEntity::ApplyMoveSpeed, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 	DWORD dwEnt = (DWORD)m_pEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dwEnt$[ebp], ecx

; 107  : 	if(!dwEnt) return;

	cmp	DWORD PTR _dwEnt$[ebp], 0
	jne	SHORT $LN1@ApplyMoveS
	jmp	SHORT $LN2@ApplyMoveS
$LN1@ApplyMoveS:

; 108  : 
; 109  : 	_asm mov ecx, dwEnt

	mov	ecx, DWORD PTR _dwEnt$[ebp]

; 110  : 	_asm mov edx, 0x542DD0

	mov	edx, 5516752				; 00542dd0H

; 111  : 	_asm call edx

	call	edx
$LN2@ApplyMoveS:

; 112  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyMoveSpeed@CEntity@@QAEXXZ ENDP			; CEntity::ApplyMoveSpeed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?GetDistanceFromPoint@CEntity@@QAEMMMM@Z
_TEXT	SEGMENT
_fSZ$ = -120						; size = 4
_fSY$ = -108						; size = 4
_fSX$ = -96						; size = 4
_matThis$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?GetDistanceFromPoint@CEntity@@QAEMMMM@Z PROC		; CEntity::GetDistanceFromPoint, COMDAT
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 	MATRIX4X4	matThis;
; 227  : 	float		fSX,fSY,fSZ;
; 228  : 
; 229  : 	GetMatrix(&matThis);

	lea	eax, DWORD PTR _matThis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 230  : 	fSX = (matThis.pos.X - X) * (matThis.pos.X - X);

	movss	xmm0, DWORD PTR _matThis$[ebp+48]
	subss	xmm0, DWORD PTR _X$[ebp]
	movss	xmm1, DWORD PTR _matThis$[ebp+48]
	subss	xmm1, DWORD PTR _X$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSX$[ebp], xmm0

; 231  : 	fSY = (matThis.pos.Y - Y) * (matThis.pos.Y - Y);

	movss	xmm0, DWORD PTR _matThis$[ebp+52]
	subss	xmm0, DWORD PTR _Y$[ebp]
	movss	xmm1, DWORD PTR _matThis$[ebp+52]
	subss	xmm1, DWORD PTR _Y$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSY$[ebp], xmm0

; 232  : 	fSZ = (matThis.pos.Z - Z) * (matThis.pos.Z - Z);

	movss	xmm0, DWORD PTR _matThis$[ebp+56]
	subss	xmm0, DWORD PTR _Z$[ebp]
	movss	xmm1, DWORD PTR _matThis$[ebp+56]
	subss	xmm1, DWORD PTR _Z$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSZ$[ebp], xmm0

; 233  : 	
; 234  : 	return (float)sqrt(fSX + fSY + fSZ);

	movss	xmm0, DWORD PTR _fSX$[ebp]
	addss	xmm0, DWORD PTR _fSY$[ebp]
	addss	xmm0, DWORD PTR _fSZ$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 235  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetDistanc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN5@GetDistanc:
	DD	1
	DD	$LN4@GetDistanc
$LN4@GetDistanc:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN3@GetDistanc
$LN3@GetDistanc:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
?GetDistanceFromPoint@CEntity@@QAEMMMM@Z ENDP		; CEntity::GetDistanceFromPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ
_TEXT	SEGMENT
_pLocalPlayer$ = -216					; size = 4
_pLocalPlayerPed$ = -204				; size = 4
_fSZ$ = -192						; size = 4
_fSY$ = -180						; size = 4
_fSX$ = -168						; size = 4
_matThis$ = -156					; size = 64
_matFromPlayer$ = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ PROC	; CEntity::GetDistanceFromLocalPlayerPed, COMDAT
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 412				; 0000019cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 103				; 00000067H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	MATRIX4X4	matFromPlayer;
; 193  : 	MATRIX4X4	matThis;
; 194  : 	float		fSX,fSY,fSZ;
; 195  : 
; 196  : 	CPlayerPed *pLocalPlayerPed = pGame->FindPlayerPed();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	DWORD PTR _pLocalPlayerPed$[ebp], eax

; 197  : 	CLocalPlayer *pLocalPlayer=NULL;

	mov	DWORD PTR _pLocalPlayer$[ebp], 0

; 198  : 
; 199  : 	if(!pLocalPlayerPed) return 10000.0f;

	cmp	DWORD PTR _pLocalPlayerPed$[ebp], 0
	jne	SHORT $LN7@GetDistanc
	fld	DWORD PTR __real@461c4000
	jmp	$LN8@GetDistanc
$LN7@GetDistanc:

; 200  : 	if(!m_pEntity) return 10000.0f;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@GetDistanc
	fld	DWORD PTR __real@461c4000
	jmp	$LN8@GetDistanc
$LN6@GetDistanc:

; 201  : 	
; 202  : 	GetMatrix(&matThis);

	lea	eax, DWORD PTR _matThis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 203  : 
; 204  : 	if(pNetGame) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN5@GetDistanc

; 205  : 		pLocalPlayer = pNetGame->GetPlayerPool()->GetLocalPlayer();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	DWORD PTR _pLocalPlayer$[ebp], eax

; 206  : 		if(pLocalPlayer && (pLocalPlayer->IsSpectating() || pLocalPlayer->IsInRCMode())) {

	cmp	DWORD PTR _pLocalPlayer$[ebp], 0
	je	SHORT $LN4@GetDistanc
	mov	ecx, DWORD PTR _pLocalPlayer$[ebp]
	call	?IsSpectating@CLocalPlayer@@QAEHXZ	; CLocalPlayer::IsSpectating
	test	eax, eax
	jne	SHORT $LN3@GetDistanc
	mov	ecx, DWORD PTR _pLocalPlayer$[ebp]
	call	?IsInRCMode@CLocalPlayer@@QAEHXZ	; CLocalPlayer::IsInRCMode
	test	eax, eax
	je	SHORT $LN4@GetDistanc
$LN3@GetDistanc:

; 207  : 			pGame->GetCamera()->GetMatrix(&matFromPlayer);

	lea	eax, DWORD PTR _matFromPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	ecx, eax
	call	?GetMatrix@CCamera@@QAEXPAU_MATRIX4X4@@@Z ; CCamera::GetMatrix

; 208  : 		} else {

	jmp	SHORT $LN2@GetDistanc
$LN4@GetDistanc:

; 209  : 			pLocalPlayerPed->GetMatrix(&matFromPlayer);

	lea	eax, DWORD PTR _matFromPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLocalPlayerPed$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix
$LN2@GetDistanc:

; 210  : 		}
; 211  : 	} else {

	jmp	SHORT $LN1@GetDistanc
$LN5@GetDistanc:

; 212  : 		pLocalPlayerPed->GetMatrix(&matFromPlayer);

	lea	eax, DWORD PTR _matFromPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLocalPlayerPed$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix
$LN1@GetDistanc:

; 213  : 	}
; 214  : 	
; 215  : 	fSX = (matThis.pos.X - matFromPlayer.pos.X) * (matThis.pos.X - matFromPlayer.pos.X);

	movss	xmm0, DWORD PTR _matThis$[ebp+48]
	subss	xmm0, DWORD PTR _matFromPlayer$[ebp+48]
	movss	xmm1, DWORD PTR _matThis$[ebp+48]
	subss	xmm1, DWORD PTR _matFromPlayer$[ebp+48]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSX$[ebp], xmm0

; 216  : 	fSY = (matThis.pos.Y - matFromPlayer.pos.Y) * (matThis.pos.Y - matFromPlayer.pos.Y);

	movss	xmm0, DWORD PTR _matThis$[ebp+52]
	subss	xmm0, DWORD PTR _matFromPlayer$[ebp+52]
	movss	xmm1, DWORD PTR _matThis$[ebp+52]
	subss	xmm1, DWORD PTR _matFromPlayer$[ebp+52]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSY$[ebp], xmm0

; 217  : 	fSZ = (matThis.pos.Z - matFromPlayer.pos.Z) * (matThis.pos.Z - matFromPlayer.pos.Z);

	movss	xmm0, DWORD PTR _matThis$[ebp+56]
	subss	xmm0, DWORD PTR _matFromPlayer$[ebp+56]
	movss	xmm1, DWORD PTR _matThis$[ebp+56]
	subss	xmm1, DWORD PTR _matFromPlayer$[ebp+56]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSZ$[ebp], xmm0

; 218  : 	
; 219  : 	return (float)sqrt(fSX + fSY + fSZ);

	movss	xmm0, DWORD PTR _fSX$[ebp]
	addss	xmm0, DWORD PTR _fSY$[ebp]
	addss	xmm0, DWORD PTR _fSZ$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
$LN8@GetDistanc:

; 220  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetDistanc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@GetDistanc:
	DD	2
	DD	$LN12@GetDistanc
$LN12@GetDistanc:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN10@GetDistanc
	DD	-156					; ffffff64H
	DD	64					; 00000040H
	DD	$LN11@GetDistanc
$LN11@GetDistanc:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN10@GetDistanc:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ ENDP	; CEntity::GetDistanceFromLocalPlayerPed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?TeleportTo@CEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_dwThisEntity$ = -20					; size = 4
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?TeleportTo@CEntity@@QAEXMMM@Z PROC			; CEntity::TeleportTo, COMDAT
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 	DWORD dwThisEntity = (DWORD)m_pEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dwThisEntity$[ebp], ecx

; 170  : 
; 171  : 	if(dwThisEntity) {

	cmp	DWORD PTR _dwThisEntity$[ebp], 0
	je	SHORT $LN1@TeleportTo

; 172  : 		if( GetModelIndex() != TRAIN_PASSENGER_LOCO &&
; 173  : 			GetModelIndex() != TRAIN_FREIGHT_LOCO &&
; 174  : 			GetModelIndex() != TRAIN_TRAM) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetModelIndex@CEntity@@QAEIXZ		; CEntity::GetModelIndex
	cmp	eax, 537				; 00000219H
	je	SHORT $LN2@TeleportTo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetModelIndex@CEntity@@QAEIXZ		; CEntity::GetModelIndex
	cmp	eax, 538				; 0000021aH
	je	SHORT $LN2@TeleportTo
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetModelIndex@CEntity@@QAEIXZ		; CEntity::GetModelIndex
	cmp	eax, 449				; 000001c1H
	je	SHORT $LN2@TeleportTo

; 175  : 			_asm mov ecx, dwThisEntity

	mov	ecx, DWORD PTR _dwThisEntity$[ebp]

; 176  : 			_asm mov edx, [ecx] ; vtbl

	mov	edx, DWORD PTR [ecx]

; 177  : 			_asm push 0

	push	0

; 178  : 			_asm push z

	push	DWORD PTR _z$[ebp]

; 179  : 			_asm push y

	push	DWORD PTR _y$[ebp]

; 180  : 			_asm push x

	push	DWORD PTR _x$[ebp]

; 181  : 			_asm call dword ptr [edx+56] ; method 14

	call	DWORD PTR [edx+56]

; 182  : 		} else {

	jmp	SHORT $LN1@TeleportTo
$LN2@TeleportTo:

; 183  : 			ScriptCommand(&put_train_at,m_dwGTAId,x,y,z);

	cvtss2sd xmm0, DWORD PTR _z$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _x$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _put_train_at
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H
$LN1@TeleportTo:

; 184  : 		}
; 185  : 	}
; 186  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?TeleportTo@CEntity@@QAEXMMM@Z ENDP			; CEntity::TeleportTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?SetModelIndex@CEntity@@QAEXI@Z
_TEXT	SEGMENT
_dwThisEntity$ = -20					; size = 4
_this$ = -8						; size = 4
_uiModel$ = 8						; size = 4
?SetModelIndex@CEntity@@QAEXI@Z PROC			; CEntity::SetModelIndex, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	if(!m_pEntity) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@SetModelIn
	jmp	$LN5@SetModelIn
$LN4@SetModelIn:

; 132  : 
; 133  : 	if(!pGame->IsModelLoaded(uiModel)) {

	mov	eax, DWORD PTR _uiModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@SetModelIn

; 134  : 		pGame->RequestModel(uiModel);

	mov	eax, DWORD PTR _uiModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel

; 135  : 		pGame->LoadRequestedModels();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?LoadRequestedModels@CGame@@QAEXXZ	; CGame::LoadRequestedModels
$LN2@SetModelIn:

; 136  : 		while(!pGame->IsModelLoaded(uiModel)) Sleep(1);

	mov	eax, DWORD PTR _uiModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@SetModelIn
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@SetModelIn
$LN3@SetModelIn:

; 137  : 	}
; 138  : 
; 139  : 	DWORD dwThisEntity = (DWORD)m_pEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dwThisEntity$[ebp], ecx

; 140  : 
; 141  : 	_asm {
; 142  : 		mov		esi, dwThisEntity

	mov	esi, DWORD PTR _dwThisEntity$[ebp]

; 143  : 		mov		edi, uiModel

	mov	edi, DWORD PTR _uiModel$[ebp]

; 144  : 		mov     edx, [esi]

	mov	edx, DWORD PTR [esi]

; 145  : 		mov     ecx, esi

	mov	ecx, esi

; 146  : 		call    dword ptr [edx+32] ; destroy RW

	call	DWORD PTR [edx+32]

; 147  : 		mov     eax, [esi]

	mov	eax, DWORD PTR [esi]

; 148  : 		mov		edx, edi

	mov	edx, edi

; 149  : 		push    edi

	push	edi

; 150  : 		mov     ecx, esi

	mov	ecx, esi

; 151  : 		mov     word ptr [esi+34], dx

	mov	WORD PTR [esi+34], dx

; 152  : 		call    dword ptr [eax+20] ; SetModelIndex

	call	DWORD PTR [eax+20]

; 153  : 	}
; 154  : 
; 155  : 	pGame->RemoveModel(uiModel);

	mov	eax, DWORD PTR _uiModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RemoveModel@CGame@@QAEXH@Z		; CGame::RemoveModel
$LN5@SetModelIn:

; 156  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetModelIndex@CEntity@@QAEXI@Z ENDP			; CEntity::SetModelIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?GetModelIndex@CEntity@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetModelIndex@CEntity@@QAEIXZ PROC			; CEntity::GetModelIndex, COMDAT
; _this$ = ecx

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 	return m_pEntity->nModelIndex;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	eax, WORD PTR [ecx+34]

; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetModelIndex@CEntity@@QAEIXZ ENDP			; CEntity::GetModelIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?SetTurnSpeedVector@CEntity@@QAEXU_VECTOR@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Vector$ = 8						; size = 12
?SetTurnSpeedVector@CEntity@@QAEXU_VECTOR@@@Z PROC	; CEntity::SetTurnSpeedVector, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	m_pEntity->vecTurnSpeed.X = Vector.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR _Vector$[ebp]
	movss	DWORD PTR [ecx+80], xmm0

; 99   : 	m_pEntity->vecTurnSpeed.Y = Vector.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR _Vector$[ebp+4]
	movss	DWORD PTR [ecx+84], xmm0

; 100  : 	m_pEntity->vecTurnSpeed.Z = Vector.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR _Vector$[ebp+8]
	movss	DWORD PTR [ecx+88], xmm0

; 101  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTurnSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ENDP	; CEntity::SetTurnSpeedVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?GetTurnSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Vector$ = 8						; size = 4
?GetTurnSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z PROC	; CEntity::GetTurnSpeedVector, COMDAT
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 	Vector->X = m_pEntity->vecTurnSpeed.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _Vector$[ebp]
	mov	eax, DWORD PTR [ecx+80]
	mov	DWORD PTR [edx], eax

; 90   : 	Vector->Y = m_pEntity->vecTurnSpeed.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _Vector$[ebp]
	mov	eax, DWORD PTR [ecx+84]
	mov	DWORD PTR [edx+4], eax

; 91   : 	Vector->Z = m_pEntity->vecTurnSpeed.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _Vector$[ebp]
	mov	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR [edx+8], eax

; 92   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTurnSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z ENDP	; CEntity::GetTurnSpeedVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Vector$ = 8						; size = 12
?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z PROC	; CEntity::SetMoveSpeedVector, COMDAT
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 	m_pEntity->vecMoveSpeed.X = Vector.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR _Vector$[ebp]
	movss	DWORD PTR [ecx+68], xmm0

; 81   : 	m_pEntity->vecMoveSpeed.Y = Vector.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR _Vector$[ebp+4]
	movss	DWORD PTR [ecx+72], xmm0

; 82   : 	m_pEntity->vecMoveSpeed.Z = Vector.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movss	xmm0, DWORD PTR _Vector$[ebp+8]
	movss	DWORD PTR [ecx+76], xmm0

; 83   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ENDP	; CEntity::SetMoveSpeedVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Vector$ = 8						; size = 4
?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z PROC	; CEntity::GetMoveSpeedVector, COMDAT
; _this$ = ecx

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 	Vector->X = m_pEntity->vecMoveSpeed.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _Vector$[ebp]
	mov	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR [edx], eax

; 72   : 	Vector->Y = m_pEntity->vecMoveSpeed.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _Vector$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR [edx+4], eax

; 73   : 	Vector->Z = m_pEntity->vecMoveSpeed.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _Vector$[ebp]
	mov	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR [edx+8], eax

; 74   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMoveSpeedVector@CEntity@@QAEXPAU_VECTOR@@@Z ENDP	; CEntity::GetMoveSpeedVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Matrix$ = 8						; size = 64
?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z PROC		; CEntity::SetMatrix, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	if (!m_pEntity || !m_pEntity->mat) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@SetMatrix
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN2@SetMatrix
$LN1@SetMatrix:
	jmp	$LN3@SetMatrix
$LN2@SetMatrix:

; 49   : 
; 50   : 	m_pEntity->mat->right.X = Matrix.right.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp]
	movss	DWORD PTR [edx], xmm0

; 51   : 	m_pEntity->mat->right.Y = Matrix.right.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+4]
	movss	DWORD PTR [edx+4], xmm0

; 52   : 	m_pEntity->mat->right.Z = Matrix.right.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+8]
	movss	DWORD PTR [edx+8], xmm0

; 53   : 
; 54   : 	m_pEntity->mat->up.X = Matrix.up.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+16]
	movss	DWORD PTR [edx+16], xmm0

; 55   : 	m_pEntity->mat->up.Y = Matrix.up.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+20]
	movss	DWORD PTR [edx+20], xmm0

; 56   : 	m_pEntity->mat->up.Z = Matrix.up.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+24]
	movss	DWORD PTR [edx+24], xmm0

; 57   : 
; 58   : 	m_pEntity->mat->at.X = Matrix.at.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+32]
	movss	DWORD PTR [edx+32], xmm0

; 59   : 	m_pEntity->mat->at.Y = Matrix.at.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+36]
	movss	DWORD PTR [edx+36], xmm0

; 60   : 	m_pEntity->mat->at.Z = Matrix.at.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+40]
	movss	DWORD PTR [edx+40], xmm0

; 61   : 
; 62   : 	m_pEntity->mat->pos.X = Matrix.pos.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+48]
	movss	DWORD PTR [edx+48], xmm0

; 63   : 	m_pEntity->mat->pos.Y = Matrix.pos.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+52]
	movss	DWORD PTR [edx+52], xmm0

; 64   : 	m_pEntity->mat->pos.Z = Matrix.pos.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movss	xmm0, DWORD PTR _Matrix$[ebp+56]
	movss	DWORD PTR [edx+56], xmm0
$LN3@SetMatrix:

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z ENDP		; CEntity::SetMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Matrix$ = 8						; size = 4
?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z PROC		; CEntity::GetMatrix, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 25   : 	if (!m_pEntity || !m_pEntity->mat) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@GetMatrix
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN2@GetMatrix
$LN1@GetMatrix:
	jmp	$LN3@GetMatrix
$LN2@GetMatrix:

; 26   : 
; 27   : 	Matrix->right.X = m_pEntity->mat->right.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 28   : 	Matrix->right.Y = m_pEntity->mat->right.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx

; 29   : 	Matrix->right.Z = m_pEntity->mat->right.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx

; 30   : 
; 31   : 	Matrix->up.X = m_pEntity->mat->up.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx

; 32   : 	Matrix->up.Y = m_pEntity->mat->up.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], ecx

; 33   : 	Matrix->up.Z = m_pEntity->mat->up.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+24], ecx

; 34   : 
; 35   : 	Matrix->at.X = m_pEntity->mat->at.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	mov	DWORD PTR [eax+32], ecx

; 36   : 	Matrix->at.Y = m_pEntity->mat->at.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR [eax+36], ecx

; 37   : 	Matrix->at.Z = m_pEntity->mat->at.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	mov	DWORD PTR [eax+40], ecx

; 38   : 
; 39   : 	Matrix->pos.X = m_pEntity->mat->pos.X;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	mov	DWORD PTR [eax+48], ecx

; 40   : 	Matrix->pos.Y = m_pEntity->mat->pos.Y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR [eax+52], ecx

; 41   : 	Matrix->pos.Z = m_pEntity->mat->pos.Z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _Matrix$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR [eax+56], ecx
$LN3@GetMatrix:

; 42   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ENDP		; CEntity::GetMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?IsAdded@CEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsAdded@CEntity@@QAEHXZ PROC				; CEntity::IsAdded, COMDAT
; _this$ = ecx

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 	// Check for CPlaceable messup
; 278  : 	if(m_pEntity) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@IsAdded

; 279  : 		if (m_pEntity->vtable == 0x863C40) 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 8797248		; 00863c40H
	jne	SHORT $LN2@IsAdded

; 280  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@IsAdded
$LN2@IsAdded:

; 281  : 
; 282  : 		if(m_pEntity->dwUnkModelRel)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+180], 0
	je	SHORT $LN3@IsAdded

; 283  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@IsAdded
$LN3@IsAdded:

; 284  : 	}
; 285  : 	return FALSE;

	xor	eax, eax
$LN4@IsAdded:

; 286  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAdded@CEntity@@QAEHXZ ENDP				; CEntity::IsAdded
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?Remove@CEntity@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Remove@CEntity@@UAEXXZ PROC				; CEntity::Remove, COMDAT
; _this$ = ecx

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 	// Check for CPlaceable messup
; 293  : 	if(!m_pEntity || m_pEntity->vtable == 0x863C40) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Remove
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 8797248		; 00863c40H
	jne	SHORT $LN4@Remove
$LN3@Remove:

; 294  : 	{
; 295  : #ifdef _DEBUG
; 296  : 		OutputDebugString("CEntity::Remove - m_pEntity == NULL or CPlaceable");

	mov	esi, esp
	push	OFFSET ??_C@_0DC@MBJBAPBE@CEntity?3?3Remove?5?9?5m_pEntity?5?$DN?$DN?5N@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 297  : #endif
; 298  : 		return;

	jmp	SHORT $LN5@Remove
$LN4@Remove:

; 299  : 	}
; 300  : 
; 301  : 	if(m_pEntity->dwUnkModelRel) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+180], 0
	je	SHORT $LN5@Remove

; 302  : 		WorldRemoveEntity((PDWORD)m_pEntity);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?WorldRemoveEntity@@YGXPAK@Z		; WorldRemoveEntity

; 303  : 
; 304  : #ifdef _DEBUG
; 305  : 		if (IsAdded())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAdded@CEntity@@QAEHXZ		; CEntity::IsAdded
	test	eax, eax
	je	SHORT $LN5@Remove

; 306  : 		{
; 307  : 			OutputDebugString("CEntity::Remove failed...");

	mov	esi, esp
	push	OFFSET ??_C@_0BK@DLCKBAPA@CEntity?3?3Remove?5failed?4?4?4?$AA@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@Remove:

; 308  : 		}
; 309  : #endif
; 310  : 	}
; 311  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove@CEntity@@UAEXXZ ENDP				; CEntity::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.cpp
;	COMDAT ?Add@CEntity@@UAEXXZ
_TEXT	SEGMENT
_mat$1 = -104						; size = 64
_vec$2 = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Add@CEntity@@UAEXXZ PROC				; CEntity::Add, COMDAT
; _this$ = ecx

; 240  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 	// Check for CPlaceable messup
; 242  : 	if(!m_pEntity || m_pEntity->vtable == 0x863C40) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 8797248		; 00863c40H
	jne	SHORT $LN4@Add
$LN3@Add:

; 243  : 	{
; 244  : #ifdef _DEBUG
; 245  : 		OutputDebugString("CEntity::Add - m_pEntity == NULL or CPlaceable");

	mov	esi, esp
	push	OFFSET ??_C@_0CP@NAFGPBJ@CEntity?3?3Add?5?9?5m_pEntity?5?$DN?$DN?5NULL@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 246  : #endif
; 247  : 		return;

	jmp	$LN5@Add
$LN4@Add:

; 248  : 	}
; 249  : 
; 250  : 	if(!m_pEntity->dwUnkModelRel) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+180], 0
	jne	$LN1@Add

; 251  : 		// Make sure the move/turn speed is reset
; 252  : 
; 253  : 		VECTOR vec = {0.0f,0.0f,0.0f};

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$2[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$2[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vec$2[ebp+8], xmm0

; 254  : 
; 255  : 		SetMoveSpeedVector(vec);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vec$2[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vec$2[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ; CEntity::SetMoveSpeedVector

; 256  : 		SetTurnSpeedVector(vec);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vec$2[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vec$2[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vec$2[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTurnSpeedVector@CEntity@@QAEXU_VECTOR@@@Z ; CEntity::SetTurnSpeedVector

; 257  : 
; 258  : 		WorldAddEntity((PDWORD)m_pEntity);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?WorldAddEntity@@YGXPAK@Z		; WorldAddEntity

; 259  : 
; 260  : 		MATRIX4X4 mat;
; 261  : 		GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 262  : 		TeleportTo(mat.pos.X,mat.pos.Y,mat.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _mat$1[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$1[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$1[ebp+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo

; 263  : 
; 264  : #ifdef _DEBUG
; 265  : 		if (!IsAdded())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAdded@CEntity@@QAEHXZ		; CEntity::IsAdded
	test	eax, eax
	jne	SHORT $LN1@Add

; 266  : 		{
; 267  : 			OutputDebugString("CEntity::Add failed...");

	mov	esi, esp
	push	OFFSET ??_C@_0BH@HEKFCBNB@CEntity?3?3Add?5failed?4?4?4?$AA@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Add:
$LN5@Add:

; 268  : 		}
; 269  : #endif
; 270  : 	}
; 271  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Add
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Add:
	DD	2
	DD	$LN9@Add
$LN9@Add:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN7@Add
	DD	-104					; ffffff98H
	DD	64					; 00000040H
	DD	$LN8@Add
$LN8@Add:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN7@Add:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
?Add@CEntity@@UAEXXZ ENDP				; CEntity::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 1136 :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 775  :     return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 776  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
