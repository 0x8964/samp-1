; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\net\playerpool.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?szQuitReasons@@3PAY0CA@DA			; szQuitReasons
PUBLIC	?iExceptPlayerMessageDisplayed@@3HA		; iExceptPlayerMessageDisplayed
_BSS	SEGMENT
?iExceptPlayerMessageDisplayed@@3HA DD 01H DUP (?)	; iExceptPlayerMessageDisplayed
_BSS	ENDS
_DATA	SEGMENT
?szQuitReasons@@3PAY0CA@DA DB 'Timeout', 00H		; szQuitReasons
	ORG $+24
	DB	'Leaving', 00H
	ORG $+24
	DB	'Kicked', 00H
	ORG $+25
_DATA	ENDS
PUBLIC	?GetGtaActor@CPlayerPed@@QAEPAU_PED_TYPE@@XZ	; CPlayerPed::GetGtaActor
PUBLIC	??1CLocalPlayer@@QAE@XZ				; CLocalPlayer::~CLocalPlayer
PUBLIC	?GetVirtualWorld@CLocalPlayer@@QAEEXZ		; CLocalPlayer::GetVirtualWorld
PUBLIC	?IsSpectating@CLocalPlayer@@QAEHXZ		; CLocalPlayer::IsSpectating
PUBLIC	??_GCLocalPlayer@@QAEPAXI@Z			; CLocalPlayer::`scalar deleting destructor'
PUBLIC	?SetID@CRemotePlayer@@QAEXE@Z			; CRemotePlayer::SetID
PUBLIC	?GetID@CRemotePlayer@@QAEEXZ			; CRemotePlayer::GetID
PUBLIC	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
PUBLIC	?Deactivate@CRemotePlayer@@QAEXXZ		; CRemotePlayer::Deactivate
PUBLIC	??_GCRemotePlayer@@QAEPAXI@Z			; CRemotePlayer::`scalar deleting destructor'
PUBLIC	?Process@CPlayerPool@@QAEHXZ			; CPlayerPool::Process
PUBLIC	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
PUBLIC	?New@CPlayerPool@@QAEHEPAD@Z			; CPlayerPool::New
PUBLIC	?Delete@CPlayerPool@@QAEHEE@Z			; CPlayerPool::Delete
PUBLIC	?GetSlotState@CPlayerPool@@QAEHE@Z		; CPlayerPool::GetSlotState
PUBLIC	?GetCount@CPlayerPool@@QAEEXZ			; CPlayerPool::GetCount
PUBLIC	?DeactivateAll@CPlayerPool@@QAEXXZ		; CPlayerPool::DeactivateAll
PUBLIC	??0CPlayerPool@@QAE@XZ				; CPlayerPool::CPlayerPool
PUBLIC	??1CPlayerPool@@QAE@XZ				; CPlayerPool::~CPlayerPool
PUBLIC	??_C@_0CF@BFCAMAEH@Warning?3?5Error?5Processing?5Player@ ; `string'
PUBLIC	??_C@_0CB@MPCOPOIF@Warning?3?5Error?5Processing?5Player@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_strcpy:PROC
EXTRN	??0CLocalPlayer@@QAE@XZ:PROC			; CLocalPlayer::CLocalPlayer
EXTRN	?Process@CLocalPlayer@@QAEHXZ:PROC		; CLocalPlayer::Process
EXTRN	?ToggleSpectating@CLocalPlayer@@QAEXH@Z:PROC	; CLocalPlayer::ToggleSpectating
EXTRN	??0CRemotePlayer@@QAE@XZ:PROC			; CRemotePlayer::CRemotePlayer
EXTRN	??1CRemotePlayer@@QAE@XZ:PROC			; CRemotePlayer::~CRemotePlayer
EXTRN	?Process@CRemotePlayer@@QAEXE@Z:PROC		; CRemotePlayer::Process
EXTRN	?AddDebugMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddDebugMessage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pChatWindow@@3PAVCChatWindow@@A:DWORD		; pChatWindow
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CB@MPCOPOIF@Warning?3?5Error?5Processing?5Player@
CONST	SEGMENT
??_C@_0CB@MPCOPOIF@Warning?3?5Error?5Processing?5Player@ DB 'Warning: Err'
	DB	'or Processing Player', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BFCAMAEH@Warning?3?5Error?5Processing?5Player@
CONST	SEGMENT
??_C@_0CF@BFCAMAEH@Warning?3?5Error?5Processing?5Player@ DB 'Warning: Err'
	DB	'or Processing Player(%u)', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPlayerPool@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPlayerPool@@QAE@XZ$0
__ehfuncinfo$??0CPlayerPool@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CPlayerPool@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CPlayerPool@@QAEHEPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CPlayerPool@@QAEHEPAD@Z$0
__ehfuncinfo$?New@CPlayerPool@@QAEHEPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CPlayerPool@@QAEHEPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Process@CPlayerPool@@QAEHXZ$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Process@CPlayerPool@@QAEHXZ$2
__catchsym$?Process@CPlayerPool@@QAEHXZ$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Process@CPlayerPool@@QAEHXZ$0
__unwindtable$?Process@CPlayerPool@@QAEHXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?Process@CPlayerPool@@QAEHXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Process@CPlayerPool@@QAEHXZ
	DD	02H
	DD	FLAT:__tryblocktable$?Process@CPlayerPool@@QAEHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?Process@CPlayerPool@@QAEHXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Process@CPlayerPool@@QAEHXZ$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?Process@CPlayerPool@@QAEHXZ$5
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.cpp
;	COMDAT ??1CPlayerPool@@QAE@XZ
_TEXT	SEGMENT
tv69 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_bytePlayerID$3 = -17					; size = 1
_this$ = -8						; size = 4
??1CPlayerPool@@QAE@XZ PROC				; CPlayerPool::~CPlayerPool, COMDAT
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 	delete m_pLocalPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@CPlayerPoo
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GCLocalPlayer@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN7@CPlayerPoo
$LN6@CPlayerPoo:
	mov	DWORD PTR tv69[ebp], 0
$LN7@CPlayerPoo:

; 47   : 	m_pLocalPlayer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 48   : 
; 49   : 	for(BYTE bytePlayerID = 0; bytePlayerID < MAX_PLAYERS; bytePlayerID++) {

	mov	BYTE PTR _bytePlayerID$3[ebp], 0
	jmp	SHORT $LN3@CPlayerPoo
$LN2@CPlayerPoo:
	mov	al, BYTE PTR _bytePlayerID$3[ebp]
	add	al, 1
	mov	BYTE PTR _bytePlayerID$3[ebp], al
$LN3@CPlayerPoo:
	movzx	eax, BYTE PTR _bytePlayerID$3[ebp]
	cmp	eax, 204				; 000000ccH
	jge	SHORT $LN4@CPlayerPoo

; 50   : 		Delete(bytePlayerID,0);

	push	0
	movzx	eax, BYTE PTR _bytePlayerID$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@CPlayerPool@@QAEHEE@Z		; CPlayerPool::Delete

; 51   : 	}

	jmp	SHORT $LN2@CPlayerPoo
$LN4@CPlayerPoo:

; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPlayerPool@@QAE@XZ ENDP				; CPlayerPool::~CPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.cpp
;	COMDAT ??0CPlayerPool@@QAE@XZ
_TEXT	SEGMENT
tv72 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_bytePlayerID$4 = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CPlayerPool@@QAE@XZ PROC				; CPlayerPool::CPlayerPool, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPlayerPool@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	m_pLocalPlayer = new CLocalPlayer();

	push	487					; 000001e7H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@CPlayerPoo
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CLocalPlayer@@QAE@XZ			; CLocalPlayer::CLocalPlayer
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN7@CPlayerPoo
$LN6@CPlayerPoo:
	mov	DWORD PTR tv72[ebp], 0
$LN7@CPlayerPoo:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx

; 29   : 
; 30   : 	m_iLocalPlayerScore = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5], 0

; 31   : 	m_dwLocalPlayerPing = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+9], 0

; 32   : 
; 33   : 	// loop through and initialize all net players to null and slot states to false
; 34   : 	for(BYTE bytePlayerID = 0; bytePlayerID < MAX_PLAYERS; bytePlayerID++) {

	mov	BYTE PTR _bytePlayerID$4[ebp], 0
	jmp	SHORT $LN3@CPlayerPoo
$LN2@CPlayerPoo:
	mov	al, BYTE PTR _bytePlayerID$4[ebp]
	add	al, 1
	mov	BYTE PTR _bytePlayerID$4[ebp], al
$LN3@CPlayerPoo:
	movzx	eax, BYTE PTR _bytePlayerID$4[ebp]
	cmp	eax, 204				; 000000ccH
	jge	SHORT $LN4@CPlayerPoo

; 35   : 		m_bPlayerSlotState[bytePlayerID] = FALSE;

	movzx	eax, BYTE PTR _bytePlayerID$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+13], 0

; 36   : 		m_pPlayers[bytePlayerID] = NULL;

	movzx	eax, BYTE PTR _bytePlayerID$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+829], 0

; 37   : 		m_iPlayerScores[bytePlayerID] = 0;

	movzx	eax, BYTE PTR _bytePlayerID$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+3277], 0

; 38   : 		m_dwPlayerPings[bytePlayerID] = 0;

	movzx	eax, BYTE PTR _bytePlayerID$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+1645], 0

; 39   : 	}

	jmp	SHORT $LN2@CPlayerPoo
$LN4@CPlayerPoo:

; 40   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPlayerPool@@QAE@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CPlayerPool@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPlayerPool@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPlayerPool@@QAE@XZ ENDP				; CPlayerPool::CPlayerPool
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.cpp
;	COMDAT ?DeactivateAll@CPlayerPool@@QAEXXZ
_TEXT	SEGMENT
_bytePlayerID$1 = -17					; size = 1
_this$ = -8						; size = 4
?DeactivateAll@CPlayerPool@@QAEXXZ PROC			; CPlayerPool::DeactivateAll, COMDAT
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	m_pLocalPlayer->m_bIsActive = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], 0

; 183  : 	m_pLocalPlayer->m_iSelectedClass = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+16], 0

; 184  : 
; 185  : 	for(BYTE bytePlayerID = 0; bytePlayerID < MAX_PLAYERS; bytePlayerID++) {

	mov	BYTE PTR _bytePlayerID$1[ebp], 0
	jmp	SHORT $LN4@Deactivate
$LN3@Deactivate:
	mov	al, BYTE PTR _bytePlayerID$1[ebp]
	add	al, 1
	mov	BYTE PTR _bytePlayerID$1[ebp], al
$LN4@Deactivate:
	movzx	eax, BYTE PTR _bytePlayerID$1[ebp]
	cmp	eax, 204				; 000000ccH
	jge	SHORT $LN5@Deactivate

; 186  : 		if(TRUE == m_bPlayerSlotState[bytePlayerID]) {

	movzx	eax, BYTE PTR _bytePlayerID$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+13], 1
	jne	SHORT $LN1@Deactivate

; 187  : 			m_pPlayers[bytePlayerID]->Deactivate();

	movzx	eax, BYTE PTR _bytePlayerID$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+829]
	call	?Deactivate@CRemotePlayer@@QAEXXZ	; CRemotePlayer::Deactivate
$LN1@Deactivate:

; 188  : 		}
; 189  : 	}

	jmp	SHORT $LN3@Deactivate
$LN5@Deactivate:

; 190  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeactivateAll@CPlayerPool@@QAEXXZ ENDP			; CPlayerPool::DeactivateAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.cpp
;	COMDAT ?GetCount@CPlayerPool@@QAEEXZ
_TEXT	SEGMENT
_bytePlayerID$1 = -29					; size = 1
_byteCount$ = -17					; size = 1
_this$ = -8						; size = 4
?GetCount@CPlayerPool@@QAEEXZ PROC			; CPlayerPool::GetCount, COMDAT
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 	BYTE byteCount=0;

	mov	BYTE PTR _byteCount$[ebp], 0

; 170  : 	for(BYTE bytePlayerID = 0; bytePlayerID < MAX_PLAYERS; bytePlayerID++) {

	mov	BYTE PTR _bytePlayerID$1[ebp], 0
	jmp	SHORT $LN4@GetCount
$LN3@GetCount:
	mov	al, BYTE PTR _bytePlayerID$1[ebp]
	add	al, 1
	mov	BYTE PTR _bytePlayerID$1[ebp], al
$LN4@GetCount:
	movzx	eax, BYTE PTR _bytePlayerID$1[ebp]
	cmp	eax, 204				; 000000ccH
	jge	SHORT $LN2@GetCount

; 171  : 		if(TRUE == m_bPlayerSlotState[bytePlayerID]) {

	movzx	eax, BYTE PTR _bytePlayerID$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+13], 1
	jne	SHORT $LN1@GetCount

; 172  : 			byteCount++;

	mov	al, BYTE PTR _byteCount$[ebp]
	add	al, 1
	mov	BYTE PTR _byteCount$[ebp], al
$LN1@GetCount:

; 173  : 		}
; 174  : 	}

	jmp	SHORT $LN3@GetCount
$LN2@GetCount:

; 175  : 	return byteCount;

	mov	al, BYTE PTR _byteCount$[ebp]

; 176  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCount@CPlayerPool@@QAEEXZ ENDP			; CPlayerPool::GetCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetSlotState@CPlayerPool@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetSlotState@CPlayerPool@@QAEHE@Z PROC			; CPlayerPool::GetSlotState, COMDAT
; _this$ = ecx

; 58   : 	BOOL GetSlotState(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(bytePlayerID > MAX_PLAYERS) { return FALSE; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 60   : 		return m_bPlayerSlotState[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+13]
$LN2@GetSlotSta:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CPlayerPool@@QAEHE@Z ENDP			; CPlayerPool::GetSlotState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.cpp
;	COMDAT ?Delete@CPlayerPool@@QAEHEE@Z
_TEXT	SEGMENT
tv130 = -232						; size = 4
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
_byteReason$ = 12					; size = 1
?Delete@CPlayerPool@@QAEHEE@Z PROC			; CPlayerPool::Delete, COMDAT
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 	if(!GetSlotState(bytePlayerID) || !m_pPlayers[bytePlayerID]) {

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	SHORT $LN2@Delete
	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+829], 0
	jne	SHORT $LN3@Delete
$LN2@Delete:

; 80   : 		return FALSE; // Player already deleted or not used.

	xor	eax, eax
	jmp	$LN4@Delete
$LN3@Delete:

; 81   : 	}
; 82   : 
; 83   : 	if (m_pLocalPlayer && m_pLocalPlayer->IsSpectating() && m_pLocalPlayer->m_SpectateID == bytePlayerID) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Delete
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsSpectating@CLocalPlayer@@QAEHXZ	; CLocalPlayer::IsSpectating
	test	eax, eax
	je	SHORT $LN1@Delete
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR _bytePlayerID$[ebp]
	cmp	DWORD PTR [ecx+27], edx
	jne	SHORT $LN1@Delete

; 84   : 		m_pLocalPlayer->ToggleSpectating(FALSE);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?ToggleSpectating@CLocalPlayer@@QAEXH@Z	; CLocalPlayer::ToggleSpectating
$LN1@Delete:

; 85   : 	}
; 86   : 
; 87   : 	m_bPlayerSlotState[bytePlayerID] = FALSE;

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+13], 0

; 88   : 	delete m_pPlayers[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+829]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@Delete
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GCRemotePlayer@@QAEPAXI@Z
	mov	DWORD PTR tv130[ebp], eax
	jmp	SHORT $LN7@Delete
$LN6@Delete:
	mov	DWORD PTR tv130[ebp], 0
$LN7@Delete:

; 89   : 	m_pPlayers[bytePlayerID] = NULL;

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+829], 0

; 90   : 
; 91   : 	//if(pChatWindow) {
; 92   : 		//pChatWindow->AddInfoMessage("*** %s left the server. (%s)",
; 93   : 		//m_szPlayerNames[bytePlayerID],szQuitReasons[byteReason]);
; 94   : 	//}
; 95   : 
; 96   : 	return TRUE;

	mov	eax, 1
$LN4@Delete:

; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Delete@CPlayerPool@@QAEHEE@Z ENDP			; CPlayerPool::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.cpp
;	COMDAT ?New@CPlayerPool@@QAEHEPAD@Z
_TEXT	SEGMENT
tv75 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_bytePlayerID$ = 8					; size = 1
_szPlayerName$ = 12					; size = 4
?New@CPlayerPool@@QAEHEPAD@Z PROC			; CPlayerPool::New, COMDAT
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?New@CPlayerPool@@QAEHEPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 	m_pPlayers[bytePlayerID] = new CRemotePlayer();

	push	357					; 00000165H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@New
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CRemotePlayer@@QAE@XZ		; CRemotePlayer::CRemotePlayer
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@New
$LN5@New:
	mov	DWORD PTR tv75[ebp], 0
$LN6@New:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	movzx	ecx, BYTE PTR _bytePlayerID$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+ecx*4+829], eax

; 59   : 
; 60   : 	if(m_pPlayers[bytePlayerID])

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+829], 0
	je	SHORT $LN2@New

; 61   : 	{
; 62   : 		strcpy(m_szPlayerNames[bytePlayerID],szPlayerName);

	mov	eax, DWORD PTR _szPlayerName$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bytePlayerID$[ebp]
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4093]
	push	ecx
	call	_strcpy
	add	esp, 8

; 63   : 		m_pPlayers[bytePlayerID]->SetID(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bytePlayerID$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+829]
	call	?SetID@CRemotePlayer@@QAEXE@Z		; CRemotePlayer::SetID

; 64   : 		m_bPlayerSlotState[bytePlayerID] = TRUE;

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+13], 1

; 65   : 		//if(pChatWindow) 
; 66   : 			//pChatWindow->AddInfoMessage("*** %s joined the server.",szPlayerName);
; 67   : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@New

; 68   : 	}
; 69   : 	else

	jmp	SHORT $LN3@New
$LN2@New:

; 70   : 	{
; 71   : 		return FALSE;

	xor	eax, eax
$LN3@New:

; 72   : 	}
; 73   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CPlayerPool@@QAEHEPAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?New@CPlayerPool@@QAEHEPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?New@CPlayerPool@@QAEHEPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?New@CPlayerPool@@QAEHEPAD@Z ENDP			; CPlayerPool::New
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.cpp
;	COMDAT ?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z
_TEXT	SEGMENT
_pTestActor$1 = -44					; size = 4
_bytePlayerID$2 = -29					; size = 1
_pPlayerPed$ = -20					; size = 4
_this$ = -8						; size = 4
_pActor$ = 8						; size = 4
?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z PROC ; CPlayerPool::FindRemotePlayerIDFromGtaPtr, COMDAT
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 	CPlayerPed *pPlayerPed;
; 147  : 
; 148  : 	for(BYTE bytePlayerID = 0; bytePlayerID < MAX_PLAYERS; bytePlayerID++)

	mov	BYTE PTR _bytePlayerID$2[ebp], 0
	jmp	SHORT $LN6@FindRemote
$LN5@FindRemote:
	mov	al, BYTE PTR _bytePlayerID$2[ebp]
	add	al, 1
	mov	BYTE PTR _bytePlayerID$2[ebp], al
$LN6@FindRemote:
	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	cmp	eax, 204				; 000000ccH
	jge	SHORT $LN4@FindRemote

; 149  : 	{
; 150  : 		if(TRUE == m_bPlayerSlotState[bytePlayerID])

	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+13], 1
	jne	SHORT $LN3@FindRemote

; 151  : 		{
; 152  : 			pPlayerPed = m_pPlayers[bytePlayerID]->GetPlayerPed();

	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+829]
	call	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
	mov	DWORD PTR _pPlayerPed$[ebp], eax

; 153  : 
; 154  : 			if(pPlayerPed) {

	cmp	DWORD PTR _pPlayerPed$[ebp], 0
	je	SHORT $LN3@FindRemote

; 155  : 				PED_TYPE *pTestActor = pPlayerPed->GetGtaActor();

	mov	ecx, DWORD PTR _pPlayerPed$[ebp]
	call	?GetGtaActor@CPlayerPed@@QAEPAU_PED_TYPE@@XZ ; CPlayerPed::GetGtaActor
	mov	DWORD PTR _pTestActor$1[ebp], eax

; 156  : 				if((pTestActor != NULL) && (pActor == pTestActor)) // found it

	cmp	DWORD PTR _pTestActor$1[ebp], 0
	je	SHORT $LN3@FindRemote
	mov	eax, DWORD PTR _pActor$[ebp]
	cmp	eax, DWORD PTR _pTestActor$1[ebp]
	jne	SHORT $LN3@FindRemote

; 157  : 					return (BYTE)m_pPlayers[bytePlayerID]->GetID();

	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+829]
	call	?GetID@CRemotePlayer@@QAEEXZ		; CRemotePlayer::GetID
	jmp	SHORT $LN7@FindRemote
$LN3@FindRemote:

; 158  : 			}
; 159  : 		}
; 160  : 	}

	jmp	SHORT $LN5@FindRemote
$LN4@FindRemote:

; 161  : 
; 162  : 	return INVALID_PLAYER_ID;	

	or	al, 255					; 000000ffH
$LN7@FindRemote:

; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z ENDP ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.cpp
;	COMDAT ?Process@CPlayerPool@@QAEHXZ
_TEXT	SEGMENT
_bytePlayerID$2 = -45					; size = 1
_localVW$ = -33						; size = 1
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
?Process@CPlayerPool@@QAEHXZ PROC			; CPlayerPool::Process, COMDAT
; _this$ = ecx

; 102  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Process@CPlayerPool@@QAEHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 	// Process all CRemotePlayers
; 104  : 	BYTE localVW = 0;

	mov	BYTE PTR _localVW$[ebp], 0

; 105  : 	if (m_pLocalPlayer) localVW = m_pLocalPlayer->GetVirtualWorld();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetVirtualWorld@CLocalPlayer@@QAEEXZ	; CLocalPlayer::GetVirtualWorld
	mov	BYTE PTR _localVW$[ebp], al
$LN9@Process:

; 106  : 	for(BYTE bytePlayerID = 0; bytePlayerID < MAX_PLAYERS; bytePlayerID++) {

	mov	BYTE PTR _bytePlayerID$2[ebp], 0
	jmp	SHORT $LN8@Process
$LN7@Process:
	mov	al, BYTE PTR _bytePlayerID$2[ebp]
	add	al, 1
	mov	BYTE PTR _bytePlayerID$2[ebp], al
$LN8@Process:
	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	cmp	eax, 204				; 000000ccH
	jge	SHORT $LN6@Process

; 107  : 		if(TRUE == m_bPlayerSlotState[bytePlayerID]) {

	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+13], 1
	jne	SHORT $LN5@Process

; 108  : 			
; 109  : 			try {

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 110  : 				m_pPlayers[bytePlayerID]->Process(localVW);

	movzx	eax, BYTE PTR _localVW$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bytePlayerID$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+829]
	call	?Process@CRemotePlayer@@QAEXE@Z		; CRemotePlayer::Process
	jmp	SHORT $LN12@Process
__catch$?Process@CPlayerPool@@QAEHXZ$0:

; 111  : 			} catch(...) {
; 112  : 				if(!iExceptPlayerMessageDisplayed) {

	cmp	DWORD PTR ?iExceptPlayerMessageDisplayed@@3HA, 0 ; iExceptPlayerMessageDisplayed
	jne	SHORT $LN3@Process

; 113  : 					pChatWindow->AddDebugMessage("Warning: Error Processing Player(%u)",bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@BFCAMAEH@Warning?3?5Error?5Processing?5Player@
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	ecx
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 12					; 0000000cH

; 114  : 					//Delete(bytePlayerID,0);
; 115  : 					iExceptPlayerMessageDisplayed++;

	mov	eax, DWORD PTR ?iExceptPlayerMessageDisplayed@@3HA ; iExceptPlayerMessageDisplayed
	add	eax, 1
	mov	DWORD PTR ?iExceptPlayerMessageDisplayed@@3HA, eax ; iExceptPlayerMessageDisplayed
$LN3@Process:

; 116  : 				}
; 117  : 			}

	mov	eax, $LN17@Process
	ret	0
$LN12@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN5@Process
$LN17@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN5@Process:

; 118  : 
; 119  : 			/*if (m_byteVirtualWorld[bytePlayerID] != localVW || m_pPlayers[bytePlayerID]->GetState() == PLAYER_STATE_SPECTATING){
; 120  : 				m_pPlayers[bytePlayerID]->HideForLocal();
; 121  : 			}
; 122  : 			else {
; 123  : 				// Just shows the radar marker if required
; 124  : 				m_pPlayers[bytePlayerID]->ShowForLocal();
; 125  : 			}*/
; 126  : 		}

	jmp	$LN7@Process
$LN6@Process:

; 127  : 	}

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 128  : 
; 129  : 	// Process the LocalPlayer
; 130  : 	try {
; 131  : 		m_pLocalPlayer->Process();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Process@CLocalPlayer@@QAEHXZ		; CLocalPlayer::Process
	jmp	SHORT $LN14@Process
__catch$?Process@CPlayerPool@@QAEHXZ$2:

; 132  : 	} catch(...) {
; 133  : 		if(!iExceptPlayerMessageDisplayed) {

	cmp	DWORD PTR ?iExceptPlayerMessageDisplayed@@3HA, 0 ; iExceptPlayerMessageDisplayed
	jne	SHORT $LN1@Process

; 134  : 			pChatWindow->AddDebugMessage("Warning: Error Processing Player");

	push	OFFSET ??_C@_0CB@MPCOPOIF@Warning?3?5Error?5Processing?5Player@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 135  : 			iExceptPlayerMessageDisplayed++;

	mov	eax, DWORD PTR ?iExceptPlayerMessageDisplayed@@3HA ; iExceptPlayerMessageDisplayed
	add	eax, 1
	mov	DWORD PTR ?iExceptPlayerMessageDisplayed@@3HA, eax ; iExceptPlayerMessageDisplayed
$LN1@Process:

; 136  : 		}
; 137  : 	}

	mov	eax, $LN19@Process
	ret	0
$LN14@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?Process@CPlayerPool@@QAEHXZ$3
$LN19@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?Process@CPlayerPool@@QAEHXZ$3:

; 138  : 	
; 139  : 	return TRUE;

	mov	eax, 1

; 140  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Process@CPlayerPool@@QAEHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Process@CPlayerPool@@QAEHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Process@CPlayerPool@@QAEHXZ ENDP			; CPlayerPool::Process
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCRemotePlayer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCRemotePlayer@@QAEPAXI@Z PROC			; CRemotePlayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRemotePlayer@@QAE@XZ		; CRemotePlayer::~CRemotePlayer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCRemotePlayer@@QAEPAXI@Z ENDP			; CRemotePlayer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?Deactivate@CRemotePlayer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Deactivate@CRemotePlayer@@QAEXXZ PROC			; CRemotePlayer::Deactivate, COMDAT
; _this$ = ecx

; 111  : 	void Deactivate() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		m_byteState = PLAYER_STATE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+315], 0

; 113  : 		m_bShowNameTag = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], 1

; 114  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Deactivate@CRemotePlayer@@QAEXXZ ENDP			; CRemotePlayer::Deactivate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ PROC	; CRemotePlayer::GetPlayerPed, COMDAT
; _this$ = ecx

; 102  : 	CPlayerPed * GetPlayerPed() { return m_pPlayerPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ENDP	; CRemotePlayer::GetPlayerPed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetID@CRemotePlayer@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetID@CRemotePlayer@@QAEEXZ PROC			; CRemotePlayer::GetID, COMDAT
; _this$ = ecx

; 101  : 	BYTE GetID() { return m_bytePlayerID; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@CRemotePlayer@@QAEEXZ ENDP			; CRemotePlayer::GetID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?SetID@CRemotePlayer@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?SetID@CRemotePlayer@@QAEXE@Z PROC			; CRemotePlayer::SetID, COMDAT
; _this$ = ecx

; 100  : 	void SetID(BYTE bytePlayerID) { m_bytePlayerID = bytePlayerID; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bytePlayerID$[ebp]
	mov	BYTE PTR [eax+4], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetID@CRemotePlayer@@QAEXE@Z ENDP			; CRemotePlayer::SetID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCLocalPlayer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCLocalPlayer@@QAEPAXI@Z PROC			; CLocalPlayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLocalPlayer@@QAE@XZ			; CLocalPlayer::~CLocalPlayer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLocalPlayer@@QAEPAXI@Z ENDP			; CLocalPlayer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?IsSpectating@CLocalPlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsSpectating@CLocalPlayer@@QAEHXZ PROC			; CLocalPlayer::IsSpectating, COMDAT
; _this$ = ecx

; 254  : 	BOOL IsSpectating() { return m_bIsSpectating; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+186]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSpectating@CLocalPlayer@@QAEHXZ ENDP			; CLocalPlayer::IsSpectating
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?GetVirtualWorld@CLocalPlayer@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVirtualWorld@CLocalPlayer@@QAEEXZ PROC		; CLocalPlayer::GetVirtualWorld, COMDAT
; _this$ = ecx

; 248  : 	BYTE GetVirtualWorld() { return m_byteVirtualWorld; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVirtualWorld@CLocalPlayer@@QAEEXZ ENDP		; CLocalPlayer::GetVirtualWorld
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ??1CLocalPlayer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CLocalPlayer@@QAE@XZ PROC				; CLocalPlayer::~CLocalPlayer, COMDAT
; _this$ = ecx

; 191  : 	~CLocalPlayer(){};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLocalPlayer@@QAE@XZ ENDP				; CLocalPlayer::~CLocalPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.h
;	COMDAT ?GetGtaActor@CPlayerPed@@QAEPAU_PED_TYPE@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGtaActor@CPlayerPed@@QAEPAU_PED_TYPE@@XZ PROC	; CPlayerPed::GetGtaActor, COMDAT
; _this$ = ecx

; 97   : 	PED_TYPE * GetGtaActor() { return m_pPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGtaActor@CPlayerPed@@QAEPAU_PED_TYPE@@XZ ENDP	; CPlayerPed::GetGtaActor
_TEXT	ENDS
END
