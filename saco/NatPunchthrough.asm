; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\NatPunchthrough.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_SEND_TIMESTAMP_DELAY_PING_MULTIPLE DD 03fc00000r ; 1.5
_SEND_PUNCHTHROUGH_DELAY_PING_MULTIPLE DD 040a00000r ; 5
_UNASSIGNED_PLAYER_ID DD 0ffffffffH
	DW	0ffffH
CONST	ENDS
PUBLIC	??4PlayerID@@QAEAAU0@ABU0@@Z			; PlayerID::operator=
PUBLIC	??0PluginInterface@@QAE@XZ			; PluginInterface::PluginInterface
PUBLIC	??0NatPunchthrough@@QAE@XZ			; NatPunchthrough::NatPunchthrough
PUBLIC	??1NatPunchthrough@@QAE@XZ			; NatPunchthrough::~NatPunchthrough
PUBLIC	?FacilitateConnections@NatPunchthrough@@QAEX_N@Z ; NatPunchthrough::FacilitateConnections
PUBLIC	?Connect@NatPunchthrough@@QAE_NPBDGPADHUPlayerID@@@Z ; NatPunchthrough::Connect
PUBLIC	?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z ; NatPunchthrough::Connect
PUBLIC	?Clear@NatPunchthrough@@QAEXXZ			; NatPunchthrough::Clear
PUBLIC	?OnAttach@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z ; NatPunchthrough::OnAttach
PUBLIC	?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z ; NatPunchthrough::Update
PUBLIC	?OnReceive@NatPunchthrough@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z ; NatPunchthrough::OnReceive
PUBLIC	?OnDisconnect@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z ; NatPunchthrough::OnDisconnect
PUBLIC	?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z ; NatPunchthrough::OnCloseConnection
PUBLIC	?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ; NatPunchthrough::OnPunchthroughRequest
PUBLIC	?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ; NatPunchthrough::OnConnectAtTime
PUBLIC	?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ; NatPunchthrough::OnSendOfflineMessageAtTime
PUBLIC	?RemoveRequestByFacilitator@NatPunchthrough@@IAE?AW4PluginReceiveResult@@UPlayerID@@@Z ; NatPunchthrough::RemoveRequestByFacilitator
PUBLIC	??0?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::List<NatPunchthrough::ConnectionRequest *>
PUBLIC	??1?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::~List<NatPunchthrough::ConnectionRequest *>
PUBLIC	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
PUBLIC	?Insert@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXQAUConnectionRequest@NatPunchthrough@@@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Insert
PUBLIC	?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::RemoveAtIndex
PUBLIC	?Del@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Del
PUBLIC	?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
PUBLIC	?Clear@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEX_N@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Clear
PUBLIC	??$Write@UPlayerID@@@BitStream@RakNet@@QAEXUPlayerID@@@Z ; RakNet::BitStream::Write<PlayerID>
PUBLIC	??$Write@I@BitStream@RakNet@@QAEXI@Z		; RakNet::BitStream::Write<unsigned int>
PUBLIC	??$Write@G@BitStream@RakNet@@QAEXG@Z		; RakNet::BitStream::Write<unsigned short>
PUBLIC	??$Read@UPlayerID@@@BitStream@RakNet@@QAE_NAAUPlayerID@@@Z ; RakNet::BitStream::Read<PlayerID>
PUBLIC	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z		; RakNet::BitStream::Read<unsigned int>
PUBLIC	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z		; RakNet::BitStream::Read<unsigned short>
PUBLIC	??$Write@E@BitStream@RakNet@@QAEXE@Z		; RakNet::BitStream::Write<unsigned char>
PUBLIC	??_7PluginInterface@@6B@			; PluginInterface::`vftable'
PUBLIC	??_7NatPunchthrough@@6B@			; NatPunchthrough::`vftable'
PUBLIC	?__LINE__Var@?1??Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z@4JA ; `NatPunchthrough::Update'::`2'::__LINE__Var
PUBLIC	??_C@_1FI@IIECDPFG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAa?$AAt?$AAp?$AAu?$AAn?$AAc?$AAh@ ; `string'
PUBLIC	??_C@_1GO@IIGABNEL@?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAe?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?1??OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z@4JA ; `NatPunchthrough::OnCloseConnection'::`2'::__LINE__Var
PUBLIC	??_C@_1FE@CLNBPDHH@?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAp?$AAa?$AAs?$AAs?$AAw?$AAo@ ; `string'
PUBLIC	??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ ; `string'
PUBLIC	??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_R4PluginInterface@@6B@			; PluginInterface::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPluginInterface@@@8			; PluginInterface `RTTI Type Descriptor'
PUBLIC	??_R3PluginInterface@@8				; PluginInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PluginInterface@@8				; PluginInterface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PluginInterface@@8		; PluginInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NatPunchthrough@@6B@			; NatPunchthrough::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNatPunchthrough@@@8			; NatPunchthrough `RTTI Type Descriptor'
PUBLIC	??_R3NatPunchthrough@@8				; NatPunchthrough::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NatPunchthrough@@8				; NatPunchthrough::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NatPunchthrough@@8		; NatPunchthrough::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??8PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator==
EXTRN	??9PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator!=
EXTRN	?OnAttach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::OnAttach
EXTRN	?OnDetach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::OnDetach
EXTRN	?OnInitialize@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::OnInitialize
EXTRN	?Update@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::Update
EXTRN	?OnReceive@PluginInterface@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z:PROC ; PluginInterface::OnReceive
EXTRN	?OnDisconnect@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::OnDisconnect
EXTRN	?OnCloseConnection@PluginInterface@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z:PROC ; PluginInterface::OnCloseConnection
EXTRN	?OnDirectSocketSend@PluginInterface@@UAEXPBDIUPlayerID@@@Z:PROC ; PluginInterface::OnDirectSocketSend
EXTRN	?OnDirectSocketReceive@PluginInterface@@UAEXPBDIUPlayerID@@@Z:PROC ; PluginInterface::OnDirectSocketReceive
EXTRN	?OnInternalPacket@PluginInterface@@UAEXPAUInternalPacket@@IUPlayerID@@I_N@Z:PROC ; PluginInterface::OnInternalPacket
EXTRN	__wassert:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	?GetTime@RakNet@@YAIXZ:PROC			; RakNet::GetTime
EXTRN	??0BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::BitStream
EXTRN	??0BitStream@RakNet@@QAE@PAEI_N@Z:PROC		; RakNet::BitStream::BitStream
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?Reset@BitStream@RakNet@@QAEXXZ:PROC		; RakNet::BitStream::Reset
EXTRN	?IgnoreBits@BitStream@RakNet@@QAEXH@Z:PROC	; RakNet::BitStream::IgnoreBits
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z:PROC	; RakNet::BitStream::WriteBits
EXTRN	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z:PROC	; RakNet::BitStream::ReadBits
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@NatPunchthrough@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NatPunchthrough@@8 DD FLAT:??_R0?AVNatPunchthrough@@@8 ; NatPunchthrough::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NatPunchthrough@@8
rdata$r	ENDS
;	COMDAT ??_R2NatPunchthrough@@8
rdata$r	SEGMENT
??_R2NatPunchthrough@@8 DD FLAT:??_R1A@?0A@EA@NatPunchthrough@@8 ; NatPunchthrough::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PluginInterface@@8
rdata$r	ENDS
;	COMDAT ??_R3NatPunchthrough@@8
rdata$r	SEGMENT
??_R3NatPunchthrough@@8 DD 00H				; NatPunchthrough::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2NatPunchthrough@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNatPunchthrough@@@8
data$r	SEGMENT
??_R0?AVNatPunchthrough@@@8 DD FLAT:??_7type_info@@6B@	; NatPunchthrough `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNatPunchthrough@@', 00H
data$r	ENDS
;	COMDAT ??_R4NatPunchthrough@@6B@
rdata$r	SEGMENT
??_R4NatPunchthrough@@6B@ DD 00H			; NatPunchthrough::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNatPunchthrough@@@8
	DD	FLAT:??_R3NatPunchthrough@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PluginInterface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PluginInterface@@8 DD FLAT:??_R0?AVPluginInterface@@@8 ; PluginInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PluginInterface@@8
rdata$r	ENDS
;	COMDAT ??_R2PluginInterface@@8
rdata$r	SEGMENT
??_R2PluginInterface@@8 DD FLAT:??_R1A@?0A@EA@PluginInterface@@8 ; PluginInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PluginInterface@@8
rdata$r	SEGMENT
??_R3PluginInterface@@8 DD 00H				; PluginInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PluginInterface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPluginInterface@@@8
data$r	SEGMENT
??_R0?AVPluginInterface@@@8 DD FLAT:??_7type_info@@6B@	; PluginInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPluginInterface@@', 00H
data$r	ENDS
;	COMDAT ??_R4PluginInterface@@6B@
rdata$r	SEGMENT
??_R4PluginInterface@@6B@ DD 00H			; PluginInterface::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPluginInterface@@@8
	DD	FLAT:??_R3PluginInterface@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '>', 00H, '=', 00H, 'n', 00H, 'u', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
CONST	SEGMENT
??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'd', 00H, 's', 00H, '_'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@CLNBPDHH@?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAp?$AAa?$AAs?$AAs?$AAw?$AAo@
CONST	SEGMENT
??_C@_1FE@CLNBPDHH@?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAp?$AAa?$AAs?$AAs?$AAw?$AAo@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'R', 00H, 'e', 00H, 'q', 00H, 'u'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'L', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, '[', 00H, 'i', 00H, ']', 00H, '-', 00H, '>', 00H, 'p'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, 'w', 00H, 'o', 00H, 'r', 00H
	DB	'd', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, '=', 00H, '='
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z@4JA DD 0e9H ; `NatPunchthrough::OnCloseConnection'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GO@IIGABNEL@?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAe?$AAr@
CONST	SEGMENT
??_C@_1GO@IIGABNEL@?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAe?$AAr@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'R', 00H, 'e', 00H, 'q', 00H, 'u'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'L', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, '[', 00H, 'i', 00H, ']', 00H, '-', 00H, '>', 00H, 's'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '!', 00H
	DB	'=', 00H, 'U', 00H, 'N', 00H, 'A', 00H, 'S', 00H, 'S', 00H, 'I'
	DB	00H, 'G', 00H, 'N', 00H, 'E', 00H, 'D', 00H, '_', 00H, 'P', 00H
	DB	'L', 00H, 'A', 00H, 'Y', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'I'
	DB	00H, 'D', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@IIECDPFG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAa?$AAt?$AAp?$AAu?$AAn?$AAc?$AAh@
CONST	SEGMENT
??_C@_1FI@IIECDPFG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAa?$AAt?$AAp?$AAu?$AAn?$AAc?$AAh@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'p', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 'h', 00H, 't', 00H
	DB	'h', 00H, 'r', 00H, 'o', 00H, 'u', 00H, 'g', 00H, 'h', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z@4JA DD 061H ; `NatPunchthrough::Update'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7NatPunchthrough@@6B@
CONST	SEGMENT
??_7NatPunchthrough@@6B@ DD FLAT:??_R4NatPunchthrough@@6B@ ; NatPunchthrough::`vftable'
	DD	FLAT:?OnAttach@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnDetach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnInitialize@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnReceive@NatPunchthrough@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z
	DD	FLAT:?OnDisconnect@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z
	DD	FLAT:?OnDirectSocketSend@PluginInterface@@UAEXPBDIUPlayerID@@@Z
	DD	FLAT:?OnDirectSocketReceive@PluginInterface@@UAEXPBDIUPlayerID@@@Z
	DD	FLAT:?OnInternalPacket@PluginInterface@@UAEXPAUInternalPacket@@IUPlayerID@@I_N@Z
CONST	ENDS
;	COMDAT ??_7PluginInterface@@6B@
CONST	SEGMENT
??_7PluginInterface@@6B@ DD FLAT:??_R4PluginInterface@@6B@ ; PluginInterface::`vftable'
	DD	FLAT:?OnAttach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnDetach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnInitialize@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?Update@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnReceive@PluginInterface@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z
	DD	FLAT:?OnDisconnect@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnCloseConnection@PluginInterface@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z
	DD	FLAT:?OnDirectSocketSend@PluginInterface@@UAEXPBDIUPlayerID@@@Z
	DD	FLAT:?OnDirectSocketReceive@PluginInterface@@UAEXPBDIUPlayerID@@@Z
	DD	FLAT:?OnInternalPacket@PluginInterface@@UAEXPAUInternalPacket@@IUPlayerID@@I_N@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z$0
__ehfuncinfo$?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z$0
__ehfuncinfo$?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z$1
__ehfuncinfo$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z$0
__ehfuncinfo$?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z$0
__ehfuncinfo$?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z$0
__ehfuncinfo$?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1NatPunchthrough@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1NatPunchthrough@@QAE@XZ$0
__ehfuncinfo$??1NatPunchthrough@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1NatPunchthrough@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@E@BitStream@RakNet@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 1
??$Write@E@BitStream@RakNet@@QAEXE@Z PROC		; RakNet::BitStream::Write<unsigned char>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@E@BitStream@RakNet@@QAEXE@Z ENDP		; RakNet::BitStream::Write<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@G@BitStream@RakNet@@QAE_NAAG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@G@BitStream@RakNet@@QAE_NAAG@Z PROC		; RakNet::BitStream::Read<unsigned short>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@G@BitStream@RakNet@@QAE_NAAG@Z ENDP		; RakNet::BitStream::Read<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@I@BitStream@RakNet@@QAE_NAAI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@I@BitStream@RakNet@@QAE_NAAI@Z PROC		; RakNet::BitStream::Read<unsigned int>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@I@BitStream@RakNet@@QAE_NAAI@Z ENDP		; RakNet::BitStream::Read<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@UPlayerID@@@BitStream@RakNet@@QAE_NAAUPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@UPlayerID@@@BitStream@RakNet@@QAE_NAAUPlayerID@@@Z PROC ; RakNet::BitStream::Read<PlayerID>, COMDAT
; _this$ = ecx

; 1035 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1036 : 		Read(var.binaryAddress);

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z	; RakNet::BitStream::Read<unsigned int>

; 1037 : 		return Read(var.port);

	mov	eax, DWORD PTR _var$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 1038 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@UPlayerID@@@BitStream@RakNet@@QAE_NAAUPlayerID@@@Z ENDP ; RakNet::BitStream::Read<PlayerID>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@G@BitStream@RakNet@@QAEXG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 2
??$Write@G@BitStream@RakNet@@QAEXG@Z PROC		; RakNet::BitStream::Write<unsigned short>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	16					; 00000010H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	16					; 00000010H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@G@BitStream@RakNet@@QAEXG@Z ENDP		; RakNet::BitStream::Write<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@I@BitStream@RakNet@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@I@BitStream@RakNet@@QAEXI@Z PROC		; RakNet::BitStream::Write<unsigned int>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@I@BitStream@RakNet@@QAEXI@Z ENDP		; RakNet::BitStream::Write<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@UPlayerID@@@BitStream@RakNet@@QAEXUPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 6
??$Write@UPlayerID@@@BitStream@RakNet@@QAEXUPlayerID@@@Z PROC ; RakNet::BitStream::Write<PlayerID>, COMDAT
; _this$ = ecx

; 765  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 766  : 		Write(var.binaryAddress);

	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>

; 767  : 		Write(var.port);

	movzx	eax, WORD PTR _var$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$Write@G@BitStream@RakNet@@QAEXG@Z	; RakNet::BitStream::Write<unsigned short>

; 768  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$Write@UPlayerID@@@BitStream@RakNet@@QAEXUPlayerID@@@Z ENDP ; RakNet::BitStream::Write<PlayerID>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Clear@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEX_N@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
_doNotDeallocate$ = 8					; size = 1
?Clear@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEX_N@Z PROC ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Clear, COMDAT
; _this$ = ecx

; 379  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Clear

; 381  : 			return;

	jmp	SHORT $LN3@Clear
$LN2@Clear:

; 382  : 
; 383  : 		if (allocation_size>512 && doNotDeallocate==false)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 512			; 00000200H
	jbe	SHORT $LN1@Clear
	movzx	eax, BYTE PTR _doNotDeallocate$[ebp]
	test	eax, eax
	jne	SHORT $LN1@Clear

; 384  : 		{
; 385  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 386  : 			allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 387  : 			listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@Clear:

; 388  : 		}
; 389  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@Clear:

; 390  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEX_N@Z ENDP ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ PROC ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size, COMDAT
; _this$ = ecx

; 373  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 		return list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 375  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ENDP ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Del@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = 8						; size = 4
?Del@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z PROC ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Del, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 354  : 		// Delete the last elements on the list.  No compression needed
; 355  : #ifdef _DEBUG
; 356  : 		assert(list_size>=num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN3@Del
	push	356					; 00000164H
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Del:

; 357  : #endif
; 358  : 		list_size-=num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 359  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Del@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ENDP ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z PROC ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::RemoveAtIndex, COMDAT
; _this$ = ecx

; 333  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 334  : #ifdef _DEBUG
; 335  : 		assert( position < list_size );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN4@RemoveAtIn
	push	335					; 0000014fH
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@RemoveAtIn:

; 336  : #endif
; 337  : 
; 338  : 		if ( position < list_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@RemoveAtIn

; 339  : 		{
; 340  : 			// Compress the array
; 341  : 			/*
; 342  : 			for ( unsigned int counter = position; counter < list_size - 1 ; ++counter )
; 343  : 			listArray[ counter ] = listArray[ counter + 1 ];
; 344  : 			*/
; 345  : 			memmove(listArray+position, listArray+position+1, (list_size-1-position) * sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	sub	ecx, DWORD PTR _position$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _position$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _position$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 346  : 
; 347  : 			Del();

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Del@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Del
$LN2@RemoveAtIn:

; 348  : 		}
; 349  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ENDP ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::RemoveAtIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Insert@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXQAUConnectionRequest@NatPunchthrough@@@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_array$3 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Insert@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXQAUConnectionRequest@NatPunchthrough@@@Z PROC ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Insert, COMDAT
; _this$ = ecx

; 242  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 		// Reallocate list if necessary
; 244  : 
; 245  : 		if ( list_size == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@Insert

; 246  : 		{
; 247  : 			// allocate twice the currently allocated memory
; 248  : 			list_type * new_array;
; 249  : 
; 250  : 			if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Insert

; 251  : 				allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 16			; 00000010H

; 252  : 			else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 253  : 				allocation_size *= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@Insert:

; 254  : 
; 255  : 			new_array = new list_type [ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _new_array$3[ebp], eax

; 256  : 
; 257  : 			// copy old array over
; 258  : 			//	for ( unsigned int counter = 0; counter < list_size; ++counter )
; 259  : 			//		new_array[ counter ] = listArray[ counter ];
; 260  : 
; 261  : 			// Don't call constructors, assignment operators, etc.
; 262  : 			memcpy(new_array, listArray, list_size*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _new_array$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 263  : 
; 264  : 			// set old array to point to the newly allocated and twice as large array
; 265  : 			delete[] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 266  : 
; 267  : 			listArray = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$3[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Insert:

; 268  : 		}
; 269  : 
; 270  : 		// Insert the new item at the correct spot
; 271  : 		listArray[ list_size ] = input;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 272  : 
; 273  : 		++list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 274  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Insert@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXQAUConnectionRequest@NatPunchthrough@@@Z ENDP ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z PROC ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[], COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : #ifdef _DEBUG
; 187  : 		assert ( position < list_size );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@operator
	push	187					; 000000bbH
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 188  : #endif
; 189  : 		return listArray[ position ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _position$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ENDP ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??1?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::~List<NatPunchthrough::ConnectionRequest *>, COMDAT
; _this$ = ecx

; 121  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (allocation_size>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	SHORT $LN2@List

; 123  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@List:

; 124  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::~List<NatPunchthrough::ConnectionRequest *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??0?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::List<NatPunchthrough::ConnectionRequest *>, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 115  : 		listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 116  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::List<NatPunchthrough::ConnectionRequest *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?RemoveRequestByFacilitator@NatPunchthrough@@IAE?AW4PluginReceiveResult@@UPlayerID@@@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
?RemoveRequestByFacilitator@NatPunchthrough@@IAE?AW4PluginReceiveResult@@UPlayerID@@@Z PROC ; NatPunchthrough::RemoveRequestByFacilitator, COMDAT
; _this$ = ecx

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 	unsigned i;
; 278  : 	i=0;

	mov	DWORD PTR _i$[ebp], 0
$LN4@RemoveRequ:

; 279  : 	while (i < connectionRequestList.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN3@RemoveRequ

; 280  : 	{
; 281  : 		if (connectionRequestList[i]->facilitator==playerId)

	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 15					; 0000000fH
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@RemoveRequ

; 282  : 		{
; 283  : 			delete [] connectionRequestList[i]->passwordData;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+21]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 284  : 			delete connectionRequestList[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 285  : 			connectionRequestList.RemoveAtIndex(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::RemoveAtIndex

; 286  : 			return RR_CONTINUE_PROCESSING;

	mov	eax, 1
	jmp	SHORT $LN5@RemoveRequ

; 287  : 		}
; 288  : 		else

	jmp	SHORT $LN1@RemoveRequ
$LN2@RemoveRequ:

; 289  : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN1@RemoveRequ:

; 290  : 	}

	jmp	$LN4@RemoveRequ
$LN3@RemoveRequ:

; 291  : 	return RR_STOP_PROCESSING_AND_DEALLOCATE;

	xor	eax, eax
$LN5@RemoveRequ:

; 292  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?RemoveRequestByFacilitator@NatPunchthrough@@IAE?AW4PluginReceiveResult@@UPlayerID@@@Z ENDP ; NatPunchthrough::RemoveRequestByFacilitator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
_TEXT	SEGMENT
$T2 = -552						; size = 4
_connectionRequest$ = -348				; size = 4
_sender$ = -336						; size = 6
_nextActionTime$ = -320					; size = 4
_inBitstream$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_peer$ = 8						; size = 4
_packet$ = 12						; size = 4
?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z PROC ; NatPunchthrough::OnSendOfflineMessageAtTime, COMDAT
; _this$ = ecx

; 356  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 357  : 	RakNet::BitStream inBitstream(packet->data, packet->length, false);

	push	0
	mov	eax, DWORD PTR _packet$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _packet$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??0BitStream@RakNet@@QAE@PAEI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 358  : 	RakNetTime nextActionTime;
; 359  : 	inBitstream.IgnoreBits(8);

	push	8
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	?IgnoreBits@BitStream@RakNet@@QAEXH@Z	; RakNet::BitStream::IgnoreBits

; 360  : 	PlayerID sender;
; 361  : 	inBitstream.Read(nextActionTime);

	lea	eax, DWORD PTR _nextActionTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z	; RakNet::BitStream::Read<unsigned int>

; 362  : 	inBitstream.IgnoreBits(8);

	push	8
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	?IgnoreBits@BitStream@RakNet@@QAEXH@Z	; RakNet::BitStream::IgnoreBits

; 363  : 	if (inBitstream.Read(sender)==false)

	lea	eax, DWORD PTR _sender$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??$Read@UPlayerID@@@BitStream@RakNet@@QAE_NAAUPlayerID@@@Z ; RakNet::BitStream::Read<PlayerID>
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@OnSendOffl

; 364  : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN2@OnSendOffl
$LN1@OnSendOffl:

; 365  : 
; 366  : 	NatPunchthrough::ConnectionRequest *connectionRequest = new NatPunchthrough::ConnectionRequest;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _connectionRequest$[ebp], eax

; 367  : 	connectionRequest->receiver=UNASSIGNED_PLAYER_ID;

	push	OFFSET _UNASSIGNED_PLAYER_ID
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	add	ecx, 5
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 368  : 	connectionRequest->facilitator=packet->playerId;

	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	add	ecx, 15					; 0000000fH
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 369  : 	connectionRequest->sender=sender;

	lea	eax, DWORD PTR _sender$[ebp]
	push	eax
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	add	ecx, 29					; 0000001dH
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 370  : 	connectionRequest->passwordData = 0;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	DWORD PTR [eax+21], 0

; 371  : 	connectionRequest->passwordDataLength=0;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	DWORD PTR [eax+25], 0

; 372  : 	connectionRequest->facilitatingConnection=false;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	BYTE PTR [eax+4], 0

; 373  : 	connectionRequest->nextActionTime=nextActionTime;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	ecx, DWORD PTR _nextActionTime$[ebp]
	mov	DWORD PTR [eax], ecx

; 374  : 	connectionRequest->pingCount=0;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	BYTE PTR [eax+35], 0

; 375  : 	connectionRequest->timeoutTime=RakNet::GetTime()+30000;

	call	?GetTime@RakNet@@YAIXZ			; RakNet::GetTime
	add	eax, 30000				; 00007530H
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	mov	DWORD PTR [ecx+11], eax

; 376  : 	connectionRequestList.Insert(connectionRequest);

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Insert@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXQAUConnectionRequest@NatPunchthrough@@@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Insert

; 377  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN2@OnSendOffl:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@OnSendOffl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN10@OnSendOffl:
	DD	3
	DD	$LN9@OnSendOffl
$LN9@OnSendOffl:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN5@OnSendOffl
	DD	-320					; fffffec0H
	DD	4
	DD	$LN6@OnSendOffl
	DD	-336					; fffffeb0H
	DD	6
	DD	$LN7@OnSendOffl
$LN7@OnSendOffl:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN6@OnSendOffl:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN5@OnSendOffl:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ENDP ; NatPunchthrough::OnSendOfflineMessageAtTime
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
_TEXT	SEGMENT
_inBitstream$2 = -320					; size = 273
_i$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_peer$ = 8						; size = 4
_packet$ = 12						; size = 4
?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z PROC ; NatPunchthrough::OnConnectAtTime, COMDAT
; _this$ = ecx

; 336  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-516]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 	// Find this connection request and set the connection timer.
; 338  : 	unsigned i;
; 339  : 	for (i=0; i < connectionRequestList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@OnConnectA
$LN3@OnConnectA:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@OnConnectA:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN5@OnConnectA

; 340  : 	{
; 341  : 		if (connectionRequestList[i]->nextActionTime==0 &&
; 342  : 			connectionRequestList[i]->facilitatingConnection==false &&
; 343  : 			connectionRequestList[i]->facilitator==packet->playerId)

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	jne	$LN1@OnConnectA
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	jne	$LN1@OnConnectA
	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 15					; 0000000fH
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@OnConnectA

; 344  : 		{
; 345  : 			RakNet::BitStream inBitstream(packet->data, packet->length, false);

	push	0
	mov	eax, DWORD PTR _packet$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _packet$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _inBitstream$2[ebp]
	call	??0BitStream@RakNet@@QAE@PAEI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 346  : 			inBitstream.IgnoreBits(8);

	push	8
	lea	ecx, DWORD PTR _inBitstream$2[ebp]
	call	?IgnoreBits@BitStream@RakNet@@QAEXH@Z	; RakNet::BitStream::IgnoreBits

; 347  : 			inBitstream.Read(connectionRequestList[i]->nextActionTime);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _inBitstream$2[ebp]
	call	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z	; RakNet::BitStream::Read<unsigned int>

; 348  : 			return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBitstream$2[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	SHORT $LN5@OnConnectA
$LN1@OnConnectA:

; 349  : 		}
; 350  : 	}

	jmp	$LN3@OnConnectA
$LN5@OnConnectA:

; 351  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@OnConnectA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 516				; 00000204H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN11@OnConnectA:
	DD	1
	DD	$LN10@OnConnectA
$LN10@OnConnectA:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN8@OnConnectA
$LN8@OnConnectA:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _inBitstream$2[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-520]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ENDP ; NatPunchthrough::OnConnectAtTime
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
_TEXT	SEGMENT
$T2 = -824						; size = 4
_connectionRequest$3 = -620				; size = 4
_outBitstream$ = -608					; size = 273
_inBitstream$ = -324					; size = 273
_target$ = -40						; size = 6
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_peer$ = 8						; size = 4
_packet$ = 12						; size = 4
?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z PROC ; NatPunchthrough::OnPunchthroughRequest, COMDAT
; _this$ = ecx

; 297  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 816				; 00000330H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-828]
	mov	ecx, 204				; 000000ccH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 298  : 	if (allowFacilitation==false)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN4@OnPunchthr

; 299  : 		return;

	jmp	$LN5@OnPunchthr
$LN4@OnPunchthr:

; 300  : 
; 301  : 	PlayerID target;
; 302  : 	RakNet::BitStream inBitstream(packet->data, packet->length, false);

	push	0
	mov	eax, DWORD PTR _packet$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _packet$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??0BitStream@RakNet@@QAE@PAEI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 303  : 	RakNet::BitStream outBitstream;

	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 304  : 	inBitstream.IgnoreBits(8);

	push	8
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	?IgnoreBits@BitStream@RakNet@@QAEXH@Z	; RakNet::BitStream::IgnoreBits

; 305  : 	if (inBitstream.Read(target)==false)

	lea	eax, DWORD PTR _target$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??$Read@UPlayerID@@@BitStream@RakNet@@QAE_NAAUPlayerID@@@Z ; RakNet::BitStream::Read<PlayerID>
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@OnPunchthr

; 306  : 		return;

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN5@OnPunchthr
$LN3@OnPunchthr:

; 307  : 	if (rakPeer->GetIndexFromPlayerID(target)==-1)

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _target$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+5]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+5]
	mov	edx, DWORD PTR [eax+92]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN2@OnPunchthr

; 308  : 	{
; 309  : 		outBitstream.Write((unsigned char)ID_NAT_TARGET_NOT_CONNECTED);

	push	81					; 00000051H
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 310  : 		outBitstream.Write(target);

	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _target$[ebp+4]
	mov	WORD PTR [eax+4], dx
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??$Write@UPlayerID@@@BitStream@RakNet@@QAEXUPlayerID@@@Z ; RakNet::BitStream::Write<PlayerID>

; 311  : 		rakPeer->Send(&outBitstream, HIGH_PRIORITY, RELIABLE, 0, packet->playerId, false);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	push	0
	push	2
	push	1
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 312  : 	}
; 313  : 	else

	jmp	$LN1@OnPunchthr
$LN2@OnPunchthr:

; 314  : 	{
; 315  : 		// Remember this connection request
; 316  : 		NatPunchthrough::ConnectionRequest *connectionRequest = new NatPunchthrough::ConnectionRequest;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _connectionRequest$3[ebp], eax

; 317  : 		connectionRequest->receiver=target;

	lea	eax, DWORD PTR _target$[ebp]
	push	eax
	mov	ecx, DWORD PTR _connectionRequest$3[ebp]
	add	ecx, 5
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 318  : 		connectionRequest->facilitator=UNASSIGNED_PLAYER_ID;

	push	OFFSET _UNASSIGNED_PLAYER_ID
	mov	ecx, DWORD PTR _connectionRequest$3[ebp]
	add	ecx, 15					; 0000000fH
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 319  : 		connectionRequest->passwordData = 0;

	mov	eax, DWORD PTR _connectionRequest$3[ebp]
	mov	DWORD PTR [eax+21], 0

; 320  : 		connectionRequest->sender=packet->playerId;

	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _connectionRequest$3[ebp]
	add	ecx, 29					; 0000001dH
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 321  : 		connectionRequest->passwordDataLength=0;

	mov	eax, DWORD PTR _connectionRequest$3[ebp]
	mov	DWORD PTR [eax+25], 0

; 322  : 		connectionRequest->facilitatingConnection=true;

	mov	eax, DWORD PTR _connectionRequest$3[ebp]
	mov	BYTE PTR [eax+4], 1

; 323  : 		connectionRequest->nextActionTime=RakNet::GetTime()+PING_INTERVAL;

	call	?GetTime@RakNet@@YAIXZ			; RakNet::GetTime
	add	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _connectionRequest$3[ebp]
	mov	DWORD PTR [ecx], eax

; 324  : 		connectionRequest->pingCount=1;

	mov	eax, DWORD PTR _connectionRequest$3[ebp]
	mov	BYTE PTR [eax+35], 1

; 325  : 		connectionRequest->timeoutTime=RakNet::GetTime()+30000;

	call	?GetTime@RakNet@@YAIXZ			; RakNet::GetTime
	add	eax, 30000				; 00007530H
	mov	ecx, DWORD PTR _connectionRequest$3[ebp]
	mov	DWORD PTR [ecx+11], eax

; 326  : 		connectionRequestList.Insert(connectionRequest);

	mov	eax, DWORD PTR _connectionRequest$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Insert@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXQAUConnectionRequest@NatPunchthrough@@@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Insert

; 327  : 
; 328  : 		rakPeer->Ping(connectionRequest->receiver);

	mov	eax, DWORD PTR _connectionRequest$3[ebp]
	add	eax, 5
	mov	esi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+5]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 329  : 		rakPeer->Ping(connectionRequest->sender);

	mov	eax, DWORD PTR _connectionRequest$3[ebp]
	add	eax, 29					; 0000001dH
	mov	esi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+5]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@OnPunchthr:

; 330  : 	}
; 331  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN5@OnPunchthr:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@OnPunchthr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 828				; 0000033cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@OnPunchthr:
	DD	3
	DD	$LN13@OnPunchthr
$LN13@OnPunchthr:
	DD	-40					; ffffffd8H
	DD	6
	DD	$LN9@OnPunchthr
	DD	-324					; fffffebcH
	DD	273					; 00000111H
	DD	$LN10@OnPunchthr
	DD	-608					; fffffda0H
	DD	273					; 00000111H
	DD	$LN11@OnPunchthr
$LN11@OnPunchthr:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN10@OnPunchthr:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN9@OnPunchthr:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _inBitstream$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__unwindfunclet$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z$1:
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-832]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ENDP ; NatPunchthrough::OnPunchthroughRequest
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
$T2 = -536						; size = 4
$T3 = -524						; size = 4
_outBitstream$4 = -320					; size = 273
_i$5 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_peer$ = 8						; size = 4
_playerId$ = 12						; size = 6
?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z PROC ; NatPunchthrough::OnCloseConnection, COMDAT
; _this$ = ecx

; 233  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 528				; 00000210H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-540]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 	if (allowFacilitation==false)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN8@OnCloseCon

; 235  : 		return;

	jmp	$LN9@OnCloseCon
$LN8@OnCloseCon:

; 236  : 
; 237  : 	// If in ping mode, send ID_NAT_TARGET_CONNECTION_LOST
; 238  : 	if (connectionRequestList.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
	test	eax, eax
	je	$LN9@OnCloseCon

; 239  : 	{
; 240  : 		unsigned i;
; 241  : 		i=0;

	mov	DWORD PTR _i$5[ebp], 0
$LN6@OnCloseCon:

; 242  : 		while (i < connectionRequestList.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
	cmp	DWORD PTR _i$5[ebp], eax
	jae	$LN9@OnCloseCon

; 243  : 		{
; 244  : 			if (connectionRequestList[i]->facilitatingConnection &&
; 245  : 				(connectionRequestList[i]->receiver==playerId ||
; 246  : 				connectionRequestList[i]->sender==playerId))

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	je	$LN4@OnCloseCon
	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@OnCloseCon
	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	$LN4@OnCloseCon
$LN3@OnCloseCon:

; 247  : 			{
; 248  : 				// This field is not used by the facilitator.
; 249  : 				RakAssert(connectionRequestList[i]->passwordData==0);

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+21], 0
	je	SHORT $LN11@OnCloseCon
	mov	edx, DWORD PTR ?__LINE__Var@?1??OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z@4JA
	add	edx, 16					; 00000010H
	push	edx
	push	OFFSET ??_C@_1FI@IIECDPFG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAa?$AAt?$AAp?$AAu?$AAn?$AAc?$AAh@
	push	OFFSET ??_C@_1FE@CLNBPDHH@?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAp?$AAa?$AAs?$AAs?$AAw?$AAo@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@OnCloseCon:

; 250  : 
; 251  : 				if (connectionRequestList[i]->sender==playerId)

	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	$LN2@OnCloseCon

; 252  : 				{
; 253  : 					RakNet::BitStream outBitstream;

	lea	ecx, DWORD PTR _outBitstream$4[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 254  : 					outBitstream.Write((unsigned char)ID_NAT_TARGET_CONNECTION_LOST);

	push	82					; 00000052H
	lea	ecx, DWORD PTR _outBitstream$4[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 255  : 					outBitstream.Write(connectionRequestList[i]->receiver);

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	lea	ecx, DWORD PTR _outBitstream$4[ebp]
	call	??$Write@UPlayerID@@@BitStream@RakNet@@QAEXUPlayerID@@@Z ; RakNet::BitStream::Write<PlayerID>

; 256  : 					rakPeer->Send(&outBitstream, HIGH_PRIORITY, RELIABLE, 0, connectionRequestList[i]->sender, false);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	push	0
	push	2
	push	1
	lea	edx, DWORD PTR _outBitstream$4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+5]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+5]
	mov	edx, DWORD PTR [eax+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 257  : 				}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outBitstream$4[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN2@OnCloseCon:

; 258  : 
; 259  : 				delete [] connectionRequestList[i]->passwordData;

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+21]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 260  : 				delete connectionRequestList[i];

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 261  : 				connectionRequestList.RemoveAtIndex(i);

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::RemoveAtIndex

; 262  : 			}
; 263  : 			else

	jmp	SHORT $LN1@OnCloseCon
$LN4@OnCloseCon:

; 264  : 				i++;

	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN1@OnCloseCon:

; 265  : 		}

	jmp	$LN6@OnCloseCon
$LN9@OnCloseCon:

; 266  : 	}
; 267  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@OnCloseCon
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 540				; 0000021cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN16@OnCloseCon:
	DD	1
	DD	$LN15@OnCloseCon
$LN15@OnCloseCon:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN13@OnCloseCon
$LN13@OnCloseCon:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z$0:
	lea	ecx, DWORD PTR _outBitstream$4[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-544]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?OnCloseConnection@NatPunchthrough@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z ENDP ; NatPunchthrough::OnCloseConnection
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?OnDisconnect@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_peer$ = 8						; size = 4
?OnDisconnect@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z PROC ; NatPunchthrough::OnDisconnect, COMDAT
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 273  : 
; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?OnDisconnect@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z ENDP ; NatPunchthrough::OnDisconnect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?OnReceive@NatPunchthrough@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z
_TEXT	SEGMENT
tv78 = -220						; size = 4
_packetId$ = -17					; size = 1
_this$ = -8						; size = 4
_peer$ = 8						; size = 4
_packet$ = 12						; size = 4
?OnReceive@NatPunchthrough@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z PROC ; NatPunchthrough::OnReceive, COMDAT
; _this$ = ecx

; 199  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 200  : 	unsigned char packetId;
; 201  : 	if (packet->length>sizeof(MessageID)+sizeof(RakNetTime) && packet->data[0]==ID_TIMESTAMP)

	mov	eax, DWORD PTR _packet$[ebp]
	cmp	DWORD PTR [eax+8], 5
	jbe	SHORT $LN9@OnReceive
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _packet$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 36					; 00000024H
	jne	SHORT $LN9@OnReceive

; 202  : 		packetId=packet->data[sizeof(MessageID)+sizeof(RakNetTime)];

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _packet$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _packetId$[ebp], cl

; 203  : 	else

	jmp	SHORT $LN8@OnReceive
$LN9@OnReceive:

; 204  : 		packetId=packet->data[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _packet$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _packetId$[ebp], cl
$LN8@OnReceive:

; 205  : 
; 206  : 	switch (packetId) 

	movzx	eax, BYTE PTR _packetId$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR tv78[ebp]
	sub	ecx, 28					; 0000001cH
	mov	DWORD PTR tv78[ebp], ecx
	cmp	DWORD PTR tv78[ebp], 56			; 00000038H
	ja	$LN6@OnReceive
	mov	edx, DWORD PTR tv78[ebp]
	movzx	eax, BYTE PTR $LN12@OnReceive[edx]
	jmp	DWORD PTR $LN13@OnReceive[eax*4]
$LN5@OnReceive:

; 207  : 	{
; 208  : 	case ID_NAT_PUNCHTHROUGH_REQUEST:
; 209  : 		OnPunchthroughRequest(peer, packet);

	mov	eax, DWORD PTR _packet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _peer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnPunchthroughRequest@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ; NatPunchthrough::OnPunchthroughRequest

; 210  : 		return RR_STOP_PROCESSING_AND_DEALLOCATE; // Absorb

	xor	eax, eax
	jmp	$LN10@OnReceive
$LN4@OnReceive:

; 211  : 	case ID_NAT_TARGET_CONNECTION_LOST:
; 212  : 	case ID_NAT_TARGET_NOT_CONNECTED:
; 213  : 		// Sender only
; 214  : 		return RemoveRequestByFacilitator(packet->playerId);

	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveRequestByFacilitator@NatPunchthrough@@IAE?AW4PluginReceiveResult@@UPlayerID@@@Z ; NatPunchthrough::RemoveRequestByFacilitator
	jmp	SHORT $LN10@OnReceive
$LN3@OnReceive:

; 215  : 	case ID_NAT_CONNECT_AT_TIME:
; 216  : 		OnConnectAtTime(peer, packet);

	mov	eax, DWORD PTR _packet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _peer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnConnectAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ; NatPunchthrough::OnConnectAtTime

; 217  : 		return RR_STOP_PROCESSING_AND_DEALLOCATE; // Absorb

	xor	eax, eax
	jmp	SHORT $LN10@OnReceive
$LN2@OnReceive:

; 218  : 	case ID_NAT_SEND_OFFLINE_MESSAGE_AT_TIME:
; 219  : 		OnSendOfflineMessageAtTime(peer, packet);

	mov	eax, DWORD PTR _packet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _peer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnSendOfflineMessageAtTime@NatPunchthrough@@IAEXPAVRakPeerInterface@@PAUPacket@@@Z ; NatPunchthrough::OnSendOfflineMessageAtTime

; 220  : 		return RR_STOP_PROCESSING_AND_DEALLOCATE; // Absorb

	xor	eax, eax
	jmp	SHORT $LN10@OnReceive
$LN1@OnReceive:

; 221  : 	case ID_DISCONNECTION_NOTIFICATION:
; 222  : 	case ID_CONNECTION_LOST:
; 223  : 		OnCloseConnection(peer, packet->playerId);

	mov	eax, DWORD PTR _packet$[ebp]
	add	eax, 2
	mov	esi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _peer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 224  : 		return RR_CONTINUE_PROCESSING;

	mov	eax, 1
	jmp	SHORT $LN10@OnReceive
$LN6@OnReceive:

; 225  : 	}
; 226  : 
; 227  : 	return RR_CONTINUE_PROCESSING;

	mov	eax, 1
$LN10@OnReceive:

; 228  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@OnReceive:
	DD	$LN1@OnReceive
	DD	$LN5@OnReceive
	DD	$LN4@OnReceive
	DD	$LN3@OnReceive
	DD	$LN2@OnReceive
	DD	$LN6@OnReceive
$LN12@OnReceive:
	DB	0
	DB	5
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	2
	DB	3
	DB	4
?OnReceive@NatPunchthrough@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z ENDP ; NatPunchthrough::OnReceive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
_TEXT	SEGMENT
tv246 = -664						; size = 4
tv153 = -664						; size = 4
$T2 = -656						; size = 4
$T3 = -644						; size = 4
$T4 = -632						; size = 4
$T5 = -620						; size = 4
$T6 = -608						; size = 4
$T7 = -596						; size = 4
_delayTime$8 = -392					; size = 4
_senderPing$9 = -380					; size = 4
_receiverPing$10 = -368					; size = 4
_senderPing$11 = -356					; size = 4
_receiverPing$12 = -344					; size = 4
_i$13 = -332						; size = 4
_outBitstream$14 = -320					; size = 273
_time$15 = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_peer$ = 8						; size = 4
?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z PROC ; NatPunchthrough::Update, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 652				; 0000028cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-664]
	mov	ecx, 163				; 000000a3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	if (connectionRequestList.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
	test	eax, eax
	je	$LN18@Update

; 99   : 	{
; 100  : 		RakNetTime time = RakNet::GetTime();

	call	?GetTime@RakNet@@YAIXZ			; RakNet::GetTime
	mov	DWORD PTR _time$15[ebp], eax

; 101  : 		RakNet::BitStream outBitstream;

	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 102  : 		unsigned i;
; 103  : 		i=0;

	mov	DWORD PTR _i$13[ebp], 0
$LN25@Update:

; 104  : 		while (i < connectionRequestList.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
	cmp	DWORD PTR _i$13[ebp], eax
	jae	$LN16@Update

; 105  : 		{
; 106  : 			// Remove old connection requests that get no answer
; 107  : 			if (connectionRequestList[i]->timeoutTime < time)

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+11]
	cmp	edx, DWORD PTR _time$15[ebp]
	jae	SHORT $LN15@Update

; 108  : 			{
; 109  : 				delete [] connectionRequestList[i]->passwordData;

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+21]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 110  : 				delete connectionRequestList[i];

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 111  : 				connectionRequestList.RemoveAtIndex(i);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::RemoveAtIndex

; 112  : 				continue;

	jmp	$LN25@Update
$LN15@Update:

; 113  : 			}
; 114  : 			
; 115  : 			// If we are a facilitator, do pings
; 116  : 			if (connectionRequestList[i]->facilitatingConnection)

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+4]
	test	edx, edx
	je	$LN14@Update

; 117  : 			{
; 118  : 				if (time >= connectionRequestList[i]->nextActionTime )

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _time$15[ebp]
	cmp	edx, DWORD PTR [ecx]
	jb	$LN7@Update

; 119  : 				{
; 120  : 					if (connectionRequestList[i]->pingCount < PING_COUNT)

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+35]
	cmp	edx, 5
	jge	$LN12@Update

; 121  : 					{
; 122  : 						// Ping
; 123  : 						connectionRequestList[i]->pingCount++;

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 35					; 00000023H
	mov	DWORD PTR tv153[ebp], ecx
	mov	edx, DWORD PTR tv153[ebp]
	mov	al, BYTE PTR [edx]
	add	al, 1
	mov	ecx, DWORD PTR tv153[ebp]
	mov	BYTE PTR [ecx], al

; 124  : 						rakPeer->Ping(connectionRequestList[i]->receiver);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	mov	esi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 125  : 						rakPeer->Ping(connectionRequestList[i]->sender);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	mov	esi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 126  : 						connectionRequestList[i]->nextActionTime=time+PING_INTERVAL;

	mov	esi, DWORD PTR _time$15[ebp]
	add	esi, 100				; 00000064H
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
	jmp	$LN7@Update
$LN12@Update:

; 127  : 					}
; 128  : 					else if (connectionRequestList[i]->pingCount == PING_COUNT)

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+35]
	cmp	edx, 5
	jne	$LN10@Update

; 129  : 					{
; 130  : 						// Done pinging.  Wait till the next stage
; 131  : 						int receiverPing, senderPing;
; 132  : 						receiverPing=rakPeer->GetAveragePing(connectionRequestList[i]->receiver);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	mov	esi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _receiverPing$12[ebp], eax

; 133  : 						senderPing=rakPeer->GetAveragePing(connectionRequestList[i]->sender);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	mov	esi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _senderPing$11[ebp], eax

; 134  : 						if (receiverPing > senderPing)

	mov	eax, DWORD PTR _receiverPing$12[ebp]
	cmp	eax, DWORD PTR _senderPing$11[ebp]
	jle	SHORT $LN9@Update

; 135  : 							connectionRequestList[i]->nextActionTime=(RakNetTime)(receiverPing*SEND_TIMESTAMP_DELAY_PING_MULTIPLE);

	cvtsi2ss xmm0, DWORD PTR _receiverPing$12[ebp]
	mulss	xmm0, DWORD PTR _SEND_TIMESTAMP_DELAY_PING_MULTIPLE
	call	__ftoui3
	mov	esi, eax
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 136  : 						else

	jmp	SHORT $LN8@Update
$LN9@Update:

; 137  : 							connectionRequestList[i]->nextActionTime=(RakNetTime)(senderPing*SEND_TIMESTAMP_DELAY_PING_MULTIPLE);

	cvtsi2ss xmm0, DWORD PTR _senderPing$11[ebp]
	mulss	xmm0, DWORD PTR _SEND_TIMESTAMP_DELAY_PING_MULTIPLE
	call	__ftoui3
	mov	esi, eax
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi
$LN8@Update:

; 138  : 						connectionRequestList[i]->pingCount++;

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 35					; 00000023H
	mov	DWORD PTR tv246[ebp], ecx
	mov	edx, DWORD PTR tv246[ebp]
	mov	al, BYTE PTR [edx]
	add	al, 1
	mov	ecx, DWORD PTR tv246[ebp]
	mov	BYTE PTR [ecx], al

; 139  : 					}
; 140  : 					else

	jmp	$LN7@Update
$LN10@Update:

; 141  : 					{
; 142  : 						// Send the timestamped message to both systems so they send datagrams to each other simultaneously
; 143  : 						int receiverPing, senderPing;
; 144  : 						RakNetTime delayTime;
; 145  : 						receiverPing=rakPeer->GetAveragePing(connectionRequestList[i]->receiver);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	mov	esi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _receiverPing$10[ebp], eax

; 146  : 						senderPing=rakPeer->GetAveragePing(connectionRequestList[i]->sender);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	mov	esi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _senderPing$9[ebp], eax

; 147  : 						if (receiverPing > senderPing)

	mov	eax, DWORD PTR _receiverPing$10[ebp]
	cmp	eax, DWORD PTR _senderPing$9[ebp]
	jle	SHORT $LN6@Update

; 148  : 							delayTime=(RakNetTime)(receiverPing*SEND_PUNCHTHROUGH_DELAY_PING_MULTIPLE);

	cvtsi2ss xmm0, DWORD PTR _receiverPing$10[ebp]
	mulss	xmm0, DWORD PTR _SEND_PUNCHTHROUGH_DELAY_PING_MULTIPLE
	call	__ftoui3
	mov	DWORD PTR _delayTime$8[ebp], eax

; 149  : 						else

	jmp	SHORT $LN5@Update
$LN6@Update:

; 150  : 							delayTime=(RakNetTime)(senderPing*SEND_PUNCHTHROUGH_DELAY_PING_MULTIPLE);

	cvtsi2ss xmm0, DWORD PTR _senderPing$9[ebp]
	mulss	xmm0, DWORD PTR _SEND_PUNCHTHROUGH_DELAY_PING_MULTIPLE
	call	__ftoui3
	mov	DWORD PTR _delayTime$8[ebp], eax
$LN5@Update:

; 151  : 
; 152  : 						outBitstream.Reset();

	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	?Reset@BitStream@RakNet@@QAEXXZ		; RakNet::BitStream::Reset

; 153  : 						outBitstream.Write((MessageID)ID_TIMESTAMP);

	push	36					; 00000024H
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 154  : 						outBitstream.Write(time+delayTime);

	mov	eax, DWORD PTR _time$15[ebp]
	add	eax, DWORD PTR _delayTime$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>

; 155  : 						outBitstream.Write((MessageID)ID_NAT_CONNECT_AT_TIME);

	push	83					; 00000053H
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 156  : 						rakPeer->Send(&outBitstream, SYSTEM_PRIORITY, RELIABLE, 0, connectionRequestList[i]->sender, false);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	push	0
	push	2
	push	0
	lea	edx, DWORD PTR _outBitstream$14[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+5]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+5]
	mov	edx, DWORD PTR [eax+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 157  : 
; 158  : 						outBitstream.Reset();

	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	?Reset@BitStream@RakNet@@QAEXXZ		; RakNet::BitStream::Reset

; 159  : 						outBitstream.Write((MessageID)ID_TIMESTAMP);

	push	36					; 00000024H
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 160  : 						outBitstream.Write(time+delayTime);

	mov	eax, DWORD PTR _time$15[ebp]
	add	eax, DWORD PTR _delayTime$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>

; 161  : 						outBitstream.Write((MessageID)ID_NAT_SEND_OFFLINE_MESSAGE_AT_TIME);

	push	84					; 00000054H
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 162  : 						outBitstream.Write(connectionRequestList[i]->sender);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??$Write@UPlayerID@@@BitStream@RakNet@@QAEXUPlayerID@@@Z ; RakNet::BitStream::Write<PlayerID>

; 163  : 						rakPeer->Send(&outBitstream, SYSTEM_PRIORITY, RELIABLE, 0, connectionRequestList[i]->receiver, false);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	push	0
	push	2
	push	0
	lea	edx, DWORD PTR _outBitstream$14[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+5]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+5]
	mov	edx, DWORD PTR [eax+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 164  : 
; 165  : 						delete [] connectionRequestList[i]->passwordData;

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+21]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 166  : 						delete connectionRequestList[i];

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 167  : 						connectionRequestList.RemoveAtIndex(i);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::RemoveAtIndex

; 168  : 						continue;

	jmp	$LN25@Update
$LN7@Update:

; 169  : 					}
; 170  : 				}	
; 171  : 			}

	jmp	$LN3@Update
$LN14@Update:

; 172  : 			// Else not a facilitator.  If nextActionTime is non-zero, connect or send the offline message
; 173  : 			else if (connectionRequestList[i]->nextActionTime && time >= connectionRequestList[i]->nextActionTime)

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	je	$LN3@Update
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _time$15[ebp]
	cmp	edx, DWORD PTR [ecx]
	jb	$LN3@Update

; 174  : 			{
; 175  : 				if (connectionRequestList[i]->receiver!=UNASSIGNED_PLAYER_ID)

	push	OFFSET _UNASSIGNED_PLAYER_ID
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@Update

; 176  : 				{
; 177  : 					// Connect to this system.
; 178  : 					rakPeer->Connect(rakPeer->PlayerIDToDottedIP(connectionRequestList[i]->receiver), connectionRequestList[i]->receiver.port, connectionRequestList[i]->passwordData, connectionRequestList[i]->passwordDataLength);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+25]
	push	edx
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+21]
	push	edx
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+9]
	push	edx
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 5
	mov	edi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+5]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 179  : 				}
; 180  : 				else

	jmp	$LN1@Update
$LN2@Update:

; 181  : 				{
; 182  : 					RakAssert(connectionRequestList[i]->sender!=UNASSIGNED_PLAYER_ID);

	push	OFFSET _UNASSIGNED_PLAYER_ID
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN21@Update
	mov	edx, DWORD PTR ?__LINE__Var@?1??Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z@4JA
	add	edx, 85					; 00000055H
	push	edx
	push	OFFSET ??_C@_1FI@IIECDPFG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAa?$AAt?$AAp?$AAu?$AAn?$AAc?$AAh@
	push	OFFSET ??_C@_1GO@IIGABNEL@?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$FL?$AAi?$AA?$FN?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAe?$AAr@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN21@Update:

; 183  : 
; 184  : 					// Send offline message to this system, hopefully at the exact same time that system tries to connect to us.
; 185  : 					rakPeer->Ping(rakPeer->PlayerIDToDottedIP(connectionRequestList[i]->sender), connectionRequestList[i]->sender.port, false);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx+33]
	push	edx
	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 29					; 0000001dH
	mov	edi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR [ecx+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+5]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Update:

; 186  : 				}
; 187  : 
; 188  : 				delete [] connectionRequestList[i]->passwordData;

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+21]
	mov	DWORD PTR $T6[ebp], edx
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 189  : 				delete connectionRequestList[i];

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T7[ebp], ecx
	mov	edx, DWORD PTR $T7[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 190  : 				connectionRequestList.RemoveAtIndex(i);

	mov	eax, DWORD PTR _i$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?RemoveAtIndex@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXI@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::RemoveAtIndex

; 191  : 				continue;

	jmp	$LN25@Update
$LN3@Update:

; 192  : 			}
; 193  : 			
; 194  : 			i++;

	mov	eax, DWORD PTR _i$13[ebp]
	add	eax, 1
	mov	DWORD PTR _i$13[ebp], eax

; 195  : 		}

	jmp	$LN25@Update
$LN16@Update:

; 196  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN18@Update:

; 197  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 664				; 00000298H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN29@Update:
	DD	1
	DD	$LN28@Update
$LN28@Update:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN26@Update
$LN26@Update:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z$0:
	lea	ecx, DWORD PTR _outBitstream$14[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-668]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Update@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z ENDP ; NatPunchthrough::Update
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?OnAttach@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_peer$ = 8						; size = 4
?OnAttach@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z PROC ; NatPunchthrough::OnAttach, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	rakPeer=peer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _peer$[ebp]
	mov	DWORD PTR [eax+5], ecx

; 92   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?OnAttach@NatPunchthrough@@UAEXPAVRakPeerInterface@@@Z ENDP ; NatPunchthrough::OnAttach
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?Clear@NatPunchthrough@@QAEXXZ
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Clear@NatPunchthrough@@QAEXXZ PROC			; NatPunchthrough::Clear, COMDAT
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	unsigned i;
; 82   : 	for (i=0; i < connectionRequestList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Clear
$LN2@Clear:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Clear:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Size@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEIXZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN1@Clear

; 83   : 	{
; 84   : 		delete [] connectionRequestList[i]->passwordData;

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+21]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 85   : 		delete connectionRequestList[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??A?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QBEAAPAUConnectionRequest@NatPunchthrough@@I@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 86   : 	}

	jmp	SHORT $LN2@Clear
$LN1@Clear:

; 87   : 	connectionRequestList.Clear();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Clear@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEX_N@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Clear

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@NatPunchthrough@@QAEXXZ ENDP			; NatPunchthrough::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z
_TEXT	SEGMENT
$T2 = -548						; size = 4
$T3 = -536						; size = 4
$T4 = -521						; size = 1
_connectionRequest$ = -320				; size = 4
_outBitstream$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_receiver$ = 8						; size = 6
_passwordData$ = 16					; size = 4
_passwordDataLength$ = 20				; size = 4
_facilitator$ = 24					; size = 6
?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z PROC	; NatPunchthrough::Connect, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 540				; 0000021cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-552]
	mov	ecx, 135				; 00000087H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	if (rakPeer->GetIndexFromPlayerID(facilitator)==-1)

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _facilitator$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _facilitator$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+5]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+5]
	mov	edx, DWORD PTR [eax+92]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN3@Connect

; 49   : 		return false;

	xor	al, al
	jmp	$LN4@Connect
$LN3@Connect:

; 50   : 
; 51   : 	RakNet::BitStream outBitstream;

	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 52   : 	outBitstream.Write((unsigned char) ID_NAT_PUNCHTHROUGH_REQUEST);

	push	80					; 00000050H
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 53   : 	outBitstream.Write(receiver);

	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _receiver$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _receiver$[ebp+4]
	mov	WORD PTR [eax+4], dx
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??$Write@UPlayerID@@@BitStream@RakNet@@QAEXUPlayerID@@@Z ; RakNet::BitStream::Write<PlayerID>

; 54   : 
; 55   : 	// Remember this connection request
; 56   : 	NatPunchthrough::ConnectionRequest *connectionRequest = new NatPunchthrough::ConnectionRequest;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _connectionRequest$[ebp], eax

; 57   : 	connectionRequest->receiver=receiver;

	lea	eax, DWORD PTR _receiver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	add	ecx, 5
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 58   : 	connectionRequest->facilitator=facilitator;

	lea	eax, DWORD PTR _facilitator$[ebp]
	push	eax
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	add	ecx, 15					; 0000000fH
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 59   : 	if (passwordDataLength)

	cmp	DWORD PTR _passwordDataLength$[ebp], 0
	je	SHORT $LN2@Connect

; 60   : 	{
; 61   : 		connectionRequest->passwordData = new char [passwordDataLength];

	mov	eax, DWORD PTR _passwordDataLength$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+21], edx

; 62   : 		memcpy(connectionRequest->passwordData, passwordData, passwordDataLength);

	mov	eax, DWORD PTR _passwordDataLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _passwordData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _connectionRequest$[ebp]
	mov	eax, DWORD PTR [edx+21]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 63   : 	}
; 64   : 	else

	jmp	SHORT $LN1@Connect
$LN2@Connect:

; 65   : 		connectionRequest->passwordData = 0;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	DWORD PTR [eax+21], 0
$LN1@Connect:

; 66   : 	connectionRequest->sender=UNASSIGNED_PLAYER_ID;

	push	OFFSET _UNASSIGNED_PLAYER_ID
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	add	ecx, 29					; 0000001dH
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 67   : 	connectionRequest->passwordDataLength=passwordDataLength;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	ecx, DWORD PTR _passwordDataLength$[ebp]
	mov	DWORD PTR [eax+25], ecx

; 68   : 	connectionRequest->facilitator=facilitator;

	lea	eax, DWORD PTR _facilitator$[ebp]
	push	eax
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	add	ecx, 15					; 0000000fH
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 69   : 	connectionRequest->nextActionTime=0;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	DWORD PTR [eax], 0

; 70   : 	connectionRequest->facilitatingConnection=false;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	BYTE PTR [eax+4], 0

; 71   : 	connectionRequest->timeoutTime=RakNet::GetTime()+30000;

	call	?GetTime@RakNet@@YAIXZ			; RakNet::GetTime
	add	eax, 30000				; 00007530H
	mov	ecx, DWORD PTR _connectionRequest$[ebp]
	mov	DWORD PTR [ecx+11], eax

; 72   : 	connectionRequest->pingCount=0;

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	mov	BYTE PTR [eax+35], 0

; 73   : 	connectionRequestList.Insert(connectionRequest);

	mov	eax, DWORD PTR _connectionRequest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	?Insert@?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAEXQAUConnectionRequest@NatPunchthrough@@@Z ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::Insert

; 74   : 
; 75   : 	rakPeer->Send(&outBitstream, HIGH_PRIORITY, RELIABLE, 0, facilitator, false);

	mov	esi, esp
	push	0
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _facilitator$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _facilitator$[ebp+4]
	mov	WORD PTR [eax+4], dx
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _outBitstream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+5]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 76   : 
; 77   : 	return true;

	mov	BYTE PTR $T4[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	mov	al, BYTE PTR $T4[ebp]
$LN4@Connect:

; 78   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Connect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 552				; 00000228H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN10@Connect:
	DD	1
	DD	$LN9@Connect
$LN9@Connect:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN7@Connect
$LN7@Connect:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z$0:
	lea	ecx, DWORD PTR _outBitstream$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-556]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z ENDP	; NatPunchthrough::Connect
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?Connect@NatPunchthrough@@QAE_NPBDGPADHUPlayerID@@@Z
_TEXT	SEGMENT
_playerId$ = -24					; size = 6
_this$ = -8						; size = 4
_host$ = 8						; size = 4
_remotePort$ = 12					; size = 2
_passwordData$ = 16					; size = 4
_passwordDataLength$ = 20				; size = 4
_facilitator$ = 24					; size = 6
?Connect@NatPunchthrough@@QAE_NPBDGPADHUPlayerID@@@Z PROC ; NatPunchthrough::Connect, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	PlayerID playerId;
; 43   : 	rakPeer->IPToPlayerID(host, remotePort, &playerId);

	mov	esi, esp
	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	movzx	ecx, WORD PTR _remotePort$[ebp]
	push	ecx
	mov	edx, DWORD PTR _host$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+5]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+5]
	mov	edx, DWORD PTR [eax+188]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 44   : 	return Connect(playerId, passwordData, passwordDataLength, facilitator);

	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _facilitator$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _facilitator$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _passwordDataLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _passwordData$[ebp]
	push	ecx
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [edx+4], cx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Connect@NatPunchthrough@@QAE_NUPlayerID@@PADH0@Z ; NatPunchthrough::Connect

; 45   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Connect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	2
$LN5@Connect:
	DD	1
	DD	$LN4@Connect
$LN4@Connect:
	DD	-24					; ffffffe8H
	DD	6
	DD	$LN3@Connect
$LN3@Connect:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
?Connect@NatPunchthrough@@QAE_NPBDGPADHUPlayerID@@@Z ENDP ; NatPunchthrough::Connect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ?FacilitateConnections@NatPunchthrough@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_allow$ = 8						; size = 1
?FacilitateConnections@NatPunchthrough@@QAEX_N@Z PROC	; NatPunchthrough::FacilitateConnections, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	allowFacilitation=allow;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _allow$[ebp]
	mov	BYTE PTR [eax+4], cl

; 39   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?FacilitateConnections@NatPunchthrough@@QAEX_N@Z ENDP	; NatPunchthrough::FacilitateConnections
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ??1NatPunchthrough@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1NatPunchthrough@@QAE@XZ PROC				; NatPunchthrough::~NatPunchthrough, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1NatPunchthrough@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7NatPunchthrough@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 34   : 	Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@NatPunchthrough@@QAEXXZ		; NatPunchthrough::Clear

; 35   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??1?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::~List<NatPunchthrough::ConnectionRequest *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1NatPunchthrough@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	jmp	??1?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::~List<NatPunchthrough::ConnectionRequest *>
__ehhandler$??1NatPunchthrough@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1NatPunchthrough@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1NatPunchthrough@@QAE@XZ ENDP				; NatPunchthrough::~NatPunchthrough
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\natpunchthrough.cpp
;	COMDAT ??0NatPunchthrough@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0NatPunchthrough@@QAE@XZ PROC				; NatPunchthrough::NatPunchthrough, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PluginInterface@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7NatPunchthrough@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9
	call	??0?$List@PAUConnectionRequest@NatPunchthrough@@@DataStructures@@QAE@XZ ; DataStructures::List<NatPunchthrough::ConnectionRequest *>::List<NatPunchthrough::ConnectionRequest *>

; 29   : 	allowFacilitation=true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1

; 30   : 	rakPeer=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+5], 0

; 31   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0NatPunchthrough@@QAE@XZ ENDP				; NatPunchthrough::NatPunchthrough
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0PluginInterface@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0PluginInterface@@QAE@XZ PROC				; PluginInterface::PluginInterface, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PluginInterface@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PluginInterface@@QAE@XZ ENDP				; PluginInterface::PluginInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.h
;	COMDAT ??4PlayerID@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4PlayerID@@QAEAAU0@ABU0@@Z PROC			; PlayerID::operator=, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		binaryAddress = input.binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 76   : 		port = input.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 77   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PlayerID@@QAEAAU0@ABU0@@Z ENDP			; PlayerID::operator=
_TEXT	ENDS
END
