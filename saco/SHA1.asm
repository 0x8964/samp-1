; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\SHA1.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0CSHA1@@QAE@XZ				; CSHA1::CSHA1
PUBLIC	??1CSHA1@@UAE@XZ				; CSHA1::~CSHA1
PUBLIC	?Reset@CSHA1@@QAEXXZ				; CSHA1::Reset
PUBLIC	?Update@CSHA1@@QAEXPAEI@Z			; CSHA1::Update
PUBLIC	?HashFile@CSHA1@@QAE_NPAD@Z			; CSHA1::HashFile
PUBLIC	?Final@CSHA1@@QAEXXZ				; CSHA1::Final
PUBLIC	?ReportHash@CSHA1@@QAEXPADE@Z			; CSHA1::ReportHash
PUBLIC	?GetHash@CSHA1@@QAEXPAE@Z			; CSHA1::GetHash
PUBLIC	?GetHash@CSHA1@@QBEPAEXZ			; CSHA1::GetHash
PUBLIC	?Transform@CSHA1@@AAEXQAIQAE@Z			; CSHA1::Transform
PUBLIC	??_GCSHA1@@UAEPAXI@Z				; CSHA1::`scalar deleting destructor'
PUBLIC	??_7CSHA1@@6B@					; CSHA1::`vftable'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_01IFKFHFEL@?$IA?$AA@			; `string'
PUBLIC	??_C@_01LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_04JFFKLGJF@?$CF02X?$AA@			; `string'
PUBLIC	??_C@_05OFBGOFBN@?5?$CF02X?$AA@			; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	??_C@_03BCEHIGGF@?5?$CFu?$AA@			; `string'
PUBLIC	??_C@_0BM@DLILFBO@Error?3?5Unknown?5report?5type?$CB?$AA@ ; `string'
PUBLIC	??_R4CSHA1@@6B@					; CSHA1::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSHA1@@@8				; CSHA1 `RTTI Type Descriptor'
PUBLIC	??_R3CSHA1@@8					; CSHA1::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSHA1@@8					; CSHA1::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSHA1@@8				; CSHA1::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_sprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	??_ECSHA1@@UAEPAXI@Z:PROC			; CSHA1::`vector deleting destructor'
EXTRN	_div:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CSHA1@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSHA1@@8 DD FLAT:??_R0?AVCSHA1@@@8	; CSHA1::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSHA1@@8
rdata$r	ENDS
;	COMDAT ??_R2CSHA1@@8
rdata$r	SEGMENT
??_R2CSHA1@@8 DD FLAT:??_R1A@?0A@EA@CSHA1@@8		; CSHA1::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSHA1@@8
rdata$r	SEGMENT
??_R3CSHA1@@8 DD 00H					; CSHA1::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSHA1@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSHA1@@@8
data$r	SEGMENT
??_R0?AVCSHA1@@@8 DD FLAT:??_7type_info@@6B@		; CSHA1 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSHA1@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSHA1@@6B@
rdata$r	SEGMENT
??_R4CSHA1@@6B@ DD 00H					; CSHA1::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSHA1@@@8
	DD	FLAT:??_R3CSHA1@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BM@DLILFBO@Error?3?5Unknown?5report?5type?$CB?$AA@
CONST	SEGMENT
??_C@_0BM@DLILFBO@Error?3?5Unknown?5report?5type?$CB?$AA@ DB 'Error: Unkn'
	DB	'own report type!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCEHIGGF@?5?$CFu?$AA@
CONST	SEGMENT
??_C@_03BCEHIGGF@?5?$CFu?$AA@ DB ' %u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OFBGOFBN@?5?$CF02X?$AA@
CONST	SEGMENT
??_C@_05OFBGOFBN@?5?$CF02X?$AA@ DB ' %02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFFKLGJF@?$CF02X?$AA@
CONST	SEGMENT
??_C@_04JFFKLGJF@?$CF02X?$AA@ DB '%02X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_01LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IFKFHFEL@?$IA?$AA@
CONST	SEGMENT
??_C@_01IFKFHFEL@?$IA?$AA@ DB 080H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CSHA1@@6B@
CONST	SEGMENT
??_7CSHA1@@6B@ DD FLAT:??_R4CSHA1@@6B@			; CSHA1::`vftable'
	DD	FLAT:??_ECSHA1@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCSHA1@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCSHA1@@UAEPAXI@Z PROC				; CSHA1::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSHA1@@UAE@XZ			; CSHA1::~CSHA1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSHA1@@UAEPAXI@Z ENDP				; CSHA1::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ?Transform@CSHA1@@AAEXQAIQAE@Z
_TEXT	SEGMENT
tv3807 = -280						; size = 4
tv3759 = -280						; size = 4
tv3711 = -280						; size = 4
tv3663 = -280						; size = 4
tv3615 = -280						; size = 4
tv3567 = -280						; size = 4
tv3519 = -280						; size = 4
tv3471 = -280						; size = 4
tv3423 = -280						; size = 4
tv3375 = -280						; size = 4
tv3327 = -280						; size = 4
tv3279 = -280						; size = 4
tv3231 = -280						; size = 4
tv3183 = -280						; size = 4
tv3135 = -280						; size = 4
tv3087 = -280						; size = 4
tv3039 = -280						; size = 4
tv2991 = -280						; size = 4
tv2943 = -280						; size = 4
tv2895 = -280						; size = 4
tv2847 = -280						; size = 4
tv2797 = -280						; size = 4
tv2747 = -280						; size = 4
tv2697 = -280						; size = 4
tv2647 = -280						; size = 4
tv2597 = -280						; size = 4
tv2547 = -280						; size = 4
tv2497 = -280						; size = 4
tv2447 = -280						; size = 4
tv2397 = -280						; size = 4
tv2347 = -280						; size = 4
tv2297 = -280						; size = 4
tv2247 = -280						; size = 4
tv2197 = -280						; size = 4
tv2147 = -280						; size = 4
tv2097 = -280						; size = 4
tv2047 = -280						; size = 4
tv1997 = -280						; size = 4
tv1947 = -280						; size = 4
tv1897 = -280						; size = 4
tv1847 = -280						; size = 4
tv1799 = -280						; size = 4
tv1751 = -280						; size = 4
tv1703 = -280						; size = 4
tv1655 = -280						; size = 4
tv1607 = -280						; size = 4
tv1559 = -280						; size = 4
tv1511 = -280						; size = 4
tv1463 = -280						; size = 4
tv1415 = -280						; size = 4
tv1367 = -280						; size = 4
tv1319 = -280						; size = 4
tv1271 = -280						; size = 4
tv1223 = -280						; size = 4
tv1175 = -280						; size = 4
tv1127 = -280						; size = 4
tv1079 = -280						; size = 4
tv1031 = -280						; size = 4
tv983 = -280						; size = 4
tv935 = -280						; size = 4
tv887 = -280						; size = 4
tv838 = -280						; size = 4
tv789 = -280						; size = 4
tv740 = -280						; size = 4
tv691 = -280						; size = 4
tv654 = -280						; size = 4
tv617 = -280						; size = 4
tv580 = -280						; size = 4
tv543 = -280						; size = 4
tv506 = -280						; size = 4
tv469 = -280						; size = 4
tv432 = -280						; size = 4
tv395 = -280						; size = 4
tv358 = -280						; size = 4
tv321 = -280						; size = 4
tv284 = -280						; size = 4
tv247 = -280						; size = 4
tv210 = -280						; size = 4
tv173 = -280						; size = 4
tv136 = -280						; size = 4
_block$ = -80						; size = 4
_e$ = -68						; size = 4
_d$ = -56						; size = 4
_c$ = -44						; size = 4
_b$ = -32						; size = 4
_a$ = -20						; size = 4
_this$ = -8						; size = 4
_state$ = 8						; size = 4
_buffer$ = 12						; size = 4
?Transform@CSHA1@@AAEXQAIQAE@Z PROC			; CSHA1::Transform, COMDAT
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 	unsigned int a = 0, b = 0, c = 0, d = 0, e = 0;

	mov	DWORD PTR _a$[ebp], 0
	mov	DWORD PTR _b$[ebp], 0
	mov	DWORD PTR _c$[ebp], 0
	mov	DWORD PTR _d$[ebp], 0
	mov	DWORD PTR _e$[ebp], 0

; 52   : 
; 53   : 	SHA1_WORKSPACE_BLOCK* block;
; 54   : 	// static unsigned char workspace[64];
; 55   : 	block = ( SHA1_WORKSPACE_BLOCK * ) workspace;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 116				; 00000074H
	mov	DWORD PTR _block$[ebp], eax

; 56   : 	memcpy( block, buffer, 64 );

	push	64					; 00000040H
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _block$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 57   : 
; 58   : 	// Copy state[] to working vars
; 59   : 	a = state[ 0 ];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _a$[ebp], eax

; 60   : 	b = state[ 1 ];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _b$[ebp], edx

; 61   : 	c = state[ 2 ];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _c$[ebp], edx

; 62   : 	d = state[ 3 ];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _d$[ebp], eax

; 63   : 	e = state[ 4 ];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _e$[ebp], edx

; 64   : 
; 65   : 	// 4 rounds of 20 operations each. Loop unrolled.
; 66   : 	R0( a, b, c, d, e, 0 );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv136[ebp], eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv136[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR tv136[ebp]
	add	ecx, DWORD PTR _e$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _e$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 67   : 	R0( e, a, b, c, d, 1 );

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	shr	eax, 8
	or	edx, eax
	and	edx, -16711936				; ff00ff00H
	mov	ecx, 4
	shl	ecx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	shl	ecx, 8
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	shr	eax, 24					; 00000018H
	or	ecx, eax
	and	ecx, 16711935				; 00ff00ffH
	or	edx, ecx
	mov	DWORD PTR tv173[ebp], edx
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv173[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR tv173[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 68   : 	R0( d, e, a, b, c, 2 );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	shr	eax, 8
	or	edx, eax
	and	edx, -16711936				; ff00ff00H
	mov	ecx, 4
	shl	ecx, 1
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	shl	ecx, 8
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	shr	eax, 24					; 00000018H
	or	ecx, eax
	and	ecx, 16711935				; 00ff00ffH
	or	edx, ecx
	mov	DWORD PTR tv210[ebp], edx
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv210[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv210[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 69   : 	R0( c, d, e, a, b, 3 );

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv247[ebp], eax
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv247[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR tv247[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 70   : 	R0( b, c, d, e, a, 4 );

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	shr	eax, 8
	or	edx, eax
	and	edx, -16711936				; ff00ff00H
	mov	ecx, 4
	shl	ecx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	shl	ecx, 8
	mov	eax, 4
	shl	eax, 2
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	shr	eax, 24					; 00000018H
	or	ecx, eax
	and	ecx, 16711935				; 00ff00ffH
	or	edx, ecx
	mov	DWORD PTR tv284[ebp], edx
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv284[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR tv284[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 71   : 	R0( a, b, c, d, e, 5 );

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 5
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv321[ebp], eax
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv321[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR tv321[ebp]
	add	ecx, DWORD PTR _e$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _e$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 72   : 	R0( e, a, b, c, d, 6 );

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 6
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv358[ebp], eax
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv358[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _e$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _e$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR tv358[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _d$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 73   : 	R0( d, e, a, b, c, 7 );

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 7
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv395[ebp], eax
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv395[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR tv395[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 74   : 	R0( c, d, e, a, b, 8 );

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	shl	edx, 24					; 00000018H
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	shr	eax, 8
	or	edx, eax
	and	edx, -16711936				; ff00ff00H
	mov	ecx, 4
	shl	ecx, 3
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	shl	ecx, 8
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	shr	eax, 24					; 00000018H
	or	ecx, eax
	and	ecx, 16711935				; 00ff00ffH
	or	edx, ecx
	mov	DWORD PTR tv432[ebp], edx
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv432[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv432[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 75   : 	R0( b, c, d, e, a, 9 );

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 9
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv469[ebp], eax
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv469[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR tv469[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 76   : 	R0( a, b, c, d, e, 10 );

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 10
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv506[ebp], eax
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv506[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR tv506[ebp]
	add	ecx, DWORD PTR _e$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _e$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 77   : 	R0( e, a, b, c, d, 11 );

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 11
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv543[ebp], eax
	mov	edx, 4
	imul	eax, edx, 11
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv543[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _e$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _e$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR tv543[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _d$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 78   : 	R0( d, e, a, b, c, 12 );

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 12
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv580[ebp], eax
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv580[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _d$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _d$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR tv580[ebp]
	add	ecx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 79   : 	R0( c, d, e, a, b, 13 );

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 13
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv617[ebp], eax
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv617[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR tv617[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 80   : 	R0( b, c, d, e, a, 14 );

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 14
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv654[ebp], eax
	mov	edx, 4
	imul	eax, edx, 14
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv654[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR tv654[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 81   : 	R0( a, b, c, d, e, 15 );

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shr	edx, 8
	or	eax, edx
	and	eax, -16711936				; ff00ff00H
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	shl	edx, 8
	mov	ecx, 4
	imul	ecx, ecx, 15
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	shr	ecx, 24					; 00000018H
	or	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	or	eax, edx
	mov	DWORD PTR tv691[ebp], eax
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv691[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	add	edx, DWORD PTR tv691[ebp]
	add	ecx, DWORD PTR _e$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _e$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 82   : 	R1( e, a, b, c, d, 16 );

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv740[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv740[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _e$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR tv740[ebp]
	add	eax, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1518500249]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 83   : 	R1( d, e, a, b, c, 17 );

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	shl	eax, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 14
	mov	eax, 4
	imul	eax, eax, 9
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv789[ebp], ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv789[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv789[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 84   : 	R1( c, d, e, a, b, 18 );

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	shl	edx, 2
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv838[ebp], ecx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv838[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _e$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _a$[ebp]
	add	edx, DWORD PTR tv838[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1518500249]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 85   : 	R1( b, c, d, e, a, 19 );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv887[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv887[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR tv887[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1518500249]
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 86   : 	R2( a, b, c, d, e, 20 );

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	shl	edx, 2
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	shl	eax, 1
	mov	edx, 4
	shl	edx, 0
	mov	ecx, 4
	imul	ecx, ecx, 12
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 6
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 2
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+ecx]
	shr	edx, 31					; 0000001fH
	or	eax, edx
	mov	DWORD PTR tv935[ebp], eax
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv935[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR tv935[ebp]
	add	eax, DWORD PTR _e$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1859775393]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 87   : 	R2( e, a, b, c, d, 21 );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 7
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv983[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv983[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR tv983[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 88   : 	R2( d, e, a, b, c, 22 );

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, 4
	imul	eax, eax, 14
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 6
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv1031[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv1031[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR tv1031[ebp]
	add	eax, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1859775393]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 89   : 	R2( c, d, e, a, b, 23 );

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 7
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 7
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv1079[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1079[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv1079[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 90   : 	R2( b, c, d, e, a, 24 );

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	shl	eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 5
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	imul	eax, eax, 10
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv1127[ebp], ecx
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1127[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR tv1127[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 91   : 	R2( a, b, c, d, e, 25 );

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 9
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1175[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1175[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv1175[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _e$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 92   : 	R2( e, a, b, c, d, 26 );

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 10
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1223[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1223[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR tv1223[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 93   : 	R2( d, e, a, b, c, 27 );

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv1271[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1271[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv1271[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 94   : 	R2( c, d, e, a, b, 28 );

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 12
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, 4
	shl	edx, 2
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 14
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1319[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1319[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv1319[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 95   : 	R2( b, c, d, e, a, 29 );

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1367[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1367[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR tv1367[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 96   : 	R2( a, b, c, d, e, 30 );

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 14
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, 4
	imul	edx, edx, 6
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 14
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1415[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1415[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv1415[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _e$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 97   : 	R2( e, a, b, c, d, 31 );

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 12
	mov	eax, 4
	imul	eax, eax, 7
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 15
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv1463[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv1463[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _e$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR tv1463[ebp]
	add	eax, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1859775393]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 98   : 	R2( d, e, a, b, c, 32 );

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv1511[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv1511[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	add	ecx, DWORD PTR tv1511[ebp]
	add	eax, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1859775393]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 99   : 	R2( c, d, e, a, b, 33 );

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	shl	eax, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 14
	mov	eax, 4
	imul	eax, eax, 9
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv1559[ebp], ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1559[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv1559[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 100  : 	R2( b, c, d, e, a, 34 );

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	shl	edx, 2
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1607[ebp], ecx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv1607[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _b$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _c$[ebp]
	xor	edx, DWORD PTR _d$[ebp]
	xor	edx, DWORD PTR _e$[ebp]
	add	edx, DWORD PTR tv1607[ebp]
	add	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1859775393]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 101  : 	R2( a, b, c, d, e, 35 );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1655[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1655[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv1655[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _e$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 102  : 	R2( e, a, b, c, d, 36 );

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	shl	edx, 2
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	shl	eax, 1
	mov	edx, 4
	shl	edx, 0
	mov	ecx, 4
	imul	ecx, ecx, 12
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 6
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 2
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+ecx]
	shr	edx, 31					; 0000001fH
	or	eax, edx
	mov	DWORD PTR tv1703[ebp], eax
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv1703[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _e$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _a$[ebp]
	xor	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR tv1703[ebp]
	add	eax, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1859775393]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 103  : 	R2( d, e, a, b, c, 37 );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 7
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv1751[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1751[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv1751[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 104  : 	R2( c, d, e, a, b, 38 );

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, 4
	imul	eax, eax, 14
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 6
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv1799[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv1799[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR tv1799[ebp]
	add	eax, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1859775393]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 105  : 	R2( b, c, d, e, a, 39 );

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 7
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 7
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv1847[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1847[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR tv1847[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax+1859775393]
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 106  : 	R3( a, b, c, d, e, 40 );

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	shl	eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 5
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	imul	eax, eax, 10
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv1897[ebp], ecx
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1897[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	or	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv1897[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 107  : 	R3( e, a, b, c, d, 41 );

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 9
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1947[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1947[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	or	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv1947[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 108  : 	R3( d, e, a, b, c, 42 );

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 10
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv1997[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv1997[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	or	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv1997[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 109  : 	R3( c, d, e, a, b, 43 );

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv2047[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2047[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	or	ecx, DWORD PTR _e$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2047[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 110  : 	R3( b, c, d, e, a, 44 );

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 12
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, 4
	shl	edx, 2
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 14
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2097[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2097[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	or	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2097[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 111  : 	R3( a, b, c, d, e, 45 );

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2147[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2147[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	or	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2147[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 112  : 	R3( e, a, b, c, d, 46 );

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 14
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, 4
	imul	edx, edx, 6
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 14
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2197[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2197[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	or	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2197[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 113  : 	R3( d, e, a, b, c, 47 );

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 12
	mov	eax, 4
	imul	eax, eax, 7
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 15
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv2247[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv2247[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _e$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	or	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	or	edx, ecx
	add	edx, DWORD PTR tv2247[ebp]
	add	eax, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [eax+edx-1894007588]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 114  : 	R3( c, d, e, a, b, 48 );

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv2297[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv2297[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR _d$[ebp]
	or	edx, DWORD PTR _e$[ebp]
	and	edx, DWORD PTR _a$[ebp]
	or	edx, ecx
	add	edx, DWORD PTR tv2297[ebp]
	add	eax, DWORD PTR _b$[ebp]
	lea	eax, DWORD PTR [eax+edx-1894007588]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 115  : 	R3( b, c, d, e, a, 49 );

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	shl	eax, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 14
	mov	eax, 4
	imul	eax, eax, 9
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv2347[ebp], ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2347[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	or	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2347[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 116  : 	R3( a, b, c, d, e, 50 );

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	shl	edx, 2
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2397[ebp], ecx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv2397[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _a$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _a$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	or	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	or	eax, edx
	add	eax, DWORD PTR tv2397[ebp]
	add	ecx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [ecx+eax-1894007588]
	mov	DWORD PTR _e$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 117  : 	R3( e, a, b, c, d, 51 );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2447[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2447[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	or	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2447[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 118  : 	R3( d, e, a, b, c, 52 );

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	shl	edx, 2
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	shl	eax, 1
	mov	edx, 4
	shl	edx, 0
	mov	ecx, 4
	imul	ecx, ecx, 12
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 6
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 2
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+ecx]
	shr	edx, 31					; 0000001fH
	or	eax, edx
	mov	DWORD PTR tv2497[ebp], eax
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv2497[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _d$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _e$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _e$[ebp]
	or	edx, DWORD PTR _a$[ebp]
	and	edx, DWORD PTR _b$[ebp]
	or	edx, ecx
	add	edx, DWORD PTR tv2497[ebp]
	add	eax, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [eax+edx-1894007588]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 119  : 	R3( c, d, e, a, b, 53 );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 7
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv2547[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2547[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	or	ecx, DWORD PTR _e$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2547[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 120  : 	R3( b, c, d, e, a, 54 );

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, 4
	imul	eax, eax, 14
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 6
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv2597[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv2597[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	or	edx, DWORD PTR _d$[ebp]
	and	edx, DWORD PTR _e$[ebp]
	or	edx, ecx
	add	edx, DWORD PTR tv2597[ebp]
	add	eax, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [eax+edx-1894007588]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 121  : 	R3( a, b, c, d, e, 55 );

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 7
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 7
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv2647[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2647[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	and	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	or	ecx, DWORD PTR _c$[ebp]
	and	ecx, DWORD PTR _d$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2647[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 122  : 	R3( e, a, b, c, d, 56 );

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	shl	eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 5
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	imul	eax, eax, 10
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv2697[ebp], ecx
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2697[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	and	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	or	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _c$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2697[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _d$[ebp], edx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 123  : 	R3( d, e, a, b, c, 57 );

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 9
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2747[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2747[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	and	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _e$[ebp]
	or	ecx, DWORD PTR _a$[ebp]
	and	ecx, DWORD PTR _b$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2747[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 124  : 	R3( c, d, e, a, b, 58 );

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 10
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2797[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2797[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	and	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR _d$[ebp]
	or	ecx, DWORD PTR _e$[ebp]
	and	ecx, DWORD PTR _a$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2797[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 125  : 	R3( b, c, d, e, a, 59 );

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv2847[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2847[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	and	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	or	ecx, DWORD PTR _d$[ebp]
	and	ecx, DWORD PTR _e$[ebp]
	or	ecx, eax
	add	ecx, DWORD PTR tv2847[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [edx+ecx-1894007588]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 126  : 	R4( a, b, c, d, e, 60 );

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 12
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, 4
	shl	edx, 2
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 14
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2895[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2895[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv2895[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _e$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 127  : 	R4( e, a, b, c, d, 61 );

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2943[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2943[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR tv2943[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 128  : 	R4( d, e, a, b, c, 62 );

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 14
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, 4
	imul	edx, edx, 6
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 14
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv2991[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv2991[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv2991[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 129  : 	R4( c, d, e, a, b, 63 );

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 12
	mov	eax, 4
	imul	eax, eax, 7
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 15
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv3039[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv3039[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR tv3039[ebp]
	add	eax, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [eax+ecx-899497514]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 130  : 	R4( b, c, d, e, a, 64 );

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 1
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv3087[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv3087[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _e$[ebp]
	add	ecx, DWORD PTR tv3087[ebp]
	add	eax, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+ecx-899497514]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 131  : 	R4( a, b, c, d, e, 65 );

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	shl	eax, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 14
	mov	eax, 4
	imul	eax, eax, 9
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	imul	eax, eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv3135[ebp], ecx
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3135[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv3135[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _e$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 132  : 	R4( e, a, b, c, d, 66 );

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	shl	edx, 2
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv3183[ebp], ecx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR tv3183[ebp]
	mov	DWORD PTR [ecx+eax], edx
	mov	eax, DWORD PTR _e$[ebp]
	shr	eax, 27					; 0000001bH
	mov	ecx, DWORD PTR _e$[ebp]
	shl	ecx, 5
	or	ecx, eax
	mov	edx, DWORD PTR _a$[ebp]
	xor	edx, DWORD PTR _b$[ebp]
	xor	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR tv3183[ebp]
	add	ecx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [ecx+edx-899497514]
	mov	DWORD PTR _d$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 133  : 	R4( d, e, a, b, c, 67 );

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv3231[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3231[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv3231[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 134  : 	R4( c, d, e, a, b, 68 );

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	shl	edx, 2
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	shl	eax, 1
	mov	edx, 4
	shl	edx, 0
	mov	ecx, 4
	imul	ecx, ecx, 12
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+ecx]
	mov	ecx, 4
	imul	ecx, ecx, 6
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 2
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+ecx]
	shr	edx, 31					; 0000001fH
	or	eax, edx
	mov	DWORD PTR tv3279[ebp], eax
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv3279[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _c$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _e$[ebp]
	xor	ecx, DWORD PTR _a$[ebp]
	add	ecx, DWORD PTR tv3279[ebp]
	add	eax, DWORD PTR _b$[ebp]
	lea	edx, DWORD PTR [eax+ecx-899497514]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 135  : 	R4( b, c, d, e, a, 69 );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 7
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv3327[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3327[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR tv3327[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 136  : 	R4( a, b, c, d, e, 70 );

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 3
	mov	eax, 4
	imul	eax, eax, 14
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 6
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv3375[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv3375[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _a$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _b$[ebp]
	xor	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	add	ecx, DWORD PTR tv3375[ebp]
	add	eax, DWORD PTR _e$[ebp]
	lea	edx, DWORD PTR [eax+ecx-899497514]
	mov	DWORD PTR _e$[ebp], edx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 137  : 	R4( e, a, b, c, d, 71 );

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 7
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 7
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv3423[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3423[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR tv3423[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 138  : 	R4( d, e, a, b, c, 72 );

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	shl	eax, 3
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 5
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	imul	eax, eax, 10
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv3471[ebp], ecx
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3471[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv3471[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 139  : 	R4( c, d, e, a, b, 73 );

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 9
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, 4
	shl	edx, 0
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 9
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv3519[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3519[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv3519[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 140  : 	R4( b, c, d, e, a, 74 );

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 10
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, 4
	shl	edx, 1
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 10
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv3567[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3567[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _b$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	add	eax, DWORD PTR tv3567[ebp]
	add	edx, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _a$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 141  : 	R4( a, b, c, d, e, 75 );

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	xor	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	edx, 4
	imul	ecx, edx, 11
	mov	edx, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 11
	mov	esi, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [esi+edx]
	shr	ecx, 31					; 0000001fH
	or	eax, ecx
	mov	DWORD PTR tv3615[ebp], eax
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3615[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _a$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	xor	eax, DWORD PTR _d$[ebp]
	add	eax, DWORD PTR tv3615[ebp]
	add	edx, DWORD PTR _e$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _e$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _b$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax

; 142  : 	R4( e, a, b, c, d, 76 );

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 12
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, 4
	shl	edx, 2
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 14
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 12
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv3663[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3663[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _e$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	xor	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR tv3663[ebp]
	add	edx, DWORD PTR _d$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _d$[ebp], ecx
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _a$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _a$[ebp], eax

; 143  : 	R4( d, e, a, b, c, 77 );

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 13
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, 4
	imul	edx, edx, 5
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 15
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 13
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv3711[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3711[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _d$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	xor	eax, DWORD PTR _b$[ebp]
	add	eax, DWORD PTR tv3711[ebp]
	add	edx, DWORD PTR _c$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _c$[ebp], ecx
	mov	eax, DWORD PTR _e$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _e$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _e$[ebp], eax

; 144  : 	R4( c, d, e, a, b, 78 );

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	mov	eax, 4
	imul	edx, eax, 14
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, 4
	imul	edx, edx, 6
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edi+edx]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	mov	edx, 4
	imul	edx, edx, 14
	mov	esi, DWORD PTR _block$[ebp]
	xor	eax, DWORD PTR [esi+edx]
	shr	eax, 31					; 0000001fH
	or	ecx, eax
	mov	DWORD PTR tv3759[ebp], ecx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _block$[ebp]
	mov	eax, DWORD PTR tv3759[ebp]
	mov	DWORD PTR [edx+ecx], eax
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 5
	or	edx, ecx
	mov	eax, DWORD PTR _d$[ebp]
	xor	eax, DWORD PTR _e$[ebp]
	xor	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR tv3759[ebp]
	add	edx, DWORD PTR _b$[ebp]
	lea	ecx, DWORD PTR [edx+eax-899497514]
	mov	DWORD PTR _b$[ebp], ecx
	mov	eax, DWORD PTR _d$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 145  : 	R4( b, c, d, e, a, 79 );

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _block$[ebp]
	mov	esi, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	xor	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [edx+eax]
	shl	ecx, 1
	mov	eax, 4
	imul	edx, eax, 12
	mov	eax, 4
	imul	eax, eax, 7
	mov	esi, DWORD PTR _block$[ebp]
	mov	edi, DWORD PTR _block$[ebp]
	mov	edx, DWORD PTR [esi+edx]
	xor	edx, DWORD PTR [edi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	imul	eax, eax, 15
	mov	esi, DWORD PTR _block$[ebp]
	xor	edx, DWORD PTR [esi+eax]
	shr	edx, 31					; 0000001fH
	or	ecx, edx
	mov	DWORD PTR tv3807[ebp], ecx
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _block$[ebp]
	mov	ecx, DWORD PTR tv3807[ebp]
	mov	DWORD PTR [eax+edx], ecx
	mov	edx, DWORD PTR _b$[ebp]
	shr	edx, 27					; 0000001bH
	mov	eax, DWORD PTR _b$[ebp]
	shl	eax, 5
	or	eax, edx
	mov	ecx, DWORD PTR _c$[ebp]
	xor	ecx, DWORD PTR _d$[ebp]
	xor	ecx, DWORD PTR _e$[ebp]
	add	ecx, DWORD PTR tv3807[ebp]
	add	eax, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+ecx-899497514]
	mov	DWORD PTR _a$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _c$[ebp]
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR _c$[ebp], eax

; 146  : 
; 147  : 	// Add the working vars back into state[]
; 148  : 	state[ 0 ] += a;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 149  : 	state[ 1 ] += b;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	add	edx, DWORD PTR _b$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 150  : 	state[ 2 ] += c;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 151  : 	state[ 3 ] += d;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	add	eax, DWORD PTR _d$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 152  : 	state[ 4 ] += e;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	add	edx, DWORD PTR _e$[ebp]
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 153  : 
; 154  : 	// Wipe variables
; 155  : 	a = 0;

	mov	DWORD PTR _a$[ebp], 0

; 156  : 	b = 0;

	mov	DWORD PTR _b$[ebp], 0

; 157  : 	c = 0;

	mov	DWORD PTR _c$[ebp], 0

; 158  : 	d = 0;

	mov	DWORD PTR _d$[ebp], 0

; 159  : 	e = 0;

	mov	DWORD PTR _e$[ebp], 0

; 160  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Transform@CSHA1@@AAEXQAIQAE@Z ENDP			; CSHA1::Transform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ?GetHash@CSHA1@@QBEPAEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetHash@CSHA1@@QBEPAEXZ PROC				; CSHA1::GetHash, COMDAT
; _this$ = ecx

; 324  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 325  : 	return ( unsigned char * ) m_digest;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H

; 326  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHash@CSHA1@@QBEPAEXZ ENDP				; CSHA1::GetHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ?GetHash@CSHA1@@QAEXPAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uDest$ = 8						; size = 4
?GetHash@CSHA1@@QAEXPAE@Z PROC				; CSHA1::GetHash, COMDAT
; _this$ = ecx

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 318  : 	memcpy( uDest, m_digest, 20 );

	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	mov	ecx, DWORD PTR _uDest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 319  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHash@CSHA1@@QAEXPAE@Z ENDP				; CSHA1::GetHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ?ReportHash@CSHA1@@QAEXPADE@Z
_TEXT	SEGMENT
_szTemp$ = -32						; size = 4
_i$ = -17						; size = 1
_this$ = -8						; size = 4
_szReport$ = 8						; size = 4
_uReportType$ = 12					; size = 1
?ReportHash@CSHA1@@QAEXPADE@Z PROC			; CSHA1::ReportHash, COMDAT
; _this$ = ecx

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 	unsigned char i = 0;

	mov	BYTE PTR _i$[ebp], 0

; 284  : 	char szTemp[ 4 ];
; 285  : 
; 286  : 	if ( uReportType == REPORT_HEX )

	movzx	eax, BYTE PTR _uReportType$[ebp]
	test	eax, eax
	jne	SHORT $LN10@ReportHash

; 287  : 	{
; 288  : 		sprintf( szTemp, "%02X", m_digest[ 0 ] );

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+96]
	push	eax
	push	OFFSET ??_C@_04JFFKLGJF@?$CF02X?$AA@
	lea	ecx, DWORD PTR _szTemp$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 289  : 		strcat( szReport, szTemp );

	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szReport$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 290  : 
; 291  : 		for ( i = 1; i < 20; i++ )

	mov	BYTE PTR _i$[ebp], 1
	jmp	SHORT $LN9@ReportHash
$LN8@ReportHash:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$LN9@ReportHash:
	movzx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 20					; 00000014H
	jge	SHORT $LN7@ReportHash

; 292  : 		{
; 293  : 			sprintf( szTemp, " %02X", m_digest[ i ] );

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+96]
	push	edx
	push	OFFSET ??_C@_05OFBGOFBN@?5?$CF02X?$AA@
	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 294  : 			strcat( szReport, szTemp );

	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szReport$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 295  : 		}

	jmp	SHORT $LN8@ReportHash
$LN7@ReportHash:

; 296  : 	}
; 297  : 
; 298  : 	else

	jmp	$LN11@ReportHash
$LN10@ReportHash:

; 299  : 		if ( uReportType == REPORT_DIGIT )

	movzx	eax, BYTE PTR _uReportType$[ebp]
	cmp	eax, 1
	jne	SHORT $LN5@ReportHash

; 300  : 		{
; 301  : 			sprintf( szTemp, "%u", m_digest[ 0 ] );

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+96]
	push	eax
	push	OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	lea	ecx, DWORD PTR _szTemp$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 302  : 			strcat( szReport, szTemp );

	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szReport$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 303  : 
; 304  : 			for ( i = 1; i < 20; i++ )

	mov	BYTE PTR _i$[ebp], 1
	jmp	SHORT $LN4@ReportHash
$LN3@ReportHash:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$LN4@ReportHash:
	movzx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 20					; 00000014H
	jge	SHORT $LN2@ReportHash

; 305  : 			{
; 306  : 				sprintf( szTemp, " %u", m_digest[ i ] );

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+96]
	push	edx
	push	OFFSET ??_C@_03BCEHIGGF@?5?$CFu?$AA@
	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 307  : 				strcat( szReport, szTemp );

	lea	eax, DWORD PTR _szTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szReport$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 308  : 			}

	jmp	SHORT $LN3@ReportHash
$LN2@ReportHash:

; 309  : 		}
; 310  : 
; 311  : 		else

	jmp	SHORT $LN11@ReportHash
$LN5@ReportHash:

; 312  : 			strcpy( szReport, "Error: Unknown report type!" );

	push	OFFSET ??_C@_0BM@DLILFBO@Error?3?5Unknown?5report?5type?$CB?$AA@
	mov	eax, DWORD PTR _szReport$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8
$LN11@ReportHash:

; 313  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ReportHash
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN15@ReportHash:
	DD	1
	DD	$LN14@ReportHash
$LN14@ReportHash:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN13@ReportHash
$LN13@ReportHash:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ReportHash@CSHA1@@QAEXPADE@Z ENDP			; CSHA1::ReportHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ?Final@CSHA1@@QAEXXZ
_TEXT	SEGMENT
tv70 = -252						; size = 4
_finalcount$ = -52					; size = 8
_j$ = -36						; size = 4
_i$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Final@CSHA1@@QAEXXZ PROC				; CSHA1::Final, COMDAT
; _this$ = ecx

; 241  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 242  : 	unsigned int i = 0, j = 0;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0

; 243  : 	unsigned char finalcount[ 8 ] =
; 244  : 	{
; 245  : 		0, 0, 0, 0, 0, 0, 0, 0
; 246  : 	};

	mov	BYTE PTR _finalcount$[ebp], 0
	mov	BYTE PTR _finalcount$[ebp+1], 0
	mov	BYTE PTR _finalcount$[ebp+2], 0
	mov	BYTE PTR _finalcount$[ebp+3], 0
	mov	BYTE PTR _finalcount$[ebp+4], 0
	mov	BYTE PTR _finalcount$[ebp+5], 0
	mov	BYTE PTR _finalcount$[ebp+6], 0
	mov	BYTE PTR _finalcount$[ebp+7], 0

; 247  : 
; 248  : 	for ( i = 0; i < 8; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@Final
$LN7@Final:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@Final:
	cmp	DWORD PTR _i$[ebp], 8
	jae	SHORT $LN6@Final

; 249  : 		finalcount[ i ] = (unsigned char) ( ( m_count[ ( i >= 4 ? 0 : 1 ) ]
; 250  : 		>> ( ( 3 - ( i & 3 ) ) * 8 ) ) & 255 ); // Endian independent

	cmp	DWORD PTR _i$[ebp], 4
	jb	SHORT $LN11@Final
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN12@Final
$LN11@Final:
	mov	DWORD PTR tv70[ebp], 1
$LN12@Final:
	mov	eax, DWORD PTR _i$[ebp]
	and	eax, 3
	mov	ecx, 3
	sub	ecx, eax
	shl	ecx, 3
	mov	edx, DWORD PTR tv70[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+24]
	shr	edx, cl
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _finalcount$[ebp+eax], dl
	jmp	SHORT $LN7@Final
$LN6@Final:

; 251  : 
; 252  : 		Update( ( unsigned char * ) "\200", 1 );

	push	1
	push	OFFSET ??_C@_01IFKFHFEL@?$IA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@CSHA1@@QAEXPAEI@Z		; CSHA1::Update
$LN5@Final:

; 253  : 
; 254  : 		while ( ( m_count[ 0 ] & 504 ) != 448 )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+24]
	and	eax, 504				; 000001f8H
	cmp	eax, 448				; 000001c0H
	je	SHORT $LN4@Final

; 255  : 			Update( ( unsigned char * ) "\0", 1 );

	push	1
	push	OFFSET ??_C@_01LOCGONAA@?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@CSHA1@@QAEXPAEI@Z		; CSHA1::Update
	jmp	SHORT $LN5@Final
$LN4@Final:

; 256  : 
; 257  : 		Update( finalcount, 8 ); // Cause a SHA1Transform()

	push	8
	lea	eax, DWORD PTR _finalcount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@CSHA1@@QAEXPAEI@Z		; CSHA1::Update

; 258  : 
; 259  : 		for ( i = 0; i < 20; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Final
$LN2@Final:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Final:
	cmp	DWORD PTR _i$[ebp], 20			; 00000014H
	jae	SHORT $LN1@Final

; 260  : 		{
; 261  : 			m_digest[ i ] = (unsigned char) ( ( m_state[ i >> 2 ] >> ( ( 3 - ( i & 3 ) ) * 8 ) ) & 255 );

	mov	eax, DWORD PTR _i$[ebp]
	shr	eax, 2
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, 3
	mov	edx, 3
	sub	edx, ecx
	shl	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	mov	ecx, edx
	shr	eax, cl
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+96], al

; 262  : 		}

	jmp	SHORT $LN2@Final
$LN1@Final:

; 263  : 
; 264  : 		// Wipe variables for security reasons
; 265  : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 266  : 
; 267  : 		j = 0;

	mov	DWORD PTR _j$[ebp], 0

; 268  : 
; 269  : 		memset( m_buffer, 0, 64 );

	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 270  : 
; 271  : 		memset( m_state, 0, 20 );

	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 272  : 
; 273  : 		memset( m_count, 0, 8 );

	push	8
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 274  : 
; 275  : 		memset( finalcount, 0, 8 );

	push	8
	push	0
	lea	eax, DWORD PTR _finalcount$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 276  : 
; 277  : 		Transform( m_state, m_buffer );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Transform@CSHA1@@AAEXQAIQAE@Z		; CSHA1::Transform

; 278  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Final
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@Final:
	DD	1
	DD	$LN14@Final
$LN14@Final:
	DD	-52					; ffffffccH
	DD	8
	DD	$LN13@Final
$LN13@Final:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?Final@CSHA1@@QAEXXZ ENDP				; CSHA1::Final
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ?HashFile@CSHA1@@QAE_NPAD@Z
_TEXT	SEGMENT
$T1 = -8304						; size = 8
_temp$ = -8096						; size = 8
_fIn$ = -8080						; size = 4
_uData$ = -8068						; size = 8000
_i$ = -60						; size = 4
_ulBlocks$ = -48					; size = 4
_ulRest$ = -36						; size = 4
_ulFileSize$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
?HashFile@CSHA1@@QAE_NPAD@Z PROC			; CSHA1::HashFile, COMDAT
; _this$ = ecx

; 195  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 8308				; 00002074H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-8308]
	mov	ecx, 2077				; 0000081dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 196  : 	unsigned long ulFileSize = 0, ulRest = 0, ulBlocks = 0;

	mov	DWORD PTR _ulFileSize$[ebp], 0
	mov	DWORD PTR _ulRest$[ebp], 0
	mov	DWORD PTR _ulBlocks$[ebp], 0

; 197  : 	unsigned long i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 198  : 	unsigned char uData[ MAX_FILE_READ_BUFFER ];
; 199  : 	FILE *fIn = NULL;

	mov	DWORD PTR _fIn$[ebp], 0

; 200  : 
; 201  : 	if ( ( fIn = fopen( szFileName, "rb" ) ) == NULL )

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fIn$[ebp], eax
	cmp	DWORD PTR _fIn$[ebp], 0
	jne	SHORT $LN5@HashFile

; 202  : 		return ( false );

	xor	al, al
	jmp	$LN6@HashFile
$LN5@HashFile:

; 203  : 
; 204  : 	fseek( fIn, 0, SEEK_END );

	push	2
	push	0
	mov	eax, DWORD PTR _fIn$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 205  : 
; 206  : 	ulFileSize = ftell( fIn );

	mov	eax, DWORD PTR _fIn$[ebp]
	push	eax
	call	_ftell
	add	esp, 4
	mov	DWORD PTR _ulFileSize$[ebp], eax

; 207  : 
; 208  : 	fseek( fIn, 0, SEEK_SET );

	push	0
	push	0
	mov	eax, DWORD PTR _fIn$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 209  : 
; 210  : 	// This is faster
; 211  : 	div_t temp;
; 212  : 
; 213  : 	temp = div( ulFileSize, MAX_FILE_READ_BUFFER );

	push	8000					; 00001f40H
	mov	eax, DWORD PTR _ulFileSize$[ebp]
	push	eax
	call	_div
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _temp$[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR _temp$[ebp+4], edx

; 214  : 
; 215  : 	ulRest = temp.rem;

	mov	eax, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR _ulRest$[ebp], eax

; 216  : 
; 217  : 	ulBlocks = temp.quot;

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR _ulBlocks$[ebp], eax

; 218  : 
; 219  : 	// ulRest = ulFileSize % MAX_FILE_READ_BUFFER;
; 220  : 	// ulBlocks = ulFileSize / MAX_FILE_READ_BUFFER;
; 221  : 
; 222  : 	for ( i = 0; i < ulBlocks; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@HashFile
$LN3@HashFile:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@HashFile:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ulBlocks$[ebp]
	jae	SHORT $LN2@HashFile

; 223  : 	{
; 224  : 		fread( uData, 1, MAX_FILE_READ_BUFFER, fIn );

	mov	eax, DWORD PTR _fIn$[ebp]
	push	eax
	push	8000					; 00001f40H
	push	1
	lea	ecx, DWORD PTR _uData$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 225  : 		Update( uData, MAX_FILE_READ_BUFFER );

	push	8000					; 00001f40H
	lea	eax, DWORD PTR _uData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@CSHA1@@QAEXPAEI@Z		; CSHA1::Update

; 226  : 	}

	jmp	SHORT $LN3@HashFile
$LN2@HashFile:

; 227  : 
; 228  : 	if ( ulRest != 0 )

	cmp	DWORD PTR _ulRest$[ebp], 0
	je	SHORT $LN1@HashFile

; 229  : 	{
; 230  : 		fread( uData, 1, ulRest, fIn );

	mov	eax, DWORD PTR _fIn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ulRest$[ebp]
	push	ecx
	push	1
	lea	edx, DWORD PTR _uData$[ebp]
	push	edx
	call	_fread
	add	esp, 16					; 00000010H

; 231  : 		Update( uData, ulRest );

	mov	eax, DWORD PTR _ulRest$[ebp]
	push	eax
	lea	ecx, DWORD PTR _uData$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@CSHA1@@QAEXPAEI@Z		; CSHA1::Update
$LN1@HashFile:

; 232  : 	}
; 233  : 
; 234  : 	fclose( fIn );

	mov	eax, DWORD PTR _fIn$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 235  : 	fIn = NULL;

	mov	DWORD PTR _fIn$[ebp], 0

; 236  : 
; 237  : 	return ( true );

	mov	al, 1
$LN6@HashFile:

; 238  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@HashFile
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 8308				; 00002074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN11@HashFile:
	DD	2
	DD	$LN10@HashFile
$LN10@HashFile:
	DD	-8068					; ffffe07cH
	DD	8000					; 00001f40H
	DD	$LN8@HashFile
	DD	-8096					; ffffe060H
	DD	8
	DD	$LN9@HashFile
$LN9@HashFile:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN8@HashFile:
	DB	117					; 00000075H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?HashFile@CSHA1@@QAE_NPAD@Z ENDP			; CSHA1::HashFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ?Update@CSHA1@@QAEXPAEI@Z
_TEXT	SEGMENT
tv76 = -232						; size = 4
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_data$ = 8						; size = 4
_len$ = 12						; size = 4
?Update@CSHA1@@QAEXPAEI@Z PROC				; CSHA1::Update, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	unsigned int i = 0, j = 0;

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0

; 166  : 
; 167  : 	j = ( m_count[ 0 ] >> 3 ) & 63;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+24]
	shr	eax, 3
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _j$[ebp], eax

; 168  : 
; 169  : 	if ( ( m_count[ 0 ] += len << 3 ) < ( len << 3 ) )

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _len$[ebp]
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+24]
	add	ecx, edx
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR [ecx+eax+24], edx
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 3
	cmp	DWORD PTR tv76[ebp], eax
	jae	SHORT $LN6@Update

; 170  : 		m_count[ 1 ] ++;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+24]
	add	edx, 1
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], edx
$LN6@Update:

; 171  : 
; 172  : 	m_count[ 1 ] += ( len >> 29 );

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _len$[ebp]
	shr	ecx, 29					; 0000001dH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+eax+24]
	mov	eax, 4
	shl	eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+eax+24], ecx

; 173  : 
; 174  : 	if ( ( j + len ) > 63 )

	mov	eax, DWORD PTR _j$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	cmp	eax, 63					; 0000003fH
	jbe	SHORT $LN5@Update

; 175  : 	{
; 176  : 		memcpy( &m_buffer[ j ], data, ( i = 64 - j ) );

	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+32]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 177  : 		Transform( m_state, m_buffer );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Transform@CSHA1@@AAEXQAIQAE@Z		; CSHA1::Transform

; 178  : 
; 179  : 		for ( ; i + 63 < len; i += 64 )

	jmp	SHORT $LN4@Update
$LN3@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _i$[ebp], eax
$LN4@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 63					; 0000003fH
	cmp	eax, DWORD PTR _len$[ebp]
	jae	SHORT $LN2@Update

; 180  : 		{
; 181  : 			Transform( m_state, &data[ i ] );

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Transform@CSHA1@@AAEXQAIQAE@Z		; CSHA1::Transform

; 182  : 		}

	jmp	SHORT $LN3@Update
$LN2@Update:

; 183  : 
; 184  : 		j = 0;

	mov	DWORD PTR _j$[ebp], 0

; 185  : 	}
; 186  : 
; 187  : 	else

	jmp	SHORT $LN1@Update
$LN5@Update:

; 188  : 		i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN1@Update:

; 189  : 
; 190  : 	memcpy( &m_buffer[ j ], &data[ i ], len - i );

	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+32]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Update@CSHA1@@QAEXPAEI@Z ENDP				; CSHA1::Update
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ?Reset@CSHA1@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Reset@CSHA1@@QAEXXZ PROC				; CSHA1::Reset, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	// SHA1 initialization constants
; 39   : 	m_state[ 0 ] = 0x67452301;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+4], 1732584193	; 67452301H

; 40   : 	m_state[ 1 ] = 0xEFCDAB89;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+4], -271733879	; efcdab89H

; 41   : 	m_state[ 2 ] = 0x98BADCFE;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+4], -1732584194	; 98badcfeH

; 42   : 	m_state[ 3 ] = 0x10325476;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+4], 271733878	; 10325476H

; 43   : 	m_state[ 4 ] = 0xC3D2E1F0;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+4], -1009589776	; c3d2e1f0H

; 44   : 
; 45   : 	m_count[ 0 ] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], 0

; 46   : 	m_count[ 1 ] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], 0

; 47   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CSHA1@@QAEXXZ ENDP				; CSHA1::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ??1CSHA1@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CSHA1@@UAE@XZ PROC					; CSHA1::~CSHA1, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CSHA1@@6B@

; 32   : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CSHA1@@QAEXXZ			; CSHA1::Reset

; 33   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSHA1@@UAE@XZ ENDP					; CSHA1::~CSHA1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\sha1.cpp
;	COMDAT ??0CSHA1@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CSHA1@@QAE@XZ PROC					; CSHA1::CSHA1, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CSHA1@@6B@

; 27   : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CSHA1@@QAEXXZ			; CSHA1::Reset

; 28   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSHA1@@QAE@XZ ENDP					; CSHA1::CSHA1
_TEXT	ENDS
END
