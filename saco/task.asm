; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\game\task.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0CTask@@QAE@XZ				; CTask::CTask
PUBLIC	??0CTask@@QAE@K@Z				; CTask::CTask
PUBLIC	??0CTask@@QAE@PAE@Z				; CTask::CTask
PUBLIC	??1CTask@@UAE@XZ				; CTask::~CTask
PUBLIC	?Create@CTask@@QAEXK@Z				; CTask::Create
PUBLIC	?Create@CTask@@QAEXPAE@Z			; CTask::Create
PUBLIC	?CreateCopy@CTask@@UAEPAV1@XZ			; CTask::CreateCopy
PUBLIC	?Destroy@CTask@@UAEXXZ				; CTask::Destroy
PUBLIC	?ApplyToPed@CTask@@UAEXPAVCPlayerPed@@@Z	; CTask::ApplyToPed
PUBLIC	?GetID@CTask@@UAEKXZ				; CTask::GetID
PUBLIC	?IsDestroyed@CTask@@UAEHXZ			; CTask::IsDestroyed
PUBLIC	?IsSimple@CTask@@UAEHXZ				; CTask::IsSimple
PUBLIC	??_GCTask@@UAEPAXI@Z				; CTask::`scalar deleting destructor'
PUBLIC	??0CTaskJetpack@@QAE@XZ				; CTaskJetpack::CTaskJetpack
PUBLIC	??0CTaskJetpack@@QAE@PAE@Z			; CTaskJetpack::CTaskJetpack
PUBLIC	??1CTaskJetpack@@UAE@XZ				; CTaskJetpack::~CTaskJetpack
PUBLIC	??_GCTaskJetpack@@UAEPAXI@Z			; CTaskJetpack::`scalar deleting destructor'
PUBLIC	??0CTaskTakeDamageFall@@QAE@KK@Z		; CTaskTakeDamageFall::CTaskTakeDamageFall
PUBLIC	??1CTaskTakeDamageFall@@UAE@XZ			; CTaskTakeDamageFall::~CTaskTakeDamageFall
PUBLIC	??_GCTaskTakeDamageFall@@UAEPAXI@Z		; CTaskTakeDamageFall::`scalar deleting destructor'
PUBLIC	??_7CTask@@6B@					; CTask::`vftable'
PUBLIC	??_7CTaskJetpack@@6B@				; CTaskJetpack::`vftable'
PUBLIC	??_7CTaskTakeDamageFall@@6B@			; CTaskTakeDamageFall::`vftable'
PUBLIC	??_R4CTask@@6B@					; CTask::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTask@@@8				; CTask `RTTI Type Descriptor'
PUBLIC	??_R3CTask@@8					; CTask::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTask@@8					; CTask::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTask@@8				; CTask::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CTaskJetpack@@6B@				; CTaskJetpack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTaskJetpack@@@8			; CTaskJetpack `RTTI Type Descriptor'
PUBLIC	??_R3CTaskJetpack@@8				; CTaskJetpack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTaskJetpack@@8				; CTaskJetpack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTaskJetpack@@8			; CTaskJetpack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CTaskTakeDamageFall@@6B@			; CTaskTakeDamageFall::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTaskTakeDamageFall@@@8			; CTaskTakeDamageFall `RTTI Type Descriptor'
PUBLIC	??_R3CTaskTakeDamageFall@@8			; CTaskTakeDamageFall::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTaskTakeDamageFall@@8			; CTaskTakeDamageFall::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTaskTakeDamageFall@@8		; CTaskTakeDamageFall::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_ECTask@@UAEPAXI@Z:PROC			; CTask::`vector deleting destructor'
EXTRN	??_ECTaskJetpack@@UAEPAXI@Z:PROC		; CTaskJetpack::`vector deleting destructor'
EXTRN	??_ECTaskTakeDamageFall@@UAEPAXI@Z:PROC		; CTaskTakeDamageFall::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pbyteCurrentPlayer@@3PAEA:DWORD		; pbyteCurrentPlayer
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CTaskTakeDamageFall@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTaskTakeDamageFall@@8 DD FLAT:??_R0?AVCTaskTakeDamageFall@@@8 ; CTaskTakeDamageFall::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTaskTakeDamageFall@@8
rdata$r	ENDS
;	COMDAT ??_R2CTaskTakeDamageFall@@8
rdata$r	SEGMENT
??_R2CTaskTakeDamageFall@@8 DD FLAT:??_R1A@?0A@EA@CTaskTakeDamageFall@@8 ; CTaskTakeDamageFall::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CTask@@8
rdata$r	ENDS
;	COMDAT ??_R3CTaskTakeDamageFall@@8
rdata$r	SEGMENT
??_R3CTaskTakeDamageFall@@8 DD 00H			; CTaskTakeDamageFall::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CTaskTakeDamageFall@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTaskTakeDamageFall@@@8
data$r	SEGMENT
??_R0?AVCTaskTakeDamageFall@@@8 DD FLAT:??_7type_info@@6B@ ; CTaskTakeDamageFall `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTaskTakeDamageFall@@', 00H
data$r	ENDS
;	COMDAT ??_R4CTaskTakeDamageFall@@6B@
rdata$r	SEGMENT
??_R4CTaskTakeDamageFall@@6B@ DD 00H			; CTaskTakeDamageFall::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTaskTakeDamageFall@@@8
	DD	FLAT:??_R3CTaskTakeDamageFall@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTaskJetpack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTaskJetpack@@8 DD FLAT:??_R0?AVCTaskJetpack@@@8 ; CTaskJetpack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTaskJetpack@@8
rdata$r	ENDS
;	COMDAT ??_R2CTaskJetpack@@8
rdata$r	SEGMENT
??_R2CTaskJetpack@@8 DD FLAT:??_R1A@?0A@EA@CTaskJetpack@@8 ; CTaskJetpack::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CTask@@8
rdata$r	ENDS
;	COMDAT ??_R3CTaskJetpack@@8
rdata$r	SEGMENT
??_R3CTaskJetpack@@8 DD 00H				; CTaskJetpack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CTaskJetpack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTaskJetpack@@@8
data$r	SEGMENT
??_R0?AVCTaskJetpack@@@8 DD FLAT:??_7type_info@@6B@	; CTaskJetpack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTaskJetpack@@', 00H
data$r	ENDS
;	COMDAT ??_R4CTaskJetpack@@6B@
rdata$r	SEGMENT
??_R4CTaskJetpack@@6B@ DD 00H				; CTaskJetpack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTaskJetpack@@@8
	DD	FLAT:??_R3CTaskJetpack@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CTask@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTask@@8 DD FLAT:??_R0?AVCTask@@@8	; CTask::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTask@@8
rdata$r	ENDS
;	COMDAT ??_R2CTask@@8
rdata$r	SEGMENT
??_R2CTask@@8 DD FLAT:??_R1A@?0A@EA@CTask@@8		; CTask::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CTask@@8
rdata$r	SEGMENT
??_R3CTask@@8 DD 00H					; CTask::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CTask@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTask@@@8
data$r	SEGMENT
??_R0?AVCTask@@@8 DD FLAT:??_7type_info@@6B@		; CTask `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTask@@', 00H
data$r	ENDS
;	COMDAT ??_R4CTask@@6B@
rdata$r	SEGMENT
??_R4CTask@@6B@ DD 00H					; CTask::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTask@@@8
	DD	FLAT:??_R3CTask@@8
rdata$r	ENDS
;	COMDAT ??_7CTaskTakeDamageFall@@6B@
CONST	SEGMENT
??_7CTaskTakeDamageFall@@6B@ DD FLAT:??_R4CTaskTakeDamageFall@@6B@ ; CTaskTakeDamageFall::`vftable'
	DD	FLAT:??_ECTaskTakeDamageFall@@UAEPAXI@Z
	DD	FLAT:?CreateCopy@CTask@@UAEPAV1@XZ
	DD	FLAT:?Destroy@CTask@@UAEXXZ
	DD	FLAT:?ApplyToPed@CTask@@UAEXPAVCPlayerPed@@@Z
	DD	FLAT:?GetID@CTask@@UAEKXZ
	DD	FLAT:?IsDestroyed@CTask@@UAEHXZ
	DD	FLAT:?IsSimple@CTask@@UAEHXZ
CONST	ENDS
;	COMDAT ??_7CTaskJetpack@@6B@
CONST	SEGMENT
??_7CTaskJetpack@@6B@ DD FLAT:??_R4CTaskJetpack@@6B@	; CTaskJetpack::`vftable'
	DD	FLAT:??_ECTaskJetpack@@UAEPAXI@Z
	DD	FLAT:?CreateCopy@CTask@@UAEPAV1@XZ
	DD	FLAT:?Destroy@CTask@@UAEXXZ
	DD	FLAT:?ApplyToPed@CTask@@UAEXPAVCPlayerPed@@@Z
	DD	FLAT:?GetID@CTask@@UAEKXZ
	DD	FLAT:?IsDestroyed@CTask@@UAEHXZ
	DD	FLAT:?IsSimple@CTask@@UAEHXZ
CONST	ENDS
;	COMDAT ??_7CTask@@6B@
CONST	SEGMENT
??_7CTask@@6B@ DD FLAT:??_R4CTask@@6B@			; CTask::`vftable'
	DD	FLAT:??_ECTask@@UAEPAXI@Z
	DD	FLAT:?CreateCopy@CTask@@UAEPAV1@XZ
	DD	FLAT:?Destroy@CTask@@UAEXXZ
	DD	FLAT:?ApplyToPed@CTask@@UAEXPAVCPlayerPed@@@Z
	DD	FLAT:?GetID@CTask@@UAEKXZ
	DD	FLAT:?IsDestroyed@CTask@@UAEHXZ
	DD	FLAT:?IsSimple@CTask@@UAEHXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTaskTakeDamageFall@@QAE@KK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTaskTakeDamageFall@@QAE@KK@Z$0
__ehfuncinfo$??0CTaskTakeDamageFall@@QAE@KK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CTaskTakeDamageFall@@QAE@KK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CTaskJetpack@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CTaskJetpack@@UAE@XZ$0
__ehfuncinfo$??1CTaskJetpack@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CTaskJetpack@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTaskJetpack@@QAE@PAE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTaskJetpack@@QAE@PAE@Z$0
__ehfuncinfo$??0CTaskJetpack@@QAE@PAE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CTaskJetpack@@QAE@PAE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTaskJetpack@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTaskJetpack@@QAE@XZ$0
__ehfuncinfo$??0CTaskJetpack@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CTaskJetpack@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateCopy@CTask@@UAEPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCopy@CTask@@UAEPAV1@XZ$0
__ehfuncinfo$?CreateCopy@CTask@@UAEPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateCopy@CTask@@UAEPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCTaskTakeDamageFall@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCTaskTakeDamageFall@@UAEPAXI@Z PROC			; CTaskTakeDamageFall::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTaskTakeDamageFall@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTaskTakeDamageFall@@UAEPAXI@Z ENDP			; CTaskTakeDamageFall::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CTaskTakeDamageFall@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CTaskTakeDamageFall@@UAE@XZ PROC			; CTaskTakeDamageFall::~CTaskTakeDamageFall, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTask@@UAE@XZ			; CTask::~CTask
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTaskTakeDamageFall@@UAE@XZ ENDP			; CTaskTakeDamageFall::~CTaskTakeDamageFall
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ??0CTaskTakeDamageFall@@QAE@KK@Z
_TEXT	SEGMENT
_pTaskType$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_dwFallType$ = 8					; size = 4
_dwNum$ = 12						; size = 4
??0CTaskTakeDamageFall@@QAE@KK@Z PROC			; CTaskTakeDamageFall::CTaskTakeDamageFall, COMDAT
; _this$ = ecx

; 307  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CTaskTakeDamageFall@@QAE@KK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CTask@@QAE@XZ			; CTask::CTask
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTaskTakeDamageFall@@6B@

; 308  : 	m_pPlayerPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 309  : 
; 310  : 	Create(24);

	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CTask@@QAEXK@Z			; CTask::Create

; 311  : 
; 312  : 	BYTE *pTaskType = m_pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pTaskType$[ebp], ecx

; 313  : 	__asm
; 314  : 	{
; 315  : 		push dwNum;

	push	DWORD PTR _dwNum$[ebp]

; 316  : 		push 0;

	push	0

; 317  : 		push dwFallType;

	push	DWORD PTR _dwFallType$[ebp]

; 318  : 		mov ecx, pTaskType;

	mov	ecx, DWORD PTR _pTaskType$[ebp]

; 319  : 		mov eax, 0x6786C0;

	mov	eax, 6784704				; 006786c0H

; 320  : 		call eax;				// CTaskTakeDamageFall_ctor2

	call	eax

; 321  : 	}
; 322  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTaskTakeDamageFall@@QAE@KK@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CTask@@UAE@XZ			; CTask::~CTask
__ehhandler$??0CTaskTakeDamageFall@@QAE@KK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CTaskTakeDamageFall@@QAE@KK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CTaskTakeDamageFall@@QAE@KK@Z ENDP			; CTaskTakeDamageFall::CTaskTakeDamageFall
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCTaskJetpack@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCTaskJetpack@@UAEPAXI@Z PROC			; CTaskJetpack::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTaskJetpack@@UAE@XZ			; CTaskJetpack::~CTaskJetpack
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTaskJetpack@@UAEPAXI@Z ENDP			; CTaskJetpack::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ??1CTaskJetpack@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CTaskJetpack@@UAE@XZ PROC				; CTaskJetpack::~CTaskJetpack, COMDAT
; _this$ = ecx

; 297  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CTaskJetpack@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTaskJetpack@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 298  : 	if (m_pPlayerPed)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@CTaskJetpa

; 299  : 		m_pPlayerPed->m_pPed->Tasks->pdwJumpJetPack = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+1148]
	mov	DWORD PTR [eax+16], 0
$LN1@CTaskJetpa:

; 300  : 	CTask::Destroy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy@CTask@@UAEXXZ			; CTask::Destroy

; 301  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTask@@UAE@XZ			; CTask::~CTask
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CTaskJetpack@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CTask@@UAE@XZ			; CTask::~CTask
__ehhandler$??1CTaskJetpack@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CTaskJetpack@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CTaskJetpack@@UAE@XZ ENDP				; CTaskJetpack::~CTaskJetpack
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ??0CTaskJetpack@@QAE@PAE@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pTaskType$ = 8						; size = 4
??0CTaskJetpack@@QAE@PAE@Z PROC				; CTaskJetpack::CTaskJetpack, COMDAT
; _this$ = ecx

; 288  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CTaskJetpack@@QAE@PAE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CTask@@QAE@XZ			; CTask::CTask
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTaskJetpack@@6B@

; 289  : 	m_pPlayerPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 290  : 
; 291  : 	Create(pTaskType);

	mov	eax, DWORD PTR _pTaskType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CTask@@QAEXPAE@Z		; CTask::Create

; 292  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTaskJetpack@@QAE@PAE@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CTask@@UAE@XZ			; CTask::~CTask
__ehhandler$??0CTaskJetpack@@QAE@PAE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CTaskJetpack@@QAE@PAE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CTaskJetpack@@QAE@PAE@Z ENDP				; CTaskJetpack::CTaskJetpack
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ??0CTaskJetpack@@QAE@XZ
_TEXT	SEGMENT
_pTaskType$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CTaskJetpack@@QAE@XZ PROC				; CTaskJetpack::CTaskJetpack, COMDAT
; _this$ = ecx

; 267  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CTaskJetpack@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CTask@@QAE@XZ			; CTask::CTask
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTaskJetpack@@6B@

; 268  : 	m_pPlayerPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 269  : 	
; 270  : 	Create(112);

	push	112					; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CTask@@QAEXK@Z			; CTask::Create

; 271  : 
; 272  : 	BYTE *pTaskType = m_pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pTaskType$[ebp], ecx

; 273  : 	__asm
; 274  : 	{
; 275  : 		push 0;

	push	0

; 276  : 		push 0;

	push	0

; 277  : 		push 0x41200000;		// 10.0f

	push	1092616192				; 41200000H

; 278  : 		push 0;

	push	0

; 279  : 		mov ecx, pTaskType;

	mov	ecx, DWORD PTR _pTaskType$[ebp]

; 280  : 		mov eax, 0x67B4E0;	//  CTaskJetpack_CreateJetpack

	mov	eax, 6796512				; 0067b4e0H

; 281  : 		call eax;

	call	eax

; 282  : 	}
; 283  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTaskJetpack@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CTask@@UAE@XZ			; CTask::~CTask
__ehhandler$??0CTaskJetpack@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CTaskJetpack@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CTaskJetpack@@QAE@XZ ENDP				; CTaskJetpack::CTaskJetpack
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCTask@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCTask@@UAEPAXI@Z PROC				; CTask::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTask@@UAE@XZ			; CTask::~CTask
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTask@@UAEPAXI@Z ENDP				; CTask::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ?IsSimple@CTask@@UAEHXZ
_TEXT	SEGMENT
_bRet$ = -32						; size = 4
_pTaskType$ = -20					; size = 4
_this$ = -8						; size = 4
?IsSimple@CTask@@UAEHXZ PROC				; CTask::IsSimple, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 248  : 	BYTE *pTaskType = m_pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pTaskType$[ebp], ecx

; 249  : 	BOOL bRet;
; 250  : 	__asm
; 251  : 	{
; 252  : 		push ecx;

	push	ecx

; 253  : 		mov ecx, pTaskType;

	mov	ecx, DWORD PTR _pTaskType$[ebp]

; 254  : 		mov eax, [ecx];

	mov	eax, DWORD PTR [ecx]

; 255  : 		call [eax+0xC];

	call	DWORD PTR [eax+12]

; 256  : 		movzx eax, al;

	movzx	eax, al

; 257  : 		mov bRet, eax;

	mov	DWORD PTR _bRet$[ebp], eax

; 258  : 		pop ecx;

	pop	ecx

; 259  : 	}
; 260  : 	return bRet;

	mov	eax, DWORD PTR _bRet$[ebp]

; 261  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimple@CTask@@UAEHXZ ENDP				; CTask::IsSimple
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ?IsDestroyed@CTask@@UAEHXZ
_TEXT	SEGMENT
_dwVTbl$ = -20						; size = 4
_this$ = -8						; size = 4
?IsDestroyed@CTask@@UAEHXZ PROC				; CTask::IsDestroyed, COMDAT
; _this$ = ecx

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 	if (m_pTaskType == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@IsDestroye

; 234  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@IsDestroye
$LN2@IsDestroye:

; 235  : 
; 236  : 	DWORD dwVTbl = *((DWORD*)m_pTaskType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _dwVTbl$[ebp], edx

; 237  : 
; 238  : 	if (dwVTbl == 0x86D48C)		// CTask_vtbl

	cmp	DWORD PTR _dwVTbl$[ebp], 8836236	; 0086d48cH
	jne	SHORT $LN1@IsDestroye

; 239  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@IsDestroye
$LN1@IsDestroye:

; 240  : 
; 241  : 	return FALSE;

	xor	eax, eax
$LN3@IsDestroye:

; 242  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDestroyed@CTask@@UAEHXZ ENDP				; CTask::IsDestroyed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ?GetID@CTask@@UAEKXZ
_TEXT	SEGMENT
_dwID$ = -32						; size = 4
_pTaskType$ = -20					; size = 4
_this$ = -8						; size = 4
?GetID@CTask@@UAEKXZ PROC				; CTask::GetID, COMDAT
; _this$ = ecx

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 	BYTE *pTaskType = m_pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pTaskType$[ebp], ecx

; 216  : 	DWORD dwID;
; 217  : 	__asm
; 218  : 	{
; 219  : 		push ecx;

	push	ecx

; 220  : 		mov ecx, pTaskType;

	mov	ecx, DWORD PTR _pTaskType$[ebp]

; 221  : 		mov eax, [ecx];

	mov	eax, DWORD PTR [ecx]

; 222  : 		call [eax+0x10];

	call	DWORD PTR [eax+16]

; 223  : 		mov dwID, eax;

	mov	DWORD PTR _dwID$[ebp], eax

; 224  : 		pop ecx;

	pop	ecx

; 225  : 	}
; 226  : 	return dwID;

	mov	eax, DWORD PTR _dwID$[ebp]

; 227  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@CTask@@UAEKXZ ENDP				; CTask::GetID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ?ApplyToPed@CTask@@UAEXPAVCPlayerPed@@@Z
_TEXT	SEGMENT
_pTaskType$ = -32					; size = 4
_pPedTasksType$ = -20					; size = 4
_this$ = -8						; size = 4
_pPed$ = 8						; size = 4
?ApplyToPed@CTask@@UAEXPAVCPlayerPed@@@Z PROC		; CTask::ApplyToPed, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	extern BYTE *pbyteCurrentPlayer;
; 127  : 	m_pPlayerPed = pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPed$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 128  : 	PED_TASKS_TYPE *pPedTasksType = pPed->m_pPed->Tasks;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	mov	DWORD PTR _pPedTasksType$[ebp], edx

; 129  : 	BYTE *pTaskType = m_pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pTaskType$[ebp], ecx

; 130  : 
; 131  : 	*pbyteCurrentPlayer = pPed->m_bytePlayerNumber;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	ecx, DWORD PTR _pPed$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax], dl

; 132  : 
; 133  : 	__asm
; 134  : 	{
; 135  : 		push ecx;

	push	ecx

; 136  : 		
; 137  : 		mov ecx, pPedTasksType;

	mov	ecx, DWORD PTR _pPedTasksType$[ebp]

; 138  : 		push 0;

	push	0

; 139  : 		push 3;

	push	3

; 140  : 		push pTaskType;

	push	DWORD PTR _pTaskType$[ebp]

; 141  : 		add ecx, 4;

	add	ecx, 4

; 142  : 		mov eax, 0x681AF0;	

	mov	eax, 6822640				; 00681af0H

; 143  : 		call eax;			// AddTaskToActor

	call	eax

; 144  : 
; 145  : 		pop ecx;

	pop	ecx

; 146  : 	}
; 147  : 
; 148  : 	*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0

; 149  : 
; 150  : 
; 151  : 	/*
; 152  : 	(aru) Disabling this messy thing... The one above works just fine for now.
; 153  : 
; 154  : 	// Call a default applier here, but can be overloaded for special tasks
; 155  : 	PED_TYPE *pPedType = pPed->m_pPed;
; 156  : 	PED_TASKS_TYPE *pPedTasksType = pPedType->Tasks;
; 157  : 	BYTE *pTaskType = m_pTaskType;
; 158  : 	
; 159  : 	BYTE TaskAppBlock[24];
; 160  : 
; 161  : 	DWORD dwSomeSpecialArg = 0;
; 162  : 
; 163  : 	__asm
; 164  : 	{
; 165  : 		push ecx;
; 166  : 		push edi;
; 167  : 
; 168  : 		push 0;
; 169  : 		push pTaskType;
; 170  : 		push 3;
; 171  : 		lea ecx, TaskAppBlock;
; 172  : 		mov eax, 0x4B0A00;
; 173  : 		call eax;			// Initializes the TaskAppBlock
; 174  : 
; 175  : 		lea eax, TaskAppBlock;
; 176  : 		push eax;
; 177  : 		mov eax, pPedTasksType;
; 178  : 		lea ecx, [eax+0x68];
; 179  : 		mov eax, 0x4AB420;
; 180  : 		call eax;			// Does something with CPedIntelligence+0x68
; 181  : 
; 182  : 		mov edi, eax;
; 183  : 		test edi, edi;
; 184  : 		jz skipExtended;	// Skip out of the extended stuff
; 185  : 
; 186  : 		mov eax, 0x608540;	// This gets something and returns it in eax (3)
; 187  : 		call eax;
; 188  : 
; 189  : 		mov ecx, dwSomeSpecialArg;
; 190  : 		push edi;
; 191  : 		push ecx;
; 192  : 		lea ecx, [eax+eax*4];
; 193  : 		push pPedType;
; 194  : 		lea ecx, ds:0xC0B1E8[ecx*4];
; 195  : 		mov eax, 0x608390;
; 196  : 		call eax;			// No idea what this does. (10)
; 197  : 
; 198  : skipExtended:
; 199  : 
; 200  : 		lea ecx, TaskAppBlock;
; 201  : 		mov eax, 0x4B0A50;
; 202  : 		call eax;			// No idea what this does either (11)
; 203  : 
; 204  : 		pop edi;
; 205  : 		pop ecx;
; 206  : 	}
; 207  : 	*/
; 208  : 
; 209  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ApplyToPed@CTask@@UAEXPAVCPlayerPed@@@Z ENDP		; CTask::ApplyToPed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ?Destroy@CTask@@UAEXXZ
_TEXT	SEGMENT
_pTaskType$1 = -20					; size = 4
_this$ = -8						; size = 4
?Destroy@CTask@@UAEXXZ PROC				; CTask::Destroy, COMDAT
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	if (!IsDestroyed())

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@Destroy

; 91   : 	{
; 92   : 		BYTE *pTaskType = m_pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pTaskType$1[ebp], ecx

; 93   : 		if (m_bSelfCreated)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Destroy

; 94   : 		{
; 95   : 			__asm
; 96   : 			{
; 97   : 				push ecx;

	push	ecx

; 98   : 				mov ecx, pTaskType;

	mov	ecx, DWORD PTR _pTaskType$1[ebp]

; 99   : 				mov eax, [ecx];

	mov	eax, DWORD PTR [ecx]

; 100  : 				push 0;		// remove from pool?

	push	0

; 101  : 				call [eax+0];

	call	DWORD PTR [eax]

; 102  : 				pop ecx;

	pop	ecx

; 103  : 			}
; 104  : 		}
; 105  : 		else

	jmp	SHORT $LN1@Destroy
$LN2@Destroy:

; 106  : 		{
; 107  : 			__asm
; 108  : 			{
; 109  : 				push ecx;

	push	ecx

; 110  : 				mov ecx, pTaskType;

	mov	ecx, DWORD PTR _pTaskType$1[ebp]

; 111  : 				mov eax, [ecx];

	mov	eax, DWORD PTR [ecx]

; 112  : 				push 1;		// remove from pool?

	push	1

; 113  : 				call [eax+0];

	call	DWORD PTR [eax]

; 114  : 				pop ecx;

	pop	ecx
$LN1@Destroy:

; 115  : 			}
; 116  : 		}
; 117  : 		m_pTaskType = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 118  : 		m_pPlayerPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN4@Destroy:

; 119  : 	}
; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy@CTask@@UAEXXZ ENDP				; CTask::Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ?CreateCopy@CTask@@UAEPAV1@XZ
_TEXT	SEGMENT
tv73 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_pTaskType$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?CreateCopy@CTask@@UAEPAV1@XZ PROC			; CTask::CreateCopy, COMDAT
; _this$ = ecx

; 72   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCopy@CTask@@UAEPAV1@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 	BYTE *pTaskType = m_pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pTaskType$[ebp], ecx

; 74   : 	__asm
; 75   : 	{
; 76   : 		push ecx;

	push	ecx

; 77   : 		mov ecx, pTaskType;

	mov	ecx, DWORD PTR _pTaskType$[ebp]

; 78   : 		mov eax, [ecx];

	mov	eax, DWORD PTR [ecx]

; 79   : 		call [eax+0x4];

	call	DWORD PTR [eax+4]

; 80   : 		mov pTaskType, eax;

	mov	DWORD PTR _pTaskType$[ebp], eax

; 81   : 		pop ecx;

	pop	ecx

; 82   : 	}
; 83   : 	return new CTask(pTaskType);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@CreateCopy
	mov	eax, DWORD PTR _pTaskType$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CTask@@QAE@PAE@Z			; CTask::CTask
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@CreateCopy
$LN3@CreateCopy:
	mov	DWORD PTR tv73[ebp], 0
$LN4@CreateCopy:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]

; 84   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateCopy@CTask@@UAEPAV1@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateCopy@CTask@@UAEPAV1@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCopy@CTask@@UAEPAV1@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCopy@CTask@@UAEPAV1@XZ ENDP			; CTask::CreateCopy
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ?Create@CTask@@QAEXPAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pTaskType$ = 8						; size = 4
?Create@CTask@@QAEXPAE@Z PROC				; CTask::Create, COMDAT
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 	m_bSelfCreated = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 66   : 	m_pTaskType = pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTaskType$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Create@CTask@@QAEXPAE@Z ENDP				; CTask::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ?Create@CTask@@QAEXK@Z
_TEXT	SEGMENT
_pTaskType$ = -20					; size = 4
_this$ = -8						; size = 4
_dwSize$ = 8						; size = 4
?Create@CTask@@QAEXK@Z PROC				; CTask::Create, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	BYTE *pTaskType;
; 49   : 	__asm
; 50   : 	{
; 51   : 		push dwSize;

	push	DWORD PTR _dwSize$[ebp]

; 52   : 		mov eax, 0x61A5A0;	// CTask_New

	mov	eax, 6399392				; 0061a5a0H

; 53   : 		call eax;

	call	eax

; 54   : 		add esp, 4;

	add	esp, 4

; 55   : 		mov pTaskType, eax;

	mov	DWORD PTR _pTaskType$[ebp], eax

; 56   : 	}
; 57   : 	m_bSelfCreated = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1

; 58   : 	m_pTaskType = pTaskType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTaskType$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 59   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Create@CTask@@QAEXK@Z ENDP				; CTask::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ??1CTask@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CTask@@UAE@XZ PROC					; CTask::~CTask, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTask@@6B@

; 42   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTask@@UAE@XZ ENDP					; CTask::~CTask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ??0CTask@@QAE@PAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pTaskType$ = 8						; size = 4
??0CTask@@QAE@PAE@Z PROC				; CTask::CTask, COMDAT
; _this$ = ecx

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTask@@6B@

; 33   : 	m_pTaskType = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 34   : 	m_pPlayerPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 35   : 	Create(pTaskType);	

	mov	eax, DWORD PTR _pTaskType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CTask@@QAEXPAE@Z		; CTask::Create

; 36   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CTask@@QAE@PAE@Z ENDP				; CTask::CTask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ??0CTask@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwSize$ = 8						; size = 4
??0CTask@@QAE@K@Z PROC					; CTask::CTask, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTask@@6B@

; 24   : 	m_pTaskType = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 25   : 	m_pPlayerPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 26   : 	Create(dwSize);

	mov	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CTask@@QAEXK@Z			; CTask::Create

; 27   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CTask@@QAE@K@Z ENDP					; CTask::CTask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\task.cpp
;	COMDAT ??0CTask@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CTask@@QAE@XZ PROC					; CTask::CTask, COMDAT
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CTask@@6B@

; 16   : 	m_pTaskType = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 17   : 	m_pPlayerPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 18   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTask@@QAE@XZ ENDP					; CTask::CTask
_TEXT	ENDS
END
