; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\game\patches.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?pbyteVehiclePoolAllocPatch@@3PAEA		; pbyteVehiclePoolAllocPatch
PUBLIC	?pbyteCollisionPoolAllocPatch@@3PAEA		; pbyteCollisionPoolAllocPatch
PUBLIC	?pbyteEntryInfoPoolAllocPatch@@3PAEA		; pbyteEntryInfoPoolAllocPatch
PUBLIC	?pbyteTrainDelrailmentPatch@@3PAEA		; pbyteTrainDelrailmentPatch
PUBLIC	?PedModelsMemory@@3PAU_PED_MODEL@@A		; PedModelsMemory
PUBLIC	?ScanListMemory@@3PAEA				; ScanListMemory
PUBLIC	?dwPatchAddrScanReloc1USA@@3PAKA		; dwPatchAddrScanReloc1USA
PUBLIC	?dwPatchAddrScanReloc1EU@@3PAKA			; dwPatchAddrScanReloc1EU
PUBLIC	?dwPatchAddrScanReloc2USA@@3PAKA		; dwPatchAddrScanReloc2USA
PUBLIC	?dwPatchAddrScanReloc2EU@@3PAKA			; dwPatchAddrScanReloc2EU
PUBLIC	?dwPatchAddrScanReloc3@@3PAKA			; dwPatchAddrScanReloc3
PUBLIC	?dwPatchAddrScanRelocEnd@@3PAKA			; dwPatchAddrScanRelocEnd
_BSS	SEGMENT
?PedModelsMemory@@3PAU_PED_MODEL@@A DB 09f60H DUP (?)	; PedModelsMemory
?ScanListMemory@@3PAEA DB 027100H DUP (?)		; ScanListMemory
_BSS	ENDS
_DATA	SEGMENT
?pbyteVehiclePoolAllocPatch@@3PAEA DB 06aH		; pbyteVehiclePoolAllocPatch
	DB	00H
	DB	068H
	DB	0c6H
	DB	02H
	DB	00H
	DB	00H
	ORG $+1
?pbyteCollisionPoolAllocPatch@@3PAEA DB 068H		; pbyteCollisionPoolAllocPatch
	DB	0ffH
	DB	07eH
	DB	00H
	DB	00H
	ORG $+3
?pbyteEntryInfoPoolAllocPatch@@3PAEA DB 068H		; pbyteEntryInfoPoolAllocPatch
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	ORG $+3
?pbyteTrainDelrailmentPatch@@3PAEA DB 0b8H		; pbyteTrainDelrailmentPatch
	DB	089H
	DB	08fH
	DB	06fH
	DB	00H
	DB	0ffH
	DB	0e0H
	ORG $+1
?dwPatchAddrScanReloc1USA@@3PAKA DD 05dc7aaH		; dwPatchAddrScanReloc1USA
	DD	041a85dH
	DD	041a864H
	DD	0408259H
	DD	0711b32H
	DD	0699cf8H
	DD	04092ecH
	DD	040914eH
	DD	0408702H
	DD	0564220H
	DD	0564172H
	DD	0563845H
	DD	084e9c2H
	DD	085652dH
?dwPatchAddrScanReloc1EU@@3PAKA DD 05dc7aaH		; dwPatchAddrScanReloc1EU
	DD	041a85dH
	DD	041a864H
	DD	0408261H
	DD	0711b32H
	DD	0699cf8H
	DD	04092ecH
	DD	040914eH
	DD	0408702H
	DD	0564220H
	DD	0564172H
	DD	0563845H
	DD	084ea02H
	DD	085656dH
?dwPatchAddrScanReloc2USA@@3PAKA DD 040d68cH		; dwPatchAddrScanReloc2USA
	DD	05664d7H
	DD	0566586H
	DD	0408706H
	DD	056b3b1H
	DD	056ad91H
	DD	056a85fH
	DD	05675faH
	DD	056cd84H
	DD	056cc79H
	DD	056cb51H
	DD	056ca4aH
	DD	056c664H
	DD	056c569H
	DD	056c445H
	DD	056c341H
	DD	056bd46H
	DD	056bc53H
	DD	056be56H
	DD	056a940H
	DD	0567735H
	DD	0546738H
	DD	054bb23H
	DD	06e31aaH
	DD	040dc29H
	DD	0534a09H
	DD	0534d6bH
	DD	0564b59H
	DD	0564da9H
	DD	067ff5dH
	DD	0568cb9H
	DD	0568efbH
	DD	0569f57H
	DD	0569537H
	DD	0569127H
	DD	056b4b5H
	DD	056b594H
	DD	056b2c3H
	DD	056af74H
	DD	056ae95H
	DD	056bf4fH
	DD	056aca3H
	DD	056a766H
	DD	056a685H
	DD	070b9baH
	DD	056479dH
	DD	070acb2H
	DD	06063c7H
	DD	0699cfeH
	DD	041a861H
	DD	040e061H
	DD	040df5eH
	DD	040ddceH
	DD	040db0eH
	DD	040d98cH
	DD	01566855H
?dwPatchAddrScanReloc2EU@@3PAKA DD 040d68cH		; dwPatchAddrScanReloc2EU
	DD	05664d7H
	DD	0566586H
	DD	0408706H
	DD	056b3b1H
	DD	056ad91H
	DD	056a85fH
	DD	05675faH
	DD	056cd84H
	DD	056cc79H
	DD	056cb51H
	DD	056ca4aH
	DD	056c664H
	DD	056c569H
	DD	056c445H
	DD	056c341H
	DD	056bd46H
	DD	056bc53H
	DD	056be56H
	DD	056a940H
	DD	0567735H
	DD	0546738H
	DD	054bb23H
	DD	06e31aaH
	DD	040dc29H
	DD	0534a09H
	DD	0534d6bH
	DD	0564b59H
	DD	0564da9H
	DD	067ff5dH
	DD	0568cb9H
	DD	0568efbH
	DD	0569f57H
	DD	0569537H
	DD	0569127H
	DD	056b4b5H
	DD	056b594H
	DD	056b2c3H
	DD	056af74H
	DD	056ae95H
	DD	056bf4fH
	DD	056aca3H
	DD	056a766H
	DD	056a685H
	DD	070b9baH
	DD	056479dH
	DD	070acb2H
	DD	06063c7H
	DD	0699cfeH
	DD	041a861H
	DD	040e061H
	DD	040df5eH
	DD	040ddceH
	DD	040db0eH
	DD	040d98cH
	DD	01566845H
?dwPatchAddrScanReloc3@@3PAKA DD 04091c5H		; dwPatchAddrScanReloc3
	DD	0409367H
	DD	040d9c5H
	DD	040db47H
	DD	040dc61H
	DD	040de07H
	DD	040df97H
	DD	040e09aH
	DD	0534a98H
	DD	0534dfaH
	DD	071cdb0H
?dwPatchAddrScanRelocEnd@@3PAKA DD 05634a6H		; dwPatchAddrScanRelocEnd
	DD	05638dfH
	DD	056420fH
	DD	0564283H
_DATA	ENDS
PUBLIC	?UnFuck@@YAXKH@Z				; UnFuck
PUBLIC	?RelocateScanListHack@@YAXXZ			; RelocateScanListHack
PUBLIC	?RelocatePedsListHack@@YAXXZ			; RelocatePedsListHack
PUBLIC	?_patch@@YAXKPAEH@Z				; _patch
PUBLIC	?SetIPLs@@YAXHH@Z				; SetIPLs
PUBLIC	?SetTimedObjects@@YAXH@Z			; SetTimedObjects
PUBLIC	?UnFuckAndCheck@@YAXKHE@Z			; UnFuckAndCheck
PUBLIC	?ApplyDebugLevelPatches@@YAXXZ			; ApplyDebugLevelPatches
PUBLIC	?ApplyPreGamePatches@@YAHXZ			; ApplyPreGamePatches
PUBLIC	?ApplyInGamePatches@@YAXXZ			; ApplyInGamePatches
PUBLIC	??_C@_0BL@EFDBDHGD@Failed?5Check?5At?5Addr?3?50x?$CFX?$AA@ ; `string'
PUBLIC	??_C@_05PHLGJONK@title?$AA@			; `string'
PUBLIC	__real@43d70000
EXTRN	_sprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__VirtualProtect@16:PROC
EXTRN	_malloc:PROC
EXTRN	?InstallSCMEventsProcessor@@YAXXZ:PROC		; InstallSCMEventsProcessor
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?iGtaVersion@@3HA:DWORD				; iGtaVersion
EXTRN	?dwUIMode@@3KA:DWORD				; dwUIMode
EXTRN	?dwFarClipHookAddr@@3KA:DWORD			; dwFarClipHookAddr
EXTRN	?dwFarClipReturnAddr@@3KA:DWORD			; dwFarClipReturnAddr
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@43d70000
CONST	SEGMENT
__real@43d70000 DD 043d70000r			; 430
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05PHLGJONK@title?$AA@
CONST	SEGMENT
??_C@_05PHLGJONK@title?$AA@ DB 'title', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EFDBDHGD@Failed?5Check?5At?5Addr?3?50x?$CFX?$AA@
CONST	SEGMENT
??_C@_0BL@EFDBDHGD@Failed?5Check?5At?5Addr?3?50x?$CFX?$AA@ DB 'Failed Che'
	DB	'ck At Addr: 0x%X', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?ApplyInGamePatches@@YAXXZ
_TEXT	SEGMENT
?ApplyInGamePatches@@YAXXZ PROC				; ApplyInGamePatches, COMDAT

; 204  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 205  : 	if(GTASA_VERSION_USA10 == iGtaVersion) {

	cmp	DWORD PTR ?iGtaVersion@@3HA, 1		; iGtaVersion
	jne	SHORT $LN3@ApplyInGam

; 206  : 		dwFarClipHookAddr = 0x7EE2A0;

	mov	DWORD PTR ?dwFarClipHookAddr@@3KA, 8315552 ; dwFarClipHookAddr, 007ee2a0H

; 207  : 		dwFarClipReturnAddr = dwFarClipHookAddr+9;

	mov	eax, DWORD PTR ?dwFarClipHookAddr@@3KA	; dwFarClipHookAddr
	add	eax, 9
	mov	DWORD PTR ?dwFarClipReturnAddr@@3KA, eax ; dwFarClipReturnAddr

; 208  : 	} else {

	jmp	SHORT $LN2@ApplyInGam
$LN3@ApplyInGam:

; 209  : 		dwFarClipHookAddr = 0x7EE2E0;

	mov	DWORD PTR ?dwFarClipHookAddr@@3KA, 8315616 ; dwFarClipHookAddr, 007ee2e0H

; 210  : 		dwFarClipReturnAddr = dwFarClipHookAddr+9;

	mov	eax, DWORD PTR ?dwFarClipHookAddr@@3KA	; dwFarClipHookAddr
	add	eax, 9
	mov	DWORD PTR ?dwFarClipReturnAddr@@3KA, eax ; dwFarClipReturnAddr
$LN2@ApplyInGam:

; 211  : 	}	
; 212  : 
; 213  : 	// APPLY THE DAMN NOP PATCH AND QUIT ASCIING QUESTIONS!
; 214  : 
; 215  : 	/* Frame limiter default ~40 fps
; 216  : 	UnFuck(0xC1704C,1);
; 217  : 	*(PDWORD)0xC1704C = 55UL; // yes that means 40..*/
; 218  : 
; 219  : 	// Increase the vehicle pool limit (see top of proc for patch)
; 220  : 	UnFuckAndCheck(0x551024,sizeof(pbyteVehiclePoolAllocPatch),0x68);

	push	104					; 00000068H
	push	7
	push	5574692					; 00551024H
	call	?UnFuckAndCheck@@YAXKHE@Z		; UnFuckAndCheck
	add	esp, 12					; 0000000cH

; 221  : 	memcpy((PVOID)0x551024,pbyteVehiclePoolAllocPatch,sizeof(pbyteVehiclePoolAllocPatch));

	push	7
	push	OFFSET ?pbyteVehiclePoolAllocPatch@@3PAEA ; pbyteVehiclePoolAllocPatch
	push	5574692					; 00551024H
	call	_memcpy
	add	esp, 12					; 0000000cH

; 222  : 
; 223  : 	/* ----THIS IS GTAU STUFF
; 224  : 	// Increase Buildings
; 225  : 	UnFuck(0x55105F,4);
; 226  : 	*(DWORD *)0x55105F = 160000;
; 227  : 
; 228  : 	// Increase Dummys
; 229  : 	UnFuck(0x5510CF,4);
; 230  : 	*(DWORD *)0x5510CF = 16000;
; 231  : 
; 232  : 	// Increase Ptr Node Double
; 233  : 	UnFuck(0x550F82,4);
; 234  : 	*(DWORD *)0x550F82 = 20000;
; 235  : 
; 236  : 	// Increase IPL Files
; 237  : 	UnFuck(0x405F26,4);
; 238  : 	*(DWORD *)0x405F26 = 4096;
; 239  : 
; 240  : 	// Increase Object Pool
; 241  : 	UnFuck(0x551097,4);
; 242  : 	*(DWORD *)0x551097 = 1000;
; 243  : 
; 244  : 	// Increase IPLs
; 245  : 	SetIPLs(200,iGtaVersion);
; 246  : 
; 247  : 	// Increase Timed Objects
; 248  : 	SetTimedObjects(1000);*/
; 249  : 	// ----END GTAU
; 250  : 	
; 251  : 	// Increase the ped pool limit (210)
; 252  : 	UnFuck(0x550FF2,1);

	push	1
	push	5574642					; 00550ff2H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 253  : 	*(PBYTE)0x550FF2 = 0xD2;

	mov	BYTE PTR ds:5574642, 210		; 000000d2H

; 254  : 
; 255  : 	// And we need 210 ped intelligence too plz
; 256  : 	UnFuck(0x551283,1);

	push	1
	push	5575299					; 00551283H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 257  : 	*(PBYTE)0x551283 = 0xD2; // thx

	mov	BYTE PTR ds:5575299, 210		; 000000d2H

; 258  : 	
; 259  : 	// And a larger task pool
; 260  : 	UnFuck(0x551140,1);

	push	1
	push	5574976					; 00551140H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 261  : 	*(PBYTE)0x551140 = 0x05; // 1524

	mov	BYTE PTR ds:5574976, 5

; 262  : 
; 263  : 	// And a larger event pool
; 264  : 	UnFuck(0x551178,1);

	push	1
	push	5575032					; 00551178H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 265  : 	*(PBYTE)0x551178 = 0x01; // 456

	mov	BYTE PTR ds:5575032, 1

; 266  : 
; 267  : 	// And we'd definitely need some more matrices.
; 268  : 	// Who doesn't need more matrices?
; 269  : 	UnFuck(0x54F3A2,1);

	push	1
	push	5567394					; 0054f3a2H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 270  : 	*(PBYTE)0x54F3A2 = 0x15; // 4228

	mov	BYTE PTR ds:5567394, 21			; 00000015H

; 271  : 
; 272  : 	// (aru) Patch the VehicleStruct pool to have more than 50 vehicles
; 273  : 	//       We'll use 127 (max is 211 vehicles)
; 274  : 	//       We can't just patch the imm8 in the push due to it being unsigned
; 275  : 	//       so, we'll use our intelligence to hack it in :)
; 276  : 	UnFuck(0x5B8FDE, 7);

	push	7
	push	6000606					; 005b8fdeH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 277  : 	*(BYTE*)0x5B8FDE = 0x6A;	// push imm8

	mov	BYTE PTR ds:6000606, 106		; 0000006aH

; 278  : 	*(BYTE*)0x5B8FDF = 0x00;	// 0

	mov	BYTE PTR ds:6000607, 0

; 279  : 	*(BYTE*)0x5B8FE0 = 0x68;	// push imm32

	mov	BYTE PTR ds:6000608, 104		; 00000068H

; 280  : 	*(BYTE*)0x5B8FE1 = 127;		// 127 types

	mov	BYTE PTR ds:6000609, 127		; 0000007fH

; 281  : 	*(BYTE*)0x5B8FE2 = 0x00;

	mov	BYTE PTR ds:6000610, 0

; 282  : 	*(BYTE*)0x5B8FE3 = 0x00;

	mov	BYTE PTR ds:6000611, 0

; 283  : 	*(BYTE*)0x5B8FE4 = 0x00;

	mov	BYTE PTR ds:6000612, 0

; 284  : 	
; 285  : 	// Increase the collision model ptr
; 286  : 	UnFuck(0x551106,sizeof(pbyteCollisionPoolAllocPatch));

	push	5
	push	5574918					; 00551106H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 287  : 	memcpy((PVOID)0x551106,pbyteCollisionPoolAllocPatch,sizeof(pbyteCollisionPoolAllocPatch));

	push	5
	push	OFFSET ?pbyteCollisionPoolAllocPatch@@3PAEA ; pbyteCollisionPoolAllocPatch
	push	5574918					; 00551106H
	call	_memcpy
	add	esp, 12					; 0000000cH

; 288  : 
; 289  : 	// Increase the entry info nodes
; 290  : 	UnFuck(0x550FB9,sizeof(pbyteEntryInfoPoolAllocPatch));

	push	5
	push	5574585					; 00550fb9H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 291  : 	memcpy((PVOID)0x550FB9,pbyteEntryInfoPoolAllocPatch,sizeof(pbyteEntryInfoPoolAllocPatch));

	push	5
	push	OFFSET ?pbyteEntryInfoPoolAllocPatch@@3PAEA ; pbyteEntryInfoPoolAllocPatch
	push	5574585					; 00550fb9H
	call	_memcpy
	add	esp, 12					; 0000000cH

; 292  : 
; 293  : 	//------------------
; 294  : 	
; 295  : 	/* clouds RenderEffects (needs checking)
; 296  : 	UnFuck(0x53E1AF,10);
; 297  : 	memset((PVOID)0x53E1AF,0x90,10);
; 298  : 
; 299  : 	// 53E121 (15) low level cloud (needs checking)
; 300  : 	UnFuck(0x53E121,15);
; 301  : 	memset((PVOID)0x53E121,0x90,15);*/
; 302  : 
; 303  : 	// Remove random procedural geometry like plants/rocks etc.
; 304  : 	UnFuck(0x53C159,5);

	push	5
	push	5488985					; 0053c159H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 305  : 	memset((PVOID)0x53C159,0x90,5);

	push	5
	push	144					; 00000090H
	push	5488985					; 0053c159H
	call	_memset
	add	esp, 12					; 0000000cH

; 306  : 	
; 307  : 	if (dwUIMode != 0) 

	cmp	DWORD PTR ?dwUIMode@@3KA, 0		; dwUIMode
	je	SHORT $LN1@ApplyInGam

; 308  : 	{
; 309  : 		// Move the radar to the top left of the screen
; 310  : 		UnFuck(0x866B70,4);

	push	4
	push	8809328					; 00866b70H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 311  : 		*(float *)0x866B70 = 430.0f;

	movss	xmm0, DWORD PTR __real@43d70000
	movss	DWORD PTR ds:8809328, xmm0
$LN1@ApplyInGam:

; 312  : 	    
; 313  : 		// Scale down the hud slightly
; 314  : 		//UnFuck(0x859520,8);
; 315  : 		//*(float *)0x859520 = 0.0011f;
; 316  : 		//*(float *)0x859524 = 0.00172f;
; 317  : 	}
; 318  : 
; 319  : 	/* Cursor hiding
; 320  : 	UnFuck(0x7481CD,16);
; 321  : 	memset((PVOID)0x7481CD,0x90,16);
; 322  :     
; 323  : 	UnFuck(0x747FEA,1);
; 324  : 	*(BYTE*)0x747FEA = 1;
; 325  : 
; 326  : 	// A SetCursorPos proc internally
; 327  : 	UnFuck(0x6194A0,1);
; 328  : 	*(PBYTE)0x6194A0 = 0xC3;*/
; 329  : 
; 330  : 	// No vehicle name rendering
; 331  : 	UnFuck(0x58FBE9,5);

	push	5
	push	5831657					; 0058fbe9H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 332  :     memset((PVOID)0x58FBE9,0x90,5);

	push	5
	push	144					; 00000090H
	push	5831657					; 0058fbe9H
	call	_memset
	add	esp, 12					; 0000000cH

; 333  : 
; 334  : 	// No playidles anim loading.
; 335  : 	UnFuck(0x86D1EC,1);

	push	1
	push	8835564					; 0086d1ecH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 336  : 	*(BYTE*)0x86D1EC = '\0';

	mov	BYTE PTR ds:8835564, 0

; 337  : 
; 338  : 	// Prevent replays
; 339  : 	UnFuck(0x53C090,5);

	push	5
	push	5488784					; 0053c090H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 340  : 	memset((PVOID)0x53C090,0x90,5);

	push	5
	push	144					; 00000090H
	push	5488784					; 0053c090H
	call	_memset
	add	esp, 12					; 0000000cH

; 341  : 
; 342  : 	// NO MORE INTERIOR PEDS
; 343  : 	UnFuck(0x440833,8);

	push	8
	push	4458547					; 00440833H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 344  : 	memset((PVOID)0x440833,0x90,8);

	push	8
	push	144					; 00000090H
	push	4458547					; 00440833H
	call	_memset
	add	esp, 12					; 0000000cH

; 345  : 
; 346  : 	// (ped shadows crash)
; 347  : 	UnFuck(0x53EA08,10);

	push	10					; 0000000aH
	push	5499400					; 0053ea08H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 348  : 	memset((PVOID)0x53EA08,0x90,10);

	push	10					; 0000000aH
	push	144					; 00000090H
	push	5499400					; 0053ea08H
	call	_memset
	add	esp, 12					; 0000000cH

; 349  : 
; 350  : 	// Anti-pause
; 351  : 	UnFuck(0x561AF0,7);

	push	7
	push	5642992					; 00561af0H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 352  : 	memset((PVOID)0x561AF0,0x90,7);

	push	7
	push	144					; 00000090H
	push	5642992					; 00561af0H
	call	_memset
	add	esp, 12					; 0000000cH

; 353  : 	
; 354  : 	// Unknown from CPlayerPed::ProcessControl causes crash
; 355  : 	UnFuck(0x609C08,39);

	push	39					; 00000027H
	push	6331400					; 00609c08H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 356  : 	memset((PVOID)0x609C08,0x90,39);

	push	39					; 00000027H
	push	144					; 00000090H
	push	6331400					; 00609c08H
	call	_memset
	add	esp, 12					; 0000000cH

; 357  : 
; 358  : 	// FindPlayerVehicle (Always use nPlayerPed)
; 359  : 	UnFuck(0x56E0FA,18);

	push	18					; 00000012H
	push	5693690					; 0056e0faH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 360  : 	memset((PVOID)0x56E0FA,0x90,18);

	push	18					; 00000012H
	push	144					; 00000090H
	push	5693690					; 0056e0faH
	call	_memset
	add	esp, 12					; 0000000cH

; 361  : 
; 362  : 	// CMotorBike::ProcessControlInputs.. why oh why..
; 363  : 	UnFuck(0x6BC9EB,2);

	push	2
	push	7064043					; 006bc9ebH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 364  : 	memset((PVOID)0x6BC9EB,0x90,2);

	push	2
	push	144					; 00000090H
	push	7064043					; 006bc9ebH
	call	_memset
	add	esp, 12					; 0000000cH

; 365  : 
; 366  : 	// This removes the random weapon pickups (e.g. on the hill near chilliad)
; 367  : 	UnFuck(0x5B47B0,1);

	push	1
	push	5982128					; 005b47b0H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 368  : 	memset((PVOID)0x5B47B0,0xC3,1);

	push	1
	push	195					; 000000c3H
	push	5982128					; 005b47b0H
	call	_memset
	add	esp, 12					; 0000000cH

; 369  : 
; 370  : 	// Removes the FindPlayerInfoForThisPlayerPed at these locations.
; 371  : 	UnFuck(0x5E63A6,19);

	push	19					; 00000013H
	push	6185894					; 005e63a6H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 372  : 	memset((PVOID)0x5E63A6,0x90,19);

	push	19					; 00000013H
	push	144					; 00000090H
	push	6185894					; 005e63a6H
	call	_memset
	add	esp, 12					; 0000000cH

; 373  : 
; 374  : 	UnFuck(0x621AEA,12);

	push	12					; 0000000cH
	push	6429418					; 00621aeaH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 375  : 	memset((PVOID)0x621AEA,0x90,12);

	push	12					; 0000000cH
	push	144					; 00000090H
	push	6429418					; 00621aeaH
	call	_memset
	add	esp, 12					; 0000000cH

; 376  : 
; 377  : 	UnFuck(0x62D331,11);

	push	11					; 0000000bH
	push	6476593					; 0062d331H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 378  : 	memset((PVOID)0x62D331,0x90,11);

	push	11					; 0000000bH
	push	144					; 00000090H
	push	6476593					; 0062d331H
	call	_memset
	add	esp, 12					; 0000000cH

; 379  : 
; 380  : 	UnFuck(0x741FFF,27);

	push	27					; 0000001bH
	push	7610367					; 00741fffH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 381  : 	memset((PVOID)0x741FFF,0x90,27);

	push	27					; 0000001bH
	push	144					; 00000090H
	push	7610367					; 00741fffH
	call	_memset
	add	esp, 12					; 0000000cH

; 382  : 
; 383  : 	/* temp testing vehicle horn
; 384  : 	UnFuck(0x500360,11);
; 385  : 	memset((PVOID)0x500360,0x90,11);*/
; 386  : 	
; 387  : 	// hack to remove motion blur in high speed vehicle
; 388  : 	UnFuck(0x704E8A,5);

	push	5
	push	7360138					; 00704e8aH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 389  : 	memset((PVOID)0x704E8A,0x90,5);

	push	5
	push	144					; 00000090H
	push	7360138					; 00704e8aH
	call	_memset
	add	esp, 12					; 0000000cH

; 390  : 
; 391  : 	// Respawn and Interior
; 392  : 	UnFuck(0x4090A0,1);

	push	1
	push	4231328					; 004090a0H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 393  : 	*(BYTE*)0x4090A0 = 0xC3;

	mov	BYTE PTR ds:4231328, 195		; 000000c3H

; 394  : 	
; 395  : 	// Respawn and Interior
; 396  : 	UnFuck(0x441482,5);

	push	5
	push	4461698					; 00441482H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 397  : 	memset((void*)0x441482, 0x90, 5);

	push	5
	push	144					; 00000090H
	push	4461698					; 00441482H
	call	_memset
	add	esp, 12					; 0000000cH

; 398  : 
; 399  : 	// No MessagePrint
; 400  : 	UnFuck(0x588BE0,1);

	push	1
	push	5802976					; 00588be0H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 401  : 	*(BYTE*)0x588BE0 = 0xC3;

	mov	BYTE PTR ds:5802976, 195		; 000000c3H

; 402  : 
; 403  : 	// No IPL vehicle
; 404  : 	UnFuck(0x53C06A,5);

	push	5
	push	5488746					; 0053c06aH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 405  : 	memset((PVOID)0x53C06A,0x90,5);

	push	5
	push	144					; 00000090H
	push	5488746					; 0053c06aH
	call	_memset
	add	esp, 12					; 0000000cH

; 406  : 
; 407  : 	// SomeCarGenerator (0x41a8b3 crash)
; 408  : 	UnFuck(0x434272,5);

	push	5
	push	4407922					; 00434272H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 409  : 	memset((PVOID)0x434272,0x90,5);

	push	5
	push	144					; 00000090H
	push	4407922					; 00434272H
	call	_memset
	add	esp, 12					; 0000000cH

; 410  : 
; 411  : 	// CPlayerPed_CPlayerPed .. task system corrupts some shit
; 412  : 	UnFuck(0x60D64D,2);

	push	2
	push	6346317					; 0060d64dH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 413  : 	*(PBYTE)0x60D64E = 0x84; // jnz to jz

	mov	BYTE PTR ds:6346318, 132		; 00000084H

; 414  : 	
; 415  : 	// CPhysical Destructor (705b3b crash)
; 416  : 	UnFuck(0x542485,11);

	push	11					; 0000000bH
	push	5514373					; 00542485H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 417  : 	memset((PVOID)0x542485,0x90,11);

	push	11					; 0000000bH
	push	144					; 00000090H
	push	5514373					; 00542485H
	call	_memset
	add	esp, 12					; 0000000cH

; 418  : 	
; 419  : 	// No peds kthx. (CPopulation::AddPed() nulled)
; 420  : 	UnFuck(0x612710,3);

	push	3
	push	6366992					; 00612710H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 421  : 	*(BYTE*)0x612710 = 0x33;

	mov	BYTE PTR ds:6366992, 51			; 00000033H

; 422  : 	*(BYTE*)0x612711 = 0xC0; // xor eax, eax

	mov	BYTE PTR ds:6366993, 192		; 000000c0H

; 423  : 	*(BYTE*)0x612712 = 0xC3; // ret

	mov	BYTE PTR ds:6366994, 195		; 000000c3H

; 424  : 
; 425  : 	// Fuck the call to CPopulation::AddPed() for create_train off to kingdom kong	
; 426  :     UnFuck(0x613BA7, 5);

	push	5
	push	6372263					; 00613ba7H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 427  : 	*(BYTE*)0x613BA7 = 0x90;

	mov	BYTE PTR ds:6372263, 144		; 00000090H

; 428  : 	*(BYTE*)0x613BA8 = 0x90;

	mov	BYTE PTR ds:6372264, 144		; 00000090H

; 429  : 	*(BYTE*)0x613BA9 = 0x90;

	mov	BYTE PTR ds:6372265, 144		; 00000090H

; 430  : 	*(BYTE*)0x613BAA = 0x90;

	mov	BYTE PTR ds:6372266, 144		; 00000090H

; 431  : 	*(BYTE*)0x613BAB = 0x90;

	mov	BYTE PTR ds:6372267, 144		; 00000090H

; 432  : 
; 433  : 	// Don't go back to player anims, use the peds IDE
; 434  : 	UnFuck(0x609A4E,6);

	push	6
	push	6330958					; 00609a4eH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 435  : 	memset((PVOID)0x609A4E, 0x90, 6);

	push	6
	push	144					; 00000090H
	push	6330958					; 00609a4eH
	call	_memset
	add	esp, 12					; 0000000cH

; 436  : 
; 437  : 	// Train derailment 
; 438  : 	UnFuck(0x006F8CF8, 12);

	push	12					; 0000000cH
	push	7310584					; 006f8cf8H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 439  : 	memset((PVOID)0x006F8CF8, 0x90, 5); // (Actual hook is installed in hooks.cpp)

	push	5
	push	144					; 00000090H
	push	7310584					; 006f8cf8H
	call	_memset
	add	esp, 12					; 0000000cH

; 440  : 	memcpy((PVOID)(0x006F8CF8+5), pbyteTrainDelrailmentPatch, sizeof(pbyteTrainDelrailmentPatch));

	push	7
	push	OFFSET ?pbyteTrainDelrailmentPatch@@3PAEA ; pbyteTrainDelrailmentPatch
	push	7310589					; 006f8cfdH
	call	_memcpy
	add	esp, 12					; 0000000cH

; 441  : 
; 442  : 	// CarCtl::GenerateRandomCars nulled from CGame::Process (firetrucks etc)
; 443  : 	UnFuck(0x53C1C1,5);

	push	5
	push	5489089					; 0053c1c1H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 444  : 	memset((PVOID)0x53C1C1,0x90,5);

	push	5
	push	144					; 00000090H
	push	5489089					; 0053c1c1H
	call	_memset
	add	esp, 12					; 0000000cH

; 445  : 
; 446  : 	// (540040 bug), test ecx for 0 instead of [ecx+270]
; 447  : 	UnFuck(0x540040,10);

	push	10					; 0000000aH
	push	5505088					; 00540040H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 448  : 	// nop the first 8 bytes
; 449  : 	memset((PVOID)0x540040,0x90,6);

	push	6
	push	144					; 00000090H
	push	5505088					; 00540040H
	call	_memset
	add	esp, 12					; 0000000cH

; 450  : 	*(PBYTE)0x540046 = 0x85;

	mov	BYTE PTR ds:5505094, 133		; 00000085H

; 451  : 	*(PBYTE)0x540047 = 0xC9; // test ecx, ecx

	mov	BYTE PTR ds:5505095, 201		; 000000c9H

; 452  : 	*(PBYTE)0x540048 = 0x74; // jz

	mov	BYTE PTR ds:5505096, 116		; 00000074H

; 453  : 	
; 454  : 	// No wasted message
; 455  : 	UnFuck(0x56E5AD,5);

	push	5
	push	5694893					; 0056e5adH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 456  : 	memset((PVOID)0x56E5AD,0x90,5);

	push	5
	push	144					; 00000090H
	push	5694893					; 0056e5adH
	call	_memset
	add	esp, 12					; 0000000cH

; 457  : 
; 458  : 	// For the input disabling in CGame.
; 459  : 	UnFuck(0x541DF5,5);

	push	5
	push	5512693					; 00541df5H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 460  : 
; 461  : 	/* Ret at CCamera::ClearPlayerWeaponMode
; 462  : 	UnFuck(0x50AB10,2);
; 463  : 	*(PBYTE)0x50AB10 = 0xC3;*/
; 464  : 	UnFuck(0x609CB4,5);

	push	5
	push	6331572					; 00609cb4H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 465  : 	memset((PVOID)0x609CB4,0x90,5);

	push	5
	push	144					; 00000090H
	push	6331572					; 00609cb4H
	call	_memset
	add	esp, 12					; 0000000cH

; 466  : 
; 467  : 	// PlayerInfo checks in CPlayerPed::ProcessControl
; 468  : 	UnFuck(0x60F2C4,25);

	push	25					; 00000019H
	push	6353604					; 0060f2c4H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 469  : 	memset((PVOID)0x60F2C4,0x90,25);

	push	25					; 00000019H
	push	144					; 00000090H
	push	6353604					; 0060f2c4H
	call	_memset
	add	esp, 12					; 0000000cH

; 470  : 
; 471  : 	// No Vehicle Audio Processing (done manually from the hooks)
; 472  : 	UnFuck(0x6B18F1,5);

	push	5
	push	7018737					; 006b18f1H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 473  : 	memset((PVOID)0x6B18F1,0x90,5);

	push	5
	push	144					; 00000090H
	push	7018737					; 006b18f1H
	call	_memset
	add	esp, 12					; 0000000cH

; 474  : 	UnFuck(0x6B9298,5);

	push	5
	push	7049880					; 006b9298H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 475  : 	memset((PVOID)0x6B9298,0x90,5);

	push	5
	push	144					; 00000090H
	push	7049880					; 006b9298H
	call	_memset
	add	esp, 12					; 0000000cH

; 476  : 	UnFuck(0x6F1793,5);

	push	5
	push	7280531					; 006f1793H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 477  : 	memset((PVOID)0x6F1793,0x90,5);

	push	5
	push	144					; 00000090H
	push	7280531					; 006f1793H
	call	_memset
	add	esp, 12					; 0000000cH

; 478  : 	UnFuck(0x6F86B6,5);

	push	5
	push	7308982					; 006f86b6H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 479  : 	memset((PVOID)0x6F86B6,0x90,5);

	push	5
	push	144					; 00000090H
	push	7308982					; 006f86b6H
	call	_memset
	add	esp, 12					; 0000000cH

; 480  : 
; 481  : 	// camera_on_actor patch, tsk tsk R*
; 482  : 	UnFuck(0x0047C477,1);

	push	1
	push	4703351					; 0047c477H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 483  : 	*(BYTE*)0x0047C477 = 0xEB;

	mov	BYTE PTR ds:4703351, 235		; 000000ebH

; 484  : 
; 485  : 	// CPushBike fires set on CPed patch
; 486  : 	UnFuck(0x0053A984,2);

	push	2
	push	5482884					; 0053a984H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 487  : 	*(BYTE*)0x0053A984 = 0xEB;  // jmp

	mov	BYTE PTR ds:5482884, 235		; 000000ebH

; 488  : 	*(BYTE*)0x0053A985 = 0x77;  // +77h = 0x0053A9FD

	mov	BYTE PTR ds:5482885, 119		; 00000077H

; 489  : 
; 490  : 	// Stop sniper clicking
; 491  : 	UnFuck(0x0060F289, 8);

	push	8
	push	6353545					; 0060f289H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 492  : 	memset((PVOID)0x0060F289, 0x90, 8);

	push	8
	push	144					; 00000090H
	push	6353545					; 0060f289H
	call	_memset
	add	esp, 12					; 0000000cH

; 493  : 	UnFuck(0x0060F29D, 19);

	push	19					; 00000013H
	push	6353565					; 0060f29dH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 494  : 	memset((PVOID)0x0060F29D, 0x90, 19);

	push	19					; 00000013H
	push	144					; 00000090H
	push	6353565					; 0060f29dH
	call	_memset
	add	esp, 12					; 0000000cH

; 495  : 	
; 496  : 	// Automatic go-to-menu on alt+tab
; 497  : 	//UnFuck(0x748063, 5);
; 498  : 	//memset((PVOID)0x748063, 0x90, 5);
; 499  : 
; 500  : 	// Wanted level hook
; 501  : 	UnFuck(0x58DB5F, 9);

	push	9
	push	5823327					; 0058db5fH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 502  : 	*(BYTE*)0x58DB5F = 0xBD;

	mov	BYTE PTR ds:5823327, 189		; 000000bdH

; 503  : 	*(BYTE*)0x58DB60 = 0x00;

	mov	BYTE PTR ds:5823328, 0

; 504  : 	*(BYTE*)0x58DB61 = 0x00;

	mov	BYTE PTR ds:5823329, 0

; 505  : 	*(BYTE*)0x58DB62 = 0x00;

	mov	BYTE PTR ds:5823330, 0

; 506  : 	*(BYTE*)0x58DB63 = 0x00;

	mov	BYTE PTR ds:5823331, 0

; 507  : 	*(BYTE*)0x58DB64 = 0x90;

	mov	BYTE PTR ds:5823332, 144		; 00000090H

; 508  : 	*(BYTE*)0x58DB65 = 0x90;

	mov	BYTE PTR ds:5823333, 144		; 00000090H

; 509  : 	*(BYTE*)0x58DB66 = 0x90;

	mov	BYTE PTR ds:5823334, 144		; 00000090H

; 510  : 	*(BYTE*)0x58DB67 = 0x90;

	mov	BYTE PTR ds:5823335, 144		; 00000090H

; 511  : 	
; 512  : 	// text_draw data
; 513  : 	//UnFuck(0xA913E8, MAX_TEXT_DRAWS * sizeof (TEXT_DRAW_DATA));
; 514  : 	//UnFuck(0xA44B68, 2);
; 515  : 
; 516  : 	// Remove the blue(-ish) fog in the map
; 517  : 	UnFuck(0x00575B0E, 5);

	push	5
	push	5724942					; 00575b0eH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 518  : 	memset((PVOID)0x00575B0E, 0x90, 5);

	push	5
	push	144					; 00000090H
	push	5724942					; 00575b0eH
	call	_memset
	add	esp, 12					; 0000000cH

; 519  : 
; 520  : 	// Make the shadows slightly darker by increasing the alpha
; 521  : 	UnFuck(0x71162C,1);

	push	1
	push	7411244					; 0071162cH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 522  : 	*(PBYTE)0x71162C = 80;

	mov	BYTE PTR ds:7411244, 80			; 00000050H

; 523  : 
; 524  : 	// Remove the CReferences call from CTaskEnterVehicleDriver ctor
; 525  : 	UnFuck(0x63ADC8,6);

	push	6
	push	6532552					; 0063adc8H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 526  : 	memset((PVOID)0x63ADC8,0x90,6);

	push	6
	push	144					; 00000090H
	push	6532552					; 0063adc8H
	call	_memset
	add	esp, 12					; 0000000cH

; 527  : 
; 528  : 	// Rest of the stuff
; 529  : 	RelocateScanListHack();

	call	?RelocateScanListHack@@YAXXZ		; RelocateScanListHack

; 530  : 	
; 531  : 	RelocatePedsListHack(); // allows us to use all 300 ped model slots

	call	?RelocatePedsListHack@@YAXXZ		; RelocatePedsListHack

; 532  : 
; 533  : 	// Stop ped rotations from the camera
; 534  : 	UnFuck(0x6884C4,6);

	push	6
	push	6849732					; 006884c4H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 535  : 	memset((PVOID)0x6884C4,0x90,6);

	push	6
	push	144					; 00000090H
	push	6849732					; 006884c4H
	call	_memset
	add	esp, 12					; 0000000cH

; 536  : 
; 537  : 	UnFuck(0x47BF54,4);

	push	4
	push	4702036					; 0047bf54H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 538  : 	InstallSCMEventsProcessor();

	call	?InstallSCMEventsProcessor@@YAXXZ	; InstallSCMEventsProcessor

; 539  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyInGamePatches@@YAXXZ ENDP				; ApplyInGamePatches
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?ApplyPreGamePatches@@YAHXZ
_TEXT	SEGMENT
_iCounter$ = -20					; size = 4
_pbyteVersionDetermination$ = -8			; size = 4
?ApplyPreGamePatches@@YAHXZ PROC			; ApplyPreGamePatches, COMDAT

; 136  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 137  : 	BYTE * pbyteVersionDetermination = (PBYTE)ADDR_BYPASS_VIDS_USA10;

	mov	DWORD PTR _pbyteVersionDetermination$[ebp], 7632003 ; 00747483H

; 138  : 	int iCounter=0;

	mov	DWORD PTR _iCounter$[ebp], 0
$LN11@ApplyPreGa:

; 139  : 
; 140  : 	// MAIN VERSION DETERMINING LOGIC
; 141  : 	while( (*pbyteVersionDetermination != 0x89) &&
; 142  : 		   (*pbyteVersionDetermination != 0xC8) )

	mov	eax, DWORD PTR _pbyteVersionDetermination$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 137				; 00000089H
	je	SHORT $LN10@ApplyPreGa
	mov	eax, DWORD PTR _pbyteVersionDetermination$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 200				; 000000c8H
	je	SHORT $LN10@ApplyPreGa

; 143  : 	{
; 144  : 		if (*(PBYTE)ADDR_GAME_STARTED == 1) {

	movzx	eax, BYTE PTR ds:12216369
	cmp	eax, 1
	jne	SHORT $LN9@ApplyPreGa

; 145  : 			return FALSE;

	xor	eax, eax
	jmp	$LN12@ApplyPreGa

; 146  : 		} else {

	jmp	SHORT $LN8@ApplyPreGa
$LN9@ApplyPreGa:

; 147  : 			Sleep(10);

	mov	esi, esp
	push	10					; 0000000aH
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 148  : 			iCounter++;

	mov	eax, DWORD PTR _iCounter$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCounter$[ebp], eax

; 149  : 			if(iCounter>6000) { // 60 seconds have passed

	cmp	DWORD PTR _iCounter$[ebp], 6000		; 00001770H
	jle	SHORT $LN8@ApplyPreGa

; 150  : 				return FALSE;

	xor	eax, eax
	jmp	$LN12@ApplyPreGa
$LN8@ApplyPreGa:

; 151  : 			}
; 152  : 		}
; 153  : 	}

	jmp	SHORT $LN11@ApplyPreGa
$LN10@ApplyPreGa:

; 154  : 
; 155  : 	if(*pbyteVersionDetermination == 0x89) {

	mov	eax, DWORD PTR _pbyteVersionDetermination$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 137				; 00000089H
	jne	SHORT $LN6@ApplyPreGa

; 156  : 		iGtaVersion = GTASA_VERSION_USA10;

	mov	DWORD PTR ?iGtaVersion@@3HA, 1		; iGtaVersion
	jmp	SHORT $LN5@ApplyPreGa
$LN6@ApplyPreGa:

; 157  : 	} 
; 158  : 	else if(*pbyteVersionDetermination == 0xC8) {

	mov	eax, DWORD PTR _pbyteVersionDetermination$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 200				; 000000c8H
	jne	SHORT $LN5@ApplyPreGa

; 159  : 		iGtaVersion = GTASA_VERSION_EU10;

	mov	DWORD PTR ?iGtaVersion@@3HA, 2		; iGtaVersion
$LN5@ApplyPreGa:

; 160  : 	}
; 161  : 
; 162  : 	// (skip to starting screen)
; 163  : 	if(iGtaVersion == GTASA_VERSION_USA10) {

	cmp	DWORD PTR ?iGtaVersion@@3HA, 1		; iGtaVersion
	jne	SHORT $LN3@ApplyPreGa

; 164  : 		UnFuck(ADDR_BYPASS_VIDS_USA10,6);

	push	6
	push	7632003					; 00747483H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 165  : 		*(BYTE *)ADDR_ENTRY = 5;

	mov	BYTE PTR ds:13161664, 5

; 166  : 		memset((PVOID)ADDR_BYPASS_VIDS_USA10,0x90,6);

	push	6
	push	144					; 00000090H
	push	7632003					; 00747483H
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@ApplyPreGa
$LN3@ApplyPreGa:

; 167  : 	} 
; 168  : 	else if (iGtaVersion == GTASA_VERSION_EU10) {

	cmp	DWORD PTR ?iGtaVersion@@3HA, 2		; iGtaVersion
	jne	SHORT $LN2@ApplyPreGa

; 169  : 		UnFuck(ADDR_BYPASS_VIDS_EU10,6);

	push	6
	push	7632083					; 007474d3H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 170  : 		*(BYTE *)ADDR_ENTRY = 5;

	mov	BYTE PTR ds:13161664, 5

; 171  : 		memset((PVOID)ADDR_BYPASS_VIDS_EU10,0x90,6);

	push	6
	push	144					; 00000090H
	push	7632083					; 007474d3H
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@ApplyPreGa:

; 172  : 	}
; 173  : 
; 174  : 	// Loading screens
; 175  : 	UnFuck(0x866CD8,10);

	push	10					; 0000000aH
	push	8809688					; 00866cd8H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 176  : 	UnFuck(0x866CCC,10);

	push	10					; 0000000aH
	push	8809676					; 00866cccH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 177  : 	strcpy((PCHAR)0x866CD8,"title");

	push	OFFSET ??_C@_05PHLGJONK@title?$AA@
	push	8809688					; 00866cd8H
	call	_strcpy
	add	esp, 8

; 178  : 	strcpy((PCHAR)0x866CCC,"title");

	push	OFFSET ??_C@_05PHLGJONK@title?$AA@
	push	8809676					; 00866cccH
	call	_strcpy
	add	esp, 8

; 179  : 
; 180  : 	// Modify the streaming memory hardcoded values
; 181  : 	UnFuck(0x5B8E6A,4);

	push	4
	push	6000234					; 005b8e6aH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 182  : 	*(DWORD *)0x5B8E6A = 134217728; // 128MB

	mov	DWORD PTR ds:6000234, 134217728		; 08000000H

; 183  : 
; 184  : 	// For SCM disable/enable
; 185  : 	UnFuck(0x469EF5,2);

	push	2
	push	4628213					; 00469ef5H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 186  : 
; 187  : 	return TRUE;

	mov	eax, 1
$LN12@ApplyPreGa:

; 188  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyPreGamePatches@@YAHXZ ENDP			; ApplyPreGamePatches
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?ApplyDebugLevelPatches@@YAXXZ
_TEXT	SEGMENT
?ApplyDebugLevelPatches@@YAXXZ PROC			; ApplyDebugLevelPatches, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 128  : 	// Don't go back to player anims, use the peds IDE
; 129  : 	UnFuck(0x609A4E,6);

	push	6
	push	6330958					; 00609a4eH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 130  : 	memset((PVOID)0x609A4E, 0x90, 6);

	push	6
	push	144					; 00000090H
	push	6330958					; 00609a4eH
	call	_memset
	add	esp, 12					; 0000000cH

; 131  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyDebugLevelPatches@@YAXXZ ENDP			; ApplyDebugLevelPatches
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?UnFuckAndCheck@@YAXKHE@Z
_TEXT	SEGMENT
_s$ = -276						; size = 256
_d$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_addr$ = 8						; size = 4
_size$ = 12						; size = 4
_byteCheck$ = 16					; size = 1
?UnFuckAndCheck@@YAXKHE@Z PROC				; UnFuckAndCheck, COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 103  : 	DWORD d;
; 104  : 	char s[256];
; 105  : 	VirtualProtect((PVOID)addr,size,PAGE_EXECUTE_READWRITE,&d);

	mov	esi, esp
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 106  : 
; 107  : 	if(byteCheck != *(PBYTE)addr) {

	movzx	eax, BYTE PTR _byteCheck$[ebp]
	mov	ecx, DWORD PTR _addr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN4@UnFuckAndC

; 108  : #ifdef _DEBUG
; 109  : 		sprintf(s,"Failed Check At Addr: 0x%X",addr);

	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	push	OFFSET ??_C@_0BL@EFDBDHGD@Failed?5Check?5At?5Addr?3?50x?$CFX?$AA@
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 110  : 		OutputDebugString(s);

	mov	esi, esp
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@UnFuckAndC:

; 111  : #endif
; 112  : 		while(byteCheck != *(PBYTE)addr) Sleep(1);

	movzx	eax, BYTE PTR _byteCheck$[ebp]
	mov	ecx, DWORD PTR _addr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN4@UnFuckAndC
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@UnFuckAndC
$LN4@UnFuckAndC:

; 113  : 	}
; 114  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@UnFuckAndC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@UnFuckAndC:
	DD	2
	DD	$LN8@UnFuckAndC
$LN8@UnFuckAndC:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@UnFuckAndC
	DD	-276					; fffffeecH
	DD	256					; 00000100H
	DD	$LN7@UnFuckAndC
$LN7@UnFuckAndC:
	DB	115					; 00000073H
	DB	0
$LN6@UnFuckAndC:
	DB	100					; 00000064H
	DB	0
?UnFuckAndCheck@@YAXKHE@Z ENDP				; UnFuckAndCheck
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?SetTimedObjects@@YAXH@Z
_TEXT	SEGMENT
_pushTimedObjects$1 = -76				; size = 5
_i$2 = -60						; size = 4
_bTimedObjects$3 = -48					; size = 4
_cBytes$4 = -36						; size = 4
_i$5 = -24						; size = 4
_dwAlloc$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_iTimedObjects$ = 8					; size = 4
?SetTimedObjects@@YAXH@Z PROC				; SetTimedObjects, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 69   : 	DWORD dwAlloc = (DWORD) malloc((0x24*iTimedObjects)+4);

	imul	eax, DWORD PTR _iTimedObjects$[ebp], 36
	add	eax, 4
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _dwAlloc$[ebp], eax

; 70   : 	if(dwAlloc)

	cmp	DWORD PTR _dwAlloc$[ebp], 0
	je	$LN8@SetTimedOb

; 71   : 	{
; 72   : 		memset((LPVOID)dwAlloc,0x00,(0x24*iTimedObjects)+4);

	imul	eax, DWORD PTR _iTimedObjects$[ebp], 36
	add	eax, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _dwAlloc$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 73   : 		for(DWORD i=dwAlloc+4;i<(dwAlloc+4+(0x24*iTimedObjects));i+=0x24)

	mov	eax, DWORD PTR _dwAlloc$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$5[ebp], eax
	jmp	SHORT $LN6@SetTimedOb
$LN5@SetTimedOb:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _i$5[ebp], eax
$LN6@SetTimedOb:
	imul	eax, DWORD PTR _iTimedObjects$[ebp], 36
	mov	ecx, DWORD PTR _dwAlloc$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	cmp	DWORD PTR _i$5[ebp], edx
	jae	SHORT $LN4@SetTimedOb

; 74   : 		{
; 75   : 			*(BYTE*) i = 0xB0;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	BYTE PTR [eax], 176			; 000000b0H

; 76   : 			*(BYTE*) (i+1) = 0xBC;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	BYTE PTR [eax+1], 188			; 000000bcH

; 77   : 			*(BYTE*) (i+2) = 0x85;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	BYTE PTR [eax+2], 133			; 00000085H

; 78   : 			*(BYTE*) (i+10) = 0xFF;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	BYTE PTR [eax+10], 255			; 000000ffH

; 79   : 			*(BYTE*) (i+11) = 0xFF;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	BYTE PTR [eax+11], 255			; 000000ffH

; 80   : 			*(BYTE*) (i+34) = 0xFF;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	BYTE PTR [eax+34], 255			; 000000ffH

; 81   : 			*(BYTE*) (i+35) = 0xFF;

	mov	eax, DWORD PTR _i$5[ebp]
	mov	BYTE PTR [eax+35], 255			; 000000ffH

; 82   : 		}

	jmp	SHORT $LN5@SetTimedOb
$LN4@SetTimedOb:

; 83   : 		char* cBytes = (char*)&dwAlloc;

	lea	eax, DWORD PTR _dwAlloc$[ebp]
	mov	DWORD PTR _cBytes$4[ebp], eax

; 84   : 		BYTE bTimedObjects[] = { cBytes[0], cBytes[1], cBytes[2], cBytes[3] };

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cBytes$4[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _bTimedObjects$3[ebp], al
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cBytes$4[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _bTimedObjects$3[ebp+1], dl
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _cBytes$4[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _bTimedObjects$3[ebp+2], dl
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cBytes$4[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _bTimedObjects$3[ebp+3], al

; 85   : 		patch(0x4C66B1,bTimedObjects);

	push	4
	lea	eax, DWORD PTR _bTimedObjects$3[ebp]
	push	eax
	push	5007025					; 004c66b1H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 86   : 		patch(0x4C66C2,bTimedObjects);

	push	4
	lea	eax, DWORD PTR _bTimedObjects$3[ebp]
	push	eax
	push	5007042					; 004c66c2H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 87   : 		patch(0x84BC51,bTimedObjects);

	push	4
	lea	eax, DWORD PTR _bTimedObjects$3[ebp]
	push	eax
	push	8698961					; 0084bc51H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 88   : 		patch(0x856261,bTimedObjects);

	push	4
	lea	eax, DWORD PTR _bTimedObjects$3[ebp]
	push	eax
	push	8741473					; 00856261H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 89   : 		patch(0x4C683B,bTimedObjects);

	push	4
	lea	eax, DWORD PTR _bTimedObjects$3[ebp]
	push	eax
	push	5007419					; 004c683bH
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 90   : 		memadd(4,bTimedObjects);

	mov	eax, DWORD PTR _dwAlloc$[ebp]
	add	eax, 4
	mov	DWORD PTR _dwAlloc$[ebp], eax
	lea	eax, DWORD PTR _dwAlloc$[ebp]
	mov	DWORD PTR _cBytes$4[ebp], eax
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@SetTimedOb
$LN2@SetTimedOb:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetTimedOb:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN1@SetTimedOb
	mov	eax, DWORD PTR _cBytes$4[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR _bTimedObjects$3[ebp+ecx], dl
	jmp	SHORT $LN2@SetTimedOb
$LN1@SetTimedOb:

; 91   : 		patch(0x4C6464,bTimedObjects);

	push	4
	lea	eax, DWORD PTR _bTimedObjects$3[ebp]
	push	eax
	push	5006436					; 004c6464H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 92   : 		patch(0x4C66BD,bTimedObjects);

	push	4
	lea	eax, DWORD PTR _bTimedObjects$3[ebp]
	push	eax
	push	5007037					; 004c66bdH
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 93   : 		cBytes = (char*)&iTimedObjects;

	lea	eax, DWORD PTR _iTimedObjects$[ebp]
	mov	DWORD PTR _cBytes$4[ebp], eax

; 94   : 		BYTE pushTimedObjects[] = { 0x68, cBytes[0], cBytes[1], cBytes[2], cBytes[3] };

	mov	BYTE PTR _pushTimedObjects$1[ebp], 104	; 00000068H
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cBytes$4[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _pushTimedObjects$1[ebp+1], al
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cBytes$4[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _pushTimedObjects$1[ebp+2], dl
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _cBytes$4[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _pushTimedObjects$1[ebp+3], dl
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cBytes$4[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _pushTimedObjects$1[ebp+4], al

; 95   : 		patch(0x4C58A5,pushTimedObjects);

	push	5
	lea	eax, DWORD PTR _pushTimedObjects$1[ebp]
	push	eax
	push	5003429					; 004c58a5H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH
$LN8@SetTimedOb:

; 96   : 	}
; 97   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SetTimedOb
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@SetTimedOb:
	DD	3
	DD	$LN13@SetTimedOb
$LN13@SetTimedOb:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN10@SetTimedOb
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN11@SetTimedOb
	DD	-76					; ffffffb4H
	DD	5
	DD	$LN12@SetTimedOb
$LN12@SetTimedOb:
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN11@SetTimedOb:
	DB	98					; 00000062H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN10@SetTimedOb:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
?SetTimedObjects@@YAXH@Z ENDP				; SetTimedObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?SetIPLs@@YAXHH@Z
_TEXT	SEGMENT
_bIPLs$1 = -32						; size = 4
_cBytes$2 = -20						; size = 4
_dwAlloc$ = -8						; size = 4
_iIPLs$ = 8						; size = 4
_iGtaVersion$ = 12					; size = 4
?SetIPLs@@YAXHH@Z PROC					; SetIPLs, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 40   : 	DWORD dwAlloc = (DWORD) malloc(iIPLs+4);

	mov	eax, DWORD PTR _iIPLs$[ebp]
	add	eax, 4
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _dwAlloc$[ebp], eax

; 41   : 	if(dwAlloc)

	cmp	DWORD PTR _dwAlloc$[ebp], 0
	je	$LN4@SetIPLs

; 42   : 	{
; 43   : 		memset((void*)dwAlloc,0x0,iIPLs+4);

	mov	eax, DWORD PTR _iIPLs$[ebp]
	add	eax, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _dwAlloc$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 44   : 		char* cBytes = (char*)&dwAlloc;

	lea	eax, DWORD PTR _dwAlloc$[ebp]
	mov	DWORD PTR _cBytes$2[ebp], eax

; 45   : 
; 46   : 		BYTE bIPLs[] = { cBytes[0], cBytes[1], cBytes[2], cBytes[3] };

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cBytes$2[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _bIPLs$1[ebp], al
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _cBytes$2[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _bIPLs$1[ebp+1], dl
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _cBytes$2[ebp]
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _bIPLs$1[ebp+2], dl
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cBytes$2[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _bIPLs$1[ebp+3], al

; 47   : 
; 48   : 		if(iGtaVersion == GTASA_VERSION_USA10)

	cmp	DWORD PTR _iGtaVersion$[ebp], 1
	jne	SHORT $LN2@SetIPLs

; 49   : 		{
; 50   : 			patch(0x1569777,bIPLs);

	push	4
	lea	eax, DWORD PTR _bIPLs$1[ebp]
	push	eax
	push	22452087				; 01569777H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 51   : 			patch(0x15649FA,bIPLs);

	push	4
	lea	eax, DWORD PTR _bIPLs$1[ebp]
	push	eax
	push	22432250				; 015649faH
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 52   : 			patch(0x1561160,bIPLs);

	push	4
	lea	eax, DWORD PTR _bIPLs$1[ebp]
	push	eax
	push	22417760				; 01561160H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 53   : 		}
; 54   : 		else

	jmp	SHORT $LN1@SetIPLs
$LN2@SetIPLs:

; 55   : 		{
; 56   : 			patch(0x1569717,bIPLs);

	push	4
	lea	eax, DWORD PTR _bIPLs$1[ebp]
	push	eax
	push	22451991				; 01569717H
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 57   : 			patch(0x156495A,bIPLs);

	push	4
	lea	eax, DWORD PTR _bIPLs$1[ebp]
	push	eax
	push	22432090				; 0156495aH
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 58   : 			patch(0x156115C,bIPLs);

	push	4
	lea	eax, DWORD PTR _bIPLs$1[ebp]
	push	eax
	push	22417756				; 0156115cH
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH
$LN1@SetIPLs:

; 59   : 		}
; 60   : 		patch(0x40619B,bIPLs);

	push	4
	lea	eax, DWORD PTR _bIPLs$1[ebp]
	push	eax
	push	4219291					; 0040619bH
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH

; 61   : 		patch(0x405C3D,bIPLs);

	push	4
	lea	eax, DWORD PTR _bIPLs$1[ebp]
	push	eax
	push	4217917					; 00405c3dH
	call	?_patch@@YAXKPAEH@Z			; _patch
	add	esp, 12					; 0000000cH
$LN4@SetIPLs:

; 62   : 	}	
; 63   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SetIPLs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@SetIPLs:
	DD	2
	DD	$LN8@SetIPLs
$LN8@SetIPLs:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@SetIPLs
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@SetIPLs
$LN7@SetIPLs:
	DB	98					; 00000062H
	DB	73					; 00000049H
	DB	80					; 00000050H
	DB	76					; 0000004cH
	DB	115					; 00000073H
	DB	0
$LN6@SetIPLs:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
?SetIPLs@@YAXHH@Z ENDP					; SetIPLs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?_patch@@YAXKPAEH@Z
_TEXT	SEGMENT
_dwProtect$ = -12					; size = 8
_dwAddress$ = 8						; size = 4
_bData$ = 12						; size = 4
_iSize$ = 16						; size = 4
?_patch@@YAXKPAEH@Z PROC				; _patch, COMDAT

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 30   : 	DWORD dwProtect[2];
; 31   : 	VirtualProtect((PVOID)dwAddress,iSize,PAGE_EXECUTE_READWRITE,&dwProtect[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _dwProtect$[ebp+ecx]
	mov	esi, esp
	push	edx
	push	64					; 00000040H
	mov	eax, DWORD PTR _iSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwAddress$[ebp]
	push	ecx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   : 	memcpy((PVOID)dwAddress,bData,iSize);

	mov	eax, DWORD PTR _iSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwAddress$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 33   : 	VirtualProtect((PVOID)dwAddress,iSize,dwProtect[0],&dwProtect[1]);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _dwProtect$[ebp+eax]
	mov	esi, esp
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _dwProtect$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _iSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwAddress$[ebp]
	push	eax
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 34   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@patch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@patch:
	DD	1
	DD	$LN4@patch
$LN4@patch:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@patch
$LN3@patch:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?_patch@@YAXKPAEH@Z ENDP				; _patch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?RelocatePedsListHack@@YAXXZ
_TEXT	SEGMENT
_x$ = -20						; size = 4
_aPedsListMemory$ = -8					; size = 4
?RelocatePedsListHack@@YAXXZ PROC			; RelocatePedsListHack, COMDAT

; 553  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 554  :     BYTE *aPedsListMemory = (BYTE*)&PedModelsMemory[0];

	mov	eax, 68					; 00000044H
	imul	ecx, eax, 0
	add	ecx, OFFSET ?PedModelsMemory@@3PAU_PED_MODEL@@A ; PedModelsMemory
	mov	DWORD PTR _aPedsListMemory$[ebp], ecx

; 555  : 
; 556  : 	// Init the mem
; 557  : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN2@RelocatePe:

; 558  : 	while(x!=600) {

	cmp	DWORD PTR _x$[ebp], 600			; 00000258H
	je	SHORT $LN1@RelocatePe

; 559  : 		PedModelsMemory[x].func_tbl = 0x85BDC0;

	imul	eax, DWORD PTR _x$[ebp], 68
	mov	DWORD PTR ?PedModelsMemory@@3PAU_PED_MODEL@@A[eax], 8764864 ; 0085bdc0H

; 560  : 		memset(PedModelsMemory[x].data,0,64);

	push	64					; 00000040H
	push	0
	imul	eax, DWORD PTR _x$[ebp], 68
	add	eax, OFFSET ?PedModelsMemory@@3PAU_PED_MODEL@@A+4
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 561  : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 562  : 	}

	jmp	SHORT $LN2@RelocatePe
$LN1@RelocatePe:

; 563  : 	// Patch the GetPedsModelInfo to use us
; 564  : 	// instead of the gta_sa.exe mem.
; 565  : 	UnFuck(0x4C67AD,4);

	push	4
	push	5007277					; 004c67adH
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 566  : 	*(DWORD *)0x4C67AD = (DWORD)aPedsListMemory;

	mov	eax, DWORD PTR _aPedsListMemory$[ebp]
	mov	DWORD PTR ds:5007277, eax

; 567  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RelocatePedsListHack@@YAXXZ ENDP			; RelocatePedsListHack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?RelocateScanListHack@@YAXXZ
_TEXT	SEGMENT
_x$ = -32						; size = 4
_aScanListMemory$ = -20					; size = 4
_oldProt$ = -8						; size = 4
?RelocateScanListHack@@YAXXZ PROC			; RelocateScanListHack, COMDAT

; 622  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 623  : 	DWORD oldProt;
; 624  : 	memset(&ScanListMemory[0], 0, sizeof(ScanListMemory));

	push	160000					; 00027100H
	push	0
	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, OFFSET ?ScanListMemory@@3PAEA	; ScanListMemory
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 625  : 	unsigned char *aScanListMemory = &ScanListMemory[0];

	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, OFFSET ?ScanListMemory@@3PAEA	; ScanListMemory
	mov	DWORD PTR _aScanListMemory$[ebp], ecx

; 626  : 
; 627  : 	// FIRST PREPARED LIST OF ACCESSORS
; 628  : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN14@RelocateSc:

; 629  : 	while(x!=14) {

	cmp	DWORD PTR _x$[ebp], 14			; 0000000eH
	je	$LN13@RelocateSc

; 630  : 		if(iGtaVersion == GTASA_VERSION_USA10) {

	cmp	DWORD PTR ?iGtaVersion@@3HA, 1		; iGtaVersion
	jne	SHORT $LN12@RelocateSc

; 631  : 			VirtualProtect((PVOID)dwPatchAddrScanReloc1USA[x],4,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?dwPatchAddrScanReloc1USA@@3PAKA[ecx*4]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 632  : 			*(PDWORD)dwPatchAddrScanReloc1USA[x] = (DWORD)aScanListMemory;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ?dwPatchAddrScanReloc1USA@@3PAKA[eax*4]
	mov	edx, DWORD PTR _aScanListMemory$[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN11@RelocateSc
$LN12@RelocateSc:

; 633  : 		}
; 634  : 		else if(iGtaVersion == GTASA_VERSION_EU10) {

	cmp	DWORD PTR ?iGtaVersion@@3HA, 2		; iGtaVersion
	jne	SHORT $LN11@RelocateSc

; 635  : 			VirtualProtect((PVOID)dwPatchAddrScanReloc1EU[x],4,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?dwPatchAddrScanReloc1EU@@3PAKA[ecx*4]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 636  : 			*(PDWORD)dwPatchAddrScanReloc1EU[x] = (DWORD)aScanListMemory;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ?dwPatchAddrScanReloc1EU@@3PAKA[eax*4]
	mov	edx, DWORD PTR _aScanListMemory$[ebp]
	mov	DWORD PTR [ecx], edx
$LN11@RelocateSc:

; 637  : 		}
; 638  : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 639  : 	}

	jmp	$LN14@RelocateSc
$LN13@RelocateSc:

; 640  : 
; 641  : 	// SECOND PREPARED LIST OF ACCESSORS <G>
; 642  : 	x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN9@RelocateSc:

; 643  : 	while(x!=56) {

	cmp	DWORD PTR _x$[ebp], 56			; 00000038H
	je	$LN8@RelocateSc

; 644  : 		if(iGtaVersion == GTASA_VERSION_USA10) {

	cmp	DWORD PTR ?iGtaVersion@@3HA, 1		; iGtaVersion
	jne	SHORT $LN7@RelocateSc

; 645  : 			VirtualProtect((PVOID)dwPatchAddrScanReloc2USA[x],8,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	8
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?dwPatchAddrScanReloc2USA@@3PAKA[ecx*4]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 646  : 			*(PDWORD)(dwPatchAddrScanReloc2USA[x] + 3) = (DWORD)aScanListMemory;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ?dwPatchAddrScanReloc2USA@@3PAKA[eax*4]
	mov	edx, DWORD PTR _aScanListMemory$[ebp]
	mov	DWORD PTR [ecx+3], edx
	jmp	SHORT $LN6@RelocateSc
$LN7@RelocateSc:

; 647  : 		}
; 648  : 		else if(iGtaVersion == GTASA_VERSION_EU10) {

	cmp	DWORD PTR ?iGtaVersion@@3HA, 2		; iGtaVersion
	jne	SHORT $LN6@RelocateSc

; 649  : 			VirtualProtect((PVOID)dwPatchAddrScanReloc2EU[x],8,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	8
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?dwPatchAddrScanReloc2EU@@3PAKA[ecx*4]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 650  : 			*(PDWORD)(dwPatchAddrScanReloc2EU[x] + 3) = (DWORD)aScanListMemory;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ?dwPatchAddrScanReloc2EU@@3PAKA[eax*4]
	mov	edx, DWORD PTR _aScanListMemory$[ebp]
	mov	DWORD PTR [ecx+3], edx
$LN6@RelocateSc:

; 651  : 		}
; 652  : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 653  : 	}

	jmp	$LN9@RelocateSc
$LN8@RelocateSc:

; 654  : 
; 655  : 	// THIRD LIST THAT POINTS TO THE BASE SCANLIST MEMORY + 4
; 656  : 	x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN4@RelocateSc:

; 657  : 	while(x!=11) {

	cmp	DWORD PTR _x$[ebp], 11			; 0000000bH
	je	SHORT $LN3@RelocateSc

; 658  : 		VirtualProtect((PVOID)dwPatchAddrScanReloc3[x],8,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	8
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?dwPatchAddrScanReloc3@@3PAKA[ecx*4]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 659  : 		*(PDWORD)(dwPatchAddrScanReloc3[x] + 3) = (DWORD)(aScanListMemory+4);

	mov	eax, DWORD PTR _aScanListMemory$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?dwPatchAddrScanReloc3@@3PAKA[ecx*4]
	mov	DWORD PTR [edx+3], eax

; 660  : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 661  : 	}	

	jmp	SHORT $LN4@RelocateSc
$LN3@RelocateSc:

; 662  : 
; 663  : 	// FOURTH LIST THAT POINTS TO THE END OF THE SCANLIST
; 664  : 	x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN2@RelocateSc:

; 665  : 	while(x!=4) {

	cmp	DWORD PTR _x$[ebp], 4
	je	SHORT $LN1@RelocateSc

; 666  : 		VirtualProtect((PVOID)dwPatchAddrScanRelocEnd[x],4,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?dwPatchAddrScanRelocEnd@@3PAKA[ecx*4]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 667  : 		*(PDWORD)(dwPatchAddrScanRelocEnd[x]) = (DWORD)(aScanListMemory+sizeof(ScanListMemory));

	mov	eax, DWORD PTR _aScanListMemory$[ebp]
	add	eax, 160000				; 00027100H
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR ?dwPatchAddrScanRelocEnd@@3PAKA[ecx*4]
	mov	DWORD PTR [edx], eax

; 668  : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 669  : 	}	

	jmp	SHORT $LN2@RelocateSc
$LN1@RelocateSc:

; 670  : 
; 671  : 	// Others that didn't fit.
; 672  : 	VirtualProtect((PVOID)0x40936A,4,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	4
	push	4232042					; 0040936aH
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 673  : 	*(PDWORD)0x40936A = (DWORD)(aScanListMemory+4);

	mov	eax, DWORD PTR _aScanListMemory$[ebp]
	add	eax, 4
	mov	DWORD PTR ds:4232042, eax

; 674  : 
; 675  : 	// Reset the exe scanlist mem for playerinfo's
; 676  : 	memset((BYTE*)0xB7D0B8,0,8*14400);

	push	115200					; 0001c200H
	push	0
	push	12046520				; 00b7d0b8H
	call	_memset
	add	esp, 12					; 0000000cH

; 677  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@RelocateSc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@RelocateSc:
	DD	1
	DD	$LN18@RelocateSc
$LN18@RelocateSc:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN17@RelocateSc
$LN17@RelocateSc:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
?RelocateScanListHack@@YAXXZ ENDP			; RelocateScanListHack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\patches.cpp
;	COMDAT ?UnFuck@@YAXKH@Z
_TEXT	SEGMENT
_d$ = -8						; size = 4
_addr$ = 8						; size = 4
_size$ = 12						; size = 4
?UnFuck@@YAXKH@Z PROC					; UnFuck, COMDAT

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 120  : 	DWORD d;
; 121  : 	VirtualProtect((PVOID)addr,size,PAGE_EXECUTE_READWRITE,&d);

	mov	esi, esp
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 122  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@UnFuck
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@UnFuck:
	DD	1
	DD	$LN4@UnFuck
$LN4@UnFuck:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@UnFuck
$LN3@UnFuck:
	DB	100					; 00000064H
	DB	0
?UnFuck@@YAXKH@Z ENDP					; UnFuck
_TEXT	ENDS
END
