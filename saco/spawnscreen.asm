; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\spawnscreen.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_szVersionInfo DB 'SA:MP 0.2X.1', 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	?GetScreenHeight@CGame@@QAEHXZ			; CGame::GetScreenHeight
PUBLIC	??_GCFontRender@@QAEPAXI@Z			; CFontRender::`scalar deleting destructor'
PUBLIC	?Draw@CSpawnScreen@@QAEXXZ			; CSpawnScreen::Draw
PUBLIC	?RestoreDeviceObjects@CSpawnScreen@@QAEXXZ	; CSpawnScreen::RestoreDeviceObjects
PUBLIC	?DeleteDeviceObjects@CSpawnScreen@@QAEXXZ	; CSpawnScreen::DeleteDeviceObjects
PUBLIC	?SetSpawnText@CSpawnScreen@@QAEXPAD@Z		; CSpawnScreen::SetSpawnText
PUBLIC	??0CSpawnScreen@@QAE@PAUIDirect3DDevice9@@@Z	; CSpawnScreen::CSpawnScreen
PUBLIC	??1CSpawnScreen@@QAE@XZ				; CSpawnScreen::~CSpawnScreen
PUBLIC	??0_D3DTLVERTEX@@QAE@XZ				; _D3DTLVERTEX::_D3DTLVERTEX
PUBLIC	??0_D3DTLVERTEX@@QAE@ABU_D3DVECTOR@@MKMM@Z	; _D3DTLVERTEX::_D3DTLVERTEX
PUBLIC	__real@00000000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_D3DXCreateTextureFromFileInMemory@16:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??1CFontRender@@QAE@XZ:PROC			; CFontRender::~CFontRender
EXTRN	?DeleteDeviceObjects@CFontRender@@QAEXXZ:PROC	; CFontRender::DeleteDeviceObjects
EXTRN	?RestoreDeviceObjects@CFontRender@@QAEXXZ:PROC	; CFontRender::RestoreDeviceObjects
EXTRN	?MeasureText@CFontRender@@QAE?AUtagSIZE@@PAD@Z:PROC ; CFontRender::MeasureText
EXTRN	?RenderText@CFontRender@@QAEXPADUtagRECT@@K@Z:PROC ; CFontRender::RenderText
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pFileSystem@@3PAVCFileSystem@@A:DWORD		; pFileSystem
EXTRN	?pDefaultFont@@3PAVCFontRender@@A:DWORD		; pDefaultFont
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\spawnscreen.cpp
;	COMDAT ??0_D3DTLVERTEX@@QAE@ABU_D3DVECTOR@@MKMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
_rhw$ = 12						; size = 4
_color$ = 16						; size = 4
_tu$ = 20						; size = 4
_tv$ = 24						; size = 4
??0_D3DTLVERTEX@@QAE@ABU_D3DVECTOR@@MKMM@Z PROC		; _D3DTLVERTEX::_D3DTLVERTEX, COMDAT
; _this$ = ecx

; 33   : 	_D3DTLVERTEX(const D3DVECTOR& v, float rhw, D3DCOLOR color, float tu, float tv)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	{
; 35   : 		this->sx = v.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 36   : 		this->sy = v.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 37   : 		this->sz = v.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 38   : 		this->rhw = rhw;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _rhw$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 39   : 		this->color = color;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 40   : 		this->tu = tu;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tu$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 41   : 		this->tv = tv;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _tv$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0_D3DTLVERTEX@@QAE@ABU_D3DVECTOR@@MKMM@Z ENDP		; _D3DTLVERTEX::_D3DTLVERTEX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\spawnscreen.cpp
;	COMDAT ??0_D3DTLVERTEX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_D3DTLVERTEX@@QAE@XZ PROC				; _D3DTLVERTEX::_D3DTLVERTEX, COMDAT
; _this$ = ecx

; 29   : 	_D3DTLVERTEX()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 	{
; 31   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_D3DTLVERTEX@@QAE@XZ ENDP				; _D3DTLVERTEX::_D3DTLVERTEX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\spawnscreen.cpp
;	COMDAT ??1CSpawnScreen@@QAE@XZ
_TEXT	SEGMENT
tv84 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
$T3 = -212						; size = 4
_this$ = -8						; size = 4
??1CSpawnScreen@@QAE@XZ PROC				; CSpawnScreen::~CSpawnScreen, COMDAT
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 	if (m_szSpawnText)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@CSpawnScre

; 73   : 		delete m_szSpawnText;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@CSpawnScre:

; 74   : 
; 75   : 	if (m_pTexture || m_pStateBlockDraw || m_pStateBlockSaved) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@CSpawnScre
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN3@CSpawnScre
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@CSpawnScre
$LN3@CSpawnScre:

; 76   : 		DeleteDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteDeviceObjects@CSpawnScreen@@QAEXXZ ; CSpawnScreen::DeleteDeviceObjects
$LN4@CSpawnScre:

; 77   : 	
; 78   : 	if (m_pFont != pDefaultFont)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR ?pDefaultFont@@3PAVCFontRender@@A ; pDefaultFont
	je	SHORT $LN6@CSpawnScre

; 79   : 		SAFE_DELETE(m_pFont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN6@CSpawnScre
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN8@CSpawnScre
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCFontRender@@QAEPAXI@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN9@CSpawnScre
$LN8@CSpawnScre:
	mov	DWORD PTR tv84[ebp], 0
$LN9@CSpawnScre:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN6@CSpawnScre:

; 80   : 
; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSpawnScreen@@QAE@XZ ENDP				; CSpawnScreen::~CSpawnScreen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\spawnscreen.cpp
;	COMDAT ??0CSpawnScreen@@QAE@PAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pD3DDevice$ = 8					; size = 4
??0CSpawnScreen@@QAE@PAUIDirect3DDevice9@@@Z PROC	; CSpawnScreen::CSpawnScreen, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	m_pD3DDevice = pD3DDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pD3DDevice$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 51   : 	m_szSpawnText = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 52   : 	m_pTexture = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 53   : 	m_pStateBlockDraw = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 54   : 	m_pStateBlockSaved = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 55   : 	
; 56   : 	if (m_pD3DDevice)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@CSpawnScre

; 57   : 	{
; 58   : 
; 59   : 		// Just use the default font object
; 60   : 		//m_pFont = new CFontRender(m_pD3DDevice, "Arial", TRUE, TRUE, 0);
; 61   : 		m_pFont = pDefaultFont;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?pDefaultFont@@3PAVCFontRender@@A ; pDefaultFont
	mov	DWORD PTR [eax+8], ecx
$LN1@CSpawnScre:

; 62   : 
; 63   : 	}
; 64   : 
; 65   : 	RestoreDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreDeviceObjects@CSpawnScreen@@QAEXXZ ; CSpawnScreen::RestoreDeviceObjects

; 66   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CSpawnScreen@@QAE@PAUIDirect3DDevice9@@@Z ENDP	; CSpawnScreen::CSpawnScreen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\spawnscreen.cpp
;	COMDAT ?SetSpawnText@CSpawnScreen@@QAEXPAD@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_szSpawnText$ = 8					; size = 4
?SetSpawnText@CSpawnScreen@@QAEXPAD@Z PROC		; CSpawnScreen::SetSpawnText, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	if (m_szSpawnText)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@SetSpawnTe

; 88   : 		delete m_szSpawnText;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@SetSpawnTe:

; 89   : 	m_szSpawnText = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 90   : 	if (szSpawnText)

	cmp	DWORD PTR _szSpawnText$[ebp], 0
	je	SHORT $LN3@SetSpawnTe

; 91   : 	{
; 92   : 		m_szSpawnText = new CHAR[strlen(szSpawnText)+1];

	mov	eax, DWORD PTR _szSpawnText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx

; 93   : 		strcpy(m_szSpawnText, szSpawnText);

	mov	eax, DWORD PTR _szSpawnText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_strcpy
	add	esp, 8
$LN3@SetSpawnTe:

; 94   : 	}
; 95   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSpawnText@CSpawnScreen@@QAEXPAD@Z ENDP		; CSpawnScreen::SetSpawnText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\spawnscreen.cpp
;	COMDAT ?DeleteDeviceObjects@CSpawnScreen@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DeleteDeviceObjects@CSpawnScreen@@QAEXXZ PROC		; CSpawnScreen::DeleteDeviceObjects, COMDAT
; _this$ = ecx

; 233  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 	if(m_pTexture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@DeleteDevi

; 235  : 		m_pTexture->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@DeleteDevi:

; 236  : 
; 237  : 	if (m_pStateBlockSaved)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@DeleteDevi

; 238  : 		m_pStateBlockSaved->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DeleteDevi:

; 239  : 
; 240  : 	if (m_pStateBlockDraw)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN2@DeleteDevi

; 241  : 		m_pStateBlockDraw->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeleteDevi:

; 242  : 
; 243  : 	m_pTexture = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 244  : 	m_pStateBlockSaved = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 245  : 	m_pStateBlockDraw = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 246  : 
; 247  : 	if(m_pFont && m_pFont != pDefaultFont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@DeleteDevi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR ?pDefaultFont@@3PAVCFontRender@@A ; pDefaultFont
	je	SHORT $LN5@DeleteDevi

; 248  : 	{
; 249  : 		m_pFont->DeleteDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?DeleteDeviceObjects@CFontRender@@QAEXXZ ; CFontRender::DeleteDeviceObjects

; 250  : 		m_pFont = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN5@DeleteDevi:

; 251  : 	}
; 252  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteDeviceObjects@CSpawnScreen@@QAEXXZ ENDP		; CSpawnScreen::DeleteDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\spawnscreen.cpp
;	COMDAT ?RestoreDeviceObjects@CSpawnScreen@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -56						; size = 4
_dwSize$2 = -44						; size = 4
_pbData$3 = -32						; size = 4
_dwIndex$4 = -20					; size = 4
_this$ = -8						; size = 4
?RestoreDeviceObjects@CSpawnScreen@@QAEXXZ PROC		; CSpawnScreen::RestoreDeviceObjects, COMDAT
; _this$ = ecx

; 162  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  : 	if(m_pD3DDevice)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN9@RestoreDev

; 164  : 	{
; 165  : 		if (m_pTexture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN8@RestoreDev

; 166  : 			m_pTexture->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@RestoreDev:

; 167  : 
; 168  : 		//D3DXCreateTextureFromFile(m_pD3DDevice, "logo.png", &m_pTexture);
; 169  : 		//DWORD dwIndex = pFileSystem->GetFileIndex("logo.png");
; 170  : 		DWORD dwIndex = ((CArchiveFS*)pFileSystem)->GetFileIndex(0xbaddea6b);

	mov	esi, esp
	push	-1159861653				; baddea6bH
	mov	eax, DWORD PTR ?pFileSystem@@3PAVCFileSystem@@A ; pFileSystem
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?pFileSystem@@3PAVCFileSystem@@A ; pFileSystem
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIndex$4[ebp], eax

; 171  : 
; 172  : 		if (dwIndex != FS_INVALID_FILE) 

	cmp	DWORD PTR _dwIndex$4[ebp], -1
	je	SHORT $LN7@RestoreDev

; 173  : 		{
; 174  : 			BYTE *pbData = pFileSystem->GetFileData(dwIndex);

	mov	esi, esp
	mov	eax, DWORD PTR _dwIndex$4[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pFileSystem@@3PAVCFileSystem@@A ; pFileSystem
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?pFileSystem@@3PAVCFileSystem@@A ; pFileSystem
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pbData$3[ebp], eax

; 175  : 			DWORD dwSize = pFileSystem->GetFileSize(dwIndex);

	mov	esi, esp
	mov	eax, DWORD PTR _dwIndex$4[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pFileSystem@@3PAVCFileSystem@@A ; pFileSystem
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?pFileSystem@@3PAVCFileSystem@@A ; pFileSystem
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwSize$2[ebp], eax

; 176  : 			D3DXCreateTextureFromFileInMemory(m_pD3DDevice, pbData, dwSize, &m_pTexture);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _dwSize$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbData$3[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_D3DXCreateTextureFromFileInMemory@16
$LN7@RestoreDev:

; 177  : 		}
; 178  : 		
; 179  : 		for(int i=0; i<2; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN6@RestoreDev
$LN5@RestoreDev:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN6@RestoreDev:
	cmp	DWORD PTR _i$1[ebp], 2
	jge	$LN9@RestoreDev

; 180  : 		{
; 181  : 
; 182  : 			m_pD3DDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 183  : 			m_pD3DDevice->SetTexture( 0, m_pTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+260]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 184  : 
; 185  : 			m_pD3DDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 186  : 			m_pD3DDevice->SetRenderState( D3DRS_SRCBLEND,   D3DBLEND_SRCALPHA );

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 187  : 			m_pD3DDevice->SetRenderState( D3DRS_DESTBLEND,  D3DBLEND_INVSRCALPHA );

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 188  : 			m_pD3DDevice->SetRenderState( D3DRS_ALPHATESTENABLE,  TRUE );

	mov	esi, esp
	push	1
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 189  : 			m_pD3DDevice->SetRenderState( D3DRS_ALPHAREF,         0x08 );

	mov	esi, esp
	push	8
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 190  : 			m_pD3DDevice->SetRenderState( D3DRS_ALPHAFUNC,  D3DCMP_GREATEREQUAL );

	mov	esi, esp
	push	7
	push	25					; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 191  : 			m_pD3DDevice->SetRenderState( D3DRS_FILLMODE,   D3DFILL_SOLID );

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 192  : 			m_pD3DDevice->SetRenderState( D3DRS_CULLMODE,   D3DCULL_CCW );

	mov	esi, esp
	push	3
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 193  : 			m_pD3DDevice->SetRenderState( D3DRS_STENCILENABLE,    FALSE );

	mov	esi, esp
	push	0
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 194  : 			m_pD3DDevice->SetRenderState( D3DRS_CLIPPING,         TRUE );

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 195  : 			m_pD3DDevice->SetRenderState( D3DRS_CLIPPLANEENABLE,  FALSE );

	mov	esi, esp
	push	0
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 196  : 			m_pD3DDevice->SetRenderState( D3DRS_VERTEXBLEND,      D3DVBF_DISABLE );

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 197  : 			m_pD3DDevice->SetRenderState( D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE );

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 198  : 			m_pD3DDevice->SetRenderState( D3DRS_FOGENABLE,        FALSE );

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 199  : 			m_pD3DDevice->SetRenderState( D3DRS_COLORWRITEENABLE,
; 200  : 				D3DCOLORWRITEENABLE_RED  | D3DCOLORWRITEENABLE_GREEN |
; 201  : 				D3DCOLORWRITEENABLE_BLUE | D3DCOLORWRITEENABLE_ALPHA );

	mov	esi, esp
	push	15					; 0000000fH
	push	168					; 000000a8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 202  : 			m_pD3DDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 203  : 			m_pD3DDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 204  : 			m_pD3DDevice->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 205  : 			m_pD3DDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 206  : 			m_pD3DDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 207  : 			m_pD3DDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 208  : 			m_pD3DDevice->SetTextureStageState( 0, D3DTSS_TEXCOORDINDEX, 0 );

	mov	esi, esp
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 209  : 			m_pD3DDevice->SetTextureStageState( 0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_DISABLE );

	mov	esi, esp
	push	0
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 210  : 			m_pD3DDevice->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	mov	esi, esp
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 211  : 			m_pD3DDevice->SetTextureStageState( 1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE );

	mov	esi, esp
	push	1
	push	4
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 212  : 			m_pD3DDevice->SetSamplerState( 0, D3DSAMP_MINFILTER, D3DTEXF_POINT );

	mov	esi, esp
	push	1
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+276]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 213  : 			m_pD3DDevice->SetSamplerState( 0, D3DSAMP_MAGFILTER, D3DTEXF_POINT );

	mov	esi, esp
	push	1
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+276]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 214  : 			m_pD3DDevice->SetSamplerState( 0, D3DSAMP_MIPFILTER, D3DTEXF_NONE );

	mov	esi, esp
	push	0
	push	7
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+276]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 215  : 
; 216  : 			if (i==0)

	cmp	DWORD PTR _i$1[ebp], 0
	jne	SHORT $LN3@RestoreDev

; 217  : 				m_pD3DDevice->EndStateBlock(&m_pStateBlockSaved);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+244]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 218  : 			else

	jmp	SHORT $LN2@RestoreDev
$LN3@RestoreDev:

; 219  : 				m_pD3DDevice->EndStateBlock(&m_pStateBlockDraw);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+244]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@RestoreDev:

; 220  : 
; 221  : 		}

	jmp	$LN5@RestoreDev
$LN9@RestoreDev:

; 222  : 	}
; 223  : 
; 224  : 	if(m_pFont && m_pFont != pDefaultFont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN10@RestoreDev
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR ?pDefaultFont@@3PAVCFontRender@@A ; pDefaultFont
	je	SHORT $LN10@RestoreDev

; 225  : 	{
; 226  : 		m_pFont->RestoreDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?RestoreDeviceObjects@CFontRender@@QAEXXZ ; CFontRender::RestoreDeviceObjects
$LN10@RestoreDev:

; 227  : 	}
; 228  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreDeviceObjects@CSpawnScreen@@QAEXXZ ENDP		; CSpawnScreen::RestoreDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\spawnscreen.cpp
;	COMDAT ?Draw@CSpawnScreen@@QAEXXZ
_TEXT	SEGMENT
$T1 = -688						; size = 12
$T2 = -668						; size = 12
$T3 = -648						; size = 12
$T4 = -628						; size = 12
$T5 = -608						; size = 28
$T6 = -572						; size = 28
$T7 = -536						; size = 28
$T8 = -500						; size = 28
$T9 = -464						; size = 8
_szText$10 = -256					; size = 4
_b$11 = -244						; size = 4
_t$12 = -232						; size = 4
_r$13 = -220						; size = 4
_l$14 = -208						; size = 4
_v$15 = -196						; size = 112
_iTexHeight$16 = -76					; size = 4
_iTexWidth$17 = -64					; size = 4
_rect$18 = -52						; size = 16
_size$19 = -28						; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Draw@CSpawnScreen@@QAEXXZ PROC				; CSpawnScreen::Draw, COMDAT
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 692				; 000002b4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-692]
	mov	ecx, 173				; 000000adH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 	if (m_pFont && m_szSpawnText)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN2@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN2@Draw

; 102  : 	{
; 103  : 		SIZE size = m_pFont->MeasureText(m_szSpawnText);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _size$19[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?MeasureText@CFontRender@@QAE?AUtagSIZE@@PAD@Z ; CFontRender::MeasureText

; 104  : 
; 105  : 		RECT rect;
; 106  : 		rect.bottom	= pGame->GetScreenHeight() - 30; 

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetScreenHeight@CGame@@QAEHXZ		; CGame::GetScreenHeight
	sub	eax, 30					; 0000001eH
	mov	DWORD PTR _rect$18[ebp+12], eax

; 107  : 		rect.top = rect.bottom - size.cy;

	mov	eax, DWORD PTR _rect$18[ebp+12]
	sub	eax, DWORD PTR _size$19[ebp+4]
	mov	DWORD PTR _rect$18[ebp+4], eax

; 108  : 		rect.left = 20; 

	mov	DWORD PTR _rect$18[ebp], 20		; 00000014H

; 109  : 		rect.right = rect.left + size.cx;

	mov	eax, DWORD PTR _rect$18[ebp]
	add	eax, DWORD PTR _size$19[ebp]
	mov	DWORD PTR _rect$18[ebp+8], eax

; 110  : 
; 111  : 		m_pFont->RenderText(m_szSpawnText,rect,0xFFFFFFFF);

	push	-1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$18[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$18[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$18[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$18[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?RenderText@CFontRender@@QAEXPADUtagRECT@@K@Z ; CFontRender::RenderText

; 112  : 
; 113  : 		const int iTexWidth = 185;

	mov	DWORD PTR _iTexWidth$17[ebp], 185	; 000000b9H

; 114  : 		const int iTexHeight = 73;

	mov	DWORD PTR _iTexHeight$16[ebp], 73	; 00000049H

; 115  : 
; 116  : 		rect.top -= iTexHeight + 30;

	mov	eax, DWORD PTR _rect$18[ebp+4]
	sub	eax, 103				; 00000067H
	mov	DWORD PTR _rect$18[ebp+4], eax

; 117  : 		rect.bottom = rect.top + iTexHeight;

	mov	eax, DWORD PTR _rect$18[ebp+4]
	add	eax, 73					; 00000049H
	mov	DWORD PTR _rect$18[ebp+12], eax

; 118  : 		rect.left = 20;

	mov	DWORD PTR _rect$18[ebp], 20		; 00000014H

; 119  : 		rect.right = rect.left + iTexWidth;

	mov	eax, DWORD PTR _rect$18[ebp]
	add	eax, 185				; 000000b9H
	mov	DWORD PTR _rect$18[ebp+8], eax

; 120  : 
; 121  : 		if (m_pTexture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN1@Draw

; 122  : 		{
; 123  : 			D3DTLVERTEX v[4];

	push	OFFSET ??0_D3DTLVERTEX@@QAE@XZ		; _D3DTLVERTEX::_D3DTLVERTEX
	push	4
	push	28					; 0000001cH
	lea	eax, DWORD PTR _v$15[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z

; 124  : 			float l=rect.left-0.5f;

	cvtsi2ss xmm0, DWORD PTR _rect$18[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _l$14[ebp], xmm0

; 125  : 			float r=rect.right+0.5f;

	cvtsi2ss xmm0, DWORD PTR _rect$18[ebp+8]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _r$13[ebp], xmm0

; 126  : 			float t=rect.top-0.5f;

	cvtsi2ss xmm0, DWORD PTR _rect$18[ebp+4]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _t$12[ebp], xmm0

; 127  : 			float b=rect.bottom+0.5f;

	cvtsi2ss xmm0, DWORD PTR _rect$18[ebp+12]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _b$11[ebp], xmm0

; 128  : 			v[0]=D3DTLVERTEX(D3DXVECTOR3(l,b,0.1f),1.0f,0xFFFFFFFF,0.0f,1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	-1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _l$14[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0_D3DTLVERTEX@@QAE@ABU_D3DVECTOR@@MKMM@Z ; _D3DTLVERTEX::_D3DTLVERTEX
	mov	ecx, 28					; 0000001cH
	imul	edx, ecx, 0
	lea	edi, DWORD PTR _v$15[ebp+edx]
	mov	ecx, 7
	mov	esi, eax
	rep movsd

; 129  : 			v[1]=D3DTLVERTEX(D3DXVECTOR3(l,t,0.1f),1.0f,0xFFFFFFFF,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	-1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _t$12[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _l$14[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0_D3DTLVERTEX@@QAE@ABU_D3DVECTOR@@MKMM@Z ; _D3DTLVERTEX::_D3DTLVERTEX
	mov	ecx, 28					; 0000001cH
	shl	ecx, 0
	lea	edi, DWORD PTR _v$15[ebp+ecx]
	mov	ecx, 7
	mov	esi, eax
	rep movsd

; 130  : 			v[2]=D3DTLVERTEX(D3DXVECTOR3(r,b,0.1f),1.0f,0xFFFFFFFF,1.0f,1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	-1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _b$11[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$13[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	ecx, DWORD PTR $T7[ebp]
	call	??0_D3DTLVERTEX@@QAE@ABU_D3DVECTOR@@MKMM@Z ; _D3DTLVERTEX::_D3DTLVERTEX
	mov	ecx, 28					; 0000001cH
	shl	ecx, 1
	lea	edi, DWORD PTR _v$15[ebp+ecx]
	mov	ecx, 7
	mov	esi, eax
	rep movsd

; 131  : 			v[3]=D3DTLVERTEX(D3DXVECTOR3(r,t,0.1f),1.0f,0xFFFFFFFF,1.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	-1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _t$12[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _r$13[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	ecx, DWORD PTR $T8[ebp]
	call	??0_D3DTLVERTEX@@QAE@ABU_D3DVECTOR@@MKMM@Z ; _D3DTLVERTEX::_D3DTLVERTEX
	mov	ecx, 28					; 0000001cH
	imul	edx, ecx, 3
	lea	edi, DWORD PTR _v$15[ebp+edx]
	mov	ecx, 7
	mov	esi, eax
	rep movsd

; 132  : 
; 133  : 			m_pStateBlockSaved->Capture();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 134  : 			m_pStateBlockDraw->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 135  :     
; 136  : 	        m_pD3DDevice->SetSamplerState( 0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+276]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : 	        m_pD3DDevice->SetSamplerState( 0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+276]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 138  : 
; 139  : 			m_pD3DDevice->SetFVF( D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1 );

	mov	esi, esp
	push	324					; 00000144H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 			m_pD3DDevice->SetPixelShader( NULL );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+428]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 141  : 			m_pD3DDevice->DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, v, sizeof(D3DTLVERTEX));

	mov	esi, esp
	push	28					; 0000001cH
	lea	eax, DWORD PTR _v$15[ebp]
	push	eax
	push	2
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+332]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 142  : 
; 143  : 			m_pStateBlockSaved->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Draw:

; 144  : 
; 145  : 		}
; 146  : 
; 147  : 		char *szText = (char *)szVersionInfo;

	mov	DWORD PTR _szText$10[ebp], OFFSET _szVersionInfo

; 148  : 		size = m_pFont->MeasureText(szText);

	mov	eax, DWORD PTR _szText$10[ebp]
	push	eax
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?MeasureText@CFontRender@@QAE?AUtagSIZE@@PAD@Z ; CFontRender::MeasureText
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$19[ebp], ecx
	mov	DWORD PTR _size$19[ebp+4], edx

; 149  : 		rect.top = rect.bottom;

	mov	eax, DWORD PTR _rect$18[ebp+12]
	mov	DWORD PTR _rect$18[ebp+4], eax

; 150  : 		rect.bottom = rect.top + size.cy;

	mov	eax, DWORD PTR _rect$18[ebp+4]
	add	eax, DWORD PTR _size$19[ebp+4]
	mov	DWORD PTR _rect$18[ebp+12], eax

; 151  : 		rect.left = 20 + (iTexWidth - size.cx) / 2;

	mov	eax, 185				; 000000b9H
	sub	eax, DWORD PTR _size$19[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 20					; 00000014H
	mov	DWORD PTR _rect$18[ebp], eax

; 152  : 		rect.right = rect.left + size.cx;

	mov	eax, DWORD PTR _rect$18[ebp]
	add	eax, DWORD PTR _size$19[ebp]
	mov	DWORD PTR _rect$18[ebp+8], eax

; 153  : 
; 154  : 		m_pFont->RenderText(szText,rect,0xFF27ABFA);

	push	-14177286				; ff27abfaH
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$18[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$18[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$18[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$18[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _szText$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?RenderText@CFontRender@@QAEXPADUtagRECT@@K@Z ; CFontRender::RenderText
$LN2@Draw:

; 155  : 
; 156  : 	}
; 157  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 692				; 000002b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Draw:
	DD	3
	DD	$LN8@Draw
$LN8@Draw:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN5@Draw
	DD	-52					; ffffffccH
	DD	16					; 00000010H
	DD	$LN6@Draw
	DD	-196					; ffffff3cH
	DD	112					; 00000070H
	DD	$LN7@Draw
$LN7@Draw:
	DB	118					; 00000076H
	DB	0
$LN6@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN5@Draw:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?Draw@CSpawnScreen@@QAEXXZ ENDP				; CSpawnScreen::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCFontRender@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCFontRender@@QAEPAXI@Z PROC				; CFontRender::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFontRender@@QAE@XZ			; CFontRender::~CFontRender
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFontRender@@QAEPAXI@Z ENDP				; CFontRender::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetScreenHeight@CGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetScreenHeight@CGame@@QAEHXZ PROC			; CGame::GetScreenHeight, COMDAT
; _this$ = ecx

; 153  : 	int GetScreenHeight() { return *(int*)0xC17048; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ds:12677192
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetScreenHeight@CGame@@QAEHXZ ENDP			; CGame::GetScreenHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 305  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 306  :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fy$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 307  :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fz$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 308  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
