; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\DS_ByteQueue.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0ByteQueue@DataStructures@@QAE@XZ		; DataStructures::ByteQueue::ByteQueue
PUBLIC	??1ByteQueue@DataStructures@@QAE@XZ		; DataStructures::ByteQueue::~ByteQueue
PUBLIC	?WriteBytes@ByteQueue@DataStructures@@QAEXPBDI@Z ; DataStructures::ByteQueue::WriteBytes
PUBLIC	?ReadBytes@ByteQueue@DataStructures@@QAE_NPADI_N@Z ; DataStructures::ByteQueue::ReadBytes
PUBLIC	?GetBytesWritten@ByteQueue@DataStructures@@QBEIXZ ; DataStructures::ByteQueue::GetBytesWritten
PUBLIC	?IncrementReadOffset@ByteQueue@DataStructures@@QAEXI@Z ; DataStructures::ByteQueue::IncrementReadOffset
PUBLIC	?Clear@ByteQueue@DataStructures@@QAEXXZ		; DataStructures::ByteQueue::Clear
PUBLIC	?Print@ByteQueue@DataStructures@@QAEXXZ		; DataStructures::ByteQueue::Print
PUBLIC	??_C@_03JLNFKLOC@?$CFi?5?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_free:PROC
EXTRN	_realloc:PROC
EXTRN	_printf:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JLNFKLOC@?$CFi?5?$AA@
CONST	SEGMENT
??_C@_03JLNFKLOC@?$CFi?5?$AA@ DB '%i ', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_bytequeue.cpp
;	COMDAT ?Print@ByteQueue@DataStructures@@QAEXXZ
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Print@ByteQueue@DataStructures@@QAEXXZ PROC		; DataStructures::ByteQueue::Print, COMDAT
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	unsigned i;
; 98   : 	for (i=readOffset; i!=writeOffset; i++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN3@Print
$LN2@Print:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Print:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN1@Print

; 99   : 		printf("%i ", data[i]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	movsx	eax, BYTE PTR [ecx+edx]
	push	eax
	push	OFFSET ??_C@_03JLNFKLOC@?$CFi?5?$AA@
	call	_printf
	add	esp, 8
	jmp	SHORT $LN2@Print
$LN1@Print:

; 100  : 	printf("\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	_printf
	add	esp, 4

; 101  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Print@ByteQueue@DataStructures@@QAEXXZ ENDP		; DataStructures::ByteQueue::Print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_bytequeue.cpp
;	COMDAT ?Clear@ByteQueue@DataStructures@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Clear@ByteQueue@DataStructures@@QAEXXZ PROC		; DataStructures::ByteQueue::Clear, COMDAT
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 	if (lengthAllocated)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Clear

; 80   : 		free(data);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4
$LN1@Clear:

; 81   : 	readOffset=writeOffset=lengthAllocated=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 82   : 	data=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 83   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@ByteQueue@DataStructures@@QAEXXZ ENDP		; DataStructures::ByteQueue::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_bytequeue.cpp
;	COMDAT ?IncrementReadOffset@ByteQueue@DataStructures@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_length$ = 8						; size = 4
?IncrementReadOffset@ByteQueue@DataStructures@@QAEXI@Z PROC ; DataStructures::ByteQueue::IncrementReadOffset, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 	readOffset=(readOffset+length) % lengthAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 94   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IncrementReadOffset@ByteQueue@DataStructures@@QAEXI@Z ENDP ; DataStructures::ByteQueue::IncrementReadOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_bytequeue.cpp
;	COMDAT ?GetBytesWritten@ByteQueue@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetBytesWritten@ByteQueue@DataStructures@@QBEIXZ PROC	; DataStructures::ByteQueue::GetBytesWritten, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	if (writeOffset>=readOffset)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN2@GetBytesWr

; 87   : 		return writeOffset-readOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN3@GetBytesWr

; 88   : 	else

	jmp	SHORT $LN3@GetBytesWr
$LN2@GetBytesWr:

; 89   : 		return (writeOffset-1)+(lengthAllocated-readOffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+12]
	sub	edx, DWORD PTR [eax+4]
	lea	eax, DWORD PTR [ecx+edx-1]
$LN3@GetBytesWr:

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBytesWritten@ByteQueue@DataStructures@@QBEIXZ ENDP	; DataStructures::ByteQueue::GetBytesWritten
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_bytequeue.cpp
;	COMDAT ?ReadBytes@ByteQueue@DataStructures@@QAE_NPADI_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_out$ = 8						; size = 4
_length$ = 12						; size = 4
_peek$ = 16						; size = 1
?ReadBytes@ByteQueue@DataStructures@@QAE_NPADI_N@Z PROC	; DataStructures::ByteQueue::ReadBytes, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	if (GetBytesWritten() < length)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBytesWritten@ByteQueue@DataStructures@@QBEIXZ ; DataStructures::ByteQueue::GetBytesWritten
	cmp	eax, DWORD PTR _length$[ebp]
	jae	SHORT $LN4@ReadBytes

; 61   : 		return false;

	xor	al, al
	jmp	$LN5@ReadBytes
$LN4@ReadBytes:

; 62   : 
; 63   : 	if (length <= lengthAllocated-readOffset)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR _length$[ebp], edx
	ja	SHORT $LN3@ReadBytes

; 64   : 		memcpy(out, data+readOffset, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	push	edx
	mov	ecx, DWORD PTR _out$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 65   : 	else

	jmp	SHORT $LN2@ReadBytes
$LN3@ReadBytes:

; 66   : 	{
; 67   : 		// Wrap
; 68   : 		memcpy(out, data+readOffset, lengthAllocated-readOffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 69   : 		memcpy(out+(lengthAllocated-readOffset), data, length-(lengthAllocated-readOffset));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _out$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@ReadBytes:

; 70   : 	}
; 71   : 
; 72   : 	if (peek==false)

	movzx	eax, BYTE PTR _peek$[ebp]
	test	eax, eax
	jne	SHORT $LN1@ReadBytes

; 73   : 		IncrementReadOffset(length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReadOffset@ByteQueue@DataStructures@@QAEXI@Z ; DataStructures::ByteQueue::IncrementReadOffset
$LN1@ReadBytes:

; 74   : 		
; 75   : 	return true;

	mov	al, 1
$LN5@ReadBytes:

; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReadBytes@ByteQueue@DataStructures@@QAE_NPADI_N@Z ENDP	; DataStructures::ByteQueue::ReadBytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_bytequeue.cpp
;	COMDAT ?WriteBytes@ByteQueue@DataStructures@@QAEXPBDI@Z
_TEXT	SEGMENT
_newAmountToAllocate$1 = -44				; size = 4
_oldLengthAllocated$2 = -32				; size = 4
_bytesWritten$ = -20					; size = 4
_this$ = -8						; size = 4
_in$ = 8						; size = 4
_length$ = 12						; size = 4
?WriteBytes@ByteQueue@DataStructures@@QAEXPBDI@Z PROC	; DataStructures::ByteQueue::WriteBytes, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 22   : 	unsigned bytesWritten;
; 23   : 	bytesWritten=GetBytesWritten();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBytesWritten@ByteQueue@DataStructures@@QBEIXZ ; DataStructures::ByteQueue::GetBytesWritten
	mov	DWORD PTR _bytesWritten$[ebp], eax

; 24   : 	if (lengthAllocated==0 || length > lengthAllocated-bytesWritten-1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN7@WriteBytes
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _bytesWritten$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _length$[ebp], ecx
	jbe	$LN8@WriteBytes
$LN7@WriteBytes:

; 25   : 	{
; 26   : 		unsigned oldLengthAllocated=lengthAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _oldLengthAllocated$2[ebp], ecx

; 27   : 		unsigned newAmountToAllocate=length*2;

	mov	eax, DWORD PTR _length$[ebp]
	shl	eax, 1
	mov	DWORD PTR _newAmountToAllocate$1[ebp], eax

; 28   : 		if (newAmountToAllocate<256)

	cmp	DWORD PTR _newAmountToAllocate$1[ebp], 256 ; 00000100H
	jae	SHORT $LN6@WriteBytes

; 29   : 			newAmountToAllocate=256;

	mov	DWORD PTR _newAmountToAllocate$1[ebp], 256 ; 00000100H
$LN6@WriteBytes:

; 30   : 		lengthAllocated=lengthAllocated + newAmountToAllocate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _newAmountToAllocate$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 31   : 		data=(char*)realloc(data, lengthAllocated);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_realloc
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 32   : 		if (writeOffset < readOffset)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN8@WriteBytes

; 33   : 		{
; 34   : 			if (writeOffset <= newAmountToAllocate)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _newAmountToAllocate$1[ebp]
	ja	SHORT $LN4@WriteBytes

; 35   : 			{
; 36   : 				memcpy(data + oldLengthAllocated, data, writeOffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _oldLengthAllocated$2[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 37   : 				writeOffset=readOffset+bytesWritten;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _bytesWritten$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 38   : 			}
; 39   : 			else

	jmp	SHORT $LN8@WriteBytes
$LN4@WriteBytes:

; 40   : 			{
; 41   : 				memcpy(data + oldLengthAllocated, data, newAmountToAllocate);

	mov	eax, DWORD PTR _newAmountToAllocate$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _oldLengthAllocated$2[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 42   : 				memmove(data, data+newAmountToAllocate, writeOffset-newAmountToAllocate);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _newAmountToAllocate$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _newAmountToAllocate$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 43   :                 writeOffset-=newAmountToAllocate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _newAmountToAllocate$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN8@WriteBytes:

; 44   : 			}
; 45   : 		}
; 46   : 	}
; 47   : 
; 48   : 	if (length <= lengthAllocated-writeOffset)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR _length$[ebp], edx
	ja	SHORT $LN2@WriteBytes

; 49   : 		memcpy(data+writeOffset, in, length);

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 50   : 	else

	jmp	SHORT $LN1@WriteBytes
$LN2@WriteBytes:

; 51   : 	{
; 52   : 		// Wrap
; 53   : 		memcpy(data+writeOffset, in, lengthAllocated-writeOffset);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 54   : 		memcpy(data, in+(lengthAllocated-writeOffset), length-(lengthAllocated-writeOffset));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@WriteBytes:

; 55   : 	}
; 56   : 	writeOffset=(writeOffset+length) % lengthAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 57   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteBytes@ByteQueue@DataStructures@@QAEXPBDI@Z ENDP	; DataStructures::ByteQueue::WriteBytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_bytequeue.cpp
;	COMDAT ??1ByteQueue@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ByteQueue@DataStructures@@QAE@XZ PROC		; DataStructures::ByteQueue::~ByteQueue, COMDAT
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 16   : 	Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@ByteQueue@DataStructures@@QAEXXZ	; DataStructures::ByteQueue::Clear

; 17   : 	
; 18   : 
; 19   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1ByteQueue@DataStructures@@QAE@XZ ENDP		; DataStructures::ByteQueue::~ByteQueue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_bytequeue.cpp
;	COMDAT ??0ByteQueue@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ByteQueue@DataStructures@@QAE@XZ PROC		; DataStructures::ByteQueue::ByteQueue, COMDAT
; _this$ = ecx

; 10   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 11   : 	readOffset=writeOffset=lengthAllocated=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 12   : 	data=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 13   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ByteQueue@DataStructures@@QAE@XZ ENDP		; DataStructures::ByteQueue::ByteQueue
_TEXT	ENDS
END
