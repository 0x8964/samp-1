; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\ConsoleServer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_UNASSIGNED_PLAYER_ID DD 0ffffffffH
	DW	0ffffH
CONST	ENDS
PUBLIC	??4PlayerID@@QAEAAU0@ABU0@@Z			; PlayerID::operator=
PUBLIC	??0ConsoleServer@@QAE@XZ			; ConsoleServer::ConsoleServer
PUBLIC	??1ConsoleServer@@QAE@XZ			; ConsoleServer::~ConsoleServer
PUBLIC	?SetTransportProvider@ConsoleServer@@QAEXPAVTransportInterface@@G@Z ; ConsoleServer::SetTransportProvider
PUBLIC	?AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z ; ConsoleServer::AddCommandParser
PUBLIC	?RemoveCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z ; ConsoleServer::RemoveCommandParser
PUBLIC	?Update@ConsoleServer@@QAEXXZ			; ConsoleServer::Update
PUBLIC	?ListParsers@ConsoleServer@@IAEXUPlayerID@@@Z	; ConsoleServer::ListParsers
PUBLIC	??0?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ ; DataStructures::List<CommandParserInterface *>::List<CommandParserInterface *>
PUBLIC	??1?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ ; DataStructures::List<CommandParserInterface *>::~List<CommandParserInterface *>
PUBLIC	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
PUBLIC	?Insert@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXQAVCommandParserInterface@@@Z ; DataStructures::List<CommandParserInterface *>::Insert
PUBLIC	?Del@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXI@Z ; DataStructures::List<CommandParserInterface *>::Del
PUBLIC	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
PUBLIC	?__LINE__Var@?1??AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z@4JA ; `ConsoleServer::AddCommandParser'::`2'::__LINE__Var
PUBLIC	??_C@_1FE@FIHGNJHG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAc?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AAs@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_0DO@NLNPPNJH@Connected?5to?5remote?5command?5cons@ ; `string'
PUBLIC	??_C@_04PCJFHION@help?$AA@			; `string'
PUBLIC	??_C@_0BC@DPPMHAOM@?$AN?6INSTRUCTIONS?3?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0EJ@MPJMLFDA@Enter?5commands?5on?5your?5keyboard?0@ ; `string'
PUBLIC	??_C@_0DL@EMBLIGKH@You?5can?5use?5quotation?5marks?5to?5t@ ; `string'
PUBLIC	??_C@_0DJ@GOAAOJOH@You?5can?5connect?5multiple?5times?5f@ ; `string'
PUBLIC	??_C@_0EO@FAGBNIJD@You?5can?5direct?5commands?5to?5a?5par@ ; `string'
PUBLIC	??_C@_0M@LFCGILND@COMMANDS?3?$AN?6?$AA@		; `string'
PUBLIC	??_C@_0EB@OCHDCLHA@help?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0FA@OHDDDFPG@help?5?$DMParserName?$DO?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0FB@PENBGBMM@help?5?$DMCommandName?$DO?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0EL@MOIDGHJB@quit?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ ; `string'
PUBLIC	??_C@_0EA@HBIAAPBG@?$FL?$DMParserName?$DO?$FN?5?5?5?$DMCommand?$DO?5?$FL?$DMPar@ ; `string'
PUBLIC	??_C@_0EA@HIMLCLLK@?$FL?$DMParserNumber?$DO?$FN?5?$DMCommand?$DO?5?$FL?$DMPar@ ; `string'
PUBLIC	??_C@_0BA@DJLCEDHE@COMMAND?5LIST?3?$AN?6?$AA@	; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0BK@DPMAEHFD@?$CIVariable?5parms?$CJ?3?5?$CFs?5?$CFs?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@ICBGBOJB@?$CI?$CFi?5parms?$CJ?3?5?$CFs?5?$CFs?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@PMNLJFDA@Unknown?5help?5topic?3?5?$CFs?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_04KNNLNNGO@quit?$AA@			; `string'
PUBLIC	??_C@_08HDBDJBNL@Goodbye?$CB?$AA@		; `string'
PUBLIC	??_C@_0BB@MBKMFMKD@Invalid?5index?4?$AN?6?$AA@	; `string'
PUBLIC	??_C@_0CO@MGKEDAIC@Invalid?5parameter?5count?4?$AN?6?$CI?$CFi?5pa@ ; `string'
PUBLIC	??_C@_0CK@GDAAGGHG@Unknown?5command?3?5?5Type?5?8help?8?5fo@ ; `string'
PUBLIC	??_C@_0BF@JKJFFOG@INSTALLED?5PARSERS?3?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_08EIGAEAF@?$CFi?4?5?$CFs?$AN?6?$AA@	; `string'
PUBLIC	??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ ; `string'
PUBLIC	??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__wassert:PROC
EXTRN	_memcpy:PROC
EXTRN	__stricmp:PROC
EXTRN	??9PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator!=
EXTRN	?ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z:PROC ; CommandParserInterface::ParseConsoleString
EXTRN	_atoi:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB:BYTE ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '>', 00H, '=', 00H, 'n', 00H, 'u', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
CONST	SEGMENT
??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'd', 00H, 's', 00H, '_'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08EIGAEAF@?$CFi?4?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_08EIGAEAF@?$CFi?4?5?$CFs?$AN?6?$AA@ DB '%i. %s', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JKJFFOG@INSTALLED?5PARSERS?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BF@JKJFFOG@INSTALLED?5PARSERS?3?$AN?6?$AA@ DB 'INSTALLED PARSERS:', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GDAAGGHG@Unknown?5command?3?5?5Type?5?8help?8?5fo@
CONST	SEGMENT
??_C@_0CK@GDAAGGHG@Unknown?5command?3?5?5Type?5?8help?8?5fo@ DB 'Unknown '
	DB	'command:  Type ''help'' for help.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@MGKEDAIC@Invalid?5parameter?5count?4?$AN?6?$CI?$CFi?5pa@
CONST	SEGMENT
??_C@_0CO@MGKEDAIC@Invalid?5parameter?5count?4?$AN?6?$CI?$CFi?5pa@ DB 'In'
	DB	'valid parameter count.', 0dH, 0aH, '(%i parms): %s %s', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBKMFMKD@Invalid?5index?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BB@MBKMFMKD@Invalid?5index?4?$AN?6?$AA@ DB 'Invalid index.', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08HDBDJBNL@Goodbye?$CB?$AA@
CONST	SEGMENT
??_C@_08HDBDJBNL@Goodbye?$CB?$AA@ DB 'Goodbye!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KNNLNNGO@quit?$AA@
CONST	SEGMENT
??_C@_04KNNLNNGO@quit?$AA@ DB 'quit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PMNLJFDA@Unknown?5help?5topic?3?5?$CFs?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BK@PMNLJFDA@Unknown?5help?5topic?3?5?$CFs?4?$AN?6?$AA@ DB 'Unknown'
	DB	' help topic: %s.', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ICBGBOJB@?$CI?$CFi?5parms?$CJ?3?5?$CFs?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BE@ICBGBOJB@?$CI?$CFi?5parms?$CJ?3?5?$CFs?5?$CFs?$AN?6?$AA@ DB '(%'
	DB	'i parms): %s %s', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DPMAEHFD@?$CIVariable?5parms?$CJ?3?5?$CFs?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BK@DPMAEHFD@?$CIVariable?5parms?$CJ?3?5?$CFs?5?$CFs?$AN?6?$AA@ DB '('
	DB	'Variable parms): %s %s', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DJLCEDHE@COMMAND?5LIST?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BA@DJLCEDHE@COMMAND?5LIST?3?$AN?6?$AA@ DB 'COMMAND LIST:', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@HIMLCLLK@?$FL?$DMParserNumber?$DO?$FN?5?$DMCommand?$DO?5?$FL?$DMPar@
CONST	SEGMENT
??_C@_0EA@HIMLCLLK@?$FL?$DMParserNumber?$DO?$FN?5?$DMCommand?$DO?5?$FL?$DMPar@ DB '['
	DB	'<ParserNumber>] <Command> [<Parameters>]   Execute a command', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@HBIAAPBG@?$FL?$DMParserName?$DO?$FN?5?5?5?$DMCommand?$DO?5?$FL?$DMPar@
CONST	SEGMENT
??_C@_0EA@HBIAAPBG@?$FL?$DMParserName?$DO?$FN?5?5?5?$DMCommand?$DO?5?$FL?$DMPar@ DB '['
	DB	'<ParserName>]   <Command> [<Parameters>]   Execute a command', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@MOIDGHJB@quit?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0EL@MOIDGHJB@quit?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'q'
	DB	'uit                                        Disconnects from t'
	DB	'he server.', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@PENBGBMM@help?5?$DMCommandName?$DO?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0FB@PENBGBMM@help?5?$DMCommandName?$DO?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'h'
	DB	'elp <CommandName>                          Show help on a par'
	DB	'ticular command.', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@OHDDDFPG@help?5?$DMParserName?$DO?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0FA@OHDDDFPG@help?5?$DMParserName?$DO?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'h'
	DB	'elp <ParserName>                           Show help on a par'
	DB	'ticular parser.', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OCHDCLHA@help?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_0EB@OCHDCLHA@help?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@ DB 'h'
	DB	'elp                                        Show this display.'
	DB	0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LFCGILND@COMMANDS?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_0M@LFCGILND@COMMANDS?3?$AN?6?$AA@ DB 'COMMANDS:', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@FAGBNIJD@You?5can?5direct?5commands?5to?5a?5par@
CONST	SEGMENT
??_C@_0EO@FAGBNIJD@You?5can?5direct?5commands?5to?5a?5par@ DB 'You can di'
	DB	'rect commands to a parser by prefixing the parser name or num'
	DB	'ber.', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GOAAOJOH@You?5can?5connect?5multiple?5times?5f@
CONST	SEGMENT
??_C@_0DJ@GOAAOJOH@You?5can?5connect?5multiple?5times?5f@ DB 'You can con'
	DB	'nect multiple times from the same computer.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@EMBLIGKH@You?5can?5use?5quotation?5marks?5to?5t@
CONST	SEGMENT
??_C@_0DL@EMBLIGKH@You?5can?5use?5quotation?5marks?5to?5t@ DB 'You can us'
	DB	'e quotation marks to toggle space delineation.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MPJMLFDA@Enter?5commands?5on?5your?5keyboard?0@
CONST	SEGMENT
??_C@_0EJ@MPJMLFDA@Enter?5commands?5on?5your?5keyboard?0@ DB 'Enter comma'
	DB	'nds on your keyboard, using spaces to delineate parameters.', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DPPMHAOM@?$AN?6INSTRUCTIONS?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BC@DPPMHAOM@?$AN?6INSTRUCTIONS?3?$AN?6?$AA@ DB 0dH, 0aH, 'INSTRUCT'
	DB	'IONS:', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCJFHION@help?$AA@
CONST	SEGMENT
??_C@_04PCJFHION@help?$AA@ DB 'help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@NLNPPNJH@Connected?5to?5remote?5command?5cons@
CONST	SEGMENT
??_C@_0DO@NLNPPNJH@Connected?5to?5remote?5command?5cons@ DB 'Connected to'
	DB	' remote command console.', 0dH, 0aH, 'Type ''help'' for help.'
	DB	0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@FIHGNJHG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAc?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AAs@
CONST	SEGMENT
??_C@_1FE@FIHGNJHG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAc?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AAs@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 'v', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z@4JA DD 02cH ; `ConsoleServer::AddCommandParser'::`2'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ PROC ; DataStructures::List<CommandParserInterface *>::Size, COMDAT
; _this$ = ecx

; 373  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 		return list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 375  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ENDP ; DataStructures::List<CommandParserInterface *>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Del@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = 8						; size = 4
?Del@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXI@Z PROC ; DataStructures::List<CommandParserInterface *>::Del, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 354  : 		// Delete the last elements on the list.  No compression needed
; 355  : #ifdef _DEBUG
; 356  : 		assert(list_size>=num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN3@Del
	push	356					; 00000164H
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Del:

; 357  : #endif
; 358  : 		list_size-=num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 359  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Del@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXI@Z ENDP ; DataStructures::List<CommandParserInterface *>::Del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Insert@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXQAVCommandParserInterface@@@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_array$3 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Insert@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXQAVCommandParserInterface@@@Z PROC ; DataStructures::List<CommandParserInterface *>::Insert, COMDAT
; _this$ = ecx

; 242  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 		// Reallocate list if necessary
; 244  : 
; 245  : 		if ( list_size == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@Insert

; 246  : 		{
; 247  : 			// allocate twice the currently allocated memory
; 248  : 			list_type * new_array;
; 249  : 
; 250  : 			if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Insert

; 251  : 				allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 16			; 00000010H

; 252  : 			else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 253  : 				allocation_size *= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@Insert:

; 254  : 
; 255  : 			new_array = new list_type [ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _new_array$3[ebp], eax

; 256  : 
; 257  : 			// copy old array over
; 258  : 			//	for ( unsigned int counter = 0; counter < list_size; ++counter )
; 259  : 			//		new_array[ counter ] = listArray[ counter ];
; 260  : 
; 261  : 			// Don't call constructors, assignment operators, etc.
; 262  : 			memcpy(new_array, listArray, list_size*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _new_array$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 263  : 
; 264  : 			// set old array to point to the newly allocated and twice as large array
; 265  : 			delete[] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 266  : 
; 267  : 			listArray = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$3[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Insert:

; 268  : 		}
; 269  : 
; 270  : 		// Insert the new item at the correct spot
; 271  : 		listArray[ list_size ] = input;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 272  : 
; 273  : 		++list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 274  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Insert@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXQAVCommandParserInterface@@@Z ENDP ; DataStructures::List<CommandParserInterface *>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z PROC ; DataStructures::List<CommandParserInterface *>::operator[], COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : #ifdef _DEBUG
; 187  : 		assert ( position < list_size );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@operator
	push	187					; 000000bbH
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 188  : #endif
; 189  : 		return listArray[ position ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _position$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ENDP ; DataStructures::List<CommandParserInterface *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??1?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<CommandParserInterface *>::~List<CommandParserInterface *>, COMDAT
; _this$ = ecx

; 121  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (allocation_size>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	SHORT $LN2@List

; 123  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@List:

; 124  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<CommandParserInterface *>::~List<CommandParserInterface *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??0?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<CommandParserInterface *>::List<CommandParserInterface *>, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 115  : 		listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 116  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<CommandParserInterface *>::List<CommandParserInterface *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\consoleserver.cpp
;	COMDAT ?ListParsers@ConsoleServer@@IAEXUPlayerID@@@Z
_TEXT	SEGMENT
tv91 = -220						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
?ListParsers@ConsoleServer@@IAEXUPlayerID@@@Z PROC	; ConsoleServer::ListParsers, COMDAT
; _this$ = ecx

; 266  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	transport->Send(playerId,"INSTALLED PARSERS:\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BF@JKJFFOG@INSTALLED?5PARSERS?3?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 268  : 	unsigned i;
; 269  : 	for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ListParser
$LN2@ListParser:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ListParser:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@ListParser

; 270  : 	{
; 271  :         transport->Send(playerId, "%i. %s\r\n", i+1, commandParserList[i]->GetName());

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], ecx
	mov	edx, DWORD PTR tv91[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv91[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_08EIGAEAF@?$CFi?4?5?$CFs?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 272  : 	}

	jmp	$LN2@ListParser
$LN4@ListParser:

; 273  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ListParsers@ConsoleServer@@IAEXUPlayerID@@@Z ENDP	; ConsoleServer::ListParsers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\consoleserver.cpp
;	COMDAT ?Update@ConsoleServer@@QAEXXZ
_TEXT	SEGMENT
tv634 = -1004						; size = 4
tv612 = -1004						; size = 4
tv570 = -1004						; size = 4
tv548 = -1004						; size = 4
tv530 = -1004						; size = 4
tv408 = -1004						; size = 4
tv378 = -1004						; size = 4
tv355 = -1004						; size = 4
tv340 = -1004						; size = 4
tv175 = -1004						; size = 4
tv131 = -1004						; size = 4
$T1 = -994						; size = 6
$T2 = -978						; size = 6
$T3 = -964						; size = 4
_commandParserIndex$4 = -760				; size = 4
_failed$5 = -745					; size = 1
_tryAllParsers$6 = -733					; size = 1
_rc$7 = -724						; size = 9
_copy$8 = -704						; size = 512
_commandParsed$9 = -181					; size = 1
_rc$ = -172						; size = 9
_p$ = -152						; size = 4
_newOrLostConnectionId$ = -140				; size = 6
_numParameters$ = -124					; size = 4
_parameterList$ = -112					; size = 80
_i$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Update@ConsoleServer@@QAEXXZ PROC			; ConsoleServer::Update, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1004				; 000003ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1004]
	mov	ecx, 251				; 000000fbH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	unsigned i;
; 87   : 	char *parameterList[20]; // Up to 20 parameters
; 88   : 	unsigned numParameters;
; 89   : 	PlayerID newOrLostConnectionId;
; 90   : 	Packet *p;
; 91   : 	RegisteredCommand rc;
; 92   : 
; 93   : 	p = transport->Receive();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 94   : 	newOrLostConnectionId=transport->HasNewConnection();

	mov	esi, esp
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	ecx, DWORD PTR _newOrLostConnectionId$[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 95   : 
; 96   : 	if (newOrLostConnectionId!=UNASSIGNED_PLAYER_ID)

	push	OFFSET _UNASSIGNED_PLAYER_ID
	lea	ecx, DWORD PTR _newOrLostConnectionId$[ebp]
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN51@Update

; 97   : 	{
; 98   : 		for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN50@Update
$LN49@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN50@Update:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN48@Update

; 99   : 		{
; 100  : 			commandParserList[i]->OnNewIncomingConnection(newOrLostConnectionId, transport);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv131[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _newOrLostConnectionId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _newOrLostConnectionId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 101  : 		}

	jmp	SHORT $LN49@Update
$LN48@Update:

; 102  : 
; 103  : 		transport->Send(newOrLostConnectionId, "Connected to remote command console.\r\nType 'help' for help.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DO@NLNPPNJH@Connected?5to?5remote?5command?5cons@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _newOrLostConnectionId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _newOrLostConnectionId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 104  : 		ListParsers(newOrLostConnectionId);

	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _newOrLostConnectionId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _newOrLostConnectionId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ListParsers@ConsoleServer@@IAEXUPlayerID@@@Z ; ConsoleServer::ListParsers
$LN51@Update:

; 105  : 	}
; 106  : 
; 107  : 	newOrLostConnectionId=transport->HasLostConnection();

	mov	esi, esp
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	ecx, DWORD PTR _newOrLostConnectionId$[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 108  : 	if (newOrLostConnectionId!=UNASSIGNED_PLAYER_ID)

	push	OFFSET _UNASSIGNED_PLAYER_ID
	lea	ecx, DWORD PTR _newOrLostConnectionId$[ebp]
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN43@Update

; 109  : 	{
; 110  : 		for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN46@Update
$LN45@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN46@Update:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN43@Update

; 111  : 			commandParserList[i]->OnConnectionLost(newOrLostConnectionId, transport);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv175[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _newOrLostConnectionId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _newOrLostConnectionId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR tv175[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv175[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN45@Update
$LN43@Update:

; 112  : 	}
; 113  : 
; 114  : 	while (p)

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN53@Update

; 115  : 	{
; 116  : 		bool commandParsed=false;

	mov	BYTE PTR _commandParsed$9[ebp], 0

; 117  : 		char copy[REMOTE_MAX_TEXT_INPUT];
; 118  : 		memcpy(copy, p->data, p->length);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _copy$8[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 119  : 		copy[p->length]=0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 512			; 00000200H
	jae	SHORT $LN54@Update
	jmp	SHORT $LN55@Update
$LN54@Update:
	call	___report_rangecheckfailure
$LN55@Update:
	mov	edx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _copy$8[ebp+edx], 0

; 120  : 		CommandParserInterface::ParseConsoleString((char*)p->data, COMMAND_DELINATOR, COMMAND_DELINATOR_TOGGLE, &numParameters, parameterList, 20); // Up to 20 parameters

	push	20					; 00000014H
	lea	eax, DWORD PTR _parameterList$[ebp]
	push	eax
	lea	ecx, DWORD PTR _numParameters$[ebp]
	push	ecx
	push	34					; 00000022H
	push	32					; 00000020H
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	?ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z ; CommandParserInterface::ParseConsoleString
	add	esp, 24					; 00000018H

; 121  : 		if (_stricmp(*parameterList, "help")==0 && numParameters<=2)

	push	OFFSET ??_C@_04PCJFHION@help?$AA@
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp+ecx]
	push	edx
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	$LN41@Update
	cmp	DWORD PTR _numParameters$[ebp], 2
	ja	$LN41@Update

; 122  : 		{
; 123  : 			// Find the parser specified and display help for it
; 124  : 			if (numParameters==1)

	cmp	DWORD PTR _numParameters$[ebp], 1
	jne	$LN40@Update

; 125  : 			{
; 126  : 				transport->Send(p->playerId, "\r\nINSTRUCTIONS:\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BC@DPPMHAOM@?$AN?6INSTRUCTIONS?3?$AN?6?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 127  : 				transport->Send(p->playerId, "Enter commands on your keyboard, using spaces to delineate parameters.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EJ@MPJMLFDA@Enter?5commands?5on?5your?5keyboard?0@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 128  : 				transport->Send(p->playerId, "You can use quotation marks to toggle space delineation.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DL@EMBLIGKH@You?5can?5use?5quotation?5marks?5to?5t@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 129  : 				transport->Send(p->playerId, "You can connect multiple times from the same computer.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DJ@GOAAOJOH@You?5can?5connect?5multiple?5times?5f@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 130  : 				transport->Send(p->playerId, "You can direct commands to a parser by prefixing the parser name or number.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EO@FAGBNIJD@You?5can?5direct?5commands?5to?5a?5par@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 131  : 				transport->Send(p->playerId, "COMMANDS:\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0M@LFCGILND@COMMANDS?3?$AN?6?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 132  : 				transport->Send(p->playerId, "help                                        Show this display.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EB@OCHDCLHA@help?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 133  : 				transport->Send(p->playerId, "help <ParserName>                           Show help on a particular parser.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0FA@OHDDDFPG@help?5?$DMParserName?$DO?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 134  : 				transport->Send(p->playerId, "help <CommandName>                          Show help on a particular command.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0FB@PENBGBMM@help?5?$DMCommandName?$DO?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 135  : 				transport->Send(p->playerId, "quit                                        Disconnects from the server.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EL@MOIDGHJB@quit?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 136  : 				transport->Send(p->playerId, "[<ParserName>]   <Command> [<Parameters>]   Execute a command\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EA@HBIAAPBG@?$FL?$DMParserName?$DO?$FN?5?5?5?$DMCommand?$DO?5?$FL?$DMPar@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : 				transport->Send(p->playerId, "[<ParserNumber>] <Command> [<Parameters>]   Execute a command\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EA@HIMLCLLK@?$FL?$DMParserNumber?$DO?$FN?5?$DMCommand?$DO?5?$FL?$DMPar@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 138  : 				ListParsers(p->playerId);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ListParsers@ConsoleServer@@IAEXUPlayerID@@@Z ; ConsoleServer::ListParsers

; 139  : 			}
; 140  : 			else // numParameters == 2, including the help tag

	jmp	$LN39@Update
$LN40@Update:

; 141  : 			{
; 142  : 				for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN38@Update
$LN37@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN38@Update:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN36@Update

; 143  : 				{
; 144  : 					if (_stricmp(parameterList[1], commandParserList[i]->GetName())==0)

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv340[ebp], ecx
	mov	edx, DWORD PTR tv340[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv340[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp+eax]
	push	ecx
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	$LN35@Update

; 145  : 					{
; 146  : 						commandParsed=true;

	mov	BYTE PTR _commandParsed$9[ebp], 1

; 147  : 						commandParserList[i]->SendHelp(transport, p->playerId);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv355[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR [edx+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR tv355[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv355[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 148  : 						transport->Send(p->playerId, "COMMAND LIST:\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BA@DJLCEDHE@COMMAND?5LIST?3?$AN?6?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 149  : 						commandParserList[i]->SendCommandList(transport, p->playerId);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv378[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR [edx+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR tv378[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv378[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 150  : 						transport->Send(p->playerId, "\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_02PCIJFNDE@?$AN?6?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 151  : 						break;

	jmp	SHORT $LN36@Update
$LN35@Update:

; 152  : 					}
; 153  : 				}

	jmp	$LN37@Update
$LN36@Update:

; 154  : 
; 155  : 				if (commandParsed==false)

	movzx	eax, BYTE PTR _commandParsed$9[ebp]
	test	eax, eax
	jne	$LN34@Update

; 156  : 				{
; 157  : 					// Try again, for all commands for all parsers.
; 158  : 					RegisteredCommand rc;
; 159  : 					for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@Update
$LN32@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN33@Update:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN34@Update

; 160  : 					{
; 161  : 						if (commandParserList[i]->GetRegisteredCommand(parameterList[1], &rc))

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv408[ebp], ecx
	mov	esi, esp
	lea	edx, DWORD PTR _rc$7[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR tv408[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv408[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	$LN30@Update

; 162  : 						{
; 163  : 							if (rc.parameterCount==CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS)

	movzx	eax, BYTE PTR _rc$7[ebp+8]
	movzx	ecx, BYTE PTR ?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
	cmp	eax, ecx
	jne	SHORT $LN29@Update

; 164  : 								transport->Send(p->playerId, "(Variable parms): %s %s\r\n", rc.command, rc.commandHelp);

	mov	esi, esp
	mov	eax, DWORD PTR _rc$7[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rc$7[ebp]
	push	ecx
	push	OFFSET ??_C@_0BK@DPMAEHFD@?$CIVariable?5parms?$CJ?3?5?$CFs?5?$CFs?$AN?6?$AA@
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR [edx+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 165  : 							else

	jmp	SHORT $LN28@Update
$LN29@Update:

; 166  : 								transport->Send(p->playerId, "(%i parms): %s %s\r\n", rc.parameterCount, rc.command, rc.commandHelp);

	mov	esi, esp
	mov	eax, DWORD PTR _rc$7[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rc$7[ebp]
	push	ecx
	movzx	edx, BYTE PTR _rc$7[ebp+8]
	push	edx
	push	OFFSET ??_C@_0BE@ICBGBOJB@?$CI?$CFi?5parms?$CJ?3?5?$CFs?5?$CFs?$AN?6?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@Update:

; 167  : 							commandParsed=true;

	mov	BYTE PTR _commandParsed$9[ebp], 1

; 168  : 							break;

	jmp	SHORT $LN34@Update
$LN30@Update:

; 169  : 						}
; 170  : 					}

	jmp	$LN32@Update
$LN34@Update:

; 171  : 				}
; 172  : 
; 173  : 				if (commandParsed==false)

	movzx	eax, BYTE PTR _commandParsed$9[ebp]
	test	eax, eax
	jne	SHORT $LN39@Update

; 174  : 				{
; 175  : 					// Don't know what to do
; 176  : 					transport->Send(p->playerId, "Unknown help topic: %s.\r\n", parameterList[1]);

	mov	eax, 4
	shl	eax, 0
	mov	esi, esp
	mov	ecx, DWORD PTR _parameterList$[ebp+eax]
	push	ecx
	push	OFFSET ??_C@_0BK@PMNLJFDA@Unknown?5help?5topic?3?5?$CFs?4?$AN?6?$AA@
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR [edx+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@Update:

; 177  : 				}
; 178  : 			}

	jmp	$LN26@Update
$LN41@Update:

; 179  : 		}
; 180  : 		else if (_stricmp(*parameterList, "quit")==0 && numParameters==1)

	push	OFFSET ??_C@_04KNNLNNGO@quit?$AA@
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp+ecx]
	push	edx
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@Update
	cmp	DWORD PTR _numParameters$[ebp], 1
	jne	SHORT $LN25@Update

; 181  : 		{
; 182  : 			transport->Send(p->playerId, "Goodbye!");

	mov	esi, esp
	push	OFFSET ??_C@_08HDBDJBNL@Goodbye?$CB?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 183  : 			transport->CloseConnection(p->playerId);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	esi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 184  : 		}
; 185  : 		else

	jmp	$LN26@Update
$LN25@Update:

; 186  : 		{
; 187  : 			bool tryAllParsers=true;

	mov	BYTE PTR _tryAllParsers$6[ebp], 1

; 188  : 			bool failed=false;

	mov	BYTE PTR _failed$5[ebp], 0

; 189  : 
; 190  : 			if (numParameters >=2) // At minimum <CommandParserName> <Command>

	cmp	DWORD PTR _numParameters$[ebp], 2
	jb	$LN23@Update

; 191  : 			{
; 192  : 				unsigned commandParserIndex=(unsigned)-1;

	mov	DWORD PTR _commandParserIndex$4[ebp], -1

; 193  : 				// Prefixing with numbers directs to a particular parser
; 194  : 				if (**parameterList>='0' && **parameterList<='9')

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp+ecx]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jl	$LN22@Update
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp+ecx]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	$LN22@Update

; 195  : 				{
; 196  : 					commandParserIndex=atoi(*parameterList); // Use specified parser unless it's an invalid number

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp+ecx]
	push	edx
	call	_atoi
	add	esp, 4
	mov	DWORD PTR _commandParserIndex$4[ebp], eax

; 197  : 					commandParserIndex--; // Subtract 1 since we displayed numbers starting at index+1

	mov	eax, DWORD PTR _commandParserIndex$4[ebp]
	sub	eax, 1
	mov	DWORD PTR _commandParserIndex$4[ebp], eax

; 198  : 					if (commandParserIndex >= commandParserList.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _commandParserIndex$4[ebp], eax
	jb	SHORT $LN21@Update

; 199  : 					{
; 200  : 						transport->Send(p->playerId, "Invalid index.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BB@MBKMFMKD@Invalid?5index?4?$AN?6?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 201  : 						failed=true;

	mov	BYTE PTR _failed$5[ebp], 1
$LN21@Update:

; 202  : 					}
; 203  : 				}
; 204  : 				else

	jmp	SHORT $LN20@Update
$LN22@Update:

; 205  : 				{
; 206  : 					// // Prefixing with the name of a command parser directs to that parser.  See if the first word matches a parser
; 207  : 					for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@Update
$LN18@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@Update:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN20@Update

; 208  : 					{
; 209  : 						if (_stricmp(parameterList[0], commandParserList[i]->GetName())==0)

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv530[ebp], ecx
	mov	edx, DWORD PTR tv530[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv530[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp+ecx]
	push	edx
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@Update

; 210  : 						{
; 211  : 							commandParserIndex=i; // Matches parser at index i

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _commandParserIndex$4[ebp], eax

; 212  : 							break;

	jmp	SHORT $LN20@Update
$LN16@Update:

; 213  : 						}
; 214  : 					}

	jmp	SHORT $LN18@Update
$LN20@Update:

; 215  : 				}
; 216  : 
; 217  : 				if (failed==false)

	movzx	eax, BYTE PTR _failed$5[ebp]
	test	eax, eax
	jne	$LN23@Update

; 218  : 				{
; 219  : 					// -1 means undirected, so otherwise this is directed to a target
; 220  : 					if (commandParserIndex!=(unsigned)-1)

	cmp	DWORD PTR _commandParserIndex$4[ebp], -1
	je	$LN23@Update

; 221  : 					{
; 222  : 						// Only this parser should use this command
; 223  : 						tryAllParsers=false;

	mov	BYTE PTR _tryAllParsers$6[ebp], 0

; 224  : 						if (commandParserList[commandParserIndex]->GetRegisteredCommand(parameterList[1], &rc))

	mov	eax, DWORD PTR _commandParserIndex$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv548[ebp], ecx
	mov	esi, esp
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR tv548[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv548[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	$LN23@Update

; 225  : 						{
; 226  : 							commandParsed=true;

	mov	BYTE PTR _commandParsed$9[ebp], 1

; 227  : 							if (rc.parameterCount==CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS || rc.parameterCount==numParameters-2)

	movzx	eax, BYTE PTR _rc$[ebp+8]
	movzx	ecx, BYTE PTR ?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
	cmp	eax, ecx
	je	SHORT $LN11@Update
	movzx	eax, BYTE PTR _rc$[ebp+8]
	mov	ecx, DWORD PTR _numParameters$[ebp]
	sub	ecx, 2
	cmp	eax, ecx
	jne	SHORT $LN12@Update
$LN11@Update:

; 228  : 								commandParserList[commandParserIndex]->OnCommand(rc.command, numParameters-2, parameterList+2, transport, p->playerId, copy);

	mov	eax, DWORD PTR _commandParserIndex$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv570[ebp], ecx
	mov	esi, esp
	lea	edx, DWORD PTR _copy$8[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _parameterList$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _numParameters$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR tv570[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv570[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 229  : 							else

	jmp	SHORT $LN23@Update
$LN12@Update:

; 230  : 								transport->Send(p->playerId, "Invalid parameter count.\r\n(%i parms): %s %s\r\n", rc.parameterCount, rc.command, rc.commandHelp);

	mov	esi, esp
	mov	eax, DWORD PTR _rc$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _rc$[ebp+8]
	push	edx
	push	OFFSET ??_C@_0CO@MGKEDAIC@Invalid?5parameter?5count?4?$AN?6?$CI?$CFi?5pa@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@Update:

; 231  : 						}
; 232  : 					}
; 233  : 				}
; 234  : 			}
; 235  : 
; 236  : 			if (failed == false && tryAllParsers)

	movzx	eax, BYTE PTR _failed$5[ebp]
	test	eax, eax
	jne	$LN9@Update
	movzx	eax, BYTE PTR _tryAllParsers$6[ebp]
	test	eax, eax
	je	$LN9@Update

; 237  : 			{
; 238  : 				for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@Update
$LN7@Update:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@Update:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN9@Update

; 239  : 				{
; 240  : 					// Undirected command.  Try all the parsers to see if they understand the command
; 241  : 					// Pass the 1nd element as the command, and the remainder as the parameter list
; 242  : 					if (commandParserList[i]->GetRegisteredCommand(parameterList[0], &rc))

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv612[ebp], ecx
	mov	esi, esp
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR tv612[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv612[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@Update

; 243  : 					{
; 244  : 						commandParsed=true;

	mov	BYTE PTR _commandParsed$9[ebp], 1

; 245  : 
; 246  : 						if (rc.parameterCount==CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS || rc.parameterCount==numParameters-1)

	movzx	eax, BYTE PTR _rc$[ebp+8]
	movzx	ecx, BYTE PTR ?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
	cmp	eax, ecx
	je	SHORT $LN3@Update
	movzx	eax, BYTE PTR _rc$[ebp+8]
	mov	ecx, DWORD PTR _numParameters$[ebp]
	sub	ecx, 1
	cmp	eax, ecx
	jne	SHORT $LN4@Update
$LN3@Update:

; 247  : 							commandParserList[i]->OnCommand(rc.command, numParameters-1, parameterList+1, transport, p->playerId, copy);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv634[ebp], ecx
	mov	esi, esp
	lea	edx, DWORD PTR _copy$8[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _parameterList$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _numParameters$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR tv634[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv634[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 248  : 						else

	jmp	SHORT $LN5@Update
$LN4@Update:

; 249  : 							transport->Send(p->playerId, "Invalid parameter count.\r\n(%i parms): %s %s\r\n", rc.parameterCount, rc.command, rc.commandHelp);

	mov	esi, esp
	mov	eax, DWORD PTR _rc$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _rc$[ebp+8]
	push	edx
	push	OFFSET ??_C@_0CO@MGKEDAIC@Invalid?5parameter?5count?4?$AN?6?$CI?$CFi?5pa@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@Update:

; 250  : 					}
; 251  : 				}

	jmp	$LN7@Update
$LN9@Update:

; 252  : 			}
; 253  : 			if (commandParsed==false && commandParserList.Size() > 0)

	movzx	eax, BYTE PTR _commandParsed$9[ebp]
	test	eax, eax
	jne	SHORT $LN26@Update
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	test	eax, eax
	jbe	SHORT $LN26@Update

; 254  : 			{
; 255  : 				transport->Send(p->playerId, "Unknown command:  Type 'help' for help.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CK@GDAAGGHG@Unknown?5command?3?5?5Type?5?8help?8?5fo@
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@Update:

; 256  : 			}
; 257  : 		}
; 258  : 
; 259  : 
; 260  : 		transport->DeallocatePacket(p);

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 261  : 		p = transport->Receive();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 262  : 	}

	jmp	$LN43@Update
$LN53@Update:

; 263  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN63@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1004				; 000003ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN63@Update:
	DD	6
	DD	$LN62@Update
$LN62@Update:
	DD	-112					; ffffff90H
	DD	80					; 00000050H
	DD	$LN56@Update
	DD	-124					; ffffff84H
	DD	4
	DD	$LN57@Update
	DD	-140					; ffffff74H
	DD	6
	DD	$LN58@Update
	DD	-172					; ffffff54H
	DD	9
	DD	$LN59@Update
	DD	-704					; fffffd40H
	DD	512					; 00000200H
	DD	$LN60@Update
	DD	-724					; fffffd2cH
	DD	9
	DD	$LN61@Update
$LN61@Update:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN60@Update:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	0
$LN59@Update:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN58@Update:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	79					; 0000004fH
	DB	114					; 00000072H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
$LN57@Update:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN56@Update:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?Update@ConsoleServer@@QAEXXZ ENDP			; ConsoleServer::Update
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\consoleserver.cpp
;	COMDAT ?RemoveCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_commandParserInterface$ = 8				; size = 4
?RemoveCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z PROC ; ConsoleServer::RemoveCommandParser, COMDAT
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 	if (commandParserInterface==0)

	cmp	DWORD PTR _commandParserInterface$[ebp], 0
	jne	SHORT $LN5@RemoveComm

; 70   : 		return;

	jmp	SHORT $LN6@RemoveComm
$LN5@RemoveComm:

; 71   : 
; 72   : 	// Overwrite the element we are removing from the back of the list and delete the back of the list
; 73   : 	unsigned i;
; 74   : 	for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@RemoveComm
$LN3@RemoveComm:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@RemoveComm:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN6@RemoveComm

; 75   : 	{
; 76   : 		if (commandParserList[i]==commandParserInterface)

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _commandParserInterface$[ebp]
	jne	SHORT $LN1@RemoveComm

; 77   : 		{
; 78   : 			commandParserList[i]=commandParserList[commandParserList.Size()-1];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 79   : 			commandParserList.Del();

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Del@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXI@Z ; DataStructures::List<CommandParserInterface *>::Del

; 80   : 			return;

	jmp	SHORT $LN6@RemoveComm
$LN1@RemoveComm:

; 81   : 		}
; 82   : 	}

	jmp	SHORT $LN3@RemoveComm
$LN6@RemoveComm:

; 83   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z ENDP ; ConsoleServer::RemoveCommandParser
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\consoleserver.cpp
;	COMDAT ?AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z
_TEXT	SEGMENT
tv87 = -220						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_commandParserInterface$ = 8				; size = 4
?AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z PROC ; ConsoleServer::AddCommandParser, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	if (commandParserInterface==0)

	cmp	DWORD PTR _commandParserInterface$[ebp], 0
	jne	SHORT $LN7@AddCommand

; 46   : 		return;

	jmp	$LN8@AddCommand
$LN7@AddCommand:

; 47   : 
; 48   : 	// Non-duplicate insertion
; 49   : 	unsigned i;
; 50   : 	for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@AddCommand
$LN5@AddCommand:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@AddCommand:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN4@AddCommand

; 51   : 	{
; 52   : 		if (commandParserList[i]==commandParserInterface)

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _commandParserInterface$[ebp]
	jne	SHORT $LN3@AddCommand

; 53   : 			return;

	jmp	$LN8@AddCommand
$LN3@AddCommand:

; 54   : 
; 55   :         if (_stricmp(commandParserList[i]->GetName(), commandParserInterface->GetName())==0)

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv87[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _commandParserInterface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _commandParserInterface$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	esi, esp
	mov	eax, DWORD PTR tv87[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@AddCommand

; 56   : 		{
; 57   : 			// Naming conflict between two command parsers
; 58   : 			assert(0);

	xor	eax, eax
	jne	SHORT $LN10@AddCommand
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z@4JA
	add	ecx, 14					; 0000000eH
	push	ecx
	push	OFFSET ??_C@_1FE@FIHGNJHG@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAc?$AAo?$AAn?$AAs?$AAo?$AAl?$AAe?$AAs@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@AddCommand:

; 59   : 			return;

	jmp	SHORT $LN8@AddCommand
$LN2@AddCommand:

; 60   : 		}
; 61   : 	}

	jmp	$LN5@AddCommand
$LN4@AddCommand:

; 62   : 
; 63   : 	commandParserList.Insert(commandParserInterface);

	mov	eax, DWORD PTR _commandParserInterface$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Insert@?$List@PAVCommandParserInterface@@@DataStructures@@QAEXQAVCommandParserInterface@@@Z ; DataStructures::List<CommandParserInterface *>::Insert

; 64   : 	if (transport)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@AddCommand

; 65   : 		commandParserInterface->OnTransportChange(transport);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _commandParserInterface$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _commandParserInterface$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@AddCommand:

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z ENDP ; ConsoleServer::AddCommandParser
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\consoleserver.cpp
;	COMDAT ?SetTransportProvider@ConsoleServer@@QAEXPAVTransportInterface@@G@Z
_TEXT	SEGMENT
tv137 = -220						; size = 4
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
_transportInterface$ = 8				; size = 4
_port$ = 12						; size = 2
?SetTransportProvider@ConsoleServer@@QAEXPAVTransportInterface@@G@Z PROC ; ConsoleServer::SetTransportProvider, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	// Replace the current TransportInterface, stopping the old one, if present, and starting the new one.
; 25   : 	if (transportInterface)

	cmp	DWORD PTR _transportInterface$[ebp], 0
	je	$LN6@SetTranspo

; 26   : 	{
; 27   : 		if (transport)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@SetTranspo

; 28   : 		{
; 29   : 			RemoveCommandParser(transport->GetCommandParser());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z ; ConsoleServer::RemoveCommandParser

; 30   : 			transport->Stop();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@SetTranspo:

; 31   : 		}
; 32   : 		transport=transportInterface;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _transportInterface$[ebp]
	mov	DWORD PTR [eax], ecx

; 33   : 		transport->Start(port, true);

	mov	esi, esp
	push	1
	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 34   : 
; 35   : 		unsigned i;
; 36   : 		for (i=0; i < commandParserList.Size(); i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@SetTranspo
$LN2@SetTranspo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@SetTranspo:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$List@PAVCommandParserInterface@@@DataStructures@@QBEIXZ ; DataStructures::List<CommandParserInterface *>::Size
	cmp	DWORD PTR _i$1[ebp], eax
	jae	SHORT $LN1@SetTranspo

; 37   : 			commandParserList[i]->OnTransportChange(transport);

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVCommandParserInterface@@@DataStructures@@QBEAAPAVCommandParserInterface@@I@Z ; DataStructures::List<CommandParserInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv137[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR tv137[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@SetTranspo
$LN1@SetTranspo:

; 38   : 
; 39   : 		//  The transport itself might have a command parser - for example password for the RakNet transport
; 40   : 		AddCommandParser(transport->GetCommandParser());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddCommandParser@ConsoleServer@@QAEXPAVCommandParserInterface@@@Z ; ConsoleServer::AddCommandParser
$LN6@SetTranspo:

; 41   : 	}
; 42   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetTransportProvider@ConsoleServer@@QAEXPAVTransportInterface@@G@Z ENDP ; ConsoleServer::SetTransportProvider
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\consoleserver.cpp
;	COMDAT ??1ConsoleServer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ConsoleServer@@QAE@XZ PROC				; ConsoleServer::~ConsoleServer, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ ; DataStructures::List<CommandParserInterface *>::~List<CommandParserInterface *>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1ConsoleServer@@QAE@XZ ENDP				; ConsoleServer::~ConsoleServer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\consoleserver.cpp
;	COMDAT ??0ConsoleServer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ConsoleServer@@QAE@XZ PROC				; ConsoleServer::ConsoleServer, COMDAT
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$List@PAVCommandParserInterface@@@DataStructures@@QAE@XZ ; DataStructures::List<CommandParserInterface *>::List<CommandParserInterface *>

; 16   : 	transport=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 17   : 	password[0]=0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], 0

; 18   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ConsoleServer@@QAE@XZ ENDP				; ConsoleServer::ConsoleServer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.h
;	COMDAT ??4PlayerID@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4PlayerID@@QAEAAU0@ABU0@@Z PROC			; PlayerID::operator=, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		binaryAddress = input.binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 76   : 		port = input.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 77   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PlayerID@@QAEAAU0@ABU0@@Z ENDP			; PlayerID::operator=
_TEXT	ENDS
END
