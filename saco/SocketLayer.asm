; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\SocketLayer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?_sendtoUncompressedTotal@@3KA			; _sendtoUncompressedTotal
PUBLIC	?_sendtoCompressedTotal@@3KA			; _sendtoCompressedTotal
PUBLIC	?socketLayerStarted@SocketLayer@@0_NA		; SocketLayer::socketLayerStarted
PUBLIC	?winsockInfo@SocketLayer@@0UWSAData@@A		; SocketLayer::winsockInfo
PUBLIC	?_recvfromUncompressedTotal@@3KA		; _recvfromUncompressedTotal
PUBLIC	?_recvfromCompressedTotal@@3KA			; _recvfromCompressedTotal
PUBLIC	?lastBinaryAddr@@3IA				; lastBinaryAddr
PUBLIC	?dwLastConnectionTick@@3KA			; dwLastConnectionTick
PUBLIC	?dwLastConnectAddr@@3KA				; dwLastConnectAddr
_BSS	SEGMENT
?_sendtoUncompressedTotal@@3KA DD 01H DUP (?)		; _sendtoUncompressedTotal
?_sendtoCompressedTotal@@3KA DD 01H DUP (?)		; _sendtoCompressedTotal
?socketLayerStarted@SocketLayer@@0_NA DB 01H DUP (?)	; SocketLayer::socketLayerStarted
	ALIGN	4

?winsockInfo@SocketLayer@@0UWSAData@@A DB 018eH DUP (?)	; SocketLayer::winsockInfo
	ALIGN	4

?_recvfromUncompressedTotal@@3KA DD 01H DUP (?)		; _recvfromUncompressedTotal
?_recvfromCompressedTotal@@3KA DD 01H DUP (?)		; _recvfromCompressedTotal
?lastBinaryAddr@@3IA DD 01H DUP (?)			; lastBinaryAddr
?dwLastConnectionTick@@3KA DD 01H DUP (?)		; dwLastConnectionTick
?dwLastConnectAddr@@3KA DD 01H DUP (?)			; dwLastConnectAddr
_BSS	ENDS
PUBLIC	??0SocketLayer@@QAE@XZ				; SocketLayer::SocketLayer
PUBLIC	??1SocketLayer@@QAE@XZ				; SocketLayer::~SocketLayer
PUBLIC	?Connect@SocketLayer@@QAEIIIG@Z			; SocketLayer::Connect
PUBLIC	?CreateBoundSocket@SocketLayer@@QAEIG_NPBD@Z	; SocketLayer::CreateBoundSocket
PUBLIC	?DomainNameToIP@SocketLayer@@QAEPBDPBD@Z	; SocketLayer::DomainNameToIP
PUBLIC	?AssociateSocketWithCompletionPortAndRead@SocketLayer@@QAE_NIIGPAVRakPeer@@@Z ; SocketLayer::AssociateSocketWithCompletionPortAndRead
PUBLIC	?Write@SocketLayer@@QAEXIPBDH@Z			; SocketLayer::Write
PUBLIC	?RecvFrom@SocketLayer@@QAEHIPAVRakPeer@@PAH@Z	; SocketLayer::RecvFrom
PUBLIC	?GetMyIP@SocketLayer@@QAEXQAY0BA@D@Z		; SocketLayer::GetMyIP
PUBLIC	?SendTo@SocketLayer@@QAEHIPBDHQADG@Z		; SocketLayer::SendTo
PUBLIC	?SendTo@SocketLayer@@QAEHIPBDHIG@Z		; SocketLayer::SendTo
PUBLIC	?GetLocalPort@SocketLayer@@QAEGI@Z		; SocketLayer::GetLocalPort
PUBLIC	?I@SocketLayer@@0V1@A				; SocketLayer::I
PUBLIC	??_C@_0CF@NCLEMFLE@WSAStartup?5failed?3Error?5code?5?9?5?$CF@ ; `string'
PUBLIC	?__LINE__Var@?1??Connect@SocketLayer@@QAEIIIG@Z@4JA ; `SocketLayer::Connect'::`2'::__LINE__Var
PUBLIC	??_C@_1FA@FGHCBBPF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1DM@IOFBKPGG@?$AAw?$AAr?$AAi?$AAt?$AAe?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAS?$AAO?$AAC?$AAK?$AAE?$AAT?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CF@LNJGNHJG@WSAConnect?5failed?3Error?5code?5?9?5?$CF@ ; `string'
PUBLIC	??_C@_0CG@NIJBIHON@socket?$CI?4?4?4?$CJ?5failed?3Error?5code?5?9?5@ ; `string'
PUBLIC	??_C@_0DD@LAIAMEMK@setsockopt?$CISO_REUSEADDR?$CJ?5failed?3@ ; `string'
PUBLIC	?__LINE__Var@?1??CreateBoundSocket@SocketLayer@@QAEIG_NPBD@Z@4JA ; `SocketLayer::CreateBoundSocket'::`2'::__LINE__Var
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_0DD@KNONDNMC@setsockopt?$CISO_BROADCAST?$CJ?5failed?3@ ; `string'
PUBLIC	??_C@_0CE@DMLHPBFO@bind?$CI?4?4?4?$CJ?5failed?3Error?5code?5?9?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?1??Write@SocketLayer@@QAEXIPBDH@Z@4JA ; `SocketLayer::Write'::`2'::__LINE__Var
PUBLIC	??_C@_0CD@PNKPCNDI@recvfrom?5failed?3Error?5code?5?9?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0EJ@MMDOEHFI@A?5previous?5send?5operation?5result@ ; `string'
PUBLIC	??_C@_0CB@JIKEHOGI@sendto?5failed?3Error?5code?5?9?5?$CFd?6?$CFs@ ; `string'
PUBLIC	??_C@_0CG@OFKNCAEE@gethostname?5failed?3Error?5code?5?9?5@ ; `string'
PUBLIC	??_C@_0CI@DFDDAHHM@gethostbyname?5failed?3Error?5code?5@ ; `string'
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__FormatMessageA@28:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__connect@12:PROC
EXTRN	__imp__ioctlsocket@12:PROC
EXTRN	__imp__getsockname@12:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__inet_addr@4:PROC
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	__imp__ntohs@4:PROC
EXTRN	__imp__recvfrom@24:PROC
EXTRN	__imp__send@16:PROC
EXTRN	__imp__sendto@24:PROC
EXTRN	__imp__setsockopt@20:PROC
EXTRN	__imp__socket@12:PROC
EXTRN	__imp__gethostbyname@4:PROC
EXTRN	__imp__gethostname@8:PROC
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	__imp__WSACleanup@0:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__wassert:PROC
EXTRN	_compress2:PROC
EXTRN	?ProcessNetworkPacket@@YGXIGPBDHPAVRakPeer@@@Z:PROC ; ProcessNetworkPacket
EXTRN	?ProcessPortUnreachable@@YGXIGPAVRakPeer@@@Z:PROC ; ProcessPortUnreachable
EXTRN	_printf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?I@SocketLayer@@0V1@A DB 01H DUP (?)			; SocketLayer::I
_BSS	ENDS
CRT$XCU	SEGMENT
?I$initializer$@SocketLayer@@0P6AXXZA DD FLAT:??__E?I@SocketLayer@@0V1@A@@YAXXZ ; SocketLayer::I$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CI@DFDDAHHM@gethostbyname?5failed?3Error?5code?5@
CONST	SEGMENT
??_C@_0CI@DFDDAHHM@gethostbyname?5failed?3Error?5code?5@ DB 'gethostbynam'
	DB	'e failed:Error code - %d', 0aH, '%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OFKNCAEE@gethostname?5failed?3Error?5code?5?9?5@
CONST	SEGMENT
??_C@_0CG@OFKNCAEE@gethostname?5failed?3Error?5code?5?9?5@ DB 'gethostnam'
	DB	'e failed:Error code - %d', 0aH, '%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JIKEHOGI@sendto?5failed?3Error?5code?5?9?5?$CFd?6?$CFs@
CONST	SEGMENT
??_C@_0CB@JIKEHOGI@sendto?5failed?3Error?5code?5?9?5?$CFd?6?$CFs@ DB 'sen'
	DB	'dto failed:Error code - %d', 0aH, '%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MMDOEHFI@A?5previous?5send?5operation?5result@
CONST	SEGMENT
??_C@_0EJ@MMDOEHFI@A?5previous?5send?5operation?5result@ DB 'A previous s'
	DB	'end operation resulted in an ICMP Port Unreachable message.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PNKPCNDI@recvfrom?5failed?3Error?5code?5?9?5?$CFd?6@
CONST	SEGMENT
??_C@_0CD@PNKPCNDI@recvfrom?5failed?3Error?5code?5?9?5?$CFd?6@ DB 'recvfr'
	DB	'om failed:Error code - %d', 0aH, '%s', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Write@SocketLayer@@QAEXIPBDH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Write@SocketLayer@@QAEXIPBDH@Z@4JA DD 0148H ; `SocketLayer::Write'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@DMLHPBFO@bind?$CI?4?4?4?$CJ?5failed?3Error?5code?5?9?5?$CFd@
CONST	SEGMENT
??_C@_0CE@DMLHPBFO@bind?$CI?4?4?4?$CJ?5failed?3Error?5code?5?9?5?$CFd@ DB 'b'
	DB	'ind(...) failed:Error code - %d', 0aH, '%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KNONDNMC@setsockopt?$CISO_BROADCAST?$CJ?5failed?3@
CONST	SEGMENT
??_C@_0DD@KNONDNMC@setsockopt?$CISO_BROADCAST?$CJ?5failed?3@ DB 'setsocko'
	DB	'pt(SO_BROADCAST) failed:Error code - %d', 0aH, '%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??CreateBoundSocket@SocketLayer@@QAEIG_NPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CreateBoundSocket@SocketLayer@@QAEIG_NPBD@Z@4JA DD 097H ; `SocketLayer::CreateBoundSocket'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DD@LAIAMEMK@setsockopt?$CISO_REUSEADDR?$CJ?5failed?3@
CONST	SEGMENT
??_C@_0DD@LAIAMEMK@setsockopt?$CISO_REUSEADDR?$CJ?5failed?3@ DB 'setsocko'
	DB	'pt(SO_REUSEADDR) failed:Error code - %d', 0aH, '%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NIJBIHON@socket?$CI?4?4?4?$CJ?5failed?3Error?5code?5?9?5@
CONST	SEGMENT
??_C@_0CG@NIJBIHON@socket?$CI?4?4?4?$CJ?5failed?3Error?5code?5?9?5@ DB 's'
	DB	'ocket(...) failed:Error code - %d', 0aH, '%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LNJGNHJG@WSAConnect?5failed?3Error?5code?5?9?5?$CF@
CONST	SEGMENT
??_C@_0CF@LNJGNHJG@WSAConnect?5failed?3Error?5code?5?9?5?$CF@ DB 'WSAConn'
	DB	'ect failed:Error code - %d', 0aH, '%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@IOFBKPGG@?$AAw?$AAr?$AAi?$AAt?$AAe?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAS?$AAO?$AAC?$AAK?$AAE?$AAT?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@IOFBKPGG@?$AAw?$AAr?$AAi?$AAt?$AAe?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAS?$AAO?$AAC?$AAK?$AAE?$AAT?$AA?$AA@ DB 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'S', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, 'e', 00H, 't', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, 'I', 00H, 'N', 00H, 'V', 00H, 'A', 00H, 'L', 00H
	DB	'I', 00H, 'D', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K'
	DB	00H, 'E', 00H, 'T', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@FGHCBBPF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AAl?$AAa@
CONST	SEGMENT
??_C@_1FA@FGHCBBPF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AAl?$AAa@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 's', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, 'e', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'y', 00H
	DB	'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Connect@SocketLayer@@QAEIIIG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Connect@SocketLayer@@QAEIIIG@Z@4JA DD 079H ; `SocketLayer::Connect'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CF@NCLEMFLE@WSAStartup?5failed?3Error?5code?5?9?5?$CF@
CONST	SEGMENT
??_C@_0CF@NCLEMFLE@WSAStartup?5failed?3Error?5code?5?9?5?$CF@ DB 'WSAStar'
	DB	'tup failed:Error code - %d', 0aH, '%s', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?I@SocketLayer@@0V1@A@@YAXXZ
text$yd	SEGMENT
??__F?I@SocketLayer@@0V1@A@@YAXXZ PROC			; `dynamic atexit destructor for 'SocketLayer::I'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?I@SocketLayer@@0V1@A	; SocketLayer::I
	call	??1SocketLayer@@QAE@XZ			; SocketLayer::~SocketLayer
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?I@SocketLayer@@0V1@A@@YAXXZ ENDP			; `dynamic atexit destructor for 'SocketLayer::I''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ??__E?I@SocketLayer@@0V1@A@@YAXXZ
text$di	SEGMENT
??__E?I@SocketLayer@@0V1@A@@YAXXZ PROC			; `dynamic initializer for 'SocketLayer::I'', COMDAT

; 64   : SocketLayer SocketLayer::I;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?I@SocketLayer@@0V1@A	; SocketLayer::I
	call	??0SocketLayer@@QAE@XZ			; SocketLayer::SocketLayer
	push	OFFSET ??__F?I@SocketLayer@@0V1@A@@YAXXZ ; `dynamic atexit destructor for 'SocketLayer::I''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?I@SocketLayer@@0V1@A@@YAXXZ ENDP			; `dynamic initializer for 'SocketLayer::I''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?GetLocalPort@SocketLayer@@QAEGI@Z
_TEXT	SEGMENT
_len$ = -48						; size = 4
_sa$ = -36						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
?GetLocalPort@SocketLayer@@QAEGI@Z PROC			; SocketLayer::GetLocalPort, COMDAT
; _this$ = ecx

; 693  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 694  : 	sockaddr_in sa;
; 695  : 	socklen_t len = sizeof(sa);

	mov	DWORD PTR _len$[ebp], 16		; 00000010H

; 696  : 	if (getsockname(s, (sockaddr*)&sa, &len)!=0)

	mov	esi, esp
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	DWORD PTR __imp__getsockname@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetLocalPo

; 697  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN2@GetLocalPo
$LN1@GetLocalPo:

; 698  : 	return ntohs(sa.sin_port);

	mov	esi, esp
	movzx	eax, WORD PTR _sa$[ebp+2]
	push	eax
	call	DWORD PTR __imp__ntohs@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@GetLocalPo:

; 699  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GetLocalPo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@GetLocalPo:
	DD	2
	DD	$LN6@GetLocalPo
$LN6@GetLocalPo:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN4@GetLocalPo
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN5@GetLocalPo
$LN5@GetLocalPo:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN4@GetLocalPo:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	0
?GetLocalPort@SocketLayer@@QAEGI@Z ENDP			; SocketLayer::GetLocalPort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?SendTo@SocketLayer@@QAEHIPBDHIG@Z
_TEXT	SEGMENT
_messageBuffer$1 = -50092				; size = 4
_dwIOError$ = -50080					; size = 4
_destLen$ = -50068					; size = 4
_sa$ = -50056						; size = 16
_len$ = -50032						; size = 4
_pCompressBuffer$ = -50020				; size = 50000
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_length$ = 16						; size = 4
_binaryAddress$ = 20					; size = 4
_port$ = 24						; size = 2
?SendTo@SocketLayer@@QAEHIPBDHIG@Z PROC			; SocketLayer::SendTo, COMDAT
; _this$ = ecx

; 554  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 50288				; 0000c470H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-50288]
	mov	ecx, 12572				; 0000311cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 	unsigned char pCompressBuffer[COMPRESS_DECOMPRESS_BUFFERSIZE] = {0};

	mov	BYTE PTR _pCompressBuffer$[ebp], 0
	push	49999					; 0000c34fH
	push	0
	lea	eax, DWORD PTR _pCompressBuffer$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 556  : 
; 557  : 	if ( s == INVALID_SOCKET )

	cmp	DWORD PTR _s$[ebp], -1
	jne	SHORT $LN9@SendTo

; 558  : 	{
; 559  : 		return -1;

	or	eax, -1
	jmp	$LN10@SendTo
$LN9@SendTo:

; 560  : 	}
; 561  : 
; 562  : 	int len;
; 563  : 	sockaddr_in sa;
; 564  : 	sa.sin_port = htons( port );

	mov	esi, esp
	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	call	DWORD PTR __imp__htons@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _sa$[ebp+2], ax

; 565  : 	sa.sin_addr.s_addr = binaryAddress;

	mov	eax, DWORD PTR _binaryAddress$[ebp]
	mov	DWORD PTR _sa$[ebp+4], eax

; 566  : 	sa.sin_family = AF_INET;

	mov	eax, 2
	mov	WORD PTR _sa$[ebp], ax

; 567  : 
; 568  : //----------------------------------------------
; 569  : // Kye Added: Zlib in socketlayer headend. (client sends compressed)
; 570  : 
; 571  : #ifndef SAMPSRV
; 572  : 
; 573  : 	uLongf destLen = COMPRESS_DECOMPRESS_BUFFERSIZE;

	mov	DWORD PTR _destLen$[ebp], 50000		; 0000c350H

; 574  : 	if(compress2(pCompressBuffer,&destLen,(Bytef *)data,length,1) != Z_OK) {

	push	1
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _pCompressBuffer$[ebp]
	push	eax
	call	_compress2
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN8@SendTo

; 575  : 		return 1;

	mov	eax, 1
	jmp	$LN10@SendTo
$LN8@SendTo:

; 576  : 	}
; 577  : 
; 578  : 	_sendtoUncompressedTotal+=length;

	mov	eax, DWORD PTR ?_sendtoUncompressedTotal@@3KA ; _sendtoUncompressedTotal
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR ?_sendtoUncompressedTotal@@3KA, eax ; _sendtoUncompressedTotal

; 579  : 	_sendtoCompressedTotal+=destLen;

	mov	eax, DWORD PTR ?_sendtoCompressedTotal@@3KA ; _sendtoCompressedTotal
	add	eax, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR ?_sendtoCompressedTotal@@3KA, eax ; _sendtoCompressedTotal
$LN7@SendTo:

; 580  : 
; 581  : #endif
; 582  : 
; 583  : 	do
; 584  : 	{
; 585  : #ifndef SAMPSRV
; 586  : 		len = sendto( s, (char *)pCompressBuffer, destLen, 0, ( const sockaddr* ) & sa, sizeof( struct sockaddr_in ) );

	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _sa$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _destLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pCompressBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__sendto@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len$[ebp], eax

; 587  : #else
; 588  : 		len = sendto( s, data, length, 0, ( const sockaddr* ) & sa, sizeof( struct sockaddr_in ) );
; 589  : #endif
; 590  : 	}
; 591  : 	while ( len == 0 );

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN7@SendTo

; 592  : 
; 593  : //----------------------------------------------
; 594  : 
; 595  : 	if ( len != SOCKET_ERROR )

	cmp	DWORD PTR _len$[ebp], -1
	je	SHORT $LN4@SendTo

; 596  : 		return 0;

	xor	eax, eax
	jmp	$LN10@SendTo
$LN4@SendTo:

; 597  : 
; 598  : #if defined(_WIN32)
; 599  : 
; 600  : 	DWORD dwIOError = WSAGetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__WSAGetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$[ebp], eax

; 601  : 
; 602  : 	if ( dwIOError == WSAECONNRESET )

	cmp	DWORD PTR _dwIOError$[ebp], 10054	; 00002746H
	jne	SHORT $LN3@SendTo

; 603  : 	{
; 604  : #if defined(_DEBUG)
; 605  : 		printf( "A previous send operation resulted in an ICMP Port Unreachable message.\n" );

	push	OFFSET ??_C@_0EJ@MMDOEHFI@A?5previous?5send?5operation?5result@
	call	_printf
	add	esp, 4
	jmp	SHORT $LN2@SendTo
$LN3@SendTo:

; 606  : #endif
; 607  : 
; 608  : 	}
; 609  : 	else if ( dwIOError != WSAEWOULDBLOCK )

	cmp	DWORD PTR _dwIOError$[ebp], 10035	; 00002733H
	je	SHORT $LN2@SendTo

; 610  : 	{
; 611  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 612  : 		LPVOID messageBuffer;
; 613  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 614  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 615  : 			( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 616  : 		// something has gone wrong here...
; 617  : 		printf( "sendto failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CB@JIKEHOGI@sendto?5failed?3Error?5code?5?9?5?$CFd?6?$CFs@
	call	_printf
	add	esp, 12					; 0000000cH

; 618  : 
; 619  : 		//Free the buffer.
; 620  : 		LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SendTo:

; 621  : #endif
; 622  : 
; 623  : 	}
; 624  : 
; 625  : 	return dwIOError;

	mov	eax, DWORD PTR _dwIOError$[ebp]
	jmp	SHORT $LN10@SendTo

; 626  : #endif
; 627  : 
; 628  : 	return 1; // error

	mov	eax, 1
$LN10@SendTo:

; 629  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@SendTo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 50288				; 0000c470H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN17@SendTo:
	DD	4
	DD	$LN16@SendTo
$LN16@SendTo:
	DD	-50020					; ffff3c9cH
	DD	50000					; 0000c350H
	DD	$LN12@SendTo
	DD	-50056					; ffff3c78H
	DD	16					; 00000010H
	DD	$LN13@SendTo
	DD	-50068					; ffff3c6cH
	DD	4
	DD	$LN14@SendTo
	DD	-50092					; ffff3c54H
	DD	4
	DD	$LN15@SendTo
$LN15@SendTo:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN14@SendTo:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN13@SendTo:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	0
$LN12@SendTo:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?SendTo@SocketLayer@@QAEHIPBDHIG@Z ENDP			; SocketLayer::SendTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?SendTo@SocketLayer@@QAEHIPBDHQADG@Z
_TEXT	SEGMENT
_binaryAddress$ = -20					; size = 4
_this$ = -8						; size = 4
_s$ = 8							; size = 4
_data$ = 12						; size = 4
_length$ = 16						; size = 4
_ip$ = 20						; size = 4
_port$ = 24						; size = 2
?SendTo@SocketLayer@@QAEHIPBDHQADG@Z PROC		; SocketLayer::SendTo, COMDAT
; _this$ = ecx

; 632  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 633  : 	unsigned int binaryAddress;
; 634  : 	binaryAddress = inet_addr( ip );

	mov	esi, esp
	mov	eax, DWORD PTR _ip$[ebp]
	push	eax
	call	DWORD PTR __imp__inet_addr@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _binaryAddress$[ebp], eax

; 635  : 	return SendTo( s, data, length, binaryAddress, port );

	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _binaryAddress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendTo@SocketLayer@@QAEHIPBDHIG@Z	; SocketLayer::SendTo

; 636  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SendTo@SocketLayer@@QAEHIPBDHQADG@Z ENDP		; SocketLayer::SendTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?GetMyIP@SocketLayer@@QAEXQAY0BA@D@Z
_TEXT	SEGMENT
_addr$1 = -184						; size = 4
_i$2 = -172						; size = 4
_messageBuffer$3 = -160					; size = 4
_dwIOError$4 = -148					; size = 4
_phe$ = -136						; size = 4
_messageBuffer$5 = -124					; size = 4
_dwIOError$6 = -112					; size = 4
_ac$ = -100						; size = 80
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_ipList$ = 8						; size = 4
?GetMyIP@SocketLayer@@QAEXQAY0BA@D@Z PROC		; SocketLayer::GetMyIP, COMDAT
; _this$ = ecx

; 640  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 	char ac[ 80 ];
; 642  : 
; 643  : 	if ( gethostname( ac, sizeof( ac ) ) == SOCKET_ERROR )

	mov	esi, esp
	push	80					; 00000050H
	lea	eax, DWORD PTR _ac$[ebp]
	push	eax
	call	DWORD PTR __imp__gethostname@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN5@GetMyIP

; 644  : 	{
; 645  : 	#if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 646  : 		DWORD dwIOError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$6[ebp], eax

; 647  : 		LPVOID messageBuffer;
; 648  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 649  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 650  : 			( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$5[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$6[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 651  : 		// something has gone wrong here...
; 652  : 		printf( "gethostname failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$6[ebp]
	push	ecx
	push	OFFSET ??_C@_0CG@OFKNCAEE@gethostname?5failed?3Error?5code?5?9?5@
	call	_printf
	add	esp, 12					; 0000000cH

; 653  : 		//Free the buffer.
; 654  : 		LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$5[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 655  : 	#endif
; 656  : 
; 657  : 		return ;

	jmp	$LN6@GetMyIP
$LN5@GetMyIP:

; 658  : 	}
; 659  : 
; 660  : 	struct hostent *phe = gethostbyname( ac );

	mov	esi, esp
	lea	eax, DWORD PTR _ac$[ebp]
	push	eax
	call	DWORD PTR __imp__gethostbyname@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _phe$[ebp], eax

; 661  : 
; 662  : 	if ( phe == 0 )

	cmp	DWORD PTR _phe$[ebp], 0
	jne	SHORT $LN4@GetMyIP

; 663  : 	{
; 664  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 665  : 		DWORD dwIOError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$4[ebp], eax

; 666  : 		LPVOID messageBuffer;
; 667  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 668  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 669  : 			( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$3[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$4[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 670  : 		// something has gone wrong here...
; 671  : 		printf( "gethostbyname failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$4[ebp]
	push	ecx
	push	OFFSET ??_C@_0CI@DFDDAHHM@gethostbyname?5failed?3Error?5code?5@
	call	_printf
	add	esp, 12					; 0000000cH

; 672  : 
; 673  : 		//Free the buffer.
; 674  : 		LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 675  : #endif
; 676  : 
; 677  : 		return ;

	jmp	$LN6@GetMyIP
$LN4@GetMyIP:

; 678  : 	}
; 679  : 
; 680  : 	for ( int i = 0; phe->h_addr_list[ i ] != 0 && i < 10; ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@GetMyIP
$LN2@GetMyIP:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@GetMyIP:
	mov	eax, DWORD PTR _phe$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN6@GetMyIP
	cmp	DWORD PTR _i$2[ebp], 10			; 0000000aH
	jge	SHORT $LN6@GetMyIP

; 681  : 	{
; 682  : 
; 683  : 		struct in_addr addr;
; 684  : 
; 685  : 		memcpy( &addr, phe->h_addr_list[ i ], sizeof( struct in_addr ) );

	push	4
	mov	eax, DWORD PTR _phe$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	lea	ecx, DWORD PTR _addr$1[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 686  : 		//cout << "Address " << i << ": " << inet_ntoa(addr) << endl;
; 687  : 		strcpy( ipList[ i ], inet_ntoa( addr ) );

	mov	esi, esp
	mov	eax, DWORD PTR _addr$1[ebp]
	push	eax
	call	DWORD PTR __imp__inet_ntoa@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _ipList$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 688  : 	}

	jmp	SHORT $LN2@GetMyIP
$LN6@GetMyIP:

; 689  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetMyIP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN13@GetMyIP:
	DD	4
	DD	$LN12@GetMyIP
$LN12@GetMyIP:
	DD	-100					; ffffff9cH
	DD	80					; 00000050H
	DD	$LN8@GetMyIP
	DD	-124					; ffffff84H
	DD	4
	DD	$LN9@GetMyIP
	DD	-160					; ffffff60H
	DD	4
	DD	$LN10@GetMyIP
	DD	-184					; ffffff48H
	DD	4
	DD	$LN11@GetMyIP
$LN11@GetMyIP:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	0
$LN10@GetMyIP:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN9@GetMyIP:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN8@GetMyIP:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	0
?GetMyIP@SocketLayer@@QAEXQAY0BA@D@Z ENDP		; SocketLayer::GetMyIP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?RecvFrom@SocketLayer@@QAEHIPAVRakPeer@@PAH@Z
_TEXT	SEGMENT
$T1 = -50904						; size = 4
_messageBuffer$2 = -50700				; size = 4
_portnum$3 = -50688					; size = 2
_dwIOError$4 = -50676					; size = 4
_portnum$5 = -50664					; size = 2
_len2$ = -50652						; size = 4
_pDecompressBuffer$ = -50640				; size = 50000
_sa$ = -632						; size = 16
_data$ = -608						; size = 576
_len$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_rakPeer$ = 12						; size = 4
_errorCode$ = 16					; size = 4
?RecvFrom@SocketLayer@@QAEHIPAVRakPeer@@PAH@Z PROC	; SocketLayer::RecvFrom, COMDAT
; _this$ = ecx

; 412  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 50908				; 0000c6dcH
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-50908]
	mov	ecx, 12727				; 000031b7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 	int len;
; 414  : 	char data[ MAXIMUM_MTU_SIZE ];
; 415  : 	sockaddr_in sa;
; 416  : 	unsigned char pDecompressBuffer[COMPRESS_DECOMPRESS_BUFFERSIZE] = {0};

	mov	BYTE PTR _pDecompressBuffer$[ebp], 0
	push	49999					; 0000c34fH
	push	0
	lea	eax, DWORD PTR _pDecompressBuffer$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 417  : 
; 418  : 	const socklen_t len2 = sizeof( struct sockaddr_in );

	mov	DWORD PTR _len2$[ebp], 16		; 00000010H

; 419  : 	sa.sin_family = AF_INET;

	mov	eax, 2
	mov	WORD PTR _sa$[ebp], ax

; 420  : 
; 421  : #ifdef _DEBUG
; 422  : 	data[ 0 ] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 576			; 00000240H
	jae	SHORT $LN11@RecvFrom
	jmp	SHORT $LN12@RecvFrom
$LN11@RecvFrom:
	call	___report_rangecheckfailure
$LN12@RecvFrom:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _data$[ebp+edx], 0

; 423  : 	len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 424  : 	sa.sin_addr.s_addr = 0;

	mov	DWORD PTR _sa$[ebp+4], 0

; 425  : #endif
; 426  : 
; 427  : 	if ( s == INVALID_SOCKET )

	cmp	DWORD PTR _s$[ebp], -1
	jne	SHORT $LN8@RecvFrom

; 428  : 	{
; 429  : 		*errorCode = SOCKET_ERROR;

	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], -1

; 430  : 		return SOCKET_ERROR;

	or	eax, -1
	jmp	$LN10@RecvFrom
$LN8@RecvFrom:

; 431  : 	}
; 432  : 
; 433  : 	len = recvfrom( s, data, MAXIMUM_MTU_SIZE, COMPATIBILITY_2_RECV_FROM_FLAGS, ( sockaddr* ) & sa, ( socklen_t* ) & len2 );

	mov	esi, esp
	lea	eax, DWORD PTR _len2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$[ebp]
	push	ecx
	push	0
	push	576					; 00000240H
	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__recvfrom@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len$[ebp], eax

; 434  : 
; 435  : 	// if (len>0)
; 436  : 	//  printf("Got packet on port %i\n",ntohs(sa.sin_port));
; 437  : 
; 438  : 	/*
; 439  : 	if ( len == 0 )
; 440  : 	{
; 441  : #ifdef _DEBUG
; 442  : 		printf( "Error: recvfrom returned 0 on a connectionless blocking call\non port %i.  This is a bug with Zone Alarm.  Please turn off Zone Alarm.\n", ntohs( sa.sin_port ) );
; 443  : 		assert( 0 );
; 444  : #endif
; 445  : 
; 446  : 		//*errorCode = SOCKET_ERROR;
; 447  : 		*errorCode = 0;
; 448  : 		return SOCKET_ERROR;
; 449  : 	}*/
; 450  : 
; 451  : 	if ( len != SOCKET_ERROR )

	cmp	DWORD PTR _len$[ebp], -1
	je	SHORT $LN7@RecvFrom

; 452  : 	{
; 453  : 		unsigned short portnum;
; 454  : 		portnum = ntohs( sa.sin_port );

	mov	esi, esp
	movzx	eax, WORD PTR _sa$[ebp+2]
	push	eax
	call	DWORD PTR __imp__ntohs@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _portnum$5[ebp], ax

; 455  : 		//strcpy(ip, inet_ntoa(sa.sin_addr));
; 456  : 		//if (strcmp(ip, "0.0.0.0")==0)
; 457  : 		// strcpy(ip, "127.0.0.1");
; 458  : 
; 459  : 		if (len > 0)

	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN6@RecvFrom

; 460  : 		{
; 461  : 
; 462  : #ifdef SAMPSRV
; 463  : 			// QUERY PACKETS ARE NOT COMPRESSED
; 464  : 			//logprintf("Raw ID: %c:%u",data[0],data[0]);
; 465  : 
; 466  : 			if(ProcessQueryPacket(sa.sin_addr.s_addr, portnum,(char*)data, len, s)) {
; 467  : 				*errorCode = 0;
; 468  : 				return 1;
; 469  : 			}
; 470  : #endif
; 471  : 
; 472  : 		//----------------------------------------------
; 473  : 		// Kye Added: Zlib in socketlayer headend.
; 474  : #ifdef SAMPSRV
; 475  : 			uLongf destLen = COMPRESS_DECOMPRESS_BUFFERSIZE;
; 476  : 		
; 477  : 			PlayerID thisPlayerId;
; 478  : 			thisPlayerId.binaryAddress = sa.sin_addr.s_addr;
; 479  : 			thisPlayerId.port = portnum;
; 480  : 
; 481  : 			if(uncompress(pDecompressBuffer,&destLen,(Bytef *)data,len) != Z_OK) {
; 482  : 				*errorCode = 0;
; 483  : 				return 1;
; 484  : 			}
; 485  : 
; 486  : 			_recvfromCompressedTotal+=len;
; 487  : 			_recvfromUncompressedTotal+=destLen;
; 488  : 
; 489  : 			// Code patch for sampfp DoS
; 490  : 			if(pDecompressBuffer[0] == ID_OPEN_CONNECTION_REQUEST) {
; 491  : 				
; 492  : 			}
; 493  : 			//logprintf("Decompressed ID: %u",pDecompressBuffer[0]);
; 494  : 		
; 495  : 			ProcessNetworkPacket( sa.sin_addr.s_addr, portnum, (char*)pDecompressBuffer, destLen, rakPeer );
; 496  : #else
; 497  : 			ProcessNetworkPacket( sa.sin_addr.s_addr, portnum, data, len, rakPeer );  

	mov	eax, DWORD PTR _rakPeer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	movzx	eax, WORD PTR _portnum$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _sa$[ebp+4]
	push	ecx
	call	?ProcessNetworkPacket@@YGXIGPBDHPAVRakPeer@@@Z ; ProcessNetworkPacket
$LN6@RecvFrom:

; 498  : #endif
; 499  : 		}
; 500  : 		return 1;

	mov	eax, 1
	jmp	$LN10@RecvFrom

; 501  : 	}
; 502  : 	else

	jmp	$LN5@RecvFrom
$LN7@RecvFrom:

; 503  : 	{
; 504  : 		*errorCode = 0;

	mov	eax, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], 0

; 505  : 
; 506  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 507  : 
; 508  : 		DWORD dwIOError = WSAGetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__WSAGetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$4[ebp], eax

; 509  : 
; 510  : 		if ( dwIOError == WSAEWOULDBLOCK )

	cmp	DWORD PTR _dwIOError$4[ebp], 10035	; 00002733H
	jne	SHORT $LN4@RecvFrom

; 511  : 		{
; 512  : 			return SOCKET_ERROR;

	or	eax, -1
	jmp	$LN10@RecvFrom
$LN4@RecvFrom:

; 513  : 		}
; 514  : 		if ( dwIOError == WSAECONNRESET )

	cmp	DWORD PTR _dwIOError$4[ebp], 10054	; 00002746H
	jne	SHORT $LN3@RecvFrom

; 515  : 		{
; 516  : #if defined(_DEBUG)
; 517  : //			printf( "A previous send operation resulted in an ICMP Port Unreachable message.\n" );
; 518  : #endif
; 519  : 
; 520  : 
; 521  : 			unsigned short portnum=0;

	xor	eax, eax
	mov	WORD PTR _portnum$3[ebp], ax

; 522  : 			ProcessPortUnreachable(sa.sin_addr.s_addr, portnum, rakPeer);

	mov	eax, DWORD PTR _rakPeer$[ebp]
	push	eax
	movzx	ecx, WORD PTR _portnum$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _sa$[ebp+4]
	push	edx
	call	?ProcessPortUnreachable@@YGXIGPAVRakPeer@@@Z ; ProcessPortUnreachable

; 523  : 			// *errorCode = dwIOError;
; 524  : 			return SOCKET_ERROR;

	or	eax, -1
	jmp	SHORT $LN10@RecvFrom

; 525  : 		}
; 526  : 		else

	jmp	SHORT $LN5@RecvFrom
$LN3@RecvFrom:

; 527  : 		{
; 528  : #if defined(_DEBUG)
; 529  : 			if ( dwIOError != WSAEINTR )

	cmp	DWORD PTR _dwIOError$4[ebp], 10004	; 00002714H
	je	SHORT $LN5@RecvFrom

; 530  : 			{
; 531  : 				LPVOID messageBuffer;
; 532  : 				FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 533  : 					NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 534  : 					( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$2[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$4[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 535  : 				// something has gone wrong here...
; 536  : 				printf( "recvfrom failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$4[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@PNKPCNDI@recvfrom?5failed?3Error?5code?5?9?5?$CFd?6@
	call	_printf
	add	esp, 12					; 0000000cH

; 537  : 
; 538  : 				//Free the buffer.
; 539  : 				LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$2[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@RecvFrom:

; 540  : 			}
; 541  : #endif
; 542  : 		}
; 543  : #endif
; 544  : 	}
; 545  : 
; 546  : 	return 0; // no data

	xor	eax, eax
$LN10@RecvFrom:

; 547  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@RecvFrom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 50908				; 0000c6dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN19@RecvFrom:
	DD	5
	DD	$LN18@RecvFrom
$LN18@RecvFrom:
	DD	-608					; fffffda0H
	DD	576					; 00000240H
	DD	$LN13@RecvFrom
	DD	-632					; fffffd88H
	DD	16					; 00000010H
	DD	$LN14@RecvFrom
	DD	-50640					; ffff3a30H
	DD	50000					; 0000c350H
	DD	$LN15@RecvFrom
	DD	-50652					; ffff3a24H
	DD	4
	DD	$LN16@RecvFrom
	DD	-50700					; ffff39f4H
	DD	4
	DD	$LN17@RecvFrom
$LN17@RecvFrom:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN16@RecvFrom:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	50					; 00000032H
	DB	0
$LN15@RecvFrom:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN14@RecvFrom:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	0
$LN13@RecvFrom:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?RecvFrom@SocketLayer@@QAEHIPAVRakPeer@@PAH@Z ENDP	; SocketLayer::RecvFrom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?Write@SocketLayer@@QAEXIPBDH@Z
_TEXT	SEGMENT
_destLen$ = -50032					; size = 4
_pCompressBuffer$ = -50020				; size = 50000
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_writeSocket$ = 8					; size = 4
_data$ = 12						; size = 4
_length$ = 16						; size = 4
?Write@SocketLayer@@QAEXIPBDH@Z PROC			; SocketLayer::Write, COMDAT
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 50228				; 0000c434H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-50228]
	mov	ecx, 12557				; 0000310dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 	unsigned char pCompressBuffer[COMPRESS_DECOMPRESS_BUFFERSIZE]={0};

	mov	BYTE PTR _pCompressBuffer$[ebp], 0
	push	49999					; 0000c34fH
	push	0
	lea	eax, DWORD PTR _pCompressBuffer$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 330  : 
; 331  : #ifdef _DEBUG
; 332  : 	assert( writeSocket != INVALID_SOCKET );

	cmp	DWORD PTR _writeSocket$[ebp], -1
	jne	SHORT $LN4@Write
	mov	eax, DWORD PTR ?__LINE__Var@?1??Write@SocketLayer@@QAEXIPBDH@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1FA@FGHCBBPF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AAl?$AAa@
	push	OFFSET ??_C@_1DM@IOFBKPGG@?$AAw?$AAr?$AAi?$AAt?$AAe?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAS?$AAO?$AAC?$AAK?$AAE?$AAT?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@Write:

; 333  : #endif
; 334  : #ifdef __USE_IO_COMPLETION_PORTS
; 335  : 
; 336  : 	ExtendedOverlappedStruct* eos = ExtendedOverlappedPool::Instance()->GetPointer();
; 337  : 	memset( &( eos->overlapped ), 0, sizeof( OVERLAPPED ) );
; 338  : 	memcpy( eos->data, data, length );
; 339  : 	eos->length = length;
; 340  : 
; 341  : 	//AsynchronousFileIO::Instance()->PostWriteCompletion(ccs);
; 342  : 	WriteAsynch( ( HANDLE ) writeSocket, eos );
; 343  : #else
; 344  : 
; 345  : //----------------------------------------------
; 346  : // Kye Added: Zlib in socketlayer headend (client compresses)
; 347  : 
; 348  :   #ifndef SAMPSRV
; 349  : 	uLongf destLen = COMPRESS_DECOMPRESS_BUFFERSIZE;

	mov	DWORD PTR _destLen$[ebp], 50000		; 0000c350H

; 350  : 	if(compress2(pCompressBuffer,&destLen,(Bytef *)data,length,1) != Z_OK) {

	push	1
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _destLen$[ebp]
	push	edx
	lea	eax, DWORD PTR _pCompressBuffer$[ebp]
	push	eax
	call	_compress2
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN1@Write

; 351  : 		return;

	jmp	SHORT $LN2@Write
$LN1@Write:

; 352  : 	}
; 353  : 	_sendtoUncompressedTotal+=length;

	mov	eax, DWORD PTR ?_sendtoUncompressedTotal@@3KA ; _sendtoUncompressedTotal
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR ?_sendtoUncompressedTotal@@3KA, eax ; _sendtoUncompressedTotal

; 354  : 	_sendtoCompressedTotal+=destLen;

	mov	eax, DWORD PTR ?_sendtoCompressedTotal@@3KA ; _sendtoCompressedTotal
	add	eax, DWORD PTR _destLen$[ebp]
	mov	DWORD PTR ?_sendtoCompressedTotal@@3KA, eax ; _sendtoCompressedTotal

; 355  : 	send( writeSocket, (char*)pCompressBuffer, destLen, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _destLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pCompressBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _writeSocket$[ebp]
	push	edx
	call	DWORD PTR __imp__send@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Write:

; 356  :   #else
; 357  : 	send( writeSocket, data, length, 0 );
; 358  :   #endif
; 359  : 
; 360  : #endif
; 361  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Write
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 50228				; 0000c434H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN8@Write:
	DD	2
	DD	$LN7@Write
$LN7@Write:
	DD	-50020					; ffff3c9cH
	DD	50000					; 0000c350H
	DD	$LN5@Write
	DD	-50032					; ffff3c90H
	DD	4
	DD	$LN6@Write
$LN6@Write:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN5@Write:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?Write@SocketLayer@@QAEXIPBDH@Z ENDP			; SocketLayer::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?AssociateSocketWithCompletionPortAndRead@SocketLayer@@QAE_NIIGPAVRakPeer@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_readSocket$ = 8					; size = 4
_binaryAddress$ = 12					; size = 4
_port$ = 16						; size = 2
_rakPeer$ = 20						; size = 4
?AssociateSocketWithCompletionPortAndRead@SocketLayer@@QAE_NIIGPAVRakPeer@@@Z PROC ; SocketLayer::AssociateSocketWithCompletionPortAndRead, COMDAT
; _this$ = ecx

; 368  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 369  : #ifdef __USE_IO_COMPLETION_PORTS
; 370  : 	assert( readSocket != INVALID_SOCKET );
; 371  : 
; 372  : 	ClientContextStruct* ccs = new ClientContextStruct;
; 373  : 	ccs->handle = ( HANDLE ) readSocket;
; 374  : 
; 375  : 	ExtendedOverlappedStruct* eos = ExtendedOverlappedPool::Instance()->GetPointer();
; 376  : 	memset( &( eos->overlapped ), 0, sizeof( OVERLAPPED ) );
; 377  : 	eos->binaryAddress = binaryAddress;
; 378  : 	eos->port = port;
; 379  : 	eos->rakPeer = rakPeer;
; 380  : 	eos->length = MAXIMUM_MTU_SIZE;
; 381  : 
; 382  : 	bool b = AsynchronousFileIO::Instance()->AssociateSocketWithCompletionPort( readSocket, ( DWORD ) ccs );
; 383  : 
; 384  : 	if ( !b )
; 385  : 	{
; 386  : 		ExtendedOverlappedPool::Instance()->ReleasePointer( eos );
; 387  : 		delete ccs;
; 388  : 		return false;
; 389  : 	}
; 390  : 
; 391  : 	BOOL success = ReadAsynch( ( HANDLE ) readSocket, eos );
; 392  : 
; 393  : 	if ( success == FALSE )
; 394  : 		return false;
; 395  : 
; 396  : #endif
; 397  : 
; 398  : 	return true;

	mov	al, 1

; 399  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AssociateSocketWithCompletionPortAndRead@SocketLayer@@QAE_NIIGPAVRakPeer@@@Z ENDP ; SocketLayer::AssociateSocketWithCompletionPortAndRead
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?DomainNameToIP@SocketLayer@@QAEPBDPBD@Z
_TEXT	SEGMENT
_addr$ = -32						; size = 4
_phe$ = -20						; size = 4
_this$ = -8						; size = 4
_domainName$ = 8					; size = 4
?DomainNameToIP@SocketLayer@@QAEPBDPBD@Z PROC		; SocketLayer::DomainNameToIP, COMDAT
; _this$ = ecx

; 307  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 	struct hostent * phe = gethostbyname( domainName );

	mov	esi, esp
	mov	eax, DWORD PTR _domainName$[ebp]
	push	eax
	call	DWORD PTR __imp__gethostbyname@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _phe$[ebp], eax

; 309  : 
; 310  : 	if ( phe == 0 || phe->h_addr_list[ 0 ] == 0 )

	cmp	DWORD PTR _phe$[ebp], 0
	je	SHORT $LN1@DomainName
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _phe$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [ecx+eax], 0
	jne	SHORT $LN2@DomainName
$LN1@DomainName:

; 311  : 	{
; 312  : 		//cerr << "Yow! Bad host lookup." << endl;
; 313  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DomainName
$LN2@DomainName:

; 314  : 	}
; 315  : 
; 316  : 	struct in_addr addr;
; 317  : 
; 318  : 	memcpy( &addr, phe->h_addr_list[ 0 ], sizeof( struct in_addr ) );

	push	4
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _phe$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	lea	edx, DWORD PTR _addr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 319  : 
; 320  : 	return inet_ntoa( addr );

	mov	esi, esp
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	call	DWORD PTR __imp__inet_ntoa@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DomainName:

; 321  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DomainName
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN7@DomainName:
	DD	1
	DD	$LN6@DomainName
$LN6@DomainName:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@DomainName
$LN5@DomainName:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	0
?DomainNameToIP@SocketLayer@@QAEPBDPBD@Z ENDP		; SocketLayer::DomainNameToIP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?CreateBoundSocket@SocketLayer@@QAEIG_NPBD@Z
_TEXT	SEGMENT
_messageBuffer$1 = -180					; size = 4
_dwIOError$2 = -168					; size = 4
_messageBuffer$3 = -156					; size = 4
_dwIOError$4 = -144					; size = 4
_nonblocking$ = -132					; size = 4
_messageBuffer$5 = -120					; size = 4
_dwIOError$6 = -108					; size = 4
_sock_opt$ = -96					; size = 4
_messageBuffer$7 = -84					; size = 4
_dwIOError$8 = -72					; size = 4
_ret$ = -60						; size = 4
_listenerSocketAddress$ = -48				; size = 16
_listenSocket$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_port$ = 8						; size = 2
_blockingSocket$ = 12					; size = 1
_forceHostAddress$ = 16					; size = 4
?CreateBoundSocket@SocketLayer@@QAEIG_NPBD@Z PROC	; SocketLayer::CreateBoundSocket, COMDAT
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	SOCKET listenSocket;
; 153  : 	sockaddr_in listenerSocketAddress;
; 154  : 	int ret;
; 155  : 
; 156  : #ifdef __USE_IO_COMPLETION_PORTS
; 157  : 
; 158  : 	if ( blockingSocket == false ) 
; 159  : 		listenSocket = WSASocket( AF_INET, SOCK_DGRAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED );
; 160  : 	else
; 161  : #endif
; 162  : 
; 163  : 		listenSocket = socket( AF_INET, SOCK_DGRAM, 0 );

	mov	esi, esp
	push	0
	push	2
	push	2
	call	DWORD PTR __imp__socket@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _listenSocket$[ebp], eax

; 164  : 
; 165  : 	if ( listenSocket == INVALID_SOCKET )

	cmp	DWORD PTR _listenSocket$[ebp], -1
	jne	SHORT $LN7@CreateBoun

; 166  : 	{
; 167  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 168  : 		DWORD dwIOError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$8[ebp], eax

; 169  : 		LPVOID messageBuffer;
; 170  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 171  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 172  : 			( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$7[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$8[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 173  : 		// something has gone wrong here...
; 174  : 		printf( "socket(...) failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$8[ebp]
	push	ecx
	push	OFFSET ??_C@_0CG@NIJBIHON@socket?$CI?4?4?4?$CJ?5failed?3Error?5code?5?9?5@
	call	_printf
	add	esp, 12					; 0000000cH

; 175  : 		//Free the buffer.
; 176  : 		LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$7[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 177  : #endif
; 178  : 
; 179  : 		return INVALID_SOCKET;

	or	eax, -1
	jmp	$LN8@CreateBoun
$LN7@CreateBoun:

; 180  : 	}
; 181  : 
; 182  : 	int sock_opt = 1;

	mov	DWORD PTR _sock_opt$[ebp], 1

; 183  : 
; 184  : 	if ( setsockopt( listenSocket, SOL_SOCKET, SO_REUSEADDR, ( char * ) & sock_opt, sizeof ( sock_opt ) ) == -1 )

	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _sock_opt$[ebp]
	push	eax
	push	4
	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR _listenSocket$[ebp]
	push	ecx
	call	DWORD PTR __imp__setsockopt@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN6@CreateBoun

; 185  : 	{
; 186  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 187  : 		DWORD dwIOError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$6[ebp], eax

; 188  : 		LPVOID messageBuffer;
; 189  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 190  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 191  : 			( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$5[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$6[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 192  : 		// something has gone wrong here...
; 193  : 		printf( "setsockopt(SO_REUSEADDR) failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$6[ebp]
	push	ecx
	push	OFFSET ??_C@_0DD@LAIAMEMK@setsockopt?$CISO_REUSEADDR?$CJ?5failed?3@
	call	_printf
	add	esp, 12					; 0000000cH

; 194  : 		//Free the buffer.
; 195  : 		LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$5[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@CreateBoun:

; 196  : #endif
; 197  : 	}
; 198  : 
; 199  : 	// This doubles the max throughput rate
; 200  : 	sock_opt=1024*256;

	mov	DWORD PTR _sock_opt$[ebp], 262144	; 00040000H

; 201  : 	setsockopt(listenSocket, SOL_SOCKET, SO_RCVBUF, ( char * ) & sock_opt, sizeof ( sock_opt ) );

	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _sock_opt$[ebp]
	push	eax
	push	4098					; 00001002H
	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR _listenSocket$[ebp]
	push	ecx
	call	DWORD PTR __imp__setsockopt@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 202  : 	
; 203  : 	// This doesn't make much difference: 10% maybe
; 204  : 	sock_opt=1024*16;

	mov	DWORD PTR _sock_opt$[ebp], 16384	; 00004000H

; 205  : 	setsockopt(listenSocket, SOL_SOCKET, SO_SNDBUF, ( char * ) & sock_opt, sizeof ( sock_opt ) );

	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _sock_opt$[ebp]
	push	eax
	push	4097					; 00001001H
	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR _listenSocket$[ebp]
	push	ecx
	call	DWORD PTR __imp__setsockopt@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 206  : 
; 207  : 	#if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 208  : 	// If this assert hit you improperly linked against WSock32.h
; 209  : 	assert(IP_DONTFRAGMENT==14);
; 210  : 	#endif
; 211  : 
; 212  : 	// TODO - I need someone on dialup to test this with :(
; 213  : 	// Path MTU Detection
; 214  : 	/*
; 215  : 	if ( setsockopt( listenSocket, IPPROTO_IP, IP_DONTFRAGMENT, ( char * ) & sock_opt, sizeof ( sock_opt ) ) == -1 )
; 216  : 	{
; 217  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 218  : 		DWORD dwIOError = GetLastError();
; 219  : 		LPVOID messageBuffer;
; 220  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 221  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 222  : 			( LPTSTR ) & messageBuffer, 0, NULL );
; 223  : 		// something has gone wrong here...
; 224  : 		printf( "setsockopt(IP_DONTFRAGMENT) failed:Error code - %d\n%s", dwIOError, messageBuffer );
; 225  : 		//Free the buffer.
; 226  : 		LocalFree( messageBuffer );
; 227  : #endif
; 228  : 	}
; 229  : 	*/
; 230  : 
; 231  : #ifndef _COMPATIBILITY_2
; 232  : 	//Set non-blocking
; 233  : #ifdef _WIN32
; 234  : 	unsigned long nonblocking = 1;

	mov	DWORD PTR _nonblocking$[ebp], 1

; 235  : // http://www.die.net/doc/linux/man/man7/ip.7.html
; 236  : 	if ( ioctlsocket( listenSocket, FIONBIO, &nonblocking ) != 0 )

	mov	esi, esp
	lea	eax, DWORD PTR _nonblocking$[ebp]
	push	eax
	push	-2147195266				; 8004667eH
	mov	ecx, DWORD PTR _listenSocket$[ebp]
	push	ecx
	call	DWORD PTR __imp__ioctlsocket@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@CreateBoun

; 237  : 	{
; 238  : 		assert( 0 );

	xor	eax, eax
	jne	SHORT $LN10@CreateBoun
	mov	ecx, DWORD PTR ?__LINE__Var@?1??CreateBoundSocket@SocketLayer@@QAEIG_NPBD@Z@4JA
	add	ecx, 87					; 00000057H
	push	ecx
	push	OFFSET ??_C@_1FA@FGHCBBPF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AAl?$AAa@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@CreateBoun:

; 239  : 		return INVALID_SOCKET;

	or	eax, -1
	jmp	$LN8@CreateBoun
$LN5@CreateBoun:

; 240  : 	}
; 241  : #else
; 242  : 	if ( fcntl( listenSocket, F_SETFL, O_NONBLOCK ) != 0 )
; 243  : 	{
; 244  : 		assert( 0 );
; 245  : 		return INVALID_SOCKET;
; 246  : 	}
; 247  : #endif
; 248  : #endif
; 249  : 
; 250  : 	// Set broadcast capable
; 251  : 	if ( setsockopt( listenSocket, SOL_SOCKET, SO_BROADCAST, ( char * ) & sock_opt, sizeof( sock_opt ) ) == -1 )

	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _sock_opt$[ebp]
	push	eax
	push	32					; 00000020H
	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR _listenSocket$[ebp]
	push	ecx
	call	DWORD PTR __imp__setsockopt@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN4@CreateBoun

; 252  : 	{
; 253  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 254  : 		DWORD dwIOError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$4[ebp], eax

; 255  : 		LPVOID messageBuffer;
; 256  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 257  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 258  : 			( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$3[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$4[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 259  : 		// something has gone wrong here...
; 260  : 		printf( "setsockopt(SO_BROADCAST) failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$4[ebp]
	push	ecx
	push	OFFSET ??_C@_0DD@KNONDNMC@setsockopt?$CISO_BROADCAST?$CJ?5failed?3@
	call	_printf
	add	esp, 12					; 0000000cH

; 261  : 		//Free the buffer.
; 262  : 		LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$3[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CreateBoun:

; 263  : #endif
; 264  : 
; 265  : 	}
; 266  : 
; 267  : 	// Listen on our designated Port#
; 268  : 	listenerSocketAddress.sin_port = htons( port );

	mov	esi, esp
	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	call	DWORD PTR __imp__htons@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _listenerSocketAddress$[ebp+2], ax

; 269  : 
; 270  : 	// Fill in the rest of the address structure
; 271  : 	listenerSocketAddress.sin_family = AF_INET;

	mov	eax, 2
	mov	WORD PTR _listenerSocketAddress$[ebp], ax

; 272  : 
; 273  : 	if (forceHostAddress && forceHostAddress[0])

	cmp	DWORD PTR _forceHostAddress$[ebp], 0
	je	SHORT $LN3@CreateBoun
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _forceHostAddress$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN3@CreateBoun

; 274  : 	{
; 275  : 		listenerSocketAddress.sin_addr.s_addr = inet_addr( forceHostAddress );

	mov	esi, esp
	mov	eax, DWORD PTR _forceHostAddress$[ebp]
	push	eax
	call	DWORD PTR __imp__inet_addr@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _listenerSocketAddress$[ebp+4], eax

; 276  : 	}
; 277  : 	else

	jmp	SHORT $LN2@CreateBoun
$LN3@CreateBoun:

; 278  : 	{
; 279  : 		listenerSocketAddress.sin_addr.s_addr = INADDR_ANY;

	mov	DWORD PTR _listenerSocketAddress$[ebp+4], 0
$LN2@CreateBoun:

; 280  : 	}	
; 281  : 
; 282  : 	// bind our name to the socket
; 283  : 	ret = bind( listenSocket, ( struct sockaddr * ) & listenerSocketAddress, sizeof( struct sockaddr ) );

	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _listenerSocketAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _listenSocket$[ebp]
	push	ecx
	call	DWORD PTR __imp__bind@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 284  : 
; 285  : 	if ( ret == SOCKET_ERROR )

	cmp	DWORD PTR _ret$[ebp], -1
	jne	SHORT $LN1@CreateBoun

; 286  : 	{
; 287  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 288  : 		DWORD dwIOError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$2[ebp], eax

; 289  : 		LPVOID messageBuffer;
; 290  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 291  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 292  : 			( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$2[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 293  : 		// something has gone wrong here...
; 294  : 		printf( "bind(...) failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$2[ebp]
	push	ecx
	push	OFFSET ??_C@_0CE@DMLHPBFO@bind?$CI?4?4?4?$CJ?5failed?3Error?5code?5?9?5?$CFd@
	call	_printf
	add	esp, 12					; 0000000cH

; 295  : 		//Free the buffer.
; 296  : 		LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 297  : #endif
; 298  : 
; 299  : 		return INVALID_SOCKET;

	or	eax, -1
	jmp	SHORT $LN8@CreateBoun
$LN1@CreateBoun:

; 300  : 	}
; 301  : 
; 302  : 	return listenSocket;

	mov	eax, DWORD PTR _listenSocket$[ebp]
$LN8@CreateBoun:

; 303  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@CreateBoun
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN19@CreateBoun:
	DD	7
	DD	$LN18@CreateBoun
$LN18@CreateBoun:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN11@CreateBoun
	DD	-84					; ffffffacH
	DD	4
	DD	$LN12@CreateBoun
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN13@CreateBoun
	DD	-120					; ffffff88H
	DD	4
	DD	$LN14@CreateBoun
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN15@CreateBoun
	DD	-156					; ffffff64H
	DD	4
	DD	$LN16@CreateBoun
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN17@CreateBoun
$LN17@CreateBoun:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN16@CreateBoun:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@CreateBoun:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN14@CreateBoun:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN13@CreateBoun:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	0
$LN12@CreateBoun:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN11@CreateBoun:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
?CreateBoundSocket@SocketLayer@@QAEIG_NPBD@Z ENDP	; SocketLayer::CreateBoundSocket
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ?Connect@SocketLayer@@QAEIIIG@Z
_TEXT	SEGMENT
_messageBuffer$1 = -60					; size = 4
_dwIOError$2 = -48					; size = 4
_connectSocketAddress$ = -36				; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_writeSocket$ = 8					; size = 4
_binaryAddress$ = 12					; size = 4
_port$ = 16						; size = 2
?Connect@SocketLayer@@QAEIIIG@Z PROC			; SocketLayer::Connect, COMDAT
; _this$ = ecx

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 	assert( writeSocket != INVALID_SOCKET );

	cmp	DWORD PTR _writeSocket$[ebp], -1
	jne	SHORT $LN4@Connect
	mov	eax, DWORD PTR ?__LINE__Var@?1??Connect@SocketLayer@@QAEIIIG@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FA@FGHCBBPF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AAl?$AAa@
	push	OFFSET ??_C@_1DM@IOFBKPGG@?$AAw?$AAr?$AAi?$AAt?$AAe?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAS?$AAO?$AAC?$AAK?$AAE?$AAT?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@Connect:

; 123  : 	sockaddr_in connectSocketAddress;
; 124  : 
; 125  : 	connectSocketAddress.sin_family = AF_INET;

	mov	eax, 2
	mov	WORD PTR _connectSocketAddress$[ebp], ax

; 126  : 	connectSocketAddress.sin_port = htons( port );

	mov	esi, esp
	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	call	DWORD PTR __imp__htons@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _connectSocketAddress$[ebp+2], ax

; 127  : 	connectSocketAddress.sin_addr.s_addr = binaryAddress;

	mov	eax, DWORD PTR _binaryAddress$[ebp]
	mov	DWORD PTR _connectSocketAddress$[ebp+4], eax

; 128  : 
; 129  : 	if ( connect( writeSocket, ( struct sockaddr * ) & connectSocketAddress, sizeof( struct sockaddr ) ) != 0 )

	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _connectSocketAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeSocket$[ebp]
	push	ecx
	call	DWORD PTR __imp__connect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@Connect

; 130  : 	{
; 131  : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 132  : 		DWORD dwIOError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$2[ebp], eax

; 133  : 		LPVOID messageBuffer;
; 134  : 		FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 135  : 			NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 136  : 			( LPTSTR ) &messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$2[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : 		// something has gone wrong here...
; 138  : 		printf( "WSAConnect failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$2[ebp]
	push	ecx
	push	OFFSET ??_C@_0CF@LNJGNHJG@WSAConnect?5failed?3Error?5code?5?9?5?$CF@
	call	_printf
	add	esp, 12					; 0000000cH

; 139  : 		//Free the buffer.
; 140  : 		LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Connect:

; 141  : #endif
; 142  : 	}
; 143  : 
; 144  : 	return writeSocket;

	mov	eax, DWORD PTR _writeSocket$[ebp]

; 145  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Connect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN8@Connect:
	DD	2
	DD	$LN7@Connect
$LN7@Connect:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN5@Connect
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN6@Connect
$LN6@Connect:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN5@Connect:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
?Connect@SocketLayer@@QAEIIIG@Z ENDP			; SocketLayer::Connect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ??1SocketLayer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1SocketLayer@@QAE@XZ PROC				; SocketLayer::~SocketLayer, COMDAT
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 	if ( socketLayerStarted == true )

	movzx	eax, BYTE PTR ?socketLayerStarted@SocketLayer@@0_NA ; SocketLayer::socketLayerStarted
	cmp	eax, 1
	jne	SHORT $LN2@SocketLaye

; 111  : 	{
; 112  : #ifdef _WIN32
; 113  : 		WSACleanup();

	mov	esi, esp
	call	DWORD PTR __imp__WSACleanup@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  : #endif
; 115  : 
; 116  : 		socketLayerStarted = false;

	mov	BYTE PTR ?socketLayerStarted@SocketLayer@@0_NA, 0 ; SocketLayer::socketLayerStarted
$LN2@SocketLaye:

; 117  : 	}
; 118  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SocketLayer@@QAE@XZ ENDP				; SocketLayer::~SocketLayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\socketlayer.cpp
;	COMDAT ??0SocketLayer@@QAE@XZ
_TEXT	SEGMENT
_messageBuffer$1 = -32					; size = 4
_dwIOError$2 = -20					; size = 4
_this$ = -8						; size = 4
??0SocketLayer@@QAE@XZ PROC				; SocketLayer::SocketLayer, COMDAT
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	if ( socketLayerStarted == false )

	movzx	eax, BYTE PTR ?socketLayerStarted@SocketLayer@@0_NA ; SocketLayer::socketLayerStarted
	test	eax, eax
	jne	$LN3@SocketLaye

; 85   : 	{
; 86   : #ifdef _WIN32
; 87   : 
; 88   : 		if ( WSAStartup( MAKEWORD( 2, 2 ), &winsockInfo ) != 0 )

	mov	esi, esp
	push	OFFSET ?winsockInfo@SocketLayer@@0UWSAData@@A ; SocketLayer::winsockInfo
	push	514					; 00000202H
	call	DWORD PTR __imp__WSAStartup@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@SocketLaye

; 89   : 		{
; 90   : #if defined(_WIN32) && !defined(_COMPATIBILITY_1) && defined(_DEBUG)
; 91   : 			DWORD dwIOError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIOError$2[ebp], eax

; 92   : 			LPVOID messageBuffer;
; 93   : 			FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
; 94   : 				NULL, dwIOError, MAKELANGID( LANG_NEUTRAL, SUBLANG_DEFAULT ),  // Default language
; 95   : 				( LPTSTR ) & messageBuffer, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dwIOError$2[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 96   : 			// something has gone wrong here...
; 97   : 			printf( "WSAStartup failed:Error code - %d\n%s", dwIOError, messageBuffer );

	mov	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwIOError$2[ebp]
	push	ecx
	push	OFFSET ??_C@_0CF@NCLEMFLE@WSAStartup?5failed?3Error?5code?5?9?5?$CF@
	call	_printf
	add	esp, 12					; 0000000cH

; 98   : 			//Free the buffer.
; 99   : 			LocalFree( messageBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _messageBuffer$1[ebp]
	push	eax
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SocketLaye:

; 100  : #endif
; 101  : 		}
; 102  : 
; 103  : #endif
; 104  : 		socketLayerStarted = true;

	mov	BYTE PTR ?socketLayerStarted@SocketLayer@@0_NA, 1 ; SocketLayer::socketLayerStarted
$LN3@SocketLaye:

; 105  : 	}
; 106  : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SocketLaye
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@SocketLaye:
	DD	1
	DD	$LN6@SocketLaye
$LN6@SocketLaye:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@SocketLaye
$LN5@SocketLaye:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
??0SocketLayer@@QAE@XZ ENDP				; SocketLayer::SocketLayer
_TEXT	ENDS
END
