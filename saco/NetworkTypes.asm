; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\NetworkTypes.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?peerToPeerMode@NetworkID@@2_NA			; NetworkID::peerToPeerMode
_BSS	SEGMENT
?peerToPeerMode@NetworkID@@2_NA DB 01H DUP (?)		; NetworkID::peerToPeerMode
_BSS	ENDS
PUBLIC	?ToString@PlayerID@@QBEPAD_N@Z			; PlayerID::ToString
PUBLIC	?SetBinaryAddress@PlayerID@@QAEXPBD@Z		; PlayerID::SetBinaryAddress
PUBLIC	??4PlayerID@@QAEAAU0@ABU0@@Z			; PlayerID::operator=
PUBLIC	??8PlayerID@@QBE_NABU0@@Z			; PlayerID::operator==
PUBLIC	??9PlayerID@@QBE_NABU0@@Z			; PlayerID::operator!=
PUBLIC	??OPlayerID@@QBE_NABU0@@Z			; PlayerID::operator>
PUBLIC	??MPlayerID@@QBE_NABU0@@Z			; PlayerID::operator<
PUBLIC	??4NetworkID@@QAEAAU0@ABU0@@Z			; NetworkID::operator=
PUBLIC	?IsPeerToPeerMode@NetworkID@@SA_NXZ		; NetworkID::IsPeerToPeerMode
PUBLIC	?SetPeerToPeerMode@NetworkID@@SAX_N@Z		; NetworkID::SetPeerToPeerMode
PUBLIC	??8NetworkID@@QBE_NABU0@@Z			; NetworkID::operator==
PUBLIC	??9NetworkID@@QBE_NABU0@@Z			; NetworkID::operator!=
PUBLIC	??ONetworkID@@QBE_NABU0@@Z			; NetworkID::operator>
PUBLIC	??MNetworkID@@QBE_NABU0@@Z			; NetworkID::operator<
PUBLIC	?my_itoa@@YAPADHPADH@Z				; my_itoa
PUBLIC	??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@	; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	__itoa:PROC
EXTRN	__imp__inet_addr@4:PROC
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
	ALIGN	4

?str@?1??ToString@PlayerID@@QBEPAD_N@Z@4PADA DB 016H DUP (?) ; `PlayerID::ToString'::`2'::str
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@
CONST	SEGMENT
??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@ DB '0123456789abcdef', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ?my_itoa@@YAPADHPADH@Z
_TEXT	SEGMENT
_temp$ = -53						; size = 1
_start$ = -44						; size = 4
_absQModB$ = -32					; size = 4
_quotient$ = -20					; size = 4
_out$ = -8						; size = 4
_value$ = 8						; size = 4
_result$ = 12						; size = 4
_base$ = 16						; size = 4
?my_itoa@@YAPADHPADH@Z PROC				; my_itoa, COMDAT

; 36   : char* my_itoa( int value, char* result, int base ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   : 	// check that the base if valid
; 38   : 	if (base < 2 || base > 16) { *result = 0; return result; }

	cmp	DWORD PTR _base$[ebp], 2
	jl	SHORT $LN8@my_itoa
	cmp	DWORD PTR _base$[ebp], 16		; 00000010H
	jle	SHORT $LN9@my_itoa
$LN8@my_itoa:
	mov	eax, DWORD PTR _result$[ebp]
	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN10@my_itoa
$LN9@my_itoa:

; 39   : 	char* out = result;

	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _out$[ebp], eax

; 40   : 	int quotient = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _quotient$[ebp], eax
$LN7@my_itoa:

; 41   : 
; 42   : 	int absQModB;
; 43   : 
; 44   : 	do {
; 45   : 		// KevinJ - get rid of this dependency
; 46   : 		//*out = "0123456789abcdef"[ std::abs( quotient % base ) ];
; 47   : 		absQModB=quotient % base;

	mov	eax, DWORD PTR _quotient$[ebp]
	cdq
	idiv	DWORD PTR _base$[ebp]
	mov	DWORD PTR _absQModB$[ebp], edx

; 48   : 		if (absQModB < 0)

	cmp	DWORD PTR _absQModB$[ebp], 0
	jge	SHORT $LN4@my_itoa

; 49   : 			absQModB=-absQModB;

	mov	eax, DWORD PTR _absQModB$[ebp]
	neg	eax
	mov	DWORD PTR _absQModB$[ebp], eax
$LN4@my_itoa:

; 50   : 		*out = "0123456789abcdef"[ absQModB ];

	mov	eax, DWORD PTR _out$[ebp]
	mov	ecx, DWORD PTR _absQModB$[ebp]
	mov	dl, BYTE PTR ??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@[ecx]
	mov	BYTE PTR [eax], dl

; 51   : 		++out;

	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 52   : 		quotient /= base;

	mov	eax, DWORD PTR _quotient$[ebp]
	cdq
	idiv	DWORD PTR _base$[ebp]
	mov	DWORD PTR _quotient$[ebp], eax

; 53   : 	} while ( quotient );

	cmp	DWORD PTR _quotient$[ebp], 0
	jne	SHORT $LN7@my_itoa

; 54   : 
; 55   : 	// Only apply negative sign for base 10
; 56   : 	if ( value < 0 && base == 10) *out++ = '-';

	cmp	DWORD PTR _value$[ebp], 0
	jge	SHORT $LN3@my_itoa
	cmp	DWORD PTR _base$[ebp], 10		; 0000000aH
	jne	SHORT $LN3@my_itoa
	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
$LN3@my_itoa:

; 57   : 
; 58   : 	// KevinJ - get rid of this dependency
; 59   : 	// std::reverse( result, out );
; 60   : 	*out = 0;

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 0

; 61   : 
; 62   : 	// KevinJ - My own reverse code
; 63   :     char *start = result;

	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 64   : 	char temp;
; 65   : 	out--;

	mov	eax, DWORD PTR _out$[ebp]
	sub	eax, 1
	mov	DWORD PTR _out$[ebp], eax
$LN2@my_itoa:

; 66   : 	while (start < out)

	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _out$[ebp]
	jae	SHORT $LN1@my_itoa

; 67   : 	{
; 68   : 		temp=*start;

	mov	eax, DWORD PTR _start$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _temp$[ebp], cl

; 69   : 		*start=*out;

	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 70   : 		*out=temp;

	mov	eax, DWORD PTR _out$[ebp]
	mov	cl, BYTE PTR _temp$[ebp]
	mov	BYTE PTR [eax], cl

; 71   : 		start++;

	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _start$[ebp], eax

; 72   : 		out--;

	mov	eax, DWORD PTR _out$[ebp]
	sub	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 73   : 	}

	jmp	SHORT $LN2@my_itoa
$LN1@my_itoa:

; 74   : 
; 75   : 	return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN10@my_itoa:

; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?my_itoa@@YAPADHPADH@Z ENDP				; my_itoa
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??MNetworkID@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv92 = -208						; size = 4
tv85 = -208						; size = 4
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??MNetworkID@@QBE_NABU0@@Z PROC				; NetworkID::operator<, COMDAT
; _this$ = ecx

; 167  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 	if (NetworkID::peerToPeerMode)

	movzx	eax, BYTE PTR ?peerToPeerMode@NetworkID@@2_NA ; NetworkID::peerToPeerMode
	test	eax, eax
	je	SHORT $LN2@operator

; 169  : 		return ( ( playerId < right.playerId ) || ( ( playerId == right.playerId ) && ( localSystemId < right.localSystemId ) ) );

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??MPlayerID@@QBE_NABU0@@Z		; PlayerID::operator<
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@operator
	mov	edx, DWORD PTR _right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@operator
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+6]
	mov	eax, DWORD PTR _right$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	edx, ecx
	jl	SHORT $LN6@operator
$LN5@operator:
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN7@operator
$LN6@operator:
	mov	DWORD PTR tv85[ebp], 1
$LN7@operator:
	mov	al, BYTE PTR tv85[ebp]
	jmp	SHORT $LN3@operator

; 170  : 	else

	jmp	SHORT $LN3@operator
$LN2@operator:

; 171  : 		return localSystemId<right.localSystemId;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _right$[ebp]
	movzx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	jge	SHORT $LN8@operator
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@operator
$LN8@operator:
	mov	DWORD PTR tv92[ebp], 0
$LN9@operator:
	mov	al, BYTE PTR tv92[ebp]
$LN3@operator:

; 172  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??MNetworkID@@QBE_NABU0@@Z ENDP				; NetworkID::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??ONetworkID@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv92 = -208						; size = 4
tv85 = -208						; size = 4
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??ONetworkID@@QBE_NABU0@@Z PROC				; NetworkID::operator>, COMDAT
; _this$ = ecx

; 159  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 	if (NetworkID::peerToPeerMode)

	movzx	eax, BYTE PTR ?peerToPeerMode@NetworkID@@2_NA ; NetworkID::peerToPeerMode
	test	eax, eax
	je	SHORT $LN2@operator

; 161  : 		return ( ( playerId > right.playerId ) || ( ( playerId == right.playerId ) && ( localSystemId > right.localSystemId ) ) );

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??OPlayerID@@QBE_NABU0@@Z		; PlayerID::operator>
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@operator
	mov	edx, DWORD PTR _right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@operator
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+6]
	mov	eax, DWORD PTR _right$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	edx, ecx
	jg	SHORT $LN6@operator
$LN5@operator:
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN7@operator
$LN6@operator:
	mov	DWORD PTR tv85[ebp], 1
$LN7@operator:
	mov	al, BYTE PTR tv85[ebp]
	jmp	SHORT $LN3@operator

; 162  : 	else

	jmp	SHORT $LN3@operator
$LN2@operator:

; 163  : 		return localSystemId>right.localSystemId;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _right$[ebp]
	movzx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	jle	SHORT $LN8@operator
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@operator
$LN8@operator:
	mov	DWORD PTR tv92[ebp], 0
$LN9@operator:
	mov	al, BYTE PTR tv92[ebp]
$LN3@operator:

; 164  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ONetworkID@@QBE_NABU0@@Z ENDP				; NetworkID::operator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??9NetworkID@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv85 = -208						; size = 4
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??9NetworkID@@QBE_NABU0@@Z PROC				; NetworkID::operator!=, COMDAT
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	if (NetworkID::peerToPeerMode)

	movzx	eax, BYTE PTR ?peerToPeerMode@NetworkID@@2_NA ; NetworkID::peerToPeerMode
	test	eax, eax
	je	SHORT $LN2@operator

; 153  : 		return playerId != right.playerId || localSystemId != right.localSystemId;

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN5@operator
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+6]
	mov	ecx, DWORD PTR _right$[ebp]
	movzx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jne	SHORT $LN5@operator
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	DWORD PTR tv78[ebp], 1
$LN6@operator:
	mov	al, BYTE PTR tv78[ebp]
	jmp	SHORT $LN3@operator

; 154  : 	else

	jmp	SHORT $LN3@operator
$LN2@operator:

; 155  : 		return localSystemId!=right.localSystemId;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _right$[ebp]
	movzx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	je	SHORT $LN7@operator
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	DWORD PTR tv85[ebp], 0
$LN8@operator:
	mov	al, BYTE PTR tv85[ebp]
$LN3@operator:

; 156  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9NetworkID@@QBE_NABU0@@Z ENDP				; NetworkID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??8NetworkID@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv85 = -208						; size = 4
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??8NetworkID@@QBE_NABU0@@Z PROC				; NetworkID::operator==, COMDAT
; _this$ = ecx

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 	if (NetworkID::peerToPeerMode)

	movzx	eax, BYTE PTR ?peerToPeerMode@NetworkID@@2_NA ; NetworkID::peerToPeerMode
	test	eax, eax
	je	SHORT $LN2@operator

; 145  : 		return playerId == right.playerId && localSystemId == right.localSystemId;

	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@operator
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+6]
	mov	ecx, DWORD PTR _right$[ebp]
	movzx	edx, WORD PTR [ecx+6]
	cmp	eax, edx
	jne	SHORT $LN5@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv78[ebp]
	jmp	SHORT $LN3@operator

; 146  : 	else

	jmp	SHORT $LN3@operator
$LN2@operator:

; 147  : 		return localSystemId==right.localSystemId;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	edx, DWORD PTR _right$[ebp]
	movzx	eax, WORD PTR [edx+6]
	cmp	ecx, eax
	jne	SHORT $LN7@operator
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	DWORD PTR tv85[ebp], 0
$LN8@operator:
	mov	al, BYTE PTR tv85[ebp]
$LN3@operator:

; 148  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8NetworkID@@QBE_NABU0@@Z ENDP				; NetworkID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ?SetPeerToPeerMode@NetworkID@@SAX_N@Z
_TEXT	SEGMENT
_isPeerToPeer$ = 8					; size = 1
?SetPeerToPeerMode@NetworkID@@SAX_N@Z PROC		; NetworkID::SetPeerToPeerMode, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 180  : 	peerToPeerMode=isPeerToPeer;

	mov	al, BYTE PTR _isPeerToPeer$[ebp]
	mov	BYTE PTR ?peerToPeerMode@NetworkID@@2_NA, al ; NetworkID::peerToPeerMode

; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetPeerToPeerMode@NetworkID@@SAX_N@Z ENDP		; NetworkID::SetPeerToPeerMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ?IsPeerToPeerMode@NetworkID@@SA_NXZ
_TEXT	SEGMENT
?IsPeerToPeerMode@NetworkID@@SA_NXZ PROC		; NetworkID::IsPeerToPeerMode, COMDAT

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 176  : 	return peerToPeerMode;

	mov	al, BYTE PTR ?peerToPeerMode@NetworkID@@2_NA ; NetworkID::peerToPeerMode

; 177  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPeerToPeerMode@NetworkID@@SA_NXZ ENDP		; NetworkID::IsPeerToPeerMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??4NetworkID@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4NetworkID@@QAEAAU0@ABU0@@Z PROC			; NetworkID::operator=, COMDAT
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 	playerId = input.playerId;

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 138  : 	localSystemId = input.localSystemId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+6], dx

; 139  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 140  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4NetworkID@@QAEAAU0@ABU0@@Z ENDP			; NetworkID::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??MPlayerID@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv75 = -208						; size = 4
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??MPlayerID@@QBE_NABU0@@Z PROC				; PlayerID::operator<, COMDAT
; _this$ = ecx

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 102  : 	return ( ( binaryAddress < right.binaryAddress ) || ( ( binaryAddress == right.binaryAddress ) && ( port < right.port ) ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN4@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _right$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	DWORD PTR tv75[ebp], 1
$LN5@operator:
	mov	al, BYTE PTR tv75[ebp]

; 103  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??MPlayerID@@QBE_NABU0@@Z ENDP				; PlayerID::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??OPlayerID@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv75 = -208						; size = 4
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??OPlayerID@@QBE_NABU0@@Z PROC				; PlayerID::operator>, COMDAT
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   : 	return ( ( binaryAddress > right.binaryAddress ) || ( ( binaryAddress == right.binaryAddress ) && ( port > right.port ) ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	ja	SHORT $LN4@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _right$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jg	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	DWORD PTR tv75[ebp], 1
$LN5@operator:
	mov	al, BYTE PTR tv75[ebp]

; 98   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??OPlayerID@@QBE_NABU0@@Z ENDP				; PlayerID::operator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??9PlayerID@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??9PlayerID@@QBE_NABU0@@Z PROC				; PlayerID::operator!=, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	return binaryAddress != right.binaryAddress || port != right.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _right$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv72[ebp], 1
$LN4@operator:
	mov	al, BYTE PTR tv72[ebp]

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9PlayerID@@QBE_NABU0@@Z ENDP				; PlayerID::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ??8PlayerID@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
_right$ = 8						; size = 4
??8PlayerID@@QBE_NABU0@@Z PROC				; PlayerID::operator==, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	return binaryAddress == right.binaryAddress && port == right.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _right$[ebp]
	movzx	eax, WORD PTR [edx+4]
	cmp	ecx, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv72[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv72[ebp]

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8PlayerID@@QBE_NABU0@@Z ENDP				; PlayerID::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.h
;	COMDAT ??4PlayerID@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4PlayerID@@QAEAAU0@ABU0@@Z PROC			; PlayerID::operator=, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		binaryAddress = input.binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 76   : 		port = input.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 77   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PlayerID@@QAEAAU0@ABU0@@Z ENDP			; PlayerID::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ?SetBinaryAddress@PlayerID@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_str$ = 8						; size = 4
?SetBinaryAddress@PlayerID@@QAEXPBD@Z PROC		; PlayerID::SetBinaryAddress, COMDAT
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : #ifdef _COMPATIBILITY_1
; 129  : 	binaryAddress=UNASSIGNED_PLAYER_ID.binaryAddress;
; 130  : #else
; 131  : 	binaryAddress=inet_addr(str);

	mov	esi, esp
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	DWORD PTR __imp__inet_addr@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 132  : #endif
; 133  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBinaryAddress@PlayerID@@QAEXPBD@Z ENDP		; PlayerID::SetBinaryAddress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.cpp
;	COMDAT ?ToString@PlayerID@@QBEPAD_N@Z
_TEXT	SEGMENT
_in$ = -20						; size = 4
_this$ = -8						; size = 4
_writePort$ = 8						; size = 1
?ToString@PlayerID@@QBEPAD_N@Z PROC			; PlayerID::ToString, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : #ifdef _COMPATIBILITY_1
; 107  : 	return "";
; 108  : #else
; 109  : 	static char str[22];
; 110  : 	in_addr in;
; 111  : 	in.s_addr = binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _in$[ebp], ecx

; 112  : 	strcpy(str, inet_ntoa( in ));

	mov	esi, esp
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	DWORD PTR __imp__inet_ntoa@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET ?str@?1??ToString@PlayerID@@QBEPAD_N@Z@4PADA
	call	_strcpy
	add	esp, 8

; 113  : 	if (writePort)

	movzx	eax, BYTE PTR _writePort$[ebp]
	test	eax, eax
	je	SHORT $LN1@ToString

; 114  : 	{
; 115  : 		strcat(str, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
	push	OFFSET ?str@?1??ToString@PlayerID@@QBEPAD_N@Z@4PADA
	call	_strcat
	add	esp, 8

; 116  : #if (defined(__GNUC__)  || defined(__GCCXML__))
; 117  : 		my_itoa(port, str+strlen(str), 10);
; 118  : #else
; 119  : 		_itoa(port, str+strlen(str), 10);

	push	10					; 0000000aH
	push	OFFSET ?str@?1??ToString@PlayerID@@QBEPAD_N@Z@4PADA
	call	_strlen
	add	esp, 4
	add	eax, OFFSET ?str@?1??ToString@PlayerID@@QBEPAD_N@Z@4PADA
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+4]
	push	ecx
	call	__itoa
	add	esp, 12					; 0000000cH
$LN1@ToString:

; 120  : #endif
; 121  : 	}
; 122  : 	
; 123  : 	return (char*) str;

	mov	eax, OFFSET ?str@?1??ToString@PlayerID@@QBEPAD_N@Z@4PADA

; 124  : #endif
; 125  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ToString
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@ToString:
	DD	1
	DD	$LN5@ToString
$LN5@ToString:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@ToString
$LN4@ToString:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
?ToString@PlayerID@@QBEPAD_N@Z ENDP			; PlayerID::ToString
_TEXT	ENDS
END
