; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\exceptions.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?pContextRecord@@3PAU_CONTEXT@@A		; pContextRecord
PUBLIC	?szErrorString@@3PADA				; szErrorString
_BSS	SEGMENT
?pContextRecord@@3PAU_CONTEXT@@A DD 01H DUP (?)		; pContextRecord
?szErrorString@@3PADA DB 04000H DUP (?)			; szErrorString
_BSS	ENDS
PUBLIC	?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ	; CGame::GetMainWindowHwnd
PUBLIC	?GetState@CRemotePlayer@@QAEEXZ			; CRemotePlayer::GetState
PUBLIC	?GetID@CRemotePlayer@@QAEEXZ			; CRemotePlayer::GetID
PUBLIC	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z	; CPlayerPool::GetAt
PUBLIC	?GetSlotState@CPlayerPool@@QAEHE@Z		; CPlayerPool::GetSlotState
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	?DumpNetworkStateInformation@@YAXPAD@Z		; DumpNetworkStateInformation
PUBLIC	?DumpMemory@@YAXPAEKPADH@Z			; DumpMemory
PUBLIC	?DumpLoadedModules@@YAXPAD@Z			; DumpLoadedModules
PUBLIC	?DumpMain@@YAXH@Z				; DumpMain
PUBLIC	?DoCrashReportingStuff@@YAXXZ			; DoCrashReportingStuff
PUBLIC	?GuiDlgProcMain@@YGHPAUHWND__@@IIJ@Z		; GuiDlgProcMain
PUBLIC	?exc_handler@@YGJPAU_EXCEPTION_POINTERS@@@Z	; exc_handler
PUBLIC	??_C@_0CE@DJBJICJN@?$AN?6State?5Information?3?5L?3?5?$CFu?5?5N?3?5?$CF@ ; `string'
PUBLIC	??_C@_0N@IOCAANK@P?$CFu?5?$CI?$CFu?0?$CFu?$CJ?5?$AA@ ; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0CL@GMPOFBHP@?$CL?$CF04X?3?50x?$CF08X?5?5?50x?$CF08X?5?5?50x?$CF08X?5@ ; `string'
PUBLIC	??_C@_0FP@DMMCPIHA@?$CL?$CF04X?3?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?5?5?$CF02@ ; `string'
PUBLIC	??_C@_0BE@LGOAKHMK@?$AN?6Loaded?5Modules?3?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@BFAFHGHP@?9FailedCreate?9?$AN?6?$AA@	; `string'
PUBLIC	??_C@_0O@NJDIPOCM@?9FailedFirst?9?$AA@		; `string'
PUBLIC	??_C@_0BO@EGMHBHCD@?$CFs?7B?3?50x?$CF08X?7S?3?50x?$CF08X?7?$CI?$CFs?$CJ?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0LF@NMBFHCFA@Exception?5At?5Address?3?50x?$CF08X?$AN?6?$AN?6@ ; `string'
PUBLIC	??_C@_0BP@KOBPMFOO@?$AN?6SCM?5Op?3?50x?$CFX?0?5L?3?5?$CFd?0?5Dump?3?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_06PNKHHBBB@US?51?40?$AA@			; `string'
PUBLIC	??_C@_06EMCAAOMC@EU?51?40?$AA@			; `string'
PUBLIC	??_C@_07NFANNNEC@UNKNOWN?$AA@			; `string'
PUBLIC	??_C@_0BF@GFNIKNJE@?$AN?6Game?5Version?3?5?$CFs?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_05LOKKJDIP@data?$DN?$AA@			; `string'
PUBLIC	??_C@_0CL@FABHHMPJ@team?4sa?9mp?4com?1report_02X_u1?4php@ ; `string'
PUBLIC	??_C@_0O@PDLFIFKL@www?4sa?9mp?4com?$AA@		; `string'
PUBLIC	??_C@_0CD@CKPNGFBO@Thanks?5for?5reporting?5this?5proble@ ; `string'
EXTRN	_sprintf:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__DialogBoxParamA@20:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetDlgItem@8:PROC
EXTRN	__imp__SetDlgItemTextA@12:PROC
EXTRN	__imp__SetFocus@4:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__SetForegroundWindow@4:PROC
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	__imp__SetCursor@4:PROC
EXTRN	?ProcessURL@CHttpClient@@QAEHHPAD00@Z:PROC	; CHttpClient::ProcessURL
EXTRN	??0CHttpClient@@QAE@XZ:PROC			; CHttpClient::CHttpClient
EXTRN	??1CHttpClient@@QAE@XZ:PROC			; CHttpClient::~CHttpClient
EXTRN	?Util_Base64Encode@@YAXPAD0@Z:PROC		; Util_Base64Encode
EXTRN	_CreateToolhelp32Snapshot@8:PROC
EXTRN	_Module32First@8:PROC
EXTRN	_Module32Next@8:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	?hInstance@@3PAXA:DWORD				; hInstance
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	?dwScmOpcodeDebug@@3KA:DWORD			; dwScmOpcodeDebug
EXTRN	?bScmLocalDebug@@3HA:DWORD			; bScmLocalDebug
EXTRN	?pbyteCurrentPlayer@@3PAEA:DWORD		; pbyteCurrentPlayer
EXTRN	?gst@@3PAUGAME_SCRIPT_THREAD@@A:DWORD		; gst
EXTRN	?iGtaVersion@@3HA:DWORD				; iGtaVersion
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CD@CKPNGFBO@Thanks?5for?5reporting?5this?5proble@
CONST	SEGMENT
??_C@_0CD@CKPNGFBO@Thanks?5for?5reporting?5this?5proble@ DB 'Thanks for r'
	DB	'eporting this problem.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PDLFIFKL@www?4sa?9mp?4com?$AA@
CONST	SEGMENT
??_C@_0O@PDLFIFKL@www?4sa?9mp?4com?$AA@ DB 'www.sa-mp.com', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FABHHMPJ@team?4sa?9mp?4com?1report_02X_u1?4php@
CONST	SEGMENT
??_C@_0CL@FABHHMPJ@team?4sa?9mp?4com?1report_02X_u1?4php@ DB 'team.sa-mp.'
	DB	'com/report_02X_u1.php?addr=0x%X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LOKKJDIP@data?$DN?$AA@
CONST	SEGMENT
??_C@_05LOKKJDIP@data?$DN?$AA@ DB 'data=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GFNIKNJE@?$AN?6Game?5Version?3?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BF@GFNIKNJE@?$AN?6Game?5Version?3?5?$CFs?$AN?6?$AA@ DB 0dH, 0aH, 'G'
	DB	'ame Version: %s', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFANNNEC@UNKNOWN?$AA@
CONST	SEGMENT
??_C@_07NFANNNEC@UNKNOWN?$AA@ DB 'UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMCAAOMC@EU?51?40?$AA@
CONST	SEGMENT
??_C@_06EMCAAOMC@EU?51?40?$AA@ DB 'EU 1.0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PNKHHBBB@US?51?40?$AA@
CONST	SEGMENT
??_C@_06PNKHHBBB@US?51?40?$AA@ DB 'US 1.0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KOBPMFOO@?$AN?6SCM?5Op?3?50x?$CFX?0?5L?3?5?$CFd?0?5Dump?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BP@KOBPMFOO@?$AN?6SCM?5Op?3?50x?$CFX?0?5L?3?5?$CFd?0?5Dump?3?$AN?6?$AA@ DB 0dH
	DB	0aH, 'SCM Op: 0x%X, L: %d, Dump:', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LF@NMBFHCFA@Exception?5At?5Address?3?50x?$CF08X?$AN?6?$AN?6@
CONST	SEGMENT
??_C@_0LF@NMBFHCFA@Exception?5At?5Address?3?50x?$CF08X?$AN?6?$AN?6@ DB 'E'
	DB	'xception At Address: 0x%08X', 0dH, 0aH, 0dH, 0aH, 'Registers:'
	DB	0dH, 0aH, 'EAX: 0x%08X', 09H, 'EBX: 0x%08X', 09H, 'ECX: 0x%08X'
	DB	09H, 'EDX: 0x%08X', 0dH, 0aH, 'ESI: 0x%08X', 09H, 'EDI: 0x%08X'
	DB	09H, 'EBP: 0x%08X', 09H, 'ESP: 0x%08X', 0dH, 0aH, 'EFS: 0x%08X'
	DB	09H, 'EFLAGS: 0x%08X', 0dH, 0aH, 0dH, 0aH, 'Stack:', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EGMHBHCD@?$CFs?7B?3?50x?$CF08X?7S?3?50x?$CF08X?7?$CI?$CFs?$CJ?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BO@EGMHBHCD@?$CFs?7B?3?50x?$CF08X?7S?3?50x?$CF08X?7?$CI?$CFs?$CJ?$AN?6?$AA@ DB '%'
	DB	's', 09H, 'B: 0x%08X', 09H, 'S: 0x%08X', 09H, '(%s)', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NJDIPOCM@?9FailedFirst?9?$AA@
CONST	SEGMENT
??_C@_0O@NJDIPOCM@?9FailedFirst?9?$AA@ DB '-FailedFirst-', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BFAFHGHP@?9FailedCreate?9?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BB@BFAFHGHP@?9FailedCreate?9?$AN?6?$AA@ DB '-FailedCreate-', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LGOAKHMK@?$AN?6Loaded?5Modules?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BE@LGOAKHMK@?$AN?6Loaded?5Modules?3?$AN?6?$AA@ DB 0dH, 0aH, 'Loade'
	DB	'd Modules:', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@DMMCPIHA@?$CL?$CF04X?3?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?5?5?$CF02@
CONST	SEGMENT
??_C@_0FP@DMMCPIHA@?$CL?$CF04X?3?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?5?5?$CF02@ DB '+'
	DB	'%04X: %02X %02X %02X %02X   %02X %02X %02X %02X   %02X %02X %'
	DB	'02X %02X   %02X %02X %02X %02X', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GMPOFBHP@?$CL?$CF04X?3?50x?$CF08X?5?5?50x?$CF08X?5?5?50x?$CF08X?5@
CONST	SEGMENT
??_C@_0CL@GMPOFBHP@?$CL?$CF04X?3?50x?$CF08X?5?5?50x?$CF08X?5?5?50x?$CF08X?5@ DB '+'
	DB	'%04X: 0x%08X   0x%08X   0x%08X   0x%08X', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IOCAANK@P?$CFu?5?$CI?$CFu?0?$CFu?$CJ?5?$AA@
CONST	SEGMENT
??_C@_0N@IOCAANK@P?$CFu?5?$CI?$CFu?0?$CFu?$CJ?5?$AA@ DB 'P%u (%u,%u) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DJBJICJN@?$AN?6State?5Information?3?5L?3?5?$CFu?5?5N?3?5?$CF@
CONST	SEGMENT
??_C@_0CE@DJBJICJN@?$AN?6State?5Information?3?5L?3?5?$CFu?5?5N?3?5?$CF@ DB 0dH
	DB	0aH, 'State Information: L: %u  N: %u', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DoCrashReportingStuff@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoCrashReportingStuff@@YAXXZ$0
__ehfuncinfo$?DoCrashReportingStuff@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DoCrashReportingStuff@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\exceptions.cpp
;	COMDAT ?exc_handler@@YGJPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
_exc_inf$ = 8						; size = 4
?exc_handler@@YGJPAU_EXCEPTION_POINTERS@@@Z PROC	; exc_handler, COMDAT

; 266  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 267  : 	pContextRecord = exc_inf->ContextRecord;

	mov	eax, DWORD PTR _exc_inf$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A, ecx ; pContextRecord

; 268  : 	
; 269  : 	ShowWindow(pGame->GetMainWindowHwnd(),SW_MINIMIZE);

	mov	esi, esp
	push	6
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ ; CGame::GetMainWindowHwnd
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 270  : 	DialogBox((HINSTANCE)hInstance,MAKEINTRESOURCE(IDD_DIALOG1),pGame->GetMainWindowHwnd(),(DLGPROC)GuiDlgProcMain);

	mov	esi, esp
	push	0
	push	OFFSET ?GuiDlgProcMain@@YGHPAUHWND__@@IIJ@Z ; GuiDlgProcMain
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ ; CGame::GetMainWindowHwnd
	push	eax
	push	101					; 00000065H
	mov	eax, DWORD PTR ?hInstance@@3PAXA	; hInstance
	push	eax
	call	DWORD PTR __imp__DialogBoxParamA@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 271  : 
; 272  : //#ifdef _DEBUG
; 273  : 	return EXCEPTION_CONTINUE_SEARCH;

	xor	eax, eax

; 274  : //#else
; 275  : 	//return EXCEPTION_EXECUTE_HANDLER;
; 276  : //#endif
; 277  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?exc_handler@@YGJPAU_EXCEPTION_POINTERS@@@Z ENDP	; exc_handler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\exceptions.cpp
;	COMDAT ?GuiDlgProcMain@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv85 = -196						; size = 4
tv64 = -196						; size = 4
_hDlg$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?GuiDlgProcMain@@YGHPAUHWND__@@IIJ@Z PROC		; GuiDlgProcMain, COMDAT

; 219  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 220  : 	
; 221  : 	SetCursor(0);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__SetCursor@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : 	ShowCursor(TRUE);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__ShowCursor@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 223  : 
; 224  : 	switch(uMsg)

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	ja	SHORT $LN13@GuiDlgProc
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN5@GuiDlgProc
	cmp	DWORD PTR tv64[ebp], 2
	je	$LN6@GuiDlgProc
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN7@GuiDlgProc
	jmp	$LN9@GuiDlgProc
$LN13@GuiDlgProc:
	cmp	DWORD PTR tv64[ebp], 512		; 00000200H
	je	SHORT $LN8@GuiDlgProc
	jmp	$LN9@GuiDlgProc
$LN8@GuiDlgProc:

; 225  : 	{
; 226  : 		case WM_MOUSEMOVE:
; 227  : 			ShowCursor(TRUE);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__ShowCursor@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 228  : 			break;

	jmp	$LN9@GuiDlgProc
$LN7@GuiDlgProc:

; 229  : 
; 230  : 		case WM_INITDIALOG:		
; 231  : 
; 232  : 			DumpMain(FALSE);

	push	0
	call	?DumpMain@@YAXH@Z			; DumpMain
	add	esp, 4

; 233  : 
; 234  : 			SetDlgItemText(hDlg,IDC_EDIT1,szErrorString);

	mov	esi, esp
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	push	1000					; 000003e8H
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 235  : 			SetForegroundWindow(GetDlgItem(hDlg,IDD_DIALOG1));

	mov	esi, esp
	push	101					; 00000065H
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetForegroundWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 236  : 			SetFocus(GetDlgItem(hDlg,IDC_BUTTON1));

	mov	esi, esp
	push	1001					; 000003e9H
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetFocus@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 237  : 			break;

	jmp	$LN9@GuiDlgProc
$LN6@GuiDlgProc:

; 238  : 
; 239  : 		case WM_DESTROY:
; 240  : 			EndDialog(hDlg,TRUE);

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__EndDialog@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 241  : 			//ExitProcess(1);
; 242  : 			break;

	jmp	$LN9@GuiDlgProc
$LN5@GuiDlgProc:

; 243  : 
; 244  : 		case WM_COMMAND:
; 245  : 			switch(LOWORD(wParam))

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	DWORD PTR tv85[ebp], ecx
	cmp	DWORD PTR tv85[ebp], 1001		; 000003e9H
	je	SHORT $LN2@GuiDlgProc
	cmp	DWORD PTR tv85[ebp], 1002		; 000003eaH
	je	SHORT $LN1@GuiDlgProc
	jmp	SHORT $LN9@GuiDlgProc
$LN2@GuiDlgProc:

; 246  : 			{
; 247  : 			case IDC_BUTTON1:
; 248  : 				EndDialog(hDlg,TRUE);

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__EndDialog@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 249  : 				//ExitProcess(1);
; 250  : 				break;

	jmp	SHORT $LN9@GuiDlgProc
$LN1@GuiDlgProc:

; 251  : 			case IDC_BUTTON2:
; 252  : 				DoCrashReportingStuff();

	call	?DoCrashReportingStuff@@YAXXZ		; DoCrashReportingStuff

; 253  : 				EnableWindow(GetDlgItem(hDlg,IDC_BUTTON2),FALSE);

	mov	esi, esp
	push	0
	mov	edi, esp
	push	1002					; 000003eaH
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 254  : 				SetDlgItemText(hDlg,IDC_EDIT1,"Thanks for reporting this problem.");

	mov	esi, esp
	push	OFFSET ??_C@_0CD@CKPNGFBO@Thanks?5for?5reporting?5this?5proble@
	push	1000					; 000003e8H
	mov	eax, DWORD PTR _hDlg$[ebp]
	push	eax
	call	DWORD PTR __imp__SetDlgItemTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@GuiDlgProc:

; 255  : 				break;
; 256  : 			}
; 257  : 			break;
; 258  : 	}
; 259  : 
; 260  : 	return FALSE;

	xor	eax, eax

; 261  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?GuiDlgProcMain@@YGHPAUHWND__@@IIJ@Z ENDP		; GuiDlgProcMain
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\exceptions.cpp
;	COMDAT ?DoCrashReportingStuff@@YAXXZ
_TEXT	SEGMENT
_szBase64$ = -16732					; size = 16384
_szURL$ = -340						; size = 256
_pHttp$ = -76						; size = 54
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?DoCrashReportingStuff@@YAXXZ PROC			; DoCrashReportingStuff, COMDAT

; 199  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DoCrashReportingStuff@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, 16916				; 00004214H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-16928]
	mov	ecx, 4229				; 00001085H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 200  : 	CHttpClient pHttp;

	lea	ecx, DWORD PTR _pHttp$[ebp]
	call	??0CHttpClient@@QAE@XZ			; CHttpClient::CHttpClient
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 201  : 	char szURL[256];
; 202  : 	char szBase64[16384];
; 203  : 
; 204  : 	DumpMain(TRUE);

	push	1
	call	?DumpMain@@YAXH@Z			; DumpMain
	add	esp, 4

; 205  : 
; 206  : 	strcpy(szBase64,"data=");

	push	OFFSET ??_C@_05LOKKJDIP@data?$DN?$AA@
	lea	eax, DWORD PTR _szBase64$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 207  : 
; 208  : 	Util_Base64Encode(szErrorString,&szBase64[5]);

	mov	eax, 1
	imul	ecx, eax, 5
	lea	edx, DWORD PTR _szBase64$[ebp+ecx]
	push	edx
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	call	?Util_Base64Encode@@YAXPAD0@Z		; Util_Base64Encode
	add	esp, 8

; 209  : 	
; 210  : 	sprintf(szURL,"team.sa-mp.com/report_02X_u1.php?addr=0x%X",pContextRecord->Eip);

	mov	eax, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	push	OFFSET ??_C@_0CL@FABHHMPJ@team?4sa?9mp?4com?1report_02X_u1?4php@
	lea	edx, DWORD PTR _szURL$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 211  : 	pHttp.ProcessURL(HTTP_POST,szURL,szBase64,"www.sa-mp.com");

	push	OFFSET ??_C@_0O@PDLFIFKL@www?4sa?9mp?4com?$AA@
	lea	eax, DWORD PTR _szBase64$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szURL$[ebp]
	push	ecx
	push	2
	lea	ecx, DWORD PTR _pHttp$[ebp]
	call	?ProcessURL@CHttpClient@@QAEHHPAD00@Z	; CHttpClient::ProcessURL

; 212  : 
; 213  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pHttp$[ebp]
	call	??1CHttpClient@@QAE@XZ			; CHttpClient::~CHttpClient

; 214  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DoCrashRep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 16928				; 00004220H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@DoCrashRep:
	DD	3
	DD	$LN8@DoCrashRep
$LN8@DoCrashRep:
	DD	-76					; ffffffb4H
	DD	54					; 00000036H
	DD	$LN4@DoCrashRep
	DD	-340					; fffffeacH
	DD	256					; 00000100H
	DD	$LN5@DoCrashRep
	DD	-16732					; ffffbea4H
	DD	16384					; 00004000H
	DD	$LN6@DoCrashRep
$LN6@DoCrashRep:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	54					; 00000036H
	DB	52					; 00000034H
	DB	0
$LN5@DoCrashRep:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	85					; 00000055H
	DB	82					; 00000052H
	DB	76					; 0000004cH
	DB	0
$LN4@DoCrashRep:
	DB	112					; 00000070H
	DB	72					; 00000048H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoCrashReportingStuff@@YAXXZ$0:
	lea	ecx, DWORD PTR _pHttp$[ebp]
	jmp	??1CHttpClient@@QAE@XZ			; CHttpClient::~CHttpClient
__ehhandler$?DoCrashReportingStuff@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16932]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DoCrashReportingStuff@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoCrashReportingStuff@@YAXXZ ENDP			; DoCrashReportingStuff
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\exceptions.cpp
;	COMDAT ?DumpMain@@YAXH@Z
_TEXT	SEGMENT
tv136 = -16632						; size = 4
tv137 = -16628						; size = 4
_szGameVersion$ = -16428				; size = 4
_x$ = -16416						; size = 4
_pdwStack$ = -16404					; size = 4
_s$ = -16392						; size = 16384
__$ArrayPad$ = -4					; size = 4
_bIncModules$ = 8					; size = 4
?DumpMain@@YAXH@Z PROC					; DumpMain, COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 16632				; 000040f8H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-16632]
	mov	ecx, 4158				; 0000103eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 146  : 	CHAR s[16384];
; 147  : 	DWORD *pdwStack;
; 148  : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0

; 149  : 
; 150  : 	sprintf(szErrorString,
; 151  : 		"Exception At Address: 0x%08X\r\n\r\n"
; 152  : 		"Registers:\r\n"
; 153  : 		"EAX: 0x%08X\tEBX: 0x%08X\tECX: 0x%08X\tEDX: 0x%08X\r\n"
; 154  : 		"ESI: 0x%08X\tEDI: 0x%08X\tEBP: 0x%08X\tESP: 0x%08X\r\n"
; 155  : 		"EFS: 0x%08X\tEFLAGS: 0x%08X\r\n\r\nStack:\r\n",
; 156  : 		pContextRecord->Eip,
; 157  : 		pContextRecord->Eax,
; 158  : 		pContextRecord->Ebx,
; 159  : 		pContextRecord->Ecx,
; 160  : 		pContextRecord->Edx,
; 161  : 		pContextRecord->Esi,
; 162  : 		pContextRecord->Edi,
; 163  : 		pContextRecord->Ebp,
; 164  : 		pContextRecord->Esp,
; 165  : 		hInstance,
; 166  : 		pContextRecord->EFlags);

	mov	eax, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	ecx, DWORD PTR [eax+192]
	push	ecx
	mov	edx, DWORD PTR ?hInstance@@3PAXA	; hInstance
	push	edx
	mov	eax, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	ecx, DWORD PTR [eax+196]
	push	ecx
	mov	edx, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	eax, DWORD PTR [edx+180]
	push	eax
	mov	ecx, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	edx, DWORD PTR [ecx+156]
	push	edx
	mov	eax, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	mov	edx, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	eax, DWORD PTR [edx+168]
	push	eax
	mov	ecx, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	edx, DWORD PTR [ecx+172]
	push	edx
	mov	eax, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	eax, DWORD PTR [edx+176]
	push	eax
	mov	ecx, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	edx, DWORD PTR [ecx+184]
	push	edx
	push	OFFSET ??_C@_0LF@NMBFHCFA@Exception?5At?5Address?3?50x?$CF08X?$AN?6?$AN?6@
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	call	_sprintf
	add	esp, 52					; 00000034H

; 167  : 
; 168  : 	// grab the last 40 stack values
; 169  : 	pdwStack = (DWORD *)pContextRecord->Esp;

	mov	eax, DWORD PTR ?pContextRecord@@3PAU_CONTEXT@@A ; pContextRecord
	mov	ecx, DWORD PTR [eax+196]
	mov	DWORD PTR _pdwStack$[ebp], ecx

; 170  : 	DumpMemory(reinterpret_cast<BYTE*>(pdwStack), 320, szErrorString, TRUE);

	push	1
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	push	320					; 00000140H
	mov	eax, DWORD PTR _pdwStack$[ebp]
	push	eax
	call	?DumpMemory@@YAXPAEKPADH@Z		; DumpMemory
	add	esp, 16					; 00000010H

; 171  : 
; 172  : 	sprintf(s,"\r\nSCM Op: 0x%X, L: %d, Dump:\r\n", dwScmOpcodeDebug, bScmLocalDebug);

	mov	eax, DWORD PTR ?bScmLocalDebug@@3HA	; bScmLocalDebug
	push	eax
	mov	ecx, DWORD PTR ?dwScmOpcodeDebug@@3KA	; dwScmOpcodeDebug
	push	ecx
	push	OFFSET ??_C@_0BP@KOBPMFOO@?$AN?6SCM?5Op?3?50x?$CFX?0?5L?3?5?$CFd?0?5Dump?3?$AN?6?$AA@
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 173  : 	strcat(szErrorString,s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	call	_strcat
	add	esp, 8

; 174  : 	DumpMemory(reinterpret_cast<BYTE*>(gst), sizeof(GAME_SCRIPT_THREAD), szErrorString);

	push	0
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	push	224					; 000000e0H
	mov	eax, DWORD PTR ?gst@@3PAUGAME_SCRIPT_THREAD@@A ; gst
	push	eax
	call	?DumpMemory@@YAXPAEKPADH@Z		; DumpMemory
	add	esp, 16					; 00000010H

; 175  : 
; 176  : 	const char *szGameVersion = (iGtaVersion == GTASA_VERSION_USA10) ? "US 1.0" :
; 177  : 								(iGtaVersion == GTASA_VERSION_EU10) ? "EU 1.0" :
; 178  : 								"UNKNOWN";

	cmp	DWORD PTR ?iGtaVersion@@3HA, 1		; iGtaVersion
	jne	SHORT $LN7@DumpMain
	mov	DWORD PTR tv137[ebp], OFFSET ??_C@_06PNKHHBBB@US?51?40?$AA@
	jmp	SHORT $LN8@DumpMain
$LN7@DumpMain:
	cmp	DWORD PTR ?iGtaVersion@@3HA, 2		; iGtaVersion
	jne	SHORT $LN5@DumpMain
	mov	DWORD PTR tv136[ebp], OFFSET ??_C@_06EMCAAOMC@EU?51?40?$AA@
	jmp	SHORT $LN6@DumpMain
$LN5@DumpMain:
	mov	DWORD PTR tv136[ebp], OFFSET ??_C@_07NFANNNEC@UNKNOWN?$AA@
$LN6@DumpMain:
	mov	eax, DWORD PTR tv136[ebp]
	mov	DWORD PTR tv137[ebp], eax
$LN8@DumpMain:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _szGameVersion$[ebp], ecx

; 179  : 	sprintf(s, "\r\nGame Version: %s\r\n", szGameVersion);

	mov	eax, DWORD PTR _szGameVersion$[ebp]
	push	eax
	push	OFFSET ??_C@_0BF@GFNIKNJE@?$AN?6Game?5Version?3?5?$CFs?$AN?6?$AA@
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 180  : 	strcat(szErrorString,s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	call	_strcat
	add	esp, 8

; 181  : 
; 182  : 	if(pNetGame) 

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN2@DumpMain

; 183  : 	{
; 184  : 		DumpNetworkStateInformation(s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?DumpNetworkStateInformation@@YAXPAD@Z	; DumpNetworkStateInformation
	add	esp, 4

; 185  : 		strcat(szErrorString,s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	call	_strcat
	add	esp, 8
$LN2@DumpMain:

; 186  : 	}
; 187  : 
; 188  : 	if (bIncModules)

	cmp	DWORD PTR _bIncModules$[ebp], 0
	je	SHORT $LN3@DumpMain

; 189  : 	{
; 190  : 		DumpLoadedModules(s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?DumpLoadedModules@@YAXPAD@Z		; DumpLoadedModules
	add	esp, 4

; 191  : 		strcat(szErrorString,s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET ?szErrorString@@3PADA		; szErrorString
	call	_strcat
	add	esp, 8
$LN3@DumpMain:

; 192  : 	}
; 193  : 
; 194  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@DumpMain
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 16632				; 000040f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@DumpMain:
	DD	1
	DD	$LN10@DumpMain
$LN10@DumpMain:
	DD	-16392					; ffffbff8H
	DD	16384					; 00004000H
	DD	$LN9@DumpMain
$LN9@DumpMain:
	DB	115					; 00000073H
	DB	0
?DumpMain@@YAXH@Z ENDP					; DumpMain
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\exceptions.cpp
;	COMDAT ?DumpLoadedModules@@YAXPAD@Z
_TEXT	SEGMENT
_s$ = -16960						; size = 16384
_me32$ = -568						; size = 548
_hModuleSnap$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_sz$ = 8						; size = 4
?DumpLoadedModules@@YAXPAD@Z PROC			; DumpLoadedModules, COMDAT

; 102  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 17156				; 00004304H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-17156]
	mov	ecx, 4289				; 000010c1H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 103  :     HANDLE        hModuleSnap = NULL; 

	mov	DWORD PTR _hModuleSnap$[ebp], 0

; 104  : 	MODULEENTRY32 me32;
; 105  : 	char s[16384];
; 106  : 	
; 107  : 	hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, GetCurrentProcessId()); 

	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentProcessId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	8
	call	_CreateToolhelp32Snapshot@8
	mov	DWORD PTR _hModuleSnap$[ebp], eax

; 108  : 	
; 109  : 	strcpy(sz, "\r\nLoaded Modules:\r\n");

	push	OFFSET ??_C@_0BE@LGOAKHMK@?$AN?6Loaded?5Modules?3?$AN?6?$AA@
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	call	_strcpy
	add	esp, 8

; 110  : 
; 111  : 	if(hModuleSnap == INVALID_HANDLE_VALUE) 

	cmp	DWORD PTR _hModuleSnap$[ebp], -1
	jne	SHORT $LN6@DumpLoaded

; 112  : 	{
; 113  : 		strcat(sz, "-FailedCreate-\r\n");

	push	OFFSET ??_C@_0BB@BFAFHGHP@?9FailedCreate?9?$AN?6?$AA@
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 114  : 		return;

	jmp	$LN7@DumpLoaded
$LN6@DumpLoaded:

; 115  : 	}
; 116  : 
; 117  : 	me32.dwSize = sizeof( MODULEENTRY32 );

	mov	DWORD PTR _me32$[ebp], 548		; 00000224H

; 118  : 
; 119  : 	if( !Module32First( hModuleSnap, &me32 ) )

	lea	eax, DWORD PTR _me32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hModuleSnap$[ebp]
	push	ecx
	call	_Module32First@8
	test	eax, eax
	jne	SHORT $LN4@DumpLoaded

; 120  : 	{
; 121  : 		strcat(sz, "-FailedFirst-" );  // Show cause of failure

	push	OFFSET ??_C@_0O@NJDIPOCM@?9FailedFirst?9?$AA@
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	call	_strcat
	add	esp, 8

; 122  : 		CloseHandle( hModuleSnap );     // Must clean up the snapshot object!

	mov	esi, esp
	mov	eax, DWORD PTR _hModuleSnap$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 123  : 		return;

	jmp	$LN7@DumpLoaded
$LN4@DumpLoaded:

; 124  : 	}
; 125  : 
; 126  : 	do
; 127  : 	{
; 128  : 		if (me32.szModule[0] != 'f' && me32.szModule[1] != 'l' && me32.szModule[2] != 'a')

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _me32$[ebp+ecx+32]
	cmp	edx, 102				; 00000066H
	je	SHORT $LN3@DumpLoaded
	mov	eax, 1
	shl	eax, 0
	movsx	ecx, BYTE PTR _me32$[ebp+eax+32]
	cmp	ecx, 108				; 0000006cH
	je	SHORT $LN3@DumpLoaded
	mov	eax, 1
	shl	eax, 1
	movsx	ecx, BYTE PTR _me32$[ebp+eax+32]
	cmp	ecx, 97					; 00000061H
	je	SHORT $LN3@DumpLoaded

; 129  : 		{
; 130  : 			sprintf(s, "%s\tB: 0x%08X\tS: 0x%08X\t(%s)\r\n",
; 131  : 				me32.szModule, me32.modBaseAddr, me32.modBaseSize, me32.szExePath);

	lea	eax, DWORD PTR _me32$[ebp+288]
	push	eax
	mov	ecx, DWORD PTR _me32$[ebp+24]
	push	ecx
	mov	edx, DWORD PTR _me32$[ebp+20]
	push	edx
	lea	eax, DWORD PTR _me32$[ebp+32]
	push	eax
	push	OFFSET ??_C@_0BO@EGMHBHCD@?$CFs?7B?3?50x?$CF08X?7S?3?50x?$CF08X?7?$CI?$CFs?$CJ?$AN?6?$AA@
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 24					; 00000018H

; 132  : 			strcat(sz, s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$LN3@DumpLoaded:

; 133  : 		}
; 134  : 	} while( Module32Next( hModuleSnap, &me32 ) );

	lea	eax, DWORD PTR _me32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hModuleSnap$[ebp]
	push	ecx
	call	_Module32Next@8
	test	eax, eax
	jne	$LN4@DumpLoaded

; 135  : 
; 136  : 	CloseHandle( hModuleSnap );

	mov	esi, esp
	mov	eax, DWORD PTR _hModuleSnap$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@DumpLoaded:

; 137  : 	
; 138  : 	return;
; 139  : 
; 140  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DumpLoaded
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 17156				; 00004304H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@DumpLoaded:
	DD	2
	DD	$LN11@DumpLoaded
$LN11@DumpLoaded:
	DD	-568					; fffffdc8H
	DD	548					; 00000224H
	DD	$LN9@DumpLoaded
	DD	-16960					; ffffbdc0H
	DD	16384					; 00004000H
	DD	$LN10@DumpLoaded
$LN10@DumpLoaded:
	DB	115					; 00000073H
	DB	0
$LN9@DumpLoaded:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	51					; 00000033H
	DB	50					; 00000032H
	DB	0
?DumpLoadedModules@@YAXPAD@Z ENDP			; DumpLoadedModules
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\exceptions.cpp
;	COMDAT ?DumpMemory@@YAXPAEKPADH@Z
_TEXT	SEGMENT
_i$1 = -16416						; size = 4
_i$2 = -16404						; size = 4
_s$ = -16392						; size = 16384
__$ArrayPad$ = -4					; size = 4
_pData$ = 8						; size = 4
_dwCount$ = 12						; size = 4
_sz$ = 16						; size = 4
_bAsDWords$ = 20					; size = 4
?DumpMemory@@YAXPAEKPADH@Z PROC				; DumpMemory, COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp
	mov	eax, 16612				; 000040e4H
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-16612]
	mov	ecx, 4153				; 00001039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 70   : 	char s[16384];
; 71   : 
; 72   : 	if (bAsDWords)

	cmp	DWORD PTR _bAsDWords$[ebp], 0
	je	$LN8@DumpMemory

; 73   : 	{
; 74   : 		for(int i=0; i<(int)dwCount; i += 16)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@DumpMemory
$LN6@DumpMemory:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _i$2[ebp], eax
$LN7@DumpMemory:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _dwCount$[ebp]
	jge	SHORT $LN5@DumpMemory

; 75   : 		{
; 76   : 			sprintf(s, "+%04X: 0x%08X   0x%08X   0x%08X   0x%08X\r\n", i,
; 77   : 					*(DWORD*)(pData+i+0), *(DWORD*)(pData+i+4),
; 78   : 					*(DWORD*)(pData+i+8), *(DWORD*)(pData+i+12)
; 79   : 				);

	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	push	OFFSET ??_C@_0CL@GMPOFBHP@?$CL?$CF04X?3?50x?$CF08X?5?5?50x?$CF08X?5?5?50x?$CF08X?5@
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_sprintf
	add	esp, 28					; 0000001cH

; 80   : 			strcat(sz,s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 81   : 		}

	jmp	SHORT $LN6@DumpMemory
$LN5@DumpMemory:

; 82   : 	}
; 83   : 	else

	jmp	$LN9@DumpMemory
$LN8@DumpMemory:

; 84   : 	{
; 85   : 		for(int i=0; i<(int)dwCount; i += 16)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@DumpMemory
$LN2@DumpMemory:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _i$1[ebp], eax
$LN3@DumpMemory:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _dwCount$[ebp]
	jge	$LN9@DumpMemory

; 86   : 		{
; 87   : 			sprintf(s, "+%04X: %02X %02X %02X %02X   %02X %02X %02X %02X   "
; 88   : 					"%02X %02X %02X %02X   %02X %02X %02X %02X\r\n", i,
; 89   : 					pData[i+0], pData[i+1], pData[i+2], pData[i+3],
; 90   : 					pData[i+4], pData[i+5], pData[i+6], pData[i+7],
; 91   : 					pData[i+8], pData[i+9], pData[i+10], pData[i+11],
; 92   : 					pData[i+12], pData[i+13], pData[i+14], pData[i+15]
; 93   : 				);

	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax+15]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx+14]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx+13]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx+11]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx+10]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx+5]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx+2]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	push	edx
	push	OFFSET ??_C@_0FP@DMMCPIHA@?$CL?$CF04X?3?5?$CF02X?5?$CF02X?5?$CF02X?5?$CF02X?5?5?5?$CF02@
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_sprintf
	add	esp, 76					; 0000004cH

; 94   : 			strcat(sz,s);

	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 95   : 		}

	jmp	$LN2@DumpMemory
$LN9@DumpMemory:

; 96   : 	}
; 97   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@DumpMemory
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 16612				; 000040e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@DumpMemory:
	DD	1
	DD	$LN12@DumpMemory
$LN12@DumpMemory:
	DD	-16392					; ffffbff8H
	DD	16384					; 00004000H
	DD	$LN11@DumpMemory
$LN11@DumpMemory:
	DB	115					; 00000073H
	DB	0
?DumpMemory@@YAXPAEKPADH@Z ENDP				; DumpMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\exceptions.cpp
;	COMDAT ?DumpNetworkStateInformation@@YAXPAD@Z
_TEXT	SEGMENT
_x$ = -16440						; size = 4
_tmp$ = -16428						; size = 16384
_bytePlayerId$ = -33					; size = 1
_pThisPlayer$ = -24					; size = 4
_pPlayerPool$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_sz$ = 8						; size = 4
?DumpNetworkStateInformation@@YAXPAD@Z PROC		; DumpNetworkStateInformation, COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	mov	eax, 16636				; 000040fcH
	call	__chkstk
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-16636]
	mov	ecx, 4159				; 0000103fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 34   : 	CPlayerPool   *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 35   : 	CRemotePlayer *pThisPlayer;
; 36   : 	BYTE bytePlayerId=0;

	mov	BYTE PTR _bytePlayerId$[ebp], 0

; 37   : 
; 38   : 	char tmp[16384];
; 39   : 
; 40   : 	sz[0] = '\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _sz$[ebp]
	mov	BYTE PTR [edx+ecx], 0

; 41   : 
; 42   : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN7@DumpNetwor:

; 43   : 	while(x!=MAX_PLAYERS) {

	cmp	DWORD PTR _x$[ebp], 204			; 000000ccH
	je	SHORT $LN6@DumpNetwor

; 44   : 		if(pPlayerPool->GetSlotState(x)) {

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	SHORT $LN5@DumpNetwor

; 45   : 			pThisPlayer = pPlayerPool->GetAt(x);

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pThisPlayer$[ebp], eax

; 46   : 			bytePlayerId = pThisPlayer->GetID();

	mov	ecx, DWORD PTR _pThisPlayer$[ebp]
	call	?GetID@CRemotePlayer@@QAEEXZ		; CRemotePlayer::GetID
	mov	BYTE PTR _bytePlayerId$[ebp], al
$LN5@DumpNetwor:

; 47   : 		}
; 48   : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 49   : 	}

	jmp	SHORT $LN7@DumpNetwor
$LN6@DumpNetwor:

; 50   : 
; 51   : 	sprintf(sz,"\r\nState Information: L: %u  N: %u\r\n",*pbyteCurrentPlayer,bytePlayerId);

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	movzx	edx, BYTE PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0CE@DJBJICJN@?$AN?6State?5Information?3?5L?3?5?$CFu?5?5N?3?5?$CF@
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 52   : 
; 53   : 	x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN4@DumpNetwor:

; 54   : 	while(x!=MAX_PLAYERS) {

	cmp	DWORD PTR _x$[ebp], 204			; 000000ccH
	je	$LN8@DumpNetwor

; 55   : 		if(pPlayerPool->GetSlotState(x)) {

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	$LN2@DumpNetwor

; 56   : 			pThisPlayer = pPlayerPool->GetAt(x);

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pThisPlayer$[ebp], eax

; 57   : 			sprintf(tmp,"P%u (%u,%u) ",x,pThisPlayer->GetState(),pThisPlayer->m_VehicleID);

	mov	eax, DWORD PTR _pThisPlayer$[ebp]
	movzx	ecx, WORD PTR [eax+316]
	push	ecx
	mov	ecx, DWORD PTR _pThisPlayer$[ebp]
	call	?GetState@CRemotePlayer@@QAEEXZ		; CRemotePlayer::GetState
	movzx	edx, al
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@IOCAANK@P?$CFu?5?$CI?$CFu?0?$CFu?$CJ?5?$AA@
	lea	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 58   : 			strcat(sz,tmp);

	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 59   : 			if (x > 0 && ((x+1) % 4) == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jle	SHORT $LN2@DumpNetwor
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN13@DumpNetwor
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN13@DumpNetwor:
	test	eax, eax
	jne	SHORT $LN2@DumpNetwor

; 60   : 				strcat(sz, "\r\n");

	push	OFFSET ??_C@_02PCIJFNDE@?$AN?6?$AA@
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN2@DumpNetwor:

; 61   : 		}
; 62   : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 63   : 	}

	jmp	$LN4@DumpNetwor
$LN8@DumpNetwor:

; 64   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DumpNetwor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 16636				; 000040fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@DumpNetwor:
	DD	1
	DD	$LN11@DumpNetwor
$LN11@DumpNetwor:
	DD	-16428					; ffffbfd4H
	DD	16384					; 00004000H
	DD	$LN10@DumpNetwor
$LN10@DumpNetwor:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?DumpNetworkStateInformation@@YAXPAD@Z ENDP		; DumpNetworkStateInformation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetSlotState@CPlayerPool@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetSlotState@CPlayerPool@@QAEHE@Z PROC			; CPlayerPool::GetSlotState, COMDAT
; _this$ = ecx

; 58   : 	BOOL GetSlotState(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(bytePlayerID > MAX_PLAYERS) { return FALSE; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 60   : 		return m_bPlayerSlotState[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+13]
$LN2@GetSlotSta:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CPlayerPool@@QAEHE@Z ENDP			; CPlayerPool::GetSlotState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerPool::GetAt, COMDAT
; _this$ = ecx

; 52   : 	CRemotePlayer* GetAt(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if(bytePlayerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 54   : 		return m_pPlayers[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+829]
$LN2@GetAt:

; 55   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerPool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetID@CRemotePlayer@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetID@CRemotePlayer@@QAEEXZ PROC			; CRemotePlayer::GetID, COMDAT
; _this$ = ecx

; 101  : 	BYTE GetID() { return m_bytePlayerID; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@CRemotePlayer@@QAEEXZ ENDP			; CRemotePlayer::GetID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetState@CRemotePlayer@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetState@CRemotePlayer@@QAEEXZ PROC			; CRemotePlayer::GetState, COMDAT
; _this$ = ecx

; 83   : 	BYTE GetState() { return m_byteState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+315]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@CRemotePlayer@@QAEEXZ ENDP			; CRemotePlayer::GetState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ PROC		; CGame::GetMainWindowHwnd, COMDAT
; _this$ = ecx

; 128  : 	HWND	GetMainWindowHwnd() { return *(HWND *)ADDR_HWND; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ds:13204508
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ ENDP		; CGame::GetMainWindowHwnd
_TEXT	ENDS
END
