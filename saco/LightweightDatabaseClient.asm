; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\LightweightDatabaseClient.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0PluginInterface@@QAE@XZ			; PluginInterface::PluginInterface
PUBLIC	??0LightweightDatabaseClient@@QAE@XZ		; LightweightDatabaseClient::LightweightDatabaseClient
PUBLIC	??1LightweightDatabaseClient@@QAE@XZ		; LightweightDatabaseClient::~LightweightDatabaseClient
PUBLIC	?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z ; LightweightDatabaseClient::QueryTable
PUBLIC	?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z ; LightweightDatabaseClient::UpdateRow
PUBLIC	?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z ; LightweightDatabaseClient::RemoveRow
PUBLIC	?OnAttach@LightweightDatabaseClient@@UAEXPAVRakPeerInterface@@@Z ; LightweightDatabaseClient::OnAttach
PUBLIC	?OnReceive@LightweightDatabaseClient@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z ; LightweightDatabaseClient::OnReceive
PUBLIC	??$Write@_N@BitStream@RakNet@@QAEX_N@Z		; RakNet::BitStream::Write<bool>
PUBLIC	??$Write@I@BitStream@RakNet@@QAEXI@Z		; RakNet::BitStream::Write<unsigned int>
PUBLIC	??$Write@E@BitStream@RakNet@@QAEXE@Z		; RakNet::BitStream::Write<unsigned char>
PUBLIC	??$Write@PBD@BitStream@RakNet@@QAEXPBD@Z	; RakNet::BitStream::Write<char const *>
PUBLIC	??_7PluginInterface@@6B@			; PluginInterface::`vftable'
PUBLIC	??_7LightweightDatabaseClient@@6B@		; LightweightDatabaseClient::`vftable'
PUBLIC	??_R4PluginInterface@@6B@			; PluginInterface::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPluginInterface@@@8			; PluginInterface `RTTI Type Descriptor'
PUBLIC	??_R3PluginInterface@@8				; PluginInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PluginInterface@@8				; PluginInterface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PluginInterface@@8		; PluginInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4LightweightDatabaseClient@@6B@		; LightweightDatabaseClient::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVLightweightDatabaseClient@@@8		; LightweightDatabaseClient `RTTI Type Descriptor'
PUBLIC	??_R3LightweightDatabaseClient@@8		; LightweightDatabaseClient::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2LightweightDatabaseClient@@8		; LightweightDatabaseClient::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@LightweightDatabaseClient@@8	; LightweightDatabaseClient::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	?OnAttach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::OnAttach
EXTRN	?OnDetach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::OnDetach
EXTRN	?OnInitialize@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::OnInitialize
EXTRN	?Update@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::Update
EXTRN	?OnReceive@PluginInterface@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z:PROC ; PluginInterface::OnReceive
EXTRN	?OnDisconnect@PluginInterface@@UAEXPAVRakPeerInterface@@@Z:PROC ; PluginInterface::OnDisconnect
EXTRN	?OnCloseConnection@PluginInterface@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z:PROC ; PluginInterface::OnCloseConnection
EXTRN	?OnDirectSocketSend@PluginInterface@@UAEXPBDIUPlayerID@@@Z:PROC ; PluginInterface::OnDirectSocketSend
EXTRN	?OnDirectSocketReceive@PluginInterface@@UAEXPBDIUPlayerID@@@Z:PROC ; PluginInterface::OnDirectSocketReceive
EXTRN	?OnInternalPacket@PluginInterface@@UAEXPAUInternalPacket@@IUPlayerID@@I_N@Z:PROC ; PluginInterface::OnInternalPacket
EXTRN	?Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z:PROC ; DatabaseFilter::Serialize
EXTRN	?Serialize@DatabaseCellUpdate@@QAEXPAVBitStream@RakNet@@@Z:PROC ; DatabaseCellUpdate::Serialize
EXTRN	?Instance@StringCompressor@@SAPAV1@XZ:PROC	; StringCompressor::Instance
EXTRN	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z:PROC ; StringCompressor::EncodeString
EXTRN	??0BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::BitStream
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z:PROC	; RakNet::BitStream::WriteBits
EXTRN	?Write0@BitStream@RakNet@@QAEXXZ:PROC		; RakNet::BitStream::Write0
EXTRN	?Write1@BitStream@RakNet@@QAEXXZ:PROC		; RakNet::BitStream::Write1
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@LightweightDatabaseClient@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@LightweightDatabaseClient@@8 DD FLAT:??_R0?AVLightweightDatabaseClient@@@8 ; LightweightDatabaseClient::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3LightweightDatabaseClient@@8
rdata$r	ENDS
;	COMDAT ??_R2LightweightDatabaseClient@@8
rdata$r	SEGMENT
??_R2LightweightDatabaseClient@@8 DD FLAT:??_R1A@?0A@EA@LightweightDatabaseClient@@8 ; LightweightDatabaseClient::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PluginInterface@@8
rdata$r	ENDS
;	COMDAT ??_R3LightweightDatabaseClient@@8
rdata$r	SEGMENT
??_R3LightweightDatabaseClient@@8 DD 00H		; LightweightDatabaseClient::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2LightweightDatabaseClient@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVLightweightDatabaseClient@@@8
data$r	SEGMENT
??_R0?AVLightweightDatabaseClient@@@8 DD FLAT:??_7type_info@@6B@ ; LightweightDatabaseClient `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVLightweightDatabaseClient@@', 00H
data$r	ENDS
;	COMDAT ??_R4LightweightDatabaseClient@@6B@
rdata$r	SEGMENT
??_R4LightweightDatabaseClient@@6B@ DD 00H		; LightweightDatabaseClient::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVLightweightDatabaseClient@@@8
	DD	FLAT:??_R3LightweightDatabaseClient@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PluginInterface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PluginInterface@@8 DD FLAT:??_R0?AVPluginInterface@@@8 ; PluginInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PluginInterface@@8
rdata$r	ENDS
;	COMDAT ??_R2PluginInterface@@8
rdata$r	SEGMENT
??_R2PluginInterface@@8 DD FLAT:??_R1A@?0A@EA@PluginInterface@@8 ; PluginInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PluginInterface@@8
rdata$r	SEGMENT
??_R3PluginInterface@@8 DD 00H				; PluginInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PluginInterface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPluginInterface@@@8
data$r	SEGMENT
??_R0?AVPluginInterface@@@8 DD FLAT:??_7type_info@@6B@	; PluginInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPluginInterface@@', 00H
data$r	ENDS
;	COMDAT ??_R4PluginInterface@@6B@
rdata$r	SEGMENT
??_R4PluginInterface@@6B@ DD 00H			; PluginInterface::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPluginInterface@@@8
	DD	FLAT:??_R3PluginInterface@@8
rdata$r	ENDS
;	COMDAT ??_7LightweightDatabaseClient@@6B@
CONST	SEGMENT
??_7LightweightDatabaseClient@@6B@ DD FLAT:??_R4LightweightDatabaseClient@@6B@ ; LightweightDatabaseClient::`vftable'
	DD	FLAT:?OnAttach@LightweightDatabaseClient@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnDetach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnInitialize@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?Update@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnReceive@LightweightDatabaseClient@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z
	DD	FLAT:?OnDisconnect@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnCloseConnection@PluginInterface@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z
	DD	FLAT:?OnDirectSocketSend@PluginInterface@@UAEXPBDIUPlayerID@@@Z
	DD	FLAT:?OnDirectSocketReceive@PluginInterface@@UAEXPBDIUPlayerID@@@Z
	DD	FLAT:?OnInternalPacket@PluginInterface@@UAEXPAUInternalPacket@@IUPlayerID@@I_N@Z
CONST	ENDS
;	COMDAT ??_7PluginInterface@@6B@
CONST	SEGMENT
??_7PluginInterface@@6B@ DD FLAT:??_R4PluginInterface@@6B@ ; PluginInterface::`vftable'
	DD	FLAT:?OnAttach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnDetach@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnInitialize@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?Update@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnReceive@PluginInterface@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z
	DD	FLAT:?OnDisconnect@PluginInterface@@UAEXPAVRakPeerInterface@@@Z
	DD	FLAT:?OnCloseConnection@PluginInterface@@UAEXPAVRakPeerInterface@@UPlayerID@@@Z
	DD	FLAT:?OnDirectSocketSend@PluginInterface@@UAEXPBDIUPlayerID@@@Z
	DD	FLAT:?OnDirectSocketReceive@PluginInterface@@UAEXPBDIUPlayerID@@@Z
	DD	FLAT:?OnInternalPacket@PluginInterface@@UAEXPAUInternalPacket@@IUPlayerID@@I_N@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z$0
__ehfuncinfo$?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z$0
__ehfuncinfo$?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z$0
__ehfuncinfo$?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@PBD@BitStream@RakNet@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@PBD@BitStream@RakNet@@QAEXPBD@Z PROC		; RakNet::BitStream::Write<char const *>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@PBD@BitStream@RakNet@@QAEXPBD@Z ENDP		; RakNet::BitStream::Write<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@E@BitStream@RakNet@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 1
??$Write@E@BitStream@RakNet@@QAEXE@Z PROC		; RakNet::BitStream::Write<unsigned char>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@E@BitStream@RakNet@@QAEXE@Z ENDP		; RakNet::BitStream::Write<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@I@BitStream@RakNet@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@I@BitStream@RakNet@@QAEXI@Z PROC		; RakNet::BitStream::Write<unsigned int>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@I@BitStream@RakNet@@QAEXI@Z ENDP		; RakNet::BitStream::Write<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@_N@BitStream@RakNet@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 1
??$Write@_N@BitStream@RakNet@@QAEX_N@Z PROC		; RakNet::BitStream::Write<bool>, COMDAT
; _this$ = ecx

; 754  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 755  : 		if ( var )

	movzx	eax, BYTE PTR _var$[ebp]
	test	eax, eax
	je	SHORT $LN2@Write

; 756  : 			Write1();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write1@BitStream@RakNet@@QAEXXZ	; RakNet::BitStream::Write1

; 757  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 758  : 			Write0();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Write0@BitStream@RakNet@@QAEXXZ	; RakNet::BitStream::Write0
$LN3@Write:

; 759  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@_N@BitStream@RakNet@@QAEX_N@Z ENDP		; RakNet::BitStream::Write<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabaseclient.cpp
;	COMDAT ?OnReceive@LightweightDatabaseClient@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_peer$ = 8						; size = 4
_packet$ = 12						; size = 4
?OnReceive@LightweightDatabaseClient@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z PROC ; LightweightDatabaseClient::OnReceive, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 	// All these messages are just returned to the user.
; 115  : //	switch (packet->data[0]) 
; 116  : //	{
; 117  : //	case ID_DATABASE_QUERY_REPLY:
; 118  : //	case ID_DATABASE_UNKNOWN_TABLE:
; 119  : //	case ID_DATABASE_INCORRECT_PASSWORD:
; 120  : //	}
; 121  : 
; 122  : 	return RR_CONTINUE_PROCESSING;

	mov	eax, 1

; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?OnReceive@LightweightDatabaseClient@@UAE?AW4PluginReceiveResult@@PAVRakPeerInterface@@PAUPacket@@@Z ENDP ; LightweightDatabaseClient::OnReceive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabaseclient.cpp
;	COMDAT ?OnAttach@LightweightDatabaseClient@@UAEXPAVRakPeerInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_peer$ = 8						; size = 4
?OnAttach@LightweightDatabaseClient@@UAEXPAVRakPeerInterface@@@Z PROC ; LightweightDatabaseClient::OnAttach, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	rakPeer=peer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _peer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?OnAttach@LightweightDatabaseClient@@UAEXPAVRakPeerInterface@@@Z ENDP ; LightweightDatabaseClient::OnAttach
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabaseclient.cpp
;	COMDAT ?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z
_TEXT	SEGMENT
_out$ = -308						; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_tableName$ = 8						; size = 4
_removePassword$ = 12					; size = 4
_rowId$ = 16						; size = 4
_playerId$ = 20						; size = 6
_broadcast$ = 28					; size = 1
?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z PROC ; LightweightDatabaseClient::RemoveRow, COMDAT
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 	if (tableName==0 || tableName[0]==0)

	cmp	DWORD PTR _tableName$[ebp], 0
	je	SHORT $LN4@RemoveRow
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tableName$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN5@RemoveRow
$LN4@RemoveRow:

; 58   : 		return;

	jmp	$LN6@RemoveRow
$LN5@RemoveRow:

; 59   : 	if (rakPeer==0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@RemoveRow

; 60   : 		return;

	jmp	$LN6@RemoveRow
$LN3@RemoveRow:

; 61   : 
; 62   : 	RakNet::BitStream out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 63   : 	out.Write((unsigned char) ID_DATABASE_REMOVE_ROW);

	push	87					; 00000057H
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 64   : 	stringCompressor->EncodeString(tableName, _SIMPLE_DATABASE_TABLE_NAME_LENGTH, &out);

	push	0
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _tableName$[ebp]
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z ; StringCompressor::EncodeString

; 65   : 	if (removePassword && removePassword[0])

	cmp	DWORD PTR _removePassword$[ebp], 0
	je	SHORT $LN2@RemoveRow
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _removePassword$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN2@RemoveRow

; 66   : 	{
; 67   : 		out.Write(true);

	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@_N@BitStream@RakNet@@QAEX_N@Z	; RakNet::BitStream::Write<bool>

; 68   : 		// This is sent in plain text.  I can do this securely but it's not worth the trouble.
; 69   : 		// Use secure connections if you want security.
; 70   : 		stringCompressor->EncodeString(removePassword, _SIMPLE_DATABASE_PASSWORD_LENGTH, &out);

	push	0
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _removePassword$[ebp]
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z ; StringCompressor::EncodeString

; 71   : 	}
; 72   : 	else

	jmp	SHORT $LN1@RemoveRow
$LN2@RemoveRow:

; 73   : 		out.Write(false);

	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@_N@BitStream@RakNet@@QAEX_N@Z	; RakNet::BitStream::Write<bool>
$LN1@RemoveRow:

; 74   : 
; 75   : 	out.Write(rowId);

	mov	eax, DWORD PTR _rowId$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>

; 76   : 
; 77   : 	rakPeer->Send(&out, HIGH_PRIORITY, RELIABLE_ORDERED,0,playerId, broadcast);

	mov	esi, esp
	movzx	eax, BYTE PTR _broadcast$[ebp]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	push	0
	push	3
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN6@RemoveRow:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@RemoveRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN12@RemoveRow:
	DD	1
	DD	$LN11@RemoveRow
$LN11@RemoveRow:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN9@RemoveRow
$LN9@RemoveRow:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z$0:
	lea	ecx, DWORD PTR _out$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-508]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?RemoveRow@LightweightDatabaseClient@@QAEXPBD0IUPlayerID@@_N@Z ENDP ; LightweightDatabaseClient::RemoveRow
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabaseclient.cpp
;	COMDAT ?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z
_TEXT	SEGMENT
_i$ = -320						; size = 4
_out$ = -308						; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_tableName$ = 8						; size = 4
_updatePassword$ = 12					; size = 4
_updateMode$ = 16					; size = 4
_hasRowId$ = 20						; size = 1
_rowId$ = 24						; size = 4
_cellUpdates$ = 28					; size = 4
_numCellUpdates$ = 32					; size = 1
_playerId$ = 36						; size = 6
_broadcast$ = 44					; size = 1
?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z PROC ; LightweightDatabaseClient::UpdateRow, COMDAT
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-516]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	if (tableName==0 || tableName[0]==0)

	cmp	DWORD PTR _tableName$[ebp], 0
	je	SHORT $LN10@UpdateRow
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tableName$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN11@UpdateRow
$LN10@UpdateRow:

; 82   : 		return;

	jmp	$LN12@UpdateRow
$LN11@UpdateRow:

; 83   : 	if (rakPeer==0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@UpdateRow

; 84   : 		return;

	jmp	$LN12@UpdateRow
$LN9@UpdateRow:

; 85   : 	if (cellUpdates==0 || numCellUpdates==0)

	cmp	DWORD PTR _cellUpdates$[ebp], 0
	je	SHORT $LN7@UpdateRow
	movzx	eax, BYTE PTR _numCellUpdates$[ebp]
	test	eax, eax
	jne	SHORT $LN8@UpdateRow
$LN7@UpdateRow:

; 86   : 		return;

	jmp	$LN12@UpdateRow
$LN8@UpdateRow:

; 87   : 
; 88   : 	RakNet::BitStream out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 	out.Write((unsigned char) ID_DATABASE_UPDATE_ROW);

	push	86					; 00000056H
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 90   : 	stringCompressor->EncodeString(tableName, _SIMPLE_DATABASE_TABLE_NAME_LENGTH, &out);

	push	0
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _tableName$[ebp]
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z ; StringCompressor::EncodeString

; 91   : 	if (updatePassword && updatePassword[0])

	cmp	DWORD PTR _updatePassword$[ebp], 0
	je	SHORT $LN6@UpdateRow
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _updatePassword$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN6@UpdateRow

; 92   : 	{
; 93   : 		out.Write(true);

	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@_N@BitStream@RakNet@@QAEX_N@Z	; RakNet::BitStream::Write<bool>

; 94   : 		// This is sent in plain text.  I can do this securely but it's not worth the trouble.
; 95   : 		// Use secure connections if you want security.
; 96   : 		stringCompressor->EncodeString(updatePassword, _SIMPLE_DATABASE_PASSWORD_LENGTH, &out);

	push	0
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _updatePassword$[ebp]
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z ; StringCompressor::EncodeString

; 97   : 	}
; 98   : 	else

	jmp	SHORT $LN5@UpdateRow
$LN6@UpdateRow:

; 99   : 		out.Write(false);

	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@_N@BitStream@RakNet@@QAEX_N@Z	; RakNet::BitStream::Write<bool>
$LN5@UpdateRow:

; 100  : 
; 101  : 	out.Write((unsigned char) updateMode);

	movzx	eax, BYTE PTR _updateMode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 102  : 	out.Write(hasRowId);

	movzx	eax, BYTE PTR _hasRowId$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@_N@BitStream@RakNet@@QAEX_N@Z	; RakNet::BitStream::Write<bool>

; 103  : 	if (hasRowId)

	movzx	eax, BYTE PTR _hasRowId$[ebp]
	test	eax, eax
	je	SHORT $LN4@UpdateRow

; 104  : 		out.Write(rowId);

	mov	eax, DWORD PTR _rowId$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>
$LN4@UpdateRow:

; 105  : 	out.Write(numCellUpdates);

	movzx	eax, BYTE PTR _numCellUpdates$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 106  : 	unsigned i;
; 107  : 	for (i=0; i < numCellUpdates; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@UpdateRow
$LN2@UpdateRow:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@UpdateRow:
	movzx	eax, BYTE PTR _numCellUpdates$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN1@UpdateRow

; 108  : 		cellUpdates[i].Serialize(&out);

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	imul	ecx, DWORD PTR _i$[ebp], 45
	add	ecx, DWORD PTR _cellUpdates$[ebp]
	call	?Serialize@DatabaseCellUpdate@@QAEXPAVBitStream@RakNet@@@Z ; DatabaseCellUpdate::Serialize
	jmp	SHORT $LN2@UpdateRow
$LN1@UpdateRow:

; 109  : 
; 110  : 	rakPeer->Send(&out, HIGH_PRIORITY, RELIABLE_ORDERED,0,playerId, broadcast);

	mov	esi, esp
	movzx	eax, BYTE PTR _broadcast$[ebp]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	push	0
	push	3
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 111  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN12@UpdateRow:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@UpdateRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 516				; 00000204H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
	npad	2
$LN18@UpdateRow:
	DD	1
	DD	$LN17@UpdateRow
$LN17@UpdateRow:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN15@UpdateRow
$LN15@UpdateRow:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z$0:
	lea	ecx, DWORD PTR _out$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-520]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateRow@LightweightDatabaseClient@@QAEXPBD0W4RowUpdateMode@@_NIPAUDatabaseCellUpdate@@EUPlayerID@@2@Z ENDP ; LightweightDatabaseClient::UpdateRow
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabaseclient.cpp
;	COMDAT ?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z
_TEXT	SEGMENT
_i$ = -320						; size = 4
_out$ = -308						; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_tableName$ = 8						; size = 4
_queryPassword$ = 12					; size = 4
_columnSubset$ = 16					; size = 4
_numColumnSubset$ = 20					; size = 1
_filter$ = 24						; size = 4
_numFilters$ = 28					; size = 1
_rowIds$ = 32						; size = 4
_numRowIDs$ = 36					; size = 1
_playerId$ = 40						; size = 6
_broadcast$ = 48					; size = 1
?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z PROC ; LightweightDatabaseClient::QueryTable, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-516]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 22   : 	if (tableName==0 || tableName[0]==0)

	cmp	DWORD PTR _tableName$[ebp], 0
	je	SHORT $LN13@QueryTable
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tableName$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN14@QueryTable
$LN13@QueryTable:

; 23   : 		return;

	jmp	$LN15@QueryTable
$LN14@QueryTable:

; 24   : 	if (rakPeer==0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN12@QueryTable

; 25   : 		return;

	jmp	$LN15@QueryTable
$LN12@QueryTable:

; 26   : 
; 27   : 	RakNet::BitStream out;

	lea	ecx, DWORD PTR _out$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 28   : 	out.Write((unsigned char) ID_DATABASE_QUERY_REQUEST);

	push	85					; 00000055H
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 29   : 	stringCompressor->EncodeString(tableName, _SIMPLE_DATABASE_TABLE_NAME_LENGTH, &out);

	push	0
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _tableName$[ebp]
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z ; StringCompressor::EncodeString

; 30   : 	if (queryPassword && queryPassword[0])

	cmp	DWORD PTR _queryPassword$[ebp], 0
	je	SHORT $LN11@QueryTable
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _queryPassword$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN11@QueryTable

; 31   : 	{
; 32   :         out.Write(true);

	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@_N@BitStream@RakNet@@QAEX_N@Z	; RakNet::BitStream::Write<bool>

; 33   : 		// This is sent in plain text.  I can do this securely but it's not worth the trouble.
; 34   : 		// Use secure connections if you want security.
; 35   : 		stringCompressor->EncodeString(queryPassword, _SIMPLE_DATABASE_PASSWORD_LENGTH, &out);

	push	0
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _queryPassword$[ebp]
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z ; StringCompressor::EncodeString

; 36   : 	}
; 37   : 	else

	jmp	SHORT $LN10@QueryTable
$LN11@QueryTable:

; 38   : 		out.Write(false);

	push	0
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@_N@BitStream@RakNet@@QAEX_N@Z	; RakNet::BitStream::Write<bool>
$LN10@QueryTable:

; 39   : 
; 40   : 	out.Write(numColumnSubset);

	movzx	eax, BYTE PTR _numColumnSubset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 41   : 	unsigned i;
; 42   : 	for (i=0; i < numColumnSubset; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@QueryTable
$LN8@QueryTable:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@QueryTable:
	movzx	eax, BYTE PTR _numColumnSubset$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@QueryTable

; 43   : 		out.Write(columnSubset[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _columnSubset$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@PBD@BitStream@RakNet@@QAEXPBD@Z ; RakNet::BitStream::Write<char const *>
	jmp	SHORT $LN8@QueryTable
$LN7@QueryTable:

; 44   : 
; 45   : 	out.Write(numFilters);

	movzx	eax, BYTE PTR _numFilters$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 46   : 	for (i=0; i < numFilters; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@QueryTable
$LN5@QueryTable:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@QueryTable:
	movzx	eax, BYTE PTR _numFilters$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@QueryTable

; 47   : 		filter[i].Serialize(&out);

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	imul	ecx, DWORD PTR _i$[ebp], 49
	add	ecx, DWORD PTR _filter$[ebp]
	call	?Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z ; DatabaseFilter::Serialize
	jmp	SHORT $LN5@QueryTable
$LN4@QueryTable:

; 48   : 
; 49   : 	out.Write(numRowIDs);

	movzx	eax, BYTE PTR _numRowIDs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 50   : 	for (i=0; i < numRowIDs; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@QueryTable
$LN2@QueryTable:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@QueryTable:
	movzx	eax, BYTE PTR _numRowIDs$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN1@QueryTable

; 51   : 		out.Write(rowIds[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rowIds$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	lea	ecx, DWORD PTR _out$[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>
	jmp	SHORT $LN2@QueryTable
$LN1@QueryTable:

; 52   : 
; 53   : 	rakPeer->Send(&out, HIGH_PRIORITY, RELIABLE_ORDERED,0,playerId, broadcast);

	mov	esi, esp
	movzx	eax, BYTE PTR _broadcast$[ebp]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	push	0
	push	3
	push	1
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _out$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN15@QueryTable:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@QueryTable
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 516				; 00000204H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
	npad	2
$LN21@QueryTable:
	DD	1
	DD	$LN20@QueryTable
$LN20@QueryTable:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN18@QueryTable
$LN18@QueryTable:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z$0:
	lea	ecx, DWORD PTR _out$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-520]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?QueryTable@LightweightDatabaseClient@@QAEXPBD0PAPBDEPAUDatabaseFilter@@EPAIEUPlayerID@@_N@Z ENDP ; LightweightDatabaseClient::QueryTable
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabaseclient.cpp
;	COMDAT ??1LightweightDatabaseClient@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1LightweightDatabaseClient@@QAE@XZ PROC		; LightweightDatabaseClient::~LightweightDatabaseClient, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LightweightDatabaseClient@@6B@

; 18   : 
; 19   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1LightweightDatabaseClient@@QAE@XZ ENDP		; LightweightDatabaseClient::~LightweightDatabaseClient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabaseclient.cpp
;	COMDAT ??0LightweightDatabaseClient@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0LightweightDatabaseClient@@QAE@XZ PROC		; LightweightDatabaseClient::LightweightDatabaseClient, COMDAT
; _this$ = ecx

; 13   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PluginInterface@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LightweightDatabaseClient@@6B@

; 14   : 	rakPeer=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 15   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0LightweightDatabaseClient@@QAE@XZ ENDP		; LightweightDatabaseClient::LightweightDatabaseClient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0PluginInterface@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0PluginInterface@@QAE@XZ PROC				; PluginInterface::PluginInterface, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PluginInterface@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0PluginInterface@@QAE@XZ ENDP				; PluginInterface::PluginInterface
_TEXT	ENDS
END
