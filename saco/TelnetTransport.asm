; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\TelnetTransport.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_UNASSIGNED_PLAYER_ID DD 0ffffffffH
	DW	0ffffH
CONST	ENDS
PUBLIC	??4PlayerID@@QAEAAU0@ABU0@@Z			; PlayerID::operator=
PUBLIC	??0TransportInterface@@QAE@XZ			; TransportInterface::TransportInterface
PUBLIC	??0TelnetTransport@@QAE@XZ			; TelnetTransport::TelnetTransport
PUBLIC	??1TelnetTransport@@QAE@XZ			; TelnetTransport::~TelnetTransport
PUBLIC	?Start@TelnetTransport@@UAE_NG_N@Z		; TelnetTransport::Start
PUBLIC	?Stop@TelnetTransport@@UAEXXZ			; TelnetTransport::Stop
PUBLIC	?Send@TelnetTransport@@UAAXUPlayerID@@PBDZZ	; TelnetTransport::Send
PUBLIC	?CloseConnection@TelnetTransport@@UAEXUPlayerID@@@Z ; TelnetTransport::CloseConnection
PUBLIC	?Receive@TelnetTransport@@UAEPAUPacket@@XZ	; TelnetTransport::Receive
PUBLIC	?DeallocatePacket@TelnetTransport@@UAEXPAUPacket@@@Z ; TelnetTransport::DeallocatePacket
PUBLIC	?HasNewConnection@TelnetTransport@@UAE?AUPlayerID@@XZ ; TelnetTransport::HasNewConnection
PUBLIC	?HasLostConnection@TelnetTransport@@UAE?AUPlayerID@@XZ ; TelnetTransport::HasLostConnection
PUBLIC	?GetCommandParser@TelnetTransport@@UAEPAVCommandParserInterface@@XZ ; TelnetTransport::GetCommandParser
PUBLIC	?AutoAllocate@TelnetTransport@@IAEXXZ		; TelnetTransport::AutoAllocate
PUBLIC	?ReassembleLine@TelnetTransport@@IAE_NPAUTelnetClient@1@E@Z ; TelnetTransport::ReassembleLine
PUBLIC	??0?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ ; DataStructures::List<TelnetTransport::TelnetClient *>::List<TelnetTransport::TelnetClient *>
PUBLIC	??1?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ ; DataStructures::List<TelnetTransport::TelnetClient *>::~List<TelnetTransport::TelnetClient *>
PUBLIC	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
PUBLIC	?Insert@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXQAUTelnetClient@TelnetTransport@@@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::Insert
PUBLIC	?Del@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXI@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::Del
PUBLIC	?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ ; DataStructures::List<TelnetTransport::TelnetClient *>::Size
PUBLIC	?Clear@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEX_N@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::Clear
PUBLIC	??_7TransportInterface@@6B@			; TransportInterface::`vftable'
PUBLIC	??_7TelnetTransport@@6B@			; TelnetTransport::`vftable'
PUBLIC	?__LINE__Var@?1??Start@TelnetTransport@@UAE_NG_N@Z@4JA ; `TelnetTransport::Start'::`2'::__LINE__Var
PUBLIC	??_C@_1FI@DBFHDPKI@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAt?$AAe?$AAl?$AAn?$AAe?$AAt?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1BG@PMFAJHHL@?$AAs?$AAe?$AAr?$AAv?$AAe?$AAr?$AAM?$AAo?$AAd?$AAe?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Receive@TelnetTransport@@UAEPAUPacket@@XZ@4JA ; `TelnetTransport::Receive'::`2'::__LINE__Var
PUBLIC	??_C@_1BK@IFKPKBPP@?$AAr?$AAe?$AAm?$AAo?$AAt?$AAe?$AAC?$AAl?$AAi?$AAe?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GA@LCLABBFJ@?$AAr?$AAe?$AAa?$AAs?$AAs?$AAe?$AAm?$AAb?$AAl?$AAe?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAR?$AAE?$AAM?$AAO?$AAT?$AAE@ ; `string'
PUBLIC	??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ ; `string'
PUBLIC	??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_R4TransportInterface@@6B@			; TransportInterface::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTransportInterface@@@8			; TransportInterface `RTTI Type Descriptor'
PUBLIC	??_R3TransportInterface@@8			; TransportInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TransportInterface@@8			; TransportInterface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TransportInterface@@8		; TransportInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4TelnetTransport@@6B@			; TelnetTransport::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTelnetTransport@@@8			; TelnetTransport `RTTI Type Descriptor'
PUBLIC	??_R3TelnetTransport@@8				; TelnetTransport::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TelnetTransport@@8				; TelnetTransport::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TelnetTransport@@8		; TelnetTransport::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	??8PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator==
EXTRN	??9PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator!=
EXTRN	__wassert:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	??0TCPInterface@@QAE@XZ:PROC			; TCPInterface::TCPInterface
EXTRN	?Start@TCPInterface@@QAE_NGG@Z:PROC		; TCPInterface::Start
EXTRN	?Stop@TCPInterface@@QAEXXZ:PROC			; TCPInterface::Stop
EXTRN	?Send@TCPInterface@@QAEXPBDIUPlayerID@@@Z:PROC	; TCPInterface::Send
EXTRN	?Receive@TCPInterface@@QAEPAUPacket@@XZ:PROC	; TCPInterface::Receive
EXTRN	?CloseConnection@TCPInterface@@QAEXUPlayerID@@@Z:PROC ; TCPInterface::CloseConnection
EXTRN	?DeallocatePacket@TCPInterface@@QAEXPAUPacket@@@Z:PROC ; TCPInterface::DeallocatePacket
EXTRN	?HasNewConnection@TCPInterface@@QAE?AUPlayerID@@XZ:PROC ; TCPInterface::HasNewConnection
EXTRN	?HasLostConnection@TCPInterface@@QAE?AUPlayerID@@XZ:PROC ; TCPInterface::HasLostConnection
EXTRN	__vsnprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@TelnetTransport@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TelnetTransport@@8 DD FLAT:??_R0?AVTelnetTransport@@@8 ; TelnetTransport::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TelnetTransport@@8
rdata$r	ENDS
;	COMDAT ??_R2TelnetTransport@@8
rdata$r	SEGMENT
??_R2TelnetTransport@@8 DD FLAT:??_R1A@?0A@EA@TelnetTransport@@8 ; TelnetTransport::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TransportInterface@@8
rdata$r	ENDS
;	COMDAT ??_R3TelnetTransport@@8
rdata$r	SEGMENT
??_R3TelnetTransport@@8 DD 00H				; TelnetTransport::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TelnetTransport@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTelnetTransport@@@8
data$r	SEGMENT
??_R0?AVTelnetTransport@@@8 DD FLAT:??_7type_info@@6B@	; TelnetTransport `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTelnetTransport@@', 00H
data$r	ENDS
;	COMDAT ??_R4TelnetTransport@@6B@
rdata$r	SEGMENT
??_R4TelnetTransport@@6B@ DD 00H			; TelnetTransport::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTelnetTransport@@@8
	DD	FLAT:??_R3TelnetTransport@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TransportInterface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TransportInterface@@8 DD FLAT:??_R0?AVTransportInterface@@@8 ; TransportInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TransportInterface@@8
rdata$r	ENDS
;	COMDAT ??_R2TransportInterface@@8
rdata$r	SEGMENT
??_R2TransportInterface@@8 DD FLAT:??_R1A@?0A@EA@TransportInterface@@8 ; TransportInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TransportInterface@@8
rdata$r	SEGMENT
??_R3TransportInterface@@8 DD 00H			; TransportInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TransportInterface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTransportInterface@@@8
data$r	SEGMENT
??_R0?AVTransportInterface@@@8 DD FLAT:??_7type_info@@6B@ ; TransportInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTransportInterface@@', 00H
data$r	ENDS
;	COMDAT ??_R4TransportInterface@@6B@
rdata$r	SEGMENT
??_R4TransportInterface@@6B@ DD 00H			; TransportInterface::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTransportInterface@@@8
	DD	FLAT:??_R3TransportInterface@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '>', 00H, '=', 00H, 'n', 00H, 'u', 00H, 'm'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
CONST	SEGMENT
??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'd', 00H, 's', 00H, '_'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@LCLABBFJ@?$AAr?$AAe?$AAa?$AAs?$AAs?$AAe?$AAm?$AAb?$AAl?$AAe?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAR?$AAE?$AAM?$AAO?$AAT?$AAE@
CONST	SEGMENT
??_C@_1GA@LCLABBFJ@?$AAr?$AAe?$AAa?$AAs?$AAs?$AAe?$AAm?$AAb?$AAl?$AAe?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAR?$AAE?$AAM?$AAO?$AAT?$AAE@ DB 'r'
	DB	00H, 'e', 00H, 'a', 00H, 's', 00H, 's', 00H, 'e', 00H, 'm', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 'd', 00H, 'L', 00H, 'i', 00H, 'n'
	DB	00H, 'e', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'R'
	DB	00H, 'E', 00H, 'M', 00H, 'O', 00H, 'T', 00H, 'E', 00H, '_', 00H
	DB	'M', 00H, 'A', 00H, 'X', 00H, '_', 00H, 'T', 00H, 'E', 00H, 'X'
	DB	00H, 'T', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H, 'U', 00H
	DB	'T', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@IFKPKBPP@?$AAr?$AAe?$AAm?$AAo?$AAt?$AAe?$AAC?$AAl?$AAi?$AAe?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@IFKPKBPP@?$AAr?$AAe?$AAm?$AAo?$AAt?$AAe?$AAC?$AAl?$AAi?$AAe?$AAn?$AAt?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 't', 00H, 'e', 00H, 'C', 00H
	DB	'l', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Receive@TelnetTransport@@UAEPAUPacket@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Receive@TelnetTransport@@UAEPAUPacket@@XZ@4JA DD 03fH ; `TelnetTransport::Receive'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BG@PMFAJHHL@?$AAs?$AAe?$AAr?$AAv?$AAe?$AAr?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@PMFAJHHL@?$AAs?$AAe?$AAr?$AAv?$AAe?$AAr?$AAM?$AAo?$AAd?$AAe?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'r', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'M', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@DBFHDPKI@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAt?$AAe?$AAl?$AAn?$AAe?$AAt?$AAt?$AAr@
CONST	SEGMENT
??_C@_1FI@DBFHDPKI@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAt?$AAe?$AAl?$AAn?$AAe?$AAt?$AAt?$AAr@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 't', 00H, 'e', 00H, 'l'
	DB	00H, 'n', 00H, 'e', 00H, 't', 00H, 't', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 's', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Start@TelnetTransport@@UAE_NG_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Start@TelnetTransport@@UAE_NG_N@Z@4JA DD 01fH ; `TelnetTransport::Start'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7TelnetTransport@@6B@
CONST	SEGMENT
??_7TelnetTransport@@6B@ DD FLAT:??_R4TelnetTransport@@6B@ ; TelnetTransport::`vftable'
	DD	FLAT:?Start@TelnetTransport@@UAE_NG_N@Z
	DD	FLAT:?Stop@TelnetTransport@@UAEXXZ
	DD	FLAT:?Send@TelnetTransport@@UAAXUPlayerID@@PBDZZ
	DD	FLAT:?CloseConnection@TelnetTransport@@UAEXUPlayerID@@@Z
	DD	FLAT:?Receive@TelnetTransport@@UAEPAUPacket@@XZ
	DD	FLAT:?DeallocatePacket@TelnetTransport@@UAEXPAUPacket@@@Z
	DD	FLAT:?HasNewConnection@TelnetTransport@@UAE?AUPlayerID@@XZ
	DD	FLAT:?HasLostConnection@TelnetTransport@@UAE?AUPlayerID@@XZ
	DD	FLAT:?GetCommandParser@TelnetTransport@@UAEPAVCommandParserInterface@@XZ
CONST	ENDS
;	COMDAT ??_7TransportInterface@@6B@
CONST	SEGMENT
??_7TransportInterface@@6B@ DD FLAT:??_R4TransportInterface@@6B@ ; TransportInterface::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AutoAllocate@TelnetTransport@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AutoAllocate@TelnetTransport@@IAEXXZ$0
__ehfuncinfo$?AutoAllocate@TelnetTransport@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AutoAllocate@TelnetTransport@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TelnetTransport@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TelnetTransport@@QAE@XZ$0
__ehfuncinfo$??1TelnetTransport@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1TelnetTransport@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Clear@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEX_N@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
_doNotDeallocate$ = 8					; size = 1
?Clear@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEX_N@Z PROC ; DataStructures::List<TelnetTransport::TelnetClient *>::Clear, COMDAT
; _this$ = ecx

; 379  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Clear

; 381  : 			return;

	jmp	SHORT $LN3@Clear
$LN2@Clear:

; 382  : 
; 383  : 		if (allocation_size>512 && doNotDeallocate==false)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 512			; 00000200H
	jbe	SHORT $LN1@Clear
	movzx	eax, BYTE PTR _doNotDeallocate$[ebp]
	test	eax, eax
	jne	SHORT $LN1@Clear

; 384  : 		{
; 385  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 386  : 			allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 387  : 			listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@Clear:

; 388  : 		}
; 389  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@Clear:

; 390  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEX_N@Z ENDP ; DataStructures::List<TelnetTransport::TelnetClient *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ PROC ; DataStructures::List<TelnetTransport::TelnetClient *>::Size, COMDAT
; _this$ = ecx

; 373  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 		return list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 375  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ ENDP ; DataStructures::List<TelnetTransport::TelnetClient *>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Del@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_num$ = 8						; size = 4
?Del@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXI@Z PROC ; DataStructures::List<TelnetTransport::TelnetClient *>::Del, COMDAT
; _this$ = ecx

; 353  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 354  : 		// Delete the last elements on the list.  No compression needed
; 355  : #ifdef _DEBUG
; 356  : 		assert(list_size>=num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN3@Del
	push	356					; 00000164H
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1BO@JBFMBKMD@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$DO?$AA?$DN?$AAn?$AAu?$AAm?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Del:

; 357  : #endif
; 358  : 		list_size-=num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 359  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Del@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXI@Z ENDP ; DataStructures::List<TelnetTransport::TelnetClient *>::Del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Insert@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXQAUTelnetClient@TelnetTransport@@@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_array$3 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Insert@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXQAUTelnetClient@TelnetTransport@@@Z PROC ; DataStructures::List<TelnetTransport::TelnetClient *>::Insert, COMDAT
; _this$ = ecx

; 242  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 		// Reallocate list if necessary
; 244  : 
; 245  : 		if ( list_size == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@Insert

; 246  : 		{
; 247  : 			// allocate twice the currently allocated memory
; 248  : 			list_type * new_array;
; 249  : 
; 250  : 			if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Insert

; 251  : 				allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 16			; 00000010H

; 252  : 			else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 253  : 				allocation_size *= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@Insert:

; 254  : 
; 255  : 			new_array = new list_type [ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _new_array$3[ebp], eax

; 256  : 
; 257  : 			// copy old array over
; 258  : 			//	for ( unsigned int counter = 0; counter < list_size; ++counter )
; 259  : 			//		new_array[ counter ] = listArray[ counter ];
; 260  : 
; 261  : 			// Don't call constructors, assignment operators, etc.
; 262  : 			memcpy(new_array, listArray, list_size*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _new_array$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 263  : 
; 264  : 			// set old array to point to the newly allocated and twice as large array
; 265  : 			delete[] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 266  : 
; 267  : 			listArray = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$3[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Insert:

; 268  : 		}
; 269  : 
; 270  : 		// Insert the new item at the correct spot
; 271  : 		listArray[ list_size ] = input;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 272  : 
; 273  : 		++list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 274  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Insert@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXQAUTelnetClient@TelnetTransport@@@Z ENDP ; DataStructures::List<TelnetTransport::TelnetClient *>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z PROC ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[], COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : #ifdef _DEBUG
; 187  : 		assert ( position < list_size );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@operator
	push	187					; 000000bbH
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 188  : #endif
; 189  : 		return listArray[ position ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _position$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ENDP ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??1?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<TelnetTransport::TelnetClient *>::~List<TelnetTransport::TelnetClient *>, COMDAT
; _this$ = ecx

; 121  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (allocation_size>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	SHORT $LN2@List

; 123  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@List:

; 124  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<TelnetTransport::TelnetClient *>::~List<TelnetTransport::TelnetClient *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??0?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<TelnetTransport::TelnetClient *>::List<TelnetTransport::TelnetClient *>, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 115  : 		listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 116  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<TelnetTransport::TelnetClient *>::List<TelnetTransport::TelnetClient *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?ReassembleLine@TelnetTransport@@IAE_NPAUTelnetClient@1@E@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_remoteClient$ = 8					; size = 4
_c$ = 12						; size = 1
?ReassembleLine@TelnetTransport@@IAE_NPAUTelnetClient@1@E@Z PROC ; TelnetTransport::ReassembleLine, COMDAT
; _this$ = ecx

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 	if (c=='\n')

	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN7@Reassemble

; 250  : 	{
; 251  : 		remoteClient->textInput[remoteClient->cursorPosition]=0;

	mov	eax, DWORD PTR _remoteClient$[ebp]
	mov	ecx, DWORD PTR [eax+518]
	mov	edx, DWORD PTR _remoteClient$[ebp]
	mov	BYTE PTR [edx+ecx+6], 0

; 252  : 		remoteClient->cursorPosition=0;

	mov	eax, DWORD PTR _remoteClient$[ebp]
	mov	DWORD PTR [eax+518], 0

; 253  : #ifdef _PRINTF_DEBUG
; 254  : 		printf("[Done] %s\n", remoteClient->textInput);
; 255  : #endif
; 256  : 		return true;

	mov	al, 1
	jmp	$LN8@Reassemble
	jmp	$LN6@Reassemble
$LN7@Reassemble:

; 257  : 	}
; 258  : 	else if (c==8) // backspace

	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 8
	jne	SHORT $LN5@Reassemble

; 259  : 	{
; 260  : 		if (remoteClient->cursorPosition>0)

	mov	eax, DWORD PTR _remoteClient$[ebp]
	cmp	DWORD PTR [eax+518], 0
	jbe	SHORT $LN4@Reassemble

; 261  : 		{
; 262  : 			remoteClient->textInput[--remoteClient->cursorPosition]=0;

	mov	eax, DWORD PTR _remoteClient$[ebp]
	mov	ecx, DWORD PTR [eax+518]
	sub	ecx, 1
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR _remoteClient$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR [edx+518], eax
	mov	ecx, DWORD PTR _remoteClient$[ebp]
	add	ecx, DWORD PTR tv78[ebp]
	mov	BYTE PTR [ecx+6], 0
$LN4@Reassemble:

; 263  : #ifdef _PRINTF_DEBUG
; 264  : 			printf("[Back] %s\n", remoteClient->textInput);
; 265  : #endif
; 266  : 		}
; 267  : 	}

	jmp	SHORT $LN6@Reassemble
$LN5@Reassemble:

; 268  : 	else if (c>=32 && c <127)

	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN6@Reassemble
	movzx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 127				; 0000007fH
	jge	SHORT $LN6@Reassemble

; 269  : 	{
; 270  : 		if (remoteClient->cursorPosition < REMOTE_MAX_TEXT_INPUT)

	mov	eax, DWORD PTR _remoteClient$[ebp]
	cmp	DWORD PTR [eax+518], 512		; 00000200H
	jae	SHORT $LN6@Reassemble

; 271  : 		{
; 272  : 			remoteClient->textInput[remoteClient->cursorPosition++]=c;

	mov	eax, DWORD PTR _remoteClient$[ebp]
	mov	ecx, DWORD PTR [eax+518]
	mov	edx, DWORD PTR _remoteClient$[ebp]
	mov	al, BYTE PTR _c$[ebp]
	mov	BYTE PTR [edx+ecx+6], al
	mov	ecx, DWORD PTR _remoteClient$[ebp]
	mov	edx, DWORD PTR [ecx+518]
	add	edx, 1
	mov	eax, DWORD PTR _remoteClient$[ebp]
	mov	DWORD PTR [eax+518], edx
$LN6@Reassemble:

; 273  : #ifdef _PRINTF_DEBUG
; 274  : 			printf("[Norm] %s\n", remoteClient->textInput);
; 275  : #endif
; 276  : 		}
; 277  : 	}
; 278  : 	return false;

	xor	al, al
$LN8@Reassemble:

; 279  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?ReassembleLine@TelnetTransport@@IAE_NPAUTelnetClient@1@E@Z ENDP ; TelnetTransport::ReassembleLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?AutoAllocate@TelnetTransport@@IAEXXZ
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?AutoAllocate@TelnetTransport@@IAEXXZ PROC		; TelnetTransport::AutoAllocate, COMDAT
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AutoAllocate@TelnetTransport@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 	if (tcpInterface==0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@AutoAlloca

; 245  : 		tcpInterface=new TCPInterface;

	push	167					; 000000a7H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@AutoAlloca
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0TCPInterface@@QAE@XZ			; TCPInterface::TCPInterface
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@AutoAlloca
$LN4@AutoAlloca:
	mov	DWORD PTR tv74[ebp], 0
$LN5@AutoAlloca:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN2@AutoAlloca:

; 246  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AutoAllocate@TelnetTransport@@IAEXXZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AutoAllocate@TelnetTransport@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AutoAllocate@TelnetTransport@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AutoAllocate@TelnetTransport@@IAEXXZ ENDP		; TelnetTransport::AutoAllocate
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?GetCommandParser@TelnetTransport@@UAEPAVCommandParserInterface@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCommandParser@TelnetTransport@@UAEPAVCommandParserInterface@@XZ PROC ; TelnetTransport::GetCommandParser, COMDAT
; _this$ = ecx

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 240  : 	return 0;

	xor	eax, eax

; 241  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCommandParser@TelnetTransport@@UAEPAVCommandParserInterface@@XZ ENDP ; TelnetTransport::GetCommandParser
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?HasLostConnection@TelnetTransport@@UAE?AUPlayerID@@XZ
_TEXT	SEGMENT
$T1 = -254						; size = 6
$T2 = -240						; size = 4
_i$ = -36						; size = 4
_playerId$ = -24					; size = 6
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?HasLostConnection@TelnetTransport@@UAE?AUPlayerID@@XZ PROC ; TelnetTransport::HasLostConnection, COMDAT
; _this$ = ecx

; 220  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  : 	PlayerID playerId;
; 222  : 	unsigned i;
; 223  : 	playerId=tcpInterface->HasLostConnection();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?HasLostConnection@TCPInterface@@QAE?AUPlayerID@@XZ ; TCPInterface::HasLostConnection
	push	eax
	lea	ecx, DWORD PTR _playerId$[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 224  : 	if (playerId!=UNASSIGNED_PLAYER_ID)

	push	OFFSET _UNASSIGNED_PLAYER_ID
	lea	ecx, DWORD PTR _playerId$[ebp]
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN5@HasLostCon

; 225  : 	{
; 226  : 		for (i=0; i < remoteClients.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@HasLostCon
$LN3@HasLostCon:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@HasLostCon:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ ; DataStructures::List<TelnetTransport::TelnetClient *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN5@HasLostCon

; 227  : 		{
; 228  : 			if (remoteClients[i]->playerId==playerId)

	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@HasLostCon

; 229  : 			{
; 230  : 				delete remoteClients[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 231  : 				remoteClients[i]=remoteClients[remoteClients.Size()-1];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ ; DataStructures::List<TelnetTransport::TelnetClient *>::Size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 232  : 				remoteClients.Del();

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Del@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXI@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::Del
$LN1@HasLostCon:

; 233  : 			}
; 234  : 		}

	jmp	$LN3@HasLostCon
$LN5@HasLostCon:

; 235  : 	}
; 236  : 	return playerId;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 237  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@HasLostCon
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN10@HasLostCon:
	DD	1
	DD	$LN9@HasLostCon
$LN9@HasLostCon:
	DD	-24					; ffffffe8H
	DD	6
	DD	$LN8@HasLostCon
$LN8@HasLostCon:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
?HasLostConnection@TelnetTransport@@UAE?AUPlayerID@@XZ ENDP ; TelnetTransport::HasLostConnection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?HasNewConnection@TelnetTransport@@UAE?AUPlayerID@@XZ
_TEXT	SEGMENT
$T1 = -290						; size = 6
$T2 = -276						; size = 4
_remoteClient$3 = -72					; size = 4
_command$4 = -60					; size = 10
_newConnection$ = -40					; size = 6
_i$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?HasNewConnection@TelnetTransport@@UAE?AUPlayerID@@XZ PROC ; TelnetTransport::HasNewConnection, COMDAT
; _this$ = ecx

; 167  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 	unsigned i;
; 169  : 	PlayerID newConnection;
; 170  : 	newConnection = tcpInterface->HasNewConnection();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?HasNewConnection@TCPInterface@@QAE?AUPlayerID@@XZ ; TCPInterface::HasNewConnection
	push	eax
	lea	ecx, DWORD PTR _newConnection$[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 171  : 	// 03/16/06 Can't force the stupid windows telnet to use line mode or local echo so now I have to track all the remote players and their
; 172  : 	// input buffer
; 173  : 	if (newConnection != UNASSIGNED_PLAYER_ID)

	push	OFFSET _UNASSIGNED_PLAYER_ID
	lea	ecx, DWORD PTR _newConnection$[ebp]
	call	??9PlayerID@@QBE_NABU0@@Z		; PlayerID::operator!=
	movzx	eax, al
	test	eax, eax
	je	$LN6@HasNewConn

; 174  : 	{
; 175  : 		unsigned char command[10];
; 176  : 		// http://www.pcmicro.com/netfoss/RFC857.html
; 177  : 		// IAC WON'T ECHO
; 178  : 		command[0]=255; // IAC

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _command$4[ebp+ecx], 255	; 000000ffH

; 179  : 		//command[1]=253; // WON'T
; 180  : 		command[1]=251; // WILL

	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR _command$4[ebp+eax], 251	; 000000fbH

; 181  : 		command[2]=1; // ECHO

	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _command$4[ebp+eax], 1

; 182  : 		tcpInterface->Send((const char*)command, 3, newConnection);

	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _newConnection$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _newConnection$[ebp+4]
	mov	WORD PTR [eax+4], dx
	push	3
	lea	eax, DWORD PTR _command$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?Send@TCPInterface@@QAEXPBDIUPlayerID@@@Z ; TCPInterface::Send

; 183  : 
; 184  : 		/*
; 185  : 		// Tell the other side to use line mode
; 186  : 		// http://www.faqs.org/rfcs/rfc1184.html
; 187  : 		// IAC DO LINEMODE
; 188  : 	//	command[0]=255; // IAC
; 189  : 	//	command[1]=252; // DO
; 190  : 	//	command[2]=34; // LINEMODE
; 191  : 	//	tcpInterface->Send((const char*)command, 3, newConnection);
; 192  : 
; 193  : 	*/
; 194  : 
; 195  : 		TelnetClient *remoteClient=0;

	mov	DWORD PTR _remoteClient$3[ebp], 0

; 196  : 		for (i=0; i < remoteClients.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@HasNewConn
$LN4@HasNewConn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@HasNewConn:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ ; DataStructures::List<TelnetTransport::TelnetClient *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN3@HasNewConn

; 197  : 		{
; 198  : 			if (remoteClients[i]->playerId==newConnection)

	lea	eax, DWORD PTR _newConnection$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@HasNewConn

; 199  : 			{
; 200  : 				remoteClient=remoteClients[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _remoteClient$3[ebp], ecx

; 201  : 				remoteClient->cursorPosition=0;

	mov	eax, DWORD PTR _remoteClient$3[ebp]
	mov	DWORD PTR [eax+518], 0
$LN2@HasNewConn:

; 202  : 			}
; 203  : 		}

	jmp	SHORT $LN4@HasNewConn
$LN3@HasNewConn:

; 204  : 
; 205  : 		if (remoteClient==0)

	cmp	DWORD PTR _remoteClient$3[ebp], 0
	jne	SHORT $LN1@HasNewConn

; 206  : 		{
; 207  : 			remoteClient=new TelnetClient;

	push	522					; 0000020aH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _remoteClient$3[ebp], eax

; 208  : 			remoteClient->cursorPosition=0;

	mov	eax, DWORD PTR _remoteClient$3[ebp]
	mov	DWORD PTR [eax+518], 0

; 209  : 			remoteClient->playerId=newConnection;

	lea	eax, DWORD PTR _newConnection$[ebp]
	push	eax
	mov	ecx, DWORD PTR _remoteClient$3[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=
$LN1@HasNewConn:

; 210  : #ifdef _PRINTF_DEBUG
; 211  : 			memset(remoteClient->textInput, 0, REMOTE_MAX_TEXT_INPUT);
; 212  : #endif
; 213  : 		}
; 214  : 
; 215  : 		remoteClients.Insert(remoteClient);

	mov	eax, DWORD PTR _remoteClient$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Insert@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEXQAUTelnetClient@TelnetTransport@@@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::Insert
$LN6@HasNewConn:

; 216  : 	}
; 217  : 	return newConnection;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _newConnection$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _newConnection$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 218  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@HasNewConn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@HasNewConn:
	DD	2
	DD	$LN11@HasNewConn
$LN11@HasNewConn:
	DD	-40					; ffffffd8H
	DD	6
	DD	$LN9@HasNewConn
	DD	-60					; ffffffc4H
	DD	10					; 0000000aH
	DD	$LN10@HasNewConn
$LN10@HasNewConn:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN9@HasNewConn:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?HasNewConnection@TelnetTransport@@UAE?AUPlayerID@@XZ ENDP ; TelnetTransport::HasNewConnection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?DeallocatePacket@TelnetTransport@@UAEXPAUPacket@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?DeallocatePacket@TelnetTransport@@UAEXPAUPacket@@@Z PROC ; TelnetTransport::DeallocatePacket, COMDAT
; _this$ = ecx

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 	if (tcpInterface==0) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Deallocate
	jmp	SHORT $LN2@Deallocate
$LN1@Deallocate:

; 163  : 	delete [] packet->data;

	mov	eax, DWORD PTR _packet$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 164  : 	delete packet;

	mov	eax, DWORD PTR _packet$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@Deallocate:

; 165  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeallocatePacket@TelnetTransport@@UAEXPAUPacket@@@Z ENDP ; TelnetTransport::DeallocatePacket
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?Receive@TelnetTransport@@UAEPAUPacket@@XZ
_TEXT	SEGMENT
$T1 = -296						; size = 4
$T2 = -284						; size = 4
_reassembledLine$3 = -80				; size = 4
_spaceThenBack$4 = -68					; size = 2
_gotLine$ = -53						; size = 1
_remoteClient$ = -44					; size = 4
_i$ = -32						; size = 4
_p$ = -20						; size = 4
_this$ = -8						; size = 4
?Receive@TelnetTransport@@UAEPAUPacket@@XZ PROC		; TelnetTransport::Receive, COMDAT
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	if (tcpInterface==0) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN15@Receive
	xor	eax, eax
	jmp	$LN16@Receive
$LN15@Receive:

; 65   : 	Packet *p = tcpInterface->Receive();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Receive@TCPInterface@@QAEPAUPacket@@XZ	; TCPInterface::Receive
	mov	DWORD PTR _p$[ebp], eax

; 66   : 	if (p==0)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN14@Receive

; 67   : 		return 0;

	xor	eax, eax
	jmp	$LN16@Receive
$LN14@Receive:

; 68   : 
; 69   : 	/*
; 70   : 	if (p->data[0]==255)
; 71   : 	{
; 72   : 		unsigned i;
; 73   : 		for (i=0; i < p->length; i++)
; 74   : 		{
; 75   : 			printf("%i ", p->data[i]);
; 76   : 		}
; 77   : 		printf("\n");
; 78   : 		tcpInterface->DeallocatePacket(p);
; 79   : 		return 0;
; 80   : 	}
; 81   : 	*/
; 82   : 
; 83   : 	// 127 is delete - ignore that
; 84   : 	// 9 is tab
; 85   : 	// 27 is escape
; 86   : 	if (p->data[0]>=127 || p->data[0]==9 || p->data[0]==27)

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 127				; 0000007fH
	jge	SHORT $LN12@Receive
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 9
	je	SHORT $LN12@Receive
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 27					; 0000001bH
	jne	SHORT $LN13@Receive
$LN12@Receive:

; 87   : 	{
; 88   : 		tcpInterface->DeallocatePacket(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?DeallocatePacket@TCPInterface@@QAEXPAUPacket@@@Z ; TCPInterface::DeallocatePacket

; 89   : 		return 0;

	xor	eax, eax
	jmp	$LN16@Receive
$LN13@Receive:

; 90   : 	}
; 91   : 
; 92   : 	// Hack - I don't know what the hell this is about but cursor keys send 3 characters at a time.  I can block these
; 93   : 	//Up=27,91,65
; 94   : 	//Down=27,91,66
; 95   : 	//Right=27,91,67
; 96   : 	//Left=27,91,68
; 97   : 	if (p->length==3 && p->data[0]==27 && p->data[1]==91 && p->data[2]>=65 && p->data[2]<=68)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+8], 3
	jne	SHORT $LN11@Receive
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 27					; 0000001bH
	jne	SHORT $LN11@Receive
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 91					; 0000005bH
	jne	SHORT $LN11@Receive
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN11@Receive
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 68					; 00000044H
	jg	SHORT $LN11@Receive

; 98   : 	{
; 99   : 		tcpInterface->DeallocatePacket(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?DeallocatePacket@TCPInterface@@QAEXPAUPacket@@@Z ; TCPInterface::DeallocatePacket

; 100  : 		return 0;

	xor	eax, eax
	jmp	$LN16@Receive
$LN11@Receive:

; 101  : 	}
; 102  : 
; 103  : 	// Get this guy's cursor buffer.  This is real bullcrap that I have to do this.
; 104  : 	unsigned i;
; 105  : 	TelnetClient *remoteClient=0;

	mov	DWORD PTR _remoteClient$[ebp], 0

; 106  : 	for (i=0; i < remoteClients.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@Receive
$LN9@Receive:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@Receive:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ ; DataStructures::List<TelnetTransport::TelnetClient *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN8@Receive

; 107  : 	{
; 108  : 		if (remoteClients[i]->playerId==p->playerId)

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@Receive

; 109  : 			remoteClient=remoteClients[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _remoteClient$[ebp], ecx
$LN7@Receive:

; 110  : 	}

	jmp	SHORT $LN9@Receive
$LN8@Receive:

; 111  : 	assert(remoteClient);

	cmp	DWORD PTR _remoteClient$[ebp], 0
	jne	SHORT $LN18@Receive
	mov	eax, DWORD PTR ?__LINE__Var@?1??Receive@TelnetTransport@@UAEPAUPacket@@XZ@4JA
	add	eax, 48					; 00000030H
	push	eax
	push	OFFSET ??_C@_1FI@DBFHDPKI@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAt?$AAe?$AAl?$AAn?$AAe?$AAt?$AAt?$AAr@
	push	OFFSET ??_C@_1BK@IFKPKBPP@?$AAr?$AAe?$AAm?$AAo?$AAt?$AAe?$AAC?$AAl?$AAi?$AAe?$AAn?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN18@Receive:

; 112  : 	if (remoteClient==0)

	cmp	DWORD PTR _remoteClient$[ebp], 0
	jne	SHORT $LN6@Receive

; 113  : 	{
; 114  : 		tcpInterface->DeallocatePacket(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?DeallocatePacket@TCPInterface@@QAEXPAUPacket@@@Z ; TCPInterface::DeallocatePacket

; 115  : 		return 0;

	xor	eax, eax
	jmp	$LN16@Receive
$LN6@Receive:

; 116  : 	}
; 117  : 
; 118  : 
; 119  : 	// Echo
; 120  : #ifdef ECHO_INPUT
; 121  : 	tcpInterface->Send((const char *)p->data, p->length, p->playerId);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Send@TCPInterface@@QAEXPBDIUPlayerID@@@Z ; TCPInterface::Send

; 122  : #endif
; 123  : 
; 124  : 	bool gotLine;
; 125  : 	// Process each character in turn
; 126  : 	for (i=0; i < p->length; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Receive
$LN4@Receive:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@Receive:
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN3@Receive

; 127  : 	{
; 128  : 
; 129  : #ifdef ECHO_INPUT
; 130  : 		if (p->data[i]==8)

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 8
	jne	SHORT $LN2@Receive

; 131  : 		{
; 132  : 			char spaceThenBack[2];
; 133  : 			spaceThenBack[0]=' ';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _spaceThenBack$4[ebp+ecx], 32	; 00000020H

; 134  : 			spaceThenBack[1]=8;

	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR _spaceThenBack$4[ebp+eax], 8

; 135  : 			tcpInterface->Send((const char *)spaceThenBack, 2, p->playerId);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	push	2
	lea	ecx, DWORD PTR _spaceThenBack$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Send@TCPInterface@@QAEXPBDIUPlayerID@@@Z ; TCPInterface::Send
$LN2@Receive:

; 136  : 		}
; 137  : #endif
; 138  : 
; 139  : 		gotLine=ReassembleLine(remoteClient, p->data[i]);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	push	eax
	mov	ecx, DWORD PTR _remoteClient$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReassembleLine@TelnetTransport@@IAE_NPAUTelnetClient@1@E@Z ; TelnetTransport::ReassembleLine
	mov	BYTE PTR _gotLine$[ebp], al

; 140  : 		if (gotLine && remoteClient->textInput[0])

	movzx	eax, BYTE PTR _gotLine$[ebp]
	test	eax, eax
	je	$LN1@Receive
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _remoteClient$[ebp]
	movsx	eax, BYTE PTR [edx+ecx+6]
	test	eax, eax
	je	$LN1@Receive

; 141  : 		{
; 142  : 			Packet *reassembledLine = new Packet;

	push	21					; 00000015H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _reassembledLine$3[ebp], eax

; 143  : 			reassembledLine->length=(unsigned int) strlen(remoteClient->textInput);

	mov	eax, DWORD PTR _remoteClient$[ebp]
	add	eax, 6
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _reassembledLine$3[ebp]
	mov	DWORD PTR [ecx+8], eax

; 144  : 			assert(reassembledLine->length < REMOTE_MAX_TEXT_INPUT);

	mov	eax, DWORD PTR _reassembledLine$3[ebp]
	cmp	DWORD PTR [eax+8], 512			; 00000200H
	jb	SHORT $LN19@Receive
	mov	ecx, DWORD PTR ?__LINE__Var@?1??Receive@TelnetTransport@@UAEPAUPacket@@XZ@4JA
	add	ecx, 81					; 00000051H
	push	ecx
	push	OFFSET ??_C@_1FI@DBFHDPKI@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAt?$AAe?$AAl?$AAn?$AAe?$AAt?$AAt?$AAr@
	push	OFFSET ??_C@_1GA@LCLABBFJ@?$AAr?$AAe?$AAa?$AAs?$AAs?$AAe?$AAm?$AAb?$AAl?$AAe?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAR?$AAE?$AAM?$AAO?$AAT?$AAE@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@Receive:

; 145  : 			reassembledLine->data= new unsigned char [reassembledLine->length+1];

	mov	eax, DWORD PTR _reassembledLine$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR _reassembledLine$3[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+16], eax

; 146  : 			memcpy(reassembledLine->data, remoteClient->textInput, reassembledLine->length);

	mov	eax, DWORD PTR _reassembledLine$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _remoteClient$[ebp]
	add	edx, 6
	push	edx
	mov	eax, DWORD PTR _reassembledLine$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 147  : #ifdef _PRINTF_DEBUG
; 148  : 			memset(remoteClient->textInput, 0, REMOTE_MAX_TEXT_INPUT);
; 149  : #endif
; 150  : 			reassembledLine->data[reassembledLine->length]=0;

	mov	eax, DWORD PTR _reassembledLine$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _reassembledLine$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	BYTE PTR [eax+ecx], 0

; 151  : 			reassembledLine->playerId=p->playerId;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _reassembledLine$3[ebp]
	add	ecx, 2
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 152  : 			tcpInterface->DeallocatePacket(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?DeallocatePacket@TCPInterface@@QAEXPAUPacket@@@Z ; TCPInterface::DeallocatePacket

; 153  : 			return reassembledLine;

	mov	eax, DWORD PTR _reassembledLine$3[ebp]
	jmp	SHORT $LN16@Receive
$LN1@Receive:

; 154  : 		}
; 155  : 	}

	jmp	$LN4@Receive
$LN3@Receive:

; 156  : 
; 157  : 	tcpInterface->DeallocatePacket(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?DeallocatePacket@TCPInterface@@QAEXPAUPacket@@@Z ; TCPInterface::DeallocatePacket

; 158  : 	return 0;

	xor	eax, eax
$LN16@Receive:

; 159  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@Receive
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@Receive:
	DD	1
	DD	$LN21@Receive
$LN21@Receive:
	DD	-68					; ffffffbcH
	DD	2
	DD	$LN20@Receive
$LN20@Receive:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?Receive@TelnetTransport@@UAEPAUPacket@@XZ ENDP		; TelnetTransport::Receive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?CloseConnection@TelnetTransport@@UAEXUPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
?CloseConnection@TelnetTransport@@UAEXUPlayerID@@@Z PROC ; TelnetTransport::CloseConnection, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	tcpInterface->CloseConnection(playerId);

	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?CloseConnection@TCPInterface@@QAEXUPlayerID@@@Z ; TCPInterface::CloseConnection

; 61   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CloseConnection@TelnetTransport@@UAEXUPlayerID@@@Z ENDP ; TelnetTransport::CloseConnection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?Send@TelnetTransport@@UAAXUPlayerID@@PBDZZ
_TEXT	SEGMENT
$T1 = -736						; size = 4
_ap$ = -532						; size = 4
_text$ = -520						; size = 512
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_playerId$ = 12						; size = 6
_data$ = 20						; size = 4
?Send@TelnetTransport@@UAAXUPlayerID@@PBDZZ PROC	; TelnetTransport::Send, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 740				; 000002e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 185				; 000000b9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 47   : 	if (tcpInterface==0) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Send
	jmp	$LN3@Send
$LN1@Send:

; 48   : 
; 49   : 	char text[REMOTE_MAX_TEXT_INPUT];
; 50   : 	va_list ap;
; 51   : 	va_start(ap, data);

	lea	eax, DWORD PTR _data$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax

; 52   : 	_vsnprintf(text, REMOTE_MAX_TEXT_INPUT, data, ap);

	mov	eax, DWORD PTR _ap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	__vsnprintf
	add	esp, 16					; 00000010H

; 53   : 	va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0

; 54   : 	text[REMOTE_MAX_TEXT_INPUT-1]=0;

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN4@Send
	jmp	SHORT $LN5@Send
$LN4@Send:
	call	___report_rangecheckfailure
$LN5@Send:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _text$[ebp+edx], 0

; 55   : 
; 56   : 	tcpInterface->Send(text, (unsigned int) strlen(text), playerId);

	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Send@TCPInterface@@QAEXPBDIUPlayerID@@@Z ; TCPInterface::Send
$LN3@Send:

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Send
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@Send:
	DD	1
	DD	$LN7@Send
$LN7@Send:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN6@Send
$LN6@Send:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
?Send@TelnetTransport@@UAAXUPlayerID@@PBDZZ ENDP	; TelnetTransport::Send
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?Stop@TelnetTransport@@UAEXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Stop@TelnetTransport@@UAEXXZ PROC			; TelnetTransport::Stop, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	if (tcpInterface==0) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@Stop
	jmp	SHORT $LN5@Stop
$LN4@Stop:

; 39   : 	tcpInterface->Stop();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Stop@TCPInterface@@QAEXXZ		; TCPInterface::Stop

; 40   : 	unsigned i;
; 41   : 	for (i=0; i < remoteClients.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Stop
$LN2@Stop:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Stop:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEIXZ ; DataStructures::List<TelnetTransport::TelnetClient *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN1@Stop

; 42   : 		delete remoteClients[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QBEAAPAUTelnetClient@TelnetTransport@@I@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	jmp	SHORT $LN2@Stop
$LN1@Stop:

; 43   : 	remoteClients.Clear();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Clear@?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAEX_N@Z ; DataStructures::List<TelnetTransport::TelnetClient *>::Clear
$LN5@Stop:

; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Stop@TelnetTransport@@UAEXXZ ENDP			; TelnetTransport::Stop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ?Start@TelnetTransport@@UAE_NG_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_port$ = 8						; size = 2
_serverMode$ = 12					; size = 1
?Start@TelnetTransport@@UAE_NG_N@Z PROC			; TelnetTransport::Start, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   :     AutoAllocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AutoAllocate@TelnetTransport@@IAEXXZ	; TelnetTransport::AutoAllocate

; 33   : 	assert(serverMode);

	movzx	eax, BYTE PTR _serverMode$[ebp]
	test	eax, eax
	jne	SHORT $LN3@Start
	mov	ecx, DWORD PTR ?__LINE__Var@?1??Start@TelnetTransport@@UAE_NG_N@Z@4JA
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1FI@DBFHDPKI@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAt?$AAe?$AAl?$AAn?$AAe?$AAt?$AAt?$AAr@
	push	OFFSET ??_C@_1BG@PMFAJHHL@?$AAs?$AAe?$AAr?$AAv?$AAe?$AAr?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@Start:

; 34   : 	return tcpInterface->Start(port, 64);

	push	64					; 00000040H
	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?Start@TCPInterface@@QAE_NGG@Z		; TCPInterface::Start

; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Start@TelnetTransport@@UAE_NG_N@Z ENDP			; TelnetTransport::Start
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ??1TelnetTransport@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1TelnetTransport@@QAE@XZ PROC				; TelnetTransport::~TelnetTransport, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TelnetTransport@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TelnetTransport@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 25   : 	Stop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Stop@TelnetTransport@@UAEXXZ		; TelnetTransport::Stop

; 26   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ ; DataStructures::List<TelnetTransport::TelnetClient *>::~List<TelnetTransport::TelnetClient *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TelnetTransport@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ ; DataStructures::List<TelnetTransport::TelnetClient *>::~List<TelnetTransport::TelnetClient *>
__ehhandler$??1TelnetTransport@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TelnetTransport@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TelnetTransport@@QAE@XZ ENDP				; TelnetTransport::~TelnetTransport
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\telnettransport.cpp
;	COMDAT ??0TelnetTransport@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TelnetTransport@@QAE@XZ PROC				; TelnetTransport::TelnetTransport, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TransportInterface@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TelnetTransport@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$List@PAUTelnetClient@TelnetTransport@@@DataStructures@@QAE@XZ ; DataStructures::List<TelnetTransport::TelnetClient *>::List<TelnetTransport::TelnetClient *>

; 21   : 	tcpInterface=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 22   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0TelnetTransport@@QAE@XZ ENDP				; TelnetTransport::TelnetTransport
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0TransportInterface@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TransportInterface@@QAE@XZ PROC			; TransportInterface::TransportInterface, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TransportInterface@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TransportInterface@@QAE@XZ ENDP			; TransportInterface::TransportInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.h
;	COMDAT ??4PlayerID@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4PlayerID@@QAEAAU0@ABU0@@Z PROC			; PlayerID::operator=, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		binaryAddress = input.binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 76   : 		port = input.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 77   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PlayerID@@QAEAAU0@ABU0@@Z ENDP			; PlayerID::operator=
_TEXT	ENDS
END
