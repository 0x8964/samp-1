; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\scoreboard.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A ; ScoreBoardVertices
_DATA	SEGMENT
?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A DD 041a00000r ; 20 ; ScoreBoardVertices
	DD	041a00000r			; 20
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a00000r			; 20
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441b0000r			; 620
	DD	041a00000r			; 20
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a00000r			; 20
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441b0000r			; 620
	DD	041a00000r			; 20
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441b0000r			; 620
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a00000r			; 20
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a80000r			; 21
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a00000r			; 20
	DD	043e60000r			; 460
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a80000r			; 21
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a00000r			; 20
	DD	043e60000r			; 460
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a80000r			; 21
	DD	043e60000r			; 460
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441ac000r			; 619
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441b0000r			; 620
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441ac000r			; 619
	DD	043e60000r			; 460
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441b0000r			; 620
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441ac000r			; 619
	DD	043e60000r			; 460
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441b0000r			; 620
	DD	043e60000r			; 460
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a80000r			; 21
	DD	043e60000r			; 460
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a80000r			; 21
	DD	043e58000r			; 459
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441ac000r			; 619
	DD	043e58000r			; 459
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a80000r			; 21
	DD	043e58000r			; 459
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441ac000r			; 619
	DD	043e58000r			; 459
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	0441ac000r			; 619
	DD	043e60000r			; 460
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0ff000000H
	DD	041a80000r			; 21
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	096000000H
	DD	041a80000r			; 21
	DD	043e58000r			; 459
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	096000000H
	DD	0441ac000r			; 619
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	096000000H
	DD	041a80000r			; 21
	DD	043e58000r			; 459
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	096000000H
	DD	0441ac000r			; 619
	DD	042580000r			; 54
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	096000000H
	DD	0441ac000r			; 619
	DD	043e58000r			; 459
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	096000000H
_DATA	ENDS
PUBLIC	??0CScoreBoard@@QAE@PAUIDirect3DDevice9@@H@Z	; CScoreBoard::CScoreBoard
PUBLIC	??1CScoreBoard@@QAE@XZ				; CScoreBoard::~CScoreBoard
PUBLIC	?Draw@CScoreBoard@@QAEXXZ			; CScoreBoard::Draw
PUBLIC	?DeleteDeviceObjects@CScoreBoard@@QAEXXZ	; CScoreBoard::DeleteDeviceObjects
PUBLIC	?RestoreDeviceObjects@CScoreBoard@@QAEXXZ	; CScoreBoard::RestoreDeviceObjects
PUBLIC	?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ	; CGame::GetMainWindowHwnd
PUBLIC	?GetState@CRemotePlayer@@QAEEXZ			; CRemotePlayer::GetState
PUBLIC	?GetLocalPlayerName@CPlayerPool@@QAEPADXZ	; CPlayerPool::GetLocalPlayerName
PUBLIC	?GetPlayerName@CPlayerPool@@QAEPADE@Z		; CPlayerPool::GetPlayerName
PUBLIC	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
PUBLIC	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z	; CPlayerPool::GetAt
PUBLIC	?GetSlotState@CPlayerPool@@QAEHE@Z		; CPlayerPool::GetSlotState
PUBLIC	?GetLocalPlayerID@CPlayerPool@@QAEEXZ		; CPlayerPool::GetLocalPlayerID
PUBLIC	?GetLocalPlayerScore@CPlayerPool@@QAEHXZ	; CPlayerPool::GetLocalPlayerScore
PUBLIC	?GetLocalPlayerPing@CPlayerPool@@QAEKXZ		; CPlayerPool::GetLocalPlayerPing
PUBLIC	?GetPlayerScore@CPlayerPool@@QAEHE@Z		; CPlayerPool::GetPlayerScore
PUBLIC	?GetPlayerPing@CPlayerPool@@QAEKE@Z		; CPlayerPool::GetPlayerPing
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	?SwapPlayerInfo@@YAXPAU_PLAYER_SCORE_INFO@@0@Z	; SwapPlayerInfo
PUBLIC	??_C@_0BF@ILEJFNFO@Players?3?5?$CFd?9?$CFd?5of?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_05DBKDOICH@score?$AA@			; `string'
PUBLIC	??_C@_04OONEELOO@ping?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_07IBEGINLN@?$CFs?5?$CI?$CFu?$CJ?$AA@	; `string'
PUBLIC	??_C@_07EHHHOIHI@Verdana?$AA@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@41800000
PUBLIC	__real@41a00000
PUBLIC	__real@41a80000
PUBLIC	__real@41b00000
PUBLIC	__real@41c00000
PUBLIC	__real@41e00000
PUBLIC	__real@42500000
PUBLIC	__real@42640000
PUBLIC	__real@42700000
PUBLIC	__real@43700000
PUBLIC	__real@43a00000
PUBLIC	__real@43bb0000
PUBLIC	__real@43e40000
PUBLIC	__real@43f78000
PUBLIC	__real@441a0000
PUBLIC	__real@44200000
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	_D3DXCreateSprite@8:PROC
EXTRN	_D3DXCreateFontA@48:PROC
EXTRN	_sprintf:PROC
EXTRN	?GetPlayerColorAsARGB@CLocalPlayer@@QAEKXZ:PROC	; CLocalPlayer::GetPlayerColorAsARGB
EXTRN	?GetPlayerColorAsARGB@CRemotePlayer@@QAEKXZ:PROC ; CRemotePlayer::GetPlayerColorAsARGB
EXTRN	?GetCount@CPlayerPool@@QAEEXZ:PROC		; CPlayerPool::GetCount
EXTRN	?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ:PROC ; CNetGame::UpdatePlayerScoresAndPings
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__ftoui3:PROC
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@44200000
CONST	SEGMENT
__real@44200000 DD 044200000r			; 640
CONST	ENDS
;	COMDAT __real@441a0000
CONST	SEGMENT
__real@441a0000 DD 0441a0000r			; 616
CONST	ENDS
;	COMDAT __real@43f78000
CONST	SEGMENT
__real@43f78000 DD 043f78000r			; 495
CONST	ENDS
;	COMDAT __real@43e40000
CONST	SEGMENT
__real@43e40000 DD 043e40000r			; 456
CONST	ENDS
;	COMDAT __real@43bb0000
CONST	SEGMENT
__real@43bb0000 DD 043bb0000r			; 374
CONST	ENDS
;	COMDAT __real@43a00000
CONST	SEGMENT
__real@43a00000 DD 043a00000r			; 320
CONST	ENDS
;	COMDAT __real@43700000
CONST	SEGMENT
__real@43700000 DD 043700000r			; 240
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42640000
CONST	SEGMENT
__real@42640000 DD 042640000r			; 57
CONST	ENDS
;	COMDAT __real@42500000
CONST	SEGMENT
__real@42500000 DD 042500000r			; 52
CONST	ENDS
;	COMDAT __real@41e00000
CONST	SEGMENT
__real@41e00000 DD 041e00000r			; 28
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@41b00000
CONST	SEGMENT
__real@41b00000 DD 041b00000r			; 22
CONST	ENDS
;	COMDAT __real@41a80000
CONST	SEGMENT
__real@41a80000 DD 041a80000r			; 21
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07EHHHOIHI@Verdana?$AA@
CONST	SEGMENT
??_C@_07EHHHOIHI@Verdana?$AA@ DB 'Verdana', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IBEGINLN@?$CFs?5?$CI?$CFu?$CJ?$AA@
CONST	SEGMENT
??_C@_07IBEGINLN@?$CFs?5?$CI?$CFu?$CJ?$AA@ DB '%s (%u)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OONEELOO@ping?$AA@
CONST	SEGMENT
??_C@_04OONEELOO@ping?$AA@ DB 'ping', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DBKDOICH@score?$AA@
CONST	SEGMENT
??_C@_05DBKDOICH@score?$AA@ DB 'score', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ILEJFNFO@Players?3?5?$CFd?9?$CFd?5of?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@ILEJFNFO@Players?3?5?$CFd?9?$CFd?5of?5?$CFd?$AA@ DB 'Players: %'
	DB	'd-%d of %d', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\scoreboard.cpp
;	COMDAT ?SwapPlayerInfo@@YAXPAU_PLAYER_SCORE_INFO@@0@Z
_TEXT	SEGMENT
_plrinf$ = -28						; size = 24
_psi1$ = 8						; size = 4
_psi2$ = 12						; size = 4
?SwapPlayerInfo@@YAXPAU_PLAYER_SCORE_INFO@@0@Z PROC	; SwapPlayerInfo, COMDAT

; 122  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 123  : 	PLAYER_SCORE_INFO plrinf;
; 124  : 	memcpy(&plrinf, psi1, sizeof(PLAYER_SCORE_INFO));

	push	24					; 00000018H
	mov	eax, DWORD PTR _psi1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _plrinf$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 125  : 	memcpy(psi1, psi2, sizeof(PLAYER_SCORE_INFO));

	push	24					; 00000018H
	mov	eax, DWORD PTR _psi2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psi1$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 126  : 	memcpy(psi2, &plrinf, sizeof(PLAYER_SCORE_INFO));

	push	24					; 00000018H
	lea	eax, DWORD PTR _plrinf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psi2$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 127  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SwapPlayer
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@SwapPlayer:
	DD	1
	DD	$LN4@SwapPlayer
$LN4@SwapPlayer:
	DD	-28					; ffffffe4H
	DD	24					; 00000018H
	DD	$LN3@SwapPlayer
$LN3@SwapPlayer:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	0
?SwapPlayerInfo@@YAXPAU_PLAYER_SCORE_INFO@@0@Z ENDP	; SwapPlayerInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetPlayerPing@CPlayerPool@@QAEKE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerId$ = 8					; size = 1
?GetPlayerPing@CPlayerPool@@QAEKE@Z PROC		; CPlayerPool::GetPlayerPing, COMDAT
; _this$ = ecx

; 112  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 		if (bytePlayerId > MAX_PLAYERS-1) { return 0; }

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	cmp	eax, 203				; 000000cbH
	jle	SHORT $LN1@GetPlayerP
	xor	eax, eax
	jmp	SHORT $LN2@GetPlayerP
$LN1@GetPlayerP:

; 114  : 		return m_dwPlayerPings[bytePlayerId];

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+1645]
$LN2@GetPlayerP:

; 115  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerPing@CPlayerPool@@QAEKE@Z ENDP		; CPlayerPool::GetPlayerPing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetPlayerScore@CPlayerPool@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerId$ = 8					; size = 1
?GetPlayerScore@CPlayerPool@@QAEHE@Z PROC		; CPlayerPool::GetPlayerScore, COMDAT
; _this$ = ecx

; 106  : 	int GetPlayerScore(BYTE bytePlayerId) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 		if (bytePlayerId > MAX_PLAYERS-1) { return 0; }

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	cmp	eax, 203				; 000000cbH
	jle	SHORT $LN1@GetPlayerS
	xor	eax, eax
	jmp	SHORT $LN2@GetPlayerS
$LN1@GetPlayerS:

; 108  : 		return m_iPlayerScores[bytePlayerId];

	movzx	eax, BYTE PTR _bytePlayerId$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+3277]
$LN2@GetPlayerS:

; 109  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerScore@CPlayerPool@@QAEHE@Z ENDP		; CPlayerPool::GetPlayerScore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayerPing@CPlayerPool@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayerPing@CPlayerPool@@QAEKXZ PROC		; CPlayerPool::GetLocalPlayerPing, COMDAT
; _this$ = ecx

; 102  : 	DWORD GetLocalPlayerPing() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 103  : 		return m_dwLocalPlayerPing;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+9]

; 104  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayerPing@CPlayerPool@@QAEKXZ ENDP		; CPlayerPool::GetLocalPlayerPing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayerScore@CPlayerPool@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayerScore@CPlayerPool@@QAEHXZ PROC		; CPlayerPool::GetLocalPlayerScore, COMDAT
; _this$ = ecx

; 98   : 	int GetLocalPlayerScore() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 		return m_iLocalPlayerScore;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+5]

; 100  : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayerScore@CPlayerPool@@QAEHXZ ENDP		; CPlayerPool::GetLocalPlayerScore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayerID@CPlayerPool@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayerID@CPlayerPool@@QAEEXZ PROC		; CPlayerPool::GetLocalPlayerID, COMDAT
; _this$ = ecx

; 68   : 	BYTE GetLocalPlayerID() { return m_byteLocalPlayerID; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayerID@CPlayerPool@@QAEEXZ ENDP		; CPlayerPool::GetLocalPlayerID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetSlotState@CPlayerPool@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetSlotState@CPlayerPool@@QAEHE@Z PROC			; CPlayerPool::GetSlotState, COMDAT
; _this$ = ecx

; 58   : 	BOOL GetSlotState(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(bytePlayerID > MAX_PLAYERS) { return FALSE; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 60   : 		return m_bPlayerSlotState[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+13]
$LN2@GetSlotSta:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CPlayerPool@@QAEHE@Z ENDP			; CPlayerPool::GetSlotState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerPool::GetAt, COMDAT
; _this$ = ecx

; 52   : 	CRemotePlayer* GetAt(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if(bytePlayerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 54   : 		return m_pPlayers[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+829]
$LN2@GetAt:

; 55   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerPool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ PROC ; CPlayerPool::GetLocalPlayer, COMDAT
; _this$ = ecx

; 46   : 	CLocalPlayer * GetLocalPlayer() { return m_pLocalPlayer; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ENDP ; CPlayerPool::GetLocalPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetPlayerName@CPlayerPool@@QAEPADE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetPlayerName@CPlayerPool@@QAEPADE@Z PROC		; CPlayerPool::GetPlayerName, COMDAT
; _this$ = ecx

; 41   : 	PCHAR GetPlayerName(BYTE bytePlayerID) { return m_szPlayerNames[bytePlayerID]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	imul	ecx, eax, 25
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4093]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerName@CPlayerPool@@QAEPADE@Z ENDP		; CPlayerPool::GetPlayerName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayerName@CPlayerPool@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayerName@CPlayerPool@@QAEPADXZ PROC		; CPlayerPool::GetLocalPlayerName, COMDAT
; _this$ = ecx

; 40   : 	PCHAR GetLocalPlayerName() { return m_szLocalPlayerName; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 9193				; 000023e9H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayerName@CPlayerPool@@QAEPADXZ ENDP		; CPlayerPool::GetLocalPlayerName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetState@CRemotePlayer@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetState@CRemotePlayer@@QAEEXZ PROC			; CRemotePlayer::GetState, COMDAT
; _this$ = ecx

; 83   : 	BYTE GetState() { return m_byteState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+315]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetState@CRemotePlayer@@QAEEXZ ENDP			; CRemotePlayer::GetState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ PROC		; CGame::GetMainWindowHwnd, COMDAT
; _this$ = ecx

; 128  : 	HWND	GetMainWindowHwnd() { return *(HWND *)ADDR_HWND; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ds:13204508
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ ENDP		; CGame::GetMainWindowHwnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\scoreboard.cpp
;	COMDAT ?RestoreDeviceObjects@CScoreBoard@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RestoreDeviceObjects@CScoreBoard@@QAEXXZ PROC		; CScoreBoard::RestoreDeviceObjects, COMDAT
; _this$ = ecx

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 305  : 	if (!m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN6@RestoreDev

; 306  : 	{
; 307  : 		m_pDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 308  : 
; 309  : 		m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 310  : 		m_pDevice->SetRenderState(D3DRS_FOGENABLE, FALSE);

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 311  : 		m_pDevice->SetRenderState(D3DRS_ZENABLE, 0);

	mov	esi, esp
	push	0
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 312  : 		m_pDevice->SetRenderState(D3DRS_FILLMODE, 3);

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 313  : 		m_pDevice->SetRenderState(D3DRS_CULLMODE, 1);

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 314  : 		m_pDevice->SetRenderState(D3DRS_WRAP0, 0);

	mov	esi, esp
	push	0
	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 315  : 		m_pDevice->SetRenderState(D3DRS_CLIPPING, 1);

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 316  : 		m_pDevice->SetRenderState(D3DRS_VERTEXBLEND, 0);

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 317  : 		m_pDevice->SetRenderState(D3DRS_CLIPPLANEENABLE, 0);

	mov	esi, esp
	push	0
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 318  : 		m_pDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, 0);

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 319  : 		m_pDevice->SetRenderState(D3DRS_COLORWRITEENABLE, 15);

	mov	esi, esp
	push	15					; 0000000fH
	push	168					; 000000a8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 320  : 		m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, 1);

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 321  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND, 5);

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 322  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND, 6);

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 323  : 		m_pDevice->SetRenderState(D3DRS_BLENDOP, 1);

	mov	esi, esp
	push	1
	push	171					; 000000abH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 324  : 		m_pDevice->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 325  : 		m_pDevice->SetFVF(ScoreBoardFVF);

	mov	esi, esp
	push	68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 326  : 		m_pDevice->SetStreamSource(0, NULL, 0, 0);

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+400]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 327  : 
; 328  : 		m_pDevice->EndStateBlock(&m_pOldStates);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+244]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@RestoreDev:

; 329  : 	}
; 330  : 
; 331  : 	if (!m_pNewStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	$LN5@RestoreDev

; 332  : 	{
; 333  : 		m_pDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 334  : 
; 335  : 		m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 336  : 		m_pDevice->SetRenderState(D3DRS_FOGENABLE, FALSE);

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 337  : 		m_pDevice->SetRenderState(D3DRS_ZENABLE, 0);

	mov	esi, esp
	push	0
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 338  : 		m_pDevice->SetRenderState(D3DRS_FILLMODE, 3);

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 339  : 		m_pDevice->SetRenderState(D3DRS_CULLMODE, 1);

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 340  : 		m_pDevice->SetRenderState(D3DRS_WRAP0, 0);

	mov	esi, esp
	push	0
	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 341  : 		m_pDevice->SetRenderState(D3DRS_CLIPPING, 1);

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 342  : 		m_pDevice->SetRenderState(D3DRS_VERTEXBLEND, 0);

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 343  : 		m_pDevice->SetRenderState(D3DRS_CLIPPLANEENABLE, 0);

	mov	esi, esp
	push	0
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 344  : 		m_pDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, 0);

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 345  : 		m_pDevice->SetRenderState(D3DRS_COLORWRITEENABLE, 15);

	mov	esi, esp
	push	15					; 0000000fH
	push	168					; 000000a8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 346  : 		m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, 1);

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 347  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND, 5);

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 348  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND, 6);

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 349  : 		m_pDevice->SetRenderState(D3DRS_BLENDOP, 1);

	mov	esi, esp
	push	1
	push	171					; 000000abH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 350  : 		m_pDevice->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 351  : 		m_pDevice->SetFVF(ScoreBoardFVF);

	mov	esi, esp
	push	68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 352  : 		m_pDevice->SetStreamSource(0, NULL, 0, 0);

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+400]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 353  : 
; 354  : 		m_pDevice->EndStateBlock(&m_pNewStates);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+244]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@RestoreDev:

; 355  : 	}
; 356  : 
; 357  : 	if (!m_pFont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@RestoreDev

; 358  : 	{
; 359  : 		//             device     h                          w  weight  mip ital   charset       precision           quality        pitch          face       ID3DXFont**
; 360  : 		D3DXCreateFont(m_pDevice, (UINT)(16.0f * m_fScalar), 0, FW_BOLD, 1, FALSE, ANSI_CHARSET, OUT_DEFAULT_PRECIS, PROOF_QUALITY, DEFAULT_PITCH, "Verdana", &m_pFont);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_07EHHHOIHI@Verdana?$AA@
	push	0
	push	2
	push	0
	push	0
	push	0
	push	1
	push	700					; 000002bcH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41800000
	mulss	xmm0, DWORD PTR [ecx+20]
	call	__ftoui3
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_D3DXCreateFontA@48

; 361  : 	} else {

	jmp	SHORT $LN3@RestoreDev
$LN4@RestoreDev:

; 362  : 		m_pFont->OnResetDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@RestoreDev:

; 363  : 	}
; 364  : 
; 365  : 	if (!m_pSprite)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN2@RestoreDev

; 366  : 	{
; 367  : 		D3DXCreateSprite(m_pDevice, &m_pSprite);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_D3DXCreateSprite@8

; 368  : 	} else {

	jmp	SHORT $LN1@RestoreDev
$LN2@RestoreDev:

; 369  : 		m_pSprite->OnResetDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@RestoreDev:

; 370  : 	}
; 371  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreDeviceObjects@CScoreBoard@@QAEXXZ ENDP		; CScoreBoard::RestoreDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\scoreboard.cpp
;	COMDAT ?DeleteDeviceObjects@CScoreBoard@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DeleteDeviceObjects@CScoreBoard@@QAEXXZ PROC		; CScoreBoard::DeleteDeviceObjects, COMDAT
; _this$ = ecx

; 283  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 284  : 	if (m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@DeleteDevi

; 285  : 	{
; 286  : 		m_pOldStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 287  : 		m_pOldStates = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@DeleteDevi:

; 288  : 	}
; 289  : 
; 290  : 	if (m_pNewStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@DeleteDevi

; 291  : 	{
; 292  : 		m_pNewStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 293  : 		m_pNewStates = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@DeleteDevi:

; 294  : 	}
; 295  : 
; 296  : 	if (m_pFont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@DeleteDevi

; 297  : 		m_pFont->OnLostDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeleteDevi:

; 298  : 
; 299  : 	if (m_pSprite)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN5@DeleteDevi

; 300  : 		m_pSprite->OnLostDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@DeleteDevi:

; 301  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteDeviceObjects@CScoreBoard@@QAEXXZ ENDP		; CScoreBoard::DeleteDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\scoreboard.cpp
;	COMDAT ?Draw@CScoreBoard@@QAEXXZ
_TEXT	SEGMENT
tv273 = -812						; size = 4
_szUsePlayerName$1 = -612				; size = 64
_szPing$ = -540						; size = 11
_szScore$ = -520					; size = 11
_szPlayerId$ = -500					; size = 11
_rectPing$ = -480					; size = 16
_rectScore$ = -456					; size = 16
_rectName$ = -432					; size = 16
_rectPlayerId$ = -408					; size = 16
_rectMain$ = -384					; size = 16
_szServerAddress$ = -360				; size = 255
_endplayer$ = -96					; size = 4
_j$2 = -84						; size = 4
_x$ = -72						; size = 4
_i$ = -60						; size = 4
_Players$ = -48						; size = 4
_playercount$ = -36					; size = 4
_pPlayerPool$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Draw@CScoreBoard@@QAEXXZ PROC				; CScoreBoard::Draw, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 812				; 0000032cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-812]
	mov	ecx, 203				; 000000cbH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	if ((!m_pOldStates) || (!m_pNewStates) || (!m_pFont) || (!m_pSprite))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN20@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN20@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN20@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN19@Draw
$LN20@Draw:

; 132  : 	{
; 133  : 		RestoreDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreDeviceObjects@CScoreBoard@@QAEXXZ ; CScoreBoard::RestoreDeviceObjects

; 134  : 		if ((!m_pOldStates) || (!m_pNewStates) || (!m_pFont) || (!m_pSprite))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN18@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN18@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN18@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN19@Draw
$LN18@Draw:

; 135  : 			return;

	jmp	$LN22@Draw
$LN19@Draw:

; 136  : 	}
; 137  : 
; 138  : 	pNetGame->UpdatePlayerScoresAndPings();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ ; CNetGame::UpdatePlayerScoresAndPings

; 139  : 
; 140  : 	m_pOldStates->Capture();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 141  : 	m_pNewStates->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 142  : 
; 143  : 	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLELIST, 10, ScoreBoardVertices, sizeof(ScoreBoardVertices_s));

	mov	esi, esp
	push	20					; 00000014H
	push	OFFSET ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A ; ScoreBoardVertices
	push	10					; 0000000aH
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 144  : 
; 145  : 	m_pOldStates->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 146  : 
; 147  : 	m_pSprite->Begin(D3DXSPRITE_SORT_TEXTURE|D3DXSPRITE_ALPHABLEND);

	mov	esi, esp
	push	48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 148  : 
; 149  : 	CPlayerPool* pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 150  : 	int playercount = pPlayerPool->GetCount()+1;

	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetCount@CPlayerPool@@QAEEXZ		; CPlayerPool::GetCount
	movzx	eax, al
	add	eax, 1
	mov	DWORD PTR _playercount$[ebp], eax

; 151  : 
; 152  : 	if (m_iOffset > (playercount-20))

	mov	eax, DWORD PTR _playercount$[ebp]
	sub	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], eax
	jle	SHORT $LN17@Draw

; 153  : 		m_iOffset = (playercount-20);

	mov	eax, DWORD PTR _playercount$[ebp]
	sub	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax
$LN17@Draw:

; 154  : 	if (m_iOffset < 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jge	SHORT $LN16@Draw

; 155  : 		m_iOffset = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
$LN16@Draw:

; 156  : 
; 157  : 	PLAYER_SCORE_INFO* Players;
; 158  : 	Players = (PLAYER_SCORE_INFO*)malloc(playercount * sizeof(PLAYER_SCORE_INFO));

	imul	eax, DWORD PTR _playercount$[ebp], 24
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _Players$[ebp], eax

; 159  : 	Players[0].dwId = pPlayerPool->GetLocalPlayerID();

	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayerID@CPlayerPool@@QAEEXZ	; CPlayerPool::GetLocalPlayerID
	movzx	eax, al
	mov	ecx, 24					; 00000018H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 160  : 	Players[0].szName = pPlayerPool->GetLocalPlayerName();

	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayerName@CPlayerPool@@QAEPADXZ ; CPlayerPool::GetLocalPlayerName
	mov	ecx, 24					; 00000018H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax

; 161  : 	Players[0].iScore = pPlayerPool->GetLocalPlayerScore();

	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayerScore@CPlayerPool@@QAEHXZ ; CPlayerPool::GetLocalPlayerScore
	mov	ecx, 24					; 00000018H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [ecx+edx+8], eax

; 162  : 	Players[0].dwPing = pPlayerPool->GetLocalPlayerPing();

	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayerPing@CPlayerPool@@QAEKXZ	; CPlayerPool::GetLocalPlayerPing
	mov	ecx, 24					; 00000018H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [ecx+edx+12], eax

; 163  : 	Players[0].dwColor = pPlayerPool->GetLocalPlayer()->GetPlayerColorAsARGB();

	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, eax
	call	?GetPlayerColorAsARGB@CLocalPlayer@@QAEKXZ ; CLocalPlayer::GetPlayerColorAsARGB
	mov	ecx, 24					; 00000018H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [ecx+edx+16], eax

; 164  : 	int i = 1;

	mov	DWORD PTR _i$[ebp], 1

; 165  : 	int x;
; 166  : 	for (x=0; x<MAX_PLAYERS; x++)

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN15@Draw
$LN14@Draw:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN15@Draw:
	cmp	DWORD PTR _x$[ebp], 204			; 000000ccH
	jge	$LN13@Draw

; 167  : 	{
; 168  : 		if (pPlayerPool->GetSlotState(x) == TRUE)

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	cmp	eax, 1
	jne	$LN12@Draw

; 169  : 		{
; 170  : 			Players[i].dwId = x;

	imul	eax, DWORD PTR _i$[ebp], 24
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 171  : 			Players[i].szName = pPlayerPool->GetPlayerName(x);

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetPlayerName@CPlayerPool@@QAEPADE@Z	; CPlayerPool::GetPlayerName
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax

; 172  : 			Players[i].iScore = pPlayerPool->GetPlayerScore(x);

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetPlayerScore@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetPlayerScore
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [edx+ecx+8], eax

; 173  : 			Players[i].dwPing = pPlayerPool->GetPlayerPing(x);

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetPlayerPing@CPlayerPool@@QAEKE@Z	; CPlayerPool::GetPlayerPing
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [edx+ecx+12], eax

; 174  : 			Players[i].dwColor = pPlayerPool->GetAt(x)->GetPlayerColorAsARGB();

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?GetPlayerColorAsARGB@CRemotePlayer@@QAEKXZ ; CRemotePlayer::GetPlayerColorAsARGB
	imul	ecx, DWORD PTR _i$[ebp], 24
	mov	edx, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [edx+ecx+16], eax

; 175  : 			Players[i].iState = (int)pPlayerPool->GetAt(x)->GetState();

	movzx	eax, BYTE PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?GetState@CRemotePlayer@@QAEEXZ		; CRemotePlayer::GetState
	movzx	ecx, al
	imul	edx, DWORD PTR _i$[ebp], 24
	mov	eax, DWORD PTR _Players$[ebp]
	mov	DWORD PTR [eax+edx+20], ecx

; 176  : 
; 177  : 			i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@Draw:

; 178  : 		}
; 179  : 	}

	jmp	$LN14@Draw
$LN13@Draw:

; 180  : 
; 181  : 	if(m_bSorted)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN8@Draw

; 182  : 	{
; 183  : 		for (i=0; i<playercount-1; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@Draw
$LN9@Draw:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@Draw:
	mov	eax, DWORD PTR _playercount$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN8@Draw

; 184  : 		{
; 185  : 			for (int j=0; j<playercount-1-i; j++)

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN7@Draw
$LN6@Draw:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN7@Draw:
	mov	eax, DWORD PTR _playercount$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR _j$2[ebp], eax
	jge	SHORT $LN5@Draw

; 186  : 			{
; 187  : 				if (Players[j+1].iScore > Players[j].iScore)

	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	imul	ecx, eax, 24
	imul	edx, DWORD PTR _j$2[ebp], 24
	mov	eax, DWORD PTR _Players$[ebp]
	mov	esi, DWORD PTR _Players$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+8]
	cmp	ecx, DWORD PTR [esi+edx+8]
	jle	SHORT $LN4@Draw

; 188  : 				{
; 189  : 					SwapPlayerInfo(&Players[j], &Players[j+1]);

	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _Players$[ebp]
	push	ecx
	imul	edx, DWORD PTR _j$2[ebp], 24
	add	edx, DWORD PTR _Players$[ebp]
	push	edx
	call	?SwapPlayerInfo@@YAXPAU_PLAYER_SCORE_INFO@@0@Z ; SwapPlayerInfo
	add	esp, 8
$LN4@Draw:

; 190  : 				}
; 191  : 			}

	jmp	SHORT $LN6@Draw
$LN5@Draw:

; 192  : 		}

	jmp	SHORT $LN9@Draw
$LN8@Draw:

; 193  : 	}
; 194  : 
; 195  : 	int endplayer = min(m_iOffset+21, playercount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 21					; 00000015H
	cmp	ecx, DWORD PTR _playercount$[ebp]
	jge	SHORT $LN24@Draw
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	eax, 21					; 00000015H
	mov	DWORD PTR tv273[ebp], eax
	jmp	SHORT $LN25@Draw
$LN24@Draw:
	mov	ecx, DWORD PTR _playercount$[ebp]
	mov	DWORD PTR tv273[ebp], ecx
$LN25@Draw:
	mov	edx, DWORD PTR tv273[ebp]
	mov	DWORD PTR _endplayer$[ebp], edx

; 196  : 
; 197  : 	char szServerAddress[255];
; 198  : 	sprintf(szServerAddress, "Players: %d-%d of %d", m_iOffset+1, endplayer, playercount);

	mov	eax, DWORD PTR _playercount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _endplayer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0BF@ILEJFNFO@Players?3?5?$CFd?9?$CFd?5of?5?$CFd?$AA@
	lea	ecx, DWORD PTR _szServerAddress$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 20					; 00000014H

; 199  : 
; 200  : 	// HOSTNAME AND IP ADDRESS
; 201  : 	RECT rectMain = {(LONG)(24.0f * m_fScalar + m_fScreenOffsetX), (LONG)(21.0f * m_fScalar + m_fScreenOffsetY),
; 202  : 					(LONG)(616.0f * m_fScalar + m_fScreenOffsetX), (LONG)(52.0f * m_fScalar + m_fScreenOffsetY)};

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41c00000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a80000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@441a0000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42500000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+12], edx

; 203  : 	m_pFont->DrawText(m_pSprite, pNetGame->m_szHostName, -1, &rectMain, DT_SINGLELINE, D3DCOLOR_XRGB(255, 0, 0));

	mov	esi, esp
	push	-65536					; ffff0000H
	push	32					; 00000020H
	lea	eax, DWORD PTR _rectMain$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	add	ecx, 98					; 00000062H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 204  : 	m_pFont->DrawText(m_pSprite, szServerAddress, -1, &rectMain, DT_SINGLELINE|DT_RIGHT, D3DCOLOR_XRGB(150, 150, 150));

	mov	esi, esp
	push	-6908266				; ff969696H
	push	34					; 00000022H
	lea	eax, DWORD PTR _rectMain$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szServerAddress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 205  : 
; 206  : 	// PLAYERID LABEL
; 207  : 	rectMain.left = (LONG)((28.0f * m_fScalar) + m_fScreenOffsetX); rectMain.right = (LONG)((60.0f * m_fScalar) + m_fScreenOffsetX);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41e00000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+8], edx

; 208  : 	rectMain.top = (LONG)((22.0f * m_fScalar) + m_fScreenOffsetY); rectMain.bottom = (LONG)((52.0f * m_fScalar) + m_fScreenOffsetY);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41b00000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42500000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+12], edx

; 209  : 	m_pFont->DrawText(m_pSprite, "id", -1, &rectMain, DT_SINGLELINE|DT_CENTER|DT_BOTTOM, D3DCOLOR_XRGB(100, 150, 200));

	mov	esi, esp
	push	-10185016				; ff6496c8H
	push	41					; 00000029H
	lea	eax, DWORD PTR _rectMain$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_02EGCJHIOB@id?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 210  : 
; 211  : 	// NAME LABEL
; 212  : 	rectMain.left = (LONG)(60.0f * m_fScalar + m_fScreenOffsetX); rectMain.right = (LONG)(374.0f * m_fScalar + m_fScreenOffsetX);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43bb0000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+8], edx

; 213  : 	rectMain.top = (LONG)(22.0f * m_fScalar + m_fScreenOffsetY); rectMain.bottom = (LONG)(52.0f * m_fScalar + m_fScreenOffsetY);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41b00000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42500000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+12], edx

; 214  : 	m_pFont->DrawText(m_pSprite, "name", -1, &rectMain, DT_SINGLELINE|DT_BOTTOM, D3DCOLOR_XRGB(100, 150, 200));

	mov	esi, esp
	push	-10185016				; ff6496c8H
	push	40					; 00000028H
	lea	eax, DWORD PTR _rectMain$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_04MEMAJGDJ@name?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 215  : 
; 216  : 	// SCORE LABEL
; 217  : 	rectMain.left = (LONG)(374.0f * m_fScalar + m_fScreenOffsetX); rectMain.right = (LONG)(495.0f * m_fScalar + m_fScreenOffsetX);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43bb0000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43f78000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+8], edx

; 218  : 	rectMain.top = (LONG)(22.0f * m_fScalar + m_fScreenOffsetY); rectMain.bottom = (LONG)(52.0f * m_fScalar + m_fScreenOffsetY);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41b00000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42500000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+12], edx

; 219  : 	m_pFont->DrawText(m_pSprite, "score", -1, &rectMain, DT_SINGLELINE|DT_CENTER|DT_BOTTOM, D3DCOLOR_XRGB(100, 150, 200));

	mov	esi, esp
	push	-10185016				; ff6496c8H
	push	41					; 00000029H
	lea	eax, DWORD PTR _rectMain$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_05DBKDOICH@score?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 220  : 
; 221  : 	// PING LABEL
; 222  : 	rectMain.left = (LONG)(495.0f * m_fScalar + m_fScreenOffsetX); rectMain.right = (LONG)(616.0f * m_fScalar + m_fScreenOffsetX);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43f78000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@441a0000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+8], edx

; 223  : 	rectMain.top = (LONG)(22.0f * m_fScalar + m_fScreenOffsetY); rectMain.bottom = (LONG)(52.0f * m_fScalar + m_fScreenOffsetY);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41b00000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42500000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectMain$[ebp+12], edx

; 224  : 	m_pFont->DrawText(m_pSprite, "ping", -1, &rectMain, DT_SINGLELINE|DT_CENTER|DT_BOTTOM, D3DCOLOR_XRGB(100, 150, 200));

	mov	esi, esp
	push	-10185016				; ff6496c8H
	push	41					; 00000029H
	lea	eax, DWORD PTR _rectMain$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_04OONEELOO@ping?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 225  : 
; 226  : 	RECT rectPlayerId	= {(LONG)(28.0f * m_fScalar + m_fScreenOffsetX), (LONG)(57.0f * m_fScalar + m_fScreenOffsetY),
; 227  : 							(LONG)(60.0f * m_fScalar + m_fScreenOffsetX), (LONG)(456.0f * m_fScalar + m_fScreenOffsetY)};

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41e00000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectPlayerId$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42640000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectPlayerId$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectPlayerId$[ebp+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43e40000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectPlayerId$[ebp+12], edx

; 228  : 	RECT rectName		= {(LONG)(60.0f * m_fScalar + m_fScreenOffsetX), (LONG)(57.0f * m_fScalar + m_fScreenOffsetY),
; 229  : 							(LONG)(374.0f * m_fScalar + m_fScreenOffsetX), (LONG)(456.0f * m_fScalar + m_fScreenOffsetY)};

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectName$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42640000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectName$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43bb0000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectName$[ebp+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43e40000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectName$[ebp+12], edx

; 230  : 	RECT rectScore		= {(LONG)(374.0f * m_fScalar + m_fScreenOffsetX), (LONG)(57.0f * m_fScalar + m_fScreenOffsetY),
; 231  : 							(LONG)(495.0f * m_fScalar + m_fScreenOffsetX), (LONG)(456.0f * m_fScalar + m_fScreenOffsetY)};

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43bb0000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectScore$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42640000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectScore$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43f78000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectScore$[ebp+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43e40000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectScore$[ebp+12], edx

; 232  : 	RECT rectPing		= {(LONG)(495.0f * m_fScalar + m_fScreenOffsetX), (LONG)(57.0f * m_fScalar + m_fScreenOffsetY),
; 233  : 							(LONG)(616.0f * m_fScalar + m_fScreenOffsetX), (LONG)(456.0f * m_fScalar + m_fScreenOffsetY)};

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43f78000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectPing$[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42640000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectPing$[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@441a0000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectPing$[ebp+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@43e40000
	mulss	xmm0, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	cvttss2si edx, xmm0
	mov	DWORD PTR _rectPing$[ebp+12], edx

; 234  : 
; 235  : 	char szPlayerId[11];
; 236  : 	char szScore[11];
; 237  : 	char szPing[11];
; 238  : 	
; 239  : 
; 240  : 	for (x=m_iOffset; x<endplayer; x++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _x$[ebp], ecx
	jmp	SHORT $LN3@Draw
$LN2@Draw:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN3@Draw:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _endplayer$[ebp]
	jge	$LN1@Draw

; 241  : 	{
; 242  : 		sprintf(szPlayerId, "%d", Players[x].dwId);

	imul	eax, DWORD PTR _x$[ebp], 24
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _szPlayerId$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 243  : 		sprintf(szScore, "%d", Players[x].iScore);

	imul	eax, DWORD PTR _x$[ebp], 24
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _szScore$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 244  : 		sprintf(szPing, "%d", Players[x].dwPing);

	imul	eax, DWORD PTR _x$[ebp], 24
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _szPing$[ebp]
	push	eax
	call	_sprintf
	add	esp, 12					; 0000000cH

; 245  : 
; 246  : 		rectPlayerId.left++; rectPlayerId.top++;

	mov	eax, DWORD PTR _rectPlayerId$[ebp]
	add	eax, 1
	mov	DWORD PTR _rectPlayerId$[ebp], eax
	mov	eax, DWORD PTR _rectPlayerId$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _rectPlayerId$[ebp+4], eax

; 247  : 		m_pFont->DrawText(m_pSprite, szPlayerId, -1, &rectPlayerId, DT_SINGLELINE|DT_CENTER, D3DCOLOR_XRGB(0, 0, 0));

	mov	esi, esp
	push	-16777216				; ff000000H
	push	33					; 00000021H
	lea	eax, DWORD PTR _rectPlayerId$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szPlayerId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 248  : 		rectPlayerId.left--; rectPlayerId.top--;

	mov	eax, DWORD PTR _rectPlayerId$[ebp]
	sub	eax, 1
	mov	DWORD PTR _rectPlayerId$[ebp], eax
	mov	eax, DWORD PTR _rectPlayerId$[ebp+4]
	sub	eax, 1
	mov	DWORD PTR _rectPlayerId$[ebp+4], eax

; 249  : 		m_pFont->DrawText(m_pSprite, szPlayerId, -1, &rectPlayerId, DT_SINGLELINE|DT_CENTER, Players[x].dwColor);

	imul	eax, DWORD PTR _x$[ebp], 24
	mov	esi, esp
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax+16]
	push	edx
	push	33					; 00000021H
	lea	eax, DWORD PTR _rectPlayerId$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szPlayerId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 250  : 
; 251  : 		rectName.left++; rectName.top++;

	mov	eax, DWORD PTR _rectName$[ebp]
	add	eax, 1
	mov	DWORD PTR _rectName$[ebp], eax
	mov	eax, DWORD PTR _rectName$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _rectName$[ebp+4], eax

; 252  : 
; 253  : 		char szUsePlayerName[64];
; 254  : 
; 255  : #ifdef _DEBUG
; 256  : 		sprintf(szUsePlayerName,"%s (%u)",Players[x].szName,Players[x].iState);

	imul	eax, DWORD PTR _x$[ebp], 24
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax+20]
	push	edx
	imul	eax, DWORD PTR _x$[ebp], 24
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	push	edx
	push	OFFSET ??_C@_07IBEGINLN@?$CFs?5?$CI?$CFu?$CJ?$AA@
	lea	eax, DWORD PTR _szUsePlayerName$1[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 257  : #else
; 258  : 		strcpy(szUsePlayerName,Players[x].szName);
; 259  : #endif
; 260  : 
; 261  : 		m_pFont->DrawText(m_pSprite, szUsePlayerName, -1, &rectName, DT_SINGLELINE, D3DCOLOR_XRGB(0, 0, 0));

	mov	esi, esp
	push	-16777216				; ff000000H
	push	32					; 00000020H
	lea	eax, DWORD PTR _rectName$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szUsePlayerName$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 262  : 		rectName.left--; rectName.top--;

	mov	eax, DWORD PTR _rectName$[ebp]
	sub	eax, 1
	mov	DWORD PTR _rectName$[ebp], eax
	mov	eax, DWORD PTR _rectName$[ebp+4]
	sub	eax, 1
	mov	DWORD PTR _rectName$[ebp+4], eax

; 263  : 		m_pFont->DrawText(m_pSprite, szUsePlayerName, -1, &rectName, DT_SINGLELINE, Players[x].dwColor);

	imul	eax, DWORD PTR _x$[ebp], 24
	mov	esi, esp
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax+16]
	push	edx
	push	32					; 00000020H
	lea	eax, DWORD PTR _rectName$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szUsePlayerName$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 264  : 
; 265  : 		rectScore.left++; rectScore.top++;

	mov	eax, DWORD PTR _rectScore$[ebp]
	add	eax, 1
	mov	DWORD PTR _rectScore$[ebp], eax
	mov	eax, DWORD PTR _rectScore$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _rectScore$[ebp+4], eax

; 266  : 		m_pFont->DrawText(m_pSprite, szScore, -1, &rectScore, DT_SINGLELINE|DT_CENTER, D3DCOLOR_XRGB(0, 0, 0));

	mov	esi, esp
	push	-16777216				; ff000000H
	push	33					; 00000021H
	lea	eax, DWORD PTR _rectScore$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szScore$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 267  : 		rectScore.left--; rectScore.top--;

	mov	eax, DWORD PTR _rectScore$[ebp]
	sub	eax, 1
	mov	DWORD PTR _rectScore$[ebp], eax
	mov	eax, DWORD PTR _rectScore$[ebp+4]
	sub	eax, 1
	mov	DWORD PTR _rectScore$[ebp+4], eax

; 268  : 		m_pFont->DrawText(m_pSprite, szScore, -1, &rectScore, DT_SINGLELINE|DT_CENTER, Players[x].dwColor);

	imul	eax, DWORD PTR _x$[ebp], 24
	mov	esi, esp
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax+16]
	push	edx
	push	33					; 00000021H
	lea	eax, DWORD PTR _rectScore$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szScore$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 269  : 
; 270  : 		rectPing.left++; rectPing.top++;

	mov	eax, DWORD PTR _rectPing$[ebp]
	add	eax, 1
	mov	DWORD PTR _rectPing$[ebp], eax
	mov	eax, DWORD PTR _rectPing$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _rectPing$[ebp+4], eax

; 271  : 		m_pFont->DrawText(m_pSprite, szPing, -1, &rectPing, DT_SINGLELINE|DT_CENTER, D3DCOLOR_XRGB(0, 0, 0));

	mov	esi, esp
	push	-16777216				; ff000000H
	push	33					; 00000021H
	lea	eax, DWORD PTR _rectPing$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szPing$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 272  : 		rectPing.left--; rectPing.top--;

	mov	eax, DWORD PTR _rectPing$[ebp]
	sub	eax, 1
	mov	DWORD PTR _rectPing$[ebp], eax
	mov	eax, DWORD PTR _rectPing$[ebp+4]
	sub	eax, 1
	mov	DWORD PTR _rectPing$[ebp+4], eax

; 273  : 		m_pFont->DrawText(m_pSprite, szPing, -1, &rectPing, DT_SINGLELINE|DT_CENTER, Players[x].dwColor);

	imul	eax, DWORD PTR _x$[ebp], 24
	mov	esi, esp
	mov	ecx, DWORD PTR _Players$[ebp]
	mov	edx, DWORD PTR [ecx+eax+16]
	push	edx
	push	33					; 00000021H
	lea	eax, DWORD PTR _rectPing$[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _szPing$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 274  : 
; 275  : 		rectPlayerId.top = rectName.top = rectScore.top = rectPing.top += (LONG)(20.0f * m_fScalar);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41a00000
	mulss	xmm0, DWORD PTR [eax+20]
	cvttss2si ecx, xmm0
	add	ecx, DWORD PTR _rectPing$[ebp+4]
	mov	DWORD PTR _rectPing$[ebp+4], ecx
	mov	edx, DWORD PTR _rectPing$[ebp+4]
	mov	DWORD PTR _rectScore$[ebp+4], edx
	mov	eax, DWORD PTR _rectScore$[ebp+4]
	mov	DWORD PTR _rectName$[ebp+4], eax
	mov	ecx, DWORD PTR _rectName$[ebp+4]
	mov	DWORD PTR _rectPlayerId$[ebp+4], ecx

; 276  : 	}

	jmp	$LN2@Draw
$LN1@Draw:

; 277  : 
; 278  : 	m_pSprite->End();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 279  : 	free(Players);

	mov	eax, DWORD PTR _Players$[ebp]
	push	eax
	call	_free
	add	esp, 4
$LN22@Draw:

; 280  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 812				; 0000032cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@Draw:
	DD	10					; 0000000aH
	DD	$LN36@Draw
$LN36@Draw:
	DD	-360					; fffffe98H
	DD	255					; 000000ffH
	DD	$LN26@Draw
	DD	-384					; fffffe80H
	DD	16					; 00000010H
	DD	$LN27@Draw
	DD	-408					; fffffe68H
	DD	16					; 00000010H
	DD	$LN28@Draw
	DD	-432					; fffffe50H
	DD	16					; 00000010H
	DD	$LN29@Draw
	DD	-456					; fffffe38H
	DD	16					; 00000010H
	DD	$LN30@Draw
	DD	-480					; fffffe20H
	DD	16					; 00000010H
	DD	$LN31@Draw
	DD	-500					; fffffe0cH
	DD	11					; 0000000bH
	DD	$LN32@Draw
	DD	-520					; fffffdf8H
	DD	11					; 0000000bH
	DD	$LN33@Draw
	DD	-540					; fffffde4H
	DD	11					; 0000000bH
	DD	$LN34@Draw
	DD	-612					; fffffd9cH
	DD	64					; 00000040H
	DD	$LN35@Draw
$LN35@Draw:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	85					; 00000055H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN34@Draw:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN33@Draw:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN32@Draw:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
$LN31@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN30@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN29@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN28@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
$LN27@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN26@Draw:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
?Draw@CScoreBoard@@QAEXXZ ENDP				; CScoreBoard::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\scoreboard.cpp
;	COMDAT ??1CScoreBoard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CScoreBoard@@QAE@XZ PROC				; CScoreBoard::~CScoreBoard, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	if (m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@CScoreBoar

; 99   : 		m_pOldStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CScoreBoar:

; 100  : 
; 101  : 	if (m_pNewStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@CScoreBoar

; 102  : 		m_pNewStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@CScoreBoar:

; 103  : 
; 104  : 	if (m_pFont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@CScoreBoar

; 105  : 		m_pFont->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CScoreBoar:

; 106  : 
; 107  : 	if (m_pSprite)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN5@CScoreBoar

; 108  : 		m_pSprite->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@CScoreBoar:

; 109  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CScoreBoard@@QAE@XZ ENDP				; CScoreBoard::~CScoreBoard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\scoreboard.cpp
;	COMDAT ??0CScoreBoard@@QAE@PAUIDirect3DDevice9@@H@Z
_TEXT	SEGMENT
_i$1 = -60						; size = 4
_i$2 = -48						; size = 4
_rect$ = -36						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDevice$ = 8						; size = 4
_bScaleToScreen$ = 12					; size = 4
??0CScoreBoard@@QAE@PAUIDirect3DDevice9@@H@Z PROC	; CScoreBoard::CScoreBoard, COMDAT
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	m_pDevice		= pDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [eax], ecx

; 65   : 	m_pOldStates	= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 66   : 	m_pNewStates	= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 67   : 	m_pFont			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 68   : 	m_pSprite		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 69   : 	m_iOffset		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 70   : 	m_bSorted		= FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 71   : 
; 72   : 	RECT rect;
; 73   : 	GetClientRect(pGame->GetMainWindowHwnd(), &rect);

	mov	esi, esp
	lea	eax, DWORD PTR _rect$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetMainWindowHwnd@CGame@@QAEPAUHWND__@@XZ ; CGame::GetMainWindowHwnd
	push	eax
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 74   : 	if (bScaleToScreen)

	cmp	DWORD PTR _bScaleToScreen$[ebp], 0
	je	$LN8@CScoreBoar

; 75   : 	{
; 76   : 		m_fScalar = (float)rect.right / 640.0f;

	cvtsi2ss xmm0, DWORD PTR _rect$[ebp+8]
	divss	xmm0, DWORD PTR __real@44200000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 77   : 		m_fScreenOffsetX = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 78   : 		m_fScreenOffsetY = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 79   : 		for (int i=0; i<30; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@CScoreBoar
$LN6@CScoreBoar:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@CScoreBoar:
	cmp	DWORD PTR _i$2[ebp], 30			; 0000001eH
	jge	SHORT $LN5@CScoreBoar

; 80   : 		{
; 81   : 			ScoreBoardVertices[i].x *= m_fScalar;

	imul	eax, DWORD PTR _i$2[ebp], 20
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A[eax]
	mulss	xmm0, DWORD PTR [ecx+20]
	imul	edx, DWORD PTR _i$2[ebp], 20
	movss	DWORD PTR ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A[edx], xmm0

; 82   : 			ScoreBoardVertices[i].y *= m_fScalar;

	imul	eax, DWORD PTR _i$2[ebp], 20
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A[eax+4]
	mulss	xmm0, DWORD PTR [ecx+20]
	imul	edx, DWORD PTR _i$2[ebp], 20
	movss	DWORD PTR ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A[edx+4], xmm0

; 83   : 		}

	jmp	SHORT $LN6@CScoreBoar
$LN5@CScoreBoar:
	jmp	$LN1@CScoreBoar
$LN8@CScoreBoar:

; 84   : 	} else {
; 85   : 		m_fScalar = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+20], xmm0

; 86   : 		m_fScreenOffsetX = ((float)rect.right / 2) - 320.0f;

	cvtsi2ss xmm0, DWORD PTR _rect$[ebp+8]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@43a00000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 87   : 		m_fScreenOffsetY = ((float)rect.bottom / 2) - 240.0f;

	cvtsi2ss xmm0, DWORD PTR _rect$[ebp+12]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@43700000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 88   : 		for (int i=0; i<30; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@CScoreBoar
$LN2@CScoreBoar:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@CScoreBoar:
	cmp	DWORD PTR _i$1[ebp], 30			; 0000001eH
	jge	SHORT $LN1@CScoreBoar

; 89   : 		{
; 90   : 			ScoreBoardVertices[i].x += m_fScreenOffsetX;

	imul	eax, DWORD PTR _i$1[ebp], 20
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A[eax]
	addss	xmm0, DWORD PTR [ecx+24]
	imul	edx, DWORD PTR _i$1[ebp], 20
	movss	DWORD PTR ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A[edx], xmm0

; 91   : 			ScoreBoardVertices[i].y += m_fScreenOffsetY;

	imul	eax, DWORD PTR _i$1[ebp], 20
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A[eax+4]
	addss	xmm0, DWORD PTR [ecx+28]
	imul	edx, DWORD PTR _i$1[ebp], 20
	movss	DWORD PTR ?ScoreBoardVertices@@3PAUScoreBoardVertices_s@@A[edx+4], xmm0

; 92   : 		}

	jmp	SHORT $LN2@CScoreBoar
$LN1@CScoreBoar:

; 93   : 	}
; 94   : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@CScoreBoar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN13@CScoreBoar:
	DD	1
	DD	$LN12@CScoreBoar
$LN12@CScoreBoar:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN11@CScoreBoar
$LN11@CScoreBoar:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
??0CScoreBoard@@QAE@PAUIDirect3DDevice9@@H@Z ENDP	; CScoreBoard::CScoreBoard
_TEXT	ENDS
END
