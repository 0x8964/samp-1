; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\d3d9\common\DXUTgui.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?s_adwCompStringClause@CDXUTIMEEditBox@@1PAKA	; CDXUTIMEEditBox::s_adwCompStringClause
PUBLIC	?s_wszReadingString@CDXUTIMEEditBox@@1PADA	; CDXUTIMEEditBox::s_wszReadingString
PUBLIC	?s_bShowReadingWindow@CDXUTIMEEditBox@@1_NA	; CDXUTIMEEditBox::s_bShowReadingWindow
PUBLIC	?s_bHorizontalReading@CDXUTIMEEditBox@@1_NA	; CDXUTIMEEditBox::s_bHorizontalReading
PUBLIC	?s_bChineseIME@CDXUTIMEEditBox@@1_NA		; CDXUTIMEEditBox::s_bChineseIME
PUBLIC	?m_bIMEStaticMsgProcCalled@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::m_bIMEStaticMsgProcCalled
PUBLIC	?s_fTimeRefresh@CDXUTDialog@@0NA		; CDXUTDialog::s_fTimeRefresh
PUBLIC	?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
PUBLIC	?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlPressed
PUBLIC	?FVF@DXUT_SCREEN_VERTEX@@2KA			; DXUT_SCREEN_VERTEX::FVF
PUBLIC	?Dummy_ScriptApplyDigitSubstitution@CUniBuffer@@CGJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@Z ; CUniBuffer::Dummy_ScriptApplyDigitSubstitution
PUBLIC	?Dummy_ScriptStringAnalyse@CUniBuffer@@CGJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@Z ; CUniBuffer::Dummy_ScriptStringAnalyse
PUBLIC	?Dummy_ScriptStringCPtoX@CUniBuffer@@CGJPAXHHPAH@Z ; CUniBuffer::Dummy_ScriptStringCPtoX
PUBLIC	?Dummy_ScriptStringXtoCP@CUniBuffer@@CGJPAXHPAH1@Z ; CUniBuffer::Dummy_ScriptStringXtoCP
PUBLIC	?Dummy_ScriptStringFree@CUniBuffer@@CGJPAPAX@Z	; CUniBuffer::Dummy_ScriptStringFree
PUBLIC	?Dummy_ScriptString_pLogAttr@CUniBuffer@@CGPBUtag_SCRIPT_LOGATTR@@PAX@Z ; CUniBuffer::Dummy_ScriptString_pLogAttr
PUBLIC	?Dummy_ScriptString_pcOutChars@CUniBuffer@@CGPBHPAX@Z ; CUniBuffer::Dummy_ScriptString_pcOutChars
PUBLIC	?_ScriptApplyDigitSubstitution@CUniBuffer@@0P6GJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@ZA ; CUniBuffer::_ScriptApplyDigitSubstitution
PUBLIC	?_ScriptStringAnalyse@CUniBuffer@@0P6GJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@ZA ; CUniBuffer::_ScriptStringAnalyse
PUBLIC	?_ScriptStringCPtoX@CUniBuffer@@0P6GJPAXHHPAH@ZA ; CUniBuffer::_ScriptStringCPtoX
PUBLIC	?_ScriptStringXtoCP@CUniBuffer@@0P6GJPAXHPAH1@ZA ; CUniBuffer::_ScriptStringXtoCP
PUBLIC	?_ScriptStringFree@CUniBuffer@@0P6GJPAPAX@ZA	; CUniBuffer::_ScriptStringFree
PUBLIC	?_ScriptString_pLogAttr@CUniBuffer@@0P6GPBUtag_SCRIPT_LOGATTR@@PAX@ZA ; CUniBuffer::_ScriptString_pLogAttr
PUBLIC	?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA ; CUniBuffer::_ScriptString_pcOutChars
PUBLIC	?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A		; CUniBuffer::s_hDll
PUBLIC	?s_bHideCaret@CDXUTEditBox@@1_NA		; CDXUTEditBox::s_bHideCaret
PUBLIC	?Dummy_ImmLockIMC@CDXUTIMEEditBox@@KGPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@Z ; CDXUTIMEEditBox::Dummy_ImmLockIMC
PUBLIC	?Dummy_ImmUnlockIMC@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z ; CDXUTIMEEditBox::Dummy_ImmUnlockIMC
PUBLIC	?Dummy_ImmLockIMCC@CDXUTIMEEditBox@@KGPAXPAUHIMCC__@@@Z ; CDXUTIMEEditBox::Dummy_ImmLockIMCC
PUBLIC	?Dummy_ImmUnlockIMCC@CDXUTIMEEditBox@@KGHPAUHIMCC__@@@Z ; CDXUTIMEEditBox::Dummy_ImmUnlockIMCC
PUBLIC	?Dummy_ImmDisableTextFrameService@CDXUTIMEEditBox@@KGHK@Z ; CDXUTIMEEditBox::Dummy_ImmDisableTextFrameService
PUBLIC	?Dummy_ImmGetCompositionStringW@CDXUTIMEEditBox@@KGJPAUHIMC__@@KPAXK@Z ; CDXUTIMEEditBox::Dummy_ImmGetCompositionStringW
PUBLIC	?Dummy_ImmGetCandidateListW@CDXUTIMEEditBox@@KGKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@Z ; CDXUTIMEEditBox::Dummy_ImmGetCandidateListW
PUBLIC	?Dummy_ImmGetContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@@Z ; CDXUTIMEEditBox::Dummy_ImmGetContext
PUBLIC	?Dummy_ImmReleaseContext@CDXUTIMEEditBox@@KGHPAUHWND__@@PAUHIMC__@@@Z ; CDXUTIMEEditBox::Dummy_ImmReleaseContext
PUBLIC	?Dummy_ImmAssociateContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@PAU2@@Z ; CDXUTIMEEditBox::Dummy_ImmAssociateContext
PUBLIC	?Dummy_ImmGetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z ; CDXUTIMEEditBox::Dummy_ImmGetOpenStatus
PUBLIC	?Dummy_ImmSetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z ; CDXUTIMEEditBox::Dummy_ImmSetOpenStatus
PUBLIC	?Dummy_ImmGetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@PAK1@Z ; CDXUTIMEEditBox::Dummy_ImmGetConversionStatus
PUBLIC	?Dummy_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@KGPAUHWND__@@PAU2@@Z ; CDXUTIMEEditBox::Dummy_ImmGetDefaultIMEWnd
PUBLIC	?Dummy_ImmGetIMEFileNameA@CDXUTIMEEditBox@@KGIPAUHKL__@@PADI@Z ; CDXUTIMEEditBox::Dummy_ImmGetIMEFileNameA
PUBLIC	?Dummy_ImmGetVirtualKey@CDXUTIMEEditBox@@KGIPAUHWND__@@@Z ; CDXUTIMEEditBox::Dummy_ImmGetVirtualKey
PUBLIC	?Dummy_ImmNotifyIME@CDXUTIMEEditBox@@KGHPAUHIMC__@@KKK@Z ; CDXUTIMEEditBox::Dummy_ImmNotifyIME
PUBLIC	?Dummy_ImmSetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@KK@Z ; CDXUTIMEEditBox::Dummy_ImmSetConversionStatus
PUBLIC	?Dummy_ImmSimulateHotKey@CDXUTIMEEditBox@@KGHPAUHWND__@@K@Z ; CDXUTIMEEditBox::Dummy_ImmSimulateHotKey
PUBLIC	?Dummy_ImmIsIME@CDXUTIMEEditBox@@KGHPAUHKL__@@@Z ; CDXUTIMEEditBox::Dummy_ImmIsIME
PUBLIC	?Dummy_GetReadingString@CDXUTIMEEditBox@@KGIPAUHIMC__@@IPADPAH2PAI@Z ; CDXUTIMEEditBox::Dummy_GetReadingString
PUBLIC	?Dummy_ShowReadingWindow@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z ; CDXUTIMEEditBox::Dummy_ShowReadingWindow
PUBLIC	?Dummy_VerQueryValueA@CDXUTIMEEditBox@@KGHQAXPADPAPAXPAI@Z ; CDXUTIMEEditBox::Dummy_VerQueryValueA
PUBLIC	?Dummy_GetFileVersionInfoA@CDXUTIMEEditBox@@KGHPADKKPAX@Z ; CDXUTIMEEditBox::Dummy_GetFileVersionInfoA
PUBLIC	?Dummy_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@KGKPADPAK@Z ; CDXUTIMEEditBox::Dummy_GetFileVersionInfoSizeA
PUBLIC	?_ImmLockIMC@CDXUTIMEEditBox@@1P6GPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmLockIMC
PUBLIC	?_ImmUnlockIMC@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmUnlockIMC
PUBLIC	?_ImmLockIMCC@CDXUTIMEEditBox@@1P6GPAXPAUHIMCC__@@@ZA ; CDXUTIMEEditBox::_ImmLockIMCC
PUBLIC	?_ImmUnlockIMCC@CDXUTIMEEditBox@@1P6GHPAUHIMCC__@@@ZA ; CDXUTIMEEditBox::_ImmUnlockIMCC
PUBLIC	?_ImmDisableTextFrameService@CDXUTIMEEditBox@@1P6GHK@ZA ; CDXUTIMEEditBox::_ImmDisableTextFrameService
PUBLIC	?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA ; CDXUTIMEEditBox::_ImmGetCompositionStringW
PUBLIC	?_ImmGetCandidateListW@CDXUTIMEEditBox@@1P6GKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@ZA ; CDXUTIMEEditBox::_ImmGetCandidateListW
PUBLIC	?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
PUBLIC	?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
PUBLIC	?_ImmAssociateContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@PAU2@@ZA ; CDXUTIMEEditBox::_ImmAssociateContext
PUBLIC	?_ImmGetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmGetOpenStatus
PUBLIC	?_ImmSetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA ; CDXUTIMEEditBox::_ImmSetOpenStatus
PUBLIC	?_ImmGetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@PAK1@ZA ; CDXUTIMEEditBox::_ImmGetConversionStatus
PUBLIC	?_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@1P6GPAUHWND__@@PAU2@@ZA ; CDXUTIMEEditBox::_ImmGetDefaultIMEWnd
PUBLIC	?_ImmGetIMEFileNameA@CDXUTIMEEditBox@@1P6GIPAUHKL__@@PADI@ZA ; CDXUTIMEEditBox::_ImmGetIMEFileNameA
PUBLIC	?_ImmGetVirtualKey@CDXUTIMEEditBox@@1P6GIPAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetVirtualKey
PUBLIC	?_ImmNotifyIME@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KKK@ZA ; CDXUTIMEEditBox::_ImmNotifyIME
PUBLIC	?_ImmSetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KK@ZA ; CDXUTIMEEditBox::_ImmSetConversionStatus
PUBLIC	?_ImmSimulateHotKey@CDXUTIMEEditBox@@1P6GHPAUHWND__@@K@ZA ; CDXUTIMEEditBox::_ImmSimulateHotKey
PUBLIC	?_ImmIsIME@CDXUTIMEEditBox@@1P6GHPAUHKL__@@@ZA	; CDXUTIMEEditBox::_ImmIsIME
PUBLIC	?_GetReadingString@CDXUTIMEEditBox@@1P6GIPAUHIMC__@@IPADPAH2PAI@ZA ; CDXUTIMEEditBox::_GetReadingString
PUBLIC	?_ShowReadingWindow@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA ; CDXUTIMEEditBox::_ShowReadingWindow
PUBLIC	?_VerQueryValueA@CDXUTIMEEditBox@@1P6GHQAXPADPAPAXPAI@ZA ; CDXUTIMEEditBox::_VerQueryValueA
PUBLIC	?_GetFileVersionInfoA@CDXUTIMEEditBox@@1P6GHPADKKPAX@ZA ; CDXUTIMEEditBox::_GetFileVersionInfoA
PUBLIC	?_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@1P6GKPADPAK@ZA ; CDXUTIMEEditBox::_GetFileVersionInfoSizeA
PUBLIC	?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
PUBLIC	?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A	; CDXUTIMEEditBox::s_hDllVer
PUBLIC	?s_hImcDef@CDXUTIMEEditBox@@1PAUHIMC__@@A	; CDXUTIMEEditBox::s_hImcDef
PUBLIC	?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A	; CDXUTIMEEditBox::s_hklCurrent
PUBLIC	?s_bVerticalCand@CDXUTIMEEditBox@@1_NA		; CDXUTIMEEditBox::s_bVerticalCand
PUBLIC	?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA	; CDXUTIMEEditBox::s_wszCurrIndicator
PUBLIC	?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA	; CDXUTIMEEditBox::s_aszIndicator
PUBLIC	?s_bInsertOnType@CDXUTIMEEditBox@@1_NA		; CDXUTIMEEditBox::s_bInsertOnType
PUBLIC	?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A	; CDXUTIMEEditBox::s_hDllIme
PUBLIC	?s_ImeState@CDXUTIMEEditBox@@1W4IMESTATE@1@A	; CDXUTIMEEditBox::s_ImeState
PUBLIC	?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA	; CDXUTIMEEditBox::s_bEnableImeSystem
PUBLIC	?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A	; CDXUTIMEEditBox::s_ptCompString
PUBLIC	?s_nCompCaret@CDXUTIMEEditBox@@1HA		; CDXUTIMEEditBox::s_nCompCaret
PUBLIC	?s_nFirstTargetConv@CDXUTIMEEditBox@@1HA	; CDXUTIMEEditBox::s_nFirstTargetConv
PUBLIC	?s_abCompStringAttr@CDXUTIMEEditBox@@1PAEA	; CDXUTIMEEditBox::s_abCompStringAttr
_BSS	SEGMENT
?s_adwCompStringClause@CDXUTIMEEditBox@@1PAKA DD 0100H DUP (?) ; CDXUTIMEEditBox::s_adwCompStringClause
?s_wszReadingString@CDXUTIMEEditBox@@1PADA DB 020H DUP (?) ; CDXUTIMEEditBox::s_wszReadingString
?s_bShowReadingWindow@CDXUTIMEEditBox@@1_NA DB 01H DUP (?) ; CDXUTIMEEditBox::s_bShowReadingWindow
	ALIGN	4

?s_bHorizontalReading@CDXUTIMEEditBox@@1_NA DB 01H DUP (?) ; CDXUTIMEEditBox::s_bHorizontalReading
	ALIGN	4

?s_bChineseIME@CDXUTIMEEditBox@@1_NA DB 01H DUP (?)	; CDXUTIMEEditBox::s_bChineseIME
	ALIGN	4

?hklPrev@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAUHKL__@@A DD 01H DUP (?) ; `CDXUTIMEEditBox::GetImeId'::`2'::hklPrev
?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA DD 02H DUP (?) ; `CDXUTIMEEditBox::GetImeId'::`2'::dwID
?m_bIMEStaticMsgProcCalled@CDXUTIMEEditBox@@1_NA DB 01H DUP (?) ; CDXUTIMEEditBox::m_bIMEStaticMsgProcCalled
	ALIGN	4

?hklPrev@?1??CheckInputLocale@CDXUTIMEEditBox@@KAXXZ@4PAUHKL__@@A DD 01H DUP (?) ; `CDXUTIMEEditBox::CheckInputLocale'::`2'::hklPrev
?s_fTimeRefresh@CDXUTDialog@@0NA DQ 01H DUP (?)		; CDXUTDialog::s_fTimeRefresh
?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A DD 01H DUP (?) ; CDXUTDialog::s_pControlFocus
?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A DD 01H DUP (?) ; CDXUTDialog::s_pControlPressed
?bProcessing@?3??FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z@4_NA DB 01H DUP (?) ; `CDXUTIMEEditBox::FinalizeString'::`4'::bProcessing
	ALIGN	4

?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A DD 01H DUP (?)	; CUniBuffer::s_hDll
?s_bHideCaret@CDXUTEditBox@@1_NA DB 01H DUP (?)		; CDXUTEditBox::s_bHideCaret
	ALIGN	4

?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A DD 01H DUP (?) ; CDXUTIMEEditBox::s_hDllImm32
?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A DD 01H DUP (?) ; CDXUTIMEEditBox::s_hDllVer
?s_hImcDef@CDXUTIMEEditBox@@1PAUHIMC__@@A DD 01H DUP (?) ; CDXUTIMEEditBox::s_hImcDef
?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A DD 01H DUP (?) ; CDXUTIMEEditBox::s_hklCurrent
?s_bVerticalCand@CDXUTIMEEditBox@@1_NA DB 01H DUP (?)	; CDXUTIMEEditBox::s_bVerticalCand
	ALIGN	4

?s_bInsertOnType@CDXUTIMEEditBox@@1_NA DB 01H DUP (?)	; CDXUTIMEEditBox::s_bInsertOnType
	ALIGN	4

?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A DD 01H DUP (?) ; CDXUTIMEEditBox::s_hDllIme
?s_ImeState@CDXUTIMEEditBox@@1W4IMESTATE@1@A DD 01H DUP (?) ; CDXUTIMEEditBox::s_ImeState
?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA DB 01H DUP (?) ; CDXUTIMEEditBox::s_bEnableImeSystem
	ALIGN	8

?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A DQ 01H DUP (?) ; CDXUTIMEEditBox::s_ptCompString
?s_nCompCaret@CDXUTIMEEditBox@@1HA DD 01H DUP (?)	; CDXUTIMEEditBox::s_nCompCaret
?s_nFirstTargetConv@CDXUTIMEEditBox@@1HA DD 01H DUP (?)	; CDXUTIMEEditBox::s_nFirstTargetConv
?s_abCompStringAttr@CDXUTIMEEditBox@@1PAEA DB 0100H DUP (?) ; CDXUTIMEEditBox::s_abCompStringAttr
_BSS	ENDS
_DATA	SEGMENT
?FVF@DXUT_SCREEN_VERTEX@@2KA DD 0144H			; DXUT_SCREEN_VERTEX::FVF
?lAlt@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA DD 080000000H ; `CDXUTIMEEditBox::MsgProc'::`4'::lAlt
?lCtrl@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA DD 080000000H ; `CDXUTIMEEditBox::MsgProc'::`4'::lCtrl
?lShift@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA DD 080000000H ; `CDXUTIMEEditBox::MsgProc'::`4'::lShift
?_ScriptApplyDigitSubstitution@CUniBuffer@@0P6GJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@ZA DD FLAT:?Dummy_ScriptApplyDigitSubstitution@CUniBuffer@@CGJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@Z ; CUniBuffer::_ScriptApplyDigitSubstitution
?_ScriptStringAnalyse@CUniBuffer@@0P6GJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@ZA DD FLAT:?Dummy_ScriptStringAnalyse@CUniBuffer@@CGJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@Z ; CUniBuffer::_ScriptStringAnalyse
?_ScriptStringCPtoX@CUniBuffer@@0P6GJPAXHHPAH@ZA DD FLAT:?Dummy_ScriptStringCPtoX@CUniBuffer@@CGJPAXHHPAH@Z ; CUniBuffer::_ScriptStringCPtoX
?_ScriptStringXtoCP@CUniBuffer@@0P6GJPAXHPAH1@ZA DD FLAT:?Dummy_ScriptStringXtoCP@CUniBuffer@@CGJPAXHPAH1@Z ; CUniBuffer::_ScriptStringXtoCP
?_ScriptStringFree@CUniBuffer@@0P6GJPAPAX@ZA DD FLAT:?Dummy_ScriptStringFree@CUniBuffer@@CGJPAPAX@Z ; CUniBuffer::_ScriptStringFree
?_ScriptString_pLogAttr@CUniBuffer@@0P6GPBUtag_SCRIPT_LOGATTR@@PAX@ZA DD FLAT:?Dummy_ScriptString_pLogAttr@CUniBuffer@@CGPBUtag_SCRIPT_LOGATTR@@PAX@Z ; CUniBuffer::_ScriptString_pLogAttr
?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA DD FLAT:?Dummy_ScriptString_pcOutChars@CUniBuffer@@CGPBHPAX@Z ; CUniBuffer::_ScriptString_pcOutChars
?_ImmLockIMC@CDXUTIMEEditBox@@1P6GPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@ZA DD FLAT:?Dummy_ImmLockIMC@CDXUTIMEEditBox@@KGPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@Z ; CDXUTIMEEditBox::_ImmLockIMC
?_ImmUnlockIMC@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA DD FLAT:?Dummy_ImmUnlockIMC@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z ; CDXUTIMEEditBox::_ImmUnlockIMC
?_ImmLockIMCC@CDXUTIMEEditBox@@1P6GPAXPAUHIMCC__@@@ZA DD FLAT:?Dummy_ImmLockIMCC@CDXUTIMEEditBox@@KGPAXPAUHIMCC__@@@Z ; CDXUTIMEEditBox::_ImmLockIMCC
?_ImmUnlockIMCC@CDXUTIMEEditBox@@1P6GHPAUHIMCC__@@@ZA DD FLAT:?Dummy_ImmUnlockIMCC@CDXUTIMEEditBox@@KGHPAUHIMCC__@@@Z ; CDXUTIMEEditBox::_ImmUnlockIMCC
?_ImmDisableTextFrameService@CDXUTIMEEditBox@@1P6GHK@ZA DD FLAT:?Dummy_ImmDisableTextFrameService@CDXUTIMEEditBox@@KGHK@Z ; CDXUTIMEEditBox::_ImmDisableTextFrameService
?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA DD FLAT:?Dummy_ImmGetCompositionStringW@CDXUTIMEEditBox@@KGJPAUHIMC__@@KPAXK@Z ; CDXUTIMEEditBox::_ImmGetCompositionStringW
?_ImmGetCandidateListW@CDXUTIMEEditBox@@1P6GKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@ZA DD FLAT:?Dummy_ImmGetCandidateListW@CDXUTIMEEditBox@@KGKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@Z ; CDXUTIMEEditBox::_ImmGetCandidateListW
?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA DD FLAT:?Dummy_ImmGetContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@@Z ; CDXUTIMEEditBox::_ImmGetContext
?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA DD FLAT:?Dummy_ImmReleaseContext@CDXUTIMEEditBox@@KGHPAUHWND__@@PAUHIMC__@@@Z ; CDXUTIMEEditBox::_ImmReleaseContext
?_ImmAssociateContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@PAU2@@ZA DD FLAT:?Dummy_ImmAssociateContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@PAU2@@Z ; CDXUTIMEEditBox::_ImmAssociateContext
?_ImmGetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA DD FLAT:?Dummy_ImmGetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z ; CDXUTIMEEditBox::_ImmGetOpenStatus
?_ImmSetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA DD FLAT:?Dummy_ImmSetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z ; CDXUTIMEEditBox::_ImmSetOpenStatus
?_ImmGetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@PAK1@ZA DD FLAT:?Dummy_ImmGetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@PAK1@Z ; CDXUTIMEEditBox::_ImmGetConversionStatus
?_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@1P6GPAUHWND__@@PAU2@@ZA DD FLAT:?Dummy_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@KGPAUHWND__@@PAU2@@Z ; CDXUTIMEEditBox::_ImmGetDefaultIMEWnd
?_ImmGetIMEFileNameA@CDXUTIMEEditBox@@1P6GIPAUHKL__@@PADI@ZA DD FLAT:?Dummy_ImmGetIMEFileNameA@CDXUTIMEEditBox@@KGIPAUHKL__@@PADI@Z ; CDXUTIMEEditBox::_ImmGetIMEFileNameA
?_ImmGetVirtualKey@CDXUTIMEEditBox@@1P6GIPAUHWND__@@@ZA DD FLAT:?Dummy_ImmGetVirtualKey@CDXUTIMEEditBox@@KGIPAUHWND__@@@Z ; CDXUTIMEEditBox::_ImmGetVirtualKey
?_ImmNotifyIME@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KKK@ZA DD FLAT:?Dummy_ImmNotifyIME@CDXUTIMEEditBox@@KGHPAUHIMC__@@KKK@Z ; CDXUTIMEEditBox::_ImmNotifyIME
?_ImmSetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KK@ZA DD FLAT:?Dummy_ImmSetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@KK@Z ; CDXUTIMEEditBox::_ImmSetConversionStatus
?_ImmSimulateHotKey@CDXUTIMEEditBox@@1P6GHPAUHWND__@@K@ZA DD FLAT:?Dummy_ImmSimulateHotKey@CDXUTIMEEditBox@@KGHPAUHWND__@@K@Z ; CDXUTIMEEditBox::_ImmSimulateHotKey
?_ImmIsIME@CDXUTIMEEditBox@@1P6GHPAUHKL__@@@ZA DD FLAT:?Dummy_ImmIsIME@CDXUTIMEEditBox@@KGHPAUHKL__@@@Z ; CDXUTIMEEditBox::_ImmIsIME
?_GetReadingString@CDXUTIMEEditBox@@1P6GIPAUHIMC__@@IPADPAH2PAI@ZA DD FLAT:?Dummy_GetReadingString@CDXUTIMEEditBox@@KGIPAUHIMC__@@IPADPAH2PAI@Z ; CDXUTIMEEditBox::_GetReadingString
?_ShowReadingWindow@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA DD FLAT:?Dummy_ShowReadingWindow@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z ; CDXUTIMEEditBox::_ShowReadingWindow
?_VerQueryValueA@CDXUTIMEEditBox@@1P6GHQAXPADPAPAXPAI@ZA DD FLAT:?Dummy_VerQueryValueA@CDXUTIMEEditBox@@KGHQAXPADPAPAXPAI@Z ; CDXUTIMEEditBox::_VerQueryValueA
?_GetFileVersionInfoA@CDXUTIMEEditBox@@1P6GHPADKKPAX@ZA DD FLAT:?Dummy_GetFileVersionInfoA@CDXUTIMEEditBox@@KGHPADKKPAX@Z ; CDXUTIMEEditBox::_GetFileVersionInfoA
?_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@1P6GKPADPAK@ZA DD FLAT:?Dummy_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@KGKPADPAK@Z ; CDXUTIMEEditBox::_GetFileVersionInfoSizeA
?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA DD FLAT:?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_wszCurrIndicator
?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA DB 'En', 00H	; CDXUTIMEEditBox::s_aszIndicator
	DB	00H, 00H
	ORG $+1
	DB	00H, 00H
	ORG $+1
	DB	00H, 00H
	ORG $+1
	DB	00H, 00H
	ORG $+1
_DATA	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_powf
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0_D3DXMATRIXA16@@QAE@XZ			; _D3DXMATRIXA16::_D3DXMATRIXA16
PUBLIC	??0D3DXCOLOR@@QAE@XZ				; D3DXCOLOR::D3DXCOLOR
PUBLIC	??0D3DXCOLOR@@QAE@K@Z				; D3DXCOLOR::D3DXCOLOR
PUBLIC	??BD3DXCOLOR@@QBEKXZ				; D3DXCOLOR::operator unsigned long
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?D3DXColorLerp@@YAPAUD3DXCOLOR@@PAU1@PBU1@1M@Z	; D3DXColorLerp
PUBLIC	?StringCopyWorkerA@@YGJPADIPBD@Z		; StringCopyWorkerA
PUBLIC	?StringCatWorkerA@@YGJPADIPBD@Z			; StringCatWorkerA
PUBLIC	?StringVPrintfWorkerA@@YGJPADIPBD0@Z		; StringVPrintfWorkerA
PUBLIC	?StringLengthWorkerA@@YGJPBDIPAI@Z		; StringLengthWorkerA
PUBLIC	?StringCchCopyA@@YGJPADIPBD@Z			; StringCchCopyA
PUBLIC	?StringCchCatA@@YGJPADIPBD@Z			; StringCchCatA
PUBLIC	?StringCchPrintfA@@YAJPADIPBDZZ			; StringCchPrintfA
PUBLIC	?Init@DXUTBlendColor@@QAEXKKK@Z			; DXUTBlendColor::Init
PUBLIC	?Blend@DXUTBlendColor@@QAEXIMM@Z		; DXUTBlendColor::Blend
PUBLIC	??0DXUTBlendColor@@QAE@XZ			; DXUTBlendColor::DXUTBlendColor
PUBLIC	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z	; CDXUTElement::SetTexture
PUBLIC	?SetFont@CDXUTElement@@QAEXIKK@Z		; CDXUTElement::SetFont
PUBLIC	?Refresh@CDXUTElement@@QAEXXZ			; CDXUTElement::Refresh
PUBLIC	??0CDXUTElement@@QAE@XZ				; CDXUTElement::CDXUTElement
PUBLIC	??0CDXUTDialog@@QAE@XZ				; CDXUTDialog::CDXUTDialog
PUBLIC	??1CDXUTDialog@@QAE@XZ				; CDXUTDialog::~CDXUTDialog
PUBLIC	?Init@CDXUTDialog@@QAEXPAVCDXUTDialogResourceManager@@@Z ; CDXUTDialog::Init
PUBLIC	?MsgProc@CDXUTDialog@@QAE_NPAUHWND__@@IIJ@Z	; CDXUTDialog::MsgProc
PUBLIC	?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z ; CDXUTDialog::AddStatic
PUBLIC	?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z ; CDXUTDialog::AddButton
PUBLIC	?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z ; CDXUTDialog::AddCheckBox
PUBLIC	?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z ; CDXUTDialog::AddRadioButton
PUBLIC	?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z ; CDXUTDialog::AddComboBox
PUBLIC	?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z ; CDXUTDialog::AddSlider
PUBLIC	?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z ; CDXUTDialog::AddEditBox
PUBLIC	?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z ; CDXUTDialog::AddIMEEditBox
PUBLIC	?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z ; CDXUTDialog::AddListBox
PUBLIC	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
PUBLIC	?InitControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::InitControl
PUBLIC	?GetComboBox@CDXUTDialog@@QAEPAVCDXUTComboBox@@H@Z ; CDXUTDialog::GetComboBox
PUBLIC	?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@H@Z ; CDXUTDialog::GetControl
PUBLIC	?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@HI@Z ; CDXUTDialog::GetControl
PUBLIC	?GetControlAtPoint@CDXUTDialog@@QAEPAVCDXUTControl@@UtagPOINT@@@Z ; CDXUTDialog::GetControlAtPoint
PUBLIC	?GetControlEnabled@CDXUTDialog@@QAE_NH@Z	; CDXUTDialog::GetControlEnabled
PUBLIC	?SetControlEnabled@CDXUTDialog@@QAEXH_N@Z	; CDXUTDialog::SetControlEnabled
PUBLIC	?ClearRadioButtonGroup@CDXUTDialog@@QAEXI@Z	; CDXUTDialog::ClearRadioButtonGroup
PUBLIC	?ClearComboBox@CDXUTDialog@@QAEXH@Z		; CDXUTDialog::ClearComboBox
PUBLIC	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement
PUBLIC	?GetDefaultElement@CDXUTDialog@@QAEPAVCDXUTElement@@II@Z ; CDXUTDialog::GetDefaultElement
PUBLIC	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
PUBLIC	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
PUBLIC	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z	; CDXUTDialog::DrawRect
PUBLIC	?DrawPolyLine@CDXUTDialog@@QAEJPAUtagPOINT@@IK@Z ; CDXUTDialog::DrawPolyLine
PUBLIC	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite
PUBLIC	?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ; CDXUTDialog::CalcTextRect
PUBLIC	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
PUBLIC	?SetBackgroundColors@CDXUTDialog@@QAEXKKKK@Z	; CDXUTDialog::SetBackgroundColors
PUBLIC	?GetWidth@CDXUTDialog@@QAEHXZ			; CDXUTDialog::GetWidth
PUBLIC	?GetHeight@CDXUTDialog@@QAEHXZ			; CDXUTDialog::GetHeight
PUBLIC	?SetNextDialog@CDXUTDialog@@QAEXPAV1@@Z		; CDXUTDialog::SetNextDialog
PUBLIC	?GetNextControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z ; CDXUTDialog::GetNextControl
PUBLIC	?GetPrevControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z ; CDXUTDialog::GetPrevControl
PUBLIC	?RemoveControl@CDXUTDialog@@QAEXH@Z		; CDXUTDialog::RemoveControl
PUBLIC	?RemoveAllControls@CDXUTDialog@@QAEXXZ		; CDXUTDialog::RemoveAllControls
PUBLIC	?SetCallback@CDXUTDialog@@QAEXP6GXIHPAVCDXUTControl@@PAX@Z1@Z ; CDXUTDialog::SetCallback
PUBLIC	?Refresh@CDXUTDialog@@QAEXXZ			; CDXUTDialog::Refresh
PUBLIC	?OnRender@CDXUTDialog@@QAEJM@Z			; CDXUTDialog::OnRender
PUBLIC	?SetFont@CDXUTDialog@@QAEJIPBDJJ@Z		; CDXUTDialog::SetFont
PUBLIC	?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z	; CDXUTDialog::GetFont
PUBLIC	?SetTexture@CDXUTDialog@@QAEJIPBD@Z		; CDXUTDialog::SetTexture
PUBLIC	?GetTexture@CDXUTDialog@@QAEPAUDXUTTextureNode@@I@Z ; CDXUTDialog::GetTexture
PUBLIC	?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ ; CDXUTDialog::GetManager
PUBLIC	?ClearFocus@CDXUTDialog@@SAXXZ			; CDXUTDialog::ClearFocus
PUBLIC	?FocusDefaultControl@CDXUTDialog@@QAEXXZ	; CDXUTDialog::FocusDefaultControl
PUBLIC	?InitDefaultElements@CDXUTDialog@@AAEXXZ	; CDXUTDialog::InitDefaultElements
PUBLIC	?OnMouseMove@CDXUTDialog@@AAEXUtagPOINT@@@Z	; CDXUTDialog::OnMouseMove
PUBLIC	?OnMouseUp@CDXUTDialog@@AAEXUtagPOINT@@@Z	; CDXUTDialog::OnMouseUp
PUBLIC	?OnCycleFocus@CDXUTDialog@@AAE_N_N@Z		; CDXUTDialog::OnCycleFocus
PUBLIC	??0?$CGrowableArray@H@@QAE@XZ			; CGrowableArray<int>::CGrowableArray<int>
PUBLIC	??1?$CGrowableArray@H@@QAE@XZ			; CGrowableArray<int>::~CGrowableArray<int>
PUBLIC	?SetSize@?$CGrowableArray@H@@QAEJH@Z		; CGrowableArray<int>::SetSize
PUBLIC	?Add@?$CGrowableArray@H@@QAEJABH@Z		; CGrowableArray<int>::Add
PUBLIC	?SetAt@?$CGrowableArray@H@@QAEJHABH@Z		; CGrowableArray<int>::SetAt
PUBLIC	?GetAt@?$CGrowableArray@H@@QAEAAHH@Z		; CGrowableArray<int>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@H@@QBEHXZ		; CGrowableArray<int>::GetSize
PUBLIC	?RemoveAll@?$CGrowableArray@H@@QAEXXZ		; CGrowableArray<int>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@H@@IAEJH@Z	; CGrowableArray<int>::SetSizeInternal
PUBLIC	??0?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ	; CGrowableArray<CDXUTControl *>::CGrowableArray<CDXUTControl *>
PUBLIC	??1?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ	; CGrowableArray<CDXUTControl *>::~CGrowableArray<CDXUTControl *>
PUBLIC	?SetSize@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z ; CGrowableArray<CDXUTControl *>::SetSize
PUBLIC	?Add@?$CGrowableArray@PAVCDXUTControl@@@@QAEJABQAVCDXUTControl@@@Z ; CGrowableArray<CDXUTControl *>::Add
PUBLIC	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
PUBLIC	?Remove@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z ; CGrowableArray<CDXUTControl *>::Remove
PUBLIC	?RemoveAll@?$CGrowableArray@PAVCDXUTControl@@@@QAEXXZ ; CGrowableArray<CDXUTControl *>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@PAVCDXUTControl@@@@IAEJH@Z ; CGrowableArray<CDXUTControl *>::SetSizeInternal
PUBLIC	??0?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ ; CGrowableArray<DXUTElementHolder *>::CGrowableArray<DXUTElementHolder *>
PUBLIC	??1?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ ; CGrowableArray<DXUTElementHolder *>::~CGrowableArray<DXUTElementHolder *>
PUBLIC	?SetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJH@Z ; CGrowableArray<DXUTElementHolder *>::SetSize
PUBLIC	?Add@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJABQAUDXUTElementHolder@@@Z ; CGrowableArray<DXUTElementHolder *>::Add
PUBLIC	?GetAt@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEAAPAUDXUTElementHolder@@H@Z ; CGrowableArray<DXUTElementHolder *>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QBEHXZ ; CGrowableArray<DXUTElementHolder *>::GetSize
PUBLIC	?RemoveAll@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEXXZ ; CGrowableArray<DXUTElementHolder *>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@PAUDXUTElementHolder@@@@IAEJH@Z ; CGrowableArray<DXUTElementHolder *>::SetSizeInternal
PUBLIC	??0CDXUTDialogResourceManager@@QAE@XZ		; CDXUTDialogResourceManager::CDXUTDialogResourceManager
PUBLIC	??1CDXUTDialogResourceManager@@QAE@XZ		; CDXUTDialogResourceManager::~CDXUTDialogResourceManager
PUBLIC	?OnCreateDevice@CDXUTDialogResourceManager@@QAEJPAUIDirect3DDevice9@@@Z ; CDXUTDialogResourceManager::OnCreateDevice
PUBLIC	?OnResetDevice@CDXUTDialogResourceManager@@QAEJXZ ; CDXUTDialogResourceManager::OnResetDevice
PUBLIC	?OnLostDevice@CDXUTDialogResourceManager@@QAEXXZ ; CDXUTDialogResourceManager::OnLostDevice
PUBLIC	?OnDestroyDevice@CDXUTDialogResourceManager@@QAEXXZ ; CDXUTDialogResourceManager::OnDestroyDevice
PUBLIC	?MsgProc@CDXUTDialogResourceManager@@QAE_NPAUHWND__@@IIJ@Z ; CDXUTDialogResourceManager::MsgProc
PUBLIC	?AddFont@CDXUTDialogResourceManager@@QAEHPBDJJ@Z ; CDXUTDialogResourceManager::AddFont
PUBLIC	?AddTexture@CDXUTDialogResourceManager@@QAEHPBD@Z ; CDXUTDialogResourceManager::AddTexture
PUBLIC	?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z ; CDXUTDialogResourceManager::GetFontNode
PUBLIC	?GetTextureNode@CDXUTDialogResourceManager@@QAEPAUDXUTTextureNode@@H@Z ; CDXUTDialogResourceManager::GetTextureNode
PUBLIC	?GetD3DDevice@CDXUTDialogResourceManager@@QAEPAUIDirect3DDevice9@@XZ ; CDXUTDialogResourceManager::GetD3DDevice
PUBLIC	??0?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ ; CGrowableArray<DXUTTextureNode *>::CGrowableArray<DXUTTextureNode *>
PUBLIC	??1?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ ; CGrowableArray<DXUTTextureNode *>::~CGrowableArray<DXUTTextureNode *>
PUBLIC	?SetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJH@Z ; CGrowableArray<DXUTTextureNode *>::SetSize
PUBLIC	?Add@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJABQAUDXUTTextureNode@@@Z ; CGrowableArray<DXUTTextureNode *>::Add
PUBLIC	?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z ; CGrowableArray<DXUTTextureNode *>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ ; CGrowableArray<DXUTTextureNode *>::GetSize
PUBLIC	?RemoveAll@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEXXZ ; CGrowableArray<DXUTTextureNode *>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@PAUDXUTTextureNode@@@@IAEJH@Z ; CGrowableArray<DXUTTextureNode *>::SetSizeInternal
PUBLIC	??0?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ	; CGrowableArray<DXUTFontNode *>::CGrowableArray<DXUTFontNode *>
PUBLIC	??1?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ	; CGrowableArray<DXUTFontNode *>::~CGrowableArray<DXUTFontNode *>
PUBLIC	?SetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJH@Z ; CGrowableArray<DXUTFontNode *>::SetSize
PUBLIC	?Add@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJABQAUDXUTFontNode@@@Z ; CGrowableArray<DXUTFontNode *>::Add
PUBLIC	?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ; CGrowableArray<DXUTFontNode *>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ; CGrowableArray<DXUTFontNode *>::GetSize
PUBLIC	?RemoveAll@?$CGrowableArray@PAUDXUTFontNode@@@@QAEXXZ ; CGrowableArray<DXUTFontNode *>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@PAUDXUTFontNode@@@@IAEJH@Z ; CGrowableArray<DXUTFontNode *>::SetSizeInternal
PUBLIC	?CreateFontA@CDXUTDialogResourceManager@@QAEJI@Z ; CDXUTDialogResourceManager::CreateFontA
PUBLIC	?CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z ; CDXUTDialogResourceManager::CreateTexture
PUBLIC	??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z		; CDXUTControl::CDXUTControl
PUBLIC	??1CDXUTControl@@UAE@XZ				; CDXUTControl::~CDXUTControl
PUBLIC	?OnInit@CDXUTControl@@UAEJXZ			; CDXUTControl::OnInit
PUBLIC	?Refresh@CDXUTControl@@UAEXXZ			; CDXUTControl::Refresh
PUBLIC	?Render@CDXUTControl@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTControl::Render
PUBLIC	?MsgProc@CDXUTControl@@UAE_NIIJ@Z		; CDXUTControl::MsgProc
PUBLIC	?HandleKeyboard@CDXUTControl@@UAE_NIIJ@Z	; CDXUTControl::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTControl@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTControl::HandleMouse
PUBLIC	?CanHaveFocus@CDXUTControl@@UAE_NXZ		; CDXUTControl::CanHaveFocus
PUBLIC	?OnFocusIn@CDXUTControl@@UAEXXZ			; CDXUTControl::OnFocusIn
PUBLIC	?OnFocusOut@CDXUTControl@@UAEXXZ		; CDXUTControl::OnFocusOut
PUBLIC	?OnMouseEnter@CDXUTControl@@UAEXXZ		; CDXUTControl::OnMouseEnter
PUBLIC	?OnMouseLeave@CDXUTControl@@UAEXXZ		; CDXUTControl::OnMouseLeave
PUBLIC	?OnHotkey@CDXUTControl@@UAEXXZ			; CDXUTControl::OnHotkey
PUBLIC	?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z	; CDXUTControl::ContainsPoint
PUBLIC	?SetEnabled@CDXUTControl@@UAEX_N@Z		; CDXUTControl::SetEnabled
PUBLIC	?GetEnabled@CDXUTControl@@UAE_NXZ		; CDXUTControl::GetEnabled
PUBLIC	?SetVisible@CDXUTControl@@UAEX_N@Z		; CDXUTControl::SetVisible
PUBLIC	?GetVisible@CDXUTControl@@UAE_NXZ		; CDXUTControl::GetVisible
PUBLIC	?GetType@CDXUTControl@@QBEIXZ			; CDXUTControl::GetType
PUBLIC	?GetID@CDXUTControl@@QBEHXZ			; CDXUTControl::GetID
PUBLIC	?SetID@CDXUTControl@@QAEXH@Z			; CDXUTControl::SetID
PUBLIC	?SetLocation@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetLocation
PUBLIC	?SetSize@CDXUTControl@@QAEXHH@Z			; CDXUTControl::SetSize
PUBLIC	?SetHotkey@CDXUTControl@@QAEXI@Z		; CDXUTControl::SetHotkey
PUBLIC	?GetHotkey@CDXUTControl@@QAEIXZ			; CDXUTControl::GetHotkey
PUBLIC	?SetTextColor@CDXUTControl@@UAEXK@Z		; CDXUTControl::SetTextColor
PUBLIC	?GetElement@CDXUTControl@@QAEPAVCDXUTElement@@I@Z ; CDXUTControl::GetElement
PUBLIC	?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z ; CDXUTControl::SetElement
PUBLIC	??0?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ	; CGrowableArray<CDXUTElement *>::CGrowableArray<CDXUTElement *>
PUBLIC	??1?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ	; CGrowableArray<CDXUTElement *>::~CGrowableArray<CDXUTElement *>
PUBLIC	??A?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::operator[]
PUBLIC	?SetSize@?$CGrowableArray@PAVCDXUTElement@@@@QAEJH@Z ; CGrowableArray<CDXUTElement *>::SetSize
PUBLIC	?Add@?$CGrowableArray@PAVCDXUTElement@@@@QAEJABQAVCDXUTElement@@@Z ; CGrowableArray<CDXUTElement *>::Add
PUBLIC	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@PAVCDXUTElement@@@@QBEHXZ ; CGrowableArray<CDXUTElement *>::GetSize
PUBLIC	?RemoveAll@?$CGrowableArray@PAVCDXUTElement@@@@QAEXXZ ; CGrowableArray<CDXUTElement *>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@PAVCDXUTElement@@@@IAEJH@Z ; CGrowableArray<CDXUTElement *>::SetSizeInternal
PUBLIC	?UpdateRects@CDXUTControl@@MAEXXZ		; CDXUTControl::UpdateRects
PUBLIC	??_GCDXUTControl@@UAEPAXI@Z			; CDXUTControl::`scalar deleting destructor'
PUBLIC	??0DXUTElementHolder@@QAE@XZ			; DXUTElementHolder::DXUTElementHolder
PUBLIC	??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z		; CDXUTStatic::CDXUTStatic
PUBLIC	?Render@CDXUTStatic@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTStatic::Render
PUBLIC	?ContainsPoint@CDXUTStatic@@UAEHUtagPOINT@@@Z	; CDXUTStatic::ContainsPoint
PUBLIC	?GetTextCopy@CDXUTStatic@@QAEJPADI@Z		; CDXUTStatic::GetTextCopy
PUBLIC	?SetText@CDXUTStatic@@QAEJPBD@Z			; CDXUTStatic::SetText
PUBLIC	??1CDXUTStatic@@UAE@XZ				; CDXUTStatic::~CDXUTStatic
PUBLIC	??_GCDXUTStatic@@UAEPAXI@Z			; CDXUTStatic::`scalar deleting destructor'
PUBLIC	??0CDXUTButton@@QAE@PAVCDXUTDialog@@@Z		; CDXUTButton::CDXUTButton
PUBLIC	?HandleKeyboard@CDXUTButton@@UAE_NIIJ@Z		; CDXUTButton::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTButton@@UAE_NIUtagPOINT@@IJ@Z	; CDXUTButton::HandleMouse
PUBLIC	?OnHotkey@CDXUTButton@@UAEXXZ			; CDXUTButton::OnHotkey
PUBLIC	?ContainsPoint@CDXUTButton@@UAEHUtagPOINT@@@Z	; CDXUTButton::ContainsPoint
PUBLIC	?CanHaveFocus@CDXUTButton@@UAE_NXZ		; CDXUTButton::CanHaveFocus
PUBLIC	?Render@CDXUTButton@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTButton::Render
PUBLIC	??1CDXUTButton@@UAE@XZ				; CDXUTButton::~CDXUTButton
PUBLIC	??_GCDXUTButton@@UAEPAXI@Z			; CDXUTButton::`scalar deleting destructor'
PUBLIC	??0CDXUTCheckBox@@QAE@PAVCDXUTDialog@@@Z	; CDXUTCheckBox::CDXUTCheckBox
PUBLIC	?HandleKeyboard@CDXUTCheckBox@@UAE_NIIJ@Z	; CDXUTCheckBox::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTCheckBox@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTCheckBox::HandleMouse
PUBLIC	?OnHotkey@CDXUTCheckBox@@UAEXXZ			; CDXUTCheckBox::OnHotkey
PUBLIC	?ContainsPoint@CDXUTCheckBox@@UAEHUtagPOINT@@@Z	; CDXUTCheckBox::ContainsPoint
PUBLIC	?UpdateRects@CDXUTCheckBox@@UAEXXZ		; CDXUTCheckBox::UpdateRects
PUBLIC	?Render@CDXUTCheckBox@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTCheckBox::Render
PUBLIC	?SetChecked@CDXUTCheckBox@@QAEX_N@Z		; CDXUTCheckBox::SetChecked
PUBLIC	?SetCheckedInternal@CDXUTCheckBox@@MAEX_N0@Z	; CDXUTCheckBox::SetCheckedInternal
PUBLIC	??1CDXUTCheckBox@@UAE@XZ			; CDXUTCheckBox::~CDXUTCheckBox
PUBLIC	??_GCDXUTCheckBox@@UAEPAXI@Z			; CDXUTCheckBox::`scalar deleting destructor'
PUBLIC	??0CDXUTRadioButton@@QAE@PAVCDXUTDialog@@@Z	; CDXUTRadioButton::CDXUTRadioButton
PUBLIC	?HandleKeyboard@CDXUTRadioButton@@UAE_NIIJ@Z	; CDXUTRadioButton::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTRadioButton@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTRadioButton::HandleMouse
PUBLIC	?OnHotkey@CDXUTRadioButton@@UAEXXZ		; CDXUTRadioButton::OnHotkey
PUBLIC	?SetChecked@CDXUTRadioButton@@QAEX_N0@Z		; CDXUTRadioButton::SetChecked
PUBLIC	?SetButtonGroup@CDXUTRadioButton@@QAEXI@Z	; CDXUTRadioButton::SetButtonGroup
PUBLIC	?GetButtonGroup@CDXUTRadioButton@@QAEIXZ	; CDXUTRadioButton::GetButtonGroup
PUBLIC	?SetCheckedInternal@CDXUTRadioButton@@MAEX_N00@Z ; CDXUTRadioButton::SetCheckedInternal
PUBLIC	??1CDXUTRadioButton@@UAE@XZ			; CDXUTRadioButton::~CDXUTRadioButton
PUBLIC	??_GCDXUTRadioButton@@UAEPAXI@Z			; CDXUTRadioButton::`scalar deleting destructor'
PUBLIC	??0CDXUTScrollBar@@QAE@PAVCDXUTDialog@@@Z	; CDXUTScrollBar::CDXUTScrollBar
PUBLIC	??1CDXUTScrollBar@@UAE@XZ			; CDXUTScrollBar::~CDXUTScrollBar
PUBLIC	?HandleKeyboard@CDXUTScrollBar@@UAE_NIIJ@Z	; CDXUTScrollBar::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTScrollBar::HandleMouse
PUBLIC	?Render@CDXUTScrollBar@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTScrollBar::Render
PUBLIC	?UpdateRects@CDXUTScrollBar@@UAEXXZ		; CDXUTScrollBar::UpdateRects
PUBLIC	?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z		; CDXUTScrollBar::SetTrackRange
PUBLIC	?GetTrackPos@CDXUTScrollBar@@QAEHXZ		; CDXUTScrollBar::GetTrackPos
PUBLIC	?GetPageSize@CDXUTScrollBar@@QAEHXZ		; CDXUTScrollBar::GetPageSize
PUBLIC	?SetPageSize@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::SetPageSize
PUBLIC	?Scroll@CDXUTScrollBar@@QAEXH@Z			; CDXUTScrollBar::Scroll
PUBLIC	?ShowItem@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::ShowItem
PUBLIC	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ		; CDXUTScrollBar::UpdateThumbRect
PUBLIC	?Cap@CDXUTScrollBar@@IAEXXZ			; CDXUTScrollBar::Cap
PUBLIC	??_GCDXUTScrollBar@@UAEPAXI@Z			; CDXUTScrollBar::`scalar deleting destructor'
PUBLIC	??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z		; CDXUTListBox::CDXUTListBox
PUBLIC	??1CDXUTListBox@@UAE@XZ				; CDXUTListBox::~CDXUTListBox
PUBLIC	?OnInit@CDXUTListBox@@UAEJXZ			; CDXUTListBox::OnInit
PUBLIC	?CanHaveFocus@CDXUTListBox@@UAE_NXZ		; CDXUTListBox::CanHaveFocus
PUBLIC	?HandleKeyboard@CDXUTListBox@@UAE_NIIJ@Z	; CDXUTListBox::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTListBox@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTListBox::HandleMouse
PUBLIC	?Render@CDXUTListBox@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTListBox::Render
PUBLIC	?UpdateRects@CDXUTListBox@@UAEXXZ		; CDXUTListBox::UpdateRects
PUBLIC	?SetStyle@CDXUTListBox@@QAEXK@Z			; CDXUTListBox::SetStyle
PUBLIC	?AddItem@CDXUTListBox@@QAEJPBDPAX@Z		; CDXUTListBox::AddItem
PUBLIC	?InsertItem@CDXUTListBox@@QAEJHPBDPAX@Z		; CDXUTListBox::InsertItem
PUBLIC	?RemoveItem@CDXUTListBox@@QAEXH@Z		; CDXUTListBox::RemoveItem
PUBLIC	?RemoveItemByText@CDXUTListBox@@QAEXPAD@Z	; CDXUTListBox::RemoveItemByText
PUBLIC	?RemoveItemByData@CDXUTListBox@@QAEXPAX@Z	; CDXUTListBox::RemoveItemByData
PUBLIC	?RemoveAllItems@CDXUTListBox@@QAEXXZ		; CDXUTListBox::RemoveAllItems
PUBLIC	?GetItem@CDXUTListBox@@QAEPAUDXUTListBoxItem@@H@Z ; CDXUTListBox::GetItem
PUBLIC	?GetSelectedIndex@CDXUTListBox@@QAEHH@Z		; CDXUTListBox::GetSelectedIndex
PUBLIC	?SelectItem@CDXUTListBox@@QAEXH@Z		; CDXUTListBox::SelectItem
PUBLIC	??0?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTListBoxItem *>::CGrowableArray<DXUTListBoxItem *>
PUBLIC	??1?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTListBoxItem *>::~CGrowableArray<DXUTListBoxItem *>
PUBLIC	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
PUBLIC	?SetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z ; CGrowableArray<DXUTListBoxItem *>::SetSize
PUBLIC	?Add@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJABQAUDXUTListBoxItem@@@Z ; CGrowableArray<DXUTListBoxItem *>::Add
PUBLIC	?Insert@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJHABQAUDXUTListBoxItem@@@Z ; CGrowableArray<DXUTListBoxItem *>::Insert
PUBLIC	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
PUBLIC	?Remove@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z ; CGrowableArray<DXUTListBoxItem *>::Remove
PUBLIC	?RemoveAll@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEXXZ ; CGrowableArray<DXUTListBoxItem *>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@PAUDXUTListBoxItem@@@@IAEJH@Z ; CGrowableArray<DXUTListBoxItem *>::SetSizeInternal
PUBLIC	??_GCDXUTListBox@@UAEPAXI@Z			; CDXUTListBox::`scalar deleting destructor'
PUBLIC	??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z	; CDXUTComboBox::CDXUTComboBox
PUBLIC	??1CDXUTComboBox@@UAE@XZ			; CDXUTComboBox::~CDXUTComboBox
PUBLIC	?SetTextColor@CDXUTComboBox@@UAEXK@Z		; CDXUTComboBox::SetTextColor
PUBLIC	?OnInit@CDXUTComboBox@@UAEJXZ			; CDXUTComboBox::OnInit
PUBLIC	?HandleKeyboard@CDXUTComboBox@@UAE_NIIJ@Z	; CDXUTComboBox::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTComboBox@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTComboBox::HandleMouse
PUBLIC	?OnHotkey@CDXUTComboBox@@UAEXXZ			; CDXUTComboBox::OnHotkey
PUBLIC	?CanHaveFocus@CDXUTComboBox@@UAE_NXZ		; CDXUTComboBox::CanHaveFocus
PUBLIC	?OnFocusOut@CDXUTComboBox@@UAEXXZ		; CDXUTComboBox::OnFocusOut
PUBLIC	?Render@CDXUTComboBox@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTComboBox::Render
PUBLIC	?UpdateRects@CDXUTComboBox@@UAEXXZ		; CDXUTComboBox::UpdateRects
PUBLIC	?AddItem@CDXUTComboBox@@QAEJPBDPAX@Z		; CDXUTComboBox::AddItem
PUBLIC	?RemoveAllItems@CDXUTComboBox@@QAEXXZ		; CDXUTComboBox::RemoveAllItems
PUBLIC	?RemoveItem@CDXUTComboBox@@QAEXI@Z		; CDXUTComboBox::RemoveItem
PUBLIC	?ContainsItem@CDXUTComboBox@@QAE_NPBDI@Z	; CDXUTComboBox::ContainsItem
PUBLIC	?FindItem@CDXUTComboBox@@QAEHPBDI@Z		; CDXUTComboBox::FindItem
PUBLIC	?GetItemData@CDXUTComboBox@@QAEPAXPBD@Z		; CDXUTComboBox::GetItemData
PUBLIC	?GetItemData@CDXUTComboBox@@QAEPAXH@Z		; CDXUTComboBox::GetItemData
PUBLIC	?GetSelectedData@CDXUTComboBox@@QAEPAXXZ	; CDXUTComboBox::GetSelectedData
PUBLIC	?GetSelectedItem@CDXUTComboBox@@QAEPAUDXUTComboBoxItem@@XZ ; CDXUTComboBox::GetSelectedItem
PUBLIC	?GetNumItems@CDXUTComboBox@@QAEIXZ		; CDXUTComboBox::GetNumItems
PUBLIC	?SetSelectedByIndex@CDXUTComboBox@@QAEJI@Z	; CDXUTComboBox::SetSelectedByIndex
PUBLIC	?SetSelectedByText@CDXUTComboBox@@QAEJPBD@Z	; CDXUTComboBox::SetSelectedByText
PUBLIC	?SetSelectedByData@CDXUTComboBox@@QAEJPAX@Z	; CDXUTComboBox::SetSelectedByData
PUBLIC	??0?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTComboBoxItem *>::CGrowableArray<DXUTComboBoxItem *>
PUBLIC	??1?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTComboBoxItem *>::~CGrowableArray<DXUTComboBoxItem *>
PUBLIC	?SetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z ; CGrowableArray<DXUTComboBoxItem *>::SetSize
PUBLIC	?Add@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJABQAUDXUTComboBoxItem@@@Z ; CGrowableArray<DXUTComboBoxItem *>::Add
PUBLIC	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
PUBLIC	?Remove@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z ; CGrowableArray<DXUTComboBoxItem *>::Remove
PUBLIC	?RemoveAll@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEXXZ ; CGrowableArray<DXUTComboBoxItem *>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@PAUDXUTComboBoxItem@@@@IAEJH@Z ; CGrowableArray<DXUTComboBoxItem *>::SetSizeInternal
PUBLIC	??_GCDXUTComboBox@@UAEPAXI@Z			; CDXUTComboBox::`scalar deleting destructor'
PUBLIC	??0CDXUTSlider@@QAE@PAVCDXUTDialog@@@Z		; CDXUTSlider::CDXUTSlider
PUBLIC	?ContainsPoint@CDXUTSlider@@UAEHUtagPOINT@@@Z	; CDXUTSlider::ContainsPoint
PUBLIC	?CanHaveFocus@CDXUTSlider@@UAE_NXZ		; CDXUTSlider::CanHaveFocus
PUBLIC	?HandleKeyboard@CDXUTSlider@@UAE_NIIJ@Z		; CDXUTSlider::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTSlider@@UAE_NIUtagPOINT@@IJ@Z	; CDXUTSlider::HandleMouse
PUBLIC	?UpdateRects@CDXUTSlider@@UAEXXZ		; CDXUTSlider::UpdateRects
PUBLIC	?Render@CDXUTSlider@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTSlider::Render
PUBLIC	?SetValue@CDXUTSlider@@QAEXH@Z			; CDXUTSlider::SetValue
PUBLIC	?SetRange@CDXUTSlider@@QAEXHH@Z			; CDXUTSlider::SetRange
PUBLIC	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z	; CDXUTSlider::SetValueInternal
PUBLIC	?ValueFromPos@CDXUTSlider@@IAEHH@Z		; CDXUTSlider::ValueFromPos
PUBLIC	??1CDXUTSlider@@UAE@XZ				; CDXUTSlider::~CDXUTSlider
PUBLIC	??_GCDXUTSlider@@UAEPAXI@Z			; CDXUTSlider::`scalar deleting destructor'
PUBLIC	??0CUniBuffer@@QAE@H@Z				; CUniBuffer::CUniBuffer
PUBLIC	??1CUniBuffer@@QAE@XZ				; CUniBuffer::~CUniBuffer
PUBLIC	?Initialize@CUniBuffer@@SAXXZ			; CUniBuffer::Initialize
PUBLIC	?Uninitialize@CUniBuffer@@SAXXZ			; CUniBuffer::Uninitialize
PUBLIC	?GetBufferSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetBufferSize
PUBLIC	?SetBufferSize@CUniBuffer@@QAE_NH@Z		; CUniBuffer::SetBufferSize
PUBLIC	?GetTextSize@CUniBuffer@@QAEHXZ			; CUniBuffer::GetTextSize
PUBLIC	?GetBuffer@CUniBuffer@@QAEPBDXZ			; CUniBuffer::GetBuffer
PUBLIC	??ACUniBuffer@@QAEAADH@Z			; CUniBuffer::operator[]
PUBLIC	?SetFontNode@CUniBuffer@@QAEXPAUDXUTFontNode@@@Z ; CUniBuffer::SetFontNode
PUBLIC	?Clear@CUniBuffer@@QAEXXZ			; CUniBuffer::Clear
PUBLIC	?InsertChar@CUniBuffer@@QAE_NHD@Z		; CUniBuffer::InsertChar
PUBLIC	?RemoveChar@CUniBuffer@@QAE_NH@Z		; CUniBuffer::RemoveChar
PUBLIC	?InsertString@CUniBuffer@@QAE_NHPBDH@Z		; CUniBuffer::InsertString
PUBLIC	?SetText@CUniBuffer@@QAE_NPBD@Z			; CUniBuffer::SetText
PUBLIC	?CPtoX@CUniBuffer@@QAEJHHPAH@Z			; CUniBuffer::CPtoX
PUBLIC	?XtoCP@CUniBuffer@@QAEJHPAH0@Z			; CUniBuffer::XtoCP
PUBLIC	?GetPriorItemPos@CUniBuffer@@QAEXHPAH@Z		; CUniBuffer::GetPriorItemPos
PUBLIC	?GetNextItemPos@CUniBuffer@@QAEXHPAH@Z		; CUniBuffer::GetNextItemPos
PUBLIC	?Analyse@CUniBuffer@@AAEJXZ			; CUniBuffer::Analyse
PUBLIC	??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z		; CDXUTEditBox::CDXUTEditBox
PUBLIC	??1CDXUTEditBox@@UAE@XZ				; CDXUTEditBox::~CDXUTEditBox
PUBLIC	?HandleKeyboard@CDXUTEditBox@@UAE_NIIJ@Z	; CDXUTEditBox::HandleKeyboard
PUBLIC	?HandleMouse@CDXUTEditBox@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTEditBox::HandleMouse
PUBLIC	?MsgProc@CDXUTEditBox@@UAE_NIIJ@Z		; CDXUTEditBox::MsgProc
PUBLIC	?UpdateRects@CDXUTEditBox@@UAEXXZ		; CDXUTEditBox::UpdateRects
PUBLIC	?CanHaveFocus@CDXUTEditBox@@UAE_NXZ		; CDXUTEditBox::CanHaveFocus
PUBLIC	?Render@CDXUTEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTEditBox::Render
PUBLIC	?OnFocusIn@CDXUTEditBox@@UAEXXZ			; CDXUTEditBox::OnFocusIn
PUBLIC	?SetText@CDXUTEditBox@@QAEXPBD_N@Z		; CDXUTEditBox::SetText
PUBLIC	?GetTextCopy@CDXUTEditBox@@QAEJPADI@Z		; CDXUTEditBox::GetTextCopy
PUBLIC	?ClearText@CDXUTEditBox@@QAEXXZ			; CDXUTEditBox::ClearText
PUBLIC	?SetTextColor@CDXUTEditBox@@UAEXK@Z		; CDXUTEditBox::SetTextColor
PUBLIC	?ParseFloatArray@CDXUTEditBox@@QAEXPAMH@Z	; CDXUTEditBox::ParseFloatArray
PUBLIC	?SetTextFloatArray@CDXUTEditBox@@QAEXPBMH@Z	; CDXUTEditBox::SetTextFloatArray
PUBLIC	?PlaceCaret@CDXUTEditBox@@IAEXH@Z		; CDXUTEditBox::PlaceCaret
PUBLIC	?DeleteSelectionText@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::DeleteSelectionText
PUBLIC	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ		; CDXUTEditBox::ResetCaretBlink
PUBLIC	?CopyToClipboard@CDXUTEditBox@@IAEXXZ		; CDXUTEditBox::CopyToClipboard
PUBLIC	?PasteFromClipboard@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::PasteFromClipboard
PUBLIC	??_GCDXUTEditBox@@UAEPAXI@Z			; CDXUTEditBox::`scalar deleting destructor'
PUBLIC	??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z	; CDXUTIMEEditBox::CDXUTIMEEditBox
PUBLIC	??1CDXUTIMEEditBox@@UAE@XZ			; CDXUTIMEEditBox::~CDXUTIMEEditBox
PUBLIC	?Initialize@CDXUTIMEEditBox@@SAXXZ		; CDXUTIMEEditBox::Initialize
PUBLIC	?Uninitialize@CDXUTIMEEditBox@@SAXXZ		; CDXUTIMEEditBox::Uninitialize
PUBLIC	?StaticOnCreateDevice@CDXUTIMEEditBox@@SAJXZ	; CDXUTIMEEditBox::StaticOnCreateDevice
PUBLIC	?StaticMsgProc@CDXUTIMEEditBox@@SA_NIIJ@Z	; CDXUTIMEEditBox::StaticMsgProc
PUBLIC	?EnableImeSystem@CDXUTIMEEditBox@@SAX_N@Z	; CDXUTIMEEditBox::EnableImeSystem
PUBLIC	?Render@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTIMEEditBox::Render
PUBLIC	?MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z		; CDXUTIMEEditBox::MsgProc
PUBLIC	?HandleMouse@CDXUTIMEEditBox@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTIMEEditBox::HandleMouse
PUBLIC	?UpdateRects@CDXUTIMEEditBox@@UAEXXZ		; CDXUTIMEEditBox::UpdateRects
PUBLIC	?OnFocusIn@CDXUTIMEEditBox@@UAEXXZ		; CDXUTIMEEditBox::OnFocusIn
PUBLIC	?OnFocusOut@CDXUTIMEEditBox@@UAEXXZ		; CDXUTIMEEditBox::OnFocusOut
PUBLIC	?RenderCandidateReadingWindow@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M_N@Z ; CDXUTIMEEditBox::RenderCandidateReadingWindow
PUBLIC	?RenderComposition@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTIMEEditBox::RenderComposition
PUBLIC	?RenderIndicator@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTIMEEditBox::RenderIndicator
PUBLIC	?GetLanguage@CDXUTIMEEditBox@@KAGXZ		; CDXUTIMEEditBox::GetLanguage
PUBLIC	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetPrimaryLanguage
PUBLIC	?GetSubLanguage@CDXUTIMEEditBox@@KAGXZ		; CDXUTIMEEditBox::GetSubLanguage
PUBLIC	?SendKey@CDXUTIMEEditBox@@KAXE@Z		; CDXUTIMEEditBox::SendKey
PUBLIC	?GetImeId@CDXUTIMEEditBox@@KAKI@Z		; CDXUTIMEEditBox::GetImeId
PUBLIC	?CheckInputLocale@CDXUTIMEEditBox@@KAXXZ	; CDXUTIMEEditBox::CheckInputLocale
PUBLIC	?CheckToggleState@CDXUTIMEEditBox@@KAXXZ	; CDXUTIMEEditBox::CheckToggleState
PUBLIC	?SetupImeApi@CDXUTIMEEditBox@@KAXXZ		; CDXUTIMEEditBox::SetupImeApi
PUBLIC	?ResetCompositionString@CDXUTIMEEditBox@@KAXXZ	; CDXUTIMEEditBox::ResetCompositionString
PUBLIC	?TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z	; CDXUTIMEEditBox::TruncateCompString
PUBLIC	?FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z	; CDXUTIMEEditBox::FinalizeString
PUBLIC	?GetReadingWindowOrientation@CDXUTIMEEditBox@@KAXK@Z ; CDXUTIMEEditBox::GetReadingWindowOrientation
PUBLIC	?GetPrivateReadingString@CDXUTIMEEditBox@@KAXXZ	; CDXUTIMEEditBox::GetPrivateReadingString
PUBLIC	?SendCompString@CDXUTIMEEditBox@@IAEXXZ		; CDXUTIMEEditBox::SendCompString
PUBLIC	??0CCandList@CDXUTIMEEditBox@@QAE@XZ		; CDXUTIMEEditBox::CCandList::CCandList
PUBLIC	??1CCandList@CDXUTIMEEditBox@@QAE@XZ		; CDXUTIMEEditBox::CCandList::~CCandList
PUBLIC	??0?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::CGrowableArray<CDXUTIMEEditBox::CInputLocale>
PUBLIC	??1?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::~CGrowableArray<CDXUTIMEEditBox::CInputLocale>
PUBLIC	?SetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJH@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSize
PUBLIC	?Add@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJABUCInputLocale@CDXUTIMEEditBox@@@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::Add
PUBLIC	?GetAt@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEAAUCInputLocale@CDXUTIMEEditBox@@H@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::GetAt
PUBLIC	?GetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QBEHXZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::GetSize
PUBLIC	?RemoveAll@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEXXZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::RemoveAll
PUBLIC	?SetSizeInternal@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@IAEJH@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSizeInternal
PUBLIC	??_GCDXUTIMEEditBox@@UAEPAXI@Z			; CDXUTIMEEditBox::`scalar deleting destructor'
PUBLIC	?RectWidth@@YAHAAUtagRECT@@@Z			; RectWidth
PUBLIC	?RectHeight@@YAHAAUtagRECT@@@Z			; RectHeight
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CDXUTControl@@6B@				; CDXUTControl::`vftable'
PUBLIC	??_7CDXUTStatic@@6B@				; CDXUTStatic::`vftable'
PUBLIC	??_7CDXUTButton@@6B@				; CDXUTButton::`vftable'
PUBLIC	??_7CDXUTCheckBox@@6B@				; CDXUTCheckBox::`vftable'
PUBLIC	??_7CDXUTRadioButton@@6B@			; CDXUTRadioButton::`vftable'
PUBLIC	??_7CDXUTScrollBar@@6B@				; CDXUTScrollBar::`vftable'
PUBLIC	??_7CDXUTListBox@@6B@				; CDXUTListBox::`vftable'
PUBLIC	??_7CDXUTComboBox@@6B@				; CDXUTComboBox::`vftable'
PUBLIC	??_7CDXUTSlider@@6B@				; CDXUTSlider::`vftable'
PUBLIC	??_7CDXUTEditBox@@6B@				; CDXUTEditBox::`vftable'
PUBLIC	?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A	; CDXUTIMEEditBox::s_CompString
PUBLIC	?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A	; CDXUTIMEEditBox::s_CandList
PUBLIC	?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A ; CDXUTIMEEditBox::s_Locale
PUBLIC	??_7CDXUTIMEEditBox@@6B@			; CDXUTIMEEditBox::`vftable'
PUBLIC	?__LINE__Var@?1??SetCallback@CDXUTDialog@@QAEXP6GXIHPAVCDXUTControl@@PAX@Z1@Z@4JA ; `CDXUTDialog::SetCallback'::`2'::__LINE__Var
PUBLIC	??_C@_0EC@INLDDICL@To?5fix?5call?5CDXUTDialog?3?3Init?$CI?$CJ?5@ ; `string'
PUBLIC	??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	??_C@_1LE@JLCOLCJL@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AA?5?$AAf?$AAi?$AAx?$AA?5?$AAc?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?1??OnCreateDevice@CDXUTDialogResourceManager@@QAEJPAUIDirect3DDevice9@@@Z@4JA ; `CDXUTDialogResourceManager::OnCreateDevice'::`2'::__LINE__Var
PUBLIC	??_C@_0BB@OBNOFHEC@D3DXCreateSprite?$AA@	; `string'
PUBLIC	??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@ ; `string'
PUBLIC	?__LINE__Var@?1??OnRender@CDXUTDialog@@QAEJM@Z@4JA ; `CDXUTDialog::OnRender'::`2'::__LINE__Var
PUBLIC	??_C@_0FJ@OFKGNHOL@To?5fix?5hook?5up?5CDXUTDialogResour@ ; `string'
PUBLIC	??_C@_1BCM@NAODPGLM@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAD?$AA3?$AAD?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA_@ ; `string'
PUBLIC	??_C@_0N@EHHLLFIF@?5?$CIMinimized?$CJ?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??SetFont@CDXUTDialog@@QAEJIPBDJJ@Z@4JA ; `CDXUTDialog::SetFont'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??SetTexture@CDXUTDialog@@QAEJIPBD@Z@4JA ; `CDXUTDialog::SetTexture'::`2'::__LINE__Var
PUBLIC	??_C@_0BM@EKOPLJBN@CDXUTDialog?3?3MsgProc?$CIMOUSE?$CJ?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z@4JA ; `CDXUTDialog::AddControl'::`2'::__LINE__Var
PUBLIC	??_C@_0BJ@NMGKIFBC@CDXUTDialog?3?3InitControl?$AA@ ; `string'
PUBLIC	??_C@_0BE@PJMOKIGM@CGrowableArray?3?3Add?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??OnCycleFocus@CDXUTDialog@@AAE_N_N@Z@4JA ; `CDXUTDialog::OnCycleFocus'::`2'::__LINE__Var
PUBLIC	??_C@_0DO@CFELJLCL@CDXUTDialog?3?5Multiple?5dialogs?5ar@ ; `string'
PUBLIC	??_C@_0DH@CFMKICLK@CDXUTDialogResourceManager?3?3Crea@ ; `string'
PUBLIC	?__LINE__Var@?1??CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z@4JA ; `CDXUTDialogResourceManager::CreateTexture'::`2'::__LINE__Var
PUBLIC	??_C@_0BK@NOJEPBKH@DXUTFindDXSDKMediaFileCch?$AA@ ; `string'
PUBLIC	??_C@_0BM@CBAPLCDC@D3DXCreateTextureFromFileEx?$AA@ ; `string'
PUBLIC	??_C@_0M@GAAOCDFL@dxutgui?4png?$AA@		; `string'
PUBLIC	??_C@_05MPFIAJAP@Arial?$AA@			; `string'
PUBLIC	??_C@_0BJ@OLOOAJCD@CDXUTButton?3?3HandleMouse?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??AddItem@CDXUTComboBox@@QAEJPBDPAX@Z@4JA ; `CDXUTComboBox::AddItem'::`2'::__LINE__Var
PUBLIC	??_C@_03CLCAEGCJ@new?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??GetItemData@CDXUTComboBox@@QAEPAXPBD@Z@4JA ; `CDXUTComboBox::GetItemData'::`2'::__LINE__Var
PUBLIC	??_C@_0BG@JAGODAII@CGrowableArray?3?3GetAt?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??PlaceCaret@CDXUTEditBox@@IAEXH@Z@4JA ; `CDXUTEditBox::PlaceCaret'::`2'::__LINE__Var
PUBLIC	??_C@_1FE@INHINDLN@?$AAn?$AAC?$AAP?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAC?$AAP?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AA_?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAG?$AAe?$AAt?$AAT@ ; `string'
PUBLIC	?__LINE__Var@?1??SetText@CDXUTEditBox@@QAEXPBD_N@Z@4JA ; `CDXUTEditBox::SetText'::`2'::__LINE__Var
PUBLIC	??_C@_1CA@PMHPGCBD@?$AAw?$AAs?$AAz?$AAT?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetTextCopy@CDXUTEditBox@@QAEJPADI@Z@4JA ; `CDXUTEditBox::GetTextCopy'::`2'::__LINE__Var
PUBLIC	??_C@_1BA@LIOJNBNF@?$AAs?$AAt?$AAr?$AAD?$AAe?$AAs?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_05MBDKKHHK@?$CF?44f?5?$AA@		; `string'
PUBLIC	??_C@_0N@FFMHCBAD@TINTLGNT?4IME?$AA@		; `string'
PUBLIC	??_C@_0N@JMLDIBIB@CINTLGNT?4IME?$AA@		; `string'
PUBLIC	??_C@_0N@FHDFFBN@MSTCIPHA?4IME?$AA@		; `string'
PUBLIC	??_C@_0N@JFHOELJF@PINTLGNT?4IME?$AA@		; `string'
PUBLIC	??_C@_0N@ONOBNHOE@MSSCIPYA?4IME?$AA@		; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0BB@EOIFCLLM@GetReadingString?$AA@	; `string'
PUBLIC	??_C@_0BC@MEELNKEC@ShowReadingWindow?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z@4JA ; `CDXUTIMEEditBox::TruncateCompString'::`2'::__LINE__Var
PUBLIC	??_C@_1EI@PNFNGNLA@?$AAi?$AAN?$AAe?$AAw?$AAS?$AAt?$AAr?$AAL?$AAe?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAi?$AAN?$AAe?$AAw?$AAS?$AAt?$AAr?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN@ ; `string'
PUBLIC	??_C@_0DG@PFMNNKP@CDXUTIMEEditBox?3?3FinalizeString?3@ ; `string'
PUBLIC	??_C@_0CL@PCFEMFCF@software?2microsoft?2windows?2curre@ ; `string'
PUBLIC	??_C@_07DEJAPC@MSTCIPH?$AA@			; `string'
PUBLIC	??_C@_08LMKCILHO@TINTLGNT?$AA@			; `string'
PUBLIC	??_C@_0BB@KFOMJFEN@Keyboard?5Mapping?$AA@	; `string'
PUBLIC	??_C@_0BE@GLEPKDNP@WM_INPUTLANGCHANGE?6?$AA@	; `string'
PUBLIC	??_C@_0BD@BNFMLOBE@WM_IME_SETCONTEXT?6?$AA@	; `string'
PUBLIC	??_C@_0BJ@NNLCHIHF@WM_IME_STARTCOMPOSITION?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@CDAMKNCN@WM_IME_COMPOSITION?6?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA ; `CDXUTIMEEditBox::MsgProc'::`2'::__LINE__Var
PUBLIC	??_C@_0DJ@IHHHAIEO@To?5fix?0?5call?5CDXUTDialogResource@ ; `string'
PUBLIC	??_C@_1LA@NJBLLMDF@?$AAm?$AA_?$AAb?$AAI?$AAM?$AAE?$AAS?$AAt?$AAa?$AAt?$AAi?$AAc?$AAM?$AAs?$AAg?$AAP?$AAr?$AAo?$AAc?$AAC?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo@ ; `string'
PUBLIC	??_C@_0BB@CNOGDNAM@?5?5GCS_RESULTSTR?6?$AA@	; `string'
PUBLIC	??_C@_0P@NDDGOCDK@?5?5GCS_COMPSTR?6?$AA@	; `string'
PUBLIC	??_C@_0BH@BGPMFOJC@WM_IME_ENDCOMPOSITION?6?$AA@	; `string'
PUBLIC	??_C@_0BC@EAGJPPFG@WM_IME_NOTIFY?5?$CFu?6?$AA@	; `string'
PUBLIC	??_C@_0BJ@ONBLFOKJ@?5?5IMN_SETCONVERSIONMODE?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@BJFGBGLB@?5?5IMN_SETOPENSTATUS?6?$AA@	; `string'
PUBLIC	??_C@_0BH@NOIBGFFB@?5?5IMN_CHANGECANDIDATE?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@BOLGLHEB@?5?5IMN_OPENCANDIDATE?6?$AA@	; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5?$AA@			; `string'
PUBLIC	??_C@_0BG@DOILBMAC@?5?5IMN_CLOSECANDIDATE?6?$AA@ ; `string'
PUBLIC	??_C@_0P@PGCPFIAP@?5?5IMN_PRIVATE?6?$AA@	; `string'
PUBLIC	??_C@_0L@NLJMGPDJ@?2usp10?4dll?$AA@		; `string'
PUBLIC	??_C@_0BN@GIMDAPPD@ScriptApplyDigitSubstitution?$AA@ ; `string'
PUBLIC	??_C@_0BE@DPDJMHJ@ScriptStringAnalyse?$AA@	; `string'
PUBLIC	??_C@_0BC@NCOCHMDF@ScriptStringCPtoX?$AA@	; `string'
PUBLIC	??_C@_0BC@PBCEOCLL@ScriptStringXtoCP?$AA@	; `string'
PUBLIC	??_C@_0BB@KPJJNIOI@ScriptStringFree?$AA@	; `string'
PUBLIC	??_C@_0BG@ENNDDIIO@ScriptString_pLogAttr?$AA@	; `string'
PUBLIC	??_C@_0BI@NIMEAFDJ@ScriptString_pcOutChars?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??InsertChar@CUniBuffer@@QAE_NHD@Z@4JA ; `CUniBuffer::InsertChar'::`2'::__LINE__Var
PUBLIC	??_C@_1BI@EFNELFHP@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@LHICNCCG@?$AAm?$AA_?$AAn?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??InsertString@CUniBuffer@@QAE_NHPBDH@Z@4JA ; `CUniBuffer::InsertString'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??SetText@CUniBuffer@@QAE_NPBD@Z@4JA ; `CUniBuffer::SetText'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??CPtoX@CUniBuffer@@QAEJHHPAH@Z@4JA ; `CUniBuffer::CPtoX'::`2'::__LINE__Var
PUBLIC	??_C@_15ELKGHENA@?$AAp?$AAX?$AA?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??XtoCP@CUniBuffer@@QAEJHPAH0@Z@4JA ; `CUniBuffer::XtoCP'::`2'::__LINE__Var
PUBLIC	??_C@_1BO@KHKNKHIE@?$AAp?$AAC?$AAP?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AAn?$AAT?$AAr?$AAa?$AAi?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@LPOFADGE@?2imm32?4dll?$AA@		; `string'
PUBLIC	??_C@_0L@JGAMEFKO@ImmLockIMC?$AA@		; `string'
PUBLIC	??_C@_0N@PDIACEGP@ImmUnlockIMC?$AA@		; `string'
PUBLIC	??_C@_0M@OKKMJOGM@ImmLockIMCC?$AA@		; `string'
PUBLIC	??_C@_0O@GKKOACL@ImmUnlockIMCC?$AA@		; `string'
PUBLIC	??_C@_0BL@MBEANDFB@ImmDisableTextFrameService?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BIPOEMOA@ImmGetCompositionStringW?$AA@ ; `string'
PUBLIC	??_C@_0BF@INEDHPDK@ImmGetCandidateListW?$AA@	; `string'
PUBLIC	??_C@_0O@KCHCFLMC@ImmGetContext?$AA@		; `string'
PUBLIC	??_C@_0BC@OCDKEPCD@ImmReleaseContext?$AA@	; `string'
PUBLIC	??_C@_0BE@BDEIBNIK@ImmAssociateContext?$AA@	; `string'
PUBLIC	??_C@_0BB@GAPKNCDL@ImmGetOpenStatus?$AA@	; `string'
PUBLIC	??_C@_0BB@BPOEGBEM@ImmSetOpenStatus?$AA@	; `string'
PUBLIC	??_C@_0BH@GMNMAKPF@ImmGetConversionStatus?$AA@	; `string'
PUBLIC	??_C@_0BE@LPNAGBML@ImmGetDefaultIMEWnd?$AA@	; `string'
PUBLIC	??_C@_0BD@GDCNBOJF@ImmGetIMEFileNameA?$AA@	; `string'
PUBLIC	??_C@_0BB@CEHHIDO@ImmGetVirtualKey?$AA@		; `string'
PUBLIC	??_C@_0N@OLIMKHEA@ImmNotifyIME?$AA@		; `string'
PUBLIC	??_C@_0BH@MCPHEKIJ@ImmSetConversionStatus?$AA@	; `string'
PUBLIC	??_C@_0BC@OMCMFCHK@ImmSimulateHotKey?$AA@	; `string'
PUBLIC	??_C@_08EPDNLFJN@ImmIsIME?$AA@			; `string'
PUBLIC	??_C@_0N@HAEJINEE@?2version?4dll?$AA@		; `string'
PUBLIC	??_C@_0P@EGBPEC@VerQueryValueA?$AA@		; `string'
PUBLIC	??_C@_0BE@JIHADGJK@GetFileVersionInfoA?$AA@	; `string'
PUBLIC	??_C@_0BI@FKDAHLLJ@GetFileVersionInfoSizeA?$AA@	; `string'
PUBLIC	??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ ; `string'
PUBLIC	??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_R4CDXUTControl@@6B@				; CDXUTControl::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTControl@@@8			; CDXUTControl `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTControl@@8				; CDXUTControl::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTControl@@8				; CDXUTControl::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTControl@@8			; CDXUTControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTButton@@6B@				; CDXUTButton::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTButton@@@8				; CDXUTButton `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTButton@@8				; CDXUTButton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTButton@@8				; CDXUTButton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTButton@@8			; CDXUTButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CDXUTStatic@@8			; CDXUTStatic::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCDXUTStatic@@@8				; CDXUTStatic `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTStatic@@8				; CDXUTStatic::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTStatic@@8				; CDXUTStatic::`RTTI Base Class Array'
PUBLIC	??_R4CDXUTStatic@@6B@				; CDXUTStatic::`RTTI Complete Object Locator'
PUBLIC	??_R4CDXUTCheckBox@@6B@				; CDXUTCheckBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTCheckBox@@@8			; CDXUTCheckBox `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTCheckBox@@8				; CDXUTCheckBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTCheckBox@@8				; CDXUTCheckBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTCheckBox@@8			; CDXUTCheckBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTRadioButton@@6B@			; CDXUTRadioButton::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTRadioButton@@@8			; CDXUTRadioButton `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTRadioButton@@8			; CDXUTRadioButton::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTRadioButton@@8			; CDXUTRadioButton::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTRadioButton@@8		; CDXUTRadioButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTComboBox@@6B@				; CDXUTComboBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTComboBox@@@8			; CDXUTComboBox `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTComboBox@@8				; CDXUTComboBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTComboBox@@8				; CDXUTComboBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTComboBox@@8			; CDXUTComboBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTSlider@@6B@				; CDXUTSlider::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTSlider@@@8				; CDXUTSlider `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTSlider@@8				; CDXUTSlider::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTSlider@@8				; CDXUTSlider::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTSlider@@8			; CDXUTSlider::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTEditBox@@6B@				; CDXUTEditBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTEditBox@@@8			; CDXUTEditBox `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTEditBox@@8				; CDXUTEditBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTEditBox@@8				; CDXUTEditBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTEditBox@@8			; CDXUTEditBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTIMEEditBox@@6B@			; CDXUTIMEEditBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTIMEEditBox@@@8			; CDXUTIMEEditBox `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTIMEEditBox@@8				; CDXUTIMEEditBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTIMEEditBox@@8				; CDXUTIMEEditBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTIMEEditBox@@8		; CDXUTIMEEditBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTListBox@@6B@				; CDXUTListBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTListBox@@@8			; CDXUTListBox `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTListBox@@8				; CDXUTListBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTListBox@@8				; CDXUTListBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTListBox@@8			; CDXUTListBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CDXUTScrollBar@@6B@			; CDXUTScrollBar::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTScrollBar@@@8			; CDXUTScrollBar `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTScrollBar@@8				; CDXUTScrollBar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTScrollBar@@8				; CDXUTScrollBar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTScrollBar@@8			; CDXUTScrollBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3b808081
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f333333
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3fa00000
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fd51eb851eb851f
PUBLIC	__real@41200000
PUBLIC	__real@41f00000
PUBLIC	__real@437f0000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_tolower:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__strnicmp:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	__imp__GetProcessHeap@0:PROC
EXTRN	__imp__GetSystemDirectoryA@8:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	__imp__GlobalLock@4:PROC
EXTRN	__imp__GlobalUnlock@4:PROC
EXTRN	__imp__GlobalFree@4:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__GetKeyboardLayoutList@8:PROC
EXTRN	__imp__GetKeyboardLayout@4:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__PostMessageW@16:PROC
EXTRN	__imp__OpenClipboard@4:PROC
EXTRN	__imp__CloseClipboard@0:PROC
EXTRN	__imp__SetClipboardData@8:PROC
EXTRN	__imp__GetClipboardData@4:PROC
EXTRN	__imp__EmptyClipboard@0:PROC
EXTRN	__imp__GetFocus@0:PROC
EXTRN	__imp__GetKeyState@4:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__keybd_event@16:PROC
EXTRN	__imp__SetCapture@4:PROC
EXTRN	__imp__ReleaseCapture@0:PROC
EXTRN	__imp__GetCaretBlinkTime@0:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	__imp__SetRectEmpty@4:PROC
EXTRN	__imp__InflateRect@12:PROC
EXTRN	__imp__IntersectRect@12:PROC
EXTRN	__imp__OffsetRect@12:PROC
EXTRN	__imp__PtInRect@12:PROC
EXTRN	__imp__SystemParametersInfoA@16:PROC
EXTRN	__imp__CompareStringA@24:PROC
EXTRN	__imp__GetLocaleInfoA@16:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	_abs:PROC
EXTRN	_strtod:PROC
EXTRN	_free:PROC
EXTRN	_realloc:PROC
EXTRN	__wassert:PROC
EXTRN	_pow:PROC
EXTRN	__vsnprintf:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_D3DXMatrixScaling@16:PROC
EXTRN	_D3DXCreateSprite@8:PROC
EXTRN	_D3DXCreateFontA@48:PROC
EXTRN	_D3DXCreateTextureFromFileExA@56:PROC
EXTRN	?DXTraceWrapper@@YGJPBDKJ0H@Z:PROC		; DXTraceWrapper
EXTRN	?DXUTGetHWND@@YAPAUHWND__@@XZ:PROC		; DXUTGetHWND
EXTRN	?DXUTGetTime@@YANXZ:PROC			; DXUTGetTime
EXTRN	?DXUTGetAutomation@@YA_NXZ:PROC			; DXUTGetAutomation
EXTRN	?GetAbsoluteTime@CDXUTTimer@@QAENXZ:PROC	; CDXUTTimer::GetAbsoluteTime
EXTRN	?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ:PROC	; DXUTGetGlobalTimer
EXTRN	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z:PROC	; DXUTFindDXSDKMediaFileCch
EXTRN	?DXUTOutputDebugStringA@@YAXPBDZZ:PROC		; DXUTOutputDebugStringA
EXTRN	?DXUTTrace@@YGJPBDKJ0_N@Z:PROC			; DXUTTrace
EXTRN	??_ECDXUTControl@@UAEPAXI@Z:PROC		; CDXUTControl::`vector deleting destructor'
EXTRN	??_ECDXUTStatic@@UAEPAXI@Z:PROC			; CDXUTStatic::`vector deleting destructor'
EXTRN	??_ECDXUTButton@@UAEPAXI@Z:PROC			; CDXUTButton::`vector deleting destructor'
EXTRN	??_ECDXUTCheckBox@@UAEPAXI@Z:PROC		; CDXUTCheckBox::`vector deleting destructor'
EXTRN	??_ECDXUTRadioButton@@UAEPAXI@Z:PROC		; CDXUTRadioButton::`vector deleting destructor'
EXTRN	??_ECDXUTScrollBar@@UAEPAXI@Z:PROC		; CDXUTScrollBar::`vector deleting destructor'
EXTRN	??_ECDXUTListBox@@UAEPAXI@Z:PROC		; CDXUTListBox::`vector deleting destructor'
EXTRN	??_ECDXUTComboBox@@UAEPAXI@Z:PROC		; CDXUTComboBox::`vector deleting destructor'
EXTRN	??_ECDXUTSlider@@UAEPAXI@Z:PROC			; CDXUTSlider::`vector deleting destructor'
EXTRN	??_ECDXUTEditBox@@UAEPAXI@Z:PROC		; CDXUTEditBox::`vector deleting destructor'
EXTRN	??_ECDXUTIMEEditBox@@UAEPAXI@Z:PROC		; CDXUTIMEEditBox::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A DB 011H DUP (?) ; CDXUTIMEEditBox::s_CompString
	ALIGN	4

?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A DB 0a3aH DUP (?) ; CDXUTIMEEditBox::s_CandList
	ALIGN	4

?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A DB 0cH DUP (?) ; CDXUTIMEEditBox::s_Locale
?bDrag@?9??MsgProc@CDXUTDialog@@QAE_NPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `CDXUTDialog::MsgProc'::`10'::bDrag
	ALIGN	4

?bSBInit@?3??Render@CDXUTComboBox@@UAEXPAUIDirect3DDevice9@@M@Z@4_NA DB 01H DUP (?) ; `CDXUTComboBox::Render'::`4'::bSBInit
	ALIGN	4

?ThumbOffsetY@?1??HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z@4HA DD 01H DUP (?) ; `CDXUTScrollBar::HandleMouse'::`2'::ThumbOffsetY
?bDrag@?1??HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z@4_NA DB 01H DUP (?) ; `CDXUTScrollBar::HandleMouse'::`2'::bDrag
	ALIGN	4

?bSBInit@?6??Render@CDXUTListBox@@UAEXPAUIDirect3DDevice9@@M@Z@4_NA DB 01H DUP (?) ; `CDXUTListBox::Render'::`7'::bSBInit
_BSS	ENDS
CRT$XCU	SEGMENT
?s_CompString$initializer$@CDXUTIMEEditBox@@1P6AXXZA DD FLAT:??__E?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A@@YAXXZ ; CDXUTIMEEditBox::s_CompString$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3fd51eb851eb851f
CONST	SEGMENT
__real@3fd51eb851eb851f DQ 03fd51eb851eb851fr	; 0.33
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa00000
CONST	SEGMENT
__real@3fa00000 DD 03fa00000r			; 1.25
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTScrollBar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTScrollBar@@8 DD FLAT:??_R0?AVCDXUTScrollBar@@@8 ; CDXUTScrollBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTScrollBar@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTScrollBar@@8
rdata$r	SEGMENT
??_R2CDXUTScrollBar@@8 DD FLAT:??_R1A@?0A@EA@CDXUTScrollBar@@8 ; CDXUTScrollBar::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTScrollBar@@8
rdata$r	SEGMENT
??_R3CDXUTScrollBar@@8 DD 00H				; CDXUTScrollBar::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDXUTScrollBar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTScrollBar@@@8
data$r	SEGMENT
??_R0?AVCDXUTScrollBar@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTScrollBar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTScrollBar@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTScrollBar@@6B@
rdata$r	SEGMENT
??_R4CDXUTScrollBar@@6B@ DD 00H				; CDXUTScrollBar::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTScrollBar@@@8
	DD	FLAT:??_R3CDXUTScrollBar@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTListBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTListBox@@8 DD FLAT:??_R0?AVCDXUTListBox@@@8 ; CDXUTListBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTListBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTListBox@@8
rdata$r	SEGMENT
??_R2CDXUTListBox@@8 DD FLAT:??_R1A@?0A@EA@CDXUTListBox@@8 ; CDXUTListBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTListBox@@8
rdata$r	SEGMENT
??_R3CDXUTListBox@@8 DD 00H				; CDXUTListBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDXUTListBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTListBox@@@8
data$r	SEGMENT
??_R0?AVCDXUTListBox@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTListBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTListBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTListBox@@6B@
rdata$r	SEGMENT
??_R4CDXUTListBox@@6B@ DD 00H				; CDXUTListBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTListBox@@@8
	DD	FLAT:??_R3CDXUTListBox@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTIMEEditBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTIMEEditBox@@8 DD FLAT:??_R0?AVCDXUTIMEEditBox@@@8 ; CDXUTIMEEditBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTIMEEditBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTIMEEditBox@@8
rdata$r	SEGMENT
??_R2CDXUTIMEEditBox@@8 DD FLAT:??_R1A@?0A@EA@CDXUTIMEEditBox@@8 ; CDXUTIMEEditBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTEditBox@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTIMEEditBox@@8
rdata$r	SEGMENT
??_R3CDXUTIMEEditBox@@8 DD 00H				; CDXUTIMEEditBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CDXUTIMEEditBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTIMEEditBox@@@8
data$r	SEGMENT
??_R0?AVCDXUTIMEEditBox@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTIMEEditBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTIMEEditBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTIMEEditBox@@6B@
rdata$r	SEGMENT
??_R4CDXUTIMEEditBox@@6B@ DD 00H			; CDXUTIMEEditBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTIMEEditBox@@@8
	DD	FLAT:??_R3CDXUTIMEEditBox@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTEditBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTEditBox@@8 DD FLAT:??_R0?AVCDXUTEditBox@@@8 ; CDXUTEditBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTEditBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTEditBox@@8
rdata$r	SEGMENT
??_R2CDXUTEditBox@@8 DD FLAT:??_R1A@?0A@EA@CDXUTEditBox@@8 ; CDXUTEditBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTEditBox@@8
rdata$r	SEGMENT
??_R3CDXUTEditBox@@8 DD 00H				; CDXUTEditBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDXUTEditBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTEditBox@@@8
data$r	SEGMENT
??_R0?AVCDXUTEditBox@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTEditBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTEditBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTEditBox@@6B@
rdata$r	SEGMENT
??_R4CDXUTEditBox@@6B@ DD 00H				; CDXUTEditBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTEditBox@@@8
	DD	FLAT:??_R3CDXUTEditBox@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTSlider@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTSlider@@8 DD FLAT:??_R0?AVCDXUTSlider@@@8 ; CDXUTSlider::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTSlider@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTSlider@@8
rdata$r	SEGMENT
??_R2CDXUTSlider@@8 DD FLAT:??_R1A@?0A@EA@CDXUTSlider@@8 ; CDXUTSlider::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTSlider@@8
rdata$r	SEGMENT
??_R3CDXUTSlider@@8 DD 00H				; CDXUTSlider::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDXUTSlider@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTSlider@@@8
data$r	SEGMENT
??_R0?AVCDXUTSlider@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTSlider `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTSlider@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTSlider@@6B@
rdata$r	SEGMENT
??_R4CDXUTSlider@@6B@ DD 00H				; CDXUTSlider::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTSlider@@@8
	DD	FLAT:??_R3CDXUTSlider@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTComboBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTComboBox@@8 DD FLAT:??_R0?AVCDXUTComboBox@@@8 ; CDXUTComboBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTComboBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTComboBox@@8
rdata$r	SEGMENT
??_R2CDXUTComboBox@@8 DD FLAT:??_R1A@?0A@EA@CDXUTComboBox@@8 ; CDXUTComboBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTButton@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTStatic@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTComboBox@@8
rdata$r	SEGMENT
??_R3CDXUTComboBox@@8 DD 00H				; CDXUTComboBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CDXUTComboBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTComboBox@@@8
data$r	SEGMENT
??_R0?AVCDXUTComboBox@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTComboBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTComboBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTComboBox@@6B@
rdata$r	SEGMENT
??_R4CDXUTComboBox@@6B@ DD 00H				; CDXUTComboBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTComboBox@@@8
	DD	FLAT:??_R3CDXUTComboBox@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTRadioButton@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTRadioButton@@8 DD FLAT:??_R0?AVCDXUTRadioButton@@@8 ; CDXUTRadioButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTRadioButton@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTRadioButton@@8
rdata$r	SEGMENT
??_R2CDXUTRadioButton@@8 DD FLAT:??_R1A@?0A@EA@CDXUTRadioButton@@8 ; CDXUTRadioButton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTCheckBox@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTButton@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTStatic@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTRadioButton@@8
rdata$r	SEGMENT
??_R3CDXUTRadioButton@@8 DD 00H				; CDXUTRadioButton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CDXUTRadioButton@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTRadioButton@@@8
data$r	SEGMENT
??_R0?AVCDXUTRadioButton@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTRadioButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTRadioButton@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTRadioButton@@6B@
rdata$r	SEGMENT
??_R4CDXUTRadioButton@@6B@ DD 00H			; CDXUTRadioButton::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTRadioButton@@@8
	DD	FLAT:??_R3CDXUTRadioButton@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTCheckBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTCheckBox@@8 DD FLAT:??_R0?AVCDXUTCheckBox@@@8 ; CDXUTCheckBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTCheckBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTCheckBox@@8
rdata$r	SEGMENT
??_R2CDXUTCheckBox@@8 DD FLAT:??_R1A@?0A@EA@CDXUTCheckBox@@8 ; CDXUTCheckBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTButton@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTStatic@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTCheckBox@@8
rdata$r	SEGMENT
??_R3CDXUTCheckBox@@8 DD 00H				; CDXUTCheckBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CDXUTCheckBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTCheckBox@@@8
data$r	SEGMENT
??_R0?AVCDXUTCheckBox@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTCheckBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTCheckBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTCheckBox@@6B@
rdata$r	SEGMENT
??_R4CDXUTCheckBox@@6B@ DD 00H				; CDXUTCheckBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTCheckBox@@@8
	DD	FLAT:??_R3CDXUTCheckBox@@8
rdata$r	ENDS
;	COMDAT ??_R4CDXUTStatic@@6B@
rdata$r	SEGMENT
??_R4CDXUTStatic@@6B@ DD 00H				; CDXUTStatic::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTStatic@@@8
	DD	FLAT:??_R3CDXUTStatic@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTStatic@@8
rdata$r	SEGMENT
??_R2CDXUTStatic@@8 DD FLAT:??_R1A@?0A@EA@CDXUTStatic@@8 ; CDXUTStatic::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTStatic@@8
rdata$r	SEGMENT
??_R3CDXUTStatic@@8 DD 00H				; CDXUTStatic::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDXUTStatic@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTStatic@@@8
data$r	SEGMENT
??_R0?AVCDXUTStatic@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTStatic `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTStatic@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTStatic@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTStatic@@8 DD FLAT:??_R0?AVCDXUTStatic@@@8 ; CDXUTStatic::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTStatic@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTButton@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTButton@@8 DD FLAT:??_R0?AVCDXUTButton@@@8 ; CDXUTButton::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTButton@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTButton@@8
rdata$r	SEGMENT
??_R2CDXUTButton@@8 DD FLAT:??_R1A@?0A@EA@CDXUTButton@@8 ; CDXUTButton::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDXUTStatic@@8
	DD	FLAT:??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R3CDXUTButton@@8
rdata$r	SEGMENT
??_R3CDXUTButton@@8 DD 00H				; CDXUTButton::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CDXUTButton@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTButton@@@8
data$r	SEGMENT
??_R0?AVCDXUTButton@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTButton `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTButton@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTButton@@6B@
rdata$r	SEGMENT
??_R4CDXUTButton@@6B@ DD 00H				; CDXUTButton::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTButton@@@8
	DD	FLAT:??_R3CDXUTButton@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTControl@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTControl@@8 DD FLAT:??_R0?AVCDXUTControl@@@8 ; CDXUTControl::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTControl@@8
rdata$r	SEGMENT
??_R2CDXUTControl@@8 DD FLAT:??_R1A@?0A@EA@CDXUTControl@@8 ; CDXUTControl::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDXUTControl@@8
rdata$r	SEGMENT
??_R3CDXUTControl@@8 DD 00H				; CDXUTControl::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTControl@@@8
data$r	SEGMENT
??_R0?AVCDXUTControl@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTControl `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTControl@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTControl@@6B@
rdata$r	SEGMENT
??_R4CDXUTControl@@6B@ DD 00H				; CDXUTControl::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTControl@@@8
	DD	FLAT:??_R3CDXUTControl@@8
rdata$r	ENDS
;	COMDAT ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H
	DB	'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'n'
	DB	00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'n', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'n'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 's', 00H, 'a', 00H, 'c', 00H
	DB	'o', 00H, '\', 00H, 'd', 00H, '3', 00H, 'd', 00H, '9', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'd', 00H, 'x', 00H, 'u', 00H, 't', 00H, 'm', 00H, 'i'
	DB	00H, 's', 00H, 'c', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FKDAHLLJ@GetFileVersionInfoSizeA?$AA@
CONST	SEGMENT
??_C@_0BI@FKDAHLLJ@GetFileVersionInfoSizeA?$AA@ DB 'GetFileVersionInfoSiz'
	DB	'eA', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JIHADGJK@GetFileVersionInfoA?$AA@
CONST	SEGMENT
??_C@_0BE@JIHADGJK@GetFileVersionInfoA?$AA@ DB 'GetFileVersionInfoA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EGBPEC@VerQueryValueA?$AA@
CONST	SEGMENT
??_C@_0P@EGBPEC@VerQueryValueA?$AA@ DB 'VerQueryValueA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HAEJINEE@?2version?4dll?$AA@
CONST	SEGMENT
??_C@_0N@HAEJINEE@?2version?4dll?$AA@ DB '\version.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPDNLFJN@ImmIsIME?$AA@
CONST	SEGMENT
??_C@_08EPDNLFJN@ImmIsIME?$AA@ DB 'ImmIsIME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMCMFCHK@ImmSimulateHotKey?$AA@
CONST	SEGMENT
??_C@_0BC@OMCMFCHK@ImmSimulateHotKey?$AA@ DB 'ImmSimulateHotKey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MCPHEKIJ@ImmSetConversionStatus?$AA@
CONST	SEGMENT
??_C@_0BH@MCPHEKIJ@ImmSetConversionStatus?$AA@ DB 'ImmSetConversionStatus'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OLIMKHEA@ImmNotifyIME?$AA@
CONST	SEGMENT
??_C@_0N@OLIMKHEA@ImmNotifyIME?$AA@ DB 'ImmNotifyIME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CEHHIDO@ImmGetVirtualKey?$AA@
CONST	SEGMENT
??_C@_0BB@CEHHIDO@ImmGetVirtualKey?$AA@ DB 'ImmGetVirtualKey', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GDCNBOJF@ImmGetIMEFileNameA?$AA@
CONST	SEGMENT
??_C@_0BD@GDCNBOJF@ImmGetIMEFileNameA?$AA@ DB 'ImmGetIMEFileNameA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LPNAGBML@ImmGetDefaultIMEWnd?$AA@
CONST	SEGMENT
??_C@_0BE@LPNAGBML@ImmGetDefaultIMEWnd?$AA@ DB 'ImmGetDefaultIMEWnd', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GMNMAKPF@ImmGetConversionStatus?$AA@
CONST	SEGMENT
??_C@_0BH@GMNMAKPF@ImmGetConversionStatus?$AA@ DB 'ImmGetConversionStatus'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BPOEGBEM@ImmSetOpenStatus?$AA@
CONST	SEGMENT
??_C@_0BB@BPOEGBEM@ImmSetOpenStatus?$AA@ DB 'ImmSetOpenStatus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GAPKNCDL@ImmGetOpenStatus?$AA@
CONST	SEGMENT
??_C@_0BB@GAPKNCDL@ImmGetOpenStatus?$AA@ DB 'ImmGetOpenStatus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BDEIBNIK@ImmAssociateContext?$AA@
CONST	SEGMENT
??_C@_0BE@BDEIBNIK@ImmAssociateContext?$AA@ DB 'ImmAssociateContext', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCDKEPCD@ImmReleaseContext?$AA@
CONST	SEGMENT
??_C@_0BC@OCDKEPCD@ImmReleaseContext?$AA@ DB 'ImmReleaseContext', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KCHCFLMC@ImmGetContext?$AA@
CONST	SEGMENT
??_C@_0O@KCHCFLMC@ImmGetContext?$AA@ DB 'ImmGetContext', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@INEDHPDK@ImmGetCandidateListW?$AA@
CONST	SEGMENT
??_C@_0BF@INEDHPDK@ImmGetCandidateListW?$AA@ DB 'ImmGetCandidateListW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BIPOEMOA@ImmGetCompositionStringW?$AA@
CONST	SEGMENT
??_C@_0BJ@BIPOEMOA@ImmGetCompositionStringW?$AA@ DB 'ImmGetCompositionStr'
	DB	'ingW', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MBEANDFB@ImmDisableTextFrameService?$AA@
CONST	SEGMENT
??_C@_0BL@MBEANDFB@ImmDisableTextFrameService?$AA@ DB 'ImmDisableTextFram'
	DB	'eService', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GKKOACL@ImmUnlockIMCC?$AA@
CONST	SEGMENT
??_C@_0O@GKKOACL@ImmUnlockIMCC?$AA@ DB 'ImmUnlockIMCC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OKKMJOGM@ImmLockIMCC?$AA@
CONST	SEGMENT
??_C@_0M@OKKMJOGM@ImmLockIMCC?$AA@ DB 'ImmLockIMCC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PDIACEGP@ImmUnlockIMC?$AA@
CONST	SEGMENT
??_C@_0N@PDIACEGP@ImmUnlockIMC?$AA@ DB 'ImmUnlockIMC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGAMEFKO@ImmLockIMC?$AA@
CONST	SEGMENT
??_C@_0L@JGAMEFKO@ImmLockIMC?$AA@ DB 'ImmLockIMC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LPOFADGE@?2imm32?4dll?$AA@
CONST	SEGMENT
??_C@_0L@LPOFADGE@?2imm32?4dll?$AA@ DB '\imm32.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@KHKNKHIE@?$AAp?$AAC?$AAP?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AAn?$AAT?$AAr?$AAa?$AAi?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@KHKNKHIE@?$AAp?$AAC?$AAP?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AAn?$AAT?$AAr?$AAa?$AAi?$AAl?$AA?$AA@ DB 'p'
	DB	00H, 'C', 00H, 'P', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'p', 00H, 'n', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??XtoCP@CUniBuffer@@QAEJHPAH0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??XtoCP@CUniBuffer@@QAEJHPAH0@Z@4JA DD 01d36H ; `CUniBuffer::XtoCP'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_15ELKGHENA@?$AAp?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_15ELKGHENA@?$AAp?$AAX?$AA?$AA@ DB 'p', 00H, 'X', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??CPtoX@CUniBuffer@@QAEJHHPAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CPtoX@CUniBuffer@@QAEJHHPAH@Z@4JA DD 01d25H ; `CUniBuffer::CPtoX'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??SetText@CUniBuffer@@QAE_NPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetText@CUniBuffer@@QAE_NPBD@Z@4JA DD 01d0bH ; `CUniBuffer::SetText'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??InsertString@CUniBuffer@@QAE_NHPBDH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InsertString@CUniBuffer@@QAE_NHPBDH@Z@4JA DD 01ceeH ; `CUniBuffer::InsertString'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CG@LHICNCCG@?$AAm?$AA_?$AAn?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@LHICNCCG@?$AAm?$AA_?$AAn?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@ DB 'm'
	DB	00H, '_', 00H, 'n', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	'e', 00H, 'r', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@EFNELFHP@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@EFNELFHP@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InsertChar@CUniBuffer@@QAE_NHD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InsertChar@CUniBuffer@@QAE_NHD@Z@4JA DD 01cb5H ; `CUniBuffer::InsertChar'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@NIMEAFDJ@ScriptString_pcOutChars?$AA@
CONST	SEGMENT
??_C@_0BI@NIMEAFDJ@ScriptString_pcOutChars?$AA@ DB 'ScriptString_pcOutCha'
	DB	'rs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ENNDDIIO@ScriptString_pLogAttr?$AA@
CONST	SEGMENT
??_C@_0BG@ENNDDIIO@ScriptString_pLogAttr?$AA@ DB 'ScriptString_pLogAttr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KPJJNIOI@ScriptStringFree?$AA@
CONST	SEGMENT
??_C@_0BB@KPJJNIOI@ScriptStringFree?$AA@ DB 'ScriptStringFree', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PBCEOCLL@ScriptStringXtoCP?$AA@
CONST	SEGMENT
??_C@_0BC@PBCEOCLL@ScriptStringXtoCP?$AA@ DB 'ScriptStringXtoCP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NCOCHMDF@ScriptStringCPtoX?$AA@
CONST	SEGMENT
??_C@_0BC@NCOCHMDF@ScriptStringCPtoX?$AA@ DB 'ScriptStringCPtoX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DPDJMHJ@ScriptStringAnalyse?$AA@
CONST	SEGMENT
??_C@_0BE@DPDJMHJ@ScriptStringAnalyse?$AA@ DB 'ScriptStringAnalyse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GIMDAPPD@ScriptApplyDigitSubstitution?$AA@
CONST	SEGMENT
??_C@_0BN@GIMDAPPD@ScriptApplyDigitSubstitution?$AA@ DB 'ScriptApplyDigit'
	DB	'Substitution', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NLJMGPDJ@?2usp10?4dll?$AA@
CONST	SEGMENT
??_C@_0L@NLJMGPDJ@?2usp10?4dll?$AA@ DB '\usp10.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PGCPFIAP@?5?5IMN_PRIVATE?6?$AA@
CONST	SEGMENT
??_C@_0P@PGCPFIAP@?5?5IMN_PRIVATE?6?$AA@ DB '  IMN_PRIVATE', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DOILBMAC@?5?5IMN_CLOSECANDIDATE?6?$AA@
CONST	SEGMENT
??_C@_0BG@DOILBMAC@?5?5IMN_CLOSECANDIDATE?6?$AA@ DB '  IMN_CLOSECANDIDATE'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5?$AA@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5?$AA@ DB '%s ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BOLGLHEB@?5?5IMN_OPENCANDIDATE?6?$AA@
CONST	SEGMENT
??_C@_0BF@BOLGLHEB@?5?5IMN_OPENCANDIDATE?6?$AA@ DB '  IMN_OPENCANDIDATE', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NOIBGFFB@?5?5IMN_CHANGECANDIDATE?6?$AA@
CONST	SEGMENT
??_C@_0BH@NOIBGFFB@?5?5IMN_CHANGECANDIDATE?6?$AA@ DB '  IMN_CHANGECANDIDA'
	DB	'TE', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJFGBGLB@?5?5IMN_SETOPENSTATUS?6?$AA@
CONST	SEGMENT
??_C@_0BF@BJFGBGLB@?5?5IMN_SETOPENSTATUS?6?$AA@ DB '  IMN_SETOPENSTATUS', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ONBLFOKJ@?5?5IMN_SETCONVERSIONMODE?6?$AA@
CONST	SEGMENT
??_C@_0BJ@ONBLFOKJ@?5?5IMN_SETCONVERSIONMODE?6?$AA@ DB '  IMN_SETCONVERSI'
	DB	'ONMODE', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EAGJPPFG@WM_IME_NOTIFY?5?$CFu?6?$AA@
CONST	SEGMENT
??_C@_0BC@EAGJPPFG@WM_IME_NOTIFY?5?$CFu?6?$AA@ DB 'WM_IME_NOTIFY %u', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BGPMFOJC@WM_IME_ENDCOMPOSITION?6?$AA@
CONST	SEGMENT
??_C@_0BH@BGPMFOJC@WM_IME_ENDCOMPOSITION?6?$AA@ DB 'WM_IME_ENDCOMPOSITION'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NDDGOCDK@?5?5GCS_COMPSTR?6?$AA@
CONST	SEGMENT
??_C@_0P@NDDGOCDK@?5?5GCS_COMPSTR?6?$AA@ DB '  GCS_COMPSTR', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CNOGDNAM@?5?5GCS_RESULTSTR?6?$AA@
CONST	SEGMENT
??_C@_0BB@CNOGDNAM@?5?5GCS_RESULTSTR?6?$AA@ DB '  GCS_RESULTSTR', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LA@NJBLLMDF@?$AAm?$AA_?$AAb?$AAI?$AAM?$AAE?$AAS?$AAt?$AAa?$AAt?$AAi?$AAc?$AAM?$AAs?$AAg?$AAP?$AAr?$AAo?$AAc?$AAC?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo@
CONST	SEGMENT
??_C@_1LA@NJBLLMDF@?$AAm?$AA_?$AAb?$AAI?$AAM?$AAE?$AAS?$AAt?$AAa?$AAt?$AAi?$AAc?$AAM?$AAs?$AAg?$AAP?$AAr?$AAo?$AAc?$AAC?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo@ DB 'm'
	DB	00H, '_', 00H, 'b', 00H, 'I', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'M', 00H, 's'
	DB	00H, 'g', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'C', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'x', 00H, ',', 00H, ' ', 00H, 'c', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, ' ', 00H, 'C', 00H, 'D', 00H, 'X', 00H
	DB	'U', 00H, 'T', 00H, 'D', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'o'
	DB	00H, 'g', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, 'M', 00H, 'a', 00H, 'n', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H, 'M', 00H
	DB	's', 00H, 'g', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H
	DB	't', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@IHHHAIEO@To?5fix?0?5call?5CDXUTDialogResource@
CONST	SEGMENT
??_C@_0DJ@IHHHAIEO@To?5fix?0?5call?5CDXUTDialogResource@ DB 'To fix, call'
	DB	' CDXUTDialogResourceManager::MsgProc() first', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA DD 018c5H ; `CDXUTIMEEditBox::MsgProc'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BE@CDAMKNCN@WM_IME_COMPOSITION?6?$AA@
CONST	SEGMENT
??_C@_0BE@CDAMKNCN@WM_IME_COMPOSITION?6?$AA@ DB 'WM_IME_COMPOSITION', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NNLCHIHF@WM_IME_STARTCOMPOSITION?6?$AA@
CONST	SEGMENT
??_C@_0BJ@NNLCHIHF@WM_IME_STARTCOMPOSITION?6?$AA@ DB 'WM_IME_STARTCOMPOSI'
	DB	'TION', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BNFMLOBE@WM_IME_SETCONTEXT?6?$AA@
CONST	SEGMENT
??_C@_0BD@BNFMLOBE@WM_IME_SETCONTEXT?6?$AA@ DB 'WM_IME_SETCONTEXT', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GLEPKDNP@WM_INPUTLANGCHANGE?6?$AA@
CONST	SEGMENT
??_C@_0BE@GLEPKDNP@WM_INPUTLANGCHANGE?6?$AA@ DB 'WM_INPUTLANGCHANGE', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KFOMJFEN@Keyboard?5Mapping?$AA@
CONST	SEGMENT
??_C@_0BB@KFOMJFEN@Keyboard?5Mapping?$AA@ DB 'Keyboard Mapping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMKCILHO@TINTLGNT?$AA@
CONST	SEGMENT
??_C@_08LMKCILHO@TINTLGNT?$AA@ DB 'TINTLGNT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DEJAPC@MSTCIPH?$AA@
CONST	SEGMENT
??_C@_07DEJAPC@MSTCIPH?$AA@ DB 'MSTCIPH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PCFEMFCF@software?2microsoft?2windows?2curre@
CONST	SEGMENT
??_C@_0CL@PCFEMFCF@software?2microsoft?2windows?2curre@ DB 'software\micr'
	DB	'osoft\windows\currentversion\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@PFMNNKP@CDXUTIMEEditBox?3?3FinalizeString?3@
CONST	SEGMENT
??_C@_0DG@PFMNNKP@CDXUTIMEEditBox?3?3FinalizeString?3@ DB 'CDXUTIMEEditBo'
	DB	'x::FinalizeString: Reentrant detected!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@PNFNGNLA@?$AAi?$AAN?$AAe?$AAw?$AAS?$AAt?$AAr?$AAL?$AAe?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAi?$AAN?$AAe?$AAw?$AAS?$AAt?$AAr?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN@
CONST	SEGMENT
??_C@_1EI@PNFNGNLA@?$AAi?$AAN?$AAe?$AAw?$AAS?$AAt?$AAr?$AAL?$AAe?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAi?$AAN?$AAe?$AAw?$AAS?$AAt?$AAr?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN@ DB 'i'
	DB	00H, 'N', 00H, 'e', 00H, 'w', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'L', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'i', 00H
	DB	'N', 00H, 'e', 00H, 'w', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'L'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'c', 00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z@4JA DD 016d2H ; `CDXUTIMEEditBox::TruncateCompString'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@MEELNKEC@ShowReadingWindow?$AA@
CONST	SEGMENT
??_C@_0BC@MEELNKEC@ShowReadingWindow?$AA@ DB 'ShowReadingWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EOIFCLLM@GetReadingString?$AA@
CONST	SEGMENT
??_C@_0BB@EOIFCLLM@GetReadingString?$AA@ DB 'GetReadingString', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ONOBNHOE@MSSCIPYA?4IME?$AA@
CONST	SEGMENT
??_C@_0N@ONOBNHOE@MSSCIPYA?4IME?$AA@ DB 'MSSCIPYA.IME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JFHOELJF@PINTLGNT?4IME?$AA@
CONST	SEGMENT
??_C@_0N@JFHOELJF@PINTLGNT?4IME?$AA@ DB 'PINTLGNT.IME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FHDFFBN@MSTCIPHA?4IME?$AA@
CONST	SEGMENT
??_C@_0N@FHDFFBN@MSTCIPHA?4IME?$AA@ DB 'MSTCIPHA.IME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JMLDIBIB@CINTLGNT?4IME?$AA@
CONST	SEGMENT
??_C@_0N@JMLDIBIB@CINTLGNT?4IME?$AA@ DB 'CINTLGNT.IME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FFMHCBAD@TINTLGNT?4IME?$AA@
CONST	SEGMENT
??_C@_0N@FFMHCBAD@TINTLGNT?4IME?$AA@ DB 'TINTLGNT.IME', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBDKKHHK@?$CF?44f?5?$AA@
CONST	SEGMENT
??_C@_05MBDKKHHK@?$CF?44f?5?$AA@ DB '%.4f ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@LIOJNBNF@?$AAs?$AAt?$AAr?$AAD?$AAe?$AAs?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@LIOJNBNF@?$AAs?$AAt?$AAr?$AAD?$AAe?$AAs?$AAt?$AA?$AA@ DB 's', 00H
	DB	't', 00H, 'r', 00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetTextCopy@CDXUTEditBox@@QAEJPADI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetTextCopy@CDXUTEditBox@@QAEJPADI@Z@4JA DD 012d5H ; `CDXUTEditBox::GetTextCopy'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CA@PMHPGCBD@?$AAw?$AAs?$AAz?$AAT?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@PMHPGCBD@?$AAw?$AAs?$AAz?$AAT?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'w'
	DB	00H, 's', 00H, 'z', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetText@CDXUTEditBox@@QAEXPBD_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetText@CDXUTEditBox@@QAEXPBD_N@Z@4JA DD 012c8H ; `CDXUTEditBox::SetText'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FE@INHINDLN@?$AAn?$AAC?$AAP?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAC?$AAP?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AA_?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAG?$AAe?$AAt?$AAT@
CONST	SEGMENT
??_C@_1FE@INHINDLN@?$AAn?$AAC?$AAP?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAC?$AAP?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AA_?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAG?$AAe?$AAt?$AAT@ DB 'n'
	DB	00H, 'C', 00H, 'P', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, 'C'
	DB	00H, 'P', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'm', 00H
	DB	'_', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, '.', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'T', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??PlaceCaret@CDXUTEditBox@@IAEXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??PlaceCaret@CDXUTEditBox@@IAEXH@Z@4JA DD 0128eH ; `CDXUTEditBox::PlaceCaret'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@JAGODAII@CGrowableArray?3?3GetAt?$AA@
CONST	SEGMENT
??_C@_0BG@JAGODAII@CGrowableArray?3?3GetAt?$AA@ DB 'CGrowableArray::GetAt'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetItemData@CDXUTComboBox@@QAEPAXPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetItemData@CDXUTComboBox@@QAEPAXPBD@Z@4JA DD 0d42H ; `CDXUTComboBox::GetItemData'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03CLCAEGCJ@new?$AA@
CONST	SEGMENT
??_C@_03CLCAEGCJ@new?$AA@ DB 'new', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AddItem@CDXUTComboBox@@QAEJPBDPAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddItem@CDXUTComboBox@@QAEJPBDPAX@Z@4JA DD 0cd1H ; `CDXUTComboBox::AddItem'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BJ@OLOOAJCD@CDXUTButton?3?3HandleMouse?$AA@
CONST	SEGMENT
??_C@_0BJ@OLOOAJCD@CDXUTButton?3?3HandleMouse?$AA@ DB 'CDXUTButton::Handl'
	DB	'eMouse', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPFIAJAP@Arial?$AA@
CONST	SEGMENT
??_C@_05MPFIAJAP@Arial?$AA@ DB 'Arial', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAAOCDFL@dxutgui?4png?$AA@
CONST	SEGMENT
??_C@_0M@GAAOCDFL@dxutgui?4png?$AA@ DB 'dxutgui.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CBAPLCDC@D3DXCreateTextureFromFileEx?$AA@
CONST	SEGMENT
??_C@_0BM@CBAPLCDC@D3DXCreateTextureFromFileEx?$AA@ DB 'D3DXCreateTexture'
	DB	'FromFileEx', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NOJEPBKH@DXUTFindDXSDKMediaFileCch?$AA@
CONST	SEGMENT
??_C@_0BK@NOJEPBKH@DXUTFindDXSDKMediaFileCch?$AA@ DB 'DXUTFindDXSDKMediaF'
	DB	'ileCch', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z@4JA DD 06eaH ; `CDXUTDialogResourceManager::CreateTexture'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DH@CFMKICLK@CDXUTDialogResourceManager?3?3Crea@
CONST	SEGMENT
??_C@_0DH@CFMKICLK@CDXUTDialogResourceManager?3?3Crea@ DB 'CDXUTDialogRes'
	DB	'ourceManager::CreateTexture(BAD_TEXFILE)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@CFELJLCL@CDXUTDialog?3?5Multiple?5dialogs?5ar@
CONST	SEGMENT
??_C@_0DO@CFELJLCL@CDXUTDialog?3?5Multiple?5dialogs?5ar@ DB 'CDXUTDialog:'
	DB	' Multiple dialogs are improperly chained together', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??OnCycleFocus@CDXUTDialog@@AAE_N_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??OnCycleFocus@CDXUTDialog@@AAE_N_N@Z@4JA DD 06b4H ; `CDXUTDialog::OnCycleFocus'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BE@PJMOKIGM@CGrowableArray?3?3Add?$AA@
CONST	SEGMENT
??_C@_0BE@PJMOKIGM@CGrowableArray?3?3Add?$AA@ DB 'CGrowableArray::Add', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMGKIFBC@CDXUTDialog?3?3InitControl?$AA@
CONST	SEGMENT
??_C@_0BJ@NMGKIFBC@CDXUTDialog?3?3InitControl?$AA@ DB 'CDXUTDialog::InitC'
	DB	'ontrol', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z@4JA DD 051dH ; `CDXUTDialog::AddControl'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@EKOPLJBN@CDXUTDialog?3?3MsgProc?$CIMOUSE?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@EKOPLJBN@CDXUTDialog?3?3MsgProc?$CIMOUSE?$CJ?$AA@ DB 'CDXUTDial'
	DB	'og::MsgProc(MOUSE)', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetTexture@CDXUTDialog@@QAEJIPBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetTexture@CDXUTDialog@@QAEJIPBD@Z@4JA DD 025eH ; `CDXUTDialog::SetTexture'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??SetFont@CDXUTDialog@@QAEJIPBDJJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetFont@CDXUTDialog@@QAEJIPBDJJ@Z@4JA DD 021eH ; `CDXUTDialog::SetFont'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@EHHLLFIF@?5?$CIMinimized?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@EHHLLFIF@?5?$CIMinimized?$CJ?$AA@ DB ' (Minimized)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BCM@NAODPGLM@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAD?$AA3?$AAD?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA_@
CONST	SEGMENT
??_C@_1BCM@NAODPGLM@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAD?$AA3?$AAD?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA_@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'M', 00H, 'a', 00H, 'n', 00H, 'a', 00H
	DB	'g', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e'
	DB	00H, 't', 00H, 'D', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '(', 00H, ')', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'p', 00H
	DB	'M', 00H, 'a', 00H, 'n', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'r'
	DB	00H, '-', 00H, '>', 00H, 'm', 00H, '_', 00H, 'p', 00H, 'S', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'B', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'"', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'x'
	DB	00H, ' ', 00H, 'h', 00H, 'o', 00H, 'o', 00H, 'k', 00H, ' ', 00H
	DB	'u', 00H, 'p', 00H, ' ', 00H, 'C', 00H, 'D', 00H, 'X', 00H, 'U'
	DB	00H, 'T', 00H, 'D', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'o', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 'M', 00H, 'a', 00H, 'n', 00H, 'a', 00H
	DB	'g', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' '
	DB	00H, 'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a'
	DB	00H, 'c', 00H, 'k', 00H, 's', 00H, '.', 00H, ' ', 00H, ' ', 00H
	DB	'S', 00H, 'e', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 't'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 's', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@OFKGNHOL@To?5fix?5hook?5up?5CDXUTDialogResour@
CONST	SEGMENT
??_C@_0FJ@OFKGNHOL@To?5fix?5hook?5up?5CDXUTDialogResour@ DB 'To fix hook '
	DB	'up CDXUTDialogResourceManager to device callbacks.  See comme'
	DB	'nts for details', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??OnRender@CDXUTDialog@@QAEJM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??OnRender@CDXUTDialog@@QAEJM@Z@4JA DD 0179H ; `CDXUTDialog::OnRender'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
CONST	SEGMENT
??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@ DB 'z:\sampsrc'
	DB	'\02xu1\saco\d3d9\common\dxutgui.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OBNOFHEC@D3DXCreateSprite?$AA@
CONST	SEGMENT
??_C@_0BB@OBNOFHEC@D3DXCreateSprite?$AA@ DB 'D3DXCreateSprite', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??OnCreateDevice@CDXUTDialogResourceManager@@QAEJPAUIDirect3DDevice9@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??OnCreateDevice@CDXUTDialogResourceManager@@QAEJPAUIDirect3DDevice9@@@Z@4JA DD 0f1H ; `CDXUTDialogResourceManager::OnCreateDevice'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1LE@JLCOLCJL@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AA?5?$AAf?$AAi?$AAx?$AA?5?$AAc?$AAa@
CONST	SEGMENT
??_C@_1LE@JLCOLCJL@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AA?5?$AAf?$AAi?$AAx?$AA?5?$AAc?$AAa@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'M', 00H, 'a', 00H, 'n', 00H, 'a', 00H
	DB	'g', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'f'
	DB	00H, 'i', 00H, 'x', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, ' ', 00H, 'C', 00H, 'D', 00H, 'X', 00H, 'U', 00H, 'T'
	DB	00H, 'D', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'o', 00H, 'g', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H
	DB	't', 00H, '.', 00H, ' ', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 'e'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 's', 00H, '.', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
CONST	SEGMENT
??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 's', 00H, 'a', 00H, 'c', 00H
	DB	'o', 00H, '\', 00H, 'd', 00H, '3', 00H, 'd', 00H, '9', 00H, '\'
	DB	00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H
	DB	'\', 00H, 'd', 00H, 'x', 00H, 'u', 00H, 't', 00H, 'g', 00H, 'u'
	DB	00H, 'i', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@INLDDICL@To?5fix?5call?5CDXUTDialog?3?3Init?$CI?$CJ?5@
CONST	SEGMENT
??_C@_0EC@INLDDICL@To?5fix?5call?5CDXUTDialog?3?3Init?$CI?$CJ?5@ DB 'To f'
	DB	'ix call CDXUTDialog::Init() first.  See comments for details.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetCallback@CDXUTDialog@@QAEXP6GXIHPAVCDXUTControl@@PAX@Z1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetCallback@CDXUTDialog@@QAEXP6GXIHPAVCDXUTControl@@PAX@Z1@Z@4JA DD 094H ; `CDXUTDialog::SetCallback'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CDXUTIMEEditBox@@6B@
CONST	SEGMENT
??_7CDXUTIMEEditBox@@6B@ DD FLAT:??_R4CDXUTIMEEditBox@@6B@ ; CDXUTIMEEditBox::`vftable'
	DD	FLAT:??_ECDXUTIMEEditBox@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTEditBox@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTIMEEditBox@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTEditBox@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTIMEEditBox@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTIMEEditBox@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTControl@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTEditBox@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTIMEEditBox@@UAEXXZ
	DD	FLAT:?RenderCandidateReadingWindow@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M_N@Z
	DD	FLAT:?RenderComposition@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?RenderIndicator@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z
CONST	ENDS
;	COMDAT ??_7CDXUTEditBox@@6B@
CONST	SEGMENT
??_7CDXUTEditBox@@6B@ DD FLAT:??_R4CDXUTEditBox@@6B@	; CDXUTEditBox::`vftable'
	DD	FLAT:??_ECDXUTEditBox@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTEditBox@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTEditBox@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTEditBox@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTEditBox@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTEditBox@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTEditBox@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTControl@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTEditBox@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTEditBox@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CDXUTSlider@@6B@
CONST	SEGMENT
??_7CDXUTSlider@@6B@ DD FLAT:??_R4CDXUTSlider@@6B@	; CDXUTSlider::`vftable'
	DD	FLAT:??_ECDXUTSlider@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTSlider@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTSlider@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTSlider@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTSlider@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTControl@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTSlider@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTControl@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTSlider@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CDXUTComboBox@@6B@
CONST	SEGMENT
??_7CDXUTComboBox@@6B@ DD FLAT:??_R4CDXUTComboBox@@6B@	; CDXUTComboBox::`vftable'
	DD	FLAT:??_ECDXUTComboBox@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTComboBox@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTComboBox@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTComboBox@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTComboBox@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTComboBox@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTComboBox@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTComboBox@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTButton@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTComboBox@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTComboBox@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CDXUTListBox@@6B@
CONST	SEGMENT
??_7CDXUTListBox@@6B@ DD FLAT:??_R4CDXUTListBox@@6B@	; CDXUTListBox::`vftable'
	DD	FLAT:??_ECDXUTListBox@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTListBox@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTListBox@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTListBox@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTListBox@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTListBox@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTControl@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTControl@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTListBox@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CDXUTScrollBar@@6B@
CONST	SEGMENT
??_7CDXUTScrollBar@@6B@ DD FLAT:??_R4CDXUTScrollBar@@6B@ ; CDXUTScrollBar::`vftable'
	DD	FLAT:??_ECDXUTScrollBar@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTScrollBar@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTScrollBar@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTControl@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTControl@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTControl@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTScrollBar@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CDXUTRadioButton@@6B@
CONST	SEGMENT
??_7CDXUTRadioButton@@6B@ DD FLAT:??_R4CDXUTRadioButton@@6B@ ; CDXUTRadioButton::`vftable'
	DD	FLAT:??_ECDXUTRadioButton@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTCheckBox@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTRadioButton@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTRadioButton@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTButton@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTRadioButton@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTCheckBox@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTControl@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTCheckBox@@UAEXXZ
	DD	FLAT:?SetCheckedInternal@CDXUTCheckBox@@MAEX_N0@Z
	DD	FLAT:?SetCheckedInternal@CDXUTRadioButton@@MAEX_N00@Z
CONST	ENDS
;	COMDAT ??_7CDXUTCheckBox@@6B@
CONST	SEGMENT
??_7CDXUTCheckBox@@6B@ DD FLAT:??_R4CDXUTCheckBox@@6B@	; CDXUTCheckBox::`vftable'
	DD	FLAT:??_ECDXUTCheckBox@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTCheckBox@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTCheckBox@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTCheckBox@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTButton@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTCheckBox@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTCheckBox@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTControl@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTCheckBox@@UAEXXZ
	DD	FLAT:?SetCheckedInternal@CDXUTCheckBox@@MAEX_N0@Z
CONST	ENDS
;	COMDAT ??_7CDXUTButton@@6B@
CONST	SEGMENT
??_7CDXUTButton@@6B@ DD FLAT:??_R4CDXUTButton@@6B@	; CDXUTButton::`vftable'
	DD	FLAT:??_ECDXUTButton@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTButton@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTButton@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTButton@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTButton@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTButton@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTButton@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTControl@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTControl@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CDXUTStatic@@6B@
CONST	SEGMENT
??_7CDXUTStatic@@6B@ DD FLAT:??_R4CDXUTStatic@@6B@	; CDXUTStatic::`vftable'
	DD	FLAT:??_ECDXUTStatic@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTStatic@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTControl@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTControl@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTControl@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTStatic@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTControl@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTControl@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CDXUTControl@@6B@
CONST	SEGMENT
??_7CDXUTControl@@6B@ DD FLAT:??_R4CDXUTControl@@6B@	; CDXUTControl::`vftable'
	DD	FLAT:??_ECDXUTControl@@UAEPAXI@Z
	DD	FLAT:?OnInit@CDXUTControl@@UAEJXZ
	DD	FLAT:?Refresh@CDXUTControl@@UAEXXZ
	DD	FLAT:?Render@CDXUTControl@@UAEXPAUIDirect3DDevice9@@M@Z
	DD	FLAT:?MsgProc@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleKeyboard@CDXUTControl@@UAE_NIIJ@Z
	DD	FLAT:?HandleMouse@CDXUTControl@@UAE_NIUtagPOINT@@IJ@Z
	DD	FLAT:?CanHaveFocus@CDXUTControl@@UAE_NXZ
	DD	FLAT:?OnFocusIn@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnFocusOut@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseEnter@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnMouseLeave@CDXUTControl@@UAEXXZ
	DD	FLAT:?OnHotkey@CDXUTControl@@UAEXXZ
	DD	FLAT:?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z
	DD	FLAT:?SetEnabled@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetEnabled@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetVisible@CDXUTControl@@UAEX_N@Z
	DD	FLAT:?GetVisible@CDXUTControl@@UAE_NXZ
	DD	FLAT:?SetTextColor@CDXUTControl@@UAEXK@Z
	DD	FLAT:?UpdateRects@CDXUTControl@@MAEXXZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z$0
__ehfuncinfo$??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDXUTEditBox@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTEditBox@@UAE@XZ$0
__ehfuncinfo$??1CDXUTEditBox@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDXUTEditBox@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z$1
__ehfuncinfo$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDXUTComboBox@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTComboBox@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDXUTComboBox@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDXUTComboBox@@UAE@XZ$2
__ehfuncinfo$??1CDXUTComboBox@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CDXUTComboBox@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z$1
__ehfuncinfo$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDXUTListBox@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTListBox@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDXUTListBox@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDXUTListBox@@UAE@XZ$2
__ehfuncinfo$??1CDXUTListBox@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CDXUTListBox@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z$1
__ehfuncinfo$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z$0
__ehfuncinfo$??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z$0
__ehfuncinfo$?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDXUTControl@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTControl@@UAE@XZ$0
__ehfuncinfo$??1CDXUTControl@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDXUTControl@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDXUTDialogResourceManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTDialogResourceManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDXUTDialogResourceManager@@QAE@XZ$1
__ehfuncinfo$??1CDXUTDialogResourceManager@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CDXUTDialogResourceManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDXUTDialogResourceManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDXUTDialogResourceManager@@QAE@XZ$0
__ehfuncinfo$??0CDXUTDialogResourceManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDXUTDialogResourceManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z$0
__ehfuncinfo$?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z$0
__ehfuncinfo$?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z$0
__ehfuncinfo$?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z$0
__ehfuncinfo$?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z$0
__ehfuncinfo$?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z$0
__ehfuncinfo$?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z$0
__ehfuncinfo$?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z$0
__ehfuncinfo$?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z$0
__ehfuncinfo$?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z$0
__ehfuncinfo$?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDXUTDialog@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTDialog@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDXUTDialog@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CDXUTDialog@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CDXUTDialog@@QAE@XZ$3
__ehfuncinfo$??1CDXUTDialog@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CDXUTDialog@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDXUTDialog@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDXUTDialog@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CDXUTDialog@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CDXUTDialog@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CDXUTDialog@@QAE@XZ$3
__ehfuncinfo$??0CDXUTDialog@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CDXUTDialog@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?s_CandList$initializer$@CDXUTIMEEditBox@@1P6AXXZA DD FLAT:??__E?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A@@YAXXZ ; CDXUTIMEEditBox::s_CandList$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?s_Locale$initializer$@CDXUTIMEEditBox@@1P6AXXZA DD FLAT:??__E?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A@@YAXXZ ; CDXUTIMEEditBox::s_Locale$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_Locale'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A ; CDXUTIMEEditBox::s_Locale
	call	??1?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::~CGrowableArray<CDXUTIMEEditBox::CInputLocale>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_Locale''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??__E?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A@@YAXXZ
text$di	SEGMENT
??__E?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CDXUTIMEEditBox::s_Locale'', COMDAT

; 5519 : CGrowableArray< CDXUTIMEEditBox::CInputLocale > CDXUTIMEEditBox::s_Locale; // Array of loaded keyboard layout on system

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A ; CDXUTIMEEditBox::s_Locale
	call	??0?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::CGrowableArray<CDXUTIMEEditBox::CInputLocale>
	push	OFFSET ??__F?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_Locale''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CDXUTIMEEditBox::s_Locale''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A@@YAXXZ
text$yd	SEGMENT
??__F?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_CandList'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	call	??1CCandList@CDXUTIMEEditBox@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_CandList''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??__E?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A@@YAXXZ
text$di	SEGMENT
??__E?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A@@YAXXZ PROC ; `dynamic initializer for 'CDXUTIMEEditBox::s_CandList'', COMDAT

; 5515 : CDXUTIMEEditBox::CCandList CDXUTIMEEditBox::s_CandList;       // Data relevant to the candidate list

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	call	??0CCandList@CDXUTIMEEditBox@@QAE@XZ
	push	OFFSET ??__F?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A@@YAXXZ ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_CandList''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A@@YAXXZ ENDP ; `dynamic initializer for 'CDXUTIMEEditBox::s_CandList''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A@@YAXXZ
text$yd	SEGMENT
??__F?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_CompString'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	??1CUniBuffer@@QAE@XZ			; CUniBuffer::~CUniBuffer
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_CompString''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??__E?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A@@YAXXZ
text$di	SEGMENT
??__E?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A@@YAXXZ PROC ; `dynamic initializer for 'CDXUTIMEEditBox::s_CompString'', COMDAT

; 5511 : CUniBuffer CDXUTIMEEditBox::s_CompString = CUniBuffer( 0 );

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	??0CUniBuffer@@QAE@H@Z			; CUniBuffer::CUniBuffer
	push	OFFSET ??__F?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A@@YAXXZ ; `dynamic atexit destructor for 'CDXUTIMEEditBox::s_CompString''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A@@YAXXZ ENDP ; `dynamic initializer for 'CDXUTIMEEditBox::s_CompString''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RectHeight@@YAHAAUtagRECT@@@Z
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?RectHeight@@YAHAAUtagRECT@@@Z PROC			; RectHeight, COMDAT

; 74   : inline int RectHeight( RECT &rc ) { return ( (rc).bottom - (rc).top ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RectHeight@@YAHAAUtagRECT@@@Z ENDP			; RectHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RectWidth@@YAHAAUtagRECT@@@Z
_TEXT	SEGMENT
_rc$ = 8						; size = 4
?RectWidth@@YAHAAUtagRECT@@@Z PROC			; RectWidth, COMDAT

; 73   : inline int RectWidth( RECT &rc ) { return ( (rc).right - (rc).left ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RectWidth@@YAHAAUtagRECT@@@Z ENDP			; RectWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTIMEEditBox@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTIMEEditBox@@UAEPAXI@Z PROC			; CDXUTIMEEditBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTIMEEditBox@@UAE@XZ		; CDXUTIMEEditBox::~CDXUTIMEEditBox
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTIMEEditBox@@UAEPAXI@Z ENDP			; CDXUTIMEEditBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@IAEJH@Z PROC ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	imul	eax, DWORD PTR _nNewMaxSize$[ebp], 71
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@IAEJH@Z ENDP ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEXXZ PROC ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJH@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEXXZ ENDP ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QBEHXZ PROC ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QBEHXZ ENDP ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEAAUCInputLocale@CDXUTIMEEditBox@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEAAUCInputLocale@CDXUTIMEEditBox@@H@Z PROC ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	imul	eax, DWORD PTR _nIndex$[ebp], 71
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEAAUCInputLocale@CDXUTIMEEditBox@@H@Z ENDP ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJABUCInputLocale@CDXUTIMEEditBox@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJABUCInputLocale@CDXUTIMEEditBox@@@Z PROC ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@IAEJH@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 71
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	push	71					; 00000047H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 71
	mov	edx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [edx]
	add	edi, ecx
	mov	ecx, 17					; 00000011H
	mov	esi, DWORD PTR _value$[ebp]
	rep movsd
	movsw
	movsb

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJABUCInputLocale@CDXUTIMEEditBox@@@Z ENDP ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJH@Z PROC ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@IAEJH@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	imul	eax, DWORD PTR _i$2[ebp], 71
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	push	71					; 00000047H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJH@Z ENDP ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ PROC ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::~CGrowableArray<CDXUTIMEEditBox::CInputLocale>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEXXZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ ENDP ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::~CGrowableArray<CDXUTIMEEditBox::CInputLocale>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ PROC ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::CGrowableArray<CDXUTIMEEditBox::CInputLocale>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAE@XZ ENDP ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::CGrowableArray<CDXUTIMEEditBox::CInputLocale>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CCandList@CDXUTIMEEditBox@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CCandList@CDXUTIMEEditBox@@QAE@XZ PROC		; CDXUTIMEEditBox::CCandList::~CCandList, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2560				; 00000a00H
	call	??1CUniBuffer@@QAE@XZ			; CUniBuffer::~CUniBuffer
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCandList@CDXUTIMEEditBox@@QAE@XZ ENDP		; CDXUTIMEEditBox::CCandList::~CCandList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CCandList@CDXUTIMEEditBox@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CCandList@CDXUTIMEEditBox@@QAE@XZ PROC		; CDXUTIMEEditBox::CCandList::CCandList, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2560				; 00000a00H
	call	??0CUniBuffer@@QAE@H@Z			; CUniBuffer::CUniBuffer
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCandList@CDXUTIMEEditBox@@QAE@XZ ENDP		; CDXUTIMEEditBox::CCandList::CCandList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SendCompString@CDXUTIMEEditBox@@IAEXXZ
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
?SendCompString@CDXUTIMEEditBox@@IAEXXZ PROC		; CDXUTIMEEditBox::SendCompString, COMDAT
; _this$ = ecx

; 5888 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5889 :     for( int i = 0; i < lstrlen( s_CompString.GetBuffer() ); ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@SendCompSt
$LN2@SendCompSt:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@SendCompSt:
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN4@SendCompSt

; 5890 :         MsgProc( WM_CHAR, (WPARAM)s_CompString[i], 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	??ACUniBuffer@@QAEAADH@Z		; CUniBuffer::operator[]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	push	258					; 00000102H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@SendCompSt
$LN4@SendCompSt:

; 5891 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SendCompString@CDXUTIMEEditBox@@IAEXXZ ENDP		; CDXUTIMEEditBox::SendCompString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetPrivateReadingString@CDXUTIMEEditBox@@KAXXZ
_TEXT	SEGMENT
?GetPrivateReadingString@CDXUTIMEEditBox@@KAXXZ PROC	; CDXUTIMEEditBox::GetPrivateReadingString, COMDAT

; 5973 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5974 : 	return;
; 5975 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrivateReadingString@CDXUTIMEEditBox@@KAXXZ ENDP	; CDXUTIMEEditBox::GetPrivateReadingString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetReadingWindowOrientation@CDXUTIMEEditBox@@KAXK@Z
_TEXT	SEGMENT
tv79 = -540						; size = 4
tv67 = -540						; size = 4
_dwType$1 = -340					; size = 4
_dwMapping$2 = -328					; size = 4
_dwSize$3 = -316					; size = 4
_lRc$4 = -304						; size = 4
_dwVer$5 = -292						; size = 4
_hKey$6 = -280						; size = 4
_wszRegPath$7 = -268					; size = 260
__$ArrayPad$ = -4					; size = 4
_dwId$ = 8						; size = 4
?GetReadingWindowOrientation@CDXUTIMEEditBox@@KAXK@Z PROC ; CDXUTIMEEditBox::GetReadingWindowOrientation, COMDAT

; 5938 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 540				; 0000021cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-540]
	mov	ecx, 135				; 00000087H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 5939 :     s_bHorizontalReading = ( s_hklCurrent == _CHS_HKL ) || ( s_hklCurrent == _CHT_HKL2 ) || ( dwId == 0 );

	cmp	DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A, -535951356 ; CDXUTIMEEditBox::s_hklCurrent, e00e0804H
	je	SHORT $LN10@GetReading
	cmp	DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A, -536280060 ; CDXUTIMEEditBox::s_hklCurrent, e0090404H
	je	SHORT $LN10@GetReading
	cmp	DWORD PTR _dwId$[ebp], 0
	je	SHORT $LN10@GetReading
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN11@GetReading
$LN10@GetReading:
	mov	DWORD PTR tv67[ebp], 1
$LN11@GetReading:
	mov	al, BYTE PTR tv67[ebp]
	mov	BYTE PTR ?s_bHorizontalReading@CDXUTIMEEditBox@@1_NA, al ; CDXUTIMEEditBox::s_bHorizontalReading

; 5940 :     if( !s_bHorizontalReading && ( dwId & 0x0000FFFF ) == LANG_CHT )

	movzx	eax, BYTE PTR ?s_bHorizontalReading@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bHorizontalReading
	test	eax, eax
	jne	$LN8@GetReading
	mov	eax, DWORD PTR _dwId$[ebp]
	and	eax, 65535				; 0000ffffH
	cmp	eax, 1028				; 00000404H
	jne	$LN8@GetReading

; 5941 :     {
; 5942 :         TCHAR wszRegPath[MAX_PATH];
; 5943 :         HKEY hKey;
; 5944 :         DWORD dwVer = dwId & 0xFFFF0000;

	mov	eax, DWORD PTR _dwId$[ebp]
	and	eax, -65536				; ffff0000H
	mov	DWORD PTR _dwVer$5[ebp], eax

; 5945 :         StringCchCopy( wszRegPath, MAX_PATH, "software\\microsoft\\windows\\currentversion\\" );

	push	OFFSET ??_C@_0CL@PCFEMFCF@software?2microsoft?2windows?2curre@
	push	260					; 00000104H
	lea	eax, DWORD PTR _wszRegPath$7[ebp]
	push	eax
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 5946 :         StringCchCat( wszRegPath, MAX_PATH, ( dwVer >= MAKEIMEVERSION( 5, 1 ) ) ? "MSTCIPH" : "TINTLGNT" );

	cmp	DWORD PTR _dwVer$5[ebp], 83951616	; 05010000H
	jb	SHORT $LN12@GetReading
	mov	DWORD PTR tv79[ebp], OFFSET ??_C@_07DEJAPC@MSTCIPH?$AA@
	jmp	SHORT $LN13@GetReading
$LN12@GetReading:
	mov	DWORD PTR tv79[ebp], OFFSET ??_C@_08LMKCILHO@TINTLGNT?$AA@
$LN13@GetReading:
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _wszRegPath$7[ebp]
	push	ecx
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 5947 :         LONG lRc = RegOpenKeyExA( HKEY_CURRENT_USER, wszRegPath, 0, KEY_READ, &hKey );

	mov	esi, esp
	lea	eax, DWORD PTR _hKey$6[ebp]
	push	eax
	push	131097					; 00020019H
	push	0
	lea	ecx, DWORD PTR _wszRegPath$7[ebp]
	push	ecx
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRc$4[ebp], eax

; 5948 :         if (lRc == ERROR_SUCCESS)

	cmp	DWORD PTR _lRc$4[ebp], 0
	jne	$LN8@GetReading

; 5949 :         {
; 5950 :             DWORD dwSize = sizeof(DWORD), dwMapping, dwType;

	mov	DWORD PTR _dwSize$3[ebp], 4

; 5951 :             lRc = RegQueryValueExA( hKey, "Keyboard Mapping", NULL, &dwType, (PBYTE)&dwMapping, &dwSize );

	mov	esi, esp
	lea	eax, DWORD PTR _dwSize$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwMapping$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$1[ebp]
	push	edx
	push	0
	push	OFFSET ??_C@_0BB@KFOMJFEN@Keyboard?5Mapping?$AA@
	mov	eax, DWORD PTR _hKey$6[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRc$4[ebp], eax

; 5952 :             if (lRc == ERROR_SUCCESS)

	cmp	DWORD PTR _lRc$4[ebp], 0
	jne	SHORT $LN5@GetReading

; 5953 :             {
; 5954 :                 if ( ( dwVer <= MAKEIMEVERSION( 5, 0 ) && 
; 5955 :                        ( (BYTE)dwMapping == 0x22 || (BYTE)dwMapping == 0x23 ) )
; 5956 :                      ||
; 5957 :                      ( ( dwVer == MAKEIMEVERSION( 5, 1 ) || dwVer == MAKEIMEVERSION( 5, 2 ) ) &&
; 5958 :                        (BYTE)dwMapping >= 0x22 && (BYTE)dwMapping <= 0x24 )
; 5959 :                    )

	cmp	DWORD PTR _dwVer$5[ebp], 83886080	; 05000000H
	ja	SHORT $LN2@GetReading
	movzx	eax, BYTE PTR _dwMapping$2[ebp]
	cmp	eax, 34					; 00000022H
	je	SHORT $LN3@GetReading
	movzx	eax, BYTE PTR _dwMapping$2[ebp]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN3@GetReading
$LN2@GetReading:
	cmp	DWORD PTR _dwVer$5[ebp], 83951616	; 05010000H
	je	SHORT $LN1@GetReading
	cmp	DWORD PTR _dwVer$5[ebp], 84017152	; 05020000H
	jne	SHORT $LN5@GetReading
$LN1@GetReading:
	movzx	eax, BYTE PTR _dwMapping$2[ebp]
	cmp	eax, 34					; 00000022H
	jl	SHORT $LN5@GetReading
	movzx	eax, BYTE PTR _dwMapping$2[ebp]
	cmp	eax, 36					; 00000024H
	jg	SHORT $LN5@GetReading
$LN3@GetReading:

; 5960 :                 {
; 5961 :                     s_bHorizontalReading = true;

	mov	BYTE PTR ?s_bHorizontalReading@CDXUTIMEEditBox@@1_NA, 1 ; CDXUTIMEEditBox::s_bHorizontalReading
$LN5@GetReading:

; 5962 :                 }
; 5963 :             }
; 5964 :             RegCloseKey( hKey );

	mov	esi, esp
	mov	eax, DWORD PTR _hKey$6[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@GetReading:

; 5965 :         }
; 5966 :     }
; 5967 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@GetReading
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 540				; 0000021cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@GetReading:
	DD	5
	DD	$LN19@GetReading
$LN19@GetReading:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN14@GetReading
	DD	-280					; fffffee8H
	DD	4
	DD	$LN15@GetReading
	DD	-316					; fffffec4H
	DD	4
	DD	$LN16@GetReading
	DD	-328					; fffffeb8H
	DD	4
	DD	$LN17@GetReading
	DD	-340					; fffffeacH
	DD	4
	DD	$LN18@GetReading
$LN18@GetReading:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN17@GetReading:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN16@GetReading:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@GetReading:
	DB	104					; 00000068H
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN14@GetReading:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?GetReadingWindowOrientation@CDXUTIMEEditBox@@KAXK@Z ENDP ; CDXUTIMEEditBox::GetReadingWindowOrientation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z
_TEXT	SEGMENT
_lLength$1 = -32					; size = 4
_hImc$ = -20						; size = 4
_this$ = -8						; size = 4
_bSend$ = 8						; size = 1
?FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z PROC		; CDXUTIMEEditBox::FinalizeString, COMDAT
; _this$ = ecx

; 5897 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5898 :     HIMC hImc;
; 5899 :     if( NULL == ( hImc = _ImmGetContext( DXUTGetHWND() ) ) )

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hImc$[ebp], eax
	cmp	DWORD PTR _hImc$[ebp], 0
	jne	SHORT $LN4@FinalizeSt

; 5900 :         return;

	jmp	$LN5@FinalizeSt
$LN4@FinalizeSt:

; 5901 : 
; 5902 :     static bool bProcessing = false;
; 5903 :     if( bProcessing )    // avoid infinite recursion

	movzx	eax, BYTE PTR ?bProcessing@?3??FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z@4_NA
	test	eax, eax
	je	SHORT $LN3@FinalizeSt

; 5904 :     {
; 5905 :         DXUTTRACE( "CDXUTIMEEditBox::FinalizeString: Reentrant detected!\n" );

	push	OFFSET ??_C@_0DG@PFMNNKP@CDXUTIMEEditBox?3?3FinalizeString?3@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 5906 :         _ImmReleaseContext( DXUTGetHWND(), hImc );

	mov	esi, esp
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5907 :         return;

	jmp	$LN5@FinalizeSt
$LN3@FinalizeSt:

; 5908 :     }
; 5909 :     bProcessing = true;

	mov	BYTE PTR ?bProcessing@?3??FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z@4_NA, 1

; 5910 : 
; 5911 :     if( !s_bInsertOnType && bSend )

	movzx	eax, BYTE PTR ?s_bInsertOnType@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bInsertOnType
	test	eax, eax
	jne	SHORT $LN2@FinalizeSt
	movzx	eax, BYTE PTR _bSend$[ebp]
	test	eax, eax
	je	SHORT $LN2@FinalizeSt

; 5912 :     {
; 5913 :         // Send composition string to app.
; 5914 :         LONG lLength = lstrlen( s_CompString.GetBuffer() );

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lLength$1[ebp], eax

; 5915 :         // In case of CHT IME, don't send the trailing double byte space, if it exists.
; 5916 :         if( GetLanguage() == LANG_CHT
; 5917 :             && s_CompString[lLength - 1] == 0x3000 )

	call	?GetLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetLanguage
	movzx	eax, ax
	cmp	eax, 1028				; 00000404H
	jne	SHORT $LN1@FinalizeSt
	mov	eax, DWORD PTR _lLength$1[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	??ACUniBuffer@@QAEAADH@Z		; CUniBuffer::operator[]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 12288				; 00003000H
	jne	SHORT $LN1@FinalizeSt

; 5918 :         {
; 5919 :             s_CompString[lLength - 1] = 0;

	mov	eax, DWORD PTR _lLength$1[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	??ACUniBuffer@@QAEAADH@Z		; CUniBuffer::operator[]
	mov	BYTE PTR [eax], 0
$LN1@FinalizeSt:

; 5920 :         }
; 5921 :         SendCompString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendCompString@CDXUTIMEEditBox@@IAEXXZ	; CDXUTIMEEditBox::SendCompString
$LN2@FinalizeSt:

; 5922 :     }
; 5923 : 
; 5924 :     ResetCompositionString();

	call	?ResetCompositionString@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::ResetCompositionString

; 5925 :     // Clear composition string in IME
; 5926 :     _ImmNotifyIME( hImc, NI_COMPOSITIONSTR, CPS_CANCEL, 0 );

	mov	esi, esp
	push	0
	push	4
	push	21					; 00000015H
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	DWORD PTR ?_ImmNotifyIME@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KKK@ZA ; CDXUTIMEEditBox::_ImmNotifyIME
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5927 :     // the following line is necessary as Korean IME doesn't close cand list
; 5928 :     // when comp string is cancelled.
; 5929 :     _ImmNotifyIME( hImc, NI_CLOSECANDIDATE, 0, 0 ); 

	mov	esi, esp
	push	0
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	DWORD PTR ?_ImmNotifyIME@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KKK@ZA ; CDXUTIMEEditBox::_ImmNotifyIME
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5930 :     _ImmReleaseContext( DXUTGetHWND(), hImc );

	mov	esi, esp
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5931 :     bProcessing = false;

	mov	BYTE PTR ?bProcessing@?3??FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z@4_NA, 0
$LN5@FinalizeSt:

; 5932 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z ENDP		; CDXUTIMEEditBox::FinalizeString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z
_TEXT	SEGMENT
_i$1 = -56						; size = 4
_i$2 = -44						; size = 4
_i$3 = -32						; size = 4
_cc$ = -20						; size = 4
_this$ = -8						; size = 4
_bUseBackSpace$ = 8					; size = 1
_iNewStrLen$ = 12					; size = 4
?TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z PROC	; CDXUTIMEEditBox::TruncateCompString, COMDAT
; _this$ = ecx

; 5842 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5843 :     if( !s_bInsertOnType )

	movzx	eax, BYTE PTR ?s_bInsertOnType@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bInsertOnType
	test	eax, eax
	jne	SHORT $LN14@TruncateCo

; 5844 :         return;

	jmp	$LN15@TruncateCo
$LN14@TruncateCo:

; 5845 : 
; 5846 :     int cc = (int) strlen( s_CompString.GetBuffer() );

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _cc$[ebp], eax

; 5847 :     assert( iNewStrLen == 0 || iNewStrLen >= cc );

	cmp	DWORD PTR _iNewStrLen$[ebp], 0
	je	SHORT $LN17@TruncateCo
	mov	eax, DWORD PTR _iNewStrLen$[ebp]
	cmp	eax, DWORD PTR _cc$[ebp]
	jge	SHORT $LN17@TruncateCo
	mov	ecx, DWORD PTR ?__LINE__Var@?1??TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z@4JA
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EI@PNFNGNLA@?$AAi?$AAN?$AAe?$AAw?$AAS?$AAt?$AAr?$AAL?$AAe?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAi?$AAN?$AAe?$AAw?$AAS?$AAt?$AAr?$AAL?$AAe?$AAn?$AA?5?$AA?$DO?$AA?$DN@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN17@TruncateCo:

; 5848 : 
; 5849 :     // Send right arrow keystrokes to move the caret
; 5850 :     //   to the end of the composition string.
; 5851 :     for (int i = 0; i < cc - s_nCompCaret; ++i )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN13@TruncateCo
$LN12@TruncateCo:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN13@TruncateCo:
	mov	eax, DWORD PTR _cc$[ebp]
	sub	eax, DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nCompCaret
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN11@TruncateCo

; 5852 :         SendMessage( DXUTGetHWND(), WM_KEYDOWN, VK_RIGHT, 0 );

	mov	esi, esp
	push	0
	push	39					; 00000027H
	push	256					; 00000100H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN12@TruncateCo
$LN11@TruncateCo:

; 5853 :     SendMessage( DXUTGetHWND(), WM_KEYUP, VK_RIGHT, 0 );

	mov	esi, esp
	push	0
	push	39					; 00000027H
	push	257					; 00000101H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5854 : 
; 5855 :     if( bUseBackSpace || m_bInsertMode )

	movzx	eax, BYTE PTR _bUseBackSpace$[ebp]
	test	eax, eax
	jne	SHORT $LN9@TruncateCo
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+283]
	test	ecx, ecx
	je	SHORT $LN10@TruncateCo
$LN9@TruncateCo:

; 5856 :         iNewStrLen = 0;

	mov	DWORD PTR _iNewStrLen$[ebp], 0
$LN10@TruncateCo:

; 5857 : 
; 5858 :     // The caller sets bUseBackSpace to false if there's possibility of sending
; 5859 :     // new composition string to the app right after this function call.
; 5860 :     // 
; 5861 :     // If the app is in overwriting mode and new comp string is 
; 5862 :     // shorter than current one, delete previous comp string 
; 5863 :     // till it's same long as the new one. Then move caret to the beginning of comp string.
; 5864 :     // New comp string will overwrite old one.
; 5865 :     if( iNewStrLen < cc )

	mov	eax, DWORD PTR _iNewStrLen$[ebp]
	cmp	eax, DWORD PTR _cc$[ebp]
	jge	SHORT $LN8@TruncateCo

; 5866 :     {
; 5867 :         for( int i = 0; i < cc - iNewStrLen; ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@TruncateCo
$LN6@TruncateCo:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@TruncateCo:
	mov	eax, DWORD PTR _cc$[ebp]
	sub	eax, DWORD PTR _iNewStrLen$[ebp]
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN5@TruncateCo

; 5868 :         {
; 5869 :             SendMessage( DXUTGetHWND(), WM_KEYDOWN, VK_BACK, 0 );  // Backspace character

	mov	esi, esp
	push	0
	push	8
	push	256					; 00000100H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5870 :             SendMessageW( DXUTGetHWND(), WM_CHAR, VK_BACK, 0 );

	mov	esi, esp
	push	0
	push	8
	push	258					; 00000102H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5871 :         }

	jmp	SHORT $LN6@TruncateCo
$LN5@TruncateCo:

; 5872 :         SendMessage( DXUTGetHWND(), WM_KEYUP, VK_BACK, 0 );

	mov	esi, esp
	push	0
	push	8
	push	257					; 00000101H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5873 :     }
; 5874 :     else

	jmp	SHORT $LN4@TruncateCo
$LN8@TruncateCo:

; 5875 :         iNewStrLen = cc;

	mov	eax, DWORD PTR _cc$[ebp]
	mov	DWORD PTR _iNewStrLen$[ebp], eax
$LN4@TruncateCo:

; 5876 : 
; 5877 :     // Move the caret to the beginning by sending left keystrokes
; 5878 :     for (int i = 0; i < iNewStrLen; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@TruncateCo
$LN2@TruncateCo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@TruncateCo:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _iNewStrLen$[ebp]
	jge	SHORT $LN1@TruncateCo

; 5879 :         SendMessage( DXUTGetHWND(), WM_KEYDOWN, VK_LEFT, 0 );

	mov	esi, esp
	push	0
	push	37					; 00000025H
	push	256					; 00000100H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@TruncateCo
$LN1@TruncateCo:

; 5880 :     SendMessage( DXUTGetHWND(), WM_KEYUP, VK_LEFT, 0 );

	mov	esi, esp
	push	0
	push	37					; 00000025H
	push	257					; 00000101H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@TruncateCo:

; 5881 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z ENDP	; CDXUTIMEEditBox::TruncateCompString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ResetCompositionString@CDXUTIMEEditBox@@KAXXZ
_TEXT	SEGMENT
?ResetCompositionString@CDXUTIMEEditBox@@KAXXZ PROC	; CDXUTIMEEditBox::ResetCompositionString, COMDAT

; 5832 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5833 :     s_nCompCaret = 0;

	mov	DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA, 0 ; CDXUTIMEEditBox::s_nCompCaret

; 5834 :     s_CompString.SetText( "" );

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?SetText@CUniBuffer@@QAE_NPBD@Z		; CUniBuffer::SetText

; 5835 :     ZeroMemory( s_abCompStringAttr, sizeof(s_abCompStringAttr) );

	push	256					; 00000100H
	push	0
	push	OFFSET ?s_abCompStringAttr@CDXUTIMEEditBox@@1PAEA ; CDXUTIMEEditBox::s_abCompStringAttr
	call	_memset
	add	esp, 12					; 0000000cH

; 5836 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetCompositionString@CDXUTIMEEditBox@@KAXXZ ENDP	; CDXUTIMEEditBox::ResetCompositionString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetupImeApi@CDXUTIMEEditBox@@KAXXZ
_TEXT	SEGMENT
_szImeFile$ = -272					; size = 261
__$ArrayPad$ = -4					; size = 4
?SetupImeApi@CDXUTIMEEditBox@@KAXXZ PROC		; CDXUTIMEEditBox::SetupImeApi, COMDAT

; 5810 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 468				; 000001d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-468]
	mov	ecx, 117				; 00000075H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 5811 :     char szImeFile[MAX_PATH + 1];
; 5812 : 
; 5813 :     _GetReadingString = NULL;

	mov	DWORD PTR ?_GetReadingString@CDXUTIMEEditBox@@1P6GIPAUHIMC__@@IPADPAH2PAI@ZA, 0 ; CDXUTIMEEditBox::_GetReadingString

; 5814 :     _ShowReadingWindow = NULL;

	mov	DWORD PTR ?_ShowReadingWindow@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA, 0 ; CDXUTIMEEditBox::_ShowReadingWindow

; 5815 :     if( _ImmGetIMEFileNameA( s_hklCurrent, szImeFile, sizeof(szImeFile)/sizeof(szImeFile[0]) - 1 ) == 0 )

	mov	esi, esp
	push	260					; 00000104H
	lea	eax, DWORD PTR _szImeFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	push	ecx
	call	DWORD PTR ?_ImmGetIMEFileNameA@CDXUTIMEEditBox@@1P6GIPAUHKL__@@PADI@ZA ; CDXUTIMEEditBox::_ImmGetIMEFileNameA
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@SetupImeAp

; 5816 :         return;

	jmp	$LN4@SetupImeAp
$LN3@SetupImeAp:

; 5817 : 
; 5818 :     if( s_hDllIme ) FreeLibrary( s_hDllIme );

	cmp	DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllIme
	je	SHORT $LN2@SetupImeAp
	mov	esi, esp
	mov	eax, DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllIme
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetupImeAp:

; 5819 :     s_hDllIme = LoadLibraryA( szImeFile );

	mov	esi, esp
	lea	eax, DWORD PTR _szImeFile$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadLibraryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, eax ; CDXUTIMEEditBox::s_hDllIme

; 5820 :     if ( !s_hDllIme )

	cmp	DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllIme
	jne	SHORT $LN1@SetupImeAp

; 5821 :         return;

	jmp	SHORT $LN4@SetupImeAp
$LN1@SetupImeAp:

; 5822 :     _GetReadingString = (UINT (WINAPI*)(HIMC, UINT, PCHAR, PINT, BOOL*, PUINT))

	mov	esi, esp
	push	OFFSET ??_C@_0BB@EOIFCLLM@GetReadingString?$AA@
	mov	eax, DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllIme
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?_GetReadingString@CDXUTIMEEditBox@@1P6GIPAUHIMC__@@IPADPAH2PAI@ZA, eax ; CDXUTIMEEditBox::_GetReadingString

; 5823 :         ( GetProcAddress( s_hDllIme, "GetReadingString" ) );
; 5824 :     _ShowReadingWindow =(BOOL (WINAPI*)(HIMC, BOOL))

	mov	esi, esp
	push	OFFSET ??_C@_0BC@MEELNKEC@ShowReadingWindow?$AA@
	mov	eax, DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllIme
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?_ShowReadingWindow@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA, eax ; CDXUTIMEEditBox::_ShowReadingWindow
$LN4@SetupImeAp:

; 5825 :         ( GetProcAddress( s_hDllIme, "ShowReadingWindow" ) );
; 5826 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SetupImeAp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 468				; 000001d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@SetupImeAp:
	DD	1
	DD	$LN7@SetupImeAp
$LN7@SetupImeAp:
	DD	-272					; fffffef0H
	DD	261					; 00000105H
	DD	$LN6@SetupImeAp
$LN6@SetupImeAp:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?SetupImeApi@CDXUTIMEEditBox@@KAXXZ ENDP		; CDXUTIMEEditBox::SetupImeApi
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?CheckToggleState@CDXUTIMEEditBox@@KAXXZ
_TEXT	SEGMENT
tv93 = -244						; size = 4
tv87 = -244						; size = 4
tv74 = -244						; size = 4
tv67 = -244						; size = 4
_dwSentMode$1 = -44					; size = 4
_dwConvMode$2 = -32					; size = 4
_hImc$ = -20						; size = 4
_bIme$ = -5						; size = 1
?CheckToggleState@CDXUTIMEEditBox@@KAXXZ PROC		; CDXUTIMEEditBox::CheckToggleState, COMDAT

; 5772 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5773 :     CheckInputLocale();

	call	?CheckInputLocale@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::CheckInputLocale

; 5774 :     bool bIme = _ImmIsIME( s_hklCurrent ) != 0;

	mov	esi, esp
	mov	eax, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	push	eax
	call	DWORD PTR ?_ImmIsIME@CDXUTIMEEditBox@@1P6GHPAUHKL__@@@ZA ; CDXUTIMEEditBox::_ImmIsIME
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN7@CheckToggl
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN8@CheckToggl
$LN7@CheckToggl:
	mov	DWORD PTR tv67[ebp], 0
$LN8@CheckToggl:
	mov	cl, BYTE PTR tv67[ebp]
	mov	BYTE PTR _bIme$[ebp], cl

; 5775 :     s_bChineseIME = ( GetPrimaryLanguage() == LANG_CHINESE ) && bIme;

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	cmp	eax, 4
	jne	SHORT $LN9@CheckToggl
	movzx	ecx, BYTE PTR _bIme$[ebp]
	test	ecx, ecx
	je	SHORT $LN9@CheckToggl
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN10@CheckToggl
$LN9@CheckToggl:
	mov	DWORD PTR tv74[ebp], 0
$LN10@CheckToggl:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR ?s_bChineseIME@CDXUTIMEEditBox@@1_NA, dl ; CDXUTIMEEditBox::s_bChineseIME

; 5776 : 
; 5777 :     HIMC hImc;
; 5778 :     if( NULL != ( hImc = _ImmGetContext( DXUTGetHWND() ) ) )

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hImc$[ebp], eax
	cmp	DWORD PTR _hImc$[ebp], 0
	je	$LN4@CheckToggl

; 5779 :     {
; 5780 :         if( s_bChineseIME )

	movzx	eax, BYTE PTR ?s_bChineseIME@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bChineseIME
	test	eax, eax
	je	SHORT $LN3@CheckToggl

; 5781 :         {
; 5782 :             DWORD dwConvMode, dwSentMode;
; 5783 :             _ImmGetConversionStatus( hImc, &dwConvMode, &dwSentMode );

	mov	esi, esp
	lea	eax, DWORD PTR _dwSentMode$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwConvMode$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _hImc$[ebp]
	push	edx
	call	DWORD PTR ?_ImmGetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@PAK1@ZA ; CDXUTIMEEditBox::_ImmGetConversionStatus
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5784 :             s_ImeState = ( dwConvMode & IME_CMODE_NATIVE ) ? IMEUI_STATE_ON : IMEUI_STATE_ENGLISH;

	mov	eax, DWORD PTR _dwConvMode$2[ebp]
	and	eax, 1
	je	SHORT $LN11@CheckToggl
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN12@CheckToggl
$LN11@CheckToggl:
	mov	DWORD PTR tv87[ebp], 2
$LN12@CheckToggl:
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR ?s_ImeState@CDXUTIMEEditBox@@1W4IMESTATE@1@A, ecx ; CDXUTIMEEditBox::s_ImeState

; 5785 :         }
; 5786 :         else

	jmp	SHORT $LN2@CheckToggl
$LN3@CheckToggl:

; 5787 :         {
; 5788 :             s_ImeState = ( bIme && _ImmGetOpenStatus( hImc ) != 0 ) ? IMEUI_STATE_ON : IMEUI_STATE_OFF;

	movzx	eax, BYTE PTR _bIme$[ebp]
	test	eax, eax
	je	SHORT $LN13@CheckToggl
	mov	esi, esp
	mov	ecx, DWORD PTR _hImc$[ebp]
	push	ecx
	call	DWORD PTR ?_ImmGetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmGetOpenStatus
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN13@CheckToggl
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN14@CheckToggl
$LN13@CheckToggl:
	mov	DWORD PTR tv93[ebp], 0
$LN14@CheckToggl:
	mov	edx, DWORD PTR tv93[ebp]
	mov	DWORD PTR ?s_ImeState@CDXUTIMEEditBox@@1W4IMESTATE@1@A, edx ; CDXUTIMEEditBox::s_ImeState
$LN2@CheckToggl:

; 5789 :         }
; 5790 :         _ImmReleaseContext( DXUTGetHWND(), hImc );

	mov	esi, esp
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5791 :     }
; 5792 :     else

	jmp	SHORT $LN5@CheckToggl
$LN4@CheckToggl:

; 5793 :         s_ImeState = IMEUI_STATE_OFF;

	mov	DWORD PTR ?s_ImeState@CDXUTIMEEditBox@@1W4IMESTATE@1@A, 0 ; CDXUTIMEEditBox::s_ImeState
$LN5@CheckToggl:

; 5794 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@CheckToggl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@CheckToggl:
	DD	2
	DD	$LN17@CheckToggl
$LN17@CheckToggl:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN15@CheckToggl
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN16@CheckToggl
$LN16@CheckToggl:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN15@CheckToggl:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?CheckToggleState@CDXUTIMEEditBox@@KAXXZ ENDP		; CDXUTIMEEditBox::CheckToggleState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?CheckInputLocale@CDXUTIMEEditBox@@KAXXZ
_TEXT	SEGMENT
tv78 = -216						; size = 4
tv72 = -216						; size = 4
tv69 = -216						; size = 4
_wszLang$1 = -16					; size = 5
__$ArrayPad$ = -4					; size = 4
?CheckInputLocale@CDXUTIMEEditBox@@KAXXZ PROC		; CDXUTIMEEditBox::CheckInputLocale, COMDAT

; 5717 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 5718 :     static HKL hklPrev = 0;
; 5719 :     s_hklCurrent = GetKeyboardLayout( 0 );

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetKeyboardLayout@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A, eax ; CDXUTIMEEditBox::s_hklCurrent

; 5720 :     if ( hklPrev == s_hklCurrent )

	mov	eax, DWORD PTR ?hklPrev@?1??CheckInputLocale@CDXUTIMEEditBox@@KAXXZ@4PAUHKL__@@A
	cmp	eax, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	jne	SHORT $LN13@CheckInput

; 5721 :         return;

	jmp	$LN14@CheckInput
$LN13@CheckInput:

; 5722 : 
; 5723 :     hklPrev = s_hklCurrent;

	mov	eax, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	mov	DWORD PTR ?hklPrev@?1??CheckInputLocale@CDXUTIMEEditBox@@KAXXZ@4PAUHKL__@@A, eax

; 5724 :     switch ( GetPrimaryLanguage() )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 4
	je	SHORT $LN10@CheckInput
	cmp	DWORD PTR tv69[ebp], 17			; 00000011H
	je	$LN3@CheckInput
	cmp	DWORD PTR tv69[ebp], 18			; 00000012H
	je	$LN4@CheckInput
	jmp	$LN2@CheckInput
$LN10@CheckInput:

; 5725 :     {
; 5726 :         // Simplified Chinese
; 5727 :         case LANG_CHINESE:
; 5728 :             s_bVerticalCand = true;

	mov	BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA, 1 ; CDXUTIMEEditBox::s_bVerticalCand

; 5729 :             switch ( GetSubLanguage() )

	call	?GetSubLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetSubLanguage
	movzx	eax, ax
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 1
	je	SHORT $LN6@CheckInput
	cmp	DWORD PTR tv72[ebp], 2
	je	SHORT $LN7@CheckInput
	jmp	SHORT $LN5@CheckInput
$LN7@CheckInput:

; 5730 :             {
; 5731 :                 case SUBLANG_CHINESE_SIMPLIFIED:
; 5732 :                     s_wszCurrIndicator = s_aszIndicator[INDICATOR_CHS];

	mov	eax, 3
	shl	eax, 0
	add	eax, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	mov	DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA, eax ; CDXUTIMEEditBox::s_wszCurrIndicator

; 5733 :                     s_bVerticalCand = GetImeId() == 0;

	push	0
	call	?GetImeId@CDXUTIMEEditBox@@KAKI@Z	; CDXUTIMEEditBox::GetImeId
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN16@CheckInput
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN17@CheckInput
$LN16@CheckInput:
	mov	DWORD PTR tv78[ebp], 0
$LN17@CheckInput:
	mov	al, BYTE PTR tv78[ebp]
	mov	BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA, al ; CDXUTIMEEditBox::s_bVerticalCand

; 5734 :                     break;

	jmp	SHORT $LN8@CheckInput
$LN6@CheckInput:

; 5735 :                 case SUBLANG_CHINESE_TRADITIONAL:
; 5736 :                     s_wszCurrIndicator = s_aszIndicator[INDICATOR_CHT];

	mov	eax, 3
	shl	eax, 1
	add	eax, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	mov	DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA, eax ; CDXUTIMEEditBox::s_wszCurrIndicator

; 5737 :                     break;

	jmp	SHORT $LN8@CheckInput
$LN5@CheckInput:

; 5738 :                 default:    // unsupported sub-language
; 5739 :                     s_wszCurrIndicator = s_aszIndicator[INDICATOR_NON_IME];

	mov	eax, 3
	imul	ecx, eax, 0
	add	ecx, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	mov	DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA, ecx ; CDXUTIMEEditBox::s_wszCurrIndicator
$LN8@CheckInput:

; 5740 :                     break;
; 5741 :             }
; 5742 :             break;

	jmp	SHORT $LN11@CheckInput
$LN4@CheckInput:

; 5743 :         // Korean
; 5744 :         case LANG_KOREAN:
; 5745 :             s_wszCurrIndicator = s_aszIndicator[INDICATOR_KOREAN];

	mov	eax, 3
	imul	ecx, eax, 3
	add	ecx, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	mov	DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA, ecx ; CDXUTIMEEditBox::s_wszCurrIndicator

; 5746 :             s_bVerticalCand = false;

	mov	BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA, 0 ; CDXUTIMEEditBox::s_bVerticalCand

; 5747 :             break;

	jmp	SHORT $LN11@CheckInput
$LN3@CheckInput:

; 5748 :         // Japanese
; 5749 :         case LANG_JAPANESE:
; 5750 :             s_wszCurrIndicator = s_aszIndicator[INDICATOR_JAPANESE];

	mov	eax, 3
	shl	eax, 2
	add	eax, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	mov	DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA, eax ; CDXUTIMEEditBox::s_wszCurrIndicator

; 5751 :             s_bVerticalCand = true;

	mov	BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA, 1 ; CDXUTIMEEditBox::s_bVerticalCand

; 5752 :             break;

	jmp	SHORT $LN11@CheckInput
$LN2@CheckInput:

; 5753 :         default:
; 5754 :             // A non-IME language.  Obtain the language abbreviation
; 5755 :             // and store it for rendering the indicator later.
; 5756 :             s_wszCurrIndicator = s_aszIndicator[INDICATOR_NON_IME];

	mov	eax, 3
	imul	ecx, eax, 0
	add	ecx, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	mov	DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA, ecx ; CDXUTIMEEditBox::s_wszCurrIndicator
$LN11@CheckInput:

; 5757 :     }
; 5758 : 
; 5759 :     // If non-IME, use the language abbreviation.
; 5760 :     if( s_wszCurrIndicator == s_aszIndicator[INDICATOR_NON_IME] )

	mov	eax, 3
	imul	ecx, eax, 0
	add	ecx, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	cmp	DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA, ecx ; CDXUTIMEEditBox::s_wszCurrIndicator
	jne	SHORT $LN14@CheckInput

; 5761 :     {
; 5762 :         TCHAR wszLang[5];
; 5763 :         GetLocaleInfoA( MAKELCID( LOWORD( s_hklCurrent ), SORT_DEFAULT ), LOCALE_SABBREVLANGNAME, wszLang, 5 );

	mov	esi, esp
	push	5
	lea	eax, DWORD PTR _wszLang$1[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	push	edx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5764 :         s_wszCurrIndicator[0] = wszLang[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA ; CDXUTIMEEditBox::s_wszCurrIndicator
	mov	cl, BYTE PTR _wszLang$1[ebp+ecx]
	mov	BYTE PTR [edx+eax], cl

; 5765 :         s_wszCurrIndicator[1] = tolower( wszLang[1] );

	mov	eax, 1
	shl	eax, 0
	movsx	ecx, BYTE PTR _wszLang$1[ebp+eax]
	push	ecx
	call	_tolower
	add	esp, 4
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA ; CDXUTIMEEditBox::s_wszCurrIndicator
	mov	BYTE PTR [ecx+edx], al
$LN14@CheckInput:

; 5766 :     }
; 5767 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@CheckInput
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@CheckInput:
	DD	1
	DD	$LN19@CheckInput
$LN19@CheckInput:
	DD	-16					; fffffff0H
	DD	5
	DD	$LN18@CheckInput
$LN18@CheckInput:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
?CheckInputLocale@CDXUTIMEEditBox@@KAXXZ ENDP		; CDXUTIMEEditBox::CheckInputLocale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetImeId@CDXUTIMEEditBox@@KAKI@Z
_TEXT	SEGMENT
_dwVer$1 = -1104					; size = 4
_szTmp$ = -1092						; size = 1024
_cbVerData$ = -60					; size = 4
_lpVerData$ = -48					; size = 4
_lpVerBuffer$ = -36					; size = 4
_dwVerHandle$ = -24					; size = 4
_dwVerSize$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_uIndex$ = 8						; size = 4
?GetImeId@CDXUTIMEEditBox@@KAKI@Z PROC			; CDXUTIMEEditBox::GetImeId, COMDAT

; 5626 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1300				; 00000514H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1300]
	mov	ecx, 325				; 00000145H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 5627 :     static HKL hklPrev = 0;
; 5628 :     static DWORD dwID[2] = { 0, 0 };  // Cache the result
; 5629 :     
; 5630 :     DWORD   dwVerSize;
; 5631 :     DWORD   dwVerHandle;
; 5632 :     LPVOID  lpVerBuffer;
; 5633 :     LPVOID  lpVerData;
; 5634 :     UINT    cbVerData;
; 5635 :     char    szTmp[1024];
; 5636 : 
; 5637 :     if( uIndex >= sizeof( dwID ) / sizeof( dwID[0] ) )

	cmp	DWORD PTR _uIndex$[ebp], 2
	jb	SHORT $LN14@GetImeId

; 5638 :         return 0;

	xor	eax, eax
	jmp	$LN15@GetImeId
$LN14@GetImeId:

; 5639 : 
; 5640 :     if( hklPrev == s_hklCurrent )

	mov	eax, DWORD PTR ?hklPrev@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAUHKL__@@A
	cmp	eax, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	jne	SHORT $LN13@GetImeId

; 5641 :         return dwID[uIndex];

	mov	eax, DWORD PTR _uIndex$[ebp]
	mov	eax, DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax*4]
	jmp	$LN15@GetImeId
$LN13@GetImeId:

; 5642 : 
; 5643 :     hklPrev = s_hklCurrent;  // Save for the next invocation

	mov	eax, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	mov	DWORD PTR ?hklPrev@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAUHKL__@@A, eax

; 5644 : 
; 5645 :     // Check if we are using an older Chinese IME
; 5646 :     if( !( ( s_hklCurrent == _CHT_HKL ) || ( s_hklCurrent == _CHT_HKL2 ) || ( s_hklCurrent == _CHS_HKL ) ) )

	cmp	DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A, -536345596 ; CDXUTIMEEditBox::s_hklCurrent, e0080404H
	je	SHORT $LN12@GetImeId
	cmp	DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A, -536280060 ; CDXUTIMEEditBox::s_hklCurrent, e0090404H
	je	SHORT $LN12@GetImeId
	cmp	DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A, -535951356 ; CDXUTIMEEditBox::s_hklCurrent, e00e0804H
	je	SHORT $LN12@GetImeId

; 5647 :     {
; 5648 :         dwID[0] = dwID[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax], 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[edx], 0

; 5649 :         return dwID[uIndex];

	mov	eax, DWORD PTR _uIndex$[ebp]
	mov	eax, DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax*4]
	jmp	$LN15@GetImeId
$LN12@GetImeId:

; 5650 :     }
; 5651 : 
; 5652 :     // Obtain the IME file name
; 5653 :     if ( !_ImmGetIMEFileNameA( s_hklCurrent, szTmp, ( sizeof(szTmp) / sizeof(szTmp[0]) ) - 1 ) )

	mov	esi, esp
	push	1023					; 000003ffH
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	push	ecx
	call	DWORD PTR ?_ImmGetIMEFileNameA@CDXUTIMEEditBox@@1P6GIPAUHKL__@@PADI@ZA ; CDXUTIMEEditBox::_ImmGetIMEFileNameA
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN11@GetImeId

; 5654 :     {
; 5655 :         dwID[0] = dwID[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax], 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[edx], 0

; 5656 :         return dwID[uIndex];

	mov	eax, DWORD PTR _uIndex$[ebp]
	mov	eax, DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax*4]
	jmp	$LN15@GetImeId
$LN11@GetImeId:

; 5657 :     }
; 5658 : 
; 5659 :     // Check for IME that doesn't implement reading string API
; 5660 :     if ( !_GetReadingString )

	cmp	DWORD PTR ?_GetReadingString@CDXUTIMEEditBox@@1P6GIPAUHIMC__@@IPADPAH2PAI@ZA, 0 ; CDXUTIMEEditBox::_GetReadingString
	jne	$LN10@GetImeId

; 5661 :     {
; 5662 :         if( ( CompareStringA( LCID_INVARIANT, NORM_IGNORECASE, szTmp, -1, CHT_IMEFILENAME1, -1 ) != CSTR_EQUAL ) &&
; 5663 :             ( CompareStringA( LCID_INVARIANT, NORM_IGNORECASE, szTmp, -1, CHT_IMEFILENAME2, -1 ) != CSTR_EQUAL ) &&
; 5664 :             ( CompareStringA( LCID_INVARIANT, NORM_IGNORECASE, szTmp, -1, CHT_IMEFILENAME3, -1 ) != CSTR_EQUAL ) &&
; 5665 :             ( CompareStringA( LCID_INVARIANT, NORM_IGNORECASE, szTmp, -1, CHS_IMEFILENAME1, -1 ) != CSTR_EQUAL ) &&
; 5666 :             ( CompareStringA( LCID_INVARIANT, NORM_IGNORECASE, szTmp, -1, CHS_IMEFILENAME2, -1 ) != CSTR_EQUAL ) )

	mov	esi, esp
	push	-1
	push	OFFSET ??_C@_0N@FFMHCBAD@TINTLGNT?4IME?$AA@
	push	-1
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	$LN10@GetImeId
	mov	esi, esp
	push	-1
	push	OFFSET ??_C@_0N@JMLDIBIB@CINTLGNT?4IME?$AA@
	push	-1
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	$LN10@GetImeId
	mov	esi, esp
	push	-1
	push	OFFSET ??_C@_0N@FHDFFBN@MSTCIPHA?4IME?$AA@
	push	-1
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	$LN10@GetImeId
	mov	esi, esp
	push	-1
	push	OFFSET ??_C@_0N@JFHOELJF@PINTLGNT?4IME?$AA@
	push	-1
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN10@GetImeId
	mov	esi, esp
	push	-1
	push	OFFSET ??_C@_0N@ONOBNHOE@MSSCIPYA?4IME?$AA@
	push	-1
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN10@GetImeId

; 5667 :         {
; 5668 :             dwID[0] = dwID[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax], 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[edx], 0

; 5669 :             return dwID[uIndex];

	mov	eax, DWORD PTR _uIndex$[ebp]
	mov	eax, DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax*4]
	jmp	$LN15@GetImeId
$LN10@GetImeId:

; 5670 :         }
; 5671 :     }
; 5672 : 
; 5673 :     dwVerSize = _GetFileVersionInfoSizeA( szTmp, &dwVerHandle );

	mov	esi, esp
	lea	eax, DWORD PTR _dwVerHandle$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szTmp$[ebp]
	push	ecx
	call	DWORD PTR ?_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@1P6GKPADPAK@ZA ; CDXUTIMEEditBox::_GetFileVersionInfoSizeA
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwVerSize$[ebp], eax

; 5674 :     if( dwVerSize )

	cmp	DWORD PTR _dwVerSize$[ebp], 0
	je	$LN8@GetImeId

; 5675 :     {
; 5676 :         lpVerBuffer = HeapAlloc( GetProcessHeap(), 0, dwVerSize );

	mov	esi, esp
	mov	eax, DWORD PTR _dwVerSize$[ebp]
	push	eax
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetProcessHeap@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpVerBuffer$[ebp], eax

; 5677 :         if( lpVerBuffer )

	cmp	DWORD PTR _lpVerBuffer$[ebp], 0
	je	$LN8@GetImeId

; 5678 :         {
; 5679 :             if( _GetFileVersionInfoA( szTmp, dwVerHandle, dwVerSize, lpVerBuffer ) )

	mov	esi, esp
	mov	eax, DWORD PTR _lpVerBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwVerSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwVerHandle$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	call	DWORD PTR ?_GetFileVersionInfoA@CDXUTIMEEditBox@@1P6GHPADKKPAX@ZA ; CDXUTIMEEditBox::_GetFileVersionInfoA
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN6@GetImeId

; 5680 :             {
; 5681 :                 if( _VerQueryValueA( lpVerBuffer, "\\", &lpVerData, &cbVerData ) )

	mov	esi, esp
	lea	eax, DWORD PTR _cbVerData$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lpVerData$[ebp]
	push	ecx
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	mov	edx, DWORD PTR _lpVerBuffer$[ebp]
	push	edx
	call	DWORD PTR ?_VerQueryValueA@CDXUTIMEEditBox@@1P6GHQAXPADPAPAXPAI@ZA ; CDXUTIMEEditBox::_VerQueryValueA
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN6@GetImeId

; 5682 :                 {
; 5683 :                     DWORD dwVer = ( (VS_FIXEDFILEINFO*)lpVerData )->dwFileVersionMS;

	mov	eax, DWORD PTR _lpVerData$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _dwVer$1[ebp], ecx

; 5684 :                     dwVer = ( dwVer & 0x00ff0000 ) << 8 | ( dwVer & 0x000000ff ) << 16;

	mov	eax, DWORD PTR _dwVer$1[ebp]
	and	eax, 16711680				; 00ff0000H
	shl	eax, 8
	mov	ecx, DWORD PTR _dwVer$1[ebp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	DWORD PTR _dwVer$1[ebp], eax

; 5685 :                     if( _GetReadingString
; 5686 :                         ||
; 5687 :                         ( GetLanguage() == LANG_CHT &&
; 5688 :                           ( dwVer == MAKEIMEVERSION(4, 2) || 
; 5689 :                             dwVer == MAKEIMEVERSION(4, 3) || 
; 5690 :                             dwVer == MAKEIMEVERSION(4, 4) || 
; 5691 :                             dwVer == MAKEIMEVERSION(5, 0) ||
; 5692 :                             dwVer == MAKEIMEVERSION(5, 1) ||
; 5693 :                             dwVer == MAKEIMEVERSION(5, 2) ||
; 5694 :                             dwVer == MAKEIMEVERSION(6, 0) ) )
; 5695 :                         ||
; 5696 :                         ( GetLanguage() == LANG_CHS &&
; 5697 :                           ( dwVer == MAKEIMEVERSION(4, 1) ||
; 5698 :                             dwVer == MAKEIMEVERSION(4, 2) ||
; 5699 :                             dwVer == MAKEIMEVERSION(5, 3) ) )
; 5700 :                       )

	cmp	DWORD PTR ?_GetReadingString@CDXUTIMEEditBox@@1P6GIPAUHIMC__@@IPADPAH2PAI@ZA, 0 ; CDXUTIMEEditBox::_GetReadingString
	jne	$LN3@GetImeId
	call	?GetLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetLanguage
	movzx	eax, ax
	cmp	eax, 1028				; 00000404H
	jne	SHORT $LN2@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67239936	; 04020000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67305472	; 04030000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67371008	; 04040000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 83886080	; 05000000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 83951616	; 05010000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 84017152	; 05020000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 100663296	; 06000000H
	je	SHORT $LN3@GetImeId
$LN2@GetImeId:
	call	?GetLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetLanguage
	movzx	eax, ax
	cmp	eax, 2052				; 00000804H
	jne	SHORT $LN6@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67174400	; 04010000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67239936	; 04020000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 84082688	; 05030000H
	jne	SHORT $LN6@GetImeId
$LN3@GetImeId:

; 5701 :                     {
; 5702 :                         dwID[0] = dwVer | GetLanguage();

	call	?GetLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetLanguage
	movzx	eax, ax
	or	eax, DWORD PTR _dwVer$1[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[edx], eax

; 5703 :                         dwID[1] = ( (VS_FIXEDFILEINFO*)lpVerData )->dwFileVersionLS;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _lpVerData$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax], edx
$LN6@GetImeId:

; 5704 :                     }
; 5705 :                 }
; 5706 :             }
; 5707 :             HeapFree( GetProcessHeap(), 0, lpVerBuffer );

	mov	esi, esp
	mov	eax, DWORD PTR _lpVerBuffer$[ebp]
	push	eax
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetProcessHeap@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@GetImeId:

; 5708 :         }
; 5709 :     }
; 5710 : 
; 5711 :     return dwID[uIndex];

	mov	eax, DWORD PTR _uIndex$[ebp]
	mov	eax, DWORD PTR ?dwID@?1??GetImeId@CDXUTIMEEditBox@@KAKI@Z@4PAKA[eax*4]
$LN15@GetImeId:

; 5712 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@GetImeId
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1300				; 00000514H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@GetImeId:
	DD	4
	DD	$LN21@GetImeId
$LN21@GetImeId:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@GetImeId
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN18@GetImeId
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN19@GetImeId
	DD	-1092					; fffffbbcH
	DD	1024					; 00000400H
	DD	$LN20@GetImeId
$LN20@GetImeId:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN19@GetImeId:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN18@GetImeId:
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN17@GetImeId:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?GetImeId@CDXUTIMEEditBox@@KAKI@Z ENDP			; CDXUTIMEEditBox::GetImeId
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SendKey@CDXUTIMEEditBox@@KAXE@Z
_TEXT	SEGMENT
_nVirtKey$ = 8						; size = 1
?SendKey@CDXUTIMEEditBox@@KAXE@Z PROC			; CDXUTIMEEditBox::SendKey, COMDAT

; 5564 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5565 :     keybd_event( nVirtKey, 0, 0,               0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	movzx	eax, BYTE PTR _nVirtKey$[ebp]
	push	eax
	call	DWORD PTR __imp__keybd_event@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5566 :     keybd_event( nVirtKey, 0, KEYEVENTF_KEYUP, 0 );

	mov	esi, esp
	push	0
	push	2
	push	0
	movzx	eax, BYTE PTR _nVirtKey$[ebp]
	push	eax
	call	DWORD PTR __imp__keybd_event@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5567 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SendKey@CDXUTIMEEditBox@@KAXE@Z ENDP			; CDXUTIMEEditBox::SendKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetSubLanguage@CDXUTIMEEditBox@@KAGXZ
_TEXT	SEGMENT
?GetSubLanguage@CDXUTIMEEditBox@@KAGXZ PROC		; CDXUTIMEEditBox::GetSubLanguage, COMDAT

; 990  :     static WORD GetSubLanguage() { return SUBLANGID( LOWORD( s_hklCurrent ) ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	eax, ax
	sar	eax, 10					; 0000000aH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubLanguage@CDXUTIMEEditBox@@KAGXZ ENDP		; CDXUTIMEEditBox::GetSubLanguage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ
_TEXT	SEGMENT
?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ PROC		; CDXUTIMEEditBox::GetPrimaryLanguage, COMDAT

; 989  :     static WORD GetPrimaryLanguage() { return PRIMARYLANGID( LOWORD( s_hklCurrent ) ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	eax, ax
	and	eax, 1023				; 000003ffH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ENDP		; CDXUTIMEEditBox::GetPrimaryLanguage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetLanguage@CDXUTIMEEditBox@@KAGXZ
_TEXT	SEGMENT
?GetLanguage@CDXUTIMEEditBox@@KAGXZ PROC		; CDXUTIMEEditBox::GetLanguage, COMDAT

; 988  :     static WORD GetLanguage() { return LOWORD( s_hklCurrent ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ?s_hklCurrent@CDXUTIMEEditBox@@1PAUHKL__@@A ; CDXUTIMEEditBox::s_hklCurrent
	and	eax, 65535				; 0000ffffH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLanguage@CDXUTIMEEditBox@@KAGXZ ENDP		; CDXUTIMEEditBox::GetLanguage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RenderIndicator@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv149 = -308						; size = 4
tv144 = -308						; size = 4
$T1 = -300						; size = 16
_pwszIndicator$ = -84					; size = 4
_rcCalc$ = -72						; size = 16
_rc$ = -48						; size = 16
_pElement$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?RenderIndicator@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z PROC ; CDXUTIMEEditBox::RenderIndicator, COMDAT
; _this$ = ecx

; 7101 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 7102 :     CDXUTElement *pElement = m_Elements.GetAt( 9 );

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 7103 :     pElement->TextureColor.Blend( DXUT_STATE_NORMAL, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 7104 : 
; 7105 :     m_pDialog->DrawSprite( pElement, &m_rcIndicator );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 385				; 00000181H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 7106 :     RECT rc = m_rcIndicator;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 385				; 00000181H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rc$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rc$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rc$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rc$[ebp+12], edx

; 7107 :     InflateRect( &rc, -m_nSpacing, -m_nSpacing );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+98]
	neg	ecx
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+98]
	neg	eax
	push	eax
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	DWORD PTR __imp__InflateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7108 :     pElement->FontColor.Current = s_ImeState == IMEUI_STATE_ON && s_bEnableImeSystem ? m_IndicatorImeColor : m_IndicatorEngColor;

	cmp	DWORD PTR ?s_ImeState@CDXUTIMEEditBox@@1W4IMESTATE@1@A, 1 ; CDXUTIMEEditBox::s_ImeState
	jne	SHORT $LN3@RenderIndi
	movzx	eax, BYTE PTR ?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bEnableImeSystem
	test	eax, eax
	je	SHORT $LN3@RenderIndi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+369]
	mov	DWORD PTR tv144[ebp], edx
	jmp	SHORT $LN4@RenderIndi
$LN3@RenderIndi:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+373]
	mov	DWORD PTR tv144[ebp], ecx
$LN4@RenderIndi:
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	eax, DWORD PTR _pElement$[ebp]
	add	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T1[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 7109 :     RECT rcCalc = { 0, 0, 0, 0 };

	mov	DWORD PTR _rcCalc$[ebp], 0
	mov	DWORD PTR _rcCalc$[ebp+4], 0
	mov	DWORD PTR _rcCalc$[ebp+8], 0
	mov	DWORD PTR _rcCalc$[ebp+12], 0

; 7110 :     // If IME system is off, draw English indicator.
; 7111 :     TCHAR *pwszIndicator = s_bEnableImeSystem ? s_wszCurrIndicator : s_aszIndicator[0];

	movzx	eax, BYTE PTR ?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bEnableImeSystem
	test	eax, eax
	je	SHORT $LN5@RenderIndi
	mov	ecx, DWORD PTR ?s_wszCurrIndicator@CDXUTIMEEditBox@@1PADA ; CDXUTIMEEditBox::s_wszCurrIndicator
	mov	DWORD PTR tv149[ebp], ecx
	jmp	SHORT $LN6@RenderIndi
$LN5@RenderIndi:
	mov	edx, 3
	imul	eax, edx, 0
	add	eax, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	mov	DWORD PTR tv149[ebp], eax
$LN6@RenderIndi:
	mov	ecx, DWORD PTR tv149[ebp]
	mov	DWORD PTR _pwszIndicator$[ebp], ecx

; 7112 : 
; 7113 :     m_pDialog->CalcTextRect( pwszIndicator, pElement, &rcCalc );

	push	-1
	lea	eax, DWORD PTR _rcCalc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pwszIndicator$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ; CDXUTDialog::CalcTextRect

; 7114 :     m_pDialog->DrawText( pwszIndicator, pElement, &rc );

	push	-1
	push	0
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pwszIndicator$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 7115 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@RenderIndi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN10@RenderIndi:
	DD	2
	DD	$LN9@RenderIndi
$LN9@RenderIndi:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN7@RenderIndi
	DD	-72					; ffffffb8H
	DD	16					; 00000010H
	DD	$LN8@RenderIndi
$LN8@RenderIndi:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	0
$LN7@RenderIndi:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
?RenderIndicator@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ENDP ; CDXUTIMEEditBox::RenderIndicator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RenderComposition@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv211 = -584						; size = 4
$T1 = -576						; size = 16
$T2 = -552						; size = 16
$T3 = -528						; size = 16
$T4 = -504						; size = 16
_rcTarget$5 = -288					; size = 16
_nXRight$6 = -264					; size = 4
_nXLeft$7 = -252					; size = 4
_bkColor$8 = -240					; size = 4
_pcComp$ = -228						; size = 4
_pAttr$ = -216						; size = 4
_nCharFirst$ = -204					; size = 4
_nNumCharToDraw$9 = -192				; size = 4
_bTrail$10 = -180					; size = 4
_nLastInLine$11 = -168					; size = 4
_nCharLeft$ = -156					; size = 4
_pwszComp$ = -144					; size = 4
_TextColor$ = -132					; size = 4
_rcFirst$ = -120					; size = 16
_rc$ = -96						; size = 16
_pElement$ = -72					; size = 4
_nXFirst$ = -60						; size = 4
_nX$ = -48						; size = 4
_rcCaret$ = -36						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?RenderComposition@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z PROC ; CDXUTIMEEditBox::RenderComposition, COMDAT
; _this$ = ecx

; 6938 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 584				; 00000248H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-584]
	mov	ecx, 146				; 00000092H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 6939 :     RECT rcCaret = { 0, 0, 0, 0 };

	mov	DWORD PTR _rcCaret$[ebp], 0
	mov	DWORD PTR _rcCaret$[ebp+4], 0
	mov	DWORD PTR _rcCaret$[ebp+8], 0
	mov	DWORD PTR _rcCaret$[ebp+12], 0

; 6940 :     int nX, nXFirst;
; 6941 :     m_Buffer.CPtoX( m_nCaret, FALSE, &nX );

	lea	eax, DWORD PTR _nX$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6942 :     m_Buffer.CPtoX( m_nFirstVisible, FALSE, &nXFirst );

	lea	eax, DWORD PTR _nXFirst$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6943 :     CDXUTElement *pElement = m_Elements.GetAt( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 6944 : 
; 6945 :     // Get the required width
; 6946 :     RECT rc = { m_rcText.left + nX - nXFirst, m_rcText.top,
; 6947 :                 m_rcText.left + nX - nXFirst, m_rcText.bottom };

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+102]
	add	ecx, DWORD PTR _nX$[ebp]
	sub	ecx, DWORD PTR _nXFirst$[ebp]
	mov	DWORD PTR _rc$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+106]
	mov	DWORD PTR _rc$[ebp+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+102]
	add	ecx, DWORD PTR _nX$[ebp]
	sub	ecx, DWORD PTR _nXFirst$[ebp]
	mov	DWORD PTR _rc$[ebp+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+114]
	mov	DWORD PTR _rc$[ebp+12], ecx

; 6948 :     m_pDialog->CalcTextRect( s_CompString.GetBuffer(), pElement, &rc );

	push	-1
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ; CDXUTDialog::CalcTextRect

; 6949 : 
; 6950 :     // If the composition string is too long to fit within
; 6951 :     // the text area, move it to below the current line.
; 6952 :     // This matches the behavior of the default IME.
; 6953 :     if( rc.right > m_rcText.right )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp+8]
	cmp	ecx, DWORD PTR [eax+110]
	jle	SHORT $LN20@RenderComp

; 6954 :         OffsetRect( &rc, m_rcText.left - rc.left, rc.bottom - rc.top );

	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+102]
	sub	edx, DWORD PTR _rc$[ebp]
	push	edx
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@RenderComp:

; 6955 : 
; 6956 :     // Save the rectangle position for processing highlighted text.
; 6957 :     RECT rcFirst = rc;

	mov	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _rcFirst$[ebp], eax
	mov	ecx, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR _rcFirst$[ebp+4], ecx
	mov	edx, DWORD PTR _rc$[ebp+8]
	mov	DWORD PTR _rcFirst$[ebp+8], edx
	mov	eax, DWORD PTR _rc$[ebp+12]
	mov	DWORD PTR _rcFirst$[ebp+12], eax

; 6958 : 
; 6959 :     // Update s_ptCompString for RenderCandidateReadingWindow().
; 6960 :     s_ptCompString.x = rc.left; s_ptCompString.y = rc.top;

	mov	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A, eax
	mov	eax, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A+4, eax

; 6961 : 
; 6962 :     D3DCOLOR TextColor = m_CompColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+341]
	mov	DWORD PTR _TextColor$[ebp], ecx

; 6963 :     // Render the window and string.
; 6964 :     // If the string is too long, we must wrap the line.
; 6965 :     pElement->FontColor.Current = TextColor;

	mov	eax, DWORD PTR _TextColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T1[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 6966 :     const TCHAR *pwszComp = s_CompString.GetBuffer();

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	DWORD PTR _pwszComp$[ebp], eax

; 6967 :     int nCharLeft = s_CompString.GetTextSize();

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	mov	DWORD PTR _nCharLeft$[ebp], eax
$LN19@RenderComp:

; 6968 :     for( ; ; )
; 6969 :     {
; 6970 :         // Find the last character that can be drawn on the same line.
; 6971 :         int nLastInLine;
; 6972 :         int bTrail;
; 6973 :         s_CompString.XtoCP( m_rcText.right - rc.left, &nLastInLine, &bTrail );

	lea	eax, DWORD PTR _bTrail$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _nLastInLine$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+110]
	sub	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?XtoCP@CUniBuffer@@QAEJHPAH0@Z		; CUniBuffer::XtoCP

; 6974 :         int nNumCharToDraw = __min( nCharLeft, nLastInLine );

	mov	eax, DWORD PTR _nCharLeft$[ebp]
	cmp	eax, DWORD PTR _nLastInLine$11[ebp]
	jge	SHORT $LN23@RenderComp
	mov	ecx, DWORD PTR _nCharLeft$[ebp]
	mov	DWORD PTR tv211[ebp], ecx
	jmp	SHORT $LN24@RenderComp
$LN23@RenderComp:
	mov	edx, DWORD PTR _nLastInLine$11[ebp]
	mov	DWORD PTR tv211[ebp], edx
$LN24@RenderComp:
	mov	eax, DWORD PTR tv211[ebp]
	mov	DWORD PTR _nNumCharToDraw$9[ebp], eax

; 6975 :         m_pDialog->CalcTextRect( pwszComp, pElement, &rc, nNumCharToDraw );

	mov	eax, DWORD PTR _nNumCharToDraw$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pElement$[ebp]
	push	edx
	mov	eax, DWORD PTR _pwszComp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ; CDXUTDialog::CalcTextRect

; 6976 : 
; 6977 :         // Draw the background
; 6978 :         // For Korean IME, blink the composition window background as if it
; 6979 :         // is a cursor.
; 6980 :         if( GetPrimaryLanguage() == LANG_KOREAN )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN17@RenderComp

; 6981 :         {
; 6982 :             if( m_bCaretOn )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+278]
	test	ecx, ecx
	je	SHORT $LN16@RenderComp

; 6983 :             {
; 6984 :                 m_pDialog->DrawRect( &rc, m_CompWinColor );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+345]
	push	ecx
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect

; 6985 :             }
; 6986 :             else

	jmp	SHORT $LN15@RenderComp
$LN16@RenderComp:

; 6987 :             {
; 6988 :                 // Not drawing composition string background. We
; 6989 :                 // use the editbox's text color for composition
; 6990 :                 // string text.
; 6991 :                 TextColor = m_Elements.GetAt(0)->FontColor.States[DXUT_STATE_NORMAL];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR [eax+edx+68]
	mov	DWORD PTR _TextColor$[ebp], eax
$LN15@RenderComp:

; 6992 :             }
; 6993 :         } else

	jmp	SHORT $LN14@RenderComp
$LN17@RenderComp:

; 6994 :         {
; 6995 :             // Non-Korean IME. Always draw composition background.
; 6996 :             m_pDialog->DrawRect( &rc, m_CompWinColor );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+345]
	push	ecx
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect
$LN14@RenderComp:

; 6997 :         }
; 6998 : 
; 6999 :         // Draw the text
; 7000 :         pElement->FontColor.Current = TextColor;

	mov	eax, DWORD PTR _TextColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T2[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 7001 :         m_pDialog->DrawText( pwszComp, pElement, &rc, false, nNumCharToDraw );

	mov	eax, DWORD PTR _nNumCharToDraw$9[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pElement$[ebp]
	push	edx
	mov	eax, DWORD PTR _pwszComp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 7002 : 
; 7003 :         // Advance pointer and counter
; 7004 :         nCharLeft -= nNumCharToDraw;

	mov	eax, DWORD PTR _nCharLeft$[ebp]
	sub	eax, DWORD PTR _nNumCharToDraw$9[ebp]
	mov	DWORD PTR _nCharLeft$[ebp], eax

; 7005 :         pwszComp += nNumCharToDraw;

	mov	eax, DWORD PTR _pwszComp$[ebp]
	add	eax, DWORD PTR _nNumCharToDraw$9[ebp]
	mov	DWORD PTR _pwszComp$[ebp], eax

; 7006 :         if( nCharLeft <= 0 )

	cmp	DWORD PTR _nCharLeft$[ebp], 0
	jg	SHORT $LN13@RenderComp

; 7007 :             break;

	jmp	SHORT $LN18@RenderComp
$LN13@RenderComp:

; 7008 : 
; 7009 :         // Advance rectangle coordinates to beginning of next line
; 7010 :         OffsetRect( &rc, m_rcText.left - rc.left, rc.bottom - rc.top );

	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+102]
	sub	edx, DWORD PTR _rc$[ebp]
	push	edx
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7011 :     }

	jmp	$LN19@RenderComp
$LN18@RenderComp:

; 7012 : 
; 7013 :     // Load the rect for the first line again.
; 7014 :     rc = rcFirst;

	mov	eax, DWORD PTR _rcFirst$[ebp]
	mov	DWORD PTR _rc$[ebp], eax
	mov	ecx, DWORD PTR _rcFirst$[ebp+4]
	mov	DWORD PTR _rc$[ebp+4], ecx
	mov	edx, DWORD PTR _rcFirst$[ebp+8]
	mov	DWORD PTR _rc$[ebp+8], edx
	mov	eax, DWORD PTR _rcFirst$[ebp+12]
	mov	DWORD PTR _rc$[ebp+12], eax

; 7015 : 
; 7016 :     // Inspect each character in the comp string.
; 7017 :     // For target-converted and target-non-converted characters,
; 7018 :     // we display a different background color so they appear highlighted.
; 7019 :     int nCharFirst = 0;

	mov	DWORD PTR _nCharFirst$[ebp], 0

; 7020 :     nXFirst = 0;

	mov	DWORD PTR _nXFirst$[ebp], 0

; 7021 :     s_nFirstTargetConv = -1;

	mov	DWORD PTR ?s_nFirstTargetConv@CDXUTIMEEditBox@@1HA, -1 ; CDXUTIMEEditBox::s_nFirstTargetConv

; 7022 :     BYTE *pAttr;
; 7023 :     const TCHAR *pcComp;
; 7024 :     for( pcComp = s_CompString.GetBuffer(), pAttr = s_abCompStringAttr;

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	DWORD PTR _pcComp$[ebp], eax
	mov	DWORD PTR _pAttr$[ebp], OFFSET ?s_abCompStringAttr@CDXUTIMEEditBox@@1PAEA ; CDXUTIMEEditBox::s_abCompStringAttr

; 7025 :           *pcComp != L'\0'; ++pcComp, ++pAttr )

	jmp	SHORT $LN12@RenderComp
$LN11@RenderComp:
	mov	eax, DWORD PTR _pcComp$[ebp]
	add	eax, 1
	mov	DWORD PTR _pcComp$[ebp], eax
	mov	ecx, DWORD PTR _pAttr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pAttr$[ebp], ecx
$LN12@RenderComp:
	mov	eax, DWORD PTR _pcComp$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN10@RenderComp

; 7026 :     {
; 7027 :         D3DCOLOR bkColor;
; 7028 : 
; 7029 :         // Render a different background for this character
; 7030 :         int nXLeft, nXRight;
; 7031 :         s_CompString.CPtoX( int(pcComp - s_CompString.GetBuffer()), FALSE, &nXLeft );

	lea	eax, DWORD PTR _nXLeft$7[ebp]
	push	eax
	push	0
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	ecx, DWORD PTR _pcComp$[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 7032 :         s_CompString.CPtoX( int(pcComp - s_CompString.GetBuffer()), TRUE, &nXRight );

	lea	eax, DWORD PTR _nXRight$6[ebp]
	push	eax
	push	1
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	ecx, DWORD PTR _pcComp$[ebp]
	sub	ecx, eax
	push	ecx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 7033 : 
; 7034 :         // Check if this character is off the right edge and should
; 7035 :         // be wrapped to the next line.
; 7036 :         if( nXRight - nXFirst > m_rcText.right - rc.left )

	mov	eax, DWORD PTR _nXRight$6[ebp]
	sub	eax, DWORD PTR _nXFirst$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+110]
	sub	edx, DWORD PTR _rc$[ebp]
	cmp	eax, edx
	jle	SHORT $LN9@RenderComp

; 7037 :         {
; 7038 :             // Advance rectangle coordinates to beginning of next line
; 7039 :             OffsetRect( &rc, m_rcText.left - rc.left, rc.bottom - rc.top );

	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+102]
	sub	edx, DWORD PTR _rc$[ebp]
	push	edx
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7040 : 
; 7041 :             // Update the line's first character information
; 7042 :             nCharFirst = int(pcComp - s_CompString.GetBuffer());

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	ecx, DWORD PTR _pcComp$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _nCharFirst$[ebp], ecx

; 7043 :             s_CompString.CPtoX( nCharFirst, FALSE, &nXFirst );

	lea	eax, DWORD PTR _nXFirst$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nCharFirst$[ebp]
	push	ecx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX
$LN9@RenderComp:

; 7044 :         }
; 7045 : 
; 7046 :         // If the caret is on this character, save the coordinates
; 7047 :         // for drawing the caret later.
; 7048 :         if( s_nCompCaret == int(pcComp - s_CompString.GetBuffer()) )

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	ecx, DWORD PTR _pcComp$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA, ecx ; CDXUTIMEEditBox::s_nCompCaret
	jne	SHORT $LN8@RenderComp

; 7049 :         {
; 7050 :             rcCaret = rc;

	mov	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _rcCaret$[ebp], eax
	mov	ecx, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR _rcCaret$[ebp+4], ecx
	mov	edx, DWORD PTR _rc$[ebp+8]
	mov	DWORD PTR _rcCaret$[ebp+8], edx
	mov	eax, DWORD PTR _rc$[ebp+12]
	mov	DWORD PTR _rcCaret$[ebp+12], eax

; 7051 :             rcCaret.left += nXLeft - nXFirst - 1;

	mov	eax, DWORD PTR _nXLeft$7[ebp]
	sub	eax, DWORD PTR _nXFirst$[ebp]
	mov	ecx, DWORD PTR _rcCaret$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _rcCaret$[ebp], edx

; 7052 :             rcCaret.right = rcCaret.left + 2;

	mov	eax, DWORD PTR _rcCaret$[ebp]
	add	eax, 2
	mov	DWORD PTR _rcCaret$[ebp+8], eax
$LN8@RenderComp:

; 7053 :         }
; 7054 : 
; 7055 :         // Set up color based on the character attribute
; 7056 :         if( *pAttr == ATTR_TARGET_CONVERTED )

	mov	eax, DWORD PTR _pAttr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN7@RenderComp

; 7057 :         {
; 7058 :             pElement->FontColor.Current = m_CompTargetColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+353]
	push	ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	edx, DWORD PTR _pElement$[ebp]
	add	edx, 92					; 0000005cH
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T3[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 7059 :             bkColor = m_CompTargetBkColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+357]
	mov	DWORD PTR _bkColor$8[ebp], ecx

; 7060 :         }
; 7061 :         else

	jmp	SHORT $LN6@RenderComp
$LN7@RenderComp:

; 7062 :         if( *pAttr == ATTR_TARGET_NOTCONVERTED )

	mov	eax, DWORD PTR _pAttr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 3
	jne	SHORT $LN5@RenderComp

; 7063 :         {
; 7064 :             pElement->FontColor.Current = m_CompTargetNonColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+361]
	push	ecx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	edx, DWORD PTR _pElement$[ebp]
	add	edx, 92					; 0000005cH
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T4[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 7065 :             bkColor = m_CompTargetNonBkColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+365]
	mov	DWORD PTR _bkColor$8[ebp], ecx

; 7066 :         }
; 7067 :         else

	jmp	SHORT $LN6@RenderComp
$LN5@RenderComp:

; 7068 :         {
; 7069 :             continue;

	jmp	$LN11@RenderComp
$LN6@RenderComp:

; 7070 :         }
; 7071 : 
; 7072 :         RECT rcTarget = { rc.left + nXLeft - nXFirst, rc.top, rc.left + nXRight - nXFirst, rc.bottom };

	mov	eax, DWORD PTR _rc$[ebp]
	add	eax, DWORD PTR _nXLeft$7[ebp]
	sub	eax, DWORD PTR _nXFirst$[ebp]
	mov	DWORD PTR _rcTarget$5[ebp], eax
	mov	eax, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR _rcTarget$5[ebp+4], eax
	mov	eax, DWORD PTR _rc$[ebp]
	add	eax, DWORD PTR _nXRight$6[ebp]
	sub	eax, DWORD PTR _nXFirst$[ebp]
	mov	DWORD PTR _rcTarget$5[ebp+8], eax
	mov	eax, DWORD PTR _rc$[ebp+12]
	mov	DWORD PTR _rcTarget$5[ebp+12], eax

; 7073 :         m_pDialog->DrawRect( &rcTarget, bkColor );

	mov	eax, DWORD PTR _bkColor$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _rcTarget$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect

; 7074 :         m_pDialog->DrawText( pcComp, pElement, &rcTarget, false, 1 );

	push	1
	push	0
	lea	eax, DWORD PTR _rcTarget$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcComp$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 7075 : 
; 7076 :         // Record the first target converted character's index
; 7077 :         if( -1 == s_nFirstTargetConv )

	cmp	DWORD PTR ?s_nFirstTargetConv@CDXUTIMEEditBox@@1HA, -1 ; CDXUTIMEEditBox::s_nFirstTargetConv
	jne	SHORT $LN3@RenderComp

; 7078 :             s_nFirstTargetConv = int(pAttr - s_abCompStringAttr);

	mov	eax, DWORD PTR _pAttr$[ebp]
	sub	eax, OFFSET ?s_abCompStringAttr@CDXUTIMEEditBox@@1PAEA ; CDXUTIMEEditBox::s_abCompStringAttr
	mov	DWORD PTR ?s_nFirstTargetConv@CDXUTIMEEditBox@@1HA, eax ; CDXUTIMEEditBox::s_nFirstTargetConv
$LN3@RenderComp:

; 7079 :     }

	jmp	$LN11@RenderComp
$LN10@RenderComp:

; 7080 : 
; 7081 :     // Render the composition caret
; 7082 :     if( m_bCaretOn )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+278]
	test	ecx, ecx
	je	SHORT $LN21@RenderComp

; 7083 :     {
; 7084 :         // If the caret is at the very end, its position would not have
; 7085 :         // been computed in the above loop.  We compute it here.
; 7086 :         if( s_nCompCaret == s_CompString.GetTextSize() )

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	cmp	DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA, eax ; CDXUTIMEEditBox::s_nCompCaret
	jne	SHORT $LN1@RenderComp

; 7087 :         {
; 7088 :             s_CompString.CPtoX( s_nCompCaret, FALSE, &nX );

	lea	eax, DWORD PTR _nX$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nCompCaret
	push	ecx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 7089 :             rcCaret = rc;

	mov	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _rcCaret$[ebp], eax
	mov	ecx, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR _rcCaret$[ebp+4], ecx
	mov	edx, DWORD PTR _rc$[ebp+8]
	mov	DWORD PTR _rcCaret$[ebp+8], edx
	mov	eax, DWORD PTR _rc$[ebp+12]
	mov	DWORD PTR _rcCaret$[ebp+12], eax

; 7090 :             rcCaret.left += nX - nXFirst - 1;

	mov	eax, DWORD PTR _nX$[ebp]
	sub	eax, DWORD PTR _nXFirst$[ebp]
	mov	ecx, DWORD PTR _rcCaret$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _rcCaret$[ebp], edx

; 7091 :             rcCaret.right = rcCaret.left + 2;

	mov	eax, DWORD PTR _rcCaret$[ebp]
	add	eax, 2
	mov	DWORD PTR _rcCaret$[ebp+8], eax
$LN1@RenderComp:

; 7092 :         }
; 7093 : 
; 7094 :         m_pDialog->DrawRect( &rcCaret, m_CompCaretColor );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+349]
	push	ecx
	lea	edx, DWORD PTR _rcCaret$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect
$LN21@RenderComp:

; 7095 :     }
; 7096 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@RenderComp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 584				; 00000248H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN36@RenderComp:
	DD	10					; 0000000aH
	DD	$LN35@RenderComp
$LN35@RenderComp:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN25@RenderComp
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN26@RenderComp
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN27@RenderComp
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN28@RenderComp
	DD	-120					; ffffff88H
	DD	16					; 00000010H
	DD	$LN29@RenderComp
	DD	-168					; ffffff58H
	DD	4
	DD	$LN30@RenderComp
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN31@RenderComp
	DD	-252					; ffffff04H
	DD	4
	DD	$LN32@RenderComp
	DD	-264					; fffffef8H
	DD	4
	DD	$LN33@RenderComp
	DD	-288					; fffffee0H
	DD	16					; 00000010H
	DD	$LN34@RenderComp
$LN34@RenderComp:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN33@RenderComp:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	82					; 00000052H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN32@RenderComp:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN31@RenderComp:
	DB	98					; 00000062H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
$LN30@RenderComp:
	DB	110					; 0000006eH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN29@RenderComp:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN28@RenderComp:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN27@RenderComp:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN26@RenderComp:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	0
$LN25@RenderComp:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
?RenderComposition@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ENDP ; CDXUTIMEEditBox::RenderComposition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RenderCandidateReadingWindow@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M_N@Z
_TEXT	SEGMENT
tv202 = -536						; size = 4
tv198 = -536						; size = 4
tv66 = -536						; size = 4
$T1 = -528						; size = 16
$T2 = -504						; size = 16
$T3 = -480						; size = 16
$T4 = -456						; size = 16
_nXRight$5 = -240					; size = 4
_nXLeft$6 = -228					; size = 4
_i$7 = -216						; size = 4
_nXCompTrail$8 = -204					; size = 4
_bHasPosition$ = -189					; size = 1
_i$9 = -180						; size = 4
_nSingleLineHeight$ = -168				; size = 4
_nHeightRequired$ = -156				; size = 4
_nWidthRequired$ = -144					; size = 4
_nXComp$ = -132						; size = 4
_nXFirst$ = -120					; size = 4
_nX$ = -108						; size = 4
_SelBkColor$ = -96					; size = 4
_SelTextColor$ = -84					; size = 4
_TextBkColor$ = -72					; size = 4
_TextColor$ = -60					; size = 4
_nNumEntries$ = -48					; size = 4
_rc$ = -36						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
_bReading$ = 16						; size = 1
?RenderCandidateReadingWindow@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M_N@Z PROC ; CDXUTIMEEditBox::RenderCandidateReadingWindow, COMDAT
; _this$ = ecx

; 6756 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 6757 :     RECT rc;
; 6758 :     UINT nNumEntries = bReading ? 4 : MAX_CANDLIST;

	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	je	SHORT $LN42@RenderCand
	mov	DWORD PTR tv66[ebp], 4
	jmp	SHORT $LN43@RenderCand
$LN42@RenderCand:
	mov	DWORD PTR tv66[ebp], 10			; 0000000aH
$LN43@RenderCand:
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _nNumEntries$[ebp], ecx

; 6759 :     D3DCOLOR TextColor, TextBkColor, SelTextColor, SelBkColor;
; 6760 :     int nX, nXFirst, nXComp;
; 6761 :     m_Buffer.CPtoX( m_nCaret, FALSE, &nX );

	lea	eax, DWORD PTR _nX$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6762 :     m_Buffer.CPtoX( m_nFirstVisible, FALSE, &nXFirst );

	lea	eax, DWORD PTR _nXFirst$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6763 : 
; 6764 :     if( bReading )

	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	je	SHORT $LN39@RenderCand

; 6765 :     {
; 6766 :         TextColor = m_ReadingColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+309]
	mov	DWORD PTR _TextColor$[ebp], ecx

; 6767 :         TextBkColor = m_ReadingWinColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+313]
	mov	DWORD PTR _TextBkColor$[ebp], ecx

; 6768 :         SelTextColor = m_ReadingSelColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+317]
	mov	DWORD PTR _SelTextColor$[ebp], ecx

; 6769 :         SelBkColor = m_ReadingSelBkColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+321]
	mov	DWORD PTR _SelBkColor$[ebp], ecx

; 6770 :     } else

	jmp	SHORT $LN38@RenderCand
$LN39@RenderCand:

; 6771 :     {
; 6772 :         TextColor = m_CandidateColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+325]
	mov	DWORD PTR _TextColor$[ebp], ecx

; 6773 :         TextBkColor = m_CandidateWinColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+329]
	mov	DWORD PTR _TextBkColor$[ebp], ecx

; 6774 :         SelTextColor = m_CandidateSelColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+333]
	mov	DWORD PTR _SelTextColor$[ebp], ecx

; 6775 :         SelBkColor = m_CandidateSelBkColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+337]
	mov	DWORD PTR _SelBkColor$[ebp], ecx
$LN38@RenderCand:

; 6776 :     }
; 6777 : 
; 6778 :     // For Japanese IME, align the window with the first target converted character.
; 6779 :     // For all other IMEs, align with the caret.  This is because the caret
; 6780 :     // does not move for Japanese IME.
; 6781 :     if ( GetLanguage() == LANG_CHT && !GetImeId() )

	call	?GetLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetLanguage
	movzx	eax, ax
	cmp	eax, 1028				; 00000404H
	jne	SHORT $LN37@RenderCand
	push	0
	call	?GetImeId@CDXUTIMEEditBox@@KAKI@Z	; CDXUTIMEEditBox::GetImeId
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN37@RenderCand

; 6782 :         nXComp = 0;

	mov	DWORD PTR _nXComp$[ebp], 0

; 6783 :     else

	jmp	SHORT $LN36@RenderCand
$LN37@RenderCand:

; 6784 :     if( GetPrimaryLanguage() == LANG_JAPANESE )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	cmp	eax, 17					; 00000011H
	jne	SHORT $LN35@RenderCand

; 6785 :         s_CompString.CPtoX( s_nFirstTargetConv, FALSE, &nXComp );

	lea	eax, DWORD PTR _nXComp$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?s_nFirstTargetConv@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nFirstTargetConv
	push	ecx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6786 :     else

	jmp	SHORT $LN36@RenderCand
$LN35@RenderCand:

; 6787 :         s_CompString.CPtoX( s_nCompCaret, FALSE, &nXComp );

	lea	eax, DWORD PTR _nXComp$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nCompCaret
	push	ecx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX
$LN36@RenderCand:

; 6788 : 
; 6789 :     // Compute the size of the candidate window
; 6790 :     int nWidthRequired = 0;

	mov	DWORD PTR _nWidthRequired$[ebp], 0

; 6791 :     int nHeightRequired = 0;

	mov	DWORD PTR _nHeightRequired$[ebp], 0

; 6792 :     int nSingleLineHeight = 0;

	mov	DWORD PTR _nSingleLineHeight$[ebp], 0

; 6793 : 
; 6794 :     if( ( s_bVerticalCand && !bReading ) ||
; 6795 :         ( !s_bHorizontalReading && bReading ) )

	movzx	eax, BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bVerticalCand
	test	eax, eax
	je	SHORT $LN31@RenderCand
	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	je	SHORT $LN32@RenderCand
$LN31@RenderCand:
	movzx	eax, BYTE PTR ?s_bHorizontalReading@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bHorizontalReading
	test	eax, eax
	jne	$LN33@RenderCand
	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	je	$LN33@RenderCand
$LN32@RenderCand:

; 6796 :     {
; 6797 :         // Vertical window
; 6798 :         for( UINT i = 0; i < nNumEntries; ++i )

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN30@RenderCand
$LN29@RenderCand:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN30@RenderCand:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _nNumEntries$[ebp]
	jae	$LN28@RenderCand

; 6799 :         {
; 6800 :             if( s_CandList.awszCandidate[i][0] == L'\0' )

	mov	eax, DWORD PTR _i$9[ebp]
	shl	eax, 8
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A[eax+edx]
	test	eax, eax
	jne	SHORT $LN27@RenderCand

; 6801 :                 break;

	jmp	$LN28@RenderCand
$LN27@RenderCand:

; 6802 :             SetRect( &rc, 0, 0, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6803 :             m_pDialog->CalcTextRect( s_CandList.awszCandidate[i], m_Elements.GetAt( 1 ), &rc );

	push	-1
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _i$9[ebp]
	shl	edx, 8
	add	edx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ; CDXUTDialog::CalcTextRect

; 6804 :             nWidthRequired = __max( nWidthRequired, rc.right - rc.left );

	mov	eax, DWORD PTR _rc$[ebp+8]
	sub	eax, DWORD PTR _rc$[ebp]
	cmp	DWORD PTR _nWidthRequired$[ebp], eax
	jle	SHORT $LN44@RenderCand
	mov	ecx, DWORD PTR _nWidthRequired$[ebp]
	mov	DWORD PTR tv198[ebp], ecx
	jmp	SHORT $LN45@RenderCand
$LN44@RenderCand:
	mov	edx, DWORD PTR _rc$[ebp+8]
	sub	edx, DWORD PTR _rc$[ebp]
	mov	DWORD PTR tv198[ebp], edx
$LN45@RenderCand:
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR _nWidthRequired$[ebp], eax

; 6805 :             nSingleLineHeight = __max( nSingleLineHeight, rc.bottom - rc.top );

	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	cmp	DWORD PTR _nSingleLineHeight$[ebp], eax
	jle	SHORT $LN46@RenderCand
	mov	ecx, DWORD PTR _nSingleLineHeight$[ebp]
	mov	DWORD PTR tv202[ebp], ecx
	jmp	SHORT $LN47@RenderCand
$LN46@RenderCand:
	mov	edx, DWORD PTR _rc$[ebp+12]
	sub	edx, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR tv202[ebp], edx
$LN47@RenderCand:
	mov	eax, DWORD PTR tv202[ebp]
	mov	DWORD PTR _nSingleLineHeight$[ebp], eax

; 6806 :         }

	jmp	$LN29@RenderCand
$LN28@RenderCand:

; 6807 :         nHeightRequired = nSingleLineHeight * nNumEntries;

	mov	eax, DWORD PTR _nSingleLineHeight$[ebp]
	imul	eax, DWORD PTR _nNumEntries$[ebp]
	mov	DWORD PTR _nHeightRequired$[ebp], eax
	jmp	$LN26@RenderCand
$LN33@RenderCand:

; 6808 :     } else
; 6809 :     {
; 6810 :         // Horizontal window
; 6811 :         SetRect( &rc, 0, 0, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6812 :         if( bReading )

	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	je	SHORT $LN25@RenderCand

; 6813 :             m_pDialog->CalcTextRect( s_wszReadingString, m_Elements.GetAt( 1 ), &rc );

	push	-1
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ?s_wszReadingString@CDXUTIMEEditBox@@1PADA ; CDXUTIMEEditBox::s_wszReadingString
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ; CDXUTDialog::CalcTextRect

; 6814 :         else

	jmp	SHORT $LN24@RenderCand
$LN25@RenderCand:

; 6815 :             m_pDialog->CalcTextRect( s_CandList.HoriCand.GetBuffer(), m_Elements.GetAt( 1 ), &rc );

	push	-1
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2560
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ; CDXUTDialog::CalcTextRect
$LN24@RenderCand:

; 6816 :         nWidthRequired = rc.right - rc.left;

	mov	eax, DWORD PTR _rc$[ebp+8]
	sub	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _nWidthRequired$[ebp], eax

; 6817 :         nSingleLineHeight = nHeightRequired = rc.bottom - rc.top;

	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR _nHeightRequired$[ebp], eax
	mov	ecx, DWORD PTR _nHeightRequired$[ebp]
	mov	DWORD PTR _nSingleLineHeight$[ebp], ecx
$LN26@RenderCand:

; 6818 :     }
; 6819 : 
; 6820 :     // Now that we have the dimension, calculate the location for the candidate window.
; 6821 :     // We attempt to fit the window in this order:
; 6822 :     // bottom, top, right, left.
; 6823 : 
; 6824 :     bool bHasPosition = false;

	mov	BYTE PTR _bHasPosition$[ebp], 0

; 6825 : 
; 6826 :     // Bottom
; 6827 :     SetRect( &rc, s_ptCompString.x + nXComp, s_ptCompString.y + m_rcText.bottom - m_rcText.top,
; 6828 :                   s_ptCompString.x + nXComp + nWidthRequired, s_ptCompString.y + m_rcText.bottom - m_rcText.top + nHeightRequired );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A+4
	add	ecx, DWORD PTR [eax+114]
	mov	edx, DWORD PTR _this$[ebp]
	sub	ecx, DWORD PTR [edx+106]
	add	ecx, DWORD PTR _nHeightRequired$[ebp]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	eax, DWORD PTR _nXComp$[ebp]
	add	eax, DWORD PTR _nWidthRequired$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A+4
	add	edx, DWORD PTR [ecx+114]
	mov	eax, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [eax+106]
	push	edx
	mov	ecx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	ecx, DWORD PTR _nXComp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6829 :     // if the right edge is cut off, move it left.
; 6830 :     if( rc.right > m_pDialog->GetWidth() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetWidth@CDXUTDialog@@QAEHXZ		; CDXUTDialog::GetWidth
	cmp	DWORD PTR _rc$[ebp+8], eax
	jle	SHORT $LN23@RenderCand

; 6831 :     {
; 6832 :         rc.left -= rc.right - m_pDialog->GetWidth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetWidth@CDXUTDialog@@QAEHXZ		; CDXUTDialog::GetWidth
	mov	ecx, DWORD PTR _rc$[ebp+8]
	sub	ecx, eax
	mov	edx, DWORD PTR _rc$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _rc$[ebp], edx

; 6833 :         rc.right = m_pDialog->GetWidth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetWidth@CDXUTDialog@@QAEHXZ		; CDXUTDialog::GetWidth
	mov	DWORD PTR _rc$[ebp+8], eax
$LN23@RenderCand:

; 6834 :     }
; 6835 :     if( rc.bottom <= m_pDialog->GetHeight() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetHeight@CDXUTDialog@@QAEHXZ		; CDXUTDialog::GetHeight
	cmp	DWORD PTR _rc$[ebp+12], eax
	jg	SHORT $LN22@RenderCand

; 6836 :         bHasPosition = true;

	mov	BYTE PTR _bHasPosition$[ebp], 1
$LN22@RenderCand:

; 6837 : 
; 6838 :     // Top
; 6839 :     if( !bHasPosition )

	movzx	eax, BYTE PTR _bHasPosition$[ebp]
	test	eax, eax
	jne	$LN21@RenderCand

; 6840 :     {
; 6841 :         SetRect( &rc, s_ptCompString.x + nXComp, s_ptCompString.y - nHeightRequired,
; 6842 :                       s_ptCompString.x + nXComp + nWidthRequired, s_ptCompString.y );

	mov	esi, esp
	mov	eax, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A+4
	push	eax
	mov	ecx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	ecx, DWORD PTR _nXComp$[ebp]
	add	ecx, DWORD PTR _nWidthRequired$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A+4
	sub	edx, DWORD PTR _nHeightRequired$[ebp]
	push	edx
	mov	eax, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	eax, DWORD PTR _nXComp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6843 :         // if the right edge is cut off, move it left.
; 6844 :         if( rc.right > m_pDialog->GetWidth() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetWidth@CDXUTDialog@@QAEHXZ		; CDXUTDialog::GetWidth
	cmp	DWORD PTR _rc$[ebp+8], eax
	jle	SHORT $LN20@RenderCand

; 6845 :         {
; 6846 :             rc.left -= rc.right - m_pDialog->GetWidth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetWidth@CDXUTDialog@@QAEHXZ		; CDXUTDialog::GetWidth
	mov	ecx, DWORD PTR _rc$[ebp+8]
	sub	ecx, eax
	mov	edx, DWORD PTR _rc$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _rc$[ebp], edx

; 6847 :             rc.right = m_pDialog->GetWidth();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetWidth@CDXUTDialog@@QAEHXZ		; CDXUTDialog::GetWidth
	mov	DWORD PTR _rc$[ebp+8], eax
$LN20@RenderCand:

; 6848 :         }
; 6849 :         if( rc.top >= 0 )

	cmp	DWORD PTR _rc$[ebp+4], 0
	jl	SHORT $LN21@RenderCand

; 6850 :             bHasPosition = true;

	mov	BYTE PTR _bHasPosition$[ebp], 1
$LN21@RenderCand:

; 6851 :     }
; 6852 : 
; 6853 :     // Right
; 6854 :     if( !bHasPosition )

	movzx	eax, BYTE PTR _bHasPosition$[ebp]
	test	eax, eax
	jne	SHORT $LN18@RenderCand

; 6855 :     {
; 6856 :         int nXCompTrail;
; 6857 :         s_CompString.CPtoX( s_nCompCaret, TRUE, &nXCompTrail );

	lea	eax, DWORD PTR _nXCompTrail$8[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nCompCaret
	push	ecx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6858 :         SetRect( &rc, s_ptCompString.x + nXCompTrail, 0,
; 6859 :                       s_ptCompString.x + nXCompTrail + nWidthRequired, nHeightRequired );

	mov	esi, esp
	mov	eax, DWORD PTR _nHeightRequired$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	ecx, DWORD PTR _nXCompTrail$8[ebp]
	add	ecx, DWORD PTR _nWidthRequired$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	edx, DWORD PTR _nXCompTrail$8[ebp]
	push	edx
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6860 :         if( rc.right <= m_pDialog->GetWidth() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetWidth@CDXUTDialog@@QAEHXZ		; CDXUTDialog::GetWidth
	cmp	DWORD PTR _rc$[ebp+8], eax
	jg	SHORT $LN18@RenderCand

; 6861 :             bHasPosition = true;

	mov	BYTE PTR _bHasPosition$[ebp], 1
$LN18@RenderCand:

; 6862 :     }
; 6863 : 
; 6864 :     // Left
; 6865 :     if( !bHasPosition )

	movzx	eax, BYTE PTR _bHasPosition$[ebp]
	test	eax, eax
	jne	SHORT $LN16@RenderCand

; 6866 :     {
; 6867 :         SetRect( &rc, s_ptCompString.x + nXComp - nWidthRequired, 0,
; 6868 :                       s_ptCompString.x + nXComp, nHeightRequired );

	mov	esi, esp
	mov	eax, DWORD PTR _nHeightRequired$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	ecx, DWORD PTR _nXComp$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	edx, DWORD PTR _nXComp$[ebp]
	sub	edx, DWORD PTR _nWidthRequired$[ebp]
	push	edx
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6869 :         if( rc.right >= 0 )

	cmp	DWORD PTR _rc$[ebp+8], 0
	jl	SHORT $LN16@RenderCand

; 6870 :             bHasPosition = true;

	mov	BYTE PTR _bHasPosition$[ebp], 1
$LN16@RenderCand:

; 6871 :     }
; 6872 : 
; 6873 :     if( !bHasPosition )

	movzx	eax, BYTE PTR _bHasPosition$[ebp]
	test	eax, eax
	jne	SHORT $LN14@RenderCand

; 6874 :     {
; 6875 :         // The dialog is too small for the candidate window.
; 6876 :         // Fall back to render at 0, 0.  Some part of the window
; 6877 :         // will be cut off.
; 6878 :         rc.left = 0;

	mov	DWORD PTR _rc$[ebp], 0

; 6879 :         rc.right = nWidthRequired;

	mov	eax, DWORD PTR _nWidthRequired$[ebp]
	mov	DWORD PTR _rc$[ebp+8], eax
$LN14@RenderCand:

; 6880 :     }
; 6881 : 
; 6882 :     // If we are rendering the candidate window, save the position
; 6883 :     // so that mouse clicks are checked properly.
; 6884 :     if( !bReading )

	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	jne	SHORT $LN13@RenderCand

; 6885 :         s_CandList.rcCandidate = rc;

	mov	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2602, eax
	mov	ecx, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2606, ecx
	mov	edx, DWORD PTR _rc$[ebp+8]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2610, edx
	mov	eax, DWORD PTR _rc$[ebp+12]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2614, eax
$LN13@RenderCand:

; 6886 : 
; 6887 :     // Render the elements
; 6888 :     m_pDialog->DrawRect( &rc, TextBkColor );

	mov	eax, DWORD PTR _TextBkColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect

; 6889 :     if( ( s_bVerticalCand && !bReading ) ||
; 6890 :         ( !s_bHorizontalReading && bReading ) )

	movzx	eax, BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bVerticalCand
	test	eax, eax
	je	SHORT $LN10@RenderCand
	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	je	SHORT $LN11@RenderCand
$LN10@RenderCand:
	movzx	eax, BYTE PTR ?s_bHorizontalReading@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bHorizontalReading
	test	eax, eax
	jne	$LN12@RenderCand
	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	je	$LN12@RenderCand
$LN11@RenderCand:

; 6891 :     {
; 6892 :         // Vertical candidate window
; 6893 :         for( UINT i = 0; i < nNumEntries; ++i )

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN9@RenderCand
$LN8@RenderCand:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN9@RenderCand:
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR _nNumEntries$[ebp]
	jae	$LN7@RenderCand

; 6894 :         {
; 6895 :             // Here we are rendering one line at a time
; 6896 :             rc.bottom = rc.top + nSingleLineHeight;

	mov	eax, DWORD PTR _rc$[ebp+4]
	add	eax, DWORD PTR _nSingleLineHeight$[ebp]
	mov	DWORD PTR _rc$[ebp+12], eax

; 6897 :             // Use a different color for the selected string
; 6898 :             if( s_CandList.dwSelection == i )

	mov	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589
	cmp	eax, DWORD PTR _i$7[ebp]
	jne	SHORT $LN6@RenderCand

; 6899 :             {
; 6900 :                 m_pDialog->DrawRect( &rc, SelBkColor );

	mov	eax, DWORD PTR _SelBkColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect

; 6901 :                 m_Elements.GetAt( 1 )->FontColor.Current = SelTextColor;

	mov	eax, DWORD PTR _SelTextColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	add	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T1[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 6902 :             } else

	jmp	SHORT $LN5@RenderCand
$LN6@RenderCand:

; 6903 :                 m_Elements.GetAt( 1 )->FontColor.Current = TextColor;

	mov	eax, DWORD PTR _TextColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	add	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T2[ebp+12]
	mov	DWORD PTR [ecx+12], eax
$LN5@RenderCand:

; 6904 : 
; 6905 :             m_pDialog->DrawText( s_CandList.awszCandidate[i], m_Elements.GetAt( 1 ), &rc );

	push	-1
	push	0
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _i$7[ebp]
	shl	edx, 8
	add	edx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 6906 : 
; 6907 :             rc.top += nSingleLineHeight;

	mov	eax, DWORD PTR _rc$[ebp+4]
	add	eax, DWORD PTR _nSingleLineHeight$[ebp]
	mov	DWORD PTR _rc$[ebp+4], eax

; 6908 :         }

	jmp	$LN8@RenderCand
$LN7@RenderCand:
	jmp	$LN40@RenderCand
$LN12@RenderCand:

; 6909 :     } else
; 6910 :     {
; 6911 :         // Horizontal candidate window
; 6912 :         m_Elements.GetAt( 1 )->FontColor.Current = TextColor;

	mov	eax, DWORD PTR _TextColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	add	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T3[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T3[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T3[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 6913 :         if( bReading )

	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	je	SHORT $LN3@RenderCand

; 6914 :             m_pDialog->DrawText( s_wszReadingString, m_Elements.GetAt( 1 ), &rc );

	push	-1
	push	0
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ?s_wszReadingString@CDXUTIMEEditBox@@1PADA ; CDXUTIMEEditBox::s_wszReadingString
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 6915 :         else

	jmp	SHORT $LN2@RenderCand
$LN3@RenderCand:

; 6916 :             m_pDialog->DrawText( s_CandList.HoriCand.GetBuffer(), m_Elements.GetAt( 1 ), &rc );

	push	-1
	push	0
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2560
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
$LN2@RenderCand:

; 6917 : 
; 6918 :         // Render the selected entry differently
; 6919 :         if( !bReading )

	movzx	eax, BYTE PTR _bReading$[ebp]
	test	eax, eax
	jne	$LN40@RenderCand

; 6920 :         {
; 6921 :             int nXLeft, nXRight;
; 6922 :             s_CandList.HoriCand.CPtoX( s_CandList.nFirstSelected, FALSE, &nXLeft );

	lea	eax, DWORD PTR _nXLeft$6[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2577
	push	ecx
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2560
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6923 :             s_CandList.HoriCand.CPtoX( s_CandList.nFirstSelected + s_CandList.nHoriSelectedLen, FALSE, &nXRight );

	lea	eax, DWORD PTR _nXRight$5[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2577
	add	ecx, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2581
	push	ecx
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2560
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6924 : 
; 6925 :             rc.right = rc.left + nXRight;

	mov	eax, DWORD PTR _rc$[ebp]
	add	eax, DWORD PTR _nXRight$5[ebp]
	mov	DWORD PTR _rc$[ebp+8], eax

; 6926 :             rc.left += nXLeft;

	mov	eax, DWORD PTR _rc$[ebp]
	add	eax, DWORD PTR _nXLeft$6[ebp]
	mov	DWORD PTR _rc$[ebp], eax

; 6927 :             m_pDialog->DrawRect( &rc, SelBkColor );

	mov	eax, DWORD PTR _SelBkColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect

; 6928 :             m_Elements.GetAt( 1 )->FontColor.Current = SelTextColor;

	mov	eax, DWORD PTR _SelTextColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	add	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T4[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T4[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T4[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 6929 :             m_pDialog->DrawText( s_CandList.HoriCand.GetBuffer() + s_CandList.nFirstSelected,
; 6930 :                                 m_Elements.GetAt( 1 ), &rc, false, s_CandList.nHoriSelectedLen );

	mov	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2581
	push	eax
	push	0
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2560
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	add	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2577
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
$LN40@RenderCand:

; 6931 :         }
; 6932 :     }
; 6933 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN56@RenderCand
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN56@RenderCand:
	DD	7
	DD	$LN55@RenderCand
$LN55@RenderCand:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN48@RenderCand
	DD	-108					; ffffff94H
	DD	4
	DD	$LN49@RenderCand
	DD	-120					; ffffff88H
	DD	4
	DD	$LN50@RenderCand
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN51@RenderCand
	DD	-204					; ffffff34H
	DD	4
	DD	$LN52@RenderCand
	DD	-228					; ffffff1cH
	DD	4
	DD	$LN53@RenderCand
	DD	-240					; ffffff10H
	DD	4
	DD	$LN54@RenderCand
$LN54@RenderCand:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	82					; 00000052H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN53@RenderCand:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN52@RenderCand:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
$LN51@RenderCand:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN50@RenderCand:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN49@RenderCand:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	0
$LN48@RenderCand:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
?RenderCandidateReadingWindow@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M_N@Z ENDP ; CDXUTIMEEditBox::RenderCandidateReadingWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnFocusOut@CDXUTIMEEditBox@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnFocusOut@CDXUTIMEEditBox@@UAEXXZ PROC		; CDXUTIMEEditBox::OnFocusOut, COMDAT
; _this$ = ecx

; 6006 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6007 :     CDXUTEditBox::OnFocusOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnFocusOut@CDXUTControl@@UAEXXZ	; CDXUTControl::OnFocusOut

; 6008 : 
; 6009 :     FinalizeString( false );  // Don't send the comp string as to match RichEdit behavior

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FinalizeString@CDXUTIMEEditBox@@IAEX_N@Z ; CDXUTIMEEditBox::FinalizeString

; 6010 : 
; 6011 :     _ImmAssociateContext( DXUTGetHWND(), NULL );

	mov	esi, esp
	push	0
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmAssociateContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@PAU2@@ZA ; CDXUTIMEEditBox::_ImmAssociateContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6012 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnFocusOut@CDXUTIMEEditBox@@UAEXXZ ENDP		; CDXUTIMEEditBox::OnFocusOut
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnFocusIn@CDXUTIMEEditBox@@UAEXXZ
_TEXT	SEGMENT
_hImc$ = -20						; size = 4
_this$ = -8						; size = 4
?OnFocusIn@CDXUTIMEEditBox@@UAEXXZ PROC			; CDXUTIMEEditBox::OnFocusIn, COMDAT
; _this$ = ecx

; 5979 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5980 :     CDXUTEditBox::OnFocusIn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnFocusIn@CDXUTEditBox@@UAEXXZ		; CDXUTEditBox::OnFocusIn

; 5981 : 
; 5982 :     if( s_bEnableImeSystem )

	movzx	eax, BYTE PTR ?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bEnableImeSystem
	test	eax, eax
	je	SHORT $LN4@OnFocusIn

; 5983 :     {
; 5984 :         _ImmAssociateContext( DXUTGetHWND(), s_hImcDef );

	mov	esi, esp
	mov	eax, DWORD PTR ?s_hImcDef@CDXUTIMEEditBox@@1PAUHIMC__@@A ; CDXUTIMEEditBox::s_hImcDef
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmAssociateContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@PAU2@@ZA ; CDXUTIMEEditBox::_ImmAssociateContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5985 :         CheckToggleState();

	call	?CheckToggleState@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::CheckToggleState

; 5986 :     } else

	jmp	SHORT $LN3@OnFocusIn
$LN4@OnFocusIn:

; 5987 :         _ImmAssociateContext( DXUTGetHWND(), NULL );

	mov	esi, esp
	push	0
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmAssociateContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@PAU2@@ZA ; CDXUTIMEEditBox::_ImmAssociateContext
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@OnFocusIn:

; 5988 : 
; 5989 :     //
; 5990 :     // Set up the IME global state according to the current instance state
; 5991 :     //
; 5992 :     HIMC hImc;
; 5993 :     if( NULL != ( hImc = _ImmGetContext( DXUTGetHWND() ) ) ) 

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hImc$[ebp], eax
	cmp	DWORD PTR _hImc$[ebp], 0
	je	SHORT $LN5@OnFocusIn

; 5994 :     {
; 5995 :         if( !s_bEnableImeSystem )

	movzx	eax, BYTE PTR ?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bEnableImeSystem
	test	eax, eax
	jne	SHORT $LN1@OnFocusIn

; 5996 :             s_ImeState = IMEUI_STATE_OFF;

	mov	DWORD PTR ?s_ImeState@CDXUTIMEEditBox@@1W4IMESTATE@1@A, 0 ; CDXUTIMEEditBox::s_ImeState
$LN1@OnFocusIn:

; 5997 : 
; 5998 :         _ImmReleaseContext( DXUTGetHWND(), hImc );

	mov	esi, esp
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5999 :         CheckToggleState();

	call	?CheckToggleState@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::CheckToggleState
$LN5@OnFocusIn:

; 6000 :     }
; 6001 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnFocusIn@CDXUTIMEEditBox@@UAEXXZ ENDP			; CDXUTIMEEditBox::OnFocusIn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateRects@CDXUTIMEEditBox@@UAEXXZ
_TEXT	SEGMENT
_nWidth$ = -20						; size = 4
_this$ = -8						; size = 4
?UpdateRects@CDXUTIMEEditBox@@UAEXXZ PROC		; CDXUTIMEEditBox::UpdateRects, COMDAT
; _this$ = ecx

; 5585 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5586 :     // Temporary adjust m_width so that CDXUTEditBox can compute
; 5587 :     // the correct rects for its rendering since we need to make space
; 5588 :     // for the indicator button
; 5589 :     int nWidth = m_width;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _nWidth$[ebp], ecx

; 5590 :     m_width -= m_nIndicatorWidth + m_nBorder * 2; // Make room for the indicator button

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+94]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+381]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 5591 :     CDXUTEditBox::UpdateRects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateRects@CDXUTEditBox@@UAEXXZ	; CDXUTEditBox::UpdateRects

; 5592 :     m_width = nWidth;  // Restore

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nWidth$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 5593 : 
; 5594 :     // Compute the indicator button rectangle
; 5595 :     SetRect( &m_rcIndicator, m_rcBoundingBox.right, m_rcBoundingBox.top, m_x + m_width, m_rcBoundingBox.bottom );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+73]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+16]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+65]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+69]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 385				; 00000181H
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5596 : //    InflateRect( &m_rcIndicator, -m_nBorder, -m_nBorder );
; 5597 :     m_rcBoundingBox.right = m_rcBoundingBox.left + m_width;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+61]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+69], ecx

; 5598 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRects@CDXUTIMEEditBox@@UAEXXZ ENDP		; CDXUTIMEEditBox::UpdateRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTIMEEditBox@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv197 = -464						; size = 4
tv185 = -464						; size = 4
tv251 = -460						; size = 4
tv216 = -460						; size = 4
tv196 = -460						; size = 4
tv189 = -460						; size = 4
tv184 = -460						; size = 4
tv177 = -460						; size = 4
tv164 = -460						; size = 4
tv78 = -460						; size = 4
_i$1 = -260						; size = 4
_nEntryStart$2 = -248					; size = 4
_nCandidate$3 = -236					; size = 4
_nTrail$4 = -224					; size = 4
_nCharHit$5 = -212					; size = 4
_nStrike$6 = -200					; size = 4
_nNumToHit$7 = -188					; size = 4
_nVirtKey$8 = -173					; size = 1
_nRow$9 = -164						; size = 4
_nSendCount$10 = -152					; size = 4
_nVirtKey$11 = -137					; size = 1
_nSendCount$12 = -128					; size = 4
_nVirtKey$13 = -113					; size = 1
_nClauseSelected$14 = -104				; size = 4
_nClauseClicked$15 = -92				; size = 4
_hImc$16 = -80						; size = 4
_nTrail$17 = -68					; size = 4
_nCharHit$18 = -56					; size = 4
_nCharBodyHit$19 = -44					; size = 4
_nCompStrWidth$20 = -32					; size = 4
_pFont$21 = -20						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTIMEEditBox@@UAE_NIUtagPOINT@@IJ@Z PROC ; CDXUTIMEEditBox::HandleMouse, COMDAT
; _this$ = ecx

; 6166 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 464				; 000001d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-464]
	mov	ecx, 116				; 00000074H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6167 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN42@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN43@HandleMous
$LN42@HandleMous:

; 6168 :         return false;

	xor	al, al
	jmp	$LN44@HandleMous
$LN43@HandleMous:

; 6169 : 
; 6170 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 513		; 00000201H
	je	SHORT $LN39@HandleMous
	cmp	DWORD PTR tv78[ebp], 515		; 00000203H
	je	SHORT $LN39@HandleMous
	jmp	$LN40@HandleMous
$LN39@HandleMous:

; 6171 :     {
; 6172 :         case WM_LBUTTONDOWN:
; 6173 :         case WM_LBUTTONDBLCLK:
; 6174 :         {
; 6175 :             DXUTFontNode* pFont = m_pDialog->GetFont( m_Elements.GetAt( 9 )->iFont );

	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z ; CDXUTDialog::GetFont
	mov	DWORD PTR _pFont$21[ebp], eax

; 6176 : 
; 6177 :             // Check if this click is on top of the composition string
; 6178 :             int nCompStrWidth;
; 6179 :             s_CompString.CPtoX( s_CompString.GetTextSize(), FALSE, &nCompStrWidth );

	lea	eax, DWORD PTR _nCompStrWidth$20[ebp]
	push	eax
	push	0
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 6180 : 
; 6181 :             if( s_ptCompString.x <= pt.x &&
; 6182 :                 s_ptCompString.y <= pt.y &&
; 6183 :                 s_ptCompString.x + nCompStrWidth > pt.x &&
; 6184 :                 s_ptCompString.y + pFont->nHeight > pt.y )

	mov	eax, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	cmp	eax, DWORD PTR _pt$[ebp]
	jg	$LN38@HandleMous
	mov	eax, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A+4
	cmp	eax, DWORD PTR _pt$[ebp+4]
	jg	$LN38@HandleMous
	mov	eax, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	add	eax, DWORD PTR _nCompStrWidth$20[ebp]
	cmp	eax, DWORD PTR _pt$[ebp]
	jle	$LN38@HandleMous
	mov	eax, DWORD PTR _pFont$21[ebp]
	mov	ecx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A+4
	add	ecx, DWORD PTR [eax+264]
	cmp	ecx, DWORD PTR _pt$[ebp+4]
	jle	$LN38@HandleMous

; 6185 :             {
; 6186 :                 int nCharBodyHit, nCharHit;
; 6187 :                 int nTrail;
; 6188 : 
; 6189 :                 // Determine the character clicked on.
; 6190 :                 s_CompString.XtoCP( pt.x - s_ptCompString.x, &nCharBodyHit, &nTrail );

	lea	eax, DWORD PTR _nTrail$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _nCharBodyHit$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _pt$[ebp]
	sub	edx, DWORD PTR ?s_ptCompString@CDXUTIMEEditBox@@1UtagPOINT@@A
	push	edx
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?XtoCP@CUniBuffer@@QAEJHPAH0@Z		; CUniBuffer::XtoCP

; 6191 :                 if( nTrail && nCharBodyHit < s_CompString.GetTextSize() )

	cmp	DWORD PTR _nTrail$17[ebp], 0
	je	SHORT $LN37@HandleMous
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	cmp	DWORD PTR _nCharBodyHit$19[ebp], eax
	jge	SHORT $LN37@HandleMous

; 6192 :                     nCharHit = nCharBodyHit + 1;

	mov	eax, DWORD PTR _nCharBodyHit$19[ebp]
	add	eax, 1
	mov	DWORD PTR _nCharHit$18[ebp], eax

; 6193 :                 else

	jmp	SHORT $LN36@HandleMous
$LN37@HandleMous:

; 6194 :                     nCharHit = nCharBodyHit;

	mov	eax, DWORD PTR _nCharBodyHit$19[ebp]
	mov	DWORD PTR _nCharHit$18[ebp], eax
$LN36@HandleMous:

; 6195 : 
; 6196 :                 // Now generate keypress events to move the comp string cursor
; 6197 :                 // to the click point.  First, if the candidate window is displayed,
; 6198 :                 // send Esc to close it.
; 6199 :                 HIMC hImc = _ImmGetContext( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hImc$16[ebp], eax

; 6200 :                 if( !hImc )

	cmp	DWORD PTR _hImc$16[ebp], 0
	jne	SHORT $LN35@HandleMous

; 6201 :                     return true;

	mov	al, 1
	jmp	$LN44@HandleMous
$LN35@HandleMous:

; 6202 : 
; 6203 :                 _ImmNotifyIME( hImc, NI_CLOSECANDIDATE, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _hImc$16[ebp]
	push	eax
	call	DWORD PTR ?_ImmNotifyIME@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KKK@ZA ; CDXUTIMEEditBox::_ImmNotifyIME
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6204 :                 _ImmReleaseContext( DXUTGetHWND(), hImc );

	mov	esi, esp
	mov	eax, DWORD PTR _hImc$16[ebp]
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6205 : 
; 6206 :                 switch( GetPrimaryLanguage() )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	mov	DWORD PTR tv164[ebp], eax
	cmp	DWORD PTR tv164[ebp], 4
	je	$LN24@HandleMous
	cmp	DWORD PTR tv164[ebp], 17		; 00000011H
	je	SHORT $LN32@HandleMous
	jmp	$LN33@HandleMous
$LN32@HandleMous:

; 6207 :                 {
; 6208 :                     case LANG_JAPANESE:
; 6209 :                         // For Japanese, there are two cases.  If s_nFirstTargetConv is
; 6210 :                         // -1, the comp string hasn't been converted yet, and we use
; 6211 :                         // s_nCompCaret.  For any other value of s_nFirstTargetConv,
; 6212 :                         // the string has been converted, so we use clause information.
; 6213 : 
; 6214 :                         if( s_nFirstTargetConv != -1 )

	cmp	DWORD PTR ?s_nFirstTargetConv@CDXUTIMEEditBox@@1HA, -1 ; CDXUTIMEEditBox::s_nFirstTargetConv
	je	$LN24@HandleMous

; 6215 :                         {
; 6216 :                             int nClauseClicked = 0;

	mov	DWORD PTR _nClauseClicked$15[ebp], 0
$LN30@HandleMous:

; 6217 :                             while( (int)s_adwCompStringClause[nClauseClicked + 1] <= nCharBodyHit )

	mov	eax, DWORD PTR _nClauseClicked$15[ebp]
	mov	ecx, DWORD PTR ?s_adwCompStringClause@CDXUTIMEEditBox@@1PAKA[eax*4+4]
	cmp	ecx, DWORD PTR _nCharBodyHit$19[ebp]
	jg	SHORT $LN29@HandleMous

; 6218 :                                 ++nClauseClicked;

	mov	eax, DWORD PTR _nClauseClicked$15[ebp]
	add	eax, 1
	mov	DWORD PTR _nClauseClicked$15[ebp], eax
	jmp	SHORT $LN30@HandleMous
$LN29@HandleMous:

; 6219 : 
; 6220 :                             int nClauseSelected = 0;

	mov	DWORD PTR _nClauseSelected$14[ebp], 0
$LN28@HandleMous:

; 6221 :                             while( (int)s_adwCompStringClause[nClauseSelected + 1] <= s_nFirstTargetConv )

	mov	eax, DWORD PTR _nClauseSelected$14[ebp]
	mov	ecx, DWORD PTR ?s_adwCompStringClause@CDXUTIMEEditBox@@1PAKA[eax*4+4]
	cmp	ecx, DWORD PTR ?s_nFirstTargetConv@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nFirstTargetConv
	jg	SHORT $LN27@HandleMous

; 6222 :                                 ++nClauseSelected;

	mov	eax, DWORD PTR _nClauseSelected$14[ebp]
	add	eax, 1
	mov	DWORD PTR _nClauseSelected$14[ebp], eax
	jmp	SHORT $LN28@HandleMous
$LN27@HandleMous:

; 6223 : 
; 6224 :                             BYTE nVirtKey = nClauseClicked > nClauseSelected ? VK_RIGHT : VK_LEFT;

	mov	eax, DWORD PTR _nClauseClicked$15[ebp]
	cmp	eax, DWORD PTR _nClauseSelected$14[ebp]
	jle	SHORT $LN46@HandleMous
	mov	DWORD PTR tv177[ebp], 39		; 00000027H
	jmp	SHORT $LN47@HandleMous
$LN46@HandleMous:
	mov	DWORD PTR tv177[ebp], 37		; 00000025H
$LN47@HandleMous:
	mov	cl, BYTE PTR tv177[ebp]
	mov	BYTE PTR _nVirtKey$13[ebp], cl

; 6225 :                             int nSendCount = abs( nClauseClicked - nClauseSelected );

	mov	eax, DWORD PTR _nClauseClicked$15[ebp]
	sub	eax, DWORD PTR _nClauseSelected$14[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _nSendCount$12[ebp], eax
$LN26@HandleMous:

; 6226 :                             while( nSendCount-- > 0 )

	mov	eax, DWORD PTR _nSendCount$12[ebp]
	mov	DWORD PTR tv184[ebp], eax
	mov	ecx, DWORD PTR _nSendCount$12[ebp]
	sub	ecx, 1
	mov	DWORD PTR _nSendCount$12[ebp], ecx
	cmp	DWORD PTR tv184[ebp], 0
	jle	SHORT $LN48@HandleMous
	mov	DWORD PTR tv185[ebp], 1
	jmp	SHORT $LN49@HandleMous
$LN48@HandleMous:
	mov	DWORD PTR tv185[ebp], 0
$LN49@HandleMous:
	cmp	DWORD PTR tv185[ebp], 0
	je	SHORT $LN25@HandleMous

; 6227 :                                 SendKey( nVirtKey );

	movzx	eax, BYTE PTR _nVirtKey$13[ebp]
	push	eax
	call	?SendKey@CDXUTIMEEditBox@@KAXE@Z	; CDXUTIMEEditBox::SendKey
	add	esp, 4
	jmp	SHORT $LN26@HandleMous
$LN25@HandleMous:

; 6228 : 
; 6229 :                             return true;

	mov	al, 1
	jmp	$LN44@HandleMous
$LN24@HandleMous:

; 6230 :                         }
; 6231 : 
; 6232 :                         // Not converted case. Fall thru to Chinese case.
; 6233 : 
; 6234 :                     case LANG_CHINESE:
; 6235 :                     {
; 6236 :                         // For Chinese, use s_nCompCaret.
; 6237 :                         BYTE nVirtKey = nCharHit > s_nCompCaret ? VK_RIGHT : VK_LEFT;

	mov	eax, DWORD PTR _nCharHit$18[ebp]
	cmp	eax, DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nCompCaret
	jle	SHORT $LN50@HandleMous
	mov	DWORD PTR tv189[ebp], 39		; 00000027H
	jmp	SHORT $LN51@HandleMous
$LN50@HandleMous:
	mov	DWORD PTR tv189[ebp], 37		; 00000025H
$LN51@HandleMous:
	mov	cl, BYTE PTR tv189[ebp]
	mov	BYTE PTR _nVirtKey$11[ebp], cl

; 6238 :                         int nSendCount = abs( nCharHit - s_nCompCaret );

	mov	eax, DWORD PTR _nCharHit$18[ebp]
	sub	eax, DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nCompCaret
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _nSendCount$10[ebp], eax
$LN23@HandleMous:

; 6239 :                         while( nSendCount-- > 0 )

	mov	eax, DWORD PTR _nSendCount$10[ebp]
	mov	DWORD PTR tv196[ebp], eax
	mov	ecx, DWORD PTR _nSendCount$10[ebp]
	sub	ecx, 1
	mov	DWORD PTR _nSendCount$10[ebp], ecx
	cmp	DWORD PTR tv196[ebp], 0
	jle	SHORT $LN52@HandleMous
	mov	DWORD PTR tv197[ebp], 1
	jmp	SHORT $LN53@HandleMous
$LN52@HandleMous:
	mov	DWORD PTR tv197[ebp], 0
$LN53@HandleMous:
	cmp	DWORD PTR tv197[ebp], 0
	je	SHORT $LN33@HandleMous

; 6240 :                             SendKey( nVirtKey );

	movzx	eax, BYTE PTR _nVirtKey$11[ebp]
	push	eax
	call	?SendKey@CDXUTIMEEditBox@@KAXE@Z	; CDXUTIMEEditBox::SendKey
	add	esp, 4
	jmp	SHORT $LN23@HandleMous
$LN33@HandleMous:

; 6241 :                         break;
; 6242 :                     }
; 6243 :                 }
; 6244 : 
; 6245 :                 return true;

	mov	al, 1
	jmp	$LN44@HandleMous
$LN38@HandleMous:

; 6246 :             }
; 6247 : 
; 6248 :             // Check if the click is on top of the candidate window
; 6249 :             if( s_CandList.bShowWindow && PtInRect( &s_CandList.rcCandidate, pt ) )

	movzx	eax, BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2601
	test	eax, eax
	je	$LN40@HandleMous
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	push	OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2602
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN40@HandleMous

; 6250 :             {
; 6251 :                 if( s_bVerticalCand )

	movzx	eax, BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bVerticalCand
	test	eax, eax
	je	$LN20@HandleMous

; 6252 :                 {
; 6253 :                     // Vertical candidate window
; 6254 : 
; 6255 :                     // Compute the row the click is on
; 6256 :                     int nRow = ( pt.y - s_CandList.rcCandidate.top ) / pFont->nHeight;

	mov	eax, DWORD PTR _pt$[ebp+4]
	sub	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2606
	mov	ecx, DWORD PTR _pFont$21[ebp]
	cdq
	idiv	DWORD PTR [ecx+264]
	mov	DWORD PTR _nRow$9[ebp], eax

; 6257 : 
; 6258 :                     if( nRow < (int)s_CandList.dwCount )

	mov	eax, DWORD PTR _nRow$9[ebp]
	cmp	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585
	jge	$LN19@HandleMous

; 6259 :                     {
; 6260 :                         // nRow is a valid entry.
; 6261 :                         // Now emulate keystrokes to select the candidate at this row.
; 6262 :                         switch( GetPrimaryLanguage() )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	mov	DWORD PTR tv216[ebp], eax
	cmp	DWORD PTR tv216[ebp], 4
	je	SHORT $LN16@HandleMous
	cmp	DWORD PTR tv216[ebp], 17		; 00000011H
	je	SHORT $LN15@HandleMous
	cmp	DWORD PTR tv216[ebp], 18		; 00000012H
	je	SHORT $LN16@HandleMous
	jmp	$LN19@HandleMous
$LN16@HandleMous:

; 6263 :                         {
; 6264 :                             case LANG_CHINESE:
; 6265 :                             case LANG_KOREAN:
; 6266 :                                 // For Chinese and Korean, simply send the number keystroke.
; 6267 :                                 SendKey( (BYTE) ('0' + nRow + 1) );

	mov	eax, DWORD PTR _nRow$9[ebp]
	add	eax, 49					; 00000031H
	push	eax
	call	?SendKey@CDXUTIMEEditBox@@KAXE@Z	; CDXUTIMEEditBox::SendKey
	add	esp, 4

; 6268 :                                 break;

	jmp	$LN19@HandleMous
$LN15@HandleMous:

; 6269 : 
; 6270 :                             case LANG_JAPANESE:
; 6271 :                                 // For Japanese, move the selection to the target row,
; 6272 :                                 // then send Right, then send Left.
; 6273 : 
; 6274 :                                 BYTE nVirtKey;
; 6275 :                                 if( nRow > (int)s_CandList.dwSelection )

	mov	eax, DWORD PTR _nRow$9[ebp]
	cmp	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589
	jle	SHORT $LN14@HandleMous

; 6276 :                                     nVirtKey = VK_DOWN;

	mov	BYTE PTR _nVirtKey$8[ebp], 40		; 00000028H

; 6277 :                                 else

	jmp	SHORT $LN13@HandleMous
$LN14@HandleMous:

; 6278 :                                     nVirtKey = VK_UP;

	mov	BYTE PTR _nVirtKey$8[ebp], 38		; 00000026H
$LN13@HandleMous:

; 6279 :                                 int nNumToHit = abs( int( nRow - s_CandList.dwSelection ) );

	mov	eax, DWORD PTR _nRow$9[ebp]
	sub	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589
	push	eax
	call	_abs
	add	esp, 4
	mov	DWORD PTR _nNumToHit$7[ebp], eax

; 6280 :                                 for( int nStrike = 0; nStrike < nNumToHit; ++nStrike )

	mov	DWORD PTR _nStrike$6[ebp], 0
	jmp	SHORT $LN12@HandleMous
$LN11@HandleMous:
	mov	eax, DWORD PTR _nStrike$6[ebp]
	add	eax, 1
	mov	DWORD PTR _nStrike$6[ebp], eax
$LN12@HandleMous:
	mov	eax, DWORD PTR _nStrike$6[ebp]
	cmp	eax, DWORD PTR _nNumToHit$7[ebp]
	jge	SHORT $LN10@HandleMous

; 6281 :                                     SendKey( nVirtKey );

	movzx	eax, BYTE PTR _nVirtKey$8[ebp]
	push	eax
	call	?SendKey@CDXUTIMEEditBox@@KAXE@Z	; CDXUTIMEEditBox::SendKey
	add	esp, 4
	jmp	SHORT $LN11@HandleMous
$LN10@HandleMous:

; 6282 : 
; 6283 :                                 // Do this to close the candidate window without ending composition.
; 6284 :                                 SendKey( VK_RIGHT );

	push	39					; 00000027H
	call	?SendKey@CDXUTIMEEditBox@@KAXE@Z	; CDXUTIMEEditBox::SendKey
	add	esp, 4

; 6285 :                                 SendKey( VK_LEFT );

	push	37					; 00000025H
	call	?SendKey@CDXUTIMEEditBox@@KAXE@Z	; CDXUTIMEEditBox::SendKey
	add	esp, 4
$LN19@HandleMous:

; 6286 : 
; 6287 :                                 break;
; 6288 :                         }
; 6289 :                     }
; 6290 :                 } else

	jmp	$LN9@HandleMous
$LN20@HandleMous:

; 6291 :                 {
; 6292 :                     // Horizontal candidate window
; 6293 : 
; 6294 :                     // Determine which the character the click has hit.
; 6295 :                     int nCharHit;
; 6296 :                     int nTrail;
; 6297 :                     s_CandList.HoriCand.XtoCP( pt.x - s_CandList.rcCandidate.left, &nCharHit, &nTrail );

	lea	eax, DWORD PTR _nTrail$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _nCharHit$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _pt$[ebp]
	sub	edx, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2602
	push	edx
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2560
	call	?XtoCP@CUniBuffer@@QAEJHPAH0@Z		; CUniBuffer::XtoCP

; 6298 : 
; 6299 :                     // Determine which candidate string the character belongs to.
; 6300 :                     int nCandidate = s_CandList.dwCount - 1;

	mov	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585
	sub	eax, 1
	mov	DWORD PTR _nCandidate$3[ebp], eax

; 6301 : 
; 6302 :                     int nEntryStart = 0;

	mov	DWORD PTR _nEntryStart$2[ebp], 0

; 6303 :                     for( UINT i = 0; i < s_CandList.dwCount; ++i )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN8@HandleMous
$LN7@HandleMous:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN8@HandleMous:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585
	jae	SHORT $LN6@HandleMous

; 6304 :                     {
; 6305 :                         if( nCharHit >= nEntryStart )

	mov	eax, DWORD PTR _nCharHit$5[ebp]
	cmp	eax, DWORD PTR _nEntryStart$2[ebp]
	jl	SHORT $LN5@HandleMous

; 6306 :                         {
; 6307 :                             // Haven't found it.
; 6308 :                             nEntryStart += lstrlenA( s_CandList.awszCandidate[i] ) + 1;  // plus space separator

	mov	eax, DWORD PTR _i$1[ebp]
	shl	eax, 8
	add	eax, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _nEntryStart$2[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _nEntryStart$2[ebp], edx

; 6309 :                         } else

	jmp	SHORT $LN4@HandleMous
$LN5@HandleMous:

; 6310 :                         {
; 6311 :                             // Found it.  This entry starts at the right side of the click point,
; 6312 :                             // so the char belongs to the previous entry.
; 6313 :                             nCandidate = i - 1;

	mov	eax, DWORD PTR _i$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _nCandidate$3[ebp], eax

; 6314 :                             break;

	jmp	SHORT $LN6@HandleMous
$LN4@HandleMous:

; 6315 :                         }
; 6316 :                     }

	jmp	SHORT $LN7@HandleMous
$LN6@HandleMous:

; 6317 : 
; 6318 :                     // Now emulate keystrokes to select the candidate entry.
; 6319 :                     switch( GetPrimaryLanguage() )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	mov	DWORD PTR tv251[ebp], eax
	cmp	DWORD PTR tv251[ebp], 4
	je	SHORT $LN1@HandleMous
	cmp	DWORD PTR tv251[ebp], 18		; 00000012H
	je	SHORT $LN1@HandleMous
	jmp	SHORT $LN9@HandleMous
$LN1@HandleMous:

; 6320 :                     {
; 6321 :                         case LANG_CHINESE:
; 6322 :                         case LANG_KOREAN:
; 6323 :                             // For Chinese and Korean, simply send the number keystroke.
; 6324 :                             SendKey( (BYTE) ('0' + nCandidate + 1) );

	mov	eax, DWORD PTR _nCandidate$3[ebp]
	add	eax, 49					; 00000031H
	push	eax
	call	?SendKey@CDXUTIMEEditBox@@KAXE@Z	; CDXUTIMEEditBox::SendKey
	add	esp, 4
$LN9@HandleMous:

; 6325 :                             break;
; 6326 :                     }
; 6327 :                 }
; 6328 : 
; 6329 :                 return true;

	mov	al, 1
	jmp	SHORT $LN44@HandleMous
$LN40@HandleMous:

; 6330 :             }
; 6331 :         }
; 6332 :     }
; 6333 : 
; 6334 :     // If we didn't care for the msg, let the parent process it.
; 6335 :     return CDXUTEditBox::HandleMouse( uMsg, pt, wParam, lParam );

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pt$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uMsg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleMouse@CDXUTEditBox@@UAE_NIUtagPOINT@@IJ@Z ; CDXUTEditBox::HandleMouse
$LN44@HandleMous:

; 6336 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@HandleMous
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 464				; 000001d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN60@HandleMous:
	DD	5
	DD	$LN59@HandleMous
$LN59@HandleMous:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN54@HandleMous
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN55@HandleMous
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN56@HandleMous
	DD	-212					; ffffff2cH
	DD	4
	DD	$LN57@HandleMous
	DD	-224					; ffffff20H
	DD	4
	DD	$LN58@HandleMous
$LN58@HandleMous:
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
$LN57@HandleMous:
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN56@HandleMous:
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
$LN55@HandleMous:
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN54@HandleMous:
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?HandleMouse@CDXUTIMEEditBox@@UAE_NIUtagPOINT@@IJ@Z ENDP ; CDXUTIMEEditBox::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv563 = -1044						; size = 4
tv470 = -1044						; size = 4
tv367 = -1044						; size = 4
tv353 = -1044						; size = 4
tv293 = -1044						; size = 4
tv289 = -1044						; size = 4
tv129 = -1044						; size = 4
$T1 = -1036						; size = 4
$T2 = -1024						; size = 4
$T3 = -1012						; size = 4
$T4 = -1000						; size = 4
$T5 = -988						; size = 4
_dwId$6 = -784						; size = 4
_wszEntry$7 = -772					; size = 32
_i$8 = -732						; size = 4
_wszCand$9 = -720					; size = 256
_pwszNewCand$10 = -456					; size = 4
_pwsz$11 = -444						; size = 4
_j$12 = -432						; size = 4
_i$13 = -420						; size = 4
_nPageTopIndex$14 = -408				; size = 4
_dwLenRequired$15 = -396				; size = 4
_lpCandList$16 = -384					; size = 4
_i$17 = -372						; size = 4
_nCount$18 = -360					; size = 4
_i$19 = -348						; size = 4
_i$20 = -336						; size = 4
_wszCompStr$21 = -324					; size = 256
_lRet$22 = -60						; size = 4
_hImc$ = -48						; size = 4
_trapped$ = -36						; size = 4
_trappedData$ = -21					; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z PROC		; CDXUTIMEEditBox::MsgProc, COMDAT
; _this$ = ecx

; 6341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1044				; 00000414H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1044]
	mov	ecx, 261				; 00000105H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 6342 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN86@MsgProc
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN87@MsgProc
$LN86@MsgProc:

; 6343 :         return false;

	xor	al, al
	jmp	$LN89@MsgProc
$LN87@MsgProc:

; 6344 : 
; 6345 : #if defined(DEBUG) | defined(_DEBUG)
; 6346 :     // DXUT.cpp used to call CDXUTIMEEditBox::StaticMsgProc() so that, but now
; 6347 :     // this is the application's responsiblity.  To do this, call 
; 6348 :     // CDXUTDialogResourceManager::MsgProc() before calling this function.
; 6349 :     assert( m_bIMEStaticMsgProcCalled && "To fix, call CDXUTDialogResourceManager::MsgProc() first" );

	movzx	eax, BYTE PTR ?m_bIMEStaticMsgProcCalled@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::m_bIMEStaticMsgProcCalled
	test	eax, eax
	je	SHORT $LN90@MsgProc
	mov	ecx, OFFSET ??_C@_0DJ@IHHHAIEO@To?5fix?0?5call?5CDXUTDialogResource@
	test	ecx, ecx
	jne	SHORT $LN91@MsgProc
$LN90@MsgProc:
	mov	edx, DWORD PTR ?__LINE__Var@?1??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA
	add	edx, 8
	push	edx
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1LA@NJBLLMDF@?$AAm?$AA_?$AAb?$AAI?$AAM?$AAE?$AAS?$AAt?$AAa?$AAt?$AAi?$AAc?$AAM?$AAs?$AAg?$AAP?$AAr?$AAo?$AAc?$AAC?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN91@MsgProc:

; 6350 : #endif
; 6351 : 
; 6352 :     bool trappedData;
; 6353 :     bool *trapped = &trappedData;

	lea	eax, DWORD PTR _trappedData$[ebp]
	mov	DWORD PTR _trapped$[ebp], eax

; 6354 : 
; 6355 :     HIMC hImc;
; 6356 :     static LPARAM lAlt = 0x80000000, lCtrl = 0x80000000, lShift = 0x80000000;
; 6357 : 
; 6358 :     *trapped = false;

	mov	eax, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [eax], 0

; 6359 :     if( !s_bEnableImeSystem )

	movzx	eax, BYTE PTR ?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bEnableImeSystem
	test	eax, eax
	jne	SHORT $LN85@MsgProc

; 6360 :         return CDXUTEditBox::MsgProc( uMsg, wParam, lParam );

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MsgProc@CDXUTEditBox@@UAE_NIIJ@Z	; CDXUTEditBox::MsgProc
	jmp	$LN89@MsgProc
$LN85@MsgProc:

; 6361 : 
; 6362 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv129[ebp], eax
	cmp	DWORD PTR tv129[ebp], 270		; 0000010eH
	ja	SHORT $LN111@MsgProc
	cmp	DWORD PTR tv129[ebp], 270		; 0000010eH
	je	$LN54@MsgProc
	mov	ecx, DWORD PTR tv129[ebp]
	sub	ecx, 256				; 00000100H
	mov	DWORD PTR tv129[ebp], ecx
	cmp	DWORD PTR tv129[ebp], 5
	ja	$LN1@MsgProc
	mov	edx, DWORD PTR tv129[ebp]
	jmp	DWORD PTR $LN119@MsgProc[edx*4]
$LN111@MsgProc:
	cmp	DWORD PTR tv129[ebp], 271		; 0000010fH
	je	SHORT $LN82@MsgProc
	cmp	DWORD PTR tv129[ebp], 642		; 00000282H
	je	$LN53@MsgProc
	jmp	$LN1@MsgProc
$LN82@MsgProc:

; 6363 :     {
; 6364 :         //
; 6365 :         //  IME Handling
; 6366 :         //
; 6367 :         case WM_IME_COMPOSITION:
; 6368 :             DXUTTRACE( "WM_IME_COMPOSITION\n" );

	push	OFFSET ??_C@_0BE@CDAMKNCN@WM_IME_COMPOSITION?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6369 :             {
; 6370 :                 LONG lRet;  // Returned count in CHARACTERS
; 6371 :                 TCHAR wszCompStr[MAX_COMPSTRING_SIZE];
; 6372 : 
; 6373 :                 *trapped = true;

	mov	eax, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [eax], 1

; 6374 :                 if( NULL == ( hImc = _ImmGetContext( DXUTGetHWND() ) ) )

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hImc$[ebp], eax
	cmp	DWORD PTR _hImc$[ebp], 0
	jne	SHORT $LN81@MsgProc

; 6375 :                 {
; 6376 :                     break;

	jmp	$LN83@MsgProc
$LN81@MsgProc:

; 6377 :                 }
; 6378 : 
; 6379 :                 // Get the caret position in composition string
; 6380 :                 if ( lParam & GCS_CURSORPOS )

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN80@MsgProc

; 6381 :                 {
; 6382 :                     s_nCompCaret = _ImmGetCompositionStringW( hImc, GCS_CURSORPOS, NULL, 0 );

	mov	esi, esp
	push	0
	push	0
	push	128					; 00000080H
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	DWORD PTR ?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA ; CDXUTIMEEditBox::_ImmGetCompositionStringW
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA, eax ; CDXUTIMEEditBox::s_nCompCaret

; 6383 :                     if( s_nCompCaret < 0 )

	cmp	DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA, 0 ; CDXUTIMEEditBox::s_nCompCaret
	jge	SHORT $LN80@MsgProc

; 6384 :                         s_nCompCaret = 0; // On error, set caret to pos 0.

	mov	DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA, 0 ; CDXUTIMEEditBox::s_nCompCaret
$LN80@MsgProc:

; 6385 :                 }
; 6386 : 
; 6387 :                 // ResultStr must be processed before composition string.
; 6388 :                 //
; 6389 :                 // This is because for some IMEs, such as CHT, pressing Enter
; 6390 :                 // to complete the composition sends WM_IME_COMPOSITION with both
; 6391 :                 // GCS_RESULTSTR and GCS_COMPSTR.  Retrieving the result string
; 6392 :                 // gives the correct string, while retrieving the comp string
; 6393 :                 // (GCS_COMPSTR) gives empty string.  GCS_RESULTSTR should be
; 6394 :                 // handled first so that the application receives the string.  Then
; 6395 :                 // GCS_COMPSTR can be handled to clear the comp string buffer.
; 6396 : 
; 6397 :                 if ( lParam & GCS_RESULTSTR )

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 2048				; 00000800H
	je	$LN78@MsgProc

; 6398 :                 {
; 6399 :                     DXUTTRACE( "  GCS_RESULTSTR\n" );

	push	OFFSET ??_C@_0BB@CNOGDNAM@?5?5GCS_RESULTSTR?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6400 :                     lRet = _ImmGetCompositionStringW( hImc, GCS_RESULTSTR, wszCompStr, sizeof( wszCompStr ) );

	mov	esi, esp
	push	256					; 00000100H
	lea	eax, DWORD PTR _wszCompStr$21[ebp]
	push	eax
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _hImc$[ebp]
	push	ecx
	call	DWORD PTR ?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA ; CDXUTIMEEditBox::_ImmGetCompositionStringW
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRet$22[ebp], eax

; 6401 :                     if( lRet > 0 )

	cmp	DWORD PTR _lRet$22[ebp], 0
	jle	SHORT $LN78@MsgProc

; 6402 :                     {
; 6403 :                         lRet /= sizeof(TCHAR);

	mov	eax, DWORD PTR _lRet$22[ebp]
	mov	DWORD PTR _lRet$22[ebp], eax

; 6404 :                         wszCompStr[lRet] = 0;  // Force terminate

	mov	eax, DWORD PTR _lRet$22[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 256			; 00000100H
	jae	SHORT $LN92@MsgProc
	jmp	SHORT $LN93@MsgProc
$LN92@MsgProc:
	call	___report_rangecheckfailure
$LN93@MsgProc:
	mov	ecx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _wszCompStr$21[ebp+ecx], 0

; 6405 :                         TruncateCompString( false, (int)strlen( wszCompStr ) );

	lea	eax, DWORD PTR _wszCompStr$21[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z ; CDXUTIMEEditBox::TruncateCompString

; 6406 :                         s_CompString.SetText( wszCompStr );

	lea	eax, DWORD PTR _wszCompStr$21[ebp]
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?SetText@CUniBuffer@@QAE_NPBD@Z		; CUniBuffer::SetText

; 6407 :                         SendCompString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendCompString@CDXUTIMEEditBox@@IAEXXZ	; CDXUTIMEEditBox::SendCompString

; 6408 :                         ResetCompositionString();

	call	?ResetCompositionString@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::ResetCompositionString
$LN78@MsgProc:

; 6409 :                     }
; 6410 :                 }
; 6411 : 
; 6412 :                 //
; 6413 :                 // Reads in the composition string.
; 6414 :                 //
; 6415 :                 if ( lParam & GCS_COMPSTR )

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 8
	je	$LN76@MsgProc

; 6416 :                 {
; 6417 :                     DXUTTRACE( "  GCS_COMPSTR\n" );

	push	OFFSET ??_C@_0P@NDDGOCDK@?5?5GCS_COMPSTR?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6418 :                     //////////////////////////////////////////////////////
; 6419 :                     // Retrieve the latest user-selected IME candidates
; 6420 :                     lRet = _ImmGetCompositionStringW( hImc, GCS_COMPSTR, wszCompStr, sizeof( wszCompStr ) );

	mov	esi, esp
	push	256					; 00000100H
	lea	eax, DWORD PTR _wszCompStr$21[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _hImc$[ebp]
	push	ecx
	call	DWORD PTR ?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA ; CDXUTIMEEditBox::_ImmGetCompositionStringW
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRet$22[ebp], eax

; 6421 :                     if( lRet > 0 )

	cmp	DWORD PTR _lRet$22[ebp], 0
	jle	$LN75@MsgProc

; 6422 :                     {
; 6423 :                         lRet /= sizeof(TCHAR);  // Convert size in byte to size in char

	mov	eax, DWORD PTR _lRet$22[ebp]
	mov	DWORD PTR _lRet$22[ebp], eax

; 6424 :                         wszCompStr[lRet] = 0;  // Force terminate

	mov	eax, DWORD PTR _lRet$22[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 256			; 00000100H
	jae	SHORT $LN94@MsgProc
	jmp	SHORT $LN95@MsgProc
$LN94@MsgProc:
	call	___report_rangecheckfailure
$LN95@MsgProc:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _wszCompStr$21[ebp+ecx], 0

; 6425 :                         //
; 6426 :                         // Remove the whole of the string
; 6427 :                         //
; 6428 :                         TruncateCompString( false, (int)strlen( wszCompStr ) );

	lea	eax, DWORD PTR _wszCompStr$21[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z ; CDXUTIMEEditBox::TruncateCompString

; 6429 : 
; 6430 :                         s_CompString.SetText( wszCompStr );

	lea	eax, DWORD PTR _wszCompStr$21[ebp]
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?SetText@CUniBuffer@@QAE_NPBD@Z		; CUniBuffer::SetText

; 6431 : 
; 6432 :                         // Older CHT IME uses composition string for reading string
; 6433 :                         if ( GetLanguage() == LANG_CHT && !GetImeId() )

	call	?GetLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetLanguage
	movzx	eax, ax
	cmp	eax, 1028				; 00000404H
	jne	$LN74@MsgProc
	push	0
	call	?GetImeId@CDXUTIMEEditBox@@KAKI@Z	; CDXUTIMEEditBox::GetImeId
	add	esp, 4
	test	eax, eax
	jne	$LN74@MsgProc

; 6434 :                         {
; 6435 :                             if( lstrlen( s_CompString.GetBuffer() ) )

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN73@MsgProc

; 6436 :                             {
; 6437 :                                 s_CandList.dwCount = 4;             // Maximum possible length for reading string is 4

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585, 4

; 6438 :                                 s_CandList.dwSelection = (DWORD)-1; // don't select any candidate

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589, -1

; 6439 : 
; 6440 :                                 // Copy the reading string to the candidate list
; 6441 :                                 for( int i = 3; i >= 0; --i )

	mov	DWORD PTR _i$20[ebp], 3
	jmp	SHORT $LN72@MsgProc
$LN71@MsgProc:
	mov	eax, DWORD PTR _i$20[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$20[ebp], eax
$LN72@MsgProc:
	cmp	DWORD PTR _i$20[ebp], 0
	jl	$LN70@MsgProc

; 6442 :                                 {
; 6443 :                                     if( i > lstrlen( s_CompString.GetBuffer() ) - 1 )

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	cmp	DWORD PTR _i$20[ebp], eax
	jle	SHORT $LN69@MsgProc

; 6444 :                                         s_CandList.awszCandidate[i][0] = 0;  // Doesn't exist

	mov	eax, DWORD PTR _i$20[ebp]
	shl	eax, 8
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A[eax+edx], 0

; 6445 :                                     else

	jmp	SHORT $LN68@MsgProc
$LN69@MsgProc:

; 6446 :                                     {
; 6447 :                                         s_CandList.awszCandidate[i][0] = s_CompString[i];

	mov	eax, DWORD PTR _i$20[ebp]
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	??ACUniBuffer@@QAEAADH@Z		; CUniBuffer::operator[]
	mov	ecx, DWORD PTR _i$20[ebp]
	shl	ecx, 8
	mov	edx, 1
	imul	edx, edx, 0
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A[ecx+edx], al

; 6448 :                                         s_CandList.awszCandidate[i][1] = 0;

	mov	eax, DWORD PTR _i$20[ebp]
	shl	eax, 8
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A[eax+ecx], 0
$LN68@MsgProc:

; 6449 :                                     }
; 6450 :                                 }

	jmp	$LN71@MsgProc
$LN70@MsgProc:

; 6451 :                                 s_CandList.dwPageSize = MAX_CANDLIST;

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2593, 10 ; 0000000aH

; 6452 :                                 // Clear comp string after we are done copying
; 6453 :                                 ZeroMemory( (LPVOID)s_CompString.GetBuffer(), 4 * sizeof(TCHAR) );

	push	4
	push	0
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 6454 :                                 s_bShowReadingWindow = true;

	mov	BYTE PTR ?s_bShowReadingWindow@CDXUTIMEEditBox@@1_NA, 1 ; CDXUTIMEEditBox::s_bShowReadingWindow

; 6455 :                                 GetReadingWindowOrientation( 0 );

	push	0
	call	?GetReadingWindowOrientation@CDXUTIMEEditBox@@KAXK@Z ; CDXUTIMEEditBox::GetReadingWindowOrientation
	add	esp, 4

; 6456 :                                 if( s_bHorizontalReading )

	movzx	eax, BYTE PTR ?s_bHorizontalReading@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bHorizontalReading
	test	eax, eax
	je	$LN67@MsgProc

; 6457 :                                 {
; 6458 :                                     s_CandList.nReadingError = -1;  // Clear error

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2597, -1

; 6459 : 
; 6460 :                                     // Create a string that consists of the current
; 6461 :                                     // reading string.  Since horizontal reading window
; 6462 :                                     // is used, we take advantage of this by rendering
; 6463 :                                     // one string instead of several.
; 6464 :                                     //
; 6465 :                                     // Copy the reading string from the candidate list
; 6466 :                                     // to the reading string buffer.
; 6467 :                                     s_wszReadingString[0] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 32			; 00000020H
	jae	SHORT $LN96@MsgProc
	jmp	SHORT $LN97@MsgProc
$LN96@MsgProc:
	call	___report_rangecheckfailure
$LN97@MsgProc:
	mov	edx, DWORD PTR $T3[ebp]
	mov	BYTE PTR ?s_wszReadingString@CDXUTIMEEditBox@@1PADA[edx], 0

; 6468 :                                     for( UINT i = 0; i < s_CandList.dwCount; ++i )

	mov	DWORD PTR _i$19[ebp], 0
	jmp	SHORT $LN66@MsgProc
$LN65@MsgProc:
	mov	eax, DWORD PTR _i$19[ebp]
	add	eax, 1
	mov	DWORD PTR _i$19[ebp], eax
$LN66@MsgProc:
	mov	eax, DWORD PTR _i$19[ebp]
	cmp	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585
	jae	SHORT $LN67@MsgProc

; 6469 :                                     {
; 6470 :                                         if( s_CandList.dwSelection == i )

	mov	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589
	cmp	eax, DWORD PTR _i$19[ebp]
	jne	SHORT $LN63@MsgProc

; 6471 :                                             s_CandList.nReadingError = lstrlen( s_wszReadingString );

	mov	esi, esp
	push	OFFSET ?s_wszReadingString@CDXUTIMEEditBox@@1PADA ; CDXUTIMEEditBox::s_wszReadingString
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2597, eax
$LN63@MsgProc:

; 6472 :                                         StringCchCat( s_wszReadingString, 32, s_CandList.awszCandidate[i] );

	mov	eax, DWORD PTR _i$19[ebp]
	shl	eax, 8
	add	eax, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	push	eax
	push	32					; 00000020H
	push	OFFSET ?s_wszReadingString@CDXUTIMEEditBox@@1PADA ; CDXUTIMEEditBox::s_wszReadingString
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 6473 :                                     }

	jmp	SHORT $LN65@MsgProc
$LN67@MsgProc:

; 6474 :                                 }
; 6475 :                             }
; 6476 :                             else

	jmp	SHORT $LN74@MsgProc
$LN73@MsgProc:

; 6477 :                             {
; 6478 :                                 s_CandList.dwCount = 0;

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585, 0

; 6479 :                                 s_bShowReadingWindow = false;

	mov	BYTE PTR ?s_bShowReadingWindow@CDXUTIMEEditBox@@1_NA, 0 ; CDXUTIMEEditBox::s_bShowReadingWindow
$LN74@MsgProc:

; 6480 :                             }
; 6481 :                         }
; 6482 : 
; 6483 :                         if( s_bInsertOnType )

	movzx	eax, BYTE PTR ?s_bInsertOnType@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bInsertOnType
	test	eax, eax
	je	$LN75@MsgProc

; 6484 :                         {
; 6485 :                             // Send composition string to the edit control
; 6486 :                             SendCompString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendCompString@CDXUTIMEEditBox@@IAEXXZ	; CDXUTIMEEditBox::SendCompString

; 6487 :                             // Restore the caret to the correct location.
; 6488 :                             // It's at the end right now, so compute the number
; 6489 :                             // of times left arrow should be pressed to
; 6490 :                             // send it to the original position.
; 6491 :                             int nCount = lstrlen( s_CompString.GetBuffer() + s_nCompCaret );

	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	add	eax, DWORD PTR ?s_nCompCaret@CDXUTIMEEditBox@@1HA ; CDXUTIMEEditBox::s_nCompCaret
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nCount$18[ebp], eax

; 6492 :                             // Send left keystrokes
; 6493 :                             for( int i = 0; i < nCount; ++i )

	mov	DWORD PTR _i$17[ebp], 0
	jmp	SHORT $LN60@MsgProc
$LN59@MsgProc:
	mov	eax, DWORD PTR _i$17[ebp]
	add	eax, 1
	mov	DWORD PTR _i$17[ebp], eax
$LN60@MsgProc:
	mov	eax, DWORD PTR _i$17[ebp]
	cmp	eax, DWORD PTR _nCount$18[ebp]
	jge	SHORT $LN58@MsgProc

; 6494 :                                 SendMessage( DXUTGetHWND(), WM_KEYDOWN, VK_LEFT, 0 );

	mov	esi, esp
	push	0
	push	37					; 00000025H
	push	256					; 00000100H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN59@MsgProc
$LN58@MsgProc:

; 6495 :                             SendMessage( DXUTGetHWND(), WM_KEYUP, VK_LEFT, 0 );

	mov	esi, esp
	push	0
	push	37					; 00000025H
	push	257					; 00000101H
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN75@MsgProc:

; 6496 :                         }
; 6497 :                     }
; 6498 : 
; 6499 :                     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink
$LN76@MsgProc:

; 6500 :                 }
; 6501 : 
; 6502 :                 // Retrieve comp string attributes
; 6503 :                 if( lParam & GCS_COMPATTR )

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN57@MsgProc

; 6504 :                 {
; 6505 :                     lRet = _ImmGetCompositionStringW( hImc, GCS_COMPATTR, s_abCompStringAttr, sizeof( s_abCompStringAttr ) );

	mov	esi, esp
	push	256					; 00000100H
	push	OFFSET ?s_abCompStringAttr@CDXUTIMEEditBox@@1PAEA ; CDXUTIMEEditBox::s_abCompStringAttr
	push	16					; 00000010H
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	DWORD PTR ?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA ; CDXUTIMEEditBox::_ImmGetCompositionStringW
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRet$22[ebp], eax

; 6506 :                     if( lRet > 0 )

	cmp	DWORD PTR _lRet$22[ebp], 0
	jle	SHORT $LN57@MsgProc

; 6507 :                         s_abCompStringAttr[lRet] = 0;  // ??? Is this needed for attributes?

	mov	eax, DWORD PTR _lRet$22[ebp]
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 256			; 00000100H
	jae	SHORT $LN98@MsgProc
	jmp	SHORT $LN99@MsgProc
$LN98@MsgProc:
	call	___report_rangecheckfailure
$LN99@MsgProc:
	mov	ecx, DWORD PTR $T4[ebp]
	mov	BYTE PTR ?s_abCompStringAttr@CDXUTIMEEditBox@@1PAEA[ecx], 0
$LN57@MsgProc:

; 6508 :                 }
; 6509 : 
; 6510 :                 // Retrieve clause information
; 6511 :                 if( lParam & GCS_COMPCLAUSE )

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN55@MsgProc

; 6512 :                 {
; 6513 :                     lRet = _ImmGetCompositionStringW(hImc, GCS_COMPCLAUSE, s_adwCompStringClause, sizeof( s_adwCompStringClause ) );

	mov	esi, esp
	push	1024					; 00000400H
	push	OFFSET ?s_adwCompStringClause@CDXUTIMEEditBox@@1PAKA ; CDXUTIMEEditBox::s_adwCompStringClause
	push	32					; 00000020H
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	DWORD PTR ?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA ; CDXUTIMEEditBox::_ImmGetCompositionStringW
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRet$22[ebp], eax

; 6514 :                     s_adwCompStringClause[lRet / sizeof(DWORD)] = 0;  // Terminate

	mov	eax, DWORD PTR _lRet$22[ebp]
	shr	eax, 2
	mov	DWORD PTR ?s_adwCompStringClause@CDXUTIMEEditBox@@1PAKA[eax*4], 0
$LN55@MsgProc:

; 6515 :                 }
; 6516 : 
; 6517 :                 _ImmReleaseContext( DXUTGetHWND(), hImc );

	mov	esi, esp
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6518 :             }
; 6519 :             break;

	jmp	$LN83@MsgProc
$LN54@MsgProc:

; 6520 : 
; 6521 :         case WM_IME_ENDCOMPOSITION:
; 6522 :             DXUTTRACE( "WM_IME_ENDCOMPOSITION\n" );

	push	OFFSET ??_C@_0BH@BGPMFOJC@WM_IME_ENDCOMPOSITION?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6523 :             TruncateCompString();

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TruncateCompString@CDXUTIMEEditBox@@IAEX_NH@Z ; CDXUTIMEEditBox::TruncateCompString

; 6524 :             ResetCompositionString();

	call	?ResetCompositionString@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::ResetCompositionString

; 6525 :             // We can show the edit control's caret again.
; 6526 :             s_bHideCaret = false;

	mov	BYTE PTR ?s_bHideCaret@CDXUTEditBox@@1_NA, 0 ; CDXUTEditBox::s_bHideCaret

; 6527 :             // Hide reading window
; 6528 :             s_bShowReadingWindow = false;

	mov	BYTE PTR ?s_bShowReadingWindow@CDXUTIMEEditBox@@1_NA, 0 ; CDXUTIMEEditBox::s_bShowReadingWindow

; 6529 :             break;

	jmp	$LN83@MsgProc
$LN53@MsgProc:

; 6530 : 
; 6531 :         case WM_IME_NOTIFY:
; 6532 :             DXUTTRACE( "WM_IME_NOTIFY %u\n", wParam );

	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	push	OFFSET ??_C@_0BC@EAGJPPFG@WM_IME_NOTIFY?5?$CFu?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 8

; 6533 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv289[ebp], eax
	mov	ecx, DWORD PTR tv289[ebp]
	sub	ecx, 3
	mov	DWORD PTR tv289[ebp], ecx
	cmp	DWORD PTR tv289[ebp], 11		; 0000000bH
	ja	$LN14@MsgProc
	mov	edx, DWORD PTR tv289[ebp]
	movzx	eax, BYTE PTR $LN112@MsgProc[edx]
	jmp	DWORD PTR $LN120@MsgProc[eax*4]
$LN50@MsgProc:

; 6534 :             {
; 6535 :                 case IMN_SETCONVERSIONMODE:
; 6536 :                     DXUTTRACE( "  IMN_SETCONVERSIONMODE\n" );

	push	OFFSET ??_C@_0BJ@ONBLFOKJ@?5?5IMN_SETCONVERSIONMODE?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4
$LN49@MsgProc:

; 6537 :                 case IMN_SETOPENSTATUS:
; 6538 :                     DXUTTRACE( "  IMN_SETOPENSTATUS\n" );

	push	OFFSET ??_C@_0BF@BJFGBGLB@?5?5IMN_SETOPENSTATUS?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6539 :                     CheckToggleState();

	call	?CheckToggleState@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::CheckToggleState

; 6540 :                     break;

	jmp	$LN51@MsgProc
$LN48@MsgProc:

; 6541 : 
; 6542 :                 case IMN_OPENCANDIDATE:
; 6543 :                 case IMN_CHANGECANDIDATE:
; 6544 :                 {
; 6545 :                     DXUTTRACE( wParam == IMN_CHANGECANDIDATE ? "  IMN_CHANGECANDIDATE\n" : "  IMN_OPENCANDIDATE\n" );

	cmp	DWORD PTR _wParam$[ebp], 3
	jne	SHORT $LN100@MsgProc
	mov	DWORD PTR tv293[ebp], OFFSET ??_C@_0BH@NOIBGFFB@?5?5IMN_CHANGECANDIDATE?6?$AA@
	jmp	SHORT $LN101@MsgProc
$LN100@MsgProc:
	mov	DWORD PTR tv293[ebp], OFFSET ??_C@_0BF@BOLGLHEB@?5?5IMN_OPENCANDIDATE?6?$AA@
$LN101@MsgProc:
	mov	eax, DWORD PTR tv293[ebp]
	push	eax
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6546 : 
; 6547 :                     s_CandList.bShowWindow = true;

	mov	BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2601, 1

; 6548 :                     *trapped = true;

	mov	eax, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [eax], 1

; 6549 :                     if( NULL == ( hImc = _ImmGetContext( DXUTGetHWND() ) ) )

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hImc$[ebp], eax
	cmp	DWORD PTR _hImc$[ebp], 0
	jne	SHORT $LN47@MsgProc

; 6550 :                         break;

	jmp	$LN51@MsgProc
$LN47@MsgProc:

; 6551 : 
; 6552 :                     LPCANDIDATELIST lpCandList = NULL;

	mov	DWORD PTR _lpCandList$16[ebp], 0

; 6553 :                     DWORD dwLenRequired;
; 6554 : 
; 6555 :                     s_bShowReadingWindow = false;

	mov	BYTE PTR ?s_bShowReadingWindow@CDXUTIMEEditBox@@1_NA, 0 ; CDXUTIMEEditBox::s_bShowReadingWindow

; 6556 :                     // Retrieve the candidate list
; 6557 :                     dwLenRequired = _ImmGetCandidateListW( hImc, 0, NULL, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	DWORD PTR ?_ImmGetCandidateListW@CDXUTIMEEditBox@@1P6GKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@ZA ; CDXUTIMEEditBox::_ImmGetCandidateListW
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwLenRequired$15[ebp], eax

; 6558 :                     if( dwLenRequired )

	cmp	DWORD PTR _dwLenRequired$15[ebp], 0
	je	SHORT $LN46@MsgProc

; 6559 :                     {
; 6560 :                         lpCandList = (LPCANDIDATELIST)HeapAlloc( GetProcessHeap(), 0, dwLenRequired );

	mov	esi, esp
	mov	eax, DWORD PTR _dwLenRequired$15[ebp]
	push	eax
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetProcessHeap@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpCandList$16[ebp], eax

; 6561 :                         dwLenRequired = _ImmGetCandidateListW( hImc, 0, lpCandList, dwLenRequired );

	mov	esi, esp
	mov	eax, DWORD PTR _dwLenRequired$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpCandList$16[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hImc$[ebp]
	push	edx
	call	DWORD PTR ?_ImmGetCandidateListW@CDXUTIMEEditBox@@1P6GKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@ZA ; CDXUTIMEEditBox::_ImmGetCandidateListW
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwLenRequired$15[ebp], eax
$LN46@MsgProc:

; 6562 :                     }
; 6563 : 
; 6564 :                     if( lpCandList )

	cmp	DWORD PTR _lpCandList$16[ebp], 0
	je	$LN45@MsgProc

; 6565 :                     {
; 6566 :                         // Update candidate list data
; 6567 :                         s_CandList.dwSelection = lpCandList->dwSelection;

	mov	eax, DWORD PTR _lpCandList$16[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589, ecx

; 6568 :                         s_CandList.dwCount = lpCandList->dwCount;

	mov	eax, DWORD PTR _lpCandList$16[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585, ecx

; 6569 : 
; 6570 :                         int nPageTopIndex = 0;

	mov	DWORD PTR _nPageTopIndex$14[ebp], 0

; 6571 :                         s_CandList.dwPageSize = __min( lpCandList->dwPageSize, MAX_CANDLIST );

	mov	eax, DWORD PTR _lpCandList$16[ebp]
	cmp	DWORD PTR [eax+20], 10			; 0000000aH
	jae	SHORT $LN102@MsgProc
	mov	ecx, DWORD PTR _lpCandList$16[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR tv353[ebp], edx
	jmp	SHORT $LN103@MsgProc
$LN102@MsgProc:
	mov	DWORD PTR tv353[ebp], 10		; 0000000aH
$LN103@MsgProc:
	mov	eax, DWORD PTR tv353[ebp]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2593, eax

; 6572 :                         if( GetPrimaryLanguage() == LANG_JAPANESE )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	cmp	eax, 17					; 00000011H
	jne	SHORT $LN44@MsgProc

; 6573 :                         {
; 6574 :                             // Japanese IME organizes its candidate list a little
; 6575 :                             // differently from the other IMEs.
; 6576 :                             nPageTopIndex = ( s_CandList.dwSelection / s_CandList.dwPageSize ) * s_CandList.dwPageSize;

	mov	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589
	xor	edx, edx
	div	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2593
	imul	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2593
	mov	DWORD PTR _nPageTopIndex$14[ebp], eax

; 6577 :                         }
; 6578 :                         else

	jmp	SHORT $LN43@MsgProc
$LN44@MsgProc:

; 6579 :                             nPageTopIndex = lpCandList->dwPageStart;

	mov	eax, DWORD PTR _lpCandList$16[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _nPageTopIndex$14[ebp], ecx
$LN43@MsgProc:

; 6580 : 
; 6581 :                         // Make selection index relative to first entry of page
; 6582 :                         s_CandList.dwSelection = ( GetLanguage() == LANG_CHS && !GetImeId() ) ? (DWORD)-1
; 6583 :                                                  : s_CandList.dwSelection - nPageTopIndex;

	call	?GetLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetLanguage
	movzx	eax, ax
	cmp	eax, 2052				; 00000804H
	jne	SHORT $LN104@MsgProc
	push	0
	call	?GetImeId@CDXUTIMEEditBox@@KAKI@Z	; CDXUTIMEEditBox::GetImeId
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN104@MsgProc
	mov	DWORD PTR tv367[ebp], -1
	jmp	SHORT $LN105@MsgProc
$LN104@MsgProc:
	mov	ecx, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589
	sub	ecx, DWORD PTR _nPageTopIndex$14[ebp]
	mov	DWORD PTR tv367[ebp], ecx
$LN105@MsgProc:
	mov	edx, DWORD PTR tv367[ebp]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589, edx

; 6584 : 
; 6585 :                         ZeroMemory( s_CandList.awszCandidate, sizeof(s_CandList.awszCandidate) );

	push	2560					; 00000a00H
	push	0
	push	OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	call	_memset
	add	esp, 12					; 0000000cH

; 6586 :                         for( UINT i = nPageTopIndex, j = 0;

	mov	eax, DWORD PTR _nPageTopIndex$14[ebp]
	mov	DWORD PTR _i$13[ebp], eax
	mov	DWORD PTR _j$12[ebp], 0

; 6587 :                             (DWORD)i < lpCandList->dwCount && j < s_CandList.dwPageSize;

	jmp	SHORT $LN42@MsgProc
$LN41@MsgProc:

; 6588 :                             i++, j++ )

	mov	eax, DWORD PTR _i$13[ebp]
	add	eax, 1
	mov	DWORD PTR _i$13[ebp], eax
	mov	ecx, DWORD PTR _j$12[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$12[ebp], ecx
$LN42@MsgProc:
	mov	eax, DWORD PTR _lpCandList$16[ebp]
	mov	ecx, DWORD PTR _i$13[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN40@MsgProc
	mov	eax, DWORD PTR _j$12[ebp]
	cmp	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2593
	jae	$LN40@MsgProc

; 6589 :                         {
; 6590 :                             // Initialize the candidate list strings
; 6591 :                             PCHAR pwsz = s_CandList.awszCandidate[j];

	mov	eax, DWORD PTR _j$12[ebp]
	shl	eax, 8
	add	eax, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	mov	DWORD PTR _pwsz$11[ebp], eax

; 6592 :                             // For every candidate string entry,
; 6593 :                             // write [index] + Space + [String] if vertical,
; 6594 :                             // write [index] + [String] + Space if horizontal.
; 6595 :                             *pwsz++ = (TCHAR)( L'0' + ( (j + 1) % 10 ) );  // Index displayed is 1 based

	mov	eax, DWORD PTR _j$12[ebp]
	add	eax, 1
	xor	edx, edx
	mov	ecx, 10					; 0000000aH
	div	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _pwsz$11[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _pwsz$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _pwsz$11[ebp], ecx

; 6596 :                             if( s_bVerticalCand )

	movzx	eax, BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bVerticalCand
	test	eax, eax
	je	SHORT $LN39@MsgProc

; 6597 :                                 *pwsz++ = L' ';

	mov	eax, DWORD PTR _pwsz$11[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
	mov	ecx, DWORD PTR _pwsz$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _pwsz$11[ebp], ecx
$LN39@MsgProc:

; 6598 :                             TCHAR *pwszNewCand = (PCHAR)( (LPBYTE)lpCandList + lpCandList->dwOffset[i] );

	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _lpCandList$16[ebp]
	mov	edx, DWORD PTR _lpCandList$16[ebp]
	add	edx, DWORD PTR [ecx+eax*4+24]
	mov	DWORD PTR _pwszNewCand$10[ebp], edx
$LN38@MsgProc:

; 6599 :                             while ( *pwszNewCand )

	mov	eax, DWORD PTR _pwszNewCand$10[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN37@MsgProc

; 6600 :                                 *pwsz++ = *pwszNewCand++;

	mov	eax, DWORD PTR _pwsz$11[ebp]
	mov	ecx, DWORD PTR _pwszNewCand$10[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pwsz$11[ebp]
	add	eax, 1
	mov	DWORD PTR _pwsz$11[ebp], eax
	mov	ecx, DWORD PTR _pwszNewCand$10[ebp]
	add	ecx, 1
	mov	DWORD PTR _pwszNewCand$10[ebp], ecx
	jmp	SHORT $LN38@MsgProc
$LN37@MsgProc:

; 6601 :                             if( !s_bVerticalCand )

	movzx	eax, BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bVerticalCand
	test	eax, eax
	jne	SHORT $LN36@MsgProc

; 6602 :                                 *pwsz++ = L' ';

	mov	eax, DWORD PTR _pwsz$11[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
	mov	ecx, DWORD PTR _pwsz$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _pwsz$11[ebp], ecx
$LN36@MsgProc:

; 6603 :                             *pwsz = 0;  // Terminate

	mov	eax, DWORD PTR _pwsz$11[ebp]
	mov	BYTE PTR [eax], 0

; 6604 :                         }

	jmp	$LN41@MsgProc
$LN40@MsgProc:

; 6605 : 
; 6606 :                         // Make dwCount in s_CandList be number of valid entries in the page.
; 6607 :                         s_CandList.dwCount = lpCandList->dwCount - lpCandList->dwPageStart;

	mov	eax, DWORD PTR _lpCandList$16[ebp]
	mov	ecx, DWORD PTR _lpCandList$16[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585, edx

; 6608 :                         if( s_CandList.dwCount > lpCandList->dwPageSize )

	mov	eax, DWORD PTR _lpCandList$16[ebp]
	mov	ecx, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585
	cmp	ecx, DWORD PTR [eax+20]
	jbe	SHORT $LN35@MsgProc

; 6609 :                             s_CandList.dwCount = lpCandList->dwPageSize;

	mov	eax, DWORD PTR _lpCandList$16[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585, ecx
$LN35@MsgProc:

; 6610 : 
; 6611 :                         HeapFree( GetProcessHeap(), 0, lpCandList );

	mov	esi, esp
	mov	eax, DWORD PTR _lpCandList$16[ebp]
	push	eax
	push	0
	mov	edi, esp
	call	DWORD PTR __imp__GetProcessHeap@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6612 :                         _ImmReleaseContext( DXUTGetHWND(), hImc );

	mov	esi, esp
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6613 : 
; 6614 :                         // Korean and old Chinese IME can't have selection.
; 6615 :                         // User must use the number hotkey or Enter to select
; 6616 :                         // a candidate.
; 6617 :                         if( GetPrimaryLanguage() == LANG_KOREAN ||
; 6618 :                             GetLanguage() == LANG_CHT && !GetImeId() )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	cmp	eax, 18					; 00000012H
	je	SHORT $LN33@MsgProc
	call	?GetLanguage@CDXUTIMEEditBox@@KAGXZ	; CDXUTIMEEditBox::GetLanguage
	movzx	eax, ax
	cmp	eax, 1028				; 00000404H
	jne	SHORT $LN34@MsgProc
	push	0
	call	?GetImeId@CDXUTIMEEditBox@@KAKI@Z	; CDXUTIMEEditBox::GetImeId
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN34@MsgProc
$LN33@MsgProc:

; 6619 :                         {
; 6620 :                             s_CandList.dwSelection = (DWORD)-1;

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589, -1
$LN34@MsgProc:

; 6621 :                         }
; 6622 : 
; 6623 :                         // Initialize s_CandList.HoriCand if we have a
; 6624 :                         // horizontal candidate window.
; 6625 :                         if( !s_bVerticalCand )

	movzx	eax, BYTE PTR ?s_bVerticalCand@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bVerticalCand
	test	eax, eax
	jne	$LN45@MsgProc

; 6626 :                         {
; 6627 :                             TCHAR wszCand[256] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _wszCand$9[ebp], al
	push	255					; 000000ffH
	push	0
	lea	eax, DWORD PTR _wszCand$9[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 6628 : 
; 6629 :                             s_CandList.nFirstSelected = 0;

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2577, 0

; 6630 :                             s_CandList.nHoriSelectedLen = 0;

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2581, 0

; 6631 :                             for( UINT i = 0; i < MAX_CANDLIST; ++i )

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN31@MsgProc
$LN30@MsgProc:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN31@MsgProc:
	cmp	DWORD PTR _i$8[ebp], 10			; 0000000aH
	jae	$LN29@MsgProc

; 6632 :                             {
; 6633 :                                 if( s_CandList.awszCandidate[i][0] == L'\0' )

	mov	eax, DWORD PTR _i$8[ebp]
	shl	eax, 8
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A[eax+edx]
	test	eax, eax
	jne	SHORT $LN28@MsgProc

; 6634 :                                     break;

	jmp	$LN29@MsgProc
$LN28@MsgProc:

; 6635 : 
; 6636 :                                 TCHAR wszEntry[32];
; 6637 :                                 StringCchPrintf( wszEntry, 32, "%s ", s_CandList.awszCandidate[i] );

	mov	eax, DWORD PTR _i$8[ebp]
	shl	eax, 8
	add	eax, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	push	eax
	push	OFFSET ??_C@_03IKGEINEE@?$CFs?5?$AA@
	push	32					; 00000020H
	lea	ecx, DWORD PTR _wszEntry$7[ebp]
	push	ecx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 16					; 00000010H

; 6638 :                                 // If this is the selected entry, mark its char position.
; 6639 :                                 if( s_CandList.dwSelection == i )

	mov	eax, DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2589
	cmp	eax, DWORD PTR _i$8[ebp]
	jne	SHORT $LN27@MsgProc

; 6640 :                                 {
; 6641 :                                     s_CandList.nFirstSelected = lstrlen( wszCand );

	mov	esi, esp
	lea	eax, DWORD PTR _wszCand$9[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2577, eax

; 6642 :                                     s_CandList.nHoriSelectedLen = lstrlen( wszEntry ) - 1;  // Minus space

	mov	esi, esp
	lea	eax, DWORD PTR _wszEntry$7[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2581, eax
$LN27@MsgProc:

; 6643 :                                 }
; 6644 :                                 StringCchCat( wszCand, 256, wszEntry );

	lea	eax, DWORD PTR _wszEntry$7[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _wszCand$9[ebp]
	push	ecx
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 6645 :                             }

	jmp	$LN30@MsgProc
$LN29@MsgProc:

; 6646 :                             wszCand[lstrlen(wszCand) - 1] = L'\0';  // Remove the last space

	mov	esi, esp
	lea	eax, DWORD PTR _wszCand$9[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, 1
	mov	DWORD PTR $T5[ebp], eax
	cmp	DWORD PTR $T5[ebp], 256			; 00000100H
	jae	SHORT $LN106@MsgProc
	jmp	SHORT $LN107@MsgProc
$LN106@MsgProc:
	call	___report_rangecheckfailure
$LN107@MsgProc:
	mov	ecx, DWORD PTR $T5[ebp]
	mov	BYTE PTR _wszCand$9[ebp+ecx], 0

; 6647 :                             s_CandList.HoriCand.SetText( wszCand );

	lea	eax, DWORD PTR _wszCand$9[ebp]
	push	eax
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2560
	call	?SetText@CUniBuffer@@QAE_NPBD@Z		; CUniBuffer::SetText
$LN45@MsgProc:

; 6648 :                         }
; 6649 :                     }
; 6650 :                     break;

	jmp	$LN51@MsgProc
$LN26@MsgProc:

; 6651 :                 }
; 6652 : 
; 6653 :                 case IMN_CLOSECANDIDATE:
; 6654 :                 {
; 6655 :                     DXUTTRACE( "  IMN_CLOSECANDIDATE\n" );

	push	OFFSET ??_C@_0BG@DOILBMAC@?5?5IMN_CLOSECANDIDATE?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6656 :                     s_CandList.bShowWindow = false;

	mov	BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2601, 0

; 6657 :                     if( !s_bShowReadingWindow )

	movzx	eax, BYTE PTR ?s_bShowReadingWindow@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bShowReadingWindow
	test	eax, eax
	jne	SHORT $LN25@MsgProc

; 6658 :                     {
; 6659 :                         s_CandList.dwCount = 0;

	mov	DWORD PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2585, 0

; 6660 :                         ZeroMemory( s_CandList.awszCandidate, sizeof(s_CandList.awszCandidate) );

	push	2560					; 00000a00H
	push	0
	push	OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A ; CDXUTIMEEditBox::s_CandList
	call	_memset
	add	esp, 12					; 0000000cH
$LN25@MsgProc:

; 6661 :                     }
; 6662 :                     *trapped = true;

	mov	eax, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [eax], 1

; 6663 :                     break;

	jmp	$LN51@MsgProc
$LN24@MsgProc:

; 6664 :                 }
; 6665 : 
; 6666 :                 case IMN_PRIVATE:
; 6667 :                     DXUTTRACE( "  IMN_PRIVATE\n" );

	push	OFFSET ??_C@_0P@PGCPFIAP@?5?5IMN_PRIVATE?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6668 :                     {
; 6669 :                         if( !s_CandList.bShowWindow )

	movzx	eax, BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2601
	test	eax, eax
	jne	SHORT $LN23@MsgProc

; 6670 :                             GetPrivateReadingString();

	call	?GetPrivateReadingString@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::GetPrivateReadingString
$LN23@MsgProc:

; 6671 : 
; 6672 :                         // Trap some messages to hide reading window
; 6673 :                         DWORD dwId = GetImeId();

	push	0
	call	?GetImeId@CDXUTIMEEditBox@@KAKI@Z	; CDXUTIMEEditBox::GetImeId
	add	esp, 4
	mov	DWORD PTR _dwId$6[ebp], eax

; 6674 :                         switch( dwId )

	mov	eax, DWORD PTR _dwId$6[ebp]
	mov	DWORD PTR tv470[ebp], eax
	cmp	DWORD PTR tv470[ebp], 83887108		; 05000404H
	ja	SHORT $LN108@MsgProc
	cmp	DWORD PTR tv470[ebp], 83887108		; 05000404H
	je	$LN17@MsgProc
	cmp	DWORD PTR tv470[ebp], 67241988		; 04020804H
	ja	SHORT $LN109@MsgProc
	cmp	DWORD PTR tv470[ebp], 67241988		; 04020804H
	je	SHORT $LN20@MsgProc
	cmp	DWORD PTR tv470[ebp], 67176452		; 04010804H
	je	SHORT $LN20@MsgProc
	cmp	DWORD PTR tv470[ebp], 67240964		; 04020404H
	je	SHORT $LN20@MsgProc
	jmp	$LN21@MsgProc
$LN109@MsgProc:
	cmp	DWORD PTR tv470[ebp], 67306500		; 04030404H
	je	SHORT $LN20@MsgProc
	cmp	DWORD PTR tv470[ebp], 67372036		; 04040404H
	je	SHORT $LN20@MsgProc
	jmp	SHORT $LN21@MsgProc
$LN108@MsgProc:
	cmp	DWORD PTR tv470[ebp], 84084740		; 05030804H
	ja	SHORT $LN110@MsgProc
	cmp	DWORD PTR tv470[ebp], 84084740		; 05030804H
	je	SHORT $LN17@MsgProc
	cmp	DWORD PTR tv470[ebp], 83952644		; 05010404H
	je	SHORT $LN17@MsgProc
	cmp	DWORD PTR tv470[ebp], 84018180		; 05020404H
	je	SHORT $LN17@MsgProc
	jmp	SHORT $LN21@MsgProc
$LN110@MsgProc:
	cmp	DWORD PTR tv470[ebp], 100664324		; 06000404H
	je	SHORT $LN17@MsgProc
	jmp	SHORT $LN21@MsgProc
$LN20@MsgProc:

; 6675 :                         {
; 6676 :                             case IMEID_CHT_VER42:
; 6677 :                             case IMEID_CHT_VER43:
; 6678 :                             case IMEID_CHT_VER44:
; 6679 :                             case IMEID_CHS_VER41:
; 6680 :                             case IMEID_CHS_VER42:
; 6681 :                                 if( ( lParam == 1 ) || ( lParam == 2 ) )

	cmp	DWORD PTR _lParam$[ebp], 1
	je	SHORT $LN18@MsgProc
	cmp	DWORD PTR _lParam$[ebp], 2
	jne	SHORT $LN19@MsgProc
$LN18@MsgProc:

; 6682 :                                 {
; 6683 :                                     *trapped = true;

	mov	eax, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [eax], 1
$LN19@MsgProc:

; 6684 :                                 }
; 6685 :                                 break;

	jmp	SHORT $LN21@MsgProc
$LN17@MsgProc:

; 6686 : 
; 6687 :                             case IMEID_CHT_VER50:
; 6688 :                             case IMEID_CHT_VER51:
; 6689 :                             case IMEID_CHT_VER52:
; 6690 :                             case IMEID_CHT_VER60:
; 6691 :                             case IMEID_CHS_VER53:
; 6692 :                                 if( (lParam == 16) || (lParam == 17) || (lParam == 26) || (lParam == 27) || (lParam == 28) )

	cmp	DWORD PTR _lParam$[ebp], 16		; 00000010H
	je	SHORT $LN15@MsgProc
	cmp	DWORD PTR _lParam$[ebp], 17		; 00000011H
	je	SHORT $LN15@MsgProc
	cmp	DWORD PTR _lParam$[ebp], 26		; 0000001aH
	je	SHORT $LN15@MsgProc
	cmp	DWORD PTR _lParam$[ebp], 27		; 0000001bH
	je	SHORT $LN15@MsgProc
	cmp	DWORD PTR _lParam$[ebp], 28		; 0000001cH
	jne	SHORT $LN21@MsgProc
$LN15@MsgProc:

; 6693 :                                 {
; 6694 :                                     *trapped = true;

	mov	eax, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [eax], 1
$LN21@MsgProc:

; 6695 :                                 }
; 6696 :                                 break;
; 6697 :                         }
; 6698 :                     }
; 6699 :                     break;

	jmp	SHORT $LN51@MsgProc
$LN14@MsgProc:

; 6700 : 
; 6701 :                 default:
; 6702 :                     *trapped = true;

	mov	eax, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [eax], 1
$LN51@MsgProc:

; 6703 :                     break;
; 6704 :             }
; 6705 :             break;

	jmp	$LN83@MsgProc
$LN13@MsgProc:

; 6706 : 
; 6707 :         // When Text Service Framework is installed in Win2K, Alt+Shift and Ctrl+Shift combination (to switch input
; 6708 :         // locale / keyboard layout) doesn't send WM_KEYUP message for the key that is released first. We need to check
; 6709 :         // if these keys are actually up whenever we receive key up message for other keys.
; 6710 :         case WM_KEYUP:
; 6711 :         case WM_SYSKEYUP:
; 6712 :             if ( !( lAlt & 0x80000000 ) && wParam != VK_MENU && ( GetAsyncKeyState( VK_MENU ) & 0x8000 ) == 0 )

	mov	eax, DWORD PTR ?lAlt@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN12@MsgProc
	cmp	DWORD PTR _wParam$[ebp], 18		; 00000012H
	je	SHORT $LN12@MsgProc
	mov	esi, esp
	push	18					; 00000012H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	and	eax, 32768				; 00008000H
	jne	SHORT $LN12@MsgProc

; 6713 :             {
; 6714 :                 PostMessageW( GetFocus(), WM_KEYUP, (WPARAM)VK_MENU, ( lAlt & 0x01ff0000 ) | 0xC0000001 );

	mov	eax, DWORD PTR ?lAlt@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA
	and	eax, 33488896				; 01ff0000H
	or	eax, -1073741823			; c0000001H
	mov	esi, esp
	push	eax
	push	18					; 00000012H
	push	257					; 00000101H
	mov	edi, esp
	call	DWORD PTR __imp__GetFocus@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__PostMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN7@MsgProc
$LN12@MsgProc:

; 6715 :             }   
; 6716 :             else if ( !( lCtrl & 0x80000000 ) && wParam != VK_CONTROL && ( GetAsyncKeyState( VK_CONTROL ) & 0x8000 ) == 0 )

	mov	eax, DWORD PTR ?lCtrl@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN10@MsgProc
	cmp	DWORD PTR _wParam$[ebp], 17		; 00000011H
	je	SHORT $LN10@MsgProc
	mov	esi, esp
	push	17					; 00000011H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	and	eax, 32768				; 00008000H
	jne	SHORT $LN10@MsgProc

; 6717 :             {
; 6718 :                 PostMessageW( GetFocus(), WM_KEYUP, (WPARAM)VK_CONTROL, ( lCtrl & 0x01ff0000 ) | 0xC0000001 );

	mov	eax, DWORD PTR ?lCtrl@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA
	and	eax, 33488896				; 01ff0000H
	or	eax, -1073741823			; c0000001H
	mov	esi, esp
	push	eax
	push	17					; 00000011H
	push	257					; 00000101H
	mov	edi, esp
	call	DWORD PTR __imp__GetFocus@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__PostMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN7@MsgProc
$LN10@MsgProc:

; 6719 :             }
; 6720 :             else if ( !( lShift & 0x80000000 ) && wParam != VK_SHIFT && ( GetAsyncKeyState( VK_SHIFT ) & 0x8000 ) == 0 )

	mov	eax, DWORD PTR ?lShift@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN7@MsgProc
	cmp	DWORD PTR _wParam$[ebp], 16		; 00000010H
	je	SHORT $LN7@MsgProc
	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	and	eax, 32768				; 00008000H
	jne	SHORT $LN7@MsgProc

; 6721 :             {
; 6722 :                 PostMessageW( GetFocus(), WM_KEYUP, (WPARAM)VK_SHIFT, ( lShift & 0x01ff0000 ) | 0xC0000001 );

	mov	eax, DWORD PTR ?lShift@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA
	and	eax, 33488896				; 01ff0000H
	or	eax, -1073741823			; c0000001H
	mov	esi, esp
	push	eax
	push	16					; 00000010H
	push	257					; 00000101H
	mov	edi, esp
	call	DWORD PTR __imp__GetFocus@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__PostMessageW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@MsgProc:

; 6723 :             }
; 6724 :             // fall through WM_KEYDOWN / WM_SYSKEYDOWN
; 6725 :         case WM_KEYDOWN:
; 6726 :         case WM_SYSKEYDOWN:
; 6727 :             switch ( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv563[ebp], eax
	cmp	DWORD PTR tv563[ebp], 16		; 00000010H
	je	SHORT $LN3@MsgProc
	cmp	DWORD PTR tv563[ebp], 17		; 00000011H
	je	SHORT $LN2@MsgProc
	cmp	DWORD PTR tv563[ebp], 18		; 00000012H
	je	SHORT $LN4@MsgProc
	jmp	SHORT $LN1@MsgProc
$LN4@MsgProc:

; 6728 :             {
; 6729 :                 case VK_MENU:
; 6730 :                     lAlt = lParam;

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR ?lAlt@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA, eax

; 6731 :                     break;

	jmp	SHORT $LN1@MsgProc
$LN3@MsgProc:

; 6732 :                 case VK_SHIFT:
; 6733 :                     lShift = lParam;

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR ?lShift@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA, eax

; 6734 :                     break;

	jmp	SHORT $LN1@MsgProc
$LN2@MsgProc:

; 6735 :                 case VK_CONTROL:
; 6736 :                     lCtrl = lParam;

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR ?lCtrl@?3??MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z@4JA, eax
$LN1@MsgProc:

; 6737 :                     break;
; 6738 :             }
; 6739 :             //break;
; 6740 :             // Fall through to default case
; 6741 :             // so we invoke the parent.
; 6742 : 
; 6743 :         default:
; 6744 :             // Let the parent handle the message that we
; 6745 :             // don't handle.
; 6746 :             return CDXUTEditBox::MsgProc( uMsg, wParam, lParam );

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MsgProc@CDXUTEditBox@@UAE_NIIJ@Z	; CDXUTEditBox::MsgProc
	jmp	SHORT $LN89@MsgProc
$LN83@MsgProc:

; 6747 : 
; 6748 :     }  // switch
; 6749 : 
; 6750 :     return *trapped;

	mov	eax, DWORD PTR _trapped$[ebp]
	mov	al, BYTE PTR [eax]
$LN89@MsgProc:

; 6751 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN118@MsgProc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1044				; 00000414H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN118@MsgProc:
	DD	4
	DD	$LN117@MsgProc
$LN117@MsgProc:
	DD	-21					; ffffffebH
	DD	1
	DD	$LN113@MsgProc
	DD	-324					; fffffebcH
	DD	256					; 00000100H
	DD	$LN114@MsgProc
	DD	-720					; fffffd30H
	DD	256					; 00000100H
	DD	$LN115@MsgProc
	DD	-772					; fffffcfcH
	DD	32					; 00000020H
	DD	$LN116@MsgProc
$LN116@MsgProc:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN115@MsgProc:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN114@MsgProc:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN113@MsgProc:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN119@MsgProc:
	DD	$LN7@MsgProc
	DD	$LN13@MsgProc
	DD	$LN1@MsgProc
	DD	$LN1@MsgProc
	DD	$LN7@MsgProc
	DD	$LN13@MsgProc
$LN120@MsgProc:
	DD	$LN48@MsgProc
	DD	$LN26@MsgProc
	DD	$LN50@MsgProc
	DD	$LN49@MsgProc
	DD	$LN24@MsgProc
	DD	$LN14@MsgProc
$LN112@MsgProc:
	DB	0
	DB	1
	DB	0
	DB	2
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
?MsgProc@CDXUTIMEEditBox@@UAE_NIIJ@Z ENDP		; CDXUTIMEEditBox::MsgProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv133 = -260						; size = 4
_pElement$ = -60					; size = 4
_rc$1 = -48						; size = 16
_i$2 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z PROC ; CDXUTIMEEditBox::Render, COMDAT
; _this$ = ecx

; 7120 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 7121 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN10@Render

; 7122 :         return;

	jmp	$LN11@Render
$LN10@Render:

; 7123 : 
; 7124 :     // If we have not computed the indicator symbol width,
; 7125 :     // do it.
; 7126 :     if( !m_nIndicatorWidth )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+381], 0
	jne	$LN9@Render

; 7127 :     {
; 7128 :         for( int i = 0; i < 5; ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN8@Render
$LN7@Render:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN8@Render:
	cmp	DWORD PTR _i$2[ebp], 5
	jge	$LN6@Render

; 7129 :         {
; 7130 :             RECT rc = { 0, 0, 0, 0 };

	mov	DWORD PTR _rc$1[ebp], 0
	mov	DWORD PTR _rc$1[ebp+4], 0
	mov	DWORD PTR _rc$1[ebp+8], 0
	mov	DWORD PTR _rc$1[ebp+12], 0

; 7131 :             m_pDialog->CalcTextRect( s_aszIndicator[i], m_Elements.GetAt( 9 ), &rc );

	push	-1
	lea	eax, DWORD PTR _rc$1[ebp]
	push	eax
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	imul	edx, DWORD PTR _i$2[ebp], 3
	add	edx, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ; CDXUTDialog::CalcTextRect

; 7132 :             m_nIndicatorWidth = __max( m_nIndicatorWidth, rc.right - rc.left );

	mov	eax, DWORD PTR _rc$1[ebp+8]
	sub	eax, DWORD PTR _rc$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+381], eax
	jle	SHORT $LN13@Render
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+381]
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN14@Render
$LN13@Render:
	mov	ecx, DWORD PTR _rc$1[ebp+8]
	sub	ecx, DWORD PTR _rc$1[ebp]
	mov	DWORD PTR tv133[ebp], ecx
$LN14@Render:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv133[ebp]
	mov	DWORD PTR [edx+381], eax

; 7133 :         }

	jmp	$LN7@Render
$LN6@Render:

; 7134 :         // Update the rectangles now that we have the indicator's width
; 7135 :         UpdateRects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@Render:

; 7136 :     }
; 7137 : 
; 7138 :     // Let the parent render first (edit control)
; 7139 :     CDXUTEditBox::Render( pd3dDevice, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Render@CDXUTEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ; CDXUTEditBox::Render

; 7140 : 
; 7141 :     CDXUTElement* pElement = GetElement( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetElement@CDXUTControl@@QAEPAVCDXUTElement@@I@Z ; CDXUTControl::GetElement
	mov	DWORD PTR _pElement$[ebp], eax

; 7142 :     if( pElement )

	cmp	DWORD PTR _pElement$[ebp], 0
	je	SHORT $LN5@Render

; 7143 :     {
; 7144 :         s_CompString.SetFontNode( m_pDialog->GetFont( pElement->iFont ) );

	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z ; CDXUTDialog::GetFont
	push	eax
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?SetFontNode@CUniBuffer@@QAEXPAUDXUTFontNode@@@Z ; CUniBuffer::SetFontNode

; 7145 :         s_CandList.HoriCand.SetFontNode( m_pDialog->GetFont( pElement->iFont ) );

	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z ; CDXUTDialog::GetFont
	push	eax
	mov	ecx, OFFSET ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2560
	call	?SetFontNode@CUniBuffer@@QAEXPAUDXUTFontNode@@@Z ; CUniBuffer::SetFontNode
$LN5@Render:

; 7146 :     }
; 7147 : 
; 7148 :     //
; 7149 :     // Now render the IME elements
; 7150 :     //
; 7151 :     if( m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	je	$LN1@Render

; 7152 :     {
; 7153 :         // Render the input locale indicator
; 7154 :         RenderIndicator( pd3dDevice, fElapsedTime );

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7155 : 
; 7156 :         // Display the composition string.
; 7157 :         // This method should also update s_ptCompString
; 7158 :         // for RenderCandidateReadingWindow.
; 7159 :         RenderComposition( pd3dDevice, fElapsedTime );

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7160 : 
; 7161 :         // Display the reading/candidate window. RenderCandidateReadingWindow()
; 7162 :         // uses s_ptCompString to position itself.  s_ptCompString must have
; 7163 :         // been filled in by RenderComposition().
; 7164 :         if( s_bShowReadingWindow )

	movzx	eax, BYTE PTR ?s_bShowReadingWindow@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bShowReadingWindow
	test	eax, eax
	je	SHORT $LN3@Render

; 7165 :             // Reading window
; 7166 :             RenderCandidateReadingWindow( pd3dDevice, fElapsedTime, true );

	mov	esi, esp
	push	1
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7167 :         else

	jmp	SHORT $LN1@Render
$LN3@Render:

; 7168 :         if( s_CandList.bShowWindow )

	movzx	eax, BYTE PTR ?s_CandList@CDXUTIMEEditBox@@1UCCandList@1@A+2601
	test	eax, eax
	je	SHORT $LN1@Render

; 7169 :             // Candidate list window
; 7170 :             RenderCandidateReadingWindow( pd3dDevice, fElapsedTime, false );

	mov	esi, esp
	push	0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Render:
$LN11@Render:

; 7171 :     }
; 7172 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN17@Render:
	DD	1
	DD	$LN16@Render
$LN16@Render:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN15@Render
$LN15@Render:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
?Render@CDXUTIMEEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ENDP ; CDXUTIMEEditBox::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?EnableImeSystem@CDXUTIMEEditBox@@SAX_N@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 1
?EnableImeSystem@CDXUTIMEEditBox@@SAX_N@Z PROC		; CDXUTIMEEditBox::EnableImeSystem, COMDAT

; 5801 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5802 :     s_bEnableImeSystem = bEnable;

	mov	al, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR ?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA, al ; CDXUTIMEEditBox::s_bEnableImeSystem

; 5803 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?EnableImeSystem@CDXUTIMEEditBox@@SAX_N@Z ENDP		; CDXUTIMEEditBox::EnableImeSystem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?StaticMsgProc@CDXUTIMEEditBox@@SA_NIIJ@Z
_TEXT	SEGMENT
tv280 = -524						; size = 4
tv184 = -524						; size = 4
tv177 = -524						; size = 4
tv66 = -524						; size = 4
$T1 = -516						; size = 4
$T2 = -504						; size = 4
_uLang$3 = -300						; size = 4
_wszDesc$4 = -288					; size = 128
_e$5 = -152						; size = 4
_bBreak$6 = -137					; size = 1
_Locale$7 = -128					; size = 71
_i$8 = -48						; size = 4
_phKL$9 = -36						; size = 4
_cKL$10 = -24						; size = 4
_hImc$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?StaticMsgProc@CDXUTIMEEditBox@@SA_NIIJ@Z PROC		; CDXUTIMEEditBox::StaticMsgProc, COMDAT

; 6017 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 6018 :     HIMC hImc;
; 6019 : 
; 6020 :     if( !s_bEnableImeSystem )

	movzx	eax, BYTE PTR ?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA ; CDXUTIMEEditBox::s_bEnableImeSystem
	test	eax, eax
	jne	SHORT $LN34@StaticMsgP

; 6021 :         return false;

	xor	al, al
	jmp	$LN35@StaticMsgP
$LN34@StaticMsgP:

; 6022 : 
; 6023 : #if defined(DEBUG) | defined(_DEBUG)
; 6024 :     m_bIMEStaticMsgProcCalled = true;

	mov	BYTE PTR ?m_bIMEStaticMsgProcCalled@CDXUTIMEEditBox@@1_NA, 1 ; CDXUTIMEEditBox::m_bIMEStaticMsgProcCalled

; 6025 : #endif
; 6026 : 
; 6027 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 269		; 0000010dH
	ja	SHORT $LN39@StaticMsgP
	cmp	DWORD PTR tv66[ebp], 269		; 0000010dH
	je	$LN2@StaticMsgP
	cmp	DWORD PTR tv66[ebp], 28			; 0000001cH
	je	SHORT $LN31@StaticMsgP
	cmp	DWORD PTR tv66[ebp], 81			; 00000051H
	je	$LN7@StaticMsgP
	jmp	$LN32@StaticMsgP
$LN39@StaticMsgP:
	cmp	DWORD PTR tv66[ebp], 271		; 0000010fH
	je	$LN1@StaticMsgP
	cmp	DWORD PTR tv66[ebp], 641		; 00000281H
	je	$LN3@StaticMsgP
	jmp	$LN32@StaticMsgP
$LN31@StaticMsgP:

; 6028 :     {
; 6029 :         case WM_ACTIVATEAPP:
; 6030 :             if( wParam )

	cmp	DWORD PTR _wParam$[ebp], 0
	je	$LN30@StaticMsgP

; 6031 :             {
; 6032 :                 // Populate s_Locale with the list of keyboard layouts.
; 6033 :                 UINT cKL = GetKeyboardLayoutList( 0, NULL );

	mov	esi, esp
	push	0
	push	0
	call	DWORD PTR __imp__GetKeyboardLayoutList@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cKL$10[ebp], eax

; 6034 :                 s_Locale.RemoveAll();

	mov	ecx, OFFSET ?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A ; CDXUTIMEEditBox::s_Locale
	call	?RemoveAll@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEXXZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::RemoveAll

; 6035 :                 HKL *phKL = new HKL[cKL];

	xor	ecx, ecx
	mov	eax, DWORD PTR _cKL$10[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _phKL$9[ebp], eax

; 6036 :                 if( phKL )

	cmp	DWORD PTR _phKL$9[ebp], 0
	je	$LN30@StaticMsgP

; 6037 :                 {
; 6038 :                     GetKeyboardLayoutList( cKL, phKL );

	mov	esi, esp
	mov	eax, DWORD PTR _phKL$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _cKL$10[ebp]
	push	ecx
	call	DWORD PTR __imp__GetKeyboardLayoutList@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6039 :                     for( UINT i = 0; i < cKL; ++i )

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN28@StaticMsgP
$LN27@StaticMsgP:
	mov	eax, DWORD PTR _i$8[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8[ebp], eax
$LN28@StaticMsgP:
	mov	eax, DWORD PTR _i$8[ebp]
	cmp	eax, DWORD PTR _cKL$10[ebp]
	jae	$LN26@StaticMsgP

; 6040 :                     {
; 6041 :                         CInputLocale Locale;
; 6042 : 
; 6043 :                         // Filter out East Asian languages that are not IME.
; 6044 :                         if( ( PRIMARYLANGID( LOWORD( phKL[i] ) ) == LANG_CHINESE ||
; 6045 :                               PRIMARYLANGID( LOWORD( phKL[i] ) ) == LANG_JAPANESE ||
; 6046 :                               PRIMARYLANGID( LOWORD( phKL[i] ) ) == LANG_KOREAN ) &&
; 6047 :                               !_ImmIsIME( phKL[i] ) )

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _phKL$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 1023				; 000003ffH
	cmp	eax, 4
	je	SHORT $LN24@StaticMsgP
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _phKL$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 1023				; 000003ffH
	cmp	eax, 17					; 00000011H
	je	SHORT $LN24@StaticMsgP
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _phKL$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 1023				; 000003ffH
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN25@StaticMsgP
$LN24@StaticMsgP:
	mov	esi, esp
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _phKL$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR ?_ImmIsIME@CDXUTIMEEditBox@@1P6GHPAUHKL__@@@ZA ; CDXUTIMEEditBox::_ImmIsIME
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN25@StaticMsgP

; 6048 :                               continue;

	jmp	$LN27@StaticMsgP
$LN25@StaticMsgP:

; 6049 : 
; 6050 :                         // If this language is already in the list, don't add it again.
; 6051 :                         bool bBreak = false;

	mov	BYTE PTR _bBreak$6[ebp], 0

; 6052 :                         for( int e = 0; e < s_Locale.GetSize(); ++e )

	mov	DWORD PTR _e$5[ebp], 0
	jmp	SHORT $LN23@StaticMsgP
$LN22@StaticMsgP:
	mov	eax, DWORD PTR _e$5[ebp]
	add	eax, 1
	mov	DWORD PTR _e$5[ebp], eax
$LN23@StaticMsgP:
	mov	ecx, OFFSET ?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A ; CDXUTIMEEditBox::s_Locale
	call	?GetSize@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QBEHXZ ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::GetSize
	cmp	DWORD PTR _e$5[ebp], eax
	jge	SHORT $LN21@StaticMsgP

; 6053 :                             if( LOWORD( s_Locale.GetAt( e ).m_hKL ) ==
; 6054 :                                 LOWORD( phKL[i] ) )

	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	mov	ecx, OFFSET ?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A ; CDXUTIMEEditBox::s_Locale
	call	?GetAt@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEAAUCInputLocale@CDXUTIMEEditBox@@H@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::GetAt
	mov	ecx, DWORD PTR [eax]
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _phKL$9[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	edx, ecx
	jne	SHORT $LN20@StaticMsgP

; 6055 :                             {
; 6056 :                                 bBreak = true;

	mov	BYTE PTR _bBreak$6[ebp], 1

; 6057 :                                 break;

	jmp	SHORT $LN21@StaticMsgP
$LN20@StaticMsgP:

; 6058 :                             }

	jmp	SHORT $LN22@StaticMsgP
$LN21@StaticMsgP:

; 6059 :                         if( bBreak )

	movzx	eax, BYTE PTR _bBreak$6[ebp]
	test	eax, eax
	je	SHORT $LN19@StaticMsgP

; 6060 :                             break;

	jmp	$LN26@StaticMsgP
$LN19@StaticMsgP:

; 6061 : 
; 6062 :                         Locale.m_hKL = phKL[i];

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _phKL$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _Locale$7[ebp], edx

; 6063 :                         TCHAR wszDesc[128] = "";

	mov	al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
	mov	BYTE PTR _wszDesc$4[ebp], al
	push	127					; 0000007fH
	push	0
	lea	eax, DWORD PTR _wszDesc$4[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 6064 :                         switch( PRIMARYLANGID( LOWORD( phKL[i] ) ) )

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _phKL$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR tv177[ebp], eax
	cmp	DWORD PTR tv177[ebp], 4
	je	SHORT $LN16@StaticMsgP
	cmp	DWORD PTR tv177[ebp], 17		; 00000011H
	je	$LN9@StaticMsgP
	cmp	DWORD PTR tv177[ebp], 18		; 00000012H
	je	$LN10@StaticMsgP
	jmp	$LN8@StaticMsgP
$LN16@StaticMsgP:

; 6065 :                         {
; 6066 :                             // Simplified Chinese
; 6067 :                             case LANG_CHINESE:
; 6068 :                                 switch( SUBLANGID( LOWORD( phKL[i] ) ) )

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _phKL$9[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	sar	eax, 10					; 0000000aH
	mov	DWORD PTR tv184[ebp], eax
	cmp	DWORD PTR tv184[ebp], 1
	je	SHORT $LN12@StaticMsgP
	cmp	DWORD PTR tv184[ebp], 2
	je	SHORT $LN13@StaticMsgP
	jmp	SHORT $LN11@StaticMsgP
$LN13@StaticMsgP:

; 6069 :                                 {
; 6070 :                                     case SUBLANG_CHINESE_SIMPLIFIED:
; 6071 :                                         StringCchCopy( Locale.m_wszLangAbb, 3, s_aszIndicator[INDICATOR_CHS] );

	mov	eax, 3
	shl	eax, 0
	add	eax, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	push	eax
	push	3
	lea	ecx, DWORD PTR _Locale$7[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 6072 :                                         break;

	jmp	$LN14@StaticMsgP
$LN12@StaticMsgP:

; 6073 :                                     case SUBLANG_CHINESE_TRADITIONAL:
; 6074 :                                         StringCchCopy( Locale.m_wszLangAbb, 3, s_aszIndicator[INDICATOR_CHT] );

	mov	eax, 3
	shl	eax, 1
	add	eax, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	push	eax
	push	3
	lea	ecx, DWORD PTR _Locale$7[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 6075 :                                         break;

	jmp	SHORT $LN14@StaticMsgP
$LN11@StaticMsgP:

; 6076 :                                     default:    // unsupported sub-language
; 6077 :                                         GetLocaleInfoA( MAKELCID( LOWORD( phKL[i] ), SORT_DEFAULT ), LOCALE_SABBREVLANGNAME, wszDesc, 128 );

	mov	esi, esp
	push	128					; 00000080H
	lea	eax, DWORD PTR _wszDesc$4[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _phKL$9[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	push	ecx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6078 :                                         Locale.m_wszLangAbb[0] = wszDesc[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	cl, BYTE PTR _wszDesc$4[ebp+ecx]
	mov	BYTE PTR _Locale$7[ebp+eax+4], cl

; 6079 :                                         Locale.m_wszLangAbb[1] = tolower( wszDesc[1] );

	mov	eax, 1
	shl	eax, 0
	movsx	ecx, BYTE PTR _wszDesc$4[ebp+eax]
	push	ecx
	call	_tolower
	add	esp, 4
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _Locale$7[ebp+edx+4], al

; 6080 :                                         Locale.m_wszLangAbb[2] = '\0';

	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _Locale$7[ebp+eax+4], 0
$LN14@StaticMsgP:

; 6081 :                                         break;
; 6082 :                                 }
; 6083 :                                 break;

	jmp	$LN17@StaticMsgP
$LN10@StaticMsgP:

; 6084 :                             // Korean
; 6085 :                             case LANG_KOREAN:
; 6086 :                                 StringCchCopy( Locale.m_wszLangAbb, 3, s_aszIndicator[INDICATOR_KOREAN] );

	mov	eax, 3
	imul	ecx, eax, 3
	add	ecx, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	push	ecx
	push	3
	lea	edx, DWORD PTR _Locale$7[ebp+4]
	push	edx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 6087 :                                 break;

	jmp	$LN17@StaticMsgP
$LN9@StaticMsgP:

; 6088 :                             // Japanese
; 6089 :                             case LANG_JAPANESE:
; 6090 :                                 StringCchCopy( Locale.m_wszLangAbb, 3, s_aszIndicator[INDICATOR_JAPANESE] );

	mov	eax, 3
	shl	eax, 2
	add	eax, OFFSET ?s_aszIndicator@CDXUTIMEEditBox@@1PAY02DA ; CDXUTIMEEditBox::s_aszIndicator
	push	eax
	push	3
	lea	ecx, DWORD PTR _Locale$7[ebp+4]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 6091 :                                 break;         

	jmp	SHORT $LN17@StaticMsgP
$LN8@StaticMsgP:

; 6092 :                             default:
; 6093 :                                 // A non-IME language.  Obtain the language abbreviation
; 6094 :                                 // and store it for rendering the indicator later.
; 6095 :                                 GetLocaleInfoA( MAKELCID( LOWORD( phKL[i] ), SORT_DEFAULT ), LOCALE_SABBREVLANGNAME, wszDesc, 128 );

	mov	esi, esp
	push	128					; 00000080H
	lea	eax, DWORD PTR _wszDesc$4[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _phKL$9[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	push	ecx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6096 :                                 Locale.m_wszLangAbb[0] = wszDesc[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	cl, BYTE PTR _wszDesc$4[ebp+ecx]
	mov	BYTE PTR _Locale$7[ebp+eax+4], cl

; 6097 :                                 Locale.m_wszLangAbb[1] = tolower( wszDesc[1] );

	mov	eax, 1
	shl	eax, 0
	movsx	ecx, BYTE PTR _wszDesc$4[ebp+eax]
	push	ecx
	call	_tolower
	add	esp, 4
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _Locale$7[ebp+edx+4], al

; 6098 :                                 Locale.m_wszLangAbb[2] = '\0';

	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _Locale$7[ebp+eax+4], 0
$LN17@StaticMsgP:

; 6099 :                                 break;
; 6100 :                         }
; 6101 : 
; 6102 :                         GetLocaleInfoA( MAKELCID( LOWORD( phKL[i] ), SORT_DEFAULT ), LOCALE_SLANGUAGE, wszDesc, 128 );

	mov	esi, esp
	push	128					; 00000080H
	lea	eax, DWORD PTR _wszDesc$4[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _i$8[ebp]
	mov	edx, DWORD PTR _phKL$9[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	push	ecx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6103 :                         StringCchCopy( Locale.m_wszLang, 64, wszDesc );

	lea	eax, DWORD PTR _wszDesc$4[ebp]
	push	eax
	push	64					; 00000040H
	lea	ecx, DWORD PTR _Locale$7[ebp+7]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 6104 : 
; 6105 :                         s_Locale.Add( Locale );

	lea	eax, DWORD PTR _Locale$7[ebp]
	push	eax
	mov	ecx, OFFSET ?s_Locale@CDXUTIMEEditBox@@1V?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@A ; CDXUTIMEEditBox::s_Locale
	call	?Add@?$CGrowableArray@UCInputLocale@CDXUTIMEEditBox@@@@QAEJABUCInputLocale@CDXUTIMEEditBox@@@Z ; CGrowableArray<CDXUTIMEEditBox::CInputLocale>::Add

; 6106 :                     }

	jmp	$LN27@StaticMsgP
$LN26@StaticMsgP:

; 6107 :                     delete[] phKL;

	mov	eax, DWORD PTR _phKL$9[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN30@StaticMsgP:

; 6108 :                 }
; 6109 :             }
; 6110 :             break;

	jmp	$LN32@StaticMsgP
$LN7@StaticMsgP:

; 6111 : 
; 6112 :         case WM_INPUTLANGCHANGE:
; 6113 :             DXUTTRACE( "WM_INPUTLANGCHANGE\n" );

	push	OFFSET ??_C@_0BE@GLEPKDNP@WM_INPUTLANGCHANGE?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6114 :             {
; 6115 :                 UINT uLang = GetPrimaryLanguage();

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	mov	DWORD PTR _uLang$3[ebp], eax

; 6116 :                 CheckToggleState();

	call	?CheckToggleState@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::CheckToggleState

; 6117 :                 if ( uLang != GetPrimaryLanguage() )

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	cmp	DWORD PTR _uLang$3[ebp], eax
	je	SHORT $LN6@StaticMsgP

; 6118 :                 {
; 6119 :                     // Korean IME always inserts on keystroke.  Other IMEs do not.
; 6120 :                     s_bInsertOnType = ( GetPrimaryLanguage() == LANG_KOREAN );

	call	?GetPrimaryLanguage@CDXUTIMEEditBox@@KAGXZ ; CDXUTIMEEditBox::GetPrimaryLanguage
	movzx	eax, ax
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN37@StaticMsgP
	mov	DWORD PTR tv280[ebp], 1
	jmp	SHORT $LN38@StaticMsgP
$LN37@StaticMsgP:
	mov	DWORD PTR tv280[ebp], 0
$LN38@StaticMsgP:
	mov	cl, BYTE PTR tv280[ebp]
	mov	BYTE PTR ?s_bInsertOnType@CDXUTIMEEditBox@@1_NA, cl ; CDXUTIMEEditBox::s_bInsertOnType
$LN6@StaticMsgP:

; 6121 :                 }
; 6122 : 
; 6123 :                 // IME changed.  Setup the new IME.
; 6124 :                 SetupImeApi();

	call	?SetupImeApi@CDXUTIMEEditBox@@KAXXZ	; CDXUTIMEEditBox::SetupImeApi

; 6125 :                 if( _ShowReadingWindow )

	cmp	DWORD PTR ?_ShowReadingWindow@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA, 0 ; CDXUTIMEEditBox::_ShowReadingWindow
	je	SHORT $LN5@StaticMsgP

; 6126 :                 {
; 6127 :                     if ( NULL != ( hImc = _ImmGetContext( DXUTGetHWND() ) ) )

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hImc$[ebp], eax
	cmp	DWORD PTR _hImc$[ebp], 0
	je	SHORT $LN5@StaticMsgP

; 6128 :                     {
; 6129 :                         _ShowReadingWindow( hImc, false );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	DWORD PTR ?_ShowReadingWindow@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA ; CDXUTIMEEditBox::_ShowReadingWindow
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6130 :                         _ImmReleaseContext( DXUTGetHWND(), hImc );

	mov	esi, esp
	mov	eax, DWORD PTR _hImc$[ebp]
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@StaticMsgP:

; 6131 :                     }
; 6132 :                 }
; 6133 :             }
; 6134 :             return true;

	mov	al, 1
	jmp	SHORT $LN35@StaticMsgP
$LN3@StaticMsgP:

; 6135 : 
; 6136 :         case WM_IME_SETCONTEXT:
; 6137 :             DXUTTRACE( "WM_IME_SETCONTEXT\n" );

	push	OFFSET ??_C@_0BD@BNFMLOBE@WM_IME_SETCONTEXT?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6138 :             //
; 6139 :             // We don't want anything to display, so we have to clear this
; 6140 :             //
; 6141 :             lParam = 0;

	mov	DWORD PTR _lParam$[ebp], 0

; 6142 :             return false;

	xor	al, al
	jmp	SHORT $LN35@StaticMsgP
$LN2@StaticMsgP:

; 6143 : 
; 6144 :         // Handle WM_IME_STARTCOMPOSITION here since
; 6145 :         // we do not want the default IME handler to see
; 6146 :         // this when our fullscreen app is running.
; 6147 :         case WM_IME_STARTCOMPOSITION:
; 6148 :             DXUTTRACE( "WM_IME_STARTCOMPOSITION\n" );

	push	OFFSET ??_C@_0BJ@NNLCHIHF@WM_IME_STARTCOMPOSITION?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6149 :             ResetCompositionString();

	call	?ResetCompositionString@CDXUTIMEEditBox@@KAXXZ ; CDXUTIMEEditBox::ResetCompositionString

; 6150 :             // Since the composition string has its own caret, we don't render
; 6151 :             // the edit control's own caret to avoid double carets on screen.
; 6152 :             s_bHideCaret = true;

	mov	BYTE PTR ?s_bHideCaret@CDXUTEditBox@@1_NA, 1 ; CDXUTEditBox::s_bHideCaret

; 6153 :             return true;

	mov	al, 1
	jmp	SHORT $LN35@StaticMsgP
$LN1@StaticMsgP:

; 6154 : 
; 6155 :         case WM_IME_COMPOSITION:
; 6156 :             DXUTTRACE( "WM_IME_COMPOSITION\n" );

	push	OFFSET ??_C@_0BE@CDAMKNCN@WM_IME_COMPOSITION?6?$AA@
	call	?DXUTOutputDebugStringA@@YAXPBDZZ	; DXUTOutputDebugStringA
	add	esp, 4

; 6157 :             return true;

	mov	al, 1
	jmp	SHORT $LN35@StaticMsgP
$LN32@StaticMsgP:

; 6158 :     }
; 6159 : 
; 6160 :     return false;

	xor	al, al
$LN35@StaticMsgP:

; 6161 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN43@StaticMsgP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN43@StaticMsgP:
	DD	2
	DD	$LN42@StaticMsgP
$LN42@StaticMsgP:
	DD	-128					; ffffff80H
	DD	71					; 00000047H
	DD	$LN40@StaticMsgP
	DD	-288					; fffffee0H
	DD	128					; 00000080H
	DD	$LN41@StaticMsgP
$LN41@StaticMsgP:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
$LN40@StaticMsgP:
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?StaticMsgProc@CDXUTIMEEditBox@@SA_NIIJ@Z ENDP		; CDXUTIMEEditBox::StaticMsgProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?StaticOnCreateDevice@CDXUTIMEEditBox@@SAJXZ
_TEXT	SEGMENT
?StaticOnCreateDevice@CDXUTIMEEditBox@@SAJXZ PROC	; CDXUTIMEEditBox::StaticOnCreateDevice, COMDAT

; 5574 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5575 :     // Save the default input context
; 5576 :     s_hImcDef = _ImmGetContext( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA ; CDXUTIMEEditBox::_ImmGetContext
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_hImcDef@CDXUTIMEEditBox@@1PAUHIMC__@@A, eax ; CDXUTIMEEditBox::s_hImcDef

; 5577 :     _ImmReleaseContext( DXUTGetHWND(), s_hImcDef );

	mov	esi, esp
	mov	eax, DWORD PTR ?s_hImcDef@CDXUTIMEEditBox@@1PAUHIMC__@@A ; CDXUTIMEEditBox::s_hImcDef
	push	eax
	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA ; CDXUTIMEEditBox::_ImmReleaseContext
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5578 : 
; 5579 :     return S_OK;

	xor	eax, eax

; 5580 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StaticOnCreateDevice@CDXUTIMEEditBox@@SAJXZ ENDP	; CDXUTIMEEditBox::StaticOnCreateDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Uninitialize@CDXUTIMEEditBox@@SAXXZ
_TEXT	SEGMENT
?Uninitialize@CDXUTIMEEditBox@@SAXXZ PROC		; CDXUTIMEEditBox::Uninitialize, COMDAT

; 7638 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7639 :     if( s_hDllImm32 )

	cmp	DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllImm32
	je	$LN3@Uninitiali

; 7640 :     {
; 7641 :         PLACEHOLDERPROC( ImmLockIMC );

	mov	DWORD PTR ?_ImmLockIMC@CDXUTIMEEditBox@@1P6GPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@ZA, OFFSET ?Dummy_ImmLockIMC@CDXUTIMEEditBox@@KGPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@Z ; CDXUTIMEEditBox::_ImmLockIMC, CDXUTIMEEditBox::Dummy_ImmLockIMC

; 7642 :         PLACEHOLDERPROC( ImmUnlockIMC );

	mov	DWORD PTR ?_ImmUnlockIMC@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA, OFFSET ?Dummy_ImmUnlockIMC@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z ; CDXUTIMEEditBox::_ImmUnlockIMC, CDXUTIMEEditBox::Dummy_ImmUnlockIMC

; 7643 :         PLACEHOLDERPROC( ImmLockIMCC );

	mov	DWORD PTR ?_ImmLockIMCC@CDXUTIMEEditBox@@1P6GPAXPAUHIMCC__@@@ZA, OFFSET ?Dummy_ImmLockIMCC@CDXUTIMEEditBox@@KGPAXPAUHIMCC__@@@Z ; CDXUTIMEEditBox::_ImmLockIMCC, CDXUTIMEEditBox::Dummy_ImmLockIMCC

; 7644 :         PLACEHOLDERPROC( ImmUnlockIMCC );

	mov	DWORD PTR ?_ImmUnlockIMCC@CDXUTIMEEditBox@@1P6GHPAUHIMCC__@@@ZA, OFFSET ?Dummy_ImmUnlockIMCC@CDXUTIMEEditBox@@KGHPAUHIMCC__@@@Z ; CDXUTIMEEditBox::_ImmUnlockIMCC, CDXUTIMEEditBox::Dummy_ImmUnlockIMCC

; 7645 :         PLACEHOLDERPROC( ImmDisableTextFrameService );

	mov	DWORD PTR ?_ImmDisableTextFrameService@CDXUTIMEEditBox@@1P6GHK@ZA, OFFSET ?Dummy_ImmDisableTextFrameService@CDXUTIMEEditBox@@KGHK@Z ; CDXUTIMEEditBox::_ImmDisableTextFrameService, CDXUTIMEEditBox::Dummy_ImmDisableTextFrameService

; 7646 :         PLACEHOLDERPROC( ImmGetCompositionStringW );

	mov	DWORD PTR ?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA, OFFSET ?Dummy_ImmGetCompositionStringW@CDXUTIMEEditBox@@KGJPAUHIMC__@@KPAXK@Z ; CDXUTIMEEditBox::_ImmGetCompositionStringW, CDXUTIMEEditBox::Dummy_ImmGetCompositionStringW

; 7647 :         PLACEHOLDERPROC( ImmGetCandidateListW );

	mov	DWORD PTR ?_ImmGetCandidateListW@CDXUTIMEEditBox@@1P6GKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@ZA, OFFSET ?Dummy_ImmGetCandidateListW@CDXUTIMEEditBox@@KGKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@Z ; CDXUTIMEEditBox::_ImmGetCandidateListW, CDXUTIMEEditBox::Dummy_ImmGetCandidateListW

; 7648 :         PLACEHOLDERPROC( ImmGetContext );

	mov	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA, OFFSET ?Dummy_ImmGetContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@@Z ; CDXUTIMEEditBox::_ImmGetContext, CDXUTIMEEditBox::Dummy_ImmGetContext

; 7649 :         PLACEHOLDERPROC( ImmReleaseContext );

	mov	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA, OFFSET ?Dummy_ImmReleaseContext@CDXUTIMEEditBox@@KGHPAUHWND__@@PAUHIMC__@@@Z ; CDXUTIMEEditBox::_ImmReleaseContext, CDXUTIMEEditBox::Dummy_ImmReleaseContext

; 7650 :         PLACEHOLDERPROC( ImmAssociateContext );

	mov	DWORD PTR ?_ImmAssociateContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@PAU2@@ZA, OFFSET ?Dummy_ImmAssociateContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@PAU2@@Z ; CDXUTIMEEditBox::_ImmAssociateContext, CDXUTIMEEditBox::Dummy_ImmAssociateContext

; 7651 :         PLACEHOLDERPROC( ImmGetOpenStatus );

	mov	DWORD PTR ?_ImmGetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA, OFFSET ?Dummy_ImmGetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z ; CDXUTIMEEditBox::_ImmGetOpenStatus, CDXUTIMEEditBox::Dummy_ImmGetOpenStatus

; 7652 :         PLACEHOLDERPROC( ImmSetOpenStatus );

	mov	DWORD PTR ?_ImmSetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA, OFFSET ?Dummy_ImmSetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z ; CDXUTIMEEditBox::_ImmSetOpenStatus, CDXUTIMEEditBox::Dummy_ImmSetOpenStatus

; 7653 :         PLACEHOLDERPROC( ImmGetConversionStatus );

	mov	DWORD PTR ?_ImmGetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@PAK1@ZA, OFFSET ?Dummy_ImmGetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@PAK1@Z ; CDXUTIMEEditBox::_ImmGetConversionStatus, CDXUTIMEEditBox::Dummy_ImmGetConversionStatus

; 7654 :         PLACEHOLDERPROC( ImmGetDefaultIMEWnd );

	mov	DWORD PTR ?_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@1P6GPAUHWND__@@PAU2@@ZA, OFFSET ?Dummy_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@KGPAUHWND__@@PAU2@@Z ; CDXUTIMEEditBox::_ImmGetDefaultIMEWnd, CDXUTIMEEditBox::Dummy_ImmGetDefaultIMEWnd

; 7655 :         PLACEHOLDERPROC( ImmGetIMEFileNameA );

	mov	DWORD PTR ?_ImmGetIMEFileNameA@CDXUTIMEEditBox@@1P6GIPAUHKL__@@PADI@ZA, OFFSET ?Dummy_ImmGetIMEFileNameA@CDXUTIMEEditBox@@KGIPAUHKL__@@PADI@Z ; CDXUTIMEEditBox::_ImmGetIMEFileNameA, CDXUTIMEEditBox::Dummy_ImmGetIMEFileNameA

; 7656 :         PLACEHOLDERPROC( ImmGetVirtualKey );

	mov	DWORD PTR ?_ImmGetVirtualKey@CDXUTIMEEditBox@@1P6GIPAUHWND__@@@ZA, OFFSET ?Dummy_ImmGetVirtualKey@CDXUTIMEEditBox@@KGIPAUHWND__@@@Z ; CDXUTIMEEditBox::_ImmGetVirtualKey, CDXUTIMEEditBox::Dummy_ImmGetVirtualKey

; 7657 :         PLACEHOLDERPROC( ImmNotifyIME );

	mov	DWORD PTR ?_ImmNotifyIME@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KKK@ZA, OFFSET ?Dummy_ImmNotifyIME@CDXUTIMEEditBox@@KGHPAUHIMC__@@KKK@Z ; CDXUTIMEEditBox::_ImmNotifyIME, CDXUTIMEEditBox::Dummy_ImmNotifyIME

; 7658 :         PLACEHOLDERPROC( ImmSetConversionStatus );

	mov	DWORD PTR ?_ImmSetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KK@ZA, OFFSET ?Dummy_ImmSetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@KK@Z ; CDXUTIMEEditBox::_ImmSetConversionStatus, CDXUTIMEEditBox::Dummy_ImmSetConversionStatus

; 7659 :         PLACEHOLDERPROC( ImmSimulateHotKey );

	mov	DWORD PTR ?_ImmSimulateHotKey@CDXUTIMEEditBox@@1P6GHPAUHWND__@@K@ZA, OFFSET ?Dummy_ImmSimulateHotKey@CDXUTIMEEditBox@@KGHPAUHWND__@@K@Z ; CDXUTIMEEditBox::_ImmSimulateHotKey, CDXUTIMEEditBox::Dummy_ImmSimulateHotKey

; 7660 :         PLACEHOLDERPROC( ImmIsIME );

	mov	DWORD PTR ?_ImmIsIME@CDXUTIMEEditBox@@1P6GHPAUHKL__@@@ZA, OFFSET ?Dummy_ImmIsIME@CDXUTIMEEditBox@@KGHPAUHKL__@@@Z ; CDXUTIMEEditBox::_ImmIsIME, CDXUTIMEEditBox::Dummy_ImmIsIME

; 7661 : 
; 7662 :         FreeLibrary( s_hDllImm32 );

	mov	esi, esp
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7663 :         s_hDllImm32 = NULL;

	mov	DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllImm32
$LN3@Uninitiali:

; 7664 :     }
; 7665 :     if( s_hDllIme )

	cmp	DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllIme
	je	SHORT $LN2@Uninitiali

; 7666 :     {
; 7667 :         PLACEHOLDERPROC( GetReadingString );

	mov	DWORD PTR ?_GetReadingString@CDXUTIMEEditBox@@1P6GIPAUHIMC__@@IPADPAH2PAI@ZA, OFFSET ?Dummy_GetReadingString@CDXUTIMEEditBox@@KGIPAUHIMC__@@IPADPAH2PAI@Z ; CDXUTIMEEditBox::_GetReadingString, CDXUTIMEEditBox::Dummy_GetReadingString

; 7668 :         PLACEHOLDERPROC( ShowReadingWindow );

	mov	DWORD PTR ?_ShowReadingWindow@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA, OFFSET ?Dummy_ShowReadingWindow@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z ; CDXUTIMEEditBox::_ShowReadingWindow, CDXUTIMEEditBox::Dummy_ShowReadingWindow

; 7669 : 
; 7670 :         FreeLibrary( s_hDllIme );

	mov	esi, esp
	mov	eax, DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllIme
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7671 :         s_hDllIme = NULL;

	mov	DWORD PTR ?s_hDllIme@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllIme
$LN2@Uninitiali:

; 7672 :     }
; 7673 :     if( s_hDllVer )

	cmp	DWORD PTR ?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllVer
	je	SHORT $LN4@Uninitiali

; 7674 :     {
; 7675 :         PLACEHOLDERPROC( VerQueryValueA );

	mov	DWORD PTR ?_VerQueryValueA@CDXUTIMEEditBox@@1P6GHQAXPADPAPAXPAI@ZA, OFFSET ?Dummy_VerQueryValueA@CDXUTIMEEditBox@@KGHQAXPADPAPAXPAI@Z ; CDXUTIMEEditBox::_VerQueryValueA, CDXUTIMEEditBox::Dummy_VerQueryValueA

; 7676 :         PLACEHOLDERPROC( GetFileVersionInfoA );

	mov	DWORD PTR ?_GetFileVersionInfoA@CDXUTIMEEditBox@@1P6GHPADKKPAX@ZA, OFFSET ?Dummy_GetFileVersionInfoA@CDXUTIMEEditBox@@KGHPADKKPAX@Z ; CDXUTIMEEditBox::_GetFileVersionInfoA, CDXUTIMEEditBox::Dummy_GetFileVersionInfoA

; 7677 :         PLACEHOLDERPROC( GetFileVersionInfoSizeA );

	mov	DWORD PTR ?_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@1P6GKPADPAK@ZA, OFFSET ?Dummy_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@KGKPADPAK@Z ; CDXUTIMEEditBox::_GetFileVersionInfoSizeA, CDXUTIMEEditBox::Dummy_GetFileVersionInfoSizeA

; 7678 : 
; 7679 :         FreeLibrary( s_hDllVer );

	mov	esi, esp
	mov	eax, DWORD PTR ?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllVer
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7680 :         s_hDllVer = NULL;

	mov	DWORD PTR ?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllVer
$LN4@Uninitiali:

; 7681 :     }
; 7682 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Uninitialize@CDXUTIMEEditBox@@SAXXZ ENDP		; CDXUTIMEEditBox::Uninitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Initialize@CDXUTIMEEditBox@@SAXXZ
_TEXT	SEGMENT
_wszPath$ = -284					; size = 261
_Temp$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Initialize@CDXUTIMEEditBox@@SAXXZ PROC			; CDXUTIMEEditBox::Initialize, COMDAT

; 7586 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 480				; 000001e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-480]
	mov	ecx, 120				; 00000078H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 7587 :     if( s_hDllImm32 ) // Only need to do once

	cmp	DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllImm32
	je	SHORT $LN28@Initialize

; 7588 :         return;

	jmp	$LN29@Initialize
$LN28@Initialize:

; 7589 : 
; 7590 :     FARPROC Temp;
; 7591 : 
; 7592 :     s_CompString.SetBufferSize( MAX_COMPSTRING_SIZE );

	push	256					; 00000100H
	mov	ecx, OFFSET ?s_CompString@CDXUTIMEEditBox@@1VCUniBuffer@@A ; CDXUTIMEEditBox::s_CompString
	call	?SetBufferSize@CUniBuffer@@QAE_NH@Z	; CUniBuffer::SetBufferSize

; 7593 : 
; 7594 :     TCHAR wszPath[MAX_PATH+1];
; 7595 :     if( !::GetSystemDirectory( wszPath, MAX_PATH+1 ) )

	mov	esi, esp
	push	261					; 00000105H
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN27@Initialize

; 7596 :         return;

	jmp	$LN29@Initialize
$LN27@Initialize:

; 7597 :     StringCchCat( wszPath, MAX_PATH, IMM32_DLLNAME );

	push	OFFSET ??_C@_0L@LPOFADGE@?2imm32?4dll?$AA@
	push	260					; 00000104H
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 7598 :     s_hDllImm32 = LoadLibrary( wszPath );

	mov	esi, esp
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadLibraryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, eax ; CDXUTIMEEditBox::s_hDllImm32

; 7599 :     if( s_hDllImm32 )

	cmp	DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllImm32
	je	$LN26@Initialize

; 7600 :     {
; 7601 :         GETPROCADDRESS( s_hDllImm32, ImmLockIMC, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0L@JGAMEFKO@ImmLockIMC?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN25@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmLockIMC@CDXUTIMEEditBox@@1P6GPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@ZA, eax ; CDXUTIMEEditBox::_ImmLockIMC
$LN25@Initialize:

; 7602 :         GETPROCADDRESS( s_hDllImm32, ImmUnlockIMC, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0N@PDIACEGP@ImmUnlockIMC?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN24@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmUnlockIMC@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA, eax ; CDXUTIMEEditBox::_ImmUnlockIMC
$LN24@Initialize:

; 7603 :         GETPROCADDRESS( s_hDllImm32, ImmLockIMCC, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0M@OKKMJOGM@ImmLockIMCC?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN23@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmLockIMCC@CDXUTIMEEditBox@@1P6GPAXPAUHIMCC__@@@ZA, eax ; CDXUTIMEEditBox::_ImmLockIMCC
$LN23@Initialize:

; 7604 :         GETPROCADDRESS( s_hDllImm32, ImmUnlockIMCC, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0O@GKKOACL@ImmUnlockIMCC?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN22@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmUnlockIMCC@CDXUTIMEEditBox@@1P6GHPAUHIMCC__@@@ZA, eax ; CDXUTIMEEditBox::_ImmUnlockIMCC
$LN22@Initialize:

; 7605 :         GETPROCADDRESS( s_hDllImm32, ImmDisableTextFrameService, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BL@MBEANDFB@ImmDisableTextFrameService?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN21@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmDisableTextFrameService@CDXUTIMEEditBox@@1P6GHK@ZA, eax ; CDXUTIMEEditBox::_ImmDisableTextFrameService
$LN21@Initialize:

; 7606 :         GETPROCADDRESS( s_hDllImm32, ImmGetCompositionStringW, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BJ@BIPOEMOA@ImmGetCompositionStringW?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN20@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmGetCompositionStringW@CDXUTIMEEditBox@@1P6GJPAUHIMC__@@KPAXK@ZA, eax ; CDXUTIMEEditBox::_ImmGetCompositionStringW
$LN20@Initialize:

; 7607 :         GETPROCADDRESS( s_hDllImm32, ImmGetCandidateListW, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BF@INEDHPDK@ImmGetCandidateListW?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN19@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmGetCandidateListW@CDXUTIMEEditBox@@1P6GKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@ZA, eax ; CDXUTIMEEditBox::_ImmGetCandidateListW
$LN19@Initialize:

; 7608 :         GETPROCADDRESS( s_hDllImm32, ImmGetContext, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0O@KCHCFLMC@ImmGetContext?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN18@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmGetContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@@ZA, eax ; CDXUTIMEEditBox::_ImmGetContext
$LN18@Initialize:

; 7609 :         GETPROCADDRESS( s_hDllImm32, ImmReleaseContext, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BC@OCDKEPCD@ImmReleaseContext?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN17@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmReleaseContext@CDXUTIMEEditBox@@1P6GHPAUHWND__@@PAUHIMC__@@@ZA, eax ; CDXUTIMEEditBox::_ImmReleaseContext
$LN17@Initialize:

; 7610 :         GETPROCADDRESS( s_hDllImm32, ImmAssociateContext, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BE@BDEIBNIK@ImmAssociateContext?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN16@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmAssociateContext@CDXUTIMEEditBox@@1P6GPAUHIMC__@@PAUHWND__@@PAU2@@ZA, eax ; CDXUTIMEEditBox::_ImmAssociateContext
$LN16@Initialize:

; 7611 :         GETPROCADDRESS( s_hDllImm32, ImmGetOpenStatus, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BB@GAPKNCDL@ImmGetOpenStatus?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN15@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmGetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@@ZA, eax ; CDXUTIMEEditBox::_ImmGetOpenStatus
$LN15@Initialize:

; 7612 :         GETPROCADDRESS( s_hDllImm32, ImmSetOpenStatus, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BB@BPOEGBEM@ImmSetOpenStatus?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN14@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmSetOpenStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@H@ZA, eax ; CDXUTIMEEditBox::_ImmSetOpenStatus
$LN14@Initialize:

; 7613 :         GETPROCADDRESS( s_hDllImm32, ImmGetConversionStatus, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BH@GMNMAKPF@ImmGetConversionStatus?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN13@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmGetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@PAK1@ZA, eax ; CDXUTIMEEditBox::_ImmGetConversionStatus
$LN13@Initialize:

; 7614 :         GETPROCADDRESS( s_hDllImm32, ImmGetDefaultIMEWnd, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BE@LPNAGBML@ImmGetDefaultIMEWnd?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN12@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@1P6GPAUHWND__@@PAU2@@ZA, eax ; CDXUTIMEEditBox::_ImmGetDefaultIMEWnd
$LN12@Initialize:

; 7615 :         GETPROCADDRESS( s_hDllImm32, ImmGetIMEFileNameA, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BD@GDCNBOJF@ImmGetIMEFileNameA?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN11@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmGetIMEFileNameA@CDXUTIMEEditBox@@1P6GIPAUHKL__@@PADI@ZA, eax ; CDXUTIMEEditBox::_ImmGetIMEFileNameA
$LN11@Initialize:

; 7616 :         GETPROCADDRESS( s_hDllImm32, ImmGetVirtualKey, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BB@CEHHIDO@ImmGetVirtualKey?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN10@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmGetVirtualKey@CDXUTIMEEditBox@@1P6GIPAUHWND__@@@ZA, eax ; CDXUTIMEEditBox::_ImmGetVirtualKey
$LN10@Initialize:

; 7617 :         GETPROCADDRESS( s_hDllImm32, ImmNotifyIME, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0N@OLIMKHEA@ImmNotifyIME?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN9@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmNotifyIME@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KKK@ZA, eax ; CDXUTIMEEditBox::_ImmNotifyIME
$LN9@Initialize:

; 7618 :         GETPROCADDRESS( s_hDllImm32, ImmSetConversionStatus, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BH@MCPHEKIJ@ImmSetConversionStatus?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN8@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmSetConversionStatus@CDXUTIMEEditBox@@1P6GHPAUHIMC__@@KK@ZA, eax ; CDXUTIMEEditBox::_ImmSetConversionStatus
$LN8@Initialize:

; 7619 :         GETPROCADDRESS( s_hDllImm32, ImmSimulateHotKey, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BC@OMCMFCHK@ImmSimulateHotKey?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN7@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmSimulateHotKey@CDXUTIMEEditBox@@1P6GHPAUHWND__@@K@ZA, eax ; CDXUTIMEEditBox::_ImmSimulateHotKey
$LN7@Initialize:

; 7620 :         GETPROCADDRESS( s_hDllImm32, ImmIsIME, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_08EPDNLFJN@ImmIsIME?$AA@
	mov	eax, DWORD PTR ?s_hDllImm32@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllImm32
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN26@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_ImmIsIME@CDXUTIMEEditBox@@1P6GHPAUHKL__@@@ZA, eax ; CDXUTIMEEditBox::_ImmIsIME
$LN26@Initialize:

; 7621 :     }
; 7622 : 
; 7623 :     if( !::GetSystemDirectory( wszPath, MAX_PATH+1 ) )

	mov	esi, esp
	push	261					; 00000105H
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@Initialize

; 7624 :         return;

	jmp	$LN29@Initialize
$LN5@Initialize:

; 7625 :     StringCchCat( wszPath, MAX_PATH, VER_DLLNAME );

	push	OFFSET ??_C@_0N@HAEJINEE@?2version?4dll?$AA@
	push	260					; 00000104H
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 7626 :     s_hDllVer = LoadLibrary( wszPath );

	mov	esi, esp
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadLibraryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, eax ; CDXUTIMEEditBox::s_hDllVer

; 7627 :     if( s_hDllVer )

	cmp	DWORD PTR ?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A, 0 ; CDXUTIMEEditBox::s_hDllVer
	je	$LN29@Initialize

; 7628 :     {
; 7629 :         GETPROCADDRESS( s_hDllVer, VerQueryValueA, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0P@EGBPEC@VerQueryValueA?$AA@
	mov	eax, DWORD PTR ?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllVer
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN3@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_VerQueryValueA@CDXUTIMEEditBox@@1P6GHQAXPADPAPAXPAI@ZA, eax ; CDXUTIMEEditBox::_VerQueryValueA
$LN3@Initialize:

; 7630 :         GETPROCADDRESS( s_hDllVer, GetFileVersionInfoA, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BE@JIHADGJK@GetFileVersionInfoA?$AA@
	mov	eax, DWORD PTR ?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllVer
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN2@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_GetFileVersionInfoA@CDXUTIMEEditBox@@1P6GHPADKKPAX@ZA, eax ; CDXUTIMEEditBox::_GetFileVersionInfoA
$LN2@Initialize:

; 7631 :         GETPROCADDRESS( s_hDllVer, GetFileVersionInfoSizeA, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BI@FKDAHLLJ@GetFileVersionInfoSizeA?$AA@
	mov	eax, DWORD PTR ?s_hDllVer@CDXUTIMEEditBox@@1PAUHINSTANCE__@@A ; CDXUTIMEEditBox::s_hDllVer
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$[ebp], eax
	cmp	DWORD PTR _Temp$[ebp], 0
	je	SHORT $LN29@Initialize
	mov	eax, DWORD PTR _Temp$[ebp]
	mov	DWORD PTR ?_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@1P6GKPADPAK@ZA, eax ; CDXUTIMEEditBox::_GetFileVersionInfoSizeA
$LN29@Initialize:

; 7632 :     }
; 7633 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 480				; 000001e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN33@Initialize:
	DD	1
	DD	$LN32@Initialize
$LN32@Initialize:
	DD	-284					; fffffee4H
	DD	261					; 00000105H
	DD	$LN31@Initialize
$LN31@Initialize:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?Initialize@CDXUTIMEEditBox@@SAXXZ ENDP			; CDXUTIMEEditBox::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CDXUTIMEEditBox@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CDXUTIMEEditBox@@UAE@XZ PROC				; CDXUTIMEEditBox::~CDXUTIMEEditBox, COMDAT
; _this$ = ecx

; 5558 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTIMEEditBox@@6B@

; 5559 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTEditBox@@UAE@XZ			; CDXUTEditBox::~CDXUTEditBox
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTIMEEditBox@@UAE@XZ ENDP				; CDXUTIMEEditBox::~CDXUTIMEEditBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pDialog$ = 8						; size = 4
??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTIMEEditBox::CDXUTIMEEditBox, COMDAT
; _this$ = ecx

; 5527 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z	; CDXUTEditBox::CDXUTEditBox
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTIMEEditBox@@6B@

; 5528 :     CDXUTIMEEditBox::Initialize(); // ensure static vars are properly init'ed first

	call	?Initialize@CDXUTIMEEditBox@@SAXXZ	; CDXUTIMEEditBox::Initialize

; 5529 : 
; 5530 :     m_Type = DXUT_CONTROL_IMEEDITBOX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 7

; 5531 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 5532 : 
; 5533 :     s_bEnableImeSystem = true;

	mov	BYTE PTR ?s_bEnableImeSystem@CDXUTIMEEditBox@@1_NA, 1 ; CDXUTIMEEditBox::s_bEnableImeSystem

; 5534 :     m_nIndicatorWidth = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+381], 0

; 5535 :     m_ReadingColor = D3DCOLOR_ARGB( 188, 255, 255, 255 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+309], -1124073473	; bcffffffH

; 5536 :     m_ReadingWinColor = D3DCOLOR_ARGB( 128, 0, 0, 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+313], -2147483648	; 80000000H

; 5537 :     m_ReadingSelColor = D3DCOLOR_ARGB( 255, 255, 0, 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+317], -65536		; ffff0000H

; 5538 :     m_ReadingSelBkColor = D3DCOLOR_ARGB( 128, 80, 80, 80 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+321], -2142220208	; 80505050H

; 5539 :     m_CandidateColor = D3DCOLOR_ARGB( 255, 200, 200, 200 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+325], -3618616		; ffc8c8c8H

; 5540 :     m_CandidateWinColor = D3DCOLOR_ARGB( 128, 0, 0, 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+329], -2147483648	; 80000000H

; 5541 :     m_CandidateSelColor = D3DCOLOR_ARGB( 255, 255, 255, 255 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+333], -1

; 5542 :     m_CandidateSelBkColor = D3DCOLOR_ARGB( 128, 158, 158, 158 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+337], -2137088354	; 809e9e9eH

; 5543 :     m_CompColor = D3DCOLOR_ARGB( 255, 200, 200, 255 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+341], -3618561		; ffc8c8ffH

; 5544 :     m_CompWinColor = D3DCOLOR_ARGB( 198, 0, 0, 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+345], -973078528		; c6000000H

; 5545 :     m_CompCaretColor = D3DCOLOR_ARGB( 255, 255, 255, 255 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+349], -1

; 5546 :     m_CompTargetColor = D3DCOLOR_ARGB( 255, 255, 255, 255 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+353], -1

; 5547 :     m_CompTargetBkColor = D3DCOLOR_ARGB( 255, 150, 150, 150 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+357], -6908266		; ff969696H

; 5548 :     m_CompTargetNonColor = D3DCOLOR_ARGB( 255, 255, 255, 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+361], -256		; ffffff00H

; 5549 :     m_CompTargetNonBkColor = D3DCOLOR_ARGB( 255, 150, 150, 150 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+365], -6908266		; ff969696H

; 5550 :     m_IndicatorImeColor = D3DCOLOR_ARGB( 255, 255, 255, 255 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+369], -1

; 5551 :     m_IndicatorEngColor = D3DCOLOR_ARGB( 255, 0, 0, 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+373], -16777216		; ff000000H

; 5552 :     m_IndicatorBkColor = D3DCOLOR_ARGB( 255, 128, 128, 128 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+377], -8355712		; ff808080H

; 5553 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDXUTEditBox@@UAE@XZ			; CDXUTEditBox::~CDXUTEditBox
__ehhandler$??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTIMEEditBox::CDXUTIMEEditBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@KGKPADPAK@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?Dummy_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@KGKPADPAK@Z PROC ; CDXUTIMEEditBox::Dummy_GetFileVersionInfoSizeA, COMDAT

; 929  :     static DWORD APIENTRY Dummy_GetFileVersionInfoSizeA( LPSTR, LPDWORD ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Dummy_GetFileVersionInfoSizeA@CDXUTIMEEditBox@@KGKPADPAK@Z ENDP ; CDXUTIMEEditBox::Dummy_GetFileVersionInfoSizeA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_GetFileVersionInfoA@CDXUTIMEEditBox@@KGHPADKKPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Dummy_GetFileVersionInfoA@CDXUTIMEEditBox@@KGHPADKKPAX@Z PROC ; CDXUTIMEEditBox::Dummy_GetFileVersionInfoA, COMDAT

; 928  :     static BOOL APIENTRY Dummy_GetFileVersionInfoA( LPSTR, DWORD, DWORD, LPVOID ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dummy_GetFileVersionInfoA@CDXUTIMEEditBox@@KGHPADKKPAX@Z ENDP ; CDXUTIMEEditBox::Dummy_GetFileVersionInfoA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_VerQueryValueA@CDXUTIMEEditBox@@KGHQAXPADPAPAXPAI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Dummy_VerQueryValueA@CDXUTIMEEditBox@@KGHQAXPADPAPAXPAI@Z PROC ; CDXUTIMEEditBox::Dummy_VerQueryValueA, COMDAT

; 927  :     static BOOL APIENTRY Dummy_VerQueryValueA( const LPVOID, LPSTR, LPVOID *, PUINT ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dummy_VerQueryValueA@CDXUTIMEEditBox@@KGHQAXPADPAPAXPAI@Z ENDP ; CDXUTIMEEditBox::Dummy_VerQueryValueA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ShowReadingWindow@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?Dummy_ShowReadingWindow@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z PROC ; CDXUTIMEEditBox::Dummy_ShowReadingWindow, COMDAT

; 924  :     static BOOL WINAPI Dummy_ShowReadingWindow( HIMC, BOOL ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Dummy_ShowReadingWindow@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z ENDP ; CDXUTIMEEditBox::Dummy_ShowReadingWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_GetReadingString@CDXUTIMEEditBox@@KGIPAUHIMC__@@IPADPAH2PAI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 4
?Dummy_GetReadingString@CDXUTIMEEditBox@@KGIPAUHIMC__@@IPADPAH2PAI@Z PROC ; CDXUTIMEEditBox::Dummy_GetReadingString, COMDAT

; 923  :     static UINT WINAPI Dummy_GetReadingString( HIMC, UINT, PCHAR, PINT, BOOL*, PUINT ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Dummy_GetReadingString@CDXUTIMEEditBox@@KGIPAUHIMC__@@IPADPAH2PAI@Z ENDP ; CDXUTIMEEditBox::Dummy_GetReadingString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmIsIME@CDXUTIMEEditBox@@KGHPAUHKL__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmIsIME@CDXUTIMEEditBox@@KGHPAUHKL__@@@Z PROC	; CDXUTIMEEditBox::Dummy_ImmIsIME, COMDAT

; 920  :     static BOOL WINAPI Dummy_ImmIsIME( HKL ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmIsIME@CDXUTIMEEditBox@@KGHPAUHKL__@@@Z ENDP	; CDXUTIMEEditBox::Dummy_ImmIsIME
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmSimulateHotKey@CDXUTIMEEditBox@@KGHPAUHWND__@@K@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?Dummy_ImmSimulateHotKey@CDXUTIMEEditBox@@KGHPAUHWND__@@K@Z PROC ; CDXUTIMEEditBox::Dummy_ImmSimulateHotKey, COMDAT

; 919  :     static BOOL WINAPI Dummy_ImmSimulateHotKey( HWND, DWORD ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Dummy_ImmSimulateHotKey@CDXUTIMEEditBox@@KGHPAUHWND__@@K@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmSimulateHotKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmSetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@KK@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?Dummy_ImmSetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@KK@Z PROC ; CDXUTIMEEditBox::Dummy_ImmSetConversionStatus, COMDAT

; 918  :     static BOOL WINAPI Dummy_ImmSetConversionStatus( HIMC, DWORD, DWORD ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Dummy_ImmSetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@KK@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmSetConversionStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmNotifyIME@CDXUTIMEEditBox@@KGHPAUHIMC__@@KKK@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Dummy_ImmNotifyIME@CDXUTIMEEditBox@@KGHPAUHIMC__@@KKK@Z PROC ; CDXUTIMEEditBox::Dummy_ImmNotifyIME, COMDAT

; 917  :     static BOOL WINAPI Dummy_ImmNotifyIME( HIMC, DWORD, DWORD, DWORD ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dummy_ImmNotifyIME@CDXUTIMEEditBox@@KGHPAUHIMC__@@KKK@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmNotifyIME
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmGetVirtualKey@CDXUTIMEEditBox@@KGIPAUHWND__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmGetVirtualKey@CDXUTIMEEditBox@@KGIPAUHWND__@@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmGetVirtualKey, COMDAT

; 916  :     static UINT WINAPI Dummy_ImmGetVirtualKey( HWND ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmGetVirtualKey@CDXUTIMEEditBox@@KGIPAUHWND__@@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmGetVirtualKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmGetIMEFileNameA@CDXUTIMEEditBox@@KGIPAUHKL__@@PADI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?Dummy_ImmGetIMEFileNameA@CDXUTIMEEditBox@@KGIPAUHKL__@@PADI@Z PROC ; CDXUTIMEEditBox::Dummy_ImmGetIMEFileNameA, COMDAT

; 915  :     static UINT WINAPI Dummy_ImmGetIMEFileNameA( HKL, LPSTR, UINT ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Dummy_ImmGetIMEFileNameA@CDXUTIMEEditBox@@KGIPAUHKL__@@PADI@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmGetIMEFileNameA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@KGPAUHWND__@@PAU2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@KGPAUHWND__@@PAU2@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmGetDefaultIMEWnd, COMDAT

; 914  :     static HWND WINAPI Dummy_ImmGetDefaultIMEWnd( HWND ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmGetDefaultIMEWnd@CDXUTIMEEditBox@@KGPAUHWND__@@PAU2@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmGetDefaultIMEWnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmGetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@PAK1@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?Dummy_ImmGetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@PAK1@Z PROC ; CDXUTIMEEditBox::Dummy_ImmGetConversionStatus, COMDAT

; 913  :     static BOOL WINAPI Dummy_ImmGetConversionStatus( HIMC, LPDWORD, LPDWORD ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Dummy_ImmGetConversionStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@PAK1@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmGetConversionStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmSetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?Dummy_ImmSetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z PROC ; CDXUTIMEEditBox::Dummy_ImmSetOpenStatus, COMDAT

; 912  :     static BOOL WINAPI Dummy_ImmSetOpenStatus( HIMC, BOOL ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Dummy_ImmSetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@H@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmSetOpenStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmGetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmGetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmGetOpenStatus, COMDAT

; 911  :     static BOOL WINAPI Dummy_ImmGetOpenStatus( HIMC ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmGetOpenStatus@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmGetOpenStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmAssociateContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@PAU2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?Dummy_ImmAssociateContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@PAU2@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmAssociateContext, COMDAT

; 910  :     static HIMC WINAPI Dummy_ImmAssociateContext( HWND, HIMC ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Dummy_ImmAssociateContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@PAU2@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmAssociateContext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmReleaseContext@CDXUTIMEEditBox@@KGHPAUHWND__@@PAUHIMC__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?Dummy_ImmReleaseContext@CDXUTIMEEditBox@@KGHPAUHWND__@@PAUHIMC__@@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmReleaseContext, COMDAT

; 909  :     static BOOL WINAPI Dummy_ImmReleaseContext( HWND, HIMC ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Dummy_ImmReleaseContext@CDXUTIMEEditBox@@KGHPAUHWND__@@PAUHIMC__@@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmReleaseContext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmGetContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmGetContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmGetContext, COMDAT

; 908  :     static HIMC WINAPI Dummy_ImmGetContext( HWND ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmGetContext@CDXUTIMEEditBox@@KGPAUHIMC__@@PAUHWND__@@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmGetContext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmGetCandidateListW@CDXUTIMEEditBox@@KGKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Dummy_ImmGetCandidateListW@CDXUTIMEEditBox@@KGKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@Z PROC ; CDXUTIMEEditBox::Dummy_ImmGetCandidateListW, COMDAT

; 907  :     static DWORD WINAPI Dummy_ImmGetCandidateListW( HIMC, DWORD, LPCANDIDATELIST, DWORD ) { return 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dummy_ImmGetCandidateListW@CDXUTIMEEditBox@@KGKPAUHIMC__@@KPAUtagCANDIDATELIST@@K@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmGetCandidateListW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmGetCompositionStringW@CDXUTIMEEditBox@@KGJPAUHIMC__@@KPAXK@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Dummy_ImmGetCompositionStringW@CDXUTIMEEditBox@@KGJPAUHIMC__@@KPAXK@Z PROC ; CDXUTIMEEditBox::Dummy_ImmGetCompositionStringW, COMDAT

; 906  :     static LONG WINAPI Dummy_ImmGetCompositionStringW( HIMC, DWORD, LPVOID, DWORD ) { return IMM_ERROR_GENERAL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, -2					; fffffffeH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dummy_ImmGetCompositionStringW@CDXUTIMEEditBox@@KGJPAUHIMC__@@KPAXK@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmGetCompositionStringW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmDisableTextFrameService@CDXUTIMEEditBox@@KGHK@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmDisableTextFrameService@CDXUTIMEEditBox@@KGHK@Z PROC ; CDXUTIMEEditBox::Dummy_ImmDisableTextFrameService, COMDAT

; 905  :     static BOOL WINAPI Dummy_ImmDisableTextFrameService( DWORD ) { return TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmDisableTextFrameService@CDXUTIMEEditBox@@KGHK@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmDisableTextFrameService
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmUnlockIMCC@CDXUTIMEEditBox@@KGHPAUHIMCC__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmUnlockIMCC@CDXUTIMEEditBox@@KGHPAUHIMCC__@@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmUnlockIMCC, COMDAT

; 904  :     static BOOL WINAPI Dummy_ImmUnlockIMCC( HIMCC ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmUnlockIMCC@CDXUTIMEEditBox@@KGHPAUHIMCC__@@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmUnlockIMCC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmLockIMCC@CDXUTIMEEditBox@@KGPAXPAUHIMCC__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmLockIMCC@CDXUTIMEEditBox@@KGPAXPAUHIMCC__@@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmLockIMCC, COMDAT

; 903  :     static LPVOID WINAPI Dummy_ImmLockIMCC( HIMCC ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmLockIMCC@CDXUTIMEEditBox@@KGPAXPAUHIMCC__@@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmLockIMCC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmUnlockIMC@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmUnlockIMC@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmUnlockIMC, COMDAT

; 902  :     static BOOL WINAPI Dummy_ImmUnlockIMC( HIMC ) { return FALSE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmUnlockIMC@CDXUTIMEEditBox@@KGHPAUHIMC__@@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmUnlockIMC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ImmLockIMC@CDXUTIMEEditBox@@KGPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ImmLockIMC@CDXUTIMEEditBox@@KGPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@Z PROC ; CDXUTIMEEditBox::Dummy_ImmLockIMC, COMDAT

; 901  :     static INPUTCONTEXT* WINAPI Dummy_ImmLockIMC( HIMC ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ImmLockIMC@CDXUTIMEEditBox@@KGPAU__MIDL___MIDL_itf_dimm_0000_0000_0012@@PAUHIMC__@@@Z ENDP ; CDXUTIMEEditBox::Dummy_ImmLockIMC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTEditBox@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTEditBox@@UAEPAXI@Z PROC			; CDXUTEditBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTEditBox@@UAE@XZ			; CDXUTEditBox::~CDXUTEditBox
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTEditBox@@UAEPAXI@Z ENDP			; CDXUTEditBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?PasteFromClipboard@CDXUTEditBox@@IAEXXZ
_TEXT	SEGMENT
_pwszText$1 = -32					; size = 4
_handle$2 = -20						; size = 4
_this$ = -8						; size = 4
?PasteFromClipboard@CDXUTEditBox@@IAEXXZ PROC		; CDXUTEditBox::PasteFromClipboard, COMDAT
; _this$ = ecx

; 4901 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4902 :     DeleteSelectionText();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteSelectionText@CDXUTEditBox@@IAEXXZ ; CDXUTEditBox::DeleteSelectionText

; 4903 : 
; 4904 :     if( OpenClipboard( NULL ) )

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__OpenClipboard@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN5@PasteFromC

; 4905 :     {
; 4906 :         HANDLE handle = GetClipboardData( CF_OEMTEXT );

	mov	esi, esp
	push	7
	call	DWORD PTR __imp__GetClipboardData@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _handle$2[ebp], eax

; 4907 :         if( handle )

	cmp	DWORD PTR _handle$2[ebp], 0
	je	$LN3@PasteFromC

; 4908 :         {
; 4909 :             // Convert the ANSI string to Unicode, then
; 4910 :             // insert to our buffer.
; 4911 :             TCHAR *pwszText = (TCHAR*)GlobalLock( handle );

	mov	esi, esp
	mov	eax, DWORD PTR _handle$2[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalLock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pwszText$1[ebp], eax

; 4912 :             if( pwszText )

	cmp	DWORD PTR _pwszText$1[ebp], 0
	je	SHORT $LN3@PasteFromC

; 4913 :             {
; 4914 :                 // Copy all characters up to null.
; 4915 :                 if( m_Buffer.InsertString( m_nCaret, pwszText ) )

	push	-1
	mov	eax, DWORD PTR _pwszText$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?InsertString@CUniBuffer@@QAE_NHPBDH@Z	; CUniBuffer::InsertString
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@PasteFromC

; 4916 :                     PlaceCaret( m_nCaret + lstrlenA( pwszText ) );

	mov	esi, esp
	mov	eax, DWORD PTR _pwszText$1[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+279]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret
$LN1@PasteFromC:

; 4917 :                 m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx

; 4918 :                 GlobalUnlock( handle );

	mov	esi, esp
	mov	eax, DWORD PTR _handle$2[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalUnlock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@PasteFromC:

; 4919 :             }
; 4920 :         }
; 4921 :         CloseClipboard();

	mov	esi, esp
	call	DWORD PTR __imp__CloseClipboard@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@PasteFromC:

; 4922 :     }
; 4923 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PasteFromClipboard@CDXUTEditBox@@IAEXXZ ENDP		; CDXUTEditBox::PasteFromClipboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?CopyToClipboard@CDXUTEditBox@@IAEXXZ
_TEXT	SEGMENT
tv92 = -256						; size = 4
tv86 = -256						; size = 4
_nLast$1 = -56						; size = 4
_nFirst$2 = -44						; size = 4
_pwszText$3 = -32					; size = 4
_hBlock$4 = -20						; size = 4
_this$ = -8						; size = 4
?CopyToClipboard@CDXUTEditBox@@IAEXXZ PROC		; CDXUTEditBox::CopyToClipboard, COMDAT
; _this$ = ecx

; 4871 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4872 :     // Copy the selection text to the clipboard
; 4873 :     if( m_nCaret != m_nSelStart && OpenClipboard( NULL ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	je	$LN6@CopyToClip
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__OpenClipboard@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN6@CopyToClip

; 4874 :     {
; 4875 :         EmptyClipboard();

	mov	esi, esp
	call	DWORD PTR __imp__EmptyClipboard@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4876 : 
; 4877 :         HGLOBAL hBlock = GlobalAlloc( GMEM_MOVEABLE, sizeof(TCHAR) * ( m_Buffer.GetTextSize() + 1 ) );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	add	eax, 1
	mov	esi, esp
	push	eax
	push	2
	call	DWORD PTR __imp__GlobalAlloc@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hBlock$4[ebp], eax

; 4878 :         if( hBlock )

	cmp	DWORD PTR _hBlock$4[ebp], 0
	je	$LN4@CopyToClip

; 4879 :         {
; 4880 :             TCHAR *pwszText = (TCHAR*)GlobalLock( hBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _hBlock$4[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalLock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pwszText$3[ebp], eax

; 4881 :             if( pwszText )

	cmp	DWORD PTR _pwszText$3[ebp], 0
	je	$LN3@CopyToClip

; 4882 :             {
; 4883 :                 int nFirst = __min( m_nCaret, m_nSelStart );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	jge	SHORT $LN8@CopyToClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN9@CopyToClip
$LN8@CopyToClip:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+284]
	mov	DWORD PTR tv86[ebp], eax
$LN9@CopyToClip:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _nFirst$2[ebp], ecx

; 4884 :                 int nLast = __max( m_nCaret, m_nSelStart );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	jle	SHORT $LN10@CopyToClip
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	mov	DWORD PTR tv92[ebp], ecx
	jmp	SHORT $LN11@CopyToClip
$LN10@CopyToClip:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+284]
	mov	DWORD PTR tv92[ebp], eax
$LN11@CopyToClip:
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR _nLast$1[ebp], ecx

; 4885 :                 if( nLast - nFirst > 0 )

	mov	eax, DWORD PTR _nLast$1[ebp]
	sub	eax, DWORD PTR _nFirst$2[ebp]
	test	eax, eax
	jle	SHORT $LN2@CopyToClip

; 4886 :                     CopyMemory( pwszText, m_Buffer.GetBuffer() + nFirst, (nLast - nFirst) * sizeof(TCHAR) );

	mov	eax, DWORD PTR _nLast$1[ebp]
	sub	eax, DWORD PTR _nFirst$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	add	eax, DWORD PTR _nFirst$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pwszText$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CopyToClip:

; 4887 :                 pwszText[nLast - nFirst] = L'\0';  // Terminate it

	mov	eax, DWORD PTR _nLast$1[ebp]
	sub	eax, DWORD PTR _nFirst$2[ebp]
	mov	ecx, DWORD PTR _pwszText$3[ebp]
	mov	BYTE PTR [ecx+eax], 0

; 4888 :                 GlobalUnlock( hBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _hBlock$4[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalUnlock@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@CopyToClip:

; 4889 :             }
; 4890 :             SetClipboardData( CF_OEMTEXT, hBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _hBlock$4[ebp]
	push	eax
	push	7
	call	DWORD PTR __imp__SetClipboardData@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CopyToClip:

; 4891 :         }
; 4892 :         CloseClipboard();

	mov	esi, esp
	call	DWORD PTR __imp__CloseClipboard@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4893 :         // We must not free the object until CloseClipboard is called.
; 4894 :         if( hBlock )

	cmp	DWORD PTR _hBlock$4[ebp], 0
	je	SHORT $LN6@CopyToClip

; 4895 :             GlobalFree( hBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _hBlock$4[ebp]
	push	eax
	call	DWORD PTR __imp__GlobalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@CopyToClip:

; 4896 :     }
; 4897 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CopyToClipboard@CDXUTEditBox@@IAEXXZ ENDP		; CDXUTEditBox::CopyToClipboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ResetCaretBlink@CDXUTEditBox@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ResetCaretBlink@CDXUTEditBox@@IAEXXZ PROC		; CDXUTEditBox::ResetCaretBlink, COMDAT
; _this$ = ecx

; 7578 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7579 :     m_bCaretOn = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+278], 1

; 7580 :     m_dfLastBlink = DXUTGetGlobalTimer()->GetAbsoluteTime();

	call	?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ ; DXUTGetGlobalTimer
	mov	ecx, eax
	call	?GetAbsoluteTime@CDXUTTimer@@QAENXZ	; CDXUTTimer::GetAbsoluteTime
	mov	eax, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [eax+270]

; 7581 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetCaretBlink@CDXUTEditBox@@IAEXXZ ENDP		; CDXUTEditBox::ResetCaretBlink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?DeleteSelectionText@CDXUTEditBox@@IAEXXZ
_TEXT	SEGMENT
tv75 = -244						; size = 4
tv69 = -244						; size = 4
_i$1 = -44						; size = 4
_nLast$ = -32						; size = 4
_nFirst$ = -20						; size = 4
_this$ = -8						; size = 4
?DeleteSelectionText@CDXUTEditBox@@IAEXXZ PROC		; CDXUTEditBox::DeleteSelectionText, COMDAT
; _this$ = ecx

; 4832 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4833 :     int nFirst = __min( m_nCaret, m_nSelStart );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	jge	SHORT $LN6@DeleteSele
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN7@DeleteSele
$LN6@DeleteSele:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+284]
	mov	DWORD PTR tv69[ebp], eax
$LN7@DeleteSele:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _nFirst$[ebp], ecx

; 4834 :     int nLast = __max( m_nCaret, m_nSelStart );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	jle	SHORT $LN8@DeleteSele
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN9@DeleteSele
$LN8@DeleteSele:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+284]
	mov	DWORD PTR tv75[ebp], eax
$LN9@DeleteSele:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _nLast$[ebp], ecx

; 4835 :     // Update caret and selection
; 4836 :     PlaceCaret( nFirst );

	mov	eax, DWORD PTR _nFirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 4837 :     m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx

; 4838 :     // Remove the characters
; 4839 :     for( int i = nFirst; i < nLast; ++i )

	mov	eax, DWORD PTR _nFirst$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN3@DeleteSele
$LN2@DeleteSele:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@DeleteSele:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _nLast$[ebp]
	jge	SHORT $LN4@DeleteSele

; 4840 :         m_Buffer.RemoveChar( nFirst );

	mov	eax, DWORD PTR _nFirst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?RemoveChar@CUniBuffer@@QAE_NH@Z	; CUniBuffer::RemoveChar
	jmp	SHORT $LN2@DeleteSele
$LN4@DeleteSele:

; 4841 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteSelectionText@CDXUTEditBox@@IAEXXZ ENDP		; CDXUTEditBox::DeleteSelectionText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?PlaceCaret@CDXUTEditBox@@IAEXH@Z
_TEXT	SEGMENT
_nXNew1st$1 = -92					; size = 4
_nNewTrail$2 = -80					; size = 4
_nCPNew1st$3 = -68					; size = 4
_nXNewLeft$4 = -56					; size = 4
_nX2$ = -44						; size = 4
_nX$ = -32						; size = 4
_nX1st$ = -20						; size = 4
_this$ = -8						; size = 4
_nCP$ = 8						; size = 4
?PlaceCaret@CDXUTEditBox@@IAEXH@Z PROC			; CDXUTEditBox::PlaceCaret, COMDAT
; _this$ = ecx

; 4750 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4751 :     assert( nCP >= 0 && nCP <= m_Buffer.GetTextSize() );

	cmp	DWORD PTR _nCP$[ebp], 0
	jl	SHORT $LN9@PlaceCaret
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	cmp	DWORD PTR _nCP$[ebp], eax
	jle	SHORT $LN10@PlaceCaret
$LN9@PlaceCaret:
	mov	eax, DWORD PTR ?__LINE__Var@?1??PlaceCaret@CDXUTEditBox@@IAEXH@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1FE@INHINDLN@?$AAn?$AAC?$AAP?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAC?$AAP?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAm?$AA_?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?4?$AAG?$AAe?$AAt?$AAT@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@PlaceCaret:

; 4752 :     m_nCaret = nCP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nCP$[ebp]
	mov	DWORD PTR [eax+279], ecx

; 4753 : 
; 4754 :     // Obtain the X offset of the character.
; 4755 :     int nX1st, nX, nX2;
; 4756 :     m_Buffer.CPtoX( m_nFirstVisible, FALSE, &nX1st );  // 1st visible char

	lea	eax, DWORD PTR _nX1st$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 4757 :     m_Buffer.CPtoX( nCP, FALSE, &nX );  // LEAD

	lea	eax, DWORD PTR _nX$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nCP$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 4758 :     // If nCP is the NULL terminator, get the leading edge instead of trailing.
; 4759 :     if( nCP == m_Buffer.GetTextSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	cmp	DWORD PTR _nCP$[ebp], eax
	jne	SHORT $LN6@PlaceCaret

; 4760 :         nX2 = nX;

	mov	eax, DWORD PTR _nX$[ebp]
	mov	DWORD PTR _nX2$[ebp], eax

; 4761 :     else

	jmp	SHORT $LN5@PlaceCaret
$LN6@PlaceCaret:

; 4762 :         m_Buffer.CPtoX( nCP, TRUE, &nX2 );  // TRAIL

	lea	eax, DWORD PTR _nX2$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _nCP$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX
$LN5@PlaceCaret:

; 4763 : 
; 4764 :     // If the left edge of the char is smaller than the left edge of the 1st visible char,
; 4765 :     // we need to scroll left until this char is visible.
; 4766 :     if( nX < nX1st )

	mov	eax, DWORD PTR _nX$[ebp]
	cmp	eax, DWORD PTR _nX1st$[ebp]
	jge	SHORT $LN4@PlaceCaret

; 4767 :     {
; 4768 :         // Simply make the first visible character the char at the new caret position.
; 4769 :         m_nFirstVisible = nCP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nCP$[ebp]
	mov	DWORD PTR [eax+288], ecx

; 4770 :     }
; 4771 :     else

	jmp	SHORT $LN7@PlaceCaret
$LN4@PlaceCaret:

; 4772 :     // If the right of the character is bigger than the offset of the control's
; 4773 :     // right edge, we need to scroll right to this character.
; 4774 :     if( nX2 > nX1st + RectWidth( m_rcText ) )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 102				; 00000066H
	push	eax
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	add	eax, DWORD PTR _nX1st$[ebp]
	cmp	DWORD PTR _nX2$[ebp], eax
	jle	SHORT $LN7@PlaceCaret

; 4775 :     {
; 4776 :         // Compute the X of the new left-most pixel
; 4777 :         int nXNewLeft = nX2 - RectWidth( m_rcText );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 102				; 00000066H
	push	eax
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	mov	ecx, DWORD PTR _nX2$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _nXNewLeft$4[ebp], ecx

; 4778 : 
; 4779 :         // Compute the char position of this character
; 4780 :         int nCPNew1st, nNewTrail;
; 4781 :         m_Buffer.XtoCP( nXNewLeft, &nCPNew1st, &nNewTrail );

	lea	eax, DWORD PTR _nNewTrail$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _nCPNew1st$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _nXNewLeft$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?XtoCP@CUniBuffer@@QAEJHPAH0@Z		; CUniBuffer::XtoCP

; 4782 : 
; 4783 :         // If this coordinate is not on a character border,
; 4784 :         // start from the next character so that the caret
; 4785 :         // position does not fall outside the text rectangle.
; 4786 :         int nXNew1st;
; 4787 :         m_Buffer.CPtoX( nCPNew1st, FALSE, &nXNew1st );

	lea	eax, DWORD PTR _nXNew1st$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nCPNew1st$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 4788 :         if( nXNew1st < nXNewLeft )

	mov	eax, DWORD PTR _nXNew1st$1[ebp]
	cmp	eax, DWORD PTR _nXNewLeft$4[ebp]
	jge	SHORT $LN1@PlaceCaret

; 4789 :             ++nCPNew1st;

	mov	eax, DWORD PTR _nCPNew1st$3[ebp]
	add	eax, 1
	mov	DWORD PTR _nCPNew1st$3[ebp], eax
$LN1@PlaceCaret:

; 4790 : 
; 4791 :         m_nFirstVisible = nCPNew1st;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nCPNew1st$3[ebp]
	mov	DWORD PTR [eax+288], ecx
$LN7@PlaceCaret:

; 4792 :     }
; 4793 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@PlaceCaret
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN18@PlaceCaret:
	DD	6
	DD	$LN17@PlaceCaret
$LN17@PlaceCaret:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@PlaceCaret
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN12@PlaceCaret
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN13@PlaceCaret
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN14@PlaceCaret
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN15@PlaceCaret
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN16@PlaceCaret
$LN16@PlaceCaret:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	49					; 00000031H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN15@PlaceCaret:
	DB	110					; 0000006eH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
$LN14@PlaceCaret:
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	80					; 00000050H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	49					; 00000031H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN13@PlaceCaret:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	50					; 00000032H
	DB	0
$LN12@PlaceCaret:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	0
$LN11@PlaceCaret:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	49					; 00000031H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?PlaceCaret@CDXUTEditBox@@IAEXH@Z ENDP			; CDXUTEditBox::PlaceCaret
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetTextFloatArray@CDXUTEditBox@@QAEXPBMH@Z
_TEXT	SEGMENT
$T1 = -820						; size = 4
_i$2 = -616						; size = 4
_wszTmp$ = -604						; size = 64
_wszBuffer$ = -532					; size = 512
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pNumbers$ = 8						; size = 4
_nCount$ = 12						; size = 4
?SetTextFloatArray@CDXUTEditBox@@QAEXPBMH@Z PROC	; CDXUTEditBox::SetTextFloatArray, COMDAT
; _this$ = ecx

; 5414 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 824				; 00000338H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-824]
	mov	ecx, 206				; 000000ceH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 5415 :     TCHAR wszBuffer[512] = {0};

	mov	BYTE PTR _wszBuffer$[ebp], 0
	push	511					; 000001ffH
	push	0
	lea	eax, DWORD PTR _wszBuffer$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 5416 :     TCHAR wszTmp[64];
; 5417 :     
; 5418 :     if( pNumbers == NULL )

	cmp	DWORD PTR _pNumbers$[ebp], 0
	jne	SHORT $LN5@SetTextFlo

; 5419 :         return;

	jmp	$LN6@SetTextFlo
$LN5@SetTextFlo:

; 5420 :         
; 5421 :     for( int i = 0; i < nCount; ++i )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@SetTextFlo
$LN3@SetTextFlo:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@SetTextFlo:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nCount$[ebp]
	jge	SHORT $LN2@SetTextFlo

; 5422 :     {
; 5423 :         StringCchPrintf( wszTmp, 64, "%.4f ", pNumbers[i] );

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _pNumbers$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05MBDKKHHK@?$CF?44f?5?$AA@
	push	64					; 00000040H
	lea	edx, DWORD PTR _wszTmp$[ebp]
	push	edx
	call	?StringCchPrintfA@@YAJPADIPBDZZ		; StringCchPrintfA
	add	esp, 20					; 00000014H

; 5424 :         StringCchCat( wszBuffer, 512, wszTmp );

	lea	eax, DWORD PTR _wszTmp$[ebp]
	push	eax
	push	512					; 00000200H
	lea	ecx, DWORD PTR _wszBuffer$[ebp]
	push	ecx
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 5425 :     }

	jmp	SHORT $LN3@SetTextFlo
$LN2@SetTextFlo:

; 5426 : 
; 5427 :     // Don't want the last space
; 5428 :     if( nCount > 0 && strlen(wszBuffer) > 0 )

	cmp	DWORD PTR _nCount$[ebp], 0
	jle	SHORT $LN1@SetTextFlo
	lea	eax, DWORD PTR _wszBuffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	test	eax, eax
	jbe	SHORT $LN1@SetTextFlo

; 5429 :         wszBuffer[strlen(wszBuffer)-1] = 0;

	lea	eax, DWORD PTR _wszBuffer$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN8@SetTextFlo
	jmp	SHORT $LN9@SetTextFlo
$LN8@SetTextFlo:
	call	___report_rangecheckfailure
$LN9@SetTextFlo:
	mov	ecx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _wszBuffer$[ebp+ecx], 0
$LN1@SetTextFlo:

; 5430 : 
; 5431 :     SetText( wszBuffer );

	push	0
	lea	eax, DWORD PTR _wszBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetText@CDXUTEditBox@@QAEXPBD_N@Z	; CDXUTEditBox::SetText
$LN6@SetTextFlo:

; 5432 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@SetTextFlo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 824				; 00000338H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@SetTextFlo:
	DD	2
	DD	$LN12@SetTextFlo
$LN12@SetTextFlo:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN10@SetTextFlo
	DD	-604					; fffffda4H
	DD	64					; 00000040H
	DD	$LN11@SetTextFlo
$LN11@SetTextFlo:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN10@SetTextFlo:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?SetTextFloatArray@CDXUTEditBox@@QAEXPBMH@Z ENDP	; CDXUTEditBox::SetTextFloatArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ParseFloatArray@CDXUTEditBox@@QAEXPAMH@Z
_TEXT	SEGMENT
tv87 = -328						; size = 4
_nTokenLen$1 = -128					; size = 4
_wszToken$ = -116					; size = 60
_pEnd$ = -48						; size = 4
_pToken$ = -36						; size = 4
_nWritten$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pNumbers$ = 8						; size = 4
_nCount$ = 12						; size = 4
?ParseFloatArray@CDXUTEditBox@@QAEXPAMH@Z PROC		; CDXUTEditBox::ParseFloatArray, COMDAT
; _this$ = ecx

; 5382 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 5383 :     int nWritten = 0;  // Number of floats written

	mov	DWORD PTR _nWritten$[ebp], 0

; 5384 :     const TCHAR *pToken, *pEnd;
; 5385 :     TCHAR wszToken[60];
; 5386 : 
; 5387 :     pToken = m_Buffer.GetBuffer();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	DWORD PTR _pToken$[ebp], eax
$LN8@ParseFloat:

; 5388 :     while( nWritten < nCount && *pToken != L'\0' )

	mov	eax, DWORD PTR _nWritten$[ebp]
	cmp	eax, DWORD PTR _nCount$[ebp]
	jge	$LN7@ParseFloat
	mov	eax, DWORD PTR _pToken$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN7@ParseFloat
$LN6@ParseFloat:

; 5389 :     {
; 5390 :         // Skip leading spaces
; 5391 :         while( *pToken == L' ' )

	mov	eax, DWORD PTR _pToken$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN5@ParseFloat

; 5392 :             ++pToken;

	mov	eax, DWORD PTR _pToken$[ebp]
	add	eax, 1
	mov	DWORD PTR _pToken$[ebp], eax
	jmp	SHORT $LN6@ParseFloat
$LN5@ParseFloat:

; 5393 : 
; 5394 :         if( *pToken == L'\0' )

	mov	eax, DWORD PTR _pToken$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@ParseFloat

; 5395 :             break;

	jmp	$LN7@ParseFloat
$LN4@ParseFloat:

; 5396 : 
; 5397 :         // Locate the end of number
; 5398 :         pEnd = pToken;

	mov	eax, DWORD PTR _pToken$[ebp]
	mov	DWORD PTR _pEnd$[ebp], eax
$LN3@ParseFloat:

; 5399 :         while( IN_FLOAT_CHARSET( *pEnd ) )

	mov	eax, DWORD PTR _pEnd$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN1@ParseFloat
	mov	eax, DWORD PTR _pEnd$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	je	SHORT $LN1@ParseFloat
	mov	eax, DWORD PTR _pEnd$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN2@ParseFloat
	mov	eax, DWORD PTR _pEnd$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN2@ParseFloat
$LN1@ParseFloat:

; 5400 :             ++pEnd;

	mov	eax, DWORD PTR _pEnd$[ebp]
	add	eax, 1
	mov	DWORD PTR _pEnd$[ebp], eax
	jmp	SHORT $LN3@ParseFloat
$LN2@ParseFloat:

; 5401 : 
; 5402 :         // Copy the token to our buffer
; 5403 :         int nTokenLen = __min( sizeof(wszToken) / sizeof(wszToken[0]) - 1, int(pEnd - pToken) );

	mov	eax, DWORD PTR _pEnd$[ebp]
	sub	eax, DWORD PTR _pToken$[ebp]
	cmp	eax, 59					; 0000003bH
	jbe	SHORT $LN11@ParseFloat
	mov	DWORD PTR tv87[ebp], 59			; 0000003bH
	jmp	SHORT $LN12@ParseFloat
$LN11@ParseFloat:
	mov	ecx, DWORD PTR _pEnd$[ebp]
	sub	ecx, DWORD PTR _pToken$[ebp]
	mov	DWORD PTR tv87[ebp], ecx
$LN12@ParseFloat:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _nTokenLen$1[ebp], edx

; 5404 :         StringCchCopy( wszToken, nTokenLen, pToken );

	mov	eax, DWORD PTR _pToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nTokenLen$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _wszToken$[ebp]
	push	edx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 5405 :         *pNumbers = (float)strtod( wszToken, NULL );

	push	0
	lea	eax, DWORD PTR _wszToken$[ebp]
	push	eax
	call	_strtod
	add	esp, 8
	mov	ecx, DWORD PTR _pNumbers$[ebp]
	fstp	DWORD PTR [ecx]

; 5406 :         ++nWritten;

	mov	eax, DWORD PTR _nWritten$[ebp]
	add	eax, 1
	mov	DWORD PTR _nWritten$[ebp], eax

; 5407 :         ++pNumbers;

	mov	eax, DWORD PTR _pNumbers$[ebp]
	add	eax, 4
	mov	DWORD PTR _pNumbers$[ebp], eax

; 5408 :         pToken = pEnd;

	mov	eax, DWORD PTR _pEnd$[ebp]
	mov	DWORD PTR _pToken$[ebp], eax

; 5409 :     }

	jmp	$LN8@ParseFloat
$LN7@ParseFloat:

; 5410 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ParseFloat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN15@ParseFloat:
	DD	1
	DD	$LN14@ParseFloat
$LN14@ParseFloat:
	DD	-116					; ffffff8cH
	DD	60					; 0000003cH
	DD	$LN13@ParseFloat
$LN13@ParseFloat:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?ParseFloatArray@CDXUTEditBox@@QAEXPAMH@Z ENDP		; CDXUTEditBox::ParseFloatArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetTextColor@CDXUTEditBox@@UAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Color$ = 8						; size = 4
?SetTextColor@CDXUTEditBox@@UAEXK@Z PROC		; CDXUTEditBox::SetTextColor, COMDAT
; _this$ = ecx

; 850  :     virtual void SetTextColor( D3DCOLOR Color ) { m_TextColor = Color; }  // Text color

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [eax+292], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextColor@CDXUTEditBox@@UAEXK@Z ENDP		; CDXUTEditBox::SetTextColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ClearText@CDXUTEditBox@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ClearText@CDXUTEditBox@@QAEXXZ PROC			; CDXUTEditBox::ClearText, COMDAT
; _this$ = ecx

; 4798 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4799 :     m_Buffer.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?Clear@CUniBuffer@@QAEXXZ		; CUniBuffer::Clear

; 4800 :     m_nFirstVisible = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], 0

; 4801 :     PlaceCaret( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 4802 :     m_nSelStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+284], 0

; 4803 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearText@CDXUTEditBox@@QAEXXZ ENDP			; CDXUTEditBox::ClearText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetTextCopy@CDXUTEditBox@@QAEJPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strDest$ = 8						; size = 4
_bufferCount$ = 12					; size = 4
?GetTextCopy@CDXUTEditBox@@QAEJPADI@Z PROC		; CDXUTEditBox::GetTextCopy, COMDAT
; _this$ = ecx

; 4821 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4822 :     assert( strDest );

	cmp	DWORD PTR _strDest$[ebp], 0
	jne	SHORT $LN3@GetTextCop
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetTextCopy@CDXUTEditBox@@QAEJPADI@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BA@LIOJNBNF@?$AAs?$AAt?$AAr?$AAD?$AAe?$AAs?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@GetTextCop:

; 4823 : 
; 4824 :     StringCchCopy( strDest, bufferCount, m_Buffer.GetBuffer() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	push	eax
	mov	eax, DWORD PTR _bufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDest$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 4825 : 
; 4826 :     return S_OK;

	xor	eax, eax

; 4827 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetTextCopy@CDXUTEditBox@@QAEJPADI@Z ENDP		; CDXUTEditBox::GetTextCopy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetText@CDXUTEditBox@@QAEXPBD_N@Z
_TEXT	SEGMENT
tv83 = -208						; size = 4
_this$ = -8						; size = 4
_wszText$ = 8						; size = 4
_bSelected$ = 12					; size = 1
?SetText@CDXUTEditBox@@QAEXPBD_N@Z PROC			; CDXUTEditBox::SetText, COMDAT
; _this$ = ecx

; 4808 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4809 :     assert( wszText != NULL );

	cmp	DWORD PTR _wszText$[ebp], 0
	jne	SHORT $LN3@SetText
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetText@CDXUTEditBox@@QAEXPBD_N@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CA@PMHPGCBD@?$AAw?$AAs?$AAz?$AAT?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@SetText:

; 4810 : 
; 4811 :     m_Buffer.SetText( wszText );

	mov	eax, DWORD PTR _wszText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?SetText@CUniBuffer@@QAE_NPBD@Z		; CUniBuffer::SetText

; 4812 :     m_nFirstVisible = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], 0

; 4813 :     // Move the caret to the end of the text
; 4814 :     PlaceCaret( m_Buffer.GetTextSize() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 4815 :     m_nSelStart = bSelected ? 0 : m_nCaret;

	movzx	eax, BYTE PTR _bSelected$[ebp]
	test	eax, eax
	je	SHORT $LN4@SetText
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN5@SetText
$LN4@SetText:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR tv83[ebp], edx
$LN5@SetText:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR [eax+284], ecx

; 4816 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetText@CDXUTEditBox@@QAEXPBD_N@Z ENDP			; CDXUTEditBox::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnFocusIn@CDXUTEditBox@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnFocusIn@CDXUTEditBox@@UAEXXZ PROC			; CDXUTEditBox::OnFocusIn, COMDAT
; _this$ = ecx

; 5117 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5118 :     CDXUTControl::OnFocusIn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnFocusIn@CDXUTControl@@UAEXXZ		; CDXUTControl::OnFocusIn

; 5119 : 
; 5120 :     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink

; 5121 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnFocusIn@CDXUTEditBox@@UAEXXZ ENDP			; CDXUTEditBox::OnFocusIn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTEditBox@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv262 = -460						; size = 4
tv263 = -456						; size = 4
tv269 = -452						; size = 4
tv254 = -452						; size = 4
$T1 = -444						; size = 16
$T2 = -420						; size = 16
_nRightEdgeX$3 = -204					; size = 4
_rcCaret$4 = -192					; size = 16
_nNumChatToRender$5 = -168				; size = 4
_nFirstToRender$6 = -156				; size = 4
_nTemp$7 = -144						; size = 4
_nSelRightX$8 = -132					; size = 4
_nSelLeftX$9 = -120					; size = 4
_rcSelection$ = -108					; size = 16
_nXFirst$ = -84						; size = 4
_e$10 = -72						; size = 4
_pElement$ = -60					; size = 4
_nCaretX$ = -48						; size = 4
_nSelStartX$ = -36					; size = 4
_hr$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTEditBox@@UAEXPAUIDirect3DDevice9@@M@Z PROC	; CDXUTEditBox::Render, COMDAT
; _this$ = ecx

; 5271 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 5272 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN12@Render

; 5273 :         return;

	jmp	$LN13@Render
$LN12@Render:

; 5274 : 
; 5275 :     HRESULT hr;
; 5276 :     int nSelStartX = 0, nCaretX = 0;  // Left and right X cordinates of the selection region

	mov	DWORD PTR _nSelStartX$[ebp], 0
	mov	DWORD PTR _nCaretX$[ebp], 0

; 5277 : 
; 5278 :     CDXUTElement* pElement = GetElement( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetElement@CDXUTControl@@QAEPAVCDXUTElement@@I@Z ; CDXUTControl::GetElement
	mov	DWORD PTR _pElement$[ebp], eax

; 5279 :     if( pElement )

	cmp	DWORD PTR _pElement$[ebp], 0
	je	SHORT $LN11@Render

; 5280 :     {
; 5281 :         m_Buffer.SetFontNode( m_pDialog->GetFont( pElement->iFont ) );

	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z ; CDXUTDialog::GetFont
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?SetFontNode@CUniBuffer@@QAEXPAUDXUTFontNode@@@Z ; CUniBuffer::SetFontNode

; 5282 :         PlaceCaret( m_nCaret );  // Call PlaceCaret now that we have the font info (node),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret
$LN11@Render:

; 5283 :                                  // so that scrolling can be handled.
; 5284 :     }
; 5285 : 
; 5286 :     // Render the control graphics
; 5287 :     for( int e = 0; e < 9; ++e )

	mov	DWORD PTR _e$10[ebp], 0
	jmp	SHORT $LN10@Render
$LN9@Render:
	mov	eax, DWORD PTR _e$10[ebp]
	add	eax, 1
	mov	DWORD PTR _e$10[ebp], eax
$LN10@Render:
	cmp	DWORD PTR _e$10[ebp], 9
	jge	SHORT $LN8@Render

; 5288 :     {
; 5289 :         pElement = m_Elements.GetAt( e );

	mov	eax, DWORD PTR _e$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], ecx

; 5290 :         pElement->TextureColor.Blend( DXUT_STATE_NORMAL, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 5291 : 
; 5292 :         m_pDialog->DrawSprite( pElement, &m_rcRender[e] );

	mov	eax, DWORD PTR _e$10[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+118]
	push	edx
	mov	eax, DWORD PTR _pElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 5293 :     }

	jmp	SHORT $LN9@Render
$LN8@Render:

; 5294 : 
; 5295 :     //
; 5296 :     // Compute the X coordinates of the first visible character.
; 5297 :     //
; 5298 :     int nXFirst;
; 5299 :     m_Buffer.CPtoX( m_nFirstVisible, FALSE, &nXFirst );

	lea	eax, DWORD PTR _nXFirst$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 5300 : 
; 5301 :     //
; 5302 :     // Compute the X coordinates of the selection rectangle
; 5303 :     //
; 5304 :     hr = m_Buffer.CPtoX( m_nCaret, FALSE, &nCaretX );

	lea	eax, DWORD PTR _nCaretX$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX
	mov	DWORD PTR _hr$[ebp], eax

; 5305 :     if( m_nCaret != m_nSelStart )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	je	SHORT $LN7@Render

; 5306 :         hr = m_Buffer.CPtoX( m_nSelStart, FALSE, &nSelStartX );

	lea	eax, DWORD PTR _nSelStartX$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX
	mov	DWORD PTR _hr$[ebp], eax

; 5307 :     else

	jmp	SHORT $LN6@Render
$LN7@Render:

; 5308 :         nSelStartX = nCaretX;

	mov	eax, DWORD PTR _nCaretX$[ebp]
	mov	DWORD PTR _nSelStartX$[ebp], eax
$LN6@Render:

; 5309 : 
; 5310 :     //
; 5311 :     // Render the selection rectangle
; 5312 :     //
; 5313 :     RECT rcSelection;  // Make this available for rendering selected text
; 5314 :     if( m_nCaret != m_nSelStart )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	je	$LN5@Render

; 5315 :     {
; 5316 :         int nSelLeftX = nCaretX, nSelRightX = nSelStartX;

	mov	eax, DWORD PTR _nCaretX$[ebp]
	mov	DWORD PTR _nSelLeftX$9[ebp], eax
	mov	eax, DWORD PTR _nSelStartX$[ebp]
	mov	DWORD PTR _nSelRightX$8[ebp], eax

; 5317 :         // Swap if left is bigger than right
; 5318 :         if( nSelLeftX > nSelRightX )

	mov	eax, DWORD PTR _nSelLeftX$9[ebp]
	cmp	eax, DWORD PTR _nSelRightX$8[ebp]
	jle	SHORT $LN4@Render

; 5319 :             { int nTemp = nSelLeftX; nSelLeftX = nSelRightX; nSelRightX = nTemp; }

	mov	eax, DWORD PTR _nSelLeftX$9[ebp]
	mov	DWORD PTR _nTemp$7[ebp], eax
	mov	eax, DWORD PTR _nSelRightX$8[ebp]
	mov	DWORD PTR _nSelLeftX$9[ebp], eax
	mov	eax, DWORD PTR _nTemp$7[ebp]
	mov	DWORD PTR _nSelRightX$8[ebp], eax
$LN4@Render:

; 5320 : 
; 5321 :         SetRect( &rcSelection, nSelLeftX, m_rcText.top, nSelRightX, m_rcText.bottom );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+114]
	push	ecx
	mov	edx, DWORD PTR _nSelRightX$8[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+106]
	push	ecx
	mov	edx, DWORD PTR _nSelLeftX$9[ebp]
	push	edx
	lea	eax, DWORD PTR _rcSelection$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5322 :         OffsetRect( &rcSelection, m_rcText.left - nXFirst, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+102]
	sub	ecx, DWORD PTR _nXFirst$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rcSelection$[ebp]
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5323 :         IntersectRect( &rcSelection, &m_rcText, &rcSelection );

	mov	esi, esp
	lea	eax, DWORD PTR _rcSelection$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 102				; 00000066H
	push	ecx
	lea	edx, DWORD PTR _rcSelection$[ebp]
	push	edx
	call	DWORD PTR __imp__IntersectRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5324 :         m_pDialog->DrawRect( &rcSelection, m_SelBkColor );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	push	ecx
	lea	edx, DWORD PTR _rcSelection$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect
$LN5@Render:

; 5325 :     }
; 5326 : 
; 5327 :     //
; 5328 :     // Render the text
; 5329 :     //
; 5330 :     // Element 0 for text
; 5331 :     m_Elements.GetAt( 0 )->FontColor.Current = m_TextColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	edx, DWORD PTR [eax]
	add	edx, 92					; 0000005cH
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T1[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 5332 :     m_pDialog->DrawText( m_Buffer.GetBuffer() + m_nFirstVisible, m_Elements.GetAt( 0 ), &m_rcText );

	push	-1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 102				; 00000066H
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+288]
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 5333 : 
; 5334 :     // Render the selected text
; 5335 :     if( m_nCaret != m_nSelStart )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	je	$LN3@Render

; 5336 :     {
; 5337 :         int nFirstToRender = __max( m_nFirstVisible, __min( m_nSelStart, m_nCaret ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+284]
	cmp	edx, DWORD PTR [ecx+279]
	jge	SHORT $LN15@Render
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR tv254[ebp], ecx
	jmp	SHORT $LN16@Render
$LN15@Render:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+279]
	mov	DWORD PTR tv254[ebp], eax
$LN16@Render:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	cmp	edx, DWORD PTR tv254[ebp]
	jle	SHORT $LN19@Render
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	mov	DWORD PTR tv263[ebp], ecx
	jmp	SHORT $LN20@Render
$LN19@Render:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+284]
	cmp	ecx, DWORD PTR [eax+279]
	jge	SHORT $LN17@Render
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+284]
	mov	DWORD PTR tv262[ebp], eax
	jmp	SHORT $LN18@Render
$LN17@Render:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR tv262[ebp], edx
$LN18@Render:
	mov	eax, DWORD PTR tv262[ebp]
	mov	DWORD PTR tv263[ebp], eax
$LN20@Render:
	mov	ecx, DWORD PTR tv263[ebp]
	mov	DWORD PTR _nFirstToRender$6[ebp], ecx

; 5338 :         int nNumChatToRender = __max( m_nSelStart, m_nCaret ) - nFirstToRender;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+284]
	cmp	edx, DWORD PTR [ecx+279]
	jle	SHORT $LN21@Render
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR tv269[ebp], ecx
	jmp	SHORT $LN22@Render
$LN21@Render:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+279]
	mov	DWORD PTR tv269[ebp], eax
$LN22@Render:
	mov	ecx, DWORD PTR tv269[ebp]
	sub	ecx, DWORD PTR _nFirstToRender$6[ebp]
	mov	DWORD PTR _nNumChatToRender$5[ebp], ecx

; 5339 :         m_Elements.GetAt( 0 )->FontColor.Current = m_SelTextColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	edx, DWORD PTR [eax]
	add	edx, 92					; 0000005cH
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T2[ebp+12]
	mov	DWORD PTR [edx+12], ecx

; 5340 :         m_pDialog->DrawText( m_Buffer.GetBuffer() + nFirstToRender,
; 5341 :                              m_Elements.GetAt( 0 ), &rcSelection, false, nNumChatToRender );

	mov	eax, DWORD PTR _nNumChatToRender$5[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _rcSelection$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetBuffer@CUniBuffer@@QAEPBDXZ		; CUniBuffer::GetBuffer
	add	eax, DWORD PTR _nFirstToRender$6[ebp]
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
$LN3@Render:

; 5342 :     }
; 5343 : 
; 5344 :     //
; 5345 :     /* Blink the caret
; 5346 :     //
; 5347 :     if( DXUTGetGlobalTimer()->GetAbsoluteTime() - m_dfLastBlink >= m_dfBlink )
; 5348 :     {
; 5349 :         m_bCaretOn = !m_bCaretOn;
; 5350 :         m_dfLastBlink = DXUTGetGlobalTimer()->GetAbsoluteTime();
; 5351 :     }*/
; 5352 : 
; 5353 :     //
; 5354 :     // Render the caret if this control has the focus
; 5355 :     //
; 5356 :     //if( m_bHasFocus && m_bCaretOn && !s_bHideCaret )
; 5357 :     //{
; 5358 : 	if(m_bVisible && m_bEnabled) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	$LN2@Render
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	$LN2@Render

; 5359 :         // Start the rectangle with insert mode caret
; 5360 :         RECT rcCaret = { m_rcText.left - nXFirst + nCaretX - 1, m_rcText.top,
; 5361 :                          m_rcText.left - nXFirst + nCaretX + 1, m_rcText.bottom };

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+102]
	sub	ecx, DWORD PTR _nXFirst$[ebp]
	mov	edx, DWORD PTR _nCaretX$[ebp]
	lea	eax, DWORD PTR [ecx+edx-1]
	mov	DWORD PTR _rcCaret$4[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+106]
	mov	DWORD PTR _rcCaret$4[ebp+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+102]
	sub	ecx, DWORD PTR _nXFirst$[ebp]
	mov	edx, DWORD PTR _nCaretX$[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	DWORD PTR _rcCaret$4[ebp+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+114]
	mov	DWORD PTR _rcCaret$4[ebp+12], ecx

; 5362 : 
; 5363 :         // If we are in overwrite mode, adjust the caret rectangle
; 5364 :         // to fill the entire character.
; 5365 :         if( !m_bInsertMode )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+283]
	test	ecx, ecx
	jne	SHORT $LN1@Render

; 5366 :         {
; 5367 :             // Obtain the right edge X coord of the current character
; 5368 :             int nRightEdgeX;
; 5369 :             m_Buffer.CPtoX( m_nCaret, TRUE, &nRightEdgeX );

	lea	eax, DWORD PTR _nRightEdgeX$3[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 5370 :             rcCaret.right = m_rcText.left - nXFirst + nRightEdgeX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+102]
	sub	ecx, DWORD PTR _nXFirst$[ebp]
	add	ecx, DWORD PTR _nRightEdgeX$3[ebp]
	mov	DWORD PTR _rcCaret$4[ebp+8], ecx
$LN1@Render:

; 5371 :         }
; 5372 : 
; 5373 :         m_pDialog->DrawRect( &rcCaret, m_CaretColor );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	push	ecx
	lea	edx, DWORD PTR _rcCaret$4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ; CDXUTDialog::DrawRect
$LN2@Render:
$LN13@Render:

; 5374 :     }
; 5375 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN30@Render:
	DD	6
	DD	$LN29@Render
$LN29@Render:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN23@Render
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN24@Render
	DD	-84					; ffffffacH
	DD	4
	DD	$LN25@Render
	DD	-108					; ffffff94H
	DD	16					; 00000010H
	DD	$LN26@Render
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN27@Render
	DD	-204					; ffffff34H
	DD	4
	DD	$LN28@Render
$LN28@Render:
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	88					; 00000058H
	DB	0
$LN27@Render:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN26@Render:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN25@Render:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN24@Render:
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	88					; 00000058H
	DB	0
$LN23@Render:
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	88					; 00000058H
	DB	0
?Render@CDXUTEditBox@@UAEXPAUIDirect3DDevice9@@M@Z ENDP	; CDXUTEditBox::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?CanHaveFocus@CDXUTEditBox@@UAE_NXZ
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
?CanHaveFocus@CDXUTEditBox@@UAE_NXZ PROC		; CDXUTEditBox::CanHaveFocus, COMDAT
; _this$ = ecx

; 841  :     virtual bool CanHaveFocus() { return (m_bVisible && m_bEnabled); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@CanHaveFoc
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	test	eax, eax
	je	SHORT $LN3@CanHaveFoc
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@CanHaveFoc
$LN3@CanHaveFoc:
	mov	DWORD PTR tv78[ebp], 0
$LN4@CanHaveFoc:
	mov	al, BYTE PTR tv78[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CanHaveFocus@CDXUTEditBox@@UAE_NXZ ENDP		; CDXUTEditBox::CanHaveFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateRects@CDXUTEditBox@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?UpdateRects@CDXUTEditBox@@UAEXXZ PROC			; CDXUTEditBox::UpdateRects, COMDAT
; _this$ = ecx

; 4846 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4847 :     CDXUTControl::UpdateRects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateRects@CDXUTControl@@MAEXXZ	; CDXUTControl::UpdateRects

; 4848 : 
; 4849 :     // Update the text rectangle
; 4850 :     m_rcText = m_rcBoundingBox;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 102				; 00000066H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 4851 :     // First inflate by m_nBorder to compute render rects
; 4852 :     InflateRect( &m_rcText, -m_nBorder, -m_nBorder );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+94]
	neg	ecx
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+94]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 102				; 00000066H
	push	ecx
	call	DWORD PTR __imp__InflateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4853 : 
; 4854 :     // Update the render rectangles
; 4855 :     m_rcRender[0] = m_rcText;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 102				; 00000066H
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+edx+118]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 4856 :     SetRect( &m_rcRender[1], m_rcBoundingBox.left, m_rcBoundingBox.top, m_rcText.left, m_rcText.top );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+106]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+102]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+65]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+61]
	push	ecx
	mov	edx, 16					; 00000010H
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+118]
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4857 :     SetRect( &m_rcRender[2], m_rcText.left, m_rcBoundingBox.top, m_rcText.right, m_rcText.top );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+106]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+110]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+65]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+102]
	push	ecx
	mov	edx, 16					; 00000010H
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+118]
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4858 :     SetRect( &m_rcRender[3], m_rcText.right, m_rcBoundingBox.top, m_rcBoundingBox.right, m_rcText.top );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+106]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+69]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+65]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+110]
	push	ecx
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+118]
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4859 :     SetRect( &m_rcRender[4], m_rcBoundingBox.left, m_rcText.top, m_rcText.left, m_rcText.bottom );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+114]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+102]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+106]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+61]
	push	ecx
	mov	edx, 16					; 00000010H
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+118]
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4860 :     SetRect( &m_rcRender[5], m_rcText.right, m_rcText.top, m_rcBoundingBox.right, m_rcText.bottom );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+114]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+69]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+106]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+110]
	push	ecx
	mov	edx, 16					; 00000010H
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+118]
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4861 :     SetRect( &m_rcRender[6], m_rcBoundingBox.left, m_rcText.bottom, m_rcText.left, m_rcBoundingBox.bottom );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+73]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+102]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+114]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+61]
	push	ecx
	mov	edx, 16					; 00000010H
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+118]
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4862 :     SetRect( &m_rcRender[7], m_rcText.left, m_rcText.bottom, m_rcText.right, m_rcBoundingBox.bottom );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+73]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+110]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+114]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+102]
	push	ecx
	mov	edx, 16					; 00000010H
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+118]
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4863 :     SetRect( &m_rcRender[8], m_rcText.right, m_rcText.bottom, m_rcBoundingBox.right, m_rcBoundingBox.bottom );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+73]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+69]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+114]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+110]
	push	ecx
	mov	edx, 16					; 00000010H
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+118]
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4864 : 
; 4865 :     // Inflate further by m_nSpacing
; 4866 :     InflateRect( &m_rcText, -m_nSpacing, -m_nSpacing );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+98]
	neg	ecx
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+98]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 102				; 00000066H
	push	ecx
	call	DWORD PTR __imp__InflateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4867 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRects@CDXUTEditBox@@UAEXXZ ENDP			; CDXUTEditBox::UpdateRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?MsgProc@CDXUTEditBox@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv80 = -208						; size = 4
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?MsgProc@CDXUTEditBox@@UAE_NIIJ@Z PROC			; CDXUTEditBox::MsgProc, COMDAT
; _this$ = ecx

; 5126 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5127 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN25@MsgProc
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN26@MsgProc
$LN25@MsgProc:

; 5128 :         return false;

	xor	al, al
	jmp	$LN27@MsgProc
$LN26@MsgProc:

; 5129 : 
; 5130 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 257		; 00000101H
	je	$LN2@MsgProc
	cmp	DWORD PTR tv78[ebp], 258		; 00000102H
	je	SHORT $LN22@MsgProc
	jmp	$LN23@MsgProc
$LN22@MsgProc:

; 5131 :     {
; 5132 : 	    case WM_CHAR:
; 5133 :         {
; 5134 :             switch( (TCHAR)wParam )

	movsx	eax, BYTE PTR _wParam$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv80[ebp], ecx
	cmp	DWORD PTR tv80[ebp], 28			; 0000001cH
	ja	$LN8@MsgProc
	mov	edx, DWORD PTR tv80[ebp]
	movzx	eax, BYTE PTR $LN29@MsgProc[edx]
	jmp	DWORD PTR $LN30@MsgProc[eax*4]
$LN19@MsgProc:

; 5135 :             {
; 5136 :                 // Backspace
; 5137 :                 case VK_BACK:
; 5138 :                 {
; 5139 :                     // If there's a selection, treat this
; 5140 :                     // like a delete key.
; 5141 :                     if( m_nCaret != m_nSelStart )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	je	SHORT $LN18@MsgProc

; 5142 :                     {
; 5143 :                         DeleteSelectionText();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteSelectionText@CDXUTEditBox@@IAEXXZ ; CDXUTEditBox::DeleteSelectionText

; 5144 :                         m_pDialog->SendEvent( EVENT_EDITBOX_CHANGE, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1538					; 00000602H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 5145 :                     }
; 5146 :                     else

	jmp	SHORT $LN17@MsgProc
$LN18@MsgProc:

; 5147 :                     if( m_nCaret > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+279], 0
	jle	SHORT $LN17@MsgProc

; 5148 :                     {
; 5149 :                         // Move the caret, then delete the char.
; 5150 :                         PlaceCaret( m_nCaret - 1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 5151 :                         m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx

; 5152 :                         m_Buffer.RemoveChar( m_nCaret );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?RemoveChar@CUniBuffer@@QAE_NH@Z	; CUniBuffer::RemoveChar

; 5153 :                         m_pDialog->SendEvent( EVENT_EDITBOX_CHANGE, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1538					; 00000602H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN17@MsgProc:

; 5154 :                     }
; 5155 :                     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink

; 5156 :                     break;

	jmp	$LN20@MsgProc
$LN15@MsgProc:

; 5157 :                 }
; 5158 : 
; 5159 :                 case 24:        // Ctrl-X Cut
; 5160 :                 case VK_CANCEL: // Ctrl-C Copy
; 5161 :                 {
; 5162 :                     CopyToClipboard();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyToClipboard@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::CopyToClipboard

; 5163 : 
; 5164 :                     // If the key is Ctrl-X, delete the selection too.
; 5165 :                     if( (TCHAR)wParam == 24 )

	movsx	eax, BYTE PTR _wParam$[ebp]
	cmp	eax, 24					; 00000018H
	jne	SHORT $LN14@MsgProc

; 5166 :                     {
; 5167 :                         DeleteSelectionText();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteSelectionText@CDXUTEditBox@@IAEXXZ ; CDXUTEditBox::DeleteSelectionText

; 5168 :                         m_pDialog->SendEvent( EVENT_EDITBOX_CHANGE, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1538					; 00000602H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN14@MsgProc:

; 5169 :                     }
; 5170 : 
; 5171 :                     break;

	jmp	$LN20@MsgProc
$LN13@MsgProc:

; 5172 :                 }
; 5173 : 
; 5174 :                 // Ctrl-V Paste
; 5175 :                 case 22:
; 5176 :                 {
; 5177 :                     PasteFromClipboard();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PasteFromClipboard@CDXUTEditBox@@IAEXXZ ; CDXUTEditBox::PasteFromClipboard

; 5178 :                     m_pDialog->SendEvent( EVENT_EDITBOX_CHANGE, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1538					; 00000602H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 5179 :                     break;

	jmp	$LN20@MsgProc
$LN12@MsgProc:

; 5180 :                 }
; 5181 : 
; 5182 :                 // Ctrl-A Select All
; 5183 :                 case 1:
; 5184 :                     if( m_nSelStart == m_nCaret )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+284]
	cmp	edx, DWORD PTR [ecx+279]
	jne	SHORT $LN11@MsgProc

; 5185 :                     {
; 5186 :                         m_nSelStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+284], 0

; 5187 :                         PlaceCaret( m_Buffer.GetTextSize() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret
$LN11@MsgProc:

; 5188 :                     }
; 5189 :                     break;

	jmp	$LN20@MsgProc
$LN10@MsgProc:

; 5190 : 
; 5191 : 				// Enter char does nothing 
; 5192 :                 case VK_RETURN:
; 5193 :                     break;

	jmp	$LN20@MsgProc
$LN9@MsgProc:

; 5194 : 
; 5195 :                 // Junk characters we don't want in the string
; 5196 :                 case 26:  // Ctrl Z
; 5197 :                 case 2:   // Ctrl B
; 5198 :                 case 14:  // Ctrl N
; 5199 :                 case 19:  // Ctrl S
; 5200 :                 case 4:   // Ctrl D
; 5201 :                 case 6:   // Ctrl F
; 5202 :                 case 7:   // Ctrl G
; 5203 :                 case 10:  // Ctrl J
; 5204 :                 case 11:  // Ctrl K
; 5205 :                 case 12:  // Ctrl L
; 5206 :                 case 17:  // Ctrl Q
; 5207 :                 case 23:  // Ctrl W
; 5208 :                 case 5:   // Ctrl E
; 5209 :                 case 18:  // Ctrl R
; 5210 :                 case 20:  // Ctrl T
; 5211 :                 case 25:  // Ctrl Y
; 5212 :                 case 21:  // Ctrl U
; 5213 :                 case 9:   // Ctrl I
; 5214 :                 case 15:  // Ctrl O
; 5215 :                 case 16:  // Ctrl P
; 5216 :                 case 27:  // Ctrl [
; 5217 :                 case 29:  // Ctrl ]
; 5218 :                 case 28:  // Ctrl \ 
; 5219 :                     break;

	jmp	$LN20@MsgProc
$LN8@MsgProc:

; 5220 : 
; 5221 :                 default:
; 5222 :                 {
; 5223 :                     // If there's a selection and the user
; 5224 :                     // starts to type, the selection should
; 5225 :                     // be deleted.
; 5226 :                     if( m_nCaret != m_nSelStart )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	je	SHORT $LN7@MsgProc

; 5227 :                         DeleteSelectionText();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteSelectionText@CDXUTEditBox@@IAEXXZ ; CDXUTEditBox::DeleteSelectionText
$LN7@MsgProc:

; 5228 : 
; 5229 : 					if(m_Buffer.GetTextSize() >= 128) return true;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN6@MsgProc
	mov	al, 1
	jmp	$LN27@MsgProc
$LN6@MsgProc:

; 5230 : 
; 5231 :                     // If we are in overwrite mode and there is already
; 5232 :                     // a char at the caret's position, simply replace it.
; 5233 :                     // Otherwise, we insert the char as normal.
; 5234 : 					if( !m_bInsertMode && m_nCaret < m_Buffer.GetTextSize() )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+283]
	test	ecx, ecx
	jne	SHORT $LN5@MsgProc
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+279], eax
	jge	SHORT $LN5@MsgProc

; 5235 :                     {
; 5236 :                         m_Buffer[m_nCaret] = (TCHAR)wParam;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	??ACUniBuffer@@QAEAADH@Z		; CUniBuffer::operator[]
	mov	dl, BYTE PTR _wParam$[ebp]
	mov	BYTE PTR [eax], dl

; 5237 :                         PlaceCaret( m_nCaret + 1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 5238 :                         m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx

; 5239 :                     } else

	jmp	SHORT $LN4@MsgProc
$LN5@MsgProc:

; 5240 :                     {
; 5241 :                         // Insert the char
; 5242 :                         if( m_Buffer.InsertChar( m_nCaret, (TCHAR)wParam ) )

	movzx	eax, BYTE PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?InsertChar@CUniBuffer@@QAE_NHD@Z	; CUniBuffer::InsertChar
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@MsgProc

; 5243 :                         {
; 5244 :                             PlaceCaret( m_nCaret + 1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 5245 :                             m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx
$LN4@MsgProc:

; 5246 :                         }
; 5247 :                     }
; 5248 :                     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink

; 5249 :                     m_pDialog->SendEvent( EVENT_EDITBOX_CHANGE, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1538					; 00000602H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN20@MsgProc:

; 5250 :                 }
; 5251 :             }
; 5252 :             return true;

	mov	al, 1
	jmp	SHORT $LN27@MsgProc
$LN2@MsgProc:

; 5253 :         }
; 5254 : 
; 5255 : 		case WM_KEYUP:
; 5256 : 		{
; 5257 : 			if(wParam == VK_RETURN) {

	cmp	DWORD PTR _wParam$[ebp], 13		; 0000000dH
	jne	SHORT $LN23@MsgProc

; 5258 :                 // Invoke the callback when the user presses Enter.
; 5259 :                 m_pDialog->SendEvent( EVENT_EDITBOX_STRING, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1537					; 00000601H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 5260 : 				return true;

	mov	al, 1
	jmp	SHORT $LN27@MsgProc
$LN23@MsgProc:

; 5261 : 			}
; 5262 : 			break;
; 5263 : 		}
; 5264 :     }
; 5265 :     return false;

	xor	al, al
$LN27@MsgProc:

; 5266 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN30@MsgProc:
	DD	$LN12@MsgProc
	DD	$LN9@MsgProc
	DD	$LN15@MsgProc
	DD	$LN19@MsgProc
	DD	$LN10@MsgProc
	DD	$LN13@MsgProc
$LN29@MsgProc:
	DB	0
	DB	1
	DB	2
	DB	1
	DB	1
	DB	1
	DB	1
	DB	3
	DB	1
	DB	1
	DB	1
	DB	1
	DB	4
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	5
	DB	1
	DB	2
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
?MsgProc@CDXUTEditBox@@UAE_NIIJ@Z ENDP			; CDXUTEditBox::MsgProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTEditBox@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv78 = -280						; size = 4
_nX1st$1 = -80						; size = 4
_nTrail$2 = -68						; size = 4
_nCP$3 = -56						; size = 4
_nX1st$4 = -44						; size = 4
_nTrail$5 = -32						; size = 4
_nCP$6 = -20						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTEditBox@@UAE_NIUtagPOINT@@IJ@Z PROC	; CDXUTEditBox::HandleMouse, COMDAT
; _this$ = ecx

; 5055 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5056 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN15@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN16@HandleMous
$LN15@HandleMous:

; 5057 :         return false;

	xor	al, al
	jmp	$LN17@HandleMous
$LN16@HandleMous:

; 5058 : 
; 5059 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR tv78[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv78[ebp], ecx
	cmp	DWORD PTR tv78[ebp], 3
	ja	$LN13@HandleMous
	mov	edx, DWORD PTR tv78[ebp]
	jmp	DWORD PTR $LN27@HandleMous[edx*4]
$LN12@HandleMous:

; 5060 :     {
; 5061 :         case WM_LBUTTONDOWN:
; 5062 :         case WM_LBUTTONDBLCLK:
; 5063 :         {
; 5064 :             if( !m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN11@HandleMous

; 5065 :                 m_pDialog->RequestFocus( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
$LN11@HandleMous:

; 5066 : 
; 5067 :             if( !ContainsPoint( pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN10@HandleMous

; 5068 :                 return false;

	xor	al, al
	jmp	$LN17@HandleMous
$LN10@HandleMous:

; 5069 : 
; 5070 :             m_bMouseDrag = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+308], 1

; 5071 :             SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5072 :             // Determine the character corresponding to the coordinates.
; 5073 :             int nCP, nTrail, nX1st;
; 5074 :             m_Buffer.CPtoX( m_nFirstVisible, FALSE, &nX1st );  // X offset of the 1st visible char

	lea	eax, DWORD PTR _nX1st$4[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 5075 :             if( SUCCEEDED( m_Buffer.XtoCP( pt.x - m_rcText.left + nX1st, &nCP, &nTrail ) ) )

	lea	eax, DWORD PTR _nTrail$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _nCP$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pt$[ebp]
	sub	eax, DWORD PTR [edx+102]
	add	eax, DWORD PTR _nX1st$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?XtoCP@CUniBuffer@@QAEJHPAH0@Z		; CUniBuffer::XtoCP
	test	eax, eax
	jl	SHORT $LN9@HandleMous

; 5076 :             {
; 5077 :                 // Cap at the NULL character.
; 5078 :                 if( nTrail && nCP < m_Buffer.GetTextSize() )

	cmp	DWORD PTR _nTrail$5[ebp], 0
	je	SHORT $LN8@HandleMous
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	cmp	DWORD PTR _nCP$6[ebp], eax
	jge	SHORT $LN8@HandleMous

; 5079 :                     PlaceCaret( nCP + 1 );

	mov	eax, DWORD PTR _nCP$6[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 5080 :                 else

	jmp	SHORT $LN7@HandleMous
$LN8@HandleMous:

; 5081 :                     PlaceCaret( nCP );

	mov	eax, DWORD PTR _nCP$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret
$LN7@HandleMous:

; 5082 :                 m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx

; 5083 :                 ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink
$LN9@HandleMous:

; 5084 :             }
; 5085 :             return true;

	mov	al, 1
	jmp	$LN17@HandleMous
$LN6@HandleMous:

; 5086 :         }
; 5087 : 
; 5088 :         case WM_LBUTTONUP:
; 5089 :             ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5090 :             m_bMouseDrag = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+308], 0

; 5091 :             break;

	jmp	$LN13@HandleMous
$LN5@HandleMous:

; 5092 : 
; 5093 :         case WM_MOUSEMOVE:
; 5094 :             if( m_bMouseDrag )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+308]
	test	ecx, ecx
	je	SHORT $LN13@HandleMous

; 5095 :             {
; 5096 :                 // Determine the character corresponding to the coordinates.
; 5097 :                 int nCP, nTrail, nX1st;
; 5098 :                 m_Buffer.CPtoX( m_nFirstVisible, FALSE, &nX1st );  // X offset of the 1st visible char

	lea	eax, DWORD PTR _nX1st$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?CPtoX@CUniBuffer@@QAEJHHPAH@Z		; CUniBuffer::CPtoX

; 5099 :                 if( SUCCEEDED( m_Buffer.XtoCP( pt.x - m_rcText.left + nX1st, &nCP, &nTrail ) ) )

	lea	eax, DWORD PTR _nTrail$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _nCP$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pt$[ebp]
	sub	eax, DWORD PTR [edx+102]
	add	eax, DWORD PTR _nX1st$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?XtoCP@CUniBuffer@@QAEJHPAH0@Z		; CUniBuffer::XtoCP
	test	eax, eax
	jl	SHORT $LN13@HandleMous

; 5100 :                 {
; 5101 :                     // Cap at the NULL character.
; 5102 :                     if( nTrail && nCP < m_Buffer.GetTextSize() )

	cmp	DWORD PTR _nTrail$2[ebp], 0
	je	SHORT $LN2@HandleMous
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	cmp	DWORD PTR _nCP$3[ebp], eax
	jge	SHORT $LN2@HandleMous

; 5103 :                         PlaceCaret( nCP + 1 );

	mov	eax, DWORD PTR _nCP$3[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 5104 :                     else

	jmp	SHORT $LN13@HandleMous
$LN2@HandleMous:

; 5105 :                         PlaceCaret( nCP );

	mov	eax, DWORD PTR _nCP$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret
$LN13@HandleMous:

; 5106 :                 }
; 5107 :             }
; 5108 :             break;
; 5109 :     }
; 5110 : 
; 5111 :     return false;

	xor	al, al
$LN17@HandleMous:

; 5112 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@HandleMous
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN26@HandleMous:
	DD	6
	DD	$LN25@HandleMous
$LN25@HandleMous:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN19@HandleMous
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN20@HandleMous
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN21@HandleMous
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN22@HandleMous
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN23@HandleMous
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN24@HandleMous
$LN24@HandleMous:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	49					; 00000031H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN23@HandleMous:
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
$LN22@HandleMous:
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	80					; 00000050H
	DB	0
$LN21@HandleMous:
	DB	110					; 0000006eH
	DB	88					; 00000058H
	DB	49					; 00000031H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN20@HandleMous:
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	0
$LN19@HandleMous:
	DB	110					; 0000006eH
	DB	67					; 00000043H
	DB	80					; 00000050H
	DB	0
	npad	2
$LN27@HandleMous:
	DD	$LN5@HandleMous
	DD	$LN12@HandleMous
	DD	$LN6@HandleMous
	DD	$LN12@HandleMous
?HandleMouse@CDXUTEditBox@@UAE_NIUtagPOINT@@IJ@Z ENDP	; CDXUTEditBox::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleKeyboard@CDXUTEditBox@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv243 = -220						; size = 4
tv147 = -220						; size = 4
tv79 = -220						; size = 4
tv78 = -220						; size = 4
_bHandled$ = -17					; size = 1
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTEditBox@@UAE_NIIJ@Z PROC		; CDXUTEditBox::HandleKeyboard, COMDAT
; _this$ = ecx

; 4928 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4929 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN32@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN33@HandleKeyb
$LN32@HandleKeyb:

; 4930 :         return false;

	xor	al, al
	jmp	$LN34@HandleKeyb
$LN33@HandleKeyb:

; 4931 : 
; 4932 :     bool bHandled = false;

	mov	BYTE PTR _bHandled$[ebp], 0

; 4933 : 
; 4934 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 256		; 00000100H
	je	SHORT $LN29@HandleKeyb
	jmp	$LN30@HandleKeyb
$LN29@HandleKeyb:

; 4935 :     {
; 4936 :         case WM_KEYDOWN:
; 4937 :         {
; 4938 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 37			; 00000025H
	ja	$LN1@HandleKeyb
	mov	edx, DWORD PTR tv79[ebp]
	movzx	eax, BYTE PTR $LN40@HandleKeyb[edx]
	jmp	DWORD PTR $LN41@HandleKeyb[eax*4]
$LN26@HandleKeyb:

; 4939 :             {
; 4940 :                 case VK_TAB:
; 4941 :                     // We don't process Tab in case keyboard input is enabled and the user
; 4942 :                     // wishes to Tab to other controls.
; 4943 :                     break;

	jmp	$LN30@HandleKeyb
$LN25@HandleKeyb:

; 4944 : 
; 4945 :                 case VK_HOME:
; 4946 :                     PlaceCaret( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 4947 :                     if( GetKeyState( VK_SHIFT ) >= 0 )

	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jl	SHORT $LN24@HandleKeyb

; 4948 :                         // Shift is not down. Update selection
; 4949 :                         // start along with the caret.
; 4950 :                         m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx
$LN24@HandleKeyb:

; 4951 :                     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink

; 4952 :                     bHandled = true;

	mov	BYTE PTR _bHandled$[ebp], 1

; 4953 :                     break;

	jmp	$LN30@HandleKeyb
$LN23@HandleKeyb:

; 4954 : 
; 4955 :                 case VK_END:
; 4956 :                     PlaceCaret( m_Buffer.GetTextSize() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 4957 :                     if( GetKeyState( VK_SHIFT ) >= 0 )

	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jl	SHORT $LN22@HandleKeyb

; 4958 :                         // Shift is not down. Update selection
; 4959 :                         // start along with the caret.
; 4960 :                         m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx
$LN22@HandleKeyb:

; 4961 :                     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink

; 4962 :                     bHandled = true;

	mov	BYTE PTR _bHandled$[ebp], 1

; 4963 :                     break;

	jmp	$LN30@HandleKeyb
$LN21@HandleKeyb:

; 4964 : 
; 4965 :                 case VK_INSERT:
; 4966 :                     if( GetKeyState( VK_CONTROL ) < 0 )

	mov	esi, esp
	push	17					; 00000011H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jge	SHORT $LN20@HandleKeyb

; 4967 :                     {
; 4968 :                         // Control Insert. Copy to clipboard
; 4969 :                         CopyToClipboard();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyToClipboard@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::CopyToClipboard

; 4970 :                     } else

	jmp	SHORT $LN19@HandleKeyb
$LN20@HandleKeyb:

; 4971 :                     if( GetKeyState( VK_SHIFT ) < 0 )

	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jge	SHORT $LN18@HandleKeyb

; 4972 :                     {
; 4973 :                         // Shift Insert. Paste from clipboard
; 4974 :                         PasteFromClipboard();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PasteFromClipboard@CDXUTEditBox@@IAEXXZ ; CDXUTEditBox::PasteFromClipboard

; 4975 :                     } else

	jmp	SHORT $LN19@HandleKeyb
$LN18@HandleKeyb:

; 4976 :                     {
; 4977 :                         // Toggle caret insert mode
; 4978 :                         m_bInsertMode = !m_bInsertMode;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+283]
	test	ecx, ecx
	jne	SHORT $LN36@HandleKeyb
	mov	DWORD PTR tv147[ebp], 1
	jmp	SHORT $LN37@HandleKeyb
$LN36@HandleKeyb:
	mov	DWORD PTR tv147[ebp], 0
$LN37@HandleKeyb:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv147[ebp]
	mov	BYTE PTR [edx+283], al
$LN19@HandleKeyb:

; 4979 :                     }
; 4980 :                     break;

	jmp	$LN30@HandleKeyb
$LN16@HandleKeyb:

; 4981 : 
; 4982 :                 case VK_DELETE:
; 4983 :                     // Check if there is a text selection.
; 4984 :                     if( m_nCaret != m_nSelStart )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+279]
	cmp	edx, DWORD PTR [ecx+284]
	je	SHORT $LN15@HandleKeyb

; 4985 :                     {
; 4986 :                         DeleteSelectionText();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteSelectionText@CDXUTEditBox@@IAEXXZ ; CDXUTEditBox::DeleteSelectionText

; 4987 :                         m_pDialog->SendEvent( EVENT_EDITBOX_CHANGE, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1538					; 00000602H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 4988 :                     }
; 4989 :                     else

	jmp	SHORT $LN14@HandleKeyb
$LN15@HandleKeyb:

; 4990 :                     {
; 4991 :                         // Deleting one character
; 4992 :                         if( m_Buffer.RemoveChar( m_nCaret ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?RemoveChar@CUniBuffer@@QAE_NH@Z	; CUniBuffer::RemoveChar
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@HandleKeyb

; 4993 :                             m_pDialog->SendEvent( EVENT_EDITBOX_CHANGE, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1538					; 00000602H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN14@HandleKeyb:

; 4994 :                     }
; 4995 :                     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink

; 4996 :                     bHandled = true;

	mov	BYTE PTR _bHandled$[ebp], 1

; 4997 :                     break;

	jmp	$LN30@HandleKeyb
$LN12@HandleKeyb:

; 4998 : 
; 4999 :                 case VK_LEFT:
; 5000 :                     if( GetKeyState( VK_CONTROL ) < 0 )

	mov	esi, esp
	push	17					; 00000011H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jge	SHORT $LN11@HandleKeyb

; 5001 :                     {
; 5002 :                         // Control is down. Move the caret to a new item
; 5003 :                         // instead of a character.
; 5004 :                         m_Buffer.GetPriorItemPos( m_nCaret, &m_nCaret );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 279				; 00000117H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetPriorItemPos@CUniBuffer@@QAEXHPAH@Z	; CUniBuffer::GetPriorItemPos

; 5005 :                         PlaceCaret( m_nCaret );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 5006 :                     }
; 5007 :                     else

	jmp	SHORT $LN10@HandleKeyb
$LN11@HandleKeyb:

; 5008 :                     if( m_nCaret > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+279], 0
	jle	SHORT $LN10@HandleKeyb

; 5009 :                         PlaceCaret( m_nCaret - 1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret
$LN10@HandleKeyb:

; 5010 :                     if( GetKeyState( VK_SHIFT ) >= 0 )

	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jl	SHORT $LN8@HandleKeyb

; 5011 :                         // Shift is not down. Update selection
; 5012 :                         // start along with the caret.
; 5013 :                         m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx
$LN8@HandleKeyb:

; 5014 :                     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink

; 5015 :                     bHandled = true;

	mov	BYTE PTR _bHandled$[ebp], 1

; 5016 :                     break;

	jmp	$LN30@HandleKeyb
$LN7@HandleKeyb:

; 5017 : 
; 5018 :                 case VK_RIGHT:
; 5019 :                     if( GetKeyState( VK_CONTROL ) < 0 )

	mov	esi, esp
	push	17					; 00000011H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jge	SHORT $LN6@HandleKeyb

; 5020 :                     {
; 5021 :                         // Control is down. Move the caret to a new item
; 5022 :                         // instead of a character.
; 5023 :                         m_Buffer.GetNextItemPos( m_nCaret, &m_nCaret );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 279				; 00000117H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetNextItemPos@CUniBuffer@@QAEXHPAH@Z	; CUniBuffer::GetNextItemPos

; 5024 :                         PlaceCaret( m_nCaret );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret

; 5025 :                     }
; 5026 :                     else

	jmp	SHORT $LN5@HandleKeyb
$LN6@HandleKeyb:

; 5027 :                     if( m_nCaret < m_Buffer.GetTextSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+279], eax
	jge	SHORT $LN5@HandleKeyb

; 5028 :                         PlaceCaret( m_nCaret + 1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+279]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlaceCaret@CDXUTEditBox@@IAEXH@Z	; CDXUTEditBox::PlaceCaret
$LN5@HandleKeyb:

; 5029 :                     if( GetKeyState( VK_SHIFT ) >= 0 )

	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jl	SHORT $LN3@HandleKeyb

; 5030 :                         // Shift is not down. Update selection
; 5031 :                         // start along with the caret.
; 5032 :                         m_nSelStart = m_nCaret;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+279]
	mov	DWORD PTR [eax+284], edx
$LN3@HandleKeyb:

; 5033 :                     ResetCaretBlink();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetCaretBlink@CDXUTEditBox@@IAEXXZ	; CDXUTEditBox::ResetCaretBlink

; 5034 :                     bHandled = true;

	mov	BYTE PTR _bHandled$[ebp], 1

; 5035 :                     break;

	jmp	SHORT $LN30@HandleKeyb
$LN2@HandleKeyb:

; 5036 : 
; 5037 :                 case VK_UP:
; 5038 :                 case VK_DOWN:
; 5039 :                     // Trap up and down arrows so that the dialog
; 5040 :                     // does not switch focus to another control.
; 5041 :                     bHandled = true;

	mov	BYTE PTR _bHandled$[ebp], 1

; 5042 :                     break;

	jmp	SHORT $LN30@HandleKeyb
$LN1@HandleKeyb:

; 5043 : 
; 5044 :                 default:
; 5045 :                     bHandled = wParam != VK_ESCAPE;  // Let the application handle Esc.

	cmp	DWORD PTR _wParam$[ebp], 27		; 0000001bH
	je	SHORT $LN38@HandleKeyb
	mov	DWORD PTR tv243[ebp], 1
	jmp	SHORT $LN39@HandleKeyb
$LN38@HandleKeyb:
	mov	DWORD PTR tv243[ebp], 0
$LN39@HandleKeyb:
	mov	al, BYTE PTR tv243[ebp]
	mov	BYTE PTR _bHandled$[ebp], al
$LN30@HandleKeyb:

; 5046 :             }
; 5047 :         }
; 5048 :     }
; 5049 :     return bHandled;

	mov	al, BYTE PTR _bHandled$[ebp]
$LN34@HandleKeyb:

; 5050 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN41@HandleKeyb:
	DD	$LN26@HandleKeyb
	DD	$LN23@HandleKeyb
	DD	$LN25@HandleKeyb
	DD	$LN12@HandleKeyb
	DD	$LN2@HandleKeyb
	DD	$LN7@HandleKeyb
	DD	$LN21@HandleKeyb
	DD	$LN16@HandleKeyb
	DD	$LN1@HandleKeyb
$LN40@HandleKeyb:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	4
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	7
?HandleKeyboard@CDXUTEditBox@@UAE_NIIJ@Z ENDP		; CDXUTEditBox::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CDXUTEditBox@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTEditBox@@UAE@XZ PROC				; CDXUTEditBox::~CDXUTEditBox, COMDAT
; _this$ = ecx

; 4741 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTEditBox@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTEditBox@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4742 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	??1CUniBuffer@@QAE@XZ			; CUniBuffer::~CUniBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDXUTEditBox@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
__ehhandler$??1CDXUTEditBox@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTEditBox@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTEditBox@@UAE@XZ ENDP				; CDXUTEditBox::~CDXUTEditBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
tv168 = -228						; size = 8
tv165 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pDialog$ = 8						; size = 4
??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTEditBox::CDXUTEditBox, COMDAT
; _this$ = ecx

; 4716 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z	; CDXUTControl::CDXUTControl
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTEditBox@@6B@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	call	??0CUniBuffer@@QAE@H@Z			; CUniBuffer::CUniBuffer
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 4717 :     m_Type = DXUT_CONTROL_EDITBOX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 6

; 4718 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 4719 : 
; 4720 :     m_nBorder = 5;  // Default border width

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+94], 5

; 4721 :     m_nSpacing = 4;  // Default spacing

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+98], 4

; 4722 : 
; 4723 :     m_bCaretOn = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+278], 1

; 4724 :     m_dfBlink = GetCaretBlinkTime() * 0.001f;

	mov	esi, esp
	call	DWORD PTR __imp__GetCaretBlinkTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv165[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv165[ebp]
	mov	eax, DWORD PTR tv165[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv168[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv168[ebp]
	mulss	xmm0, DWORD PTR __real@3a83126f
	cvtss2sd xmm0, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	QWORD PTR [ecx+262], xmm0

; 4725 :     m_dfLastBlink = DXUTGetGlobalTimer()->GetAbsoluteTime();

	call	?DXUTGetGlobalTimer@@YAPAVCDXUTTimer@@XZ ; DXUTGetGlobalTimer
	mov	ecx, eax
	call	?GetAbsoluteTime@CDXUTTimer@@QAENXZ	; CDXUTTimer::GetAbsoluteTime
	mov	eax, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [eax+270]

; 4726 :     s_bHideCaret = false;

	mov	BYTE PTR ?s_bHideCaret@CDXUTEditBox@@1_NA, 0 ; CDXUTEditBox::s_bHideCaret

; 4727 :     m_nFirstVisible = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+288], 0

; 4728 :     m_TextColor = D3DCOLOR_ARGB( 255, 16, 16, 16 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], -15724528		; ff101010H

; 4729 :     m_SelTextColor = D3DCOLOR_ARGB( 255, 255, 255, 255 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+296], -1

; 4730 :     m_SelBkColor = D3DCOLOR_ARGB( 255, 40, 50, 92 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+300], -14142884		; ff28325cH

; 4731 :     m_CaretColor = D3DCOLOR_ARGB( 255, 0, 0, 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], -16777216		; ff000000H

; 4732 :     m_nCaret = m_nSelStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+284], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+279], 0

; 4733 :     m_bInsertMode = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+283], 1

; 4734 : 
; 4735 :     m_bMouseDrag = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+308], 0

; 4736 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
__unwindfunclet$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	jmp	??1CUniBuffer@@QAE@XZ			; CUniBuffer::~CUniBuffer
__ehhandler$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTEditBox::CDXUTEditBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ScriptString_pcOutChars@CUniBuffer@@CGPBHPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ScriptString_pcOutChars@CUniBuffer@@CGPBHPAX@Z PROC ; CUniBuffer::Dummy_ScriptString_pcOutChars, COMDAT

; 813  :     static const int* WINAPI Dummy_ScriptString_pcOutChars( SCRIPT_STRING_ANALYSIS ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ScriptString_pcOutChars@CUniBuffer@@CGPBHPAX@Z ENDP ; CUniBuffer::Dummy_ScriptString_pcOutChars
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ScriptString_pLogAttr@CUniBuffer@@CGPBUtag_SCRIPT_LOGATTR@@PAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ScriptString_pLogAttr@CUniBuffer@@CGPBUtag_SCRIPT_LOGATTR@@PAX@Z PROC ; CUniBuffer::Dummy_ScriptString_pLogAttr, COMDAT

; 812  :     static const SCRIPT_LOGATTR* WINAPI Dummy_ScriptString_pLogAttr( SCRIPT_STRING_ANALYSIS ) { return NULL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ScriptString_pLogAttr@CUniBuffer@@CGPBUtag_SCRIPT_LOGATTR@@PAX@Z ENDP ; CUniBuffer::Dummy_ScriptString_pLogAttr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ScriptStringFree@CUniBuffer@@CGJPAPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Dummy_ScriptStringFree@CUniBuffer@@CGJPAPAX@Z PROC	; CUniBuffer::Dummy_ScriptStringFree, COMDAT

; 811  :     static HRESULT WINAPI Dummy_ScriptStringFree( SCRIPT_STRING_ANALYSIS* ) { return E_NOTIMPL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, -2147467263			; 80004001H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Dummy_ScriptStringFree@CUniBuffer@@CGJPAPAX@Z ENDP	; CUniBuffer::Dummy_ScriptStringFree
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ScriptStringXtoCP@CUniBuffer@@CGJPAXHPAH1@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Dummy_ScriptStringXtoCP@CUniBuffer@@CGJPAXHPAH1@Z PROC	; CUniBuffer::Dummy_ScriptStringXtoCP, COMDAT

; 810  :     static HRESULT WINAPI Dummy_ScriptStringXtoCP( SCRIPT_STRING_ANALYSIS, int, int*, int* ) { return E_NOTIMPL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, -2147467263			; 80004001H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dummy_ScriptStringXtoCP@CUniBuffer@@CGJPAXHPAH1@Z ENDP	; CUniBuffer::Dummy_ScriptStringXtoCP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ScriptStringCPtoX@CUniBuffer@@CGJPAXHHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Dummy_ScriptStringCPtoX@CUniBuffer@@CGJPAXHHPAH@Z PROC	; CUniBuffer::Dummy_ScriptStringCPtoX, COMDAT

; 809  :     static HRESULT WINAPI Dummy_ScriptStringCPtoX( SCRIPT_STRING_ANALYSIS, int, BOOL, int* ) { return E_NOTIMPL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, -2147467263			; 80004001H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Dummy_ScriptStringCPtoX@CUniBuffer@@CGJPAXHHPAH@Z ENDP	; CUniBuffer::Dummy_ScriptStringCPtoX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ScriptStringAnalyse@CUniBuffer@@CGJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 4
___formal$ = 32						; size = 4
___formal$ = 36						; size = 4
___formal$ = 40						; size = 4
___formal$ = 44						; size = 4
___formal$ = 48						; size = 4
___formal$ = 52						; size = 4
___formal$ = 56						; size = 4
?Dummy_ScriptStringAnalyse@CUniBuffer@@CGJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@Z PROC ; CUniBuffer::Dummy_ScriptStringAnalyse, COMDAT

; 808  :     static HRESULT WINAPI Dummy_ScriptStringAnalyse( HDC, const void *, int, int, int, DWORD, int, SCRIPT_CONTROL*, SCRIPT_STATE*, const int*, SCRIPT_TABDEF*, const BYTE*, SCRIPT_STRING_ANALYSIS* ) { return E_NOTIMPL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, -2147467263			; 80004001H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	52					; 00000034H
?Dummy_ScriptStringAnalyse@CUniBuffer@@CGJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@Z ENDP ; CUniBuffer::Dummy_ScriptStringAnalyse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Dummy_ScriptApplyDigitSubstitution@CUniBuffer@@CGJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?Dummy_ScriptApplyDigitSubstitution@CUniBuffer@@CGJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@Z PROC ; CUniBuffer::Dummy_ScriptApplyDigitSubstitution, COMDAT

; 807  :     static HRESULT WINAPI Dummy_ScriptApplyDigitSubstitution( const SCRIPT_DIGITSUBSTITUTE*, SCRIPT_CONTROL*, SCRIPT_STATE* ) { return E_NOTIMPL; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, -2147467263			; 80004001H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Dummy_ScriptApplyDigitSubstitution@CUniBuffer@@CGJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@Z ENDP ; CUniBuffer::Dummy_ScriptApplyDigitSubstitution
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Analyse@CUniBuffer@@AAEJXZ
_TEXT	SEGMENT
tv149 = -244						; size = 4
_hr$ = -44						; size = 4
_ScriptState$ = -32					; size = 2
_ScriptControl$ = -20					; size = 4
_this$ = -8						; size = 4
?Analyse@CUniBuffer@@AAEJXZ PROC			; CUniBuffer::Analyse, COMDAT
; _this$ = ecx

; 7268 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7269 :     if( m_Analysis )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+13], 0
	je	SHORT $LN3@Analyse

; 7270 :         _ScriptStringFree( &m_Analysis );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 13					; 0000000dH
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ScriptStringFree@CUniBuffer@@0P6GJPAPAX@ZA ; CUniBuffer::_ScriptStringFree
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Analyse:

; 7271 : 
; 7272 :     SCRIPT_CONTROL ScriptControl; // For uniscribe
; 7273 :     SCRIPT_STATE   ScriptState;   // For uniscribe
; 7274 :     ZeroMemory( &ScriptControl, sizeof(ScriptControl) );

	push	4
	push	0
	lea	eax, DWORD PTR _ScriptControl$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 7275 :     ZeroMemory( &ScriptState, sizeof(ScriptState) );

	push	2
	push	0
	lea	eax, DWORD PTR _ScriptState$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 7276 :     _ScriptApplyDigitSubstitution ( NULL, &ScriptControl, &ScriptState );

	mov	esi, esp
	lea	eax, DWORD PTR _ScriptState$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ScriptControl$[ebp]
	push	ecx
	push	0
	call	DWORD PTR ?_ScriptApplyDigitSubstitution@CUniBuffer@@0P6GJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@ZA ; CUniBuffer::_ScriptApplyDigitSubstitution
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7277 : 
; 7278 :     if( !m_pFontNode )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Analyse

; 7279 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN4@Analyse
$LN2@Analyse:

; 7280 : 
; 7281 :     HRESULT hr = _ScriptStringAnalyse( m_pFontNode->pFont ? m_pFontNode->pFont->GetDC() : NULL,
; 7282 :                                        m_pwszBuffer,
; 7283 :                                        lstrlenA( m_pwszBuffer ) + 1,  // NULL is also analyzed.
; 7284 :                                        lstrlenA( m_pwszBuffer ) * 3 / 2 + 16,
; 7285 :                                        DEFAULT_CHARSET,
; 7286 :                                        SSA_BREAK | SSA_GLYPHS | SSA_FALLBACK | SSA_LINK,
; 7287 :                                        0,
; 7288 :                                        &ScriptControl,
; 7289 :                                        &ScriptState,
; 7290 :                                        NULL,
; 7291 :                                        NULL,
; 7292 :                                        NULL,
; 7293 :                                        &m_Analysis );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+260], 0
	je	SHORT $LN6@Analyse
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+260]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN7@Analyse
$LN6@Analyse:
	mov	DWORD PTR tv149[ebp], 0
$LN7@Analyse:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 13					; 0000000dH
	mov	esi, esp
	push	edx
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _ScriptState$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ScriptControl$[ebp]
	push	ecx
	push	0
	push	4320					; 000010e0H
	push	1
	mov	edi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	imul	eax, eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 16					; 00000010H
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	call	DWORD PTR ?_ScriptStringAnalyse@CUniBuffer@@0P6GJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@ZA ; CUniBuffer::_ScriptStringAnalyse
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 7294 :     if( SUCCEEDED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@Analyse

; 7295 :         m_bAnalyseRequired = false;  // Analysis is up-to-date

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
$LN1@Analyse:

; 7296 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN4@Analyse:

; 7297 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Analyse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@Analyse:
	DD	2
	DD	$LN10@Analyse
$LN10@Analyse:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@Analyse
	DD	-32					; ffffffe0H
	DD	2
	DD	$LN9@Analyse
$LN9@Analyse:
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN8@Analyse:
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
?Analyse@CUniBuffer@@AAEJXZ ENDP			; CUniBuffer::Analyse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetNextItemPos@CUniBuffer@@QAEXHPAH@Z
_TEXT	SEGMENT
_i$1 = -56						; size = 4
_nInitial$ = -44					; size = 4
_pLogAttr$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_nCP$ = 8						; size = 4
_pPrior$ = 12						; size = 4
?GetNextItemPos@CUniBuffer@@QAEXHPAH@Z PROC		; CUniBuffer::GetNextItemPos, COMDAT
; _this$ = ecx

; 7538 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7539 :     *pPrior = nCP;  // Default is the char itself

	mov	eax, DWORD PTR _pPrior$[ebp]
	mov	ecx, DWORD PTR _nCP$[ebp]
	mov	DWORD PTR [eax], ecx

; 7540 : 
; 7541 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 7542 :     if( m_bAnalyseRequired )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN11@GetNextIte

; 7543 :         hr = Analyse();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Analyse@CUniBuffer@@AAEJXZ		; CUniBuffer::Analyse
	mov	DWORD PTR _hr$[ebp], eax
$LN11@GetNextIte:

; 7544 :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@GetNextIte

; 7545 :         return;

	jmp	$LN12@GetNextIte
$LN10@GetNextIte:

; 7546 : 
; 7547 :     const SCRIPT_LOGATTR *pLogAttr = _ScriptString_pLogAttr( m_Analysis );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptString_pLogAttr@CUniBuffer@@0P6GPBUtag_SCRIPT_LOGATTR@@PAX@ZA ; CUniBuffer::_ScriptString_pLogAttr
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pLogAttr$[ebp], eax

; 7548 :     if( !pLogAttr )

	cmp	DWORD PTR _pLogAttr$[ebp], 0
	jne	SHORT $LN9@GetNextIte

; 7549 :         return;

	jmp	$LN12@GetNextIte
$LN9@GetNextIte:

; 7550 : 
; 7551 :     if( !_ScriptString_pcOutChars( m_Analysis ) )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA ; CUniBuffer::_ScriptString_pcOutChars
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN8@GetNextIte

; 7552 :         return;

	jmp	$LN12@GetNextIte
$LN8@GetNextIte:

; 7553 :     int nInitial = *_ScriptString_pcOutChars( m_Analysis );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA ; CUniBuffer::_ScriptString_pcOutChars
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _nInitial$[ebp], edx

; 7554 :     if( nCP + 1 < nInitial )

	mov	eax, DWORD PTR _nCP$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _nInitial$[ebp]
	jge	SHORT $LN7@GetNextIte

; 7555 :         nInitial = nCP + 1;

	mov	eax, DWORD PTR _nCP$[ebp]
	add	eax, 1
	mov	DWORD PTR _nInitial$[ebp], eax
$LN7@GetNextIte:

; 7556 :     for( int i = nInitial; i < *_ScriptString_pcOutChars( m_Analysis ) - 1; ++i )

	mov	eax, DWORD PTR _nInitial$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN6@GetNextIte
$LN5@GetNextIte:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN6@GetNextIte:
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA ; CUniBuffer::_ScriptString_pcOutChars
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax]
	sub	edx, 1
	cmp	DWORD PTR _i$1[ebp], edx
	jge	SHORT $LN4@GetNextIte

; 7557 :     {
; 7558 :         if( pLogAttr[i].fWordStop )      // Either the fWordStop flag is set

	mov	eax, DWORD PTR _pLogAttr$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN3@GetNextIte

; 7559 :         {
; 7560 :             *pPrior = i;

	mov	eax, DWORD PTR _pPrior$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [eax], ecx

; 7561 :             return;

	jmp	SHORT $LN12@GetNextIte

; 7562 :         }
; 7563 :         else

	jmp	SHORT $LN2@GetNextIte
$LN3@GetNextIte:

; 7564 :         if( pLogAttr[i].fWhiteSpace &&  // Or this whitespace but the next char isn't.
; 7565 :             !pLogAttr[i+1].fWhiteSpace )

	mov	eax, DWORD PTR _pLogAttr$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 1
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@GetNextIte
	mov	eax, DWORD PTR _pLogAttr$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR [eax+1]
	shr	cl, 1
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN2@GetNextIte

; 7566 :         {
; 7567 :             *pPrior = i+1;  // The next char is a word stop

	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _pPrior$[ebp]
	mov	DWORD PTR [ecx], eax

; 7568 :             return;

	jmp	SHORT $LN12@GetNextIte
$LN2@GetNextIte:

; 7569 :         }
; 7570 :     }

	jmp	$LN5@GetNextIte
$LN4@GetNextIte:

; 7571 :     // We have reached the end. It's always a word stop, so simply return it.
; 7572 :     *pPrior = *_ScriptString_pcOutChars( m_Analysis ) - 1;

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA ; CUniBuffer::_ScriptString_pcOutChars
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax]
	sub	edx, 1
	mov	eax, DWORD PTR _pPrior$[ebp]
	mov	DWORD PTR [eax], edx
$LN12@GetNextIte:

; 7573 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNextItemPos@CUniBuffer@@QAEXHPAH@Z ENDP		; CUniBuffer::GetNextItemPos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetPriorItemPos@CUniBuffer@@QAEXHPAH@Z
_TEXT	SEGMENT
_i$1 = -44						; size = 4
_nInitial$ = -32					; size = 4
_pLogAttr$ = -20					; size = 4
_this$ = -8						; size = 4
_nCP$ = 8						; size = 4
_pPrior$ = 12						; size = 4
?GetPriorItemPos@CUniBuffer@@QAEXHPAH@Z PROC		; CUniBuffer::GetPriorItemPos, COMDAT
; _this$ = ecx

; 7507 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7508 :     *pPrior = nCP;  // Default is the char itself

	mov	eax, DWORD PTR _pPrior$[ebp]
	mov	ecx, DWORD PTR _nCP$[ebp]
	mov	DWORD PTR [eax], ecx

; 7509 : 
; 7510 :     if( m_bAnalyseRequired )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN10@GetPriorIt

; 7511 :         if( FAILED( Analyse() ) )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Analyse@CUniBuffer@@AAEJXZ		; CUniBuffer::Analyse
	test	eax, eax
	jge	SHORT $LN10@GetPriorIt

; 7512 :             return;

	jmp	$LN11@GetPriorIt
$LN10@GetPriorIt:

; 7513 : 
; 7514 :     const SCRIPT_LOGATTR *pLogAttr = _ScriptString_pLogAttr( m_Analysis );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptString_pLogAttr@CUniBuffer@@0P6GPBUtag_SCRIPT_LOGATTR@@PAX@ZA ; CUniBuffer::_ScriptString_pLogAttr
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pLogAttr$[ebp], eax

; 7515 :     if( !pLogAttr )

	cmp	DWORD PTR _pLogAttr$[ebp], 0
	jne	SHORT $LN8@GetPriorIt

; 7516 :         return;

	jmp	$LN11@GetPriorIt
$LN8@GetPriorIt:

; 7517 : 
; 7518 :     if( !_ScriptString_pcOutChars( m_Analysis ) )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA ; CUniBuffer::_ScriptString_pcOutChars
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN7@GetPriorIt

; 7519 :         return;

	jmp	$LN11@GetPriorIt
$LN7@GetPriorIt:

; 7520 :     int nInitial = *_ScriptString_pcOutChars( m_Analysis );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA ; CUniBuffer::_ScriptString_pcOutChars
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _nInitial$[ebp], edx

; 7521 :     if( nCP - 1 < nInitial )

	mov	eax, DWORD PTR _nCP$[ebp]
	sub	eax, 1
	cmp	eax, DWORD PTR _nInitial$[ebp]
	jge	SHORT $LN6@GetPriorIt

; 7522 :         nInitial = nCP - 1;

	mov	eax, DWORD PTR _nCP$[ebp]
	sub	eax, 1
	mov	DWORD PTR _nInitial$[ebp], eax
$LN6@GetPriorIt:

; 7523 :     for( int i = nInitial; i > 0; --i )

	mov	eax, DWORD PTR _nInitial$[ebp]
	mov	DWORD PTR _i$1[ebp], eax
	jmp	SHORT $LN5@GetPriorIt
$LN4@GetPriorIt:
	mov	eax, DWORD PTR _i$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@GetPriorIt:
	cmp	DWORD PTR _i$1[ebp], 0
	jle	SHORT $LN3@GetPriorIt

; 7524 :         if( pLogAttr[i].fWordStop ||       // Either the fWordStop flag is set
; 7525 :             ( !pLogAttr[i].fWhiteSpace &&  // Or the previous char is whitespace but this isn't.
; 7526 :                 pLogAttr[i-1].fWhiteSpace ) )

	mov	eax, DWORD PTR _pLogAttr$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN1@GetPriorIt
	mov	eax, DWORD PTR _pLogAttr$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 1
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN2@GetPriorIt
	mov	eax, DWORD PTR _pLogAttr$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR [eax-1]
	shr	cl, 1
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@GetPriorIt
$LN1@GetPriorIt:

; 7527 :         {
; 7528 :             *pPrior = i;

	mov	eax, DWORD PTR _pPrior$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR [eax], ecx

; 7529 :             return;

	jmp	SHORT $LN11@GetPriorIt
$LN2@GetPriorIt:

; 7530 :         }

	jmp	SHORT $LN4@GetPriorIt
$LN3@GetPriorIt:

; 7531 :     // We have reached index 0.  0 is always a break point, so simply return it.
; 7532 :     *pPrior = 0;

	mov	eax, DWORD PTR _pPrior$[ebp]
	mov	DWORD PTR [eax], 0
$LN11@GetPriorIt:

; 7533 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetPriorItemPos@CUniBuffer@@QAEXHPAH@Z ENDP		; CUniBuffer::GetPriorItemPos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?XtoCP@CUniBuffer@@QAEJHPAH0@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_nX$ = 8						; size = 4
_pCP$ = 12						; size = 4
_pnTrail$ = 16						; size = 4
?XtoCP@CUniBuffer@@QAEJHPAH0@Z PROC			; CUniBuffer::XtoCP, COMDAT
; _this$ = ecx

; 7478 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7479 :     assert( pCP && pnTrail );

	cmp	DWORD PTR _pCP$[ebp], 0
	je	SHORT $LN8@XtoCP
	cmp	DWORD PTR _pnTrail$[ebp], 0
	jne	SHORT $LN9@XtoCP
$LN8@XtoCP:
	mov	eax, DWORD PTR ?__LINE__Var@?1??XtoCP@CUniBuffer@@QAEJHPAH0@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BO@KHKNKHIE@?$AAp?$AAC?$AAP?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AAn?$AAT?$AAr?$AAa?$AAi?$AAl?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@XtoCP:

; 7480 :     *pCP = 0; *pnTrail = FALSE;  // Default

	mov	eax, DWORD PTR _pCP$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _pnTrail$[ebp]
	mov	DWORD PTR [eax], 0

; 7481 : 
; 7482 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 7483 :     if( m_bAnalyseRequired )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN5@XtoCP

; 7484 :         hr = Analyse();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Analyse@CUniBuffer@@AAEJXZ		; CUniBuffer::Analyse
	mov	DWORD PTR _hr$[ebp], eax
$LN5@XtoCP:

; 7485 : 
; 7486 :     if( SUCCEEDED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN4@XtoCP

; 7487 :         hr = _ScriptStringXtoCP( m_Analysis, nX, pCP, pnTrail );

	mov	esi, esp
	mov	eax, DWORD PTR _pnTrail$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCP$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nX$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptStringXtoCP@CUniBuffer@@0P6GJPAXHPAH1@ZA ; CUniBuffer::_ScriptStringXtoCP
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN4@XtoCP:

; 7488 : 
; 7489 :     // If the coordinate falls outside the text region, we
; 7490 :     // can get character positions that don't exist.  We must
; 7491 :     // filter them here and convert them to those that do exist.
; 7492 :     if( *pCP == -1 && *pnTrail == TRUE )

	mov	eax, DWORD PTR _pCP$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $LN3@XtoCP
	mov	eax, DWORD PTR _pnTrail$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN3@XtoCP

; 7493 :     {
; 7494 :         *pCP = 0; *pnTrail = FALSE;

	mov	eax, DWORD PTR _pCP$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _pnTrail$[ebp]
	mov	DWORD PTR [eax], 0

; 7495 :     } else

	jmp	SHORT $LN2@XtoCP
$LN3@XtoCP:

; 7496 :     if( *pCP > lstrlenA( m_pwszBuffer ) && *pnTrail == FALSE )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _pCP$[ebp]
	cmp	DWORD PTR [edx], eax
	jle	SHORT $LN2@XtoCP
	mov	eax, DWORD PTR _pnTrail$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@XtoCP

; 7497 :     {
; 7498 :         *pCP = lstrlenA( m_pwszBuffer ); *pnTrail = TRUE;

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _pCP$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _pnTrail$[ebp]
	mov	DWORD PTR [eax], 1
$LN2@XtoCP:

; 7499 :     }
; 7500 : 
; 7501 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 7502 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?XtoCP@CUniBuffer@@QAEJHPAH0@Z ENDP			; CUniBuffer::XtoCP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?CPtoX@CUniBuffer@@QAEJHHPAH@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_nCP$ = 8						; size = 4
_bTrail$ = 12						; size = 4
_pX$ = 16						; size = 4
?CPtoX@CUniBuffer@@QAEJHHPAH@Z PROC			; CUniBuffer::CPtoX, COMDAT
; _this$ = ecx

; 7461 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7462 :     assert( pX );

	cmp	DWORD PTR _pX$[ebp], 0
	jne	SHORT $LN5@CPtoX
	mov	eax, DWORD PTR ?__LINE__Var@?1??CPtoX@CUniBuffer@@QAEJHHPAH@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_15ELKGHENA@?$AAp?$AAX?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@CPtoX:

; 7463 :     *pX = 0;  // Default

	mov	eax, DWORD PTR _pX$[ebp]
	mov	DWORD PTR [eax], 0

; 7464 : 
; 7465 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 7466 :     if( m_bAnalyseRequired )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN2@CPtoX

; 7467 :         hr = Analyse();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Analyse@CUniBuffer@@AAEJXZ		; CUniBuffer::Analyse
	mov	DWORD PTR _hr$[ebp], eax
$LN2@CPtoX:

; 7468 : 
; 7469 :     if( SUCCEEDED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@CPtoX

; 7470 :         hr = _ScriptStringCPtoX( m_Analysis, nCP, bTrail, pX );

	mov	esi, esp
	mov	eax, DWORD PTR _pX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bTrail$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nCP$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	call	DWORD PTR ?_ScriptStringCPtoX@CUniBuffer@@0P6GJPAXHHPAH@ZA ; CUniBuffer::_ScriptStringCPtoX
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN1@CPtoX:

; 7471 : 
; 7472 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 7473 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CPtoX@CUniBuffer@@QAEJHHPAH@Z ENDP			; CUniBuffer::CPtoX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetText@CUniBuffer@@QAE_NPBD@Z
_TEXT	SEGMENT
_nRequired$ = -20					; size = 4
_this$ = -8						; size = 4
_wszText$ = 8						; size = 4
?SetText@CUniBuffer@@QAE_NPBD@Z PROC			; CUniBuffer::SetText, COMDAT
; _this$ = ecx

; 7435 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7436 :     assert( wszText != NULL );

	cmp	DWORD PTR _wszText$[ebp], 0
	jne	SHORT $LN9@SetText
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetText@CUniBuffer@@QAE_NPBD@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CA@PMHPGCBD@?$AAw?$AAs?$AAz?$AAT?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@SetText:

; 7437 : 
; 7438 :     int nRequired = int(strlen( wszText ) + 1);

	mov	eax, DWORD PTR _wszText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _nRequired$[ebp], eax

; 7439 : 
; 7440 :     // Check for maximum length allowed
; 7441 :     if( nRequired >= DXUT_MAX_EDITBOXLENGTH )

	cmp	DWORD PTR _nRequired$[ebp], 65535	; 0000ffffH
	jl	SHORT $LN5@SetText

; 7442 :         return false;

	xor	al, al
	jmp	SHORT $LN7@SetText
$LN5@SetText:

; 7443 : 
; 7444 :     while( GetBufferSize() < nRequired )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBufferSize@CUniBuffer@@QAEHXZ	; CUniBuffer::GetBufferSize
	cmp	eax, DWORD PTR _nRequired$[ebp]
	jge	SHORT $LN4@SetText

; 7445 :         if( !SetBufferSize( -1 ) )

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBufferSize@CUniBuffer@@QAE_NH@Z	; CUniBuffer::SetBufferSize
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@SetText

; 7446 :             break;

	jmp	SHORT $LN4@SetText
$LN3@SetText:

; 7447 :     // Check again in case out of memory occurred inside while loop.
; 7448 :     if( GetBufferSize() >= nRequired )

	jmp	SHORT $LN5@SetText
$LN4@SetText:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBufferSize@CUniBuffer@@QAEHXZ	; CUniBuffer::GetBufferSize
	cmp	eax, DWORD PTR _nRequired$[ebp]
	jl	SHORT $LN2@SetText

; 7449 :     {
; 7450 :         StringCchCopy( m_pwszBuffer, GetBufferSize(), wszText );

	mov	eax, DWORD PTR _wszText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBufferSize@CUniBuffer@@QAEHXZ	; CUniBuffer::GetBufferSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 7451 :         m_bAnalyseRequired = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 7452 :         return true;

	mov	al, 1
	jmp	SHORT $LN7@SetText

; 7453 :     }
; 7454 :     else

	jmp	SHORT $LN7@SetText
$LN2@SetText:

; 7455 :         return false;

	xor	al, al
$LN7@SetText:

; 7456 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetText@CUniBuffer@@QAE_NPBD@Z ENDP			; CUniBuffer::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?InsertString@CUniBuffer@@QAE_NHPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
_pStr$ = 12						; size = 4
_nCount$ = 16						; size = 4
?InsertString@CUniBuffer@@QAE_NHPBDH@Z PROC		; CUniBuffer::InsertString, COMDAT
; _this$ = ecx

; 7406 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7407 :     assert( nIndex >= 0 );

	cmp	DWORD PTR _nIndex$[ebp], 0
	jge	SHORT $LN8@InsertStri
	mov	eax, DWORD PTR ?__LINE__Var@?1??InsertString@CUniBuffer@@QAE_NHPBDH@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BI@EFNELFHP@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@InsertStri:

; 7408 : 
; 7409 :     if( nIndex > lstrlenA( m_pwszBuffer ) )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _nIndex$[ebp], eax
	jle	SHORT $LN5@InsertStri

; 7410 :         return false;  // invalid index

	xor	al, al
	jmp	$LN6@InsertStri
$LN5@InsertStri:

; 7411 : 
; 7412 :     if( -1 == nCount )

	cmp	DWORD PTR _nCount$[ebp], -1
	jne	SHORT $LN4@InsertStri

; 7413 :         nCount = lstrlenA( pStr );

	mov	esi, esp
	mov	eax, DWORD PTR _pStr$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nCount$[ebp], eax
$LN4@InsertStri:

; 7414 : 
; 7415 :     // Check for maximum length allowed
; 7416 :     if( GetTextSize() + nCount >= DXUT_MAX_EDITBOXLENGTH )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	add	eax, DWORD PTR _nCount$[ebp]
	cmp	eax, 65535				; 0000ffffH
	jl	SHORT $LN3@InsertStri

; 7417 :         return false;

	xor	al, al
	jmp	$LN6@InsertStri
$LN3@InsertStri:

; 7418 : 
; 7419 :     if( lstrlenA( m_pwszBuffer ) + nCount >= m_nBufferSize )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _nCount$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN2@InsertStri

; 7420 :     {
; 7421 :         if( !SetBufferSize( lstrlenA( m_pwszBuffer ) + nCount + 1 ) )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _nCount$[ebp]
	lea	eax, DWORD PTR [eax+edx+1]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBufferSize@CUniBuffer@@QAE_NH@Z	; CUniBuffer::SetBufferSize
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@InsertStri

; 7422 :             return false;  // out of memory

	xor	al, al
	jmp	SHORT $LN6@InsertStri
$LN2@InsertStri:

; 7423 :     }
; 7424 : 
; 7425 :     MoveMemory( m_pwszBuffer + nIndex + nCount, m_pwszBuffer + nIndex, sizeof(TCHAR) * ( lstrlenA( m_pwszBuffer ) - nIndex + 1 ) );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _nIndex$[ebp]
	add	eax, 1
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _nIndex$[ebp]
	add	edx, DWORD PTR _nCount$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 7426 :     CopyMemory( m_pwszBuffer + nIndex, pStr, nCount * sizeof(TCHAR) );

	mov	eax, DWORD PTR _nCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 7427 :     m_bAnalyseRequired = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 7428 : 
; 7429 :     return true;

	mov	al, 1
$LN6@InsertStri:

; 7430 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?InsertString@CUniBuffer@@QAE_NHPBDH@Z ENDP		; CUniBuffer::InsertString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveChar@CUniBuffer@@QAE_NH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?RemoveChar@CUniBuffer@@QAE_NH@Z PROC			; CUniBuffer::RemoveChar, COMDAT
; _this$ = ecx

; 7390 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7391 :     if( !lstrlenA( m_pwszBuffer ) || nIndex < 0 || nIndex >= lstrlenA( m_pwszBuffer ) )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@RemoveChar
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@RemoveChar
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _nIndex$[ebp], eax
	jl	SHORT $LN2@RemoveChar
$LN1@RemoveChar:

; 7392 :         return false;  // Invalid index

	xor	al, al
	jmp	SHORT $LN3@RemoveChar
$LN2@RemoveChar:

; 7393 : 
; 7394 :     MoveMemory( m_pwszBuffer + nIndex, m_pwszBuffer + nIndex + 1, sizeof(TCHAR) * ( lstrlenA( m_pwszBuffer ) - nIndex ) );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _nIndex$[ebp]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH

; 7395 :     m_bAnalyseRequired = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 7396 :     return true;

	mov	al, 1
$LN3@RemoveChar:

; 7397 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveChar@CUniBuffer@@QAE_NH@Z ENDP			; CUniBuffer::RemoveChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?InsertChar@CUniBuffer@@QAE_NHD@Z
_TEXT	SEGMENT
_src$ = -44						; size = 4
_stop$ = -32						; size = 4
_dest$ = -20						; size = 4
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
_tchr$ = 12						; size = 1
?InsertChar@CUniBuffer@@QAE_NHD@Z PROC			; CUniBuffer::InsertChar, COMDAT
; _this$ = ecx

; 7349 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7350 :     assert( nIndex >= 0 );

	cmp	DWORD PTR _nIndex$[ebp], 0
	jge	SHORT $LN10@InsertChar
	mov	eax, DWORD PTR ?__LINE__Var@?1??InsertChar@CUniBuffer@@QAE_NHD@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BI@EFNELFHP@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@InsertChar:

; 7351 : 
; 7352 :     if( nIndex < 0 || nIndex > lstrlenA( m_pwszBuffer ) )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN6@InsertChar
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	DWORD PTR _nIndex$[ebp], eax
	jle	SHORT $LN7@InsertChar
$LN6@InsertChar:

; 7353 :         return false;  // invalid index

	xor	al, al
	jmp	$LN8@InsertChar
$LN7@InsertChar:

; 7354 : 
; 7355 :     // Check for maximum length allowed
; 7356 :     if( GetTextSize() + 1 >= DXUT_MAX_EDITBOXLENGTH )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTextSize@CUniBuffer@@QAEHXZ		; CUniBuffer::GetTextSize
	add	eax, 1
	cmp	eax, 65535				; 0000ffffH
	jl	SHORT $LN5@InsertChar

; 7357 :         return false;

	xor	al, al
	jmp	$LN8@InsertChar
$LN5@InsertChar:

; 7358 : 
; 7359 :     if( lstrlenA( m_pwszBuffer ) + 1 >= m_nBufferSize )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN4@InsertChar

; 7360 :     {
; 7361 :         if( !SetBufferSize( -1 ) )

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBufferSize@CUniBuffer@@QAE_NH@Z	; CUniBuffer::SetBufferSize
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@InsertChar

; 7362 :             return false;  // out of memory

	xor	al, al
	jmp	$LN8@InsertChar
$LN4@InsertChar:

; 7363 :     }
; 7364 : 
; 7365 :     assert( m_nBufferSize >= 2 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 2
	jge	SHORT $LN11@InsertChar
	mov	ecx, DWORD PTR ?__LINE__Var@?1??InsertChar@CUniBuffer@@QAE_NHD@Z@4JA
	add	ecx, 16					; 00000010H
	push	ecx
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1CG@LHICNCCG@?$AAm?$AA_?$AAn?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@InsertChar:

; 7366 : 
; 7367 :     // Shift the characters after the index, start by copying the null terminator
; 7368 :     TCHAR* dest = m_pwszBuffer + lstrlenA(m_pwszBuffer)+1;

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _dest$[ebp], edx

; 7369 :     TCHAR* stop = m_pwszBuffer + nIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _nIndex$[ebp]
	mov	DWORD PTR _stop$[ebp], ecx

; 7370 :     TCHAR* src = dest - 1;

	mov	eax, DWORD PTR _dest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _src$[ebp], eax
$LN2@InsertChar:

; 7371 : 
; 7372 :     while( dest > stop )

	mov	eax, DWORD PTR _dest$[ebp]
	cmp	eax, DWORD PTR _stop$[ebp]
	jbe	SHORT $LN1@InsertChar

; 7373 :     {
; 7374 :         *dest-- = *src--;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _dest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _dest$[ebp], eax
	mov	ecx, DWORD PTR _src$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx

; 7375 :     }

	jmp	SHORT $LN2@InsertChar
$LN1@InsertChar:

; 7376 : 
; 7377 :     // Set new character
; 7378 :     m_pwszBuffer[ nIndex ] = tchr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	mov	al, BYTE PTR _tchr$[ebp]
	mov	BYTE PTR [ecx+edx], al

; 7379 :     m_bAnalyseRequired = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 7380 : 
; 7381 :     return true;

	mov	al, 1
$LN8@InsertChar:

; 7382 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InsertChar@CUniBuffer@@QAE_NHD@Z ENDP			; CUniBuffer::InsertChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Clear@CUniBuffer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Clear@CUniBuffer@@QAEXXZ PROC				; CUniBuffer::Clear, COMDAT
; _this$ = ecx

; 7338 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7339 :     *m_pwszBuffer = L'\0';

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx], 0

; 7340 :     m_bAnalyseRequired = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 7341 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CUniBuffer@@QAEXXZ ENDP				; CUniBuffer::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetFontNode@CUniBuffer@@QAEXPAUDXUTFontNode@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pFontNode$ = 8						; size = 4
?SetFontNode@CUniBuffer@@QAEXPAUDXUTFontNode@@@Z PROC	; CUniBuffer::SetFontNode, COMDAT
; _this$ = ecx

; 780  :     void SetFontNode( DXUTFontNode *pFontNode ) { m_pFontNode = pFontNode; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pFontNode$[ebp]
	mov	DWORD PTR [eax+8], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFontNode@CUniBuffer@@QAEXPAUDXUTFontNode@@@Z ENDP	; CUniBuffer::SetFontNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??ACUniBuffer@@QAEAADH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
??ACUniBuffer@@QAEAADH@Z PROC				; CUniBuffer::operator[], COMDAT
; _this$ = ecx

; 7327 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7328 :     // This version of operator[] is called only
; 7329 :     // if we are asking for write access, so
; 7330 :     // re-analysis is required.
; 7331 :     m_bAnalyseRequired = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 7332 :     return m_pwszBuffer[n];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _n$[ebp]

; 7333 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ACUniBuffer@@QAEAADH@Z ENDP				; CUniBuffer::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetBuffer@CUniBuffer@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetBuffer@CUniBuffer@@QAEPBDXZ PROC			; CUniBuffer::GetBuffer, COMDAT
; _this$ = ecx

; 776  :     const TCHAR* GetBuffer() { return m_pwszBuffer; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBuffer@CUniBuffer@@QAEPBDXZ ENDP			; CUniBuffer::GetBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetTextSize@CUniBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTextSize@CUniBuffer@@QAEHXZ PROC			; CUniBuffer::GetTextSize, COMDAT
; _this$ = ecx

; 775  :     int  GetTextSize()  { return strlen( m_pwszBuffer ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strlen
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextSize@CUniBuffer@@QAEHXZ ENDP			; CUniBuffer::GetTextSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetBufferSize@CUniBuffer@@QAE_NH@Z
_TEXT	SEGMENT
tv74 = -260						; size = 4
tv76 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_pTempBuffer$ = -32					; size = 4
_nAllocateSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewSize$ = 8						; size = 4
?SetBufferSize@CUniBuffer@@QAE_NH@Z PROC		; CUniBuffer::SetBufferSize, COMDAT
; _this$ = ecx

; 7233 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7234 :     // If the current size is already the maximum allowed,
; 7235 :     // we can't possibly allocate more.
; 7236 :     if( m_nBufferSize == DXUT_MAX_EDITBOXLENGTH )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 65535		; 0000ffffH
	jne	SHORT $LN5@SetBufferS

; 7237 :         return false;

	xor	al, al
	jmp	$LN6@SetBufferS
$LN5@SetBufferS:

; 7238 : 
; 7239 :     int nAllocateSize = ( nNewSize == -1 || nNewSize < m_nBufferSize * 2 ) ? ( m_nBufferSize ? m_nBufferSize * 2 : 256 ) : nNewSize * 2;

	cmp	DWORD PTR _nNewSize$[ebp], -1
	je	SHORT $LN8@SetBufferS
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	cmp	DWORD PTR _nNewSize$[ebp], ecx
	jl	SHORT $LN8@SetBufferS
	mov	edx, DWORD PTR _nNewSize$[ebp]
	shl	edx, 1
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN11@SetBufferS
$LN8@SetBufferS:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN9@SetBufferS
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 1
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN10@SetBufferS
$LN9@SetBufferS:
	mov	DWORD PTR tv74[ebp], 256		; 00000100H
$LN10@SetBufferS:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv76[ebp], eax
$LN11@SetBufferS:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _nAllocateSize$[ebp], ecx

; 7240 : 
; 7241 :     // Cap the buffer size at the maximum allowed.
; 7242 :     if( nAllocateSize > DXUT_MAX_EDITBOXLENGTH )

	cmp	DWORD PTR _nAllocateSize$[ebp], 65535	; 0000ffffH
	jle	SHORT $LN4@SetBufferS

; 7243 :         nAllocateSize = DXUT_MAX_EDITBOXLENGTH;

	mov	DWORD PTR _nAllocateSize$[ebp], 65535	; 0000ffffH
$LN4@SetBufferS:

; 7244 : 
; 7245 :     TCHAR *pTempBuffer = new TCHAR[nAllocateSize];

	mov	eax, DWORD PTR _nAllocateSize$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pTempBuffer$[ebp], ecx

; 7246 :     if( !pTempBuffer )

	cmp	DWORD PTR _pTempBuffer$[ebp], 0
	jne	SHORT $LN3@SetBufferS

; 7247 :         return false;

	xor	al, al
	jmp	SHORT $LN6@SetBufferS
$LN3@SetBufferS:

; 7248 :     if( m_pwszBuffer )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetBufferS

; 7249 :     {
; 7250 :         CopyMemory( pTempBuffer, m_pwszBuffer, m_nBufferSize * sizeof(TCHAR) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTempBuffer$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 7251 :         delete[] m_pwszBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 7252 :     }
; 7253 :     else

	jmp	SHORT $LN1@SetBufferS
$LN2@SetBufferS:

; 7254 :     {
; 7255 :         ZeroMemory( pTempBuffer, sizeof(TCHAR) * nAllocateSize );

	mov	eax, DWORD PTR _nAllocateSize$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pTempBuffer$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@SetBufferS:

; 7256 :     }
; 7257 : 
; 7258 :     m_pwszBuffer = pTempBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTempBuffer$[ebp]
	mov	DWORD PTR [eax], ecx

; 7259 :     m_nBufferSize = nAllocateSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nAllocateSize$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 7260 :     return true;

	mov	al, 1
$LN6@SetBufferS:

; 7261 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBufferSize@CUniBuffer@@QAE_NH@Z ENDP		; CUniBuffer::SetBufferSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetBufferSize@CUniBuffer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetBufferSize@CUniBuffer@@QAEHXZ PROC			; CUniBuffer::GetBufferSize, COMDAT
; _this$ = ecx

; 773  :     int  GetBufferSize() { return m_nBufferSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBufferSize@CUniBuffer@@QAEHXZ ENDP			; CUniBuffer::GetBufferSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Uninitialize@CUniBuffer@@SAXXZ
_TEXT	SEGMENT
?Uninitialize@CUniBuffer@@SAXXZ PROC			; CUniBuffer::Uninitialize, COMDAT

; 7214 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 7215 :     if( s_hDll )

	cmp	DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A, 0 ; CUniBuffer::s_hDll
	je	SHORT $LN2@Uninitiali

; 7216 :     {
; 7217 :         PLACEHOLDERPROC( ScriptApplyDigitSubstitution );

	mov	DWORD PTR ?_ScriptApplyDigitSubstitution@CUniBuffer@@0P6GJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@ZA, OFFSET ?Dummy_ScriptApplyDigitSubstitution@CUniBuffer@@CGJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@Z ; CUniBuffer::_ScriptApplyDigitSubstitution, CUniBuffer::Dummy_ScriptApplyDigitSubstitution

; 7218 :         PLACEHOLDERPROC( ScriptStringAnalyse );

	mov	DWORD PTR ?_ScriptStringAnalyse@CUniBuffer@@0P6GJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@ZA, OFFSET ?Dummy_ScriptStringAnalyse@CUniBuffer@@CGJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@Z ; CUniBuffer::_ScriptStringAnalyse, CUniBuffer::Dummy_ScriptStringAnalyse

; 7219 :         PLACEHOLDERPROC( ScriptStringCPtoX );

	mov	DWORD PTR ?_ScriptStringCPtoX@CUniBuffer@@0P6GJPAXHHPAH@ZA, OFFSET ?Dummy_ScriptStringCPtoX@CUniBuffer@@CGJPAXHHPAH@Z ; CUniBuffer::_ScriptStringCPtoX, CUniBuffer::Dummy_ScriptStringCPtoX

; 7220 :         PLACEHOLDERPROC( ScriptStringXtoCP );

	mov	DWORD PTR ?_ScriptStringXtoCP@CUniBuffer@@0P6GJPAXHPAH1@ZA, OFFSET ?Dummy_ScriptStringXtoCP@CUniBuffer@@CGJPAXHPAH1@Z ; CUniBuffer::_ScriptStringXtoCP, CUniBuffer::Dummy_ScriptStringXtoCP

; 7221 :         PLACEHOLDERPROC( ScriptStringFree );

	mov	DWORD PTR ?_ScriptStringFree@CUniBuffer@@0P6GJPAPAX@ZA, OFFSET ?Dummy_ScriptStringFree@CUniBuffer@@CGJPAPAX@Z ; CUniBuffer::_ScriptStringFree, CUniBuffer::Dummy_ScriptStringFree

; 7222 :         PLACEHOLDERPROC( ScriptString_pLogAttr );

	mov	DWORD PTR ?_ScriptString_pLogAttr@CUniBuffer@@0P6GPBUtag_SCRIPT_LOGATTR@@PAX@ZA, OFFSET ?Dummy_ScriptString_pLogAttr@CUniBuffer@@CGPBUtag_SCRIPT_LOGATTR@@PAX@Z ; CUniBuffer::_ScriptString_pLogAttr, CUniBuffer::Dummy_ScriptString_pLogAttr

; 7223 :         PLACEHOLDERPROC( ScriptString_pcOutChars );

	mov	DWORD PTR ?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA, OFFSET ?Dummy_ScriptString_pcOutChars@CUniBuffer@@CGPBHPAX@Z ; CUniBuffer::_ScriptString_pcOutChars, CUniBuffer::Dummy_ScriptString_pcOutChars

; 7224 : 
; 7225 :         FreeLibrary( s_hDll );

	mov	esi, esp
	mov	eax, DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A ; CUniBuffer::s_hDll
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 7226 :         s_hDll = NULL;

	mov	DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A, 0 ; CUniBuffer::s_hDll
$LN2@Uninitiali:

; 7227 :     }
; 7228 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Uninitialize@CUniBuffer@@SAXXZ ENDP			; CUniBuffer::Uninitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Initialize@CUniBuffer@@SAXXZ
_TEXT	SEGMENT
_Temp$1 = -308						; size = 4
_len2$ = -296						; size = 4
_len1$ = -284						; size = 4
_wszPath$ = -272					; size = 261
__$ArrayPad$ = -4					; size = 4
?Initialize@CUniBuffer@@SAXXZ PROC			; CUniBuffer::Initialize, COMDAT

; 7177 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 7178 :     if( s_hDll ) // Only need to do once

	cmp	DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A, 0 ; CUniBuffer::s_hDll
	je	SHORT $LN11@Initialize

; 7179 :         return;

	jmp	$LN12@Initialize
$LN11@Initialize:

; 7180 : 
; 7181 :     TCHAR wszPath[MAX_PATH+1];
; 7182 :     if( !::GetSystemDirectory( wszPath, MAX_PATH+1 ) )

	mov	esi, esp
	push	261					; 00000105H
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN10@Initialize

; 7183 :         return;

	jmp	$LN12@Initialize
$LN10@Initialize:

; 7184 : 
; 7185 :     // Verify whether it is safe to concatenate these strings
; 7186 :     int len1 = lstrlen(wszPath);

	mov	esi, esp
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len1$[ebp], eax

; 7187 :     int len2 = lstrlen(UNISCRIBE_DLLNAME);

	mov	esi, esp
	push	OFFSET ??_C@_0L@NLJMGPDJ@?2usp10?4dll?$AA@
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len2$[ebp], eax

; 7188 :     if (len1 + len2 > MAX_PATH)

	mov	eax, DWORD PTR _len1$[ebp]
	add	eax, DWORD PTR _len2$[ebp]
	cmp	eax, 260				; 00000104H
	jle	SHORT $LN9@Initialize

; 7189 :     {
; 7190 :         return;

	jmp	$LN12@Initialize
$LN9@Initialize:

; 7191 :     }
; 7192 : 
; 7193 :     // We have verified that the concatenated string will fit into wszPath,
; 7194 :     // so it is safe to concatenate them.
; 7195 :     StringCchCat( wszPath, MAX_PATH, UNISCRIBE_DLLNAME );

	push	OFFSET ??_C@_0L@NLJMGPDJ@?2usp10?4dll?$AA@
	push	260					; 00000104H
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA

; 7196 : 
; 7197 :     s_hDll = LoadLibrary( wszPath );

	mov	esi, esp
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadLibraryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A, eax ; CUniBuffer::s_hDll

; 7198 :     if( s_hDll )

	cmp	DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A, 0 ; CUniBuffer::s_hDll
	je	$LN12@Initialize

; 7199 :     {
; 7200 :         FARPROC Temp;
; 7201 :         GETPROCADDRESS( s_hDll, ScriptApplyDigitSubstitution, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BN@GIMDAPPD@ScriptApplyDigitSubstitution?$AA@
	mov	eax, DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A ; CUniBuffer::s_hDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$1[ebp], eax
	cmp	DWORD PTR _Temp$1[ebp], 0
	je	SHORT $LN7@Initialize
	mov	eax, DWORD PTR _Temp$1[ebp]
	mov	DWORD PTR ?_ScriptApplyDigitSubstitution@CUniBuffer@@0P6GJPBUtag_SCRIPT_DIGITSUBSTITUTE@@PAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@@ZA, eax ; CUniBuffer::_ScriptApplyDigitSubstitution
$LN7@Initialize:

; 7202 :         GETPROCADDRESS( s_hDll, ScriptStringAnalyse, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BE@DPDJMHJ@ScriptStringAnalyse?$AA@
	mov	eax, DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A ; CUniBuffer::s_hDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$1[ebp], eax
	cmp	DWORD PTR _Temp$1[ebp], 0
	je	SHORT $LN6@Initialize
	mov	eax, DWORD PTR _Temp$1[ebp]
	mov	DWORD PTR ?_ScriptStringAnalyse@CUniBuffer@@0P6GJPAUHDC__@@PBXHHHKHPAUtag_SCRIPT_CONTROL@@PAUtag_SCRIPT_STATE@@PBHPAUtag_SCRIPT_TABDEF@@PBEPAPAX@ZA, eax ; CUniBuffer::_ScriptStringAnalyse
$LN6@Initialize:

; 7203 :         GETPROCADDRESS( s_hDll, ScriptStringCPtoX, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BC@NCOCHMDF@ScriptStringCPtoX?$AA@
	mov	eax, DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A ; CUniBuffer::s_hDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$1[ebp], eax
	cmp	DWORD PTR _Temp$1[ebp], 0
	je	SHORT $LN5@Initialize
	mov	eax, DWORD PTR _Temp$1[ebp]
	mov	DWORD PTR ?_ScriptStringCPtoX@CUniBuffer@@0P6GJPAXHHPAH@ZA, eax ; CUniBuffer::_ScriptStringCPtoX
$LN5@Initialize:

; 7204 :         GETPROCADDRESS( s_hDll, ScriptStringXtoCP, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BC@PBCEOCLL@ScriptStringXtoCP?$AA@
	mov	eax, DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A ; CUniBuffer::s_hDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$1[ebp], eax
	cmp	DWORD PTR _Temp$1[ebp], 0
	je	SHORT $LN4@Initialize
	mov	eax, DWORD PTR _Temp$1[ebp]
	mov	DWORD PTR ?_ScriptStringXtoCP@CUniBuffer@@0P6GJPAXHPAH1@ZA, eax ; CUniBuffer::_ScriptStringXtoCP
$LN4@Initialize:

; 7205 :         GETPROCADDRESS( s_hDll, ScriptStringFree, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BB@KPJJNIOI@ScriptStringFree?$AA@
	mov	eax, DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A ; CUniBuffer::s_hDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$1[ebp], eax
	cmp	DWORD PTR _Temp$1[ebp], 0
	je	SHORT $LN3@Initialize
	mov	eax, DWORD PTR _Temp$1[ebp]
	mov	DWORD PTR ?_ScriptStringFree@CUniBuffer@@0P6GJPAPAX@ZA, eax ; CUniBuffer::_ScriptStringFree
$LN3@Initialize:

; 7206 :         GETPROCADDRESS( s_hDll, ScriptString_pLogAttr, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BG@ENNDDIIO@ScriptString_pLogAttr?$AA@
	mov	eax, DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A ; CUniBuffer::s_hDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$1[ebp], eax
	cmp	DWORD PTR _Temp$1[ebp], 0
	je	SHORT $LN2@Initialize
	mov	eax, DWORD PTR _Temp$1[ebp]
	mov	DWORD PTR ?_ScriptString_pLogAttr@CUniBuffer@@0P6GPBUtag_SCRIPT_LOGATTR@@PAX@ZA, eax ; CUniBuffer::_ScriptString_pLogAttr
$LN2@Initialize:

; 7207 :         GETPROCADDRESS( s_hDll, ScriptString_pcOutChars, Temp );

	mov	esi, esp
	push	OFFSET ??_C@_0BI@NIMEAFDJ@ScriptString_pcOutChars?$AA@
	mov	eax, DWORD PTR ?s_hDll@CUniBuffer@@0PAUHINSTANCE__@@A ; CUniBuffer::s_hDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _Temp$1[ebp], eax
	cmp	DWORD PTR _Temp$1[ebp], 0
	je	SHORT $LN12@Initialize
	mov	eax, DWORD PTR _Temp$1[ebp]
	mov	DWORD PTR ?_ScriptString_pcOutChars@CUniBuffer@@0P6GPBHPAX@ZA, eax ; CUniBuffer::_ScriptString_pcOutChars
$LN12@Initialize:

; 7208 :     }
; 7209 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@Initialize:
	DD	1
	DD	$LN15@Initialize
$LN15@Initialize:
	DD	-272					; fffffef0H
	DD	261					; 00000105H
	DD	$LN14@Initialize
$LN14@Initialize:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?Initialize@CUniBuffer@@SAXXZ ENDP			; CUniBuffer::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CUniBuffer@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1CUniBuffer@@QAE@XZ PROC				; CUniBuffer::~CUniBuffer, COMDAT
; _this$ = ecx

; 7318 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7319 :     delete[] m_pwszBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 7320 :     if( m_Analysis )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+13], 0
	je	SHORT $LN2@CUniBuffer

; 7321 :         _ScriptStringFree( &m_Analysis );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 13					; 0000000dH
	mov	esi, esp
	push	eax
	call	DWORD PTR ?_ScriptStringFree@CUniBuffer@@0P6GJPAPAX@ZA ; CUniBuffer::_ScriptStringFree
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CUniBuffer:

; 7322 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CUniBuffer@@QAE@XZ ENDP				; CUniBuffer::~CUniBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CUniBuffer@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nInitialSize$ = 8					; size = 4
??0CUniBuffer@@QAE@H@Z PROC				; CUniBuffer::CUniBuffer, COMDAT
; _this$ = ecx

; 7302 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7303 :     CUniBuffer::Initialize();  // ensure static vars are properly init'ed first

	call	?Initialize@CUniBuffer@@SAXXZ		; CUniBuffer::Initialize

; 7304 : 
; 7305 :     m_nBufferSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 7306 :     m_pwszBuffer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 7307 :     m_bAnalyseRequired = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 1

; 7308 :     m_Analysis = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+13], 0

; 7309 :     m_pFontNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 7310 :     
; 7311 :     if( nInitialSize > 0 )

	cmp	DWORD PTR _nInitialSize$[ebp], 0
	jle	SHORT $LN2@CUniBuffer

; 7312 :         SetBufferSize( nInitialSize );

	mov	eax, DWORD PTR _nInitialSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetBufferSize@CUniBuffer@@QAE_NH@Z	; CUniBuffer::SetBufferSize
$LN2@CUniBuffer:

; 7313 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CUniBuffer@@QAE@H@Z ENDP				; CUniBuffer::CUniBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTSlider@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTSlider@@UAEPAXI@Z PROC				; CDXUTSlider::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTSlider@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTSlider@@UAEPAXI@Z ENDP				; CDXUTSlider::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CDXUTSlider@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CDXUTSlider@@UAE@XZ PROC				; CDXUTSlider::~CDXUTSlider, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTSlider@@UAE@XZ ENDP				; CDXUTSlider::~CDXUTSlider
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ValueFromPos@CDXUTSlider@@IAEHH@Z
_TEXT	SEGMENT
tv136 = -220						; size = 4
_fValuePerPixel$ = -20					; size = 4
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?ValueFromPos@CDXUTSlider@@IAEHH@Z PROC			; CDXUTSlider::ValueFromPos, COMDAT
; _this$ = ecx

; 3510 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3511 :     float fValuePerPixel = (float)(m_nMax - m_nMin) / RectWidth( m_rcBoundingBox );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+85]
	sub	edx, DWORD PTR [ecx+81]
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	push	eax
	movss	DWORD PTR tv136[ebp], xmm0
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv136[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _fValuePerPixel$[ebp], xmm1

; 3512 :     return (int) (0.5f + m_nMin + fValuePerPixel * (x - m_rcBoundingBox.left)) ; 

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+81]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, DWORD PTR [ecx+61]
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR _fValuePerPixel$[ebp]
	addss	xmm0, xmm1
	cvttss2si eax, xmm0

; 3513 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ValueFromPos@CDXUTSlider@@IAEHH@Z ENDP			; CDXUTSlider::ValueFromPos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetValueInternal@CDXUTSlider@@IAEXH_N@Z
_TEXT	SEGMENT
tv71 = -208						; size = 4
tv67 = -208						; size = 4
_this$ = -8						; size = 4
_nValue$ = 8						; size = 4
_bFromInput$ = 12					; size = 1
?SetValueInternal@CDXUTSlider@@IAEXH_N@Z PROC		; CDXUTSlider::SetValueInternal, COMDAT
; _this$ = ecx

; 3652 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3653 :     // Clamp to range
; 3654 :     nValue = __max( m_nMin, nValue );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+81]
	cmp	ecx, DWORD PTR _nValue$[ebp]
	jle	SHORT $LN4@SetValueIn
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+81]
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $LN5@SetValueIn
$LN4@SetValueIn:
	mov	ecx, DWORD PTR _nValue$[ebp]
	mov	DWORD PTR tv67[ebp], ecx
$LN5@SetValueIn:
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _nValue$[ebp], edx

; 3655 :     nValue = __min( m_nMax, nValue );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+85]
	cmp	ecx, DWORD PTR _nValue$[ebp]
	jge	SHORT $LN6@SetValueIn
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+85]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN7@SetValueIn
$LN6@SetValueIn:
	mov	ecx, DWORD PTR _nValue$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN7@SetValueIn:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _nValue$[ebp], edx

; 3656 :     
; 3657 :     if( nValue == m_nValue )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nValue$[ebp]
	cmp	ecx, DWORD PTR [eax+77]
	jne	SHORT $LN1@SetValueIn

; 3658 :         return;

	jmp	SHORT $LN2@SetValueIn
$LN1@SetValueIn:

; 3659 : 
; 3660 :     m_nValue = nValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nValue$[ebp]
	mov	DWORD PTR [eax+77], ecx

; 3661 :     UpdateRects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3662 : 
; 3663 :     m_pDialog->SendEvent( EVENT_SLIDER_VALUE_CHANGED, bFromInput, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bFromInput$[ebp]
	push	ecx
	push	1281					; 00000501H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN2@SetValueIn:

; 3664 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ENDP		; CDXUTSlider::SetValueInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetRange@CDXUTSlider@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nMin$ = 8						; size = 4
_nMax$ = 12						; size = 4
?SetRange@CDXUTSlider@@QAEXHH@Z PROC			; CDXUTSlider::SetRange, COMDAT
; _this$ = ecx

; 3642 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3643 :     m_nMin = nMin;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nMin$[ebp]
	mov	DWORD PTR [eax+81], ecx

; 3644 :     m_nMax = nMax;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nMax$[ebp]
	mov	DWORD PTR [eax+85], ecx

; 3645 : 
; 3646 :     SetValueInternal( m_nValue, false );

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+77]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal

; 3647 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRange@CDXUTSlider@@QAEXHH@Z ENDP			; CDXUTSlider::SetRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetValue@CDXUTSlider@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nValue$ = 8						; size = 4
?SetValue@CDXUTSlider@@QAEXH@Z PROC			; CDXUTSlider::SetValue, COMDAT
; _this$ = ecx

; 737  :     void SetValue( int nValue ) { SetValueInternal( nValue, false ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	eax, DWORD PTR _nValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetValue@CDXUTSlider@@QAEXH@Z ENDP			; CDXUTSlider::SetValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTSlider@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv128 = -268						; size = 4
_pElement$ = -68					; size = 4
_fBlendRate$ = -56					; size = 4
_iState$ = -44						; size = 4
_nOffsetY$ = -32					; size = 4
_nOffsetX$ = -20					; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTSlider@@UAEXPAUIDirect3DDevice9@@M@Z PROC	; CDXUTSlider::Render, COMDAT
; _this$ = ecx

; 3669 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3670 :     int nOffsetX = 0;

	mov	DWORD PTR _nOffsetX$[ebp], 0

; 3671 :     int nOffsetY = 0;

	mov	DWORD PTR _nOffsetY$[ebp], 0

; 3672 : 
; 3673 :     DXUT_CONTROL_STATE iState = DXUT_STATE_NORMAL;

	mov	DWORD PTR _iState$[ebp], 0

; 3674 : 
; 3675 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN9@Render

; 3676 :     {
; 3677 :         iState = DXUT_STATE_HIDDEN;

	mov	DWORD PTR _iState$[ebp], 2
	jmp	SHORT $LN1@Render
$LN9@Render:

; 3678 :     }
; 3679 :     else if( m_bEnabled == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN7@Render

; 3680 :     {
; 3681 :         iState = DXUT_STATE_DISABLED;

	mov	DWORD PTR _iState$[ebp], 1
	jmp	SHORT $LN1@Render
$LN7@Render:

; 3682 :     }
; 3683 :     else if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+101]
	test	ecx, ecx
	je	SHORT $LN5@Render

; 3684 :     {
; 3685 :         iState = DXUT_STATE_PRESSED;

	mov	DWORD PTR _iState$[ebp], 5

; 3686 : 
; 3687 :         nOffsetX = 1;

	mov	DWORD PTR _nOffsetX$[ebp], 1

; 3688 :         nOffsetY = 2;

	mov	DWORD PTR _nOffsetY$[ebp], 2
	jmp	SHORT $LN1@Render
$LN5@Render:

; 3689 :     }
; 3690 :     else if( m_bMouseOver )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	test	ecx, ecx
	je	SHORT $LN3@Render

; 3691 :     {
; 3692 :         iState = DXUT_STATE_MOUSEOVER;

	mov	DWORD PTR _iState$[ebp], 4

; 3693 :         
; 3694 :         nOffsetX = -1;

	mov	DWORD PTR _nOffsetX$[ebp], -1

; 3695 :         nOffsetY = -2;

	mov	DWORD PTR _nOffsetY$[ebp], -2		; fffffffeH
	jmp	SHORT $LN1@Render
$LN3@Render:

; 3696 :     }
; 3697 :     else if( m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	je	SHORT $LN1@Render

; 3698 :     {
; 3699 :         iState = DXUT_STATE_FOCUS;

	mov	DWORD PTR _iState$[ebp], 3
$LN1@Render:

; 3700 :     }
; 3701 : 
; 3702 :     float fBlendRate = ( iState == DXUT_STATE_PRESSED ) ? 0.0f : 0.8f;

	cmp	DWORD PTR _iState$[ebp], 5
	jne	SHORT $LN12@Render
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN13@Render
$LN12@Render:
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR tv128[ebp], xmm0
$LN13@Render:
	movss	xmm0, DWORD PTR tv128[ebp]
	movss	DWORD PTR _fBlendRate$[ebp], xmm0

; 3703 : 
; 3704 :     CDXUTElement* pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 3705 :     
; 3706 :     // Blend current color
; 3707 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate ); 

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 3708 :     m_pDialog->DrawSprite( pElement, &m_rcBoundingBox );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 3709 : 
; 3710 :     //TODO: remove magic numbers
; 3711 :     pElement = m_Elements.GetAt( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 3712 :        
; 3713 :     // Blend current color
; 3714 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 3715 :     m_pDialog->DrawSprite( pElement, &m_rcButton );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 102				; 00000066H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 3716 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Render@CDXUTSlider@@UAEXPAUIDirect3DDevice9@@M@Z ENDP	; CDXUTSlider::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateRects@CDXUTSlider@@UAEXXZ
_TEXT	SEGMENT
tv196 = -208						; size = 4
_this$ = -8						; size = 4
?UpdateRects@CDXUTSlider@@UAEXXZ PROC			; CDXUTSlider::UpdateRects, COMDAT
; _this$ = ecx

; 3498 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3499 :     CDXUTControl::UpdateRects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateRects@CDXUTControl@@MAEXXZ	; CDXUTControl::UpdateRects

; 3500 : 
; 3501 :     m_rcButton = m_rcBoundingBox;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 102				; 00000066H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 3502 :     m_rcButton.right = m_rcButton.left + RectHeight( m_rcButton );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 102				; 00000066H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+102]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+110], eax

; 3503 :     OffsetRect( &m_rcButton, -RectWidth( m_rcButton )/2, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 102				; 00000066H
	push	eax
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	neg	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 102				; 00000066H
	push	ecx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3504 : 
; 3505 :     m_nButtonX = (int) ( (m_nValue - m_nMin) * (float)RectWidth( m_rcBoundingBox ) / (m_nMax - m_nMin) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+77]
	sub	edx, DWORD PTR [ecx+81]
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	push	eax
	movss	DWORD PTR tv196[ebp], xmm0
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv196[ebp]
	mulss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+85]
	sub	eax, DWORD PTR [edx+81]
	cvtsi2ss xmm0, eax
	divss	xmm1, xmm0
	cvttss2si ecx, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+97], ecx

; 3506 :     OffsetRect( &m_rcButton, m_nButtonX, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+97]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 102				; 00000066H
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3507 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRects@CDXUTSlider@@UAEXXZ ENDP			; CDXUTSlider::UpdateRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTSlider@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTSlider@@UAE_NIUtagPOINT@@IJ@Z PROC	; CDXUTSlider::HandleMouse, COMDAT
; _this$ = ecx

; 3558 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3559 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN14@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN15@HandleMous
$LN14@HandleMous:

; 3560 :         return false;

	xor	al, al
	jmp	$LN16@HandleMous
$LN15@HandleMous:

; 3561 : 
; 3562 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR tv78[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv78[ebp], ecx
	cmp	DWORD PTR tv78[ebp], 3
	ja	$LN12@HandleMous
	mov	edx, DWORD PTR tv78[ebp]
	jmp	DWORD PTR $LN18@HandleMous[edx*4]
$LN11@HandleMous:

; 3563 :     {
; 3564 :         case WM_LBUTTONDOWN:
; 3565 :         case WM_LBUTTONDBLCLK:
; 3566 :         {
; 3567 :             if( PtInRect( &m_rcButton, pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 102				; 00000066H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN10@HandleMous

; 3568 :             {
; 3569 :                 // Pressed while inside the control
; 3570 :                 m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+101], 1

; 3571 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3572 : 
; 3573 :                 m_nDragX = pt.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR [eax+89], ecx

; 3574 :                 //m_nDragY = pt.y;
; 3575 :                 m_nDragOffset = m_nButtonX - m_nDragX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+97]
	sub	edx, DWORD PTR [ecx+89]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+93], edx

; 3576 : 
; 3577 :                 //m_nDragValue = m_nValue;
; 3578 : 
; 3579 :                 if( !m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN9@HandleMous

; 3580 :                     m_pDialog->RequestFocus( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
$LN9@HandleMous:

; 3581 : 
; 3582 :                 return true;

	mov	al, 1
	jmp	$LN16@HandleMous
$LN10@HandleMous:

; 3583 :             }
; 3584 : 
; 3585 :             if( PtInRect( &m_rcBoundingBox, pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 61					; 0000003dH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN8@HandleMous

; 3586 :             {
; 3587 :                 m_nDragX = pt.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR [eax+89], ecx

; 3588 :                 m_nDragOffset = 0;               

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+93], 0

; 3589 :                 m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+101], 1

; 3590 :                 
; 3591 :                 if( !m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN7@HandleMous

; 3592 :                     m_pDialog->RequestFocus( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
$LN7@HandleMous:

; 3593 : 
; 3594 :                 if( pt.x > m_nButtonX + m_x )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+97]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	cmp	DWORD PTR _pt$[ebp], ecx
	jle	SHORT $LN6@HandleMous

; 3595 :                 {
; 3596 :                     SetValueInternal( m_nValue + 1, true );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+77]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal

; 3597 :                     return true;

	mov	al, 1
	jmp	$LN16@HandleMous
$LN6@HandleMous:

; 3598 :                 }
; 3599 : 
; 3600 :                 if( pt.x < m_nButtonX + m_x )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+97]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	cmp	DWORD PTR _pt$[ebp], ecx
	jge	SHORT $LN8@HandleMous

; 3601 :                 {
; 3602 :                     SetValueInternal( m_nValue - 1, true );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+77]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal

; 3603 :                     return true;

	mov	al, 1
	jmp	SHORT $LN16@HandleMous
$LN8@HandleMous:

; 3604 :                 }
; 3605 :             }
; 3606 : 
; 3607 :             break;

	jmp	SHORT $LN12@HandleMous
$LN4@HandleMous:

; 3608 :         }
; 3609 : 
; 3610 :         case WM_LBUTTONUP:
; 3611 :         {
; 3612 :             if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+101]
	test	ecx, ecx
	je	SHORT $LN3@HandleMous

; 3613 :             {
; 3614 :                 m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+101], 0

; 3615 :                 ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3616 :                 m_pDialog->SendEvent( EVENT_SLIDER_VALUE_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1281					; 00000501H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 3617 : 
; 3618 :                 return true;

	mov	al, 1
	jmp	SHORT $LN16@HandleMous
$LN3@HandleMous:

; 3619 :             }
; 3620 : 
; 3621 :             break;

	jmp	SHORT $LN12@HandleMous
$LN2@HandleMous:

; 3622 :         }
; 3623 : 
; 3624 :         case WM_MOUSEMOVE:
; 3625 :         {
; 3626 :             if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+101]
	test	ecx, ecx
	je	SHORT $LN12@HandleMous

; 3627 :             {
; 3628 :                 SetValueInternal( ValueFromPos( m_x + pt.x + m_nDragOffset ), true );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _pt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+93]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValueFromPos@CDXUTSlider@@IAEHH@Z	; CDXUTSlider::ValueFromPos
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal

; 3629 :                 return true;

	mov	al, 1
	jmp	SHORT $LN16@HandleMous
$LN12@HandleMous:

; 3630 :             }
; 3631 : 
; 3632 :             break;
; 3633 :         }
; 3634 :     };
; 3635 :     
; 3636 :     return false;

	xor	al, al
$LN16@HandleMous:

; 3637 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN18@HandleMous:
	DD	$LN2@HandleMous
	DD	$LN11@HandleMous
	DD	$LN4@HandleMous
	DD	$LN11@HandleMous
?HandleMouse@CDXUTSlider@@UAE_NIUtagPOINT@@IJ@Z ENDP	; CDXUTSlider::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleKeyboard@CDXUTSlider@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv79 = -208						; size = 4
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTSlider@@UAE_NIIJ@Z PROC		; CDXUTSlider::HandleKeyboard, COMDAT
; _this$ = ecx

; 3517 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3518 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN10@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN11@HandleKeyb
$LN10@HandleKeyb:

; 3519 :         return false;

	xor	al, al
	jmp	$LN12@HandleKeyb
$LN11@HandleKeyb:

; 3520 : 
; 3521 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 256		; 00000100H
	je	SHORT $LN7@HandleKeyb
	jmp	$LN8@HandleKeyb
$LN7@HandleKeyb:

; 3522 :     {
; 3523 :         case WM_KEYDOWN:
; 3524 :         {
; 3525 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	mov	ecx, DWORD PTR tv79[ebp]
	sub	ecx, 33					; 00000021H
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 7
	ja	SHORT $LN8@HandleKeyb
	mov	edx, DWORD PTR tv79[ebp]
	jmp	DWORD PTR $LN14@HandleKeyb[edx*4]
$LN4@HandleKeyb:

; 3526 :             {
; 3527 :                 case VK_HOME:
; 3528 :                     SetValueInternal( m_nMin, true );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+81]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal

; 3529 :                     return true;

	mov	al, 1
	jmp	SHORT $LN12@HandleKeyb
$LN3@HandleKeyb:

; 3530 : 
; 3531 :                 case VK_END:
; 3532 :                     SetValueInternal( m_nMax, true );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+85]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal

; 3533 :                     return true;

	mov	al, 1
	jmp	SHORT $LN12@HandleKeyb
$LN2@HandleKeyb:

; 3534 : 
; 3535 :                 case VK_PRIOR:
; 3536 :                 case VK_LEFT:
; 3537 :                 case VK_DOWN:
; 3538 :                     SetValueInternal( m_nValue - 1, true );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+77]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal

; 3539 :                     return true;

	mov	al, 1
	jmp	SHORT $LN12@HandleKeyb
$LN1@HandleKeyb:

; 3540 : 
; 3541 :                 case VK_NEXT:
; 3542 :                 case VK_RIGHT:
; 3543 :                 case VK_UP:
; 3544 :                     SetValueInternal( m_nValue + 1, true );

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+77]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValueInternal@CDXUTSlider@@IAEXH_N@Z ; CDXUTSlider::SetValueInternal

; 3545 :                     return true;

	mov	al, 1
	jmp	SHORT $LN12@HandleKeyb
$LN8@HandleKeyb:

; 3546 :             }
; 3547 :             break;
; 3548 :         }
; 3549 :     }
; 3550 :     
; 3551 : 
; 3552 :     return false;

	xor	al, al
$LN12@HandleKeyb:

; 3553 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN14@HandleKeyb:
	DD	$LN2@HandleKeyb
	DD	$LN1@HandleKeyb
	DD	$LN3@HandleKeyb
	DD	$LN4@HandleKeyb
	DD	$LN2@HandleKeyb
	DD	$LN1@HandleKeyb
	DD	$LN1@HandleKeyb
	DD	$LN2@HandleKeyb
?HandleKeyboard@CDXUTSlider@@UAE_NIIJ@Z ENDP		; CDXUTSlider::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?CanHaveFocus@CDXUTSlider@@UAE_NXZ
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
?CanHaveFocus@CDXUTSlider@@UAE_NXZ PROC			; CDXUTSlider::CanHaveFocus, COMDAT
; _this$ = ecx

; 729  :     virtual bool CanHaveFocus() { return (m_bVisible && m_bEnabled); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@CanHaveFoc
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	test	eax, eax
	je	SHORT $LN3@CanHaveFoc
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@CanHaveFoc
$LN3@CanHaveFoc:
	mov	DWORD PTR tv78[ebp], 0
$LN4@CanHaveFoc:
	mov	al, BYTE PTR tv78[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CanHaveFocus@CDXUTSlider@@UAE_NXZ ENDP			; CDXUTSlider::CanHaveFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ContainsPoint@CDXUTSlider@@UAEHUtagPOINT@@@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_pt$ = 8						; size = 8
?ContainsPoint@CDXUTSlider@@UAEHUtagPOINT@@@Z PROC	; CDXUTSlider::ContainsPoint, COMDAT
; _this$ = ecx

; 3490 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3491 :     return ( PtInRect( &m_rcBoundingBox, pt ) || 
; 3492 :              PtInRect( &m_rcButton, pt ) ); 

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 61					; 0000003dH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@ContainsPo
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 102				; 00000066H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@ContainsPo
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN4@ContainsPo
$LN3@ContainsPo:
	mov	DWORD PTR tv78[ebp], 1
$LN4@ContainsPo:
	mov	eax, DWORD PTR tv78[ebp]

; 3493 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ContainsPoint@CDXUTSlider@@UAEHUtagPOINT@@@Z ENDP	; CDXUTSlider::ContainsPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTSlider@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDialog$ = 8						; size = 4
??0CDXUTSlider@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTSlider::CDXUTSlider, COMDAT
; _this$ = ecx

; 3476 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z	; CDXUTControl::CDXUTControl
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTSlider@@6B@

; 3477 :     m_Type = DXUT_CONTROL_SLIDER;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 5

; 3478 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3479 : 
; 3480 :     m_nMin = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+81], 0

; 3481 :     m_nMax = 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+85], 100			; 00000064H

; 3482 :     m_nValue = 50;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+77], 50			; 00000032H

; 3483 : 
; 3484 :     m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+101], 0

; 3485 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDXUTSlider@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTSlider::CDXUTSlider
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTComboBox@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTComboBox@@UAEPAXI@Z PROC			; CDXUTComboBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTComboBox@@UAE@XZ		; CDXUTComboBox::~CDXUTComboBox
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTComboBox@@UAEPAXI@Z ENDP			; CDXUTComboBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@PAUDXUTComboBoxItem@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@PAUDXUTComboBoxItem@@@@IAEJH@Z PROC ; CGrowableArray<DXUTComboBoxItem *>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@PAUDXUTComboBoxItem@@@@IAEJH@Z ENDP ; CGrowableArray<DXUTComboBoxItem *>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEXXZ PROC ; CGrowableArray<DXUTComboBoxItem *>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z ; CGrowableArray<DXUTComboBoxItem *>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEXXZ ENDP ; CGrowableArray<DXUTComboBoxItem *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Remove@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?Remove@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z PROC ; CGrowableArray<DXUTComboBoxItem *>::Remove, COMDAT
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  :     if( nIndex < 0 || 
; 872  :         nIndex >= m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@Remove
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@Remove
$LN1@Remove:

; 873  :     {
; 874  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN5@Remove
	push	874					; 0000036aH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@Remove:

; 875  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 876  :     }
; 877  : 
; 878  :     // Destruct the element to be removed
; 879  :     m_pData[nIndex].~TYPE();
; 880  : 
; 881  :     // Compact the array and decrease the size
; 882  :     MoveMemory( &m_pData[nIndex], &m_pData[nIndex+1], sizeof(TYPE) * (m_nSize - (nIndex+1)) );

	mov	eax, DWORD PTR _nIndex$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _nIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH

; 883  :     --m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 884  : 
; 885  :     return S_OK;

	xor	eax, eax
$LN3@Remove:

; 886  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTComboBoxItem *>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ PROC ; CGrowableArray<DXUTComboBoxItem *>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ENDP ; CGrowableArray<DXUTComboBoxItem *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z PROC ; CGrowableArray<DXUTComboBoxItem *>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ENDP ; CGrowableArray<DXUTComboBoxItem *>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJABQAUDXUTComboBoxItem@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJABQAUDXUTComboBoxItem@@@Z PROC ; CGrowableArray<DXUTComboBoxItem *>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTComboBoxItem@@@@IAEJH@Z ; CGrowableArray<DXUTComboBoxItem *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJABQAUDXUTComboBoxItem@@@Z ENDP ; CGrowableArray<DXUTComboBoxItem *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z PROC ; CGrowableArray<DXUTComboBoxItem *>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTComboBoxItem@@@@IAEJH@Z ; CGrowableArray<DXUTComboBoxItem *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTComboBoxItem *>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ PROC	; CGrowableArray<DXUTComboBoxItem *>::~CGrowableArray<DXUTComboBoxItem *>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEXXZ ; CGrowableArray<DXUTComboBoxItem *>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ ENDP	; CGrowableArray<DXUTComboBoxItem *>::~CGrowableArray<DXUTComboBoxItem *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ PROC	; CGrowableArray<DXUTComboBoxItem *>::CGrowableArray<DXUTComboBoxItem *>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ ENDP	; CGrowableArray<DXUTComboBoxItem *>::CGrowableArray<DXUTComboBoxItem *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetSelectedByData@CDXUTComboBox@@QAEJPAX@Z
_TEXT	SEGMENT
_pItem$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?SetSelectedByData@CDXUTComboBox@@QAEJPAX@Z PROC	; CDXUTComboBox::SetSelectedByData, COMDAT
; _this$ = ecx

; 3456 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3457 :     for( int i=0; i < m_Items.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@SetSelecte
$LN3@SetSelecte:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@SetSelecte:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@SetSelecte

; 3458 :     {
; 3459 :         DXUTComboBoxItem* pItem = m_Items.GetAt(i);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$1[ebp], ecx

; 3460 : 
; 3461 :         if( pItem->pData == pData )

	mov	eax, DWORD PTR _pItem$1[ebp]
	mov	ecx, DWORD PTR [eax+256]
	cmp	ecx, DWORD PTR _pData$[ebp]
	jne	SHORT $LN1@SetSelecte

; 3462 :         {
; 3463 :             m_iFocused = m_iSelected = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [eax+338], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	DWORD PTR [edx+342], eax

; 3464 :             m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, false, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	0
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 3465 :             return S_OK;

	xor	eax, eax
	jmp	SHORT $LN5@SetSelecte
$LN1@SetSelecte:

; 3466 :         }
; 3467 :     }

	jmp	SHORT $LN3@SetSelecte
$LN2@SetSelecte:

; 3468 : 
; 3469 :     return E_FAIL;

	mov	eax, -2147467259			; 80004005H
$LN5@SetSelecte:

; 3470 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSelectedByData@CDXUTComboBox@@QAEJPAX@Z ENDP	; CDXUTComboBox::SetSelectedByData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetSelectedByText@CDXUTComboBox@@QAEJPBD@Z
_TEXT	SEGMENT
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
?SetSelectedByText@CDXUTComboBox@@QAEJPBD@Z PROC	; CDXUTComboBox::SetSelectedByText, COMDAT
; _this$ = ecx

; 3438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3439 :     if( strText == NULL )

	cmp	DWORD PTR _strText$[ebp], 0
	jne	SHORT $LN2@SetSelecte

; 3440 :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@SetSelecte
$LN2@SetSelecte:

; 3441 : 
; 3442 :     int index = FindItem( strText );

	push	0
	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindItem@CDXUTComboBox@@QAEHPBDI@Z	; CDXUTComboBox::FindItem
	mov	DWORD PTR _index$[ebp], eax

; 3443 :     if( index == -1 )

	cmp	DWORD PTR _index$[ebp], -1
	jne	SHORT $LN1@SetSelecte

; 3444 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN3@SetSelecte
$LN1@SetSelecte:

; 3445 : 
; 3446 :     m_iFocused = m_iSelected = index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+338], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+342], eax

; 3447 :     m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, false, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	0
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 3448 : 
; 3449 :     return S_OK;

	xor	eax, eax
$LN3@SetSelecte:

; 3450 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSelectedByText@CDXUTComboBox@@QAEJPBD@Z ENDP	; CDXUTComboBox::SetSelectedByText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetSelectedByIndex@CDXUTComboBox@@QAEJI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?SetSelectedByIndex@CDXUTComboBox@@QAEJI@Z PROC		; CDXUTComboBox::SetSelectedByIndex, COMDAT
; _this$ = ecx

; 3424 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3425 :     if( index >= GetNumItems() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumItems@CDXUTComboBox@@QAEIXZ	; CDXUTComboBox::GetNumItems
	cmp	DWORD PTR _index$[ebp], eax
	jb	SHORT $LN1@SetSelecte

; 3426 :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@SetSelecte
$LN1@SetSelecte:

; 3427 : 
; 3428 :     m_iFocused = m_iSelected = index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+338], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [edx+342], eax

; 3429 :     m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, false, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	0
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 3430 : 
; 3431 :     return S_OK;

	xor	eax, eax
$LN2@SetSelecte:

; 3432 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSelectedByIndex@CDXUTComboBox@@QAEJI@Z ENDP		; CDXUTComboBox::SetSelectedByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetNumItems@CDXUTComboBox@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetNumItems@CDXUTComboBox@@QAEIXZ PROC			; CDXUTComboBox::GetNumItems, COMDAT
; _this$ = ecx

; 694  :     UINT    GetNumItems() { return m_Items.GetSize(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumItems@CDXUTComboBox@@QAEIXZ ENDP			; CDXUTComboBox::GetNumItems
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetSelectedItem@CDXUTComboBox@@QAEPAUDXUTComboBoxItem@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSelectedItem@CDXUTComboBox@@QAEPAUDXUTComboBoxItem@@XZ PROC ; CDXUTComboBox::GetSelectedItem, COMDAT
; _this$ = ecx

; 3384 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3385 :     if( m_iSelected < 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+338], 0
	jge	SHORT $LN1@GetSelecte

; 3386 :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetSelecte
$LN1@GetSelecte:

; 3387 : 
; 3388 :     return m_Items.GetAt( m_iSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+338]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	eax, DWORD PTR [eax]
$LN2@GetSelecte:

; 3389 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSelectedItem@CDXUTComboBox@@QAEPAUDXUTComboBoxItem@@XZ ENDP ; CDXUTComboBox::GetSelectedItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetSelectedData@CDXUTComboBox@@QAEPAXXZ
_TEXT	SEGMENT
_pItem$ = -20						; size = 4
_this$ = -8						; size = 4
?GetSelectedData@CDXUTComboBox@@QAEPAXXZ PROC		; CDXUTComboBox::GetSelectedData, COMDAT
; _this$ = ecx

; 3373 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3374 :     if( m_iSelected < 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+338], 0
	jge	SHORT $LN1@GetSelecte

; 3375 :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetSelecte
$LN1@GetSelecte:

; 3376 : 
; 3377 :     DXUTComboBoxItem* pItem = m_Items.GetAt( m_iSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+338]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$[ebp], edx

; 3378 :     return pItem->pData;

	mov	eax, DWORD PTR _pItem$[ebp]
	mov	eax, DWORD PTR [eax+256]
$LN2@GetSelecte:

; 3379 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSelectedData@CDXUTComboBox@@QAEPAXXZ ENDP		; CDXUTComboBox::GetSelectedData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetItemData@CDXUTComboBox@@QAEPAXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetItemData@CDXUTComboBox@@QAEPAXH@Z PROC		; CDXUTComboBox::GetItemData, COMDAT
; _this$ = ecx

; 3414 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3415 :     if( nIndex < 0 || nIndex >= m_Items.GetSize() )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@GetItemDat
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	cmp	DWORD PTR _nIndex$[ebp], eax
	jl	SHORT $LN2@GetItemDat
$LN1@GetItemDat:

; 3416 :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetItemDat
$LN2@GetItemDat:

; 3417 : 
; 3418 :     return m_Items.GetAt( nIndex )->pData;

	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+256]
$LN3@GetItemDat:

; 3419 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetItemData@CDXUTComboBox@@QAEPAXH@Z ENDP		; CDXUTComboBox::GetItemData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetItemData@CDXUTComboBox@@QAEPAXPBD@Z
_TEXT	SEGMENT
_pItem$ = -32						; size = 4
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
?GetItemData@CDXUTComboBox@@QAEPAXPBD@Z PROC		; CDXUTComboBox::GetItemData, COMDAT
; _this$ = ecx

; 3394 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3395 :     int index = FindItem( strText );

	push	0
	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindItem@CDXUTComboBox@@QAEHPBDI@Z	; CDXUTComboBox::FindItem
	mov	DWORD PTR _index$[ebp], eax

; 3396 :     if( index == -1 )

	cmp	DWORD PTR _index$[ebp], -1
	jne	SHORT $LN2@GetItemDat

; 3397 :     {
; 3398 :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetItemDat
$LN2@GetItemDat:

; 3399 :     }
; 3400 : 
; 3401 :     DXUTComboBoxItem* pItem = m_Items.GetAt(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$[ebp], ecx

; 3402 :     if( pItem == NULL )

	cmp	DWORD PTR _pItem$[ebp], 0
	jne	SHORT $LN1@GetItemDat

; 3403 :     {
; 3404 :         DXTRACE_ERR( "CGrowableArray::GetAt", E_FAIL );

	push	0
	push	OFFSET ??_C@_0BG@JAGODAII@CGrowableArray?3?3GetAt?$AA@
	push	-2147467259				; 80004005H
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetItemData@CDXUTComboBox@@QAEPAXPBD@Z@4JA
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper

; 3405 :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetItemDat
$LN1@GetItemDat:

; 3406 :     }
; 3407 : 
; 3408 :     return pItem->pData;

	mov	eax, DWORD PTR _pItem$[ebp]
	mov	eax, DWORD PTR [eax+256]
$LN3@GetItemDat:

; 3409 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetItemData@CDXUTComboBox@@QAEPAXPBD@Z ENDP		; CDXUTComboBox::GetItemData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?FindItem@CDXUTComboBox@@QAEHPBDI@Z
_TEXT	SEGMENT
_pItem$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
_iStart$ = 12						; size = 4
?FindItem@CDXUTComboBox@@QAEHPBDI@Z PROC		; CDXUTComboBox::FindItem, COMDAT
; _this$ = ecx

; 3353 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3354 :     if( strText == NULL )

	cmp	DWORD PTR _strText$[ebp], 0
	jne	SHORT $LN5@FindItem

; 3355 :         return -1;

	or	eax, -1
	jmp	SHORT $LN6@FindItem
$LN5@FindItem:

; 3356 : 
; 3357 :     for( int i = iStart; i < m_Items.GetSize(); i++ )

	mov	eax, DWORD PTR _iStart$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN4@FindItem
$LN3@FindItem:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@FindItem:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@FindItem

; 3358 :     {
; 3359 :         DXUTComboBoxItem* pItem = m_Items.GetAt(i);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$1[ebp], ecx

; 3360 : 
; 3361 :         if( 0 == strcmp( pItem->strText, strText ) )

	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pItem$1[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@FindItem

; 3362 :         {
; 3363 :             return i;

	mov	eax, DWORD PTR _i$2[ebp]
	jmp	SHORT $LN6@FindItem
$LN1@FindItem:

; 3364 :         }
; 3365 :     }

	jmp	SHORT $LN3@FindItem
$LN2@FindItem:

; 3366 : 
; 3367 :     return -1;

	or	eax, -1
$LN6@FindItem:

; 3368 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FindItem@CDXUTComboBox@@QAEHPBDI@Z ENDP		; CDXUTComboBox::FindItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ContainsItem@CDXUTComboBox@@QAE_NPBDI@Z
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
_iStart$ = 12						; size = 4
?ContainsItem@CDXUTComboBox@@QAE_NPBDI@Z PROC		; CDXUTComboBox::ContainsItem, COMDAT
; _this$ = ecx

; 3346 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3347 :     return ( -1 != FindItem( strText, iStart ) );

	mov	eax, DWORD PTR _iStart$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindItem@CDXUTComboBox@@QAEHPBDI@Z	; CDXUTComboBox::FindItem
	cmp	eax, -1
	je	SHORT $LN3@ContainsIt
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@ContainsIt
$LN3@ContainsIt:
	mov	DWORD PTR tv69[ebp], 0
$LN4@ContainsIt:
	mov	al, BYTE PTR tv69[ebp]

; 3348 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ContainsItem@CDXUTComboBox@@QAE_NPBDI@Z ENDP		; CDXUTComboBox::ContainsItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveItem@CDXUTComboBox@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_pItem$ = -20						; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?RemoveItem@CDXUTComboBox@@QAEXI@Z PROC			; CDXUTComboBox::RemoveItem, COMDAT
; _this$ = ecx

; 3318 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3319 :     DXUTComboBoxItem* pItem = m_Items.GetAt( index );

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$[ebp], ecx

; 3320 :     SAFE_DELETE( pItem );

	cmp	DWORD PTR _pItem$[ebp], 0
	je	SHORT $LN2@RemoveItem
	mov	eax, DWORD PTR _pItem$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pItem$[ebp], 0
$LN2@RemoveItem:

; 3321 :     m_Items.Remove( index );

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?Remove@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJH@Z ; CGrowableArray<DXUTComboBoxItem *>::Remove

; 3322 :     m_ScrollBar.SetTrackRange( 0, m_Items.GetSize() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z	; CDXUTScrollBar::SetTrackRange

; 3323 :     if( m_iSelected >= m_Items.GetSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+338], eax
	jl	SHORT $LN3@RemoveItem

; 3324 :         m_iSelected = m_Items.GetSize() - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+338], eax
$LN3@RemoveItem:

; 3325 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveItem@CDXUTComboBox@@QAEXI@Z ENDP			; CDXUTComboBox::RemoveItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveAllItems@CDXUTComboBox@@QAEXXZ
_TEXT	SEGMENT
$T1 = -236						; size = 4
_pItem$2 = -32						; size = 4
_i$3 = -20						; size = 4
_this$ = -8						; size = 4
?RemoveAllItems@CDXUTComboBox@@QAEXXZ PROC		; CDXUTComboBox::RemoveAllItems, COMDAT
; _this$ = ecx

; 3330 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3331 :     for( int i=0; i < m_Items.GetSize(); i++ )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@RemoveAllI
$LN3@RemoveAllI:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@RemoveAllI:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN2@RemoveAllI

; 3332 :     {
; 3333 :         DXUTComboBoxItem* pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$2[ebp], ecx

; 3334 :         SAFE_DELETE( pItem );

	cmp	DWORD PTR _pItem$2[ebp], 0
	je	SHORT $LN1@RemoveAllI
	mov	eax, DWORD PTR _pItem$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pItem$2[ebp], 0
$LN1@RemoveAllI:

; 3335 :     }

	jmp	SHORT $LN3@RemoveAllI
$LN2@RemoveAllI:

; 3336 : 
; 3337 :     m_Items.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?RemoveAll@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEXXZ ; CGrowableArray<DXUTComboBoxItem *>::RemoveAll

; 3338 :     m_ScrollBar.SetTrackRange( 0, 1 );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z	; CDXUTScrollBar::SetTrackRange

; 3339 :     m_iFocused = m_iSelected = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+338], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+342], -1

; 3340 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAllItems@CDXUTComboBox@@QAEXXZ ENDP		; CDXUTComboBox::RemoveAllItems
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddItem@CDXUTComboBox@@QAEJPBDPAX@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_pItem$ = -20						; size = 4
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
_pData$ = 12						; size = 4
?AddItem@CDXUTComboBox@@QAEJPBDPAX@Z PROC		; CDXUTComboBox::AddItem, COMDAT
; _this$ = ecx

; 3281 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3282 :     // Validate parameters
; 3283 :     if( strText== NULL )

	cmp	DWORD PTR _strText$[ebp], 0
	jne	SHORT $LN3@AddItem

; 3284 :     {
; 3285 :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN4@AddItem
$LN3@AddItem:

; 3286 :     }
; 3287 :     
; 3288 :     // Create a new item and set the data
; 3289 :     DXUTComboBoxItem* pItem = new DXUTComboBoxItem;

	push	277					; 00000115H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pItem$[ebp], eax

; 3290 :     if( pItem == NULL )

	cmp	DWORD PTR _pItem$[ebp], 0
	jne	SHORT $LN2@AddItem

; 3291 :     {
; 3292 :         return DXTRACE_ERR_MSGBOX( "new", E_OUTOFMEMORY );

	push	1
	push	OFFSET ??_C@_03CLCAEGCJ@new?$AA@
	push	-2147024882				; 8007000eH
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddItem@CDXUTComboBox@@QAEJPBDPAX@Z@4JA
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper
	jmp	$LN4@AddItem
$LN2@AddItem:

; 3293 :     }
; 3294 :     
; 3295 :     ZeroMemory( pItem, sizeof(DXUTComboBoxItem) );

	push	277					; 00000115H
	push	0
	mov	eax, DWORD PTR _pItem$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 3296 :     StringCchCopy( pItem->strText, 256, strText );

	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pItem$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 3297 :     pItem->pData = pData;

	mov	eax, DWORD PTR _pItem$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax+256], ecx

; 3298 : 
; 3299 :     m_Items.Add( pItem );

	lea	eax, DWORD PTR _pItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?Add@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEJABQAUDXUTComboBoxItem@@@Z ; CGrowableArray<DXUTComboBoxItem *>::Add

; 3300 : 
; 3301 :     // Update the scroll bar with new range
; 3302 :     m_ScrollBar.SetTrackRange( 0, m_Items.GetSize() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z	; CDXUTScrollBar::SetTrackRange

; 3303 : 
; 3304 :     // If this is the only item in the list, it's selected
; 3305 :     if( GetNumItems() == 1 )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumItems@CDXUTComboBox@@QAEIXZ	; CDXUTComboBox::GetNumItems
	cmp	eax, 1
	jne	SHORT $LN1@AddItem

; 3306 :     {
; 3307 :         m_iSelected = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+338], 0

; 3308 :         m_iFocused = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+342], 0

; 3309 :         m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, false, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	0
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN1@AddItem:

; 3310 :     }
; 3311 : 
; 3312 :     return S_OK;

	xor	eax, eax
$LN4@AddItem:

; 3313 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@AddItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@AddItem:
	DD	1
	DD	$LN7@AddItem
$LN7@AddItem:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@AddItem
$LN6@AddItem:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
?AddItem@CDXUTComboBox@@QAEJPBDPAX@Z ENDP		; CDXUTComboBox::AddItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateRects@CDXUTComboBox@@UAEXXZ
_TEXT	SEGMENT
_pFontNode$ = -20					; size = 4
_this$ = -8						; size = 4
?UpdateRects@CDXUTComboBox@@UAEXXZ PROC			; CDXUTComboBox::UpdateRects, COMDAT
; _this$ = ecx

; 2823 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2824 :     
; 2825 :     CDXUTButton::UpdateRects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateRects@CDXUTControl@@MAEXXZ	; CDXUTControl::UpdateRects

; 2826 : 
; 2827 :     m_rcButton = m_rcBoundingBox;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 549				; 00000225H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2828 :     m_rcButton.left = m_rcButton.right - RectHeight( m_rcButton );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 549				; 00000225H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+557]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+549], edx

; 2829 : 
; 2830 :     m_rcText = m_rcBoundingBox;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 533				; 00000215H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2831 :     m_rcText.right = m_rcButton.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+549]
	mov	DWORD PTR [eax+541], edx

; 2832 : 
; 2833 :     m_rcDropdown = m_rcText;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 533				; 00000215H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 565				; 00000235H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2834 :     OffsetRect( &m_rcDropdown, 0, (int) (0.90f * RectHeight( m_rcText )) );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 533				; 00000215H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f666666
	cvttss2si ecx, xmm0
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 565				; 00000235H
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2835 :     m_rcDropdown.bottom += m_nDropHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+577]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+346]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+577], ecx

; 2836 :     m_rcDropdown.right -= m_nSBWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+573]
	sub	edx, DWORD PTR [ecx+528]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+573], edx

; 2837 : 
; 2838 :     m_rcDropdownText = m_rcDropdown;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 565				; 00000235H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 581				; 00000245H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2839 :     m_rcDropdownText.left += (int) (0.1f * RectWidth( m_rcDropdown ));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 565				; 00000235H
	push	eax
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+581]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+581], ecx

; 2840 :     m_rcDropdownText.right -= (int) (0.1f * RectWidth( m_rcDropdown ));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 565				; 00000235H
	push	eax
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+589]
	sub	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+589], eax

; 2841 :     m_rcDropdownText.top += (int) (0.1f * RectHeight( m_rcDropdown ));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 565				; 00000235H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+585]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+585], ecx

; 2842 :     m_rcDropdownText.bottom -= (int) (0.1f * RectHeight( m_rcDropdown ));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 565				; 00000235H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3dcccccd
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+593]
	sub	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+593], eax

; 2843 : 
; 2844 :     // Update the scrollbar's rects
; 2845 :     m_ScrollBar.SetLocation( m_rcDropdown.right, m_rcDropdown.top+2 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+569]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+573]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 2846 :     m_ScrollBar.SetSize( m_nSBWidth, RectHeight( m_rcDropdown )-2 );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 565				; 00000235H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 2847 :     DXUTFontNode* pFontNode = m_pDialog->GetManager()->GetFontNode( m_Elements.GetAt( 2 )->iFont );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ ; CDXUTDialog::GetManager
	mov	ecx, eax
	call	?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z ; CDXUTDialogResourceManager::GetFontNode
	mov	DWORD PTR _pFontNode$[ebp], eax

; 2848 :     if( pFontNode && pFontNode->nHeight )

	cmp	DWORD PTR _pFontNode$[ebp], 0
	je	SHORT $LN1@UpdateRect
	mov	eax, DWORD PTR _pFontNode$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN1@UpdateRect

; 2849 :     {
; 2850 :         m_ScrollBar.SetPageSize( RectHeight( m_rcDropdownText ) / pFontNode->nHeight );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 581				; 00000245H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	ecx, DWORD PTR _pFontNode$[ebp]
	cdq
	idiv	DWORD PTR [ecx+264]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?SetPageSize@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::SetPageSize

; 2851 : 
; 2852 :         // The selected item may have been scrolled off the page.
; 2853 :         // Ensure that it is in page again.
; 2854 :         m_ScrollBar.ShowItem( m_iSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+338]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?ShowItem@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::ShowItem
$LN1@UpdateRect:

; 2855 :     }
; 2856 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRects@CDXUTComboBox@@UAEXXZ ENDP			; CDXUTComboBox::UpdateRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTComboBox@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv337 = -428						; size = 4
$T1 = -420						; size = 16
_pItem$2 = -204						; size = 4
_rcWindow$ = -192					; size = 16
_fBlendRate$ = -168					; size = 4
_nOffsetY$ = -156					; size = 4
_nOffsetX$ = -144					; size = 4
_rc$3 = -132						; size = 16
_pItem$4 = -108						; size = 4
_i$5 = -96						; size = 4
_nRemainingHeight$6 = -84				; size = 4
_curY$7 = -72						; size = 4
_pFont$ = -60						; size = 4
_pSelectionElement$ = -48				; size = 4
_pElement$ = -36					; size = 4
_iState$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTComboBox@@UAEXPAUIDirect3DDevice9@@M@Z PROC ; CDXUTComboBox::Render, COMDAT
; _this$ = ecx

; 3134 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-428]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3135 :     DXUT_CONTROL_STATE iState = DXUT_STATE_NORMAL;

	mov	DWORD PTR _iState$[ebp], 0

; 3136 :     
; 3137 :     if( !m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN25@Render

; 3138 :         iState = DXUT_STATE_HIDDEN;

	mov	DWORD PTR _iState$[ebp], 2
$LN25@Render:

; 3139 : 
; 3140 :     // Dropdown box
; 3141 :     CDXUTElement* pElement = m_Elements.GetAt( 2 );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 3142 : 
; 3143 :     // If we have not initialized the scroll bar page size,
; 3144 :     // do that now.
; 3145 :     static bool bSBInit;
; 3146 :     if( !bSBInit )

	movzx	eax, BYTE PTR ?bSBInit@?3??Render@CDXUTComboBox@@UAEXPAUIDirect3DDevice9@@M@Z@4_NA
	test	eax, eax
	jne	$LN24@Render

; 3147 :     {
; 3148 :         // Update the page size of the scroll bar
; 3149 :         if( m_pDialog->GetManager()->GetFontNode( pElement->iFont )->nHeight )

	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ ; CDXUTDialog::GetManager
	mov	ecx, eax
	call	?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z ; CDXUTDialogResourceManager::GetFontNode
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN23@Render

; 3150 :             m_ScrollBar.SetPageSize( RectHeight( m_rcDropdownText ) / m_pDialog->GetManager()->GetFontNode( pElement->iFont )->nHeight );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 581				; 00000245H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ ; CDXUTDialog::GetManager
	mov	ecx, eax
	call	?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z ; CDXUTDialogResourceManager::GetFontNode
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	DWORD PTR [ecx+264]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?SetPageSize@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::SetPageSize

; 3151 :         else

	jmp	SHORT $LN22@Render
$LN23@Render:

; 3152 :             m_ScrollBar.SetPageSize( RectHeight( m_rcDropdownText ) );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 581				; 00000245H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?SetPageSize@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::SetPageSize
$LN22@Render:

; 3153 :         bSBInit = true;

	mov	BYTE PTR ?bSBInit@?3??Render@CDXUTComboBox@@UAEXPAUIDirect3DDevice9@@M@Z@4_NA, 1
$LN24@Render:

; 3154 :     }
; 3155 : 
; 3156 :     // Scroll bar
; 3157 :     if( m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	SHORT $LN21@Render

; 3158 :         m_ScrollBar.Render( pd3dDevice, fElapsedTime );

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+350]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@Render:

; 3159 : 
; 3160 :     // Blend current color
; 3161 :     pElement->TextureColor.Blend( iState, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 3162 :     pElement->FontColor.Blend( iState, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 68					; 00000044H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 3163 : 
; 3164 :     m_pDialog->DrawSprite( pElement, &m_rcDropdown );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 565				; 00000235H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 3165 : 
; 3166 :     // Selection outline
; 3167 :     CDXUTElement* pSelectionElement = m_Elements.GetAt( 3 );

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pSelectionElement$[ebp], eax

; 3168 :     pSelectionElement->TextureColor.Current = pElement->TextureColor.Current;

	mov	eax, DWORD PTR _pElement$[ebp]
	add	eax, 52					; 00000034H
	mov	ecx, DWORD PTR _pSelectionElement$[ebp]
	add	ecx, 52					; 00000034H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 3169 :     pSelectionElement->FontColor.Current = pSelectionElement->FontColor.States[ DXUT_STATE_NORMAL ];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pSelectionElement$[ebp]
	mov	eax, DWORD PTR [edx+ecx+68]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	ecx, DWORD PTR _pSelectionElement$[ebp]
	add	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T1[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 3170 : 
; 3171 :     DXUTFontNode* pFont = m_pDialog->GetFont( pElement->iFont );

	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z ; CDXUTDialog::GetFont
	mov	DWORD PTR _pFont$[ebp], eax

; 3172 :     if( pFont )

	cmp	DWORD PTR _pFont$[ebp], 0
	je	$LN17@Render

; 3173 :     {
; 3174 :         int curY = m_rcDropdownText.top;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+585]
	mov	DWORD PTR _curY$7[ebp], ecx

; 3175 :         int nRemainingHeight = RectHeight( m_rcDropdownText );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 581				; 00000245H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	DWORD PTR _nRemainingHeight$6[ebp], eax

; 3176 :         //TCHAR strDropdown[4096] = {0};
; 3177 : 
; 3178 :         for( int i = m_ScrollBar.GetTrackPos(); i < m_Items.GetSize(); i++ )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	DWORD PTR _i$5[ebp], eax
	jmp	SHORT $LN19@Render
$LN18@Render:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN19@Render:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	cmp	DWORD PTR _i$5[ebp], eax
	jge	$LN17@Render

; 3179 :         {
; 3180 :             DXUTComboBoxItem* pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$4[ebp], ecx

; 3181 : 
; 3182 :             // Make sure there's room left in the dropdown
; 3183 :             nRemainingHeight -= pFont->nHeight;

	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _nRemainingHeight$6[ebp]
	sub	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR _nRemainingHeight$6[ebp], ecx

; 3184 :             if( nRemainingHeight < 0 )

	jns	SHORT $LN16@Render

; 3185 :             {
; 3186 :                 pItem->bVisible = false;

	mov	eax, DWORD PTR _pItem$4[ebp]
	mov	BYTE PTR [eax+276], 0

; 3187 :                 continue;

	jmp	SHORT $LN18@Render
$LN16@Render:

; 3188 :             }
; 3189 : 
; 3190 :             SetRect( &pItem->rcActive, m_rcDropdownText.left, curY, m_rcDropdownText.right, curY + pFont->nHeight );

	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _curY$7[ebp]
	add	ecx, DWORD PTR [eax+264]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+589]
	push	eax
	mov	ecx, DWORD PTR _curY$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+581]
	push	eax
	mov	ecx, DWORD PTR _pItem$4[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3191 :             curY += pFont->nHeight;

	mov	eax, DWORD PTR _pFont$[ebp]
	mov	ecx, DWORD PTR _curY$7[ebp]
	add	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR _curY$7[ebp], ecx

; 3192 :             
; 3193 :             //debug
; 3194 :             //int blue = 50 * i;
; 3195 :             //m_pDialog->DrawRect( &pItem->rcActive, 0xFFFF0000 | blue );
; 3196 : 
; 3197 :             pItem->bVisible = true;

	mov	eax, DWORD PTR _pItem$4[ebp]
	mov	BYTE PTR [eax+276], 1

; 3198 : 
; 3199 :             if( m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	$LN13@Render

; 3200 :             {
; 3201 :                 if( (int)i == m_iFocused )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$5[ebp]
	cmp	ecx, DWORD PTR [eax+342]
	jne	SHORT $LN14@Render

; 3202 :                 {
; 3203 :                     RECT rc;
; 3204 :                     SetRect( &rc, m_rcDropdown.left, pItem->rcActive.top-2, m_rcDropdown.right, pItem->rcActive.bottom+2 );

	mov	eax, DWORD PTR _pItem$4[ebp]
	mov	ecx, DWORD PTR [eax+272]
	add	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+573]
	push	eax
	mov	ecx, DWORD PTR _pItem$4[ebp]
	mov	edx, DWORD PTR [ecx+264]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+565]
	push	ecx
	lea	edx, DWORD PTR _rc$3[ebp]
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3205 :                     m_pDialog->DrawSprite( pSelectionElement, &rc );

	lea	eax, DWORD PTR _rc$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelectionElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 3206 :                     m_pDialog->DrawText( pItem->strText, pSelectionElement, &pItem->rcActive );

	push	-1
	push	0
	mov	eax, DWORD PTR _pItem$4[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR _pSelectionElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pItem$4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 3207 :                 }
; 3208 :                 else

	jmp	SHORT $LN13@Render
$LN14@Render:

; 3209 :                 {
; 3210 :                     m_pDialog->DrawText( pItem->strText, pElement, &pItem->rcActive );

	push	-1
	push	0
	mov	eax, DWORD PTR _pItem$4[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pItem$4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
$LN13@Render:

; 3211 :                 }
; 3212 :             }
; 3213 :         }

	jmp	$LN18@Render
$LN17@Render:

; 3214 :     }
; 3215 : 
; 3216 :     int nOffsetX = 0;

	mov	DWORD PTR _nOffsetX$[ebp], 0

; 3217 :     int nOffsetY = 0;

	mov	DWORD PTR _nOffsetY$[ebp], 0

; 3218 : 
; 3219 :     iState = DXUT_STATE_NORMAL;

	mov	DWORD PTR _iState$[ebp], 0

; 3220 :     
; 3221 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN12@Render

; 3222 :         iState = DXUT_STATE_HIDDEN;

	mov	DWORD PTR _iState$[ebp], 2
	jmp	SHORT $LN4@Render
$LN12@Render:

; 3223 :     else if( m_bEnabled == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN10@Render

; 3224 :         iState = DXUT_STATE_DISABLED;

	mov	DWORD PTR _iState$[ebp], 1
	jmp	SHORT $LN4@Render
$LN10@Render:

; 3225 :     else if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	test	ecx, ecx
	je	SHORT $LN8@Render

; 3226 :     {
; 3227 :         iState = DXUT_STATE_PRESSED;

	mov	DWORD PTR _iState$[ebp], 5

; 3228 : 
; 3229 :         nOffsetX = 1;

	mov	DWORD PTR _nOffsetX$[ebp], 1

; 3230 :         nOffsetY = 2;

	mov	DWORD PTR _nOffsetY$[ebp], 2
	jmp	SHORT $LN4@Render
$LN8@Render:

; 3231 :     }
; 3232 :     else if( m_bMouseOver )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	test	ecx, ecx
	je	SHORT $LN6@Render

; 3233 :     {
; 3234 :         iState = DXUT_STATE_MOUSEOVER;

	mov	DWORD PTR _iState$[ebp], 4

; 3235 : 
; 3236 :         nOffsetX = -1;

	mov	DWORD PTR _nOffsetX$[ebp], -1

; 3237 :         nOffsetY = -2;

	mov	DWORD PTR _nOffsetY$[ebp], -2		; fffffffeH
	jmp	SHORT $LN4@Render
$LN6@Render:

; 3238 :     }
; 3239 :     else if( m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	je	SHORT $LN4@Render

; 3240 :         iState = DXUT_STATE_FOCUS;

	mov	DWORD PTR _iState$[ebp], 3
$LN4@Render:

; 3241 : 
; 3242 :     float fBlendRate = ( iState == DXUT_STATE_PRESSED ) ? 0.0f : 0.8f;

	cmp	DWORD PTR _iState$[ebp], 5
	jne	SHORT $LN28@Render
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv337[ebp], xmm0
	jmp	SHORT $LN29@Render
$LN28@Render:
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR tv337[ebp], xmm0
$LN29@Render:
	movss	xmm0, DWORD PTR tv337[ebp]
	movss	DWORD PTR _fBlendRate$[ebp], xmm0

; 3243 :     
; 3244 :     // Button
; 3245 :     pElement = m_Elements.GetAt( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 3246 :     
; 3247 :     // Blend current color
; 3248 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 3249 :     
; 3250 :     RECT rcWindow = m_rcButton;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 549				; 00000225H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcWindow$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcWindow$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcWindow$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcWindow$[ebp+12], edx

; 3251 :     OffsetRect( &rcWindow, nOffsetX, nOffsetY );

	mov	esi, esp
	mov	eax, DWORD PTR _nOffsetY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nOffsetX$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rcWindow$[ebp]
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3252 :     m_pDialog->DrawSprite( pElement, &rcWindow );

	lea	eax, DWORD PTR _rcWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 3253 : 
; 3254 :     if( m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	SHORT $LN3@Render

; 3255 :         iState = DXUT_STATE_PRESSED;

	mov	DWORD PTR _iState$[ebp], 5
$LN3@Render:

; 3256 : 
; 3257 :     // Main text box
; 3258 :     //TODO: remove magic numbers
; 3259 :     pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 3260 :     
; 3261 :     // Blend current color
; 3262 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 3263 :     pElement->FontColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 68					; 00000044H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 3264 : 
; 3265 :     m_pDialog->DrawSprite( pElement, &m_rcText);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 533				; 00000215H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 3266 :     
; 3267 :     if( m_iSelected >= 0 && m_iSelected < (int) m_Items.GetSize() )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+338], 0
	jl	SHORT $LN1@Render
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+338], eax
	jge	SHORT $LN1@Render

; 3268 :     {
; 3269 :         DXUTComboBoxItem* pItem = m_Items.GetAt( m_iSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+338]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$2[ebp], edx

; 3270 :         if( pItem != NULL )

	cmp	DWORD PTR _pItem$2[ebp], 0
	je	SHORT $LN1@Render

; 3271 :         {
; 3272 :             m_pDialog->DrawText( pItem->strText, pElement, &m_rcText );

	push	-1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 533				; 00000215H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pItem$2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
$LN1@Render:

; 3273 :         
; 3274 :         }
; 3275 :     }
; 3276 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 428				; 000001acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN33@Render:
	DD	2
	DD	$LN32@Render
$LN32@Render:
	DD	-132					; ffffff7cH
	DD	16					; 00000010H
	DD	$LN30@Render
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN31@Render
$LN31@Render:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN30@Render:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
?Render@CDXUTComboBox@@UAEXPAUIDirect3DDevice9@@M@Z ENDP ; CDXUTComboBox::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnFocusOut@CDXUTComboBox@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnFocusOut@CDXUTComboBox@@UAEXXZ PROC			; CDXUTComboBox::OnFocusOut, COMDAT
; _this$ = ecx

; 2861 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2862 :     CDXUTButton::OnFocusOut();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnFocusOut@CDXUTControl@@UAEXXZ	; CDXUTControl::OnFocusOut

; 2863 : 
; 2864 :     m_bOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+532], 0

; 2865 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnFocusOut@CDXUTComboBox@@UAEXXZ ENDP			; CDXUTComboBox::OnFocusOut
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?CanHaveFocus@CDXUTComboBox@@UAE_NXZ
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
?CanHaveFocus@CDXUTComboBox@@UAE_NXZ PROC		; CDXUTComboBox::CanHaveFocus, COMDAT
; _this$ = ecx

; 675  :     virtual bool CanHaveFocus() { return (m_bVisible && m_bEnabled); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@CanHaveFoc
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	test	eax, eax
	je	SHORT $LN3@CanHaveFoc
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@CanHaveFoc
$LN3@CanHaveFoc:
	mov	DWORD PTR tv78[ebp], 0
$LN4@CanHaveFoc:
	mov	al, BYTE PTR tv78[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CanHaveFocus@CDXUTComboBox@@UAE_NXZ ENDP		; CDXUTComboBox::CanHaveFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnHotkey@CDXUTComboBox@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnHotkey@CDXUTComboBox@@UAEXXZ PROC			; CDXUTComboBox::OnHotkey, COMDAT
; _this$ = ecx

; 3113 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3114 :     if( m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	SHORT $LN3@OnHotkey

; 3115 :         return;

	jmp	$LN4@OnHotkey
$LN3@OnHotkey:

; 3116 : 
; 3117 :     if( m_iSelected == -1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+338], -1
	jne	SHORT $LN2@OnHotkey

; 3118 :         return;

	jmp	SHORT $LN4@OnHotkey
$LN2@OnHotkey:

; 3119 : 
; 3120 :     m_pDialog->RequestFocus( this ); 

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus

; 3121 : 
; 3122 :     m_iSelected++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+338]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+338], ecx

; 3123 :     
; 3124 :     if( m_iSelected >= (int) m_Items.GetSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+338], eax
	jl	SHORT $LN1@OnHotkey

; 3125 :         m_iSelected = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+338], 0
$LN1@OnHotkey:

; 3126 : 
; 3127 :     m_iFocused = m_iSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+338]
	mov	DWORD PTR [eax+342], edx

; 3128 :     m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN4@OnHotkey:

; 3129 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnHotkey@CDXUTComboBox@@UAEXXZ ENDP			; CDXUTComboBox::OnHotkey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTComboBox@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv199 = -280						; size = 4
tv94 = -280						; size = 4
_uLines$1 = -80						; size = 4
_zDelta$2 = -68						; size = 4
_pItem$3 = -56						; size = 4
_i$4 = -44						; size = 4
_pItem$5 = -32						; size = 4
_i$6 = -20						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTComboBox@@UAE_NIUtagPOINT@@IJ@Z PROC	; CDXUTComboBox::HandleMouse, COMDAT
; _this$ = ecx

; 2956 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2957 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN35@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN36@HandleMous
$LN35@HandleMous:

; 2958 :         return false;

	xor	al, al
	jmp	$LN37@HandleMous
$LN36@HandleMous:

; 2959 : 
; 2960 :     // Let the scroll bar handle it first.
; 2961 :     if( m_ScrollBar.HandleMouse( uMsg, pt, wParam, lParam ) )

	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pt$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uMsg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+350]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN34@HandleMous

; 2962 :         return true;

	mov	al, 1
	jmp	$LN37@HandleMous
$LN34@HandleMous:

; 2963 : 
; 2964 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv94[ebp], eax
	mov	ecx, DWORD PTR tv94[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv94[ebp], ecx
	cmp	DWORD PTR tv94[ebp], 10			; 0000000aH
	ja	$LN32@HandleMous
	mov	edx, DWORD PTR tv94[ebp]
	movzx	eax, BYTE PTR $LN41@HandleMous[edx]
	jmp	DWORD PTR $LN45@HandleMous[eax*4]
$LN31@HandleMous:

; 2965 :     {
; 2966 :         case WM_MOUSEMOVE:
; 2967 :         {
; 2968 :             if( m_bOpened && PtInRect( &m_rcDropdown, pt ) )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	$LN30@HandleMous
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 565				; 00000235H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN30@HandleMous

; 2969 :             {
; 2970 :                 // Determine which item has been selected
; 2971 :                 for( int i=0; i < m_Items.GetSize(); i++ )

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN29@HandleMous
$LN28@HandleMous:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN29@HandleMous:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	cmp	DWORD PTR _i$6[ebp], eax
	jge	SHORT $LN27@HandleMous

; 2972 :                 {
; 2973 :                     DXUTComboBoxItem* pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$5[ebp], ecx

; 2974 :                     if( pItem -> bVisible &&
; 2975 :                         PtInRect( &pItem->rcActive, pt ) )

	mov	eax, DWORD PTR _pItem$5[ebp]
	movzx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN26@HandleMous
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pItem$5[ebp]
	add	edx, 260				; 00000104H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN26@HandleMous

; 2976 :                     {
; 2977 :                         m_iFocused = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$6[ebp]
	mov	DWORD PTR [eax+342], ecx
$LN26@HandleMous:

; 2978 :                     }
; 2979 :                 }

	jmp	SHORT $LN28@HandleMous
$LN27@HandleMous:

; 2980 :                 return true;

	mov	al, 1
	jmp	$LN37@HandleMous
$LN30@HandleMous:

; 2981 :             }
; 2982 :             break;

	jmp	$LN32@HandleMous
$LN25@HandleMous:

; 2983 :         }
; 2984 : 
; 2985 :         case WM_LBUTTONDOWN:
; 2986 :         case WM_LBUTTONDBLCLK:
; 2987 :         {
; 2988 :             if( ContainsPoint( pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN24@HandleMous

; 2989 :             {
; 2990 :                 // Pressed while inside the control
; 2991 :                 m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 1

; 2992 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2993 : 
; 2994 :                 if( !m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN23@HandleMous

; 2995 :                     m_pDialog->RequestFocus( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
$LN23@HandleMous:

; 2996 : 
; 2997 :                 // Toggle dropdown
; 2998 :                 if( m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	je	SHORT $LN22@HandleMous

; 2999 :                 {
; 3000 :                     m_bOpened = !m_bOpened;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN39@HandleMous
	mov	DWORD PTR tv199[ebp], 1
	jmp	SHORT $LN40@HandleMous
$LN39@HandleMous:
	mov	DWORD PTR tv199[ebp], 0
$LN40@HandleMous:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv199[ebp]
	mov	BYTE PTR [edx+532], al

; 3001 :                 
; 3002 :                     if( !m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN22@HandleMous

; 3003 :                     {
; 3004 :                         if( !m_pDialog->m_bKeyboardInput )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN22@HandleMous

; 3005 :                             m_pDialog->ClearFocus();

	call	?ClearFocus@CDXUTDialog@@SAXXZ		; CDXUTDialog::ClearFocus
$LN22@HandleMous:

; 3006 :                     }
; 3007 :                 }
; 3008 : 
; 3009 :                 return true;

	mov	al, 1
	jmp	$LN37@HandleMous
$LN24@HandleMous:

; 3010 :             }
; 3011 : 
; 3012 :             // Perhaps this click is within the dropdown
; 3013 :             if( m_bOpened && PtInRect( &m_rcDropdown, pt ) )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	$LN19@HandleMous
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 565				; 00000235H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN19@HandleMous

; 3014 :             {
; 3015 :                 // Determine which item has been selected
; 3016 :                 for( int i=m_ScrollBar.GetTrackPos(); i < m_Items.GetSize(); i++ )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	DWORD PTR _i$4[ebp], eax
	jmp	SHORT $LN18@HandleMous
$LN17@HandleMous:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN18@HandleMous:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetSize@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTComboBoxItem *>::GetSize
	cmp	DWORD PTR _i$4[ebp], eax
	jge	$LN16@HandleMous

; 3017 :                 {
; 3018 :                     DXUTComboBoxItem* pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	?GetAt@?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAEAAPAUDXUTComboBoxItem@@H@Z ; CGrowableArray<DXUTComboBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$3[ebp], ecx

; 3019 :                     if( pItem -> bVisible &&
; 3020 :                         PtInRect( &pItem->rcActive, pt ) )

	mov	eax, DWORD PTR _pItem$3[ebp]
	movzx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN15@HandleMous
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pItem$3[ebp]
	add	edx, 260				; 00000104H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN15@HandleMous

; 3021 :                     {
; 3022 :                         m_iFocused = m_iSelected = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	mov	DWORD PTR [eax+338], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$4[ebp]
	mov	DWORD PTR [edx+342], eax

; 3023 :                         m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 3024 :                         m_bOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+532], 0

; 3025 :                         
; 3026 :                         if( !m_pDialog->m_bKeyboardInput )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN14@HandleMous

; 3027 :                             m_pDialog->ClearFocus();

	call	?ClearFocus@CDXUTDialog@@SAXXZ		; CDXUTDialog::ClearFocus
$LN14@HandleMous:

; 3028 : 
; 3029 :                         break;

	jmp	SHORT $LN16@HandleMous
$LN15@HandleMous:

; 3030 :                     }
; 3031 :                 }

	jmp	$LN17@HandleMous
$LN16@HandleMous:

; 3032 : 
; 3033 :                 return true;

	mov	al, 1
	jmp	$LN37@HandleMous
$LN19@HandleMous:

; 3034 :             }
; 3035 : 
; 3036 :             // Mouse click not on main control or in dropdown, fire an event if needed
; 3037 :             if( m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	SHORT $LN13@HandleMous

; 3038 :             {
; 3039 :                 m_iFocused = m_iSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+338]
	mov	DWORD PTR [eax+342], edx

; 3040 : 
; 3041 :                 m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 3042 :                 m_bOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+532], 0
$LN13@HandleMous:

; 3043 :             }
; 3044 : 
; 3045 :             // Make sure the control is no longer in a pressed state
; 3046 :             m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 3047 : 
; 3048 :             // Release focus if appropriate
; 3049 :             if( !m_pDialog->m_bKeyboardInput )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN12@HandleMous

; 3050 :             {
; 3051 :                 m_pDialog->ClearFocus();

	call	?ClearFocus@CDXUTDialog@@SAXXZ		; CDXUTDialog::ClearFocus
$LN12@HandleMous:

; 3052 :             }
; 3053 : 
; 3054 :             break;

	jmp	$LN32@HandleMous
$LN11@HandleMous:

; 3055 :         }
; 3056 : 
; 3057 :         case WM_LBUTTONUP:
; 3058 :         {
; 3059 :             if( m_bPressed && ContainsPoint( pt ) )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	test	ecx, ecx
	je	SHORT $LN10@HandleMous
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN10@HandleMous

; 3060 :             {
; 3061 :                 // Button click
; 3062 :                 m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 3063 :                 ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3064 :                 return true;

	mov	al, 1
	jmp	$LN37@HandleMous
$LN10@HandleMous:

; 3065 :             }
; 3066 : 
; 3067 :             break;

	jmp	$LN32@HandleMous
$LN9@HandleMous:

; 3068 :         }
; 3069 : 
; 3070 :         case WM_MOUSEWHEEL:
; 3071 :         {
; 3072 :             int zDelta = (short) HIWORD(wParam) / WHEEL_DELTA;

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	cwde
	cdq
	mov	ecx, 120				; 00000078H
	idiv	ecx
	mov	DWORD PTR _zDelta$2[ebp], eax

; 3073 :             if( m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	SHORT $LN8@HandleMous

; 3074 :             {
; 3075 :                 UINT uLines;
; 3076 :                 SystemParametersInfo( SPI_GETWHEELSCROLLLINES, 0, &uLines, 0 );

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _uLines$1[ebp]
	push	eax
	push	0
	push	104					; 00000068H
	call	DWORD PTR __imp__SystemParametersInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3077 :                 m_ScrollBar.Scroll( -zDelta * uLines );

	mov	eax, DWORD PTR _zDelta$2[ebp]
	neg	eax
	imul	eax, DWORD PTR _uLines$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 3078 :             } else

	jmp	$LN7@HandleMous
$LN8@HandleMous:

; 3079 :             {
; 3080 :                 if( zDelta > 0 )

	cmp	DWORD PTR _zDelta$2[ebp], 0
	jle	SHORT $LN6@HandleMous

; 3081 :                 {
; 3082 :                     if( m_iFocused > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+342], 0
	jle	SHORT $LN5@HandleMous

; 3083 :                     {
; 3084 :                         m_iFocused--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+342]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+342], ecx

; 3085 :                         m_iSelected = m_iFocused;     

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+342]
	mov	DWORD PTR [eax+338], edx

; 3086 :                         
; 3087 :                         if( !m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN5@HandleMous

; 3088 :                             m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN5@HandleMous:

; 3089 :                     }          
; 3090 :                 }
; 3091 :                 else

	jmp	SHORT $LN7@HandleMous
$LN6@HandleMous:

; 3092 :                 {
; 3093 :                     if( m_iFocused+1 < (int)GetNumItems() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+342]
	add	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumItems@CDXUTComboBox@@QAEIXZ	; CDXUTComboBox::GetNumItems
	cmp	esi, eax
	jge	SHORT $LN7@HandleMous

; 3094 :                     {
; 3095 :                         m_iFocused++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+342]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+342], ecx

; 3096 :                         m_iSelected = m_iFocused;   

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+342]
	mov	DWORD PTR [eax+338], edx

; 3097 : 
; 3098 :                         if( !m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN7@HandleMous

; 3099 :                             m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN7@HandleMous:

; 3100 :                     }
; 3101 :                 }
; 3102 :             }
; 3103 :             return true;

	mov	al, 1
	jmp	SHORT $LN37@HandleMous
$LN32@HandleMous:

; 3104 :         }
; 3105 :     };
; 3106 :     
; 3107 :     return false;

	xor	al, al
$LN37@HandleMous:

; 3108 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@HandleMous
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN44@HandleMous:
	DD	1
	DD	$LN43@HandleMous
$LN43@HandleMous:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN42@HandleMous
$LN42@HandleMous:
	DB	117					; 00000075H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
	npad	1
$LN45@HandleMous:
	DD	$LN31@HandleMous
	DD	$LN25@HandleMous
	DD	$LN11@HandleMous
	DD	$LN9@HandleMous
	DD	$LN32@HandleMous
$LN41@HandleMous:
	DB	0
	DB	1
	DB	2
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?HandleMouse@CDXUTComboBox@@UAE_NIUtagPOINT@@IJ@Z ENDP	; CDXUTComboBox::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleKeyboard@CDXUTComboBox@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv163 = -220						; size = 4
tv94 = -220						; size = 4
tv93 = -220						; size = 4
_REPEAT_MASK$ = -20					; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTComboBox@@UAE_NIIJ@Z PROC		; CDXUTComboBox::HandleKeyboard, COMDAT
; _this$ = ecx

; 2870 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2871 :     const DWORD REPEAT_MASK = (0x40000000);

	mov	DWORD PTR _REPEAT_MASK$[ebp], 1073741824 ; 40000000H

; 2872 : 
; 2873 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN21@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN22@HandleKeyb
$LN21@HandleKeyb:

; 2874 :         return false;

	xor	al, al
	jmp	$LN23@HandleKeyb
$LN22@HandleKeyb:

; 2875 : 
; 2876 :     // Let the scroll bar have a chance to handle it first
; 2877 :     if( m_ScrollBar.HandleKeyboard( uMsg, wParam, lParam ) )

	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+350]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@HandleKeyb

; 2878 :         return true;

	mov	al, 1
	jmp	$LN23@HandleKeyb
$LN20@HandleKeyb:

; 2879 : 
; 2880 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv93[ebp], eax
	cmp	DWORD PTR tv93[ebp], 256		; 00000100H
	je	SHORT $LN17@HandleKeyb
	jmp	$LN18@HandleKeyb
$LN17@HandleKeyb:

; 2881 :     {
; 2882 :         case WM_KEYDOWN:
; 2883 :         {
; 2884 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv94[ebp], eax
	mov	ecx, DWORD PTR tv94[ebp]
	sub	ecx, 13					; 0000000dH
	mov	DWORD PTR tv94[ebp], ecx
	cmp	DWORD PTR tv94[ebp], 102		; 00000066H
	ja	$LN18@HandleKeyb
	mov	edx, DWORD PTR tv94[ebp]
	movzx	eax, BYTE PTR $LN27@HandleKeyb[edx]
	jmp	DWORD PTR $LN28@HandleKeyb[eax*4]
$LN14@HandleKeyb:

; 2885 :             {
; 2886 :                 case VK_RETURN:
; 2887 :                     if( m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	je	SHORT $LN13@HandleKeyb

; 2888 :                     {
; 2889 :                         if( m_iSelected != m_iFocused )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+338]
	cmp	edx, DWORD PTR [ecx+342]
	je	SHORT $LN12@HandleKeyb

; 2890 :                         {
; 2891 :                             m_iSelected = m_iFocused;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+342]
	mov	DWORD PTR [eax+338], edx

; 2892 :                             m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN12@HandleKeyb:

; 2893 :                         }
; 2894 :                         m_bOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+532], 0

; 2895 :                         
; 2896 :                         if( !m_pDialog->m_bKeyboardInput )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN11@HandleKeyb

; 2897 :                             m_pDialog->ClearFocus();

	call	?ClearFocus@CDXUTDialog@@SAXXZ		; CDXUTDialog::ClearFocus
$LN11@HandleKeyb:

; 2898 : 
; 2899 :                         return true;

	mov	al, 1
	jmp	$LN23@HandleKeyb
$LN13@HandleKeyb:

; 2900 :                     }
; 2901 :                     break;

	jmp	$LN18@HandleKeyb
$LN10@HandleKeyb:

; 2902 : 
; 2903 :                 case VK_F4:
; 2904 :                     // Filter out auto-repeats
; 2905 :                     if( lParam & REPEAT_MASK )

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN9@HandleKeyb

; 2906 :                         return true;

	mov	al, 1
	jmp	$LN23@HandleKeyb
$LN9@HandleKeyb:

; 2907 : 
; 2908 :                     m_bOpened = !m_bOpened;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN25@HandleKeyb
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN26@HandleKeyb
$LN25@HandleKeyb:
	mov	DWORD PTR tv163[ebp], 0
$LN26@HandleKeyb:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv163[ebp]
	mov	BYTE PTR [edx+532], al

; 2909 : 
; 2910 :                     if( !m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN8@HandleKeyb

; 2911 :                     {
; 2912 :                         m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 2913 : 
; 2914 :                         if( !m_pDialog->m_bKeyboardInput )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN8@HandleKeyb

; 2915 :                             m_pDialog->ClearFocus();

	call	?ClearFocus@CDXUTDialog@@SAXXZ		; CDXUTDialog::ClearFocus
$LN8@HandleKeyb:

; 2916 :                     }
; 2917 : 
; 2918 :                     return true;

	mov	al, 1
	jmp	$LN23@HandleKeyb
$LN6@HandleKeyb:

; 2919 : 
; 2920 :                 case VK_LEFT:
; 2921 :                 case VK_UP:
; 2922 :                     if( m_iFocused > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+342], 0
	jle	SHORT $LN5@HandleKeyb

; 2923 :                     {
; 2924 :                         m_iFocused--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+342]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+342], ecx

; 2925 :                         m_iSelected = m_iFocused;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+342]
	mov	DWORD PTR [eax+338], edx

; 2926 : 
; 2927 :                         if( !m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN5@HandleKeyb

; 2928 :                             m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN5@HandleKeyb:

; 2929 :                     }
; 2930 :                     
; 2931 :                     return true;

	mov	al, 1
	jmp	SHORT $LN23@HandleKeyb
$LN3@HandleKeyb:

; 2932 : 
; 2933 :                 case VK_RIGHT:
; 2934 :                 case VK_DOWN:
; 2935 :                     if( m_iFocused+1 < (int)GetNumItems() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+342]
	add	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNumItems@CDXUTComboBox@@QAEIXZ	; CDXUTComboBox::GetNumItems
	cmp	esi, eax
	jge	SHORT $LN2@HandleKeyb

; 2936 :                     {
; 2937 :                         m_iFocused++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+342]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+342], ecx

; 2938 :                         m_iSelected = m_iFocused;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+342]
	mov	DWORD PTR [eax+338], edx

; 2939 : 
; 2940 :                         if( !m_bOpened )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+532]
	test	ecx, ecx
	jne	SHORT $LN2@HandleKeyb

; 2941 :                             m_pDialog->SendEvent( EVENT_COMBOBOX_SELECTION_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	513					; 00000201H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN2@HandleKeyb:

; 2942 :                     }
; 2943 : 
; 2944 :                     return true;

	mov	al, 1
	jmp	SHORT $LN23@HandleKeyb
$LN18@HandleKeyb:

; 2945 :             }
; 2946 :             break;
; 2947 :         }
; 2948 :     }
; 2949 : 
; 2950 :     return false;

	xor	al, al
$LN23@HandleKeyb:

; 2951 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN28@HandleKeyb:
	DD	$LN14@HandleKeyb
	DD	$LN6@HandleKeyb
	DD	$LN3@HandleKeyb
	DD	$LN10@HandleKeyb
	DD	$LN18@HandleKeyb
$LN27@HandleKeyb:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	1
	DB	2
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?HandleKeyboard@CDXUTComboBox@@UAE_NIIJ@Z ENDP		; CDXUTComboBox::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnInit@CDXUTComboBox@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnInit@CDXUTComboBox@@UAEJXZ PROC			; CDXUTComboBox::OnInit, COMDAT
; _this$ = ecx

; 669  :     virtual HRESULT OnInit() { return m_pDialog->InitControl( &m_ScrollBar ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 350				; 0000015eH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?InitControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::InitControl
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnInit@CDXUTComboBox@@UAEJXZ ENDP			; CDXUTComboBox::OnInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetTextColor@CDXUTComboBox@@UAEXK@Z
_TEXT	SEGMENT
_pElement$ = -20					; size = 4
_this$ = -8						; size = 4
_Color$ = 8						; size = 4
?SetTextColor@CDXUTComboBox@@UAEXK@Z PROC		; CDXUTComboBox::SetTextColor, COMDAT
; _this$ = ecx

; 2808 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2809 :     CDXUTElement* pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 2810 : 
; 2811 :     if( pElement )

	cmp	DWORD PTR _pElement$[ebp], 0
	je	SHORT $LN2@SetTextCol

; 2812 :         pElement->FontColor.States[DXUT_STATE_NORMAL] = Color;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pElement$[ebp]
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [edx+ecx+68], eax
$LN2@SetTextCol:

; 2813 : 
; 2814 :     pElement = m_Elements.GetAt( 2 );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 2815 : 
; 2816 :     if( pElement )

	cmp	DWORD PTR _pElement$[ebp], 0
	je	SHORT $LN3@SetTextCol

; 2817 :         pElement->FontColor.States[DXUT_STATE_NORMAL] = Color;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pElement$[ebp]
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [edx+ecx+68], eax
$LN3@SetTextCol:

; 2818 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextColor@CDXUTComboBox@@UAEXK@Z ENDP		; CDXUTComboBox::SetTextColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CDXUTComboBox@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTComboBox@@UAE@XZ PROC				; CDXUTComboBox::~CDXUTComboBox, COMDAT
; _this$ = ecx

; 2801 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTComboBox@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTComboBox@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 2802 :     RemoveAllItems();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAllItems@CDXUTComboBox@@QAEXXZ	; CDXUTComboBox::RemoveAllItems

; 2803 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	??1?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTComboBoxItem *>::~CGrowableArray<DXUTComboBoxItem *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	??1CDXUTScrollBar@@UAE@XZ		; CDXUTScrollBar::~CDXUTScrollBar
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTButton@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDXUTComboBox@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDXUTButton@@UAE@XZ
__unwindfunclet$??1CDXUTComboBox@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	jmp	??1CDXUTScrollBar@@UAE@XZ		; CDXUTScrollBar::~CDXUTScrollBar
__unwindfunclet$??1CDXUTComboBox@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	jmp	??1?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTComboBoxItem *>::~CGrowableArray<DXUTComboBoxItem *>
__ehhandler$??1CDXUTComboBox@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTComboBox@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTComboBox@@UAE@XZ ENDP				; CDXUTComboBox::~CDXUTComboBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pDialog$ = 8						; size = 4
??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTComboBox::CDXUTComboBox, COMDAT
; _this$ = ecx

; 2786 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTButton@@QAE@PAVCDXUTDialog@@@Z	; CDXUTButton::CDXUTButton
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTComboBox@@6B@
	mov	eax, DWORD PTR _pDialog$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	??0CDXUTScrollBar@@QAE@PAVCDXUTDialog@@@Z ; CDXUTScrollBar::CDXUTScrollBar
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 597				; 00000255H
	call	??0?$CGrowableArray@PAUDXUTComboBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTComboBoxItem *>::CGrowableArray<DXUTComboBoxItem *>

; 2787 :     m_Type = DXUT_CONTROL_COMBOBOX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 4

; 2788 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2789 : 
; 2790 :     m_nDropHeight = 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+346], 100		; 00000064H

; 2791 : 
; 2792 :     m_nSBWidth = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+528], 16			; 00000010H

; 2793 :     m_bOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+532], 0

; 2794 :     m_iSelected = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+338], -1

; 2795 :     m_iFocused = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+342], -1

; 2796 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDXUTButton@@UAE@XZ
__unwindfunclet$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	jmp	??1CDXUTScrollBar@@UAE@XZ		; CDXUTScrollBar::~CDXUTScrollBar
__ehhandler$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTComboBox::CDXUTComboBox
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTListBox@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTListBox@@UAEPAXI@Z PROC			; CDXUTListBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTListBox@@UAE@XZ			; CDXUTListBox::~CDXUTListBox
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTListBox@@UAEPAXI@Z ENDP			; CDXUTListBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@PAUDXUTListBoxItem@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@PAUDXUTListBoxItem@@@@IAEJH@Z PROC ; CGrowableArray<DXUTListBoxItem *>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@PAUDXUTListBoxItem@@@@IAEJH@Z ENDP ; CGrowableArray<DXUTListBoxItem *>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEXXZ PROC ; CGrowableArray<DXUTListBoxItem *>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z ; CGrowableArray<DXUTListBoxItem *>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEXXZ ENDP ; CGrowableArray<DXUTListBoxItem *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Remove@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?Remove@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z PROC ; CGrowableArray<DXUTListBoxItem *>::Remove, COMDAT
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  :     if( nIndex < 0 || 
; 872  :         nIndex >= m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@Remove
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@Remove
$LN1@Remove:

; 873  :     {
; 874  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN5@Remove
	push	874					; 0000036aH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@Remove:

; 875  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 876  :     }
; 877  : 
; 878  :     // Destruct the element to be removed
; 879  :     m_pData[nIndex].~TYPE();
; 880  : 
; 881  :     // Compact the array and decrease the size
; 882  :     MoveMemory( &m_pData[nIndex], &m_pData[nIndex+1], sizeof(TYPE) * (m_nSize - (nIndex+1)) );

	mov	eax, DWORD PTR _nIndex$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _nIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH

; 883  :     --m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 884  : 
; 885  :     return S_OK;

	xor	eax, eax
$LN3@Remove:

; 886  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTListBoxItem *>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ PROC ; CGrowableArray<DXUTListBoxItem *>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ENDP ; CGrowableArray<DXUTListBoxItem *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z PROC ; CGrowableArray<DXUTListBoxItem *>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ENDP ; CGrowableArray<DXUTListBoxItem *>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Insert@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJHABQAUDXUTListBoxItem@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
_value$ = 12						; size = 4
?Insert@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJHABQAUDXUTListBoxItem@@@Z PROC ; CGrowableArray<DXUTListBoxItem *>::Insert, COMDAT
; _this$ = ecx

; 759  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 760  :     HRESULT hr;
; 761  : 
; 762  :     // Validate index
; 763  :     if( nIndex < 0 || 
; 764  :         nIndex > m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN2@Insert
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN3@Insert
$LN2@Insert:

; 765  :     {
; 766  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN6@Insert
	push	766					; 000002feH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@Insert:

; 767  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN4@Insert
$LN3@Insert:

; 768  :     }
; 769  : 
; 770  :     // Prepare the buffer
; 771  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTListBoxItem@@@@IAEJH@Z ; CGrowableArray<DXUTListBoxItem *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Insert

; 772  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@Insert
$LN1@Insert:

; 773  : 
; 774  :     // Shift the array
; 775  :     MoveMemory( &m_pData[nIndex+1], &m_pData[nIndex], sizeof(TYPE) * (m_nSize - nIndex) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _nIndex$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 776  : 
; 777  :     // Construct the new element
; 778  :     ::new (&m_pData[nIndex]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 779  : 
; 780  :     // Set the value and increase the size
; 781  :     m_pData[nIndex] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*4], eax

; 782  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 783  : 
; 784  :     return S_OK;

	xor	eax, eax
$LN4@Insert:

; 785  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJHABQAUDXUTListBoxItem@@@Z ENDP ; CGrowableArray<DXUTListBoxItem *>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJABQAUDXUTListBoxItem@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJABQAUDXUTListBoxItem@@@Z PROC ; CGrowableArray<DXUTListBoxItem *>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTListBoxItem@@@@IAEJH@Z ; CGrowableArray<DXUTListBoxItem *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJABQAUDXUTListBoxItem@@@Z ENDP ; CGrowableArray<DXUTListBoxItem *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z PROC ; CGrowableArray<DXUTListBoxItem *>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTListBoxItem@@@@IAEJH@Z ; CGrowableArray<DXUTListBoxItem *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTListBoxItem *>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z PROC ; CGrowableArray<DXUTListBoxItem *>::operator[], COMDAT
; _this$ = ecx

; 25   :     TYPE& operator[]( int nIndex ) { return GetAt( nIndex ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ENDP ; CGrowableArray<DXUTListBoxItem *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ PROC	; CGrowableArray<DXUTListBoxItem *>::~CGrowableArray<DXUTListBoxItem *>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEXXZ ; CGrowableArray<DXUTListBoxItem *>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ ENDP	; CGrowableArray<DXUTListBoxItem *>::~CGrowableArray<DXUTListBoxItem *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ PROC	; CGrowableArray<DXUTListBoxItem *>::CGrowableArray<DXUTListBoxItem *>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ ENDP	; CGrowableArray<DXUTListBoxItem *>::CGrowableArray<DXUTListBoxItem *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SelectItem@CDXUTListBox@@QAEXH@Z
_TEXT	SEGMENT
_nOldSelected$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewIndex$ = 8						; size = 4
?SelectItem@CDXUTListBox@@QAEXH@Z PROC			; CDXUTListBox::SelectItem, COMDAT
; _this$ = ecx

; 4264 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4265 :     // If no item exists, do nothing.
; 4266 :     if( m_Items.GetSize() == 0 )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	test	eax, eax
	jne	SHORT $LN5@SelectItem

; 4267 :         return;

	jmp	$LN6@SelectItem
$LN5@SelectItem:

; 4268 : 
; 4269 :     int nOldSelected = m_nSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	mov	DWORD PTR _nOldSelected$[ebp], ecx

; 4270 : 
; 4271 :     // Adjust m_nSelected
; 4272 :     m_nSelected = nNewIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewIndex$[ebp]
	mov	DWORD PTR [eax+307], ecx

; 4273 : 
; 4274 :     // Perform capping
; 4275 :     if( m_nSelected < 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+307], 0
	jge	SHORT $LN4@SelectItem

; 4276 :         m_nSelected = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+307], 0
$LN4@SelectItem:

; 4277 :     if( m_nSelected >= (int)m_Items.GetSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+307], eax
	jl	SHORT $LN3@SelectItem

; 4278 :         m_nSelected = m_Items.GetSize() - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+307], eax
$LN3@SelectItem:

; 4279 : 
; 4280 :     if( nOldSelected != m_nSelected )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nOldSelected$[ebp]
	cmp	ecx, DWORD PTR [eax+307]
	je	SHORT $LN2@SelectItem

; 4281 :     {
; 4282 :         if( m_dwStyle & MULTISELECTION )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	and	ecx, 1
	je	SHORT $LN1@SelectItem

; 4283 :         {
; 4284 :             m_Items[m_nSelected]->bSelected = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	BYTE PTR [edx+276], 1
$LN1@SelectItem:

; 4285 :         }
; 4286 : 
; 4287 :         // Update selection start
; 4288 :         m_nSelStart = m_nSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+307]
	mov	DWORD PTR [eax+311], edx

; 4289 : 
; 4290 :         // Adjust scroll bar
; 4291 :         m_ScrollBar.ShowItem( m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?ShowItem@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::ShowItem
$LN2@SelectItem:

; 4292 :     }
; 4293 : 
; 4294 :     m_pDialog->SendEvent( EVENT_LISTBOX_SELECTION, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1794					; 00000702H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN6@SelectItem:

; 4295 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SelectItem@CDXUTListBox@@QAEXH@Z ENDP			; CDXUTListBox::SelectItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetSelectedIndex@CDXUTListBox@@QAEHH@Z
_TEXT	SEGMENT
_pItem$1 = -32						; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_nPreviousSelected$ = 8					; size = 4
?GetSelectedIndex@CDXUTListBox@@QAEHH@Z PROC		; CDXUTListBox::GetSelectedIndex, COMDAT
; _this$ = ecx

; 4237 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4238 :     if( nPreviousSelected < -1 )

	cmp	DWORD PTR _nPreviousSelected$[ebp], -1
	jge	SHORT $LN7@GetSelecte

; 4239 :         return -1;

	or	eax, -1
	jmp	SHORT $LN8@GetSelecte
$LN7@GetSelecte:

; 4240 : 
; 4241 :     if( m_dwStyle & MULTISELECTION )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	and	ecx, 1
	je	SHORT $LN6@GetSelecte

; 4242 :     {
; 4243 :         // Multiple selection enabled. Search for the next item with the selected flag.
; 4244 :         for( int i = nPreviousSelected + 1; i < (int)m_Items.GetSize(); ++i )

	mov	eax, DWORD PTR _nPreviousSelected$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN5@GetSelecte
$LN4@GetSelecte:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@GetSelecte:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN3@GetSelecte

; 4245 :         {
; 4246 :             DXUTListBoxItem *pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$1[ebp], ecx

; 4247 : 
; 4248 :             if( pItem->bSelected )

	mov	eax, DWORD PTR _pItem$1[ebp]
	movzx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN2@GetSelecte

; 4249 :                 return i;

	mov	eax, DWORD PTR _i$2[ebp]
	jmp	SHORT $LN8@GetSelecte
$LN2@GetSelecte:

; 4250 :         }

	jmp	SHORT $LN4@GetSelecte
$LN3@GetSelecte:

; 4251 : 
; 4252 :         return -1;

	or	eax, -1
	jmp	SHORT $LN8@GetSelecte

; 4253 :     }
; 4254 :     else

	jmp	SHORT $LN8@GetSelecte
$LN6@GetSelecte:

; 4255 :     {
; 4256 :         // Single selection
; 4257 :         return m_nSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+307]
$LN8@GetSelecte:

; 4258 :     }
; 4259 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSelectedIndex@CDXUTListBox@@QAEHH@Z ENDP		; CDXUTListBox::GetSelectedIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetItem@CDXUTListBox@@QAEPAUDXUTListBoxItem@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetItem@CDXUTListBox@@QAEPAUDXUTListBoxItem@@H@Z PROC	; CDXUTListBox::GetItem, COMDAT
; _this$ = ecx

; 4221 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4222 :     if( nIndex < 0 || nIndex >= (int)m_Items.GetSize() )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@GetItem
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _nIndex$[ebp], eax
	jl	SHORT $LN2@GetItem
$LN1@GetItem:

; 4223 :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN3@GetItem
$LN2@GetItem:

; 4224 : 
; 4225 :     return m_Items[nIndex];

	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	eax, DWORD PTR [eax]
$LN3@GetItem:

; 4226 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetItem@CDXUTListBox@@QAEPAUDXUTListBoxItem@@H@Z ENDP	; CDXUTListBox::GetItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveAllItems@CDXUTListBox@@QAEXXZ
_TEXT	SEGMENT
$T1 = -236						; size = 4
_pItem$2 = -32						; size = 4
_i$3 = -20						; size = 4
_this$ = -8						; size = 4
?RemoveAllItems@CDXUTListBox@@QAEXXZ PROC		; CDXUTListBox::RemoveAllItems, COMDAT
; _this$ = ecx

; 4207 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4208 :     for( int i = 0; i < m_Items.GetSize(); ++i )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@RemoveAllI
$LN2@RemoveAllI:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@RemoveAllI:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN1@RemoveAllI

; 4209 :     {
; 4210 :         DXUTListBoxItem *pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$2[ebp], ecx

; 4211 :         delete pItem;

	mov	eax, DWORD PTR _pItem$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 4212 :     }

	jmp	SHORT $LN2@RemoveAllI
$LN1@RemoveAllI:

; 4213 : 
; 4214 :     m_Items.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?RemoveAll@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEXXZ ; CGrowableArray<DXUTListBoxItem *>::RemoveAll

; 4215 :     m_ScrollBar.SetTrackRange( 0, 1 );

	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z	; CDXUTScrollBar::SetTrackRange

; 4216 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAllItems@CDXUTListBox@@QAEXXZ ENDP		; CDXUTListBox::RemoveAllItems
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveItemByData@CDXUTListBox@@QAEXPAX@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?RemoveItemByData@CDXUTListBox@@QAEXPAX@Z PROC		; CDXUTListBox::RemoveItemByData, COMDAT
; _this$ = ecx

; 4201 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4202 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveItemByData@CDXUTListBox@@QAEXPAX@Z ENDP		; CDXUTListBox::RemoveItemByData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveItemByText@CDXUTListBox@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_wszText$ = 8						; size = 4
?RemoveItemByText@CDXUTListBox@@QAEXPAD@Z PROC		; CDXUTListBox::RemoveItemByText, COMDAT
; _this$ = ecx

; 4195 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4196 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveItemByText@CDXUTListBox@@QAEXPAD@Z ENDP		; CDXUTListBox::RemoveItemByText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveItem@CDXUTListBox@@QAEXH@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_pItem$ = -20						; size = 4
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?RemoveItem@CDXUTListBox@@QAEXH@Z PROC			; CDXUTListBox::RemoveItem, COMDAT
; _this$ = ecx

; 4177 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4178 :     if( nIndex < 0 || nIndex >= (int)m_Items.GetSize() )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN2@RemoveItem
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _nIndex$[ebp], eax
	jl	SHORT $LN3@RemoveItem
$LN2@RemoveItem:

; 4179 :         return;

	jmp	$LN4@RemoveItem
$LN3@RemoveItem:

; 4180 : 
; 4181 :     DXUTListBoxItem *pItem = m_Items.GetAt( nIndex );

	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$[ebp], ecx

; 4182 : 
; 4183 :     delete pItem;

	mov	eax, DWORD PTR _pItem$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 4184 :     m_Items.Remove( nIndex );

	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?Remove@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJH@Z ; CGrowableArray<DXUTListBoxItem *>::Remove

; 4185 :     m_ScrollBar.SetTrackRange( 0, m_Items.GetSize() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z	; CDXUTScrollBar::SetTrackRange

; 4186 :     if( m_nSelected >= (int)m_Items.GetSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+307], eax
	jl	SHORT $LN1@RemoveItem

; 4187 :         m_nSelected = m_Items.GetSize() - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+307], eax
$LN1@RemoveItem:

; 4188 : 
; 4189 :     m_pDialog->SendEvent( EVENT_LISTBOX_SELECTION, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1794					; 00000702H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN4@RemoveItem:

; 4190 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveItem@CDXUTListBox@@QAEXH@Z ENDP			; CDXUTListBox::RemoveItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?InsertItem@CDXUTListBox@@QAEJHPBDPAX@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_hr$ = -32						; size = 4
_pNewItem$ = -20					; size = 4
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
_wszText$ = 12						; size = 4
_pData$ = 16						; size = 4
?InsertItem@CDXUTListBox@@QAEJHPBDPAX@Z PROC		; CDXUTListBox::InsertItem, COMDAT
; _this$ = ecx

; 4155 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4156 :     DXUTListBoxItem *pNewItem = new DXUTListBoxItem;

	push	277					; 00000115H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pNewItem$[ebp], eax

; 4157 :     if( !pNewItem )

	cmp	DWORD PTR _pNewItem$[ebp], 0
	jne	SHORT $LN4@InsertItem

; 4158 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN5@InsertItem
$LN4@InsertItem:

; 4159 : 
; 4160 :     StringCchCopy( pNewItem->strText, 256, wszText );

	mov	eax, DWORD PTR _wszText$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pNewItem$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 4161 :     pNewItem->pData = pData;

	mov	eax, DWORD PTR _pNewItem$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax+256], ecx

; 4162 :     SetRect( &pNewItem->rcActive, 0, 0, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _pNewItem$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4163 :     pNewItem->bSelected = false;

	mov	eax, DWORD PTR _pNewItem$[ebp]
	mov	BYTE PTR [eax+276], 0

; 4164 : 
; 4165 :     HRESULT hr = m_Items.Insert( nIndex, pNewItem );

	lea	eax, DWORD PTR _pNewItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?Insert@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJHABQAUDXUTListBoxItem@@@Z ; CGrowableArray<DXUTListBoxItem *>::Insert
	mov	DWORD PTR _hr$[ebp], eax

; 4166 :     if( SUCCEEDED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@InsertItem

; 4167 :         m_ScrollBar.SetTrackRange( 0, m_Items.GetSize() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z	; CDXUTScrollBar::SetTrackRange

; 4168 :     else

	jmp	SHORT $LN2@InsertItem
$LN3@InsertItem:

; 4169 :         SAFE_DELETE( pNewItem );

	cmp	DWORD PTR _pNewItem$[ebp], 0
	je	SHORT $LN2@InsertItem
	mov	eax, DWORD PTR _pNewItem$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pNewItem$[ebp], 0
$LN2@InsertItem:

; 4170 : 
; 4171 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN5@InsertItem:

; 4172 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@InsertItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN9@InsertItem:
	DD	1
	DD	$LN8@InsertItem
$LN8@InsertItem:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@InsertItem
$LN7@InsertItem:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
?InsertItem@CDXUTListBox@@QAEJHPBDPAX@Z ENDP		; CDXUTListBox::InsertItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddItem@CDXUTListBox@@QAEJPBDPAX@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_hr$ = -32						; size = 4
_pNewItem$ = -20					; size = 4
_this$ = -8						; size = 4
_wszText$ = 8						; size = 4
_pData$ = 12						; size = 4
?AddItem@CDXUTListBox@@QAEJPBDPAX@Z PROC		; CDXUTListBox::AddItem, COMDAT
; _this$ = ecx

; 4129 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4130 :     DXUTListBoxItem *pNewItem = new DXUTListBoxItem;

	push	277					; 00000115H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pNewItem$[ebp], eax

; 4131 :     if( !pNewItem )

	cmp	DWORD PTR _pNewItem$[ebp], 0
	jne	SHORT $LN4@AddItem

; 4132 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN5@AddItem
$LN4@AddItem:

; 4133 : 
; 4134 :     StringCchCopy( pNewItem->strText, 256, wszText );

	mov	eax, DWORD PTR _wszText$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _pNewItem$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 4135 :     pNewItem->pData = pData;

	mov	eax, DWORD PTR _pNewItem$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax+256], ecx

; 4136 :     SetRect( &pNewItem->rcActive, 0, 0, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _pNewItem$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4137 :     pNewItem->bSelected = false;

	mov	eax, DWORD PTR _pNewItem$[ebp]
	mov	BYTE PTR [eax+276], 0

; 4138 : 
; 4139 :     HRESULT hr = m_Items.Add( pNewItem );

	lea	eax, DWORD PTR _pNewItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?Add@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEJABQAUDXUTListBoxItem@@@Z ; CGrowableArray<DXUTListBoxItem *>::Add
	mov	DWORD PTR _hr$[ebp], eax

; 4140 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@AddItem

; 4141 :     {
; 4142 :         SAFE_DELETE( pNewItem );

	cmp	DWORD PTR _pNewItem$[ebp], 0
	je	SHORT $LN2@AddItem
	mov	eax, DWORD PTR _pNewItem$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pNewItem$[ebp], 0
$LN2@AddItem:

; 4143 :     }
; 4144 :     else

	jmp	SHORT $LN1@AddItem
$LN3@AddItem:

; 4145 :     {
; 4146 :         m_ScrollBar.SetTrackRange( 0, m_Items.GetSize() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z	; CDXUTScrollBar::SetTrackRange
$LN1@AddItem:

; 4147 :     }
; 4148 : 
; 4149 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN5@AddItem:

; 4150 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@AddItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@AddItem:
	DD	1
	DD	$LN8@AddItem
$LN8@AddItem:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@AddItem
$LN7@AddItem:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
?AddItem@CDXUTListBox@@QAEJPBDPAX@Z ENDP		; CDXUTListBox::AddItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetStyle@CDXUTListBox@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwStyle$ = 8						; size = 4
?SetStyle@CDXUTListBox@@QAEXK@Z PROC			; CDXUTListBox::SetStyle, COMDAT
; _this$ = ecx

; 615  :     void SetStyle( DWORD dwStyle ) { m_dwStyle = dwStyle; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwStyle$[ebp]
	mov	DWORD PTR [eax+303], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStyle@CDXUTListBox@@QAEXK@Z ENDP			; CDXUTListBox::SetStyle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateRects@CDXUTListBox@@UAEXXZ
_TEXT	SEGMENT
_pFontNode$ = -20					; size = 4
_this$ = -8						; size = 4
?UpdateRects@CDXUTListBox@@UAEXXZ PROC			; CDXUTListBox::UpdateRects, COMDAT
; _this$ = ecx

; 4103 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4104 :     CDXUTControl::UpdateRects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateRects@CDXUTControl@@MAEXXZ	; CDXUTControl::UpdateRects

; 4105 : 
; 4106 :     m_rcSelection = m_rcBoundingBox;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 93					; 0000005dH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 4107 :     m_rcSelection.right -= m_nSBWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+101]
	sub	edx, DWORD PTR [ecx+287]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+101], edx

; 4108 :     InflateRect( &m_rcSelection, -m_nBorder, -m_nBorder );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+291]
	neg	ecx
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+291]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 93					; 0000005dH
	push	ecx
	call	DWORD PTR __imp__InflateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4109 :     m_rcText = m_rcSelection;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 93					; 0000005dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 4110 :     InflateRect( &m_rcText, -m_nMargin, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+295]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 77					; 0000004dH
	push	edx
	call	DWORD PTR __imp__InflateRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4111 : 
; 4112 :     // Update the scrollbar's rects
; 4113 :     m_ScrollBar.SetLocation( m_rcBoundingBox.right - m_nSBWidth, m_rcBoundingBox.top );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+65]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+69]
	sub	ecx, DWORD PTR [eax+287]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 4114 :     m_ScrollBar.SetSize( m_nSBWidth, m_height );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+287]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 4115 :     DXUTFontNode* pFontNode = m_pDialog->GetManager()->GetFontNode( m_Elements.GetAt( 0 )->iFont );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ ; CDXUTDialog::GetManager
	mov	ecx, eax
	call	?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z ; CDXUTDialogResourceManager::GetFontNode
	mov	DWORD PTR _pFontNode$[ebp], eax

; 4116 :     if( pFontNode && pFontNode->nHeight )

	cmp	DWORD PTR _pFontNode$[ebp], 0
	je	SHORT $LN2@UpdateRect
	mov	eax, DWORD PTR _pFontNode$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN2@UpdateRect

; 4117 :     {
; 4118 :         m_ScrollBar.SetPageSize( RectHeight( m_rcText ) / pFontNode->nHeight );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 77					; 0000004dH
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	ecx, DWORD PTR _pFontNode$[ebp]
	cdq
	idiv	DWORD PTR [ecx+264]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetPageSize@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::SetPageSize

; 4119 : 
; 4120 :         // The selected item may have been scrolled off the page.
; 4121 :         // Ensure that it is in page again.
; 4122 :         m_ScrollBar.ShowItem( m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?ShowItem@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::ShowItem
$LN2@UpdateRect:

; 4123 :     }
; 4124 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRects@CDXUTListBox@@UAEXXZ ENDP			; CDXUTListBox::UpdateRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTListBox@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
_bSelectedStyle$1 = -117				; size = 1
_pItem$2 = -108						; size = 4
_i$3 = -96						; size = 4
_rcSel$4 = -84						; size = 16
_rc$5 = -60						; size = 16
_pSelElement$ = -36					; size = 4
_pElement$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTListBox@@UAEXPAUIDirect3DDevice9@@M@Z PROC	; CDXUTListBox::Render, COMDAT
; _this$ = ecx

; 4612 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 4613 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN19@Render

; 4614 :         return;

	jmp	$LN20@Render
$LN19@Render:

; 4615 : 
; 4616 :     CDXUTElement* pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 4617 :     pElement->TextureColor.Blend( DXUT_STATE_NORMAL, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 4618 :     pElement->FontColor.Blend( DXUT_STATE_NORMAL, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 68					; 00000044H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 4619 : 
; 4620 :     CDXUTElement* pSelElement = m_Elements.GetAt( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pSelElement$[ebp], eax

; 4621 :     pSelElement->TextureColor.Blend( DXUT_STATE_NORMAL, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _pSelElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 4622 :     pSelElement->FontColor.Blend( DXUT_STATE_NORMAL, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _pSelElement$[ebp]
	add	ecx, 68					; 00000044H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 4623 : 
; 4624 :     m_pDialog->DrawSprite( pElement, &m_rcBoundingBox );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 4625 : 
; 4626 :     // Render the text
; 4627 :     if( m_Items.GetSize() > 0 )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	test	eax, eax
	jle	$LN12@Render

; 4628 :     {
; 4629 :         // Find out the height of a single line of text
; 4630 :         RECT rc = m_rcText;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 77					; 0000004dH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rc$5[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rc$5[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rc$5[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rc$5[ebp+12], edx

; 4631 :         RECT rcSel = m_rcSelection;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 93					; 0000005dH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcSel$4[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcSel$4[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcSel$4[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcSel$4[ebp+12], edx

; 4632 :         rc.bottom = rc.top + m_pDialog->GetManager()->GetFontNode( pElement->iFont )->nHeight;

	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ ; CDXUTDialog::GetManager
	mov	ecx, eax
	call	?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z ; CDXUTDialogResourceManager::GetFontNode
	mov	ecx, DWORD PTR _rc$5[ebp+4]
	add	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR _rc$5[ebp+12], ecx

; 4633 : 
; 4634 :         // Update the line height formation
; 4635 :         m_nTextHeight = rc.bottom - rc.top;

	mov	eax, DWORD PTR _rc$5[ebp+12]
	sub	eax, DWORD PTR _rc$5[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+299], eax

; 4636 : 
; 4637 :         static bool bSBInit;
; 4638 :         if( !bSBInit )

	movzx	eax, BYTE PTR ?bSBInit@?6??Render@CDXUTListBox@@UAEXPAUIDirect3DDevice9@@M@Z@4_NA
	test	eax, eax
	jne	SHORT $LN17@Render

; 4639 :         {
; 4640 :             // Update the page size of the scroll bar
; 4641 :             if( m_nTextHeight )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+299], 0
	je	SHORT $LN16@Render

; 4642 :                 m_ScrollBar.SetPageSize( RectHeight( m_rcText ) / m_nTextHeight );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 77					; 0000004dH
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [ecx+299]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetPageSize@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::SetPageSize

; 4643 :             else

	jmp	SHORT $LN15@Render
$LN16@Render:

; 4644 :                 m_ScrollBar.SetPageSize( RectHeight( m_rcText ) );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 77					; 0000004dH
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?SetPageSize@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::SetPageSize
$LN15@Render:

; 4645 :             bSBInit = true;

	mov	BYTE PTR ?bSBInit@?6??Render@CDXUTListBox@@UAEXPAUIDirect3DDevice9@@M@Z@4_NA, 1
$LN17@Render:

; 4646 :         }
; 4647 : 
; 4648 :         rc.right = m_rcText.right;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+85]
	mov	DWORD PTR _rc$5[ebp+8], ecx

; 4649 :         for( int i = m_ScrollBar.GetTrackPos(); i < (int)m_Items.GetSize(); ++i )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN14@Render
$LN13@Render:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN14@Render:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _i$3[ebp], eax
	jge	$LN12@Render

; 4650 :         {
; 4651 :             if( rc.bottom > m_rcText.bottom )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rc$5[ebp+12]
	cmp	ecx, DWORD PTR [eax+89]
	jle	SHORT $LN11@Render

; 4652 :                 break;

	jmp	$LN12@Render
$LN11@Render:

; 4653 : 
; 4654 :             DXUTListBoxItem *pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$2[ebp], ecx

; 4655 : 
; 4656 :             // Determine if we need to render this item with the
; 4657 :             // selected element.
; 4658 :             bool bSelectedStyle = false;

	mov	BYTE PTR _bSelectedStyle$1[ebp], 0

; 4659 : 
; 4660 :             if( !( m_dwStyle & MULTISELECTION ) && i == m_nSelected )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	and	ecx, 1
	jne	SHORT $LN10@Render
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+307]
	jne	SHORT $LN10@Render

; 4661 :                 bSelectedStyle = true;

	mov	BYTE PTR _bSelectedStyle$1[ebp], 1

; 4662 :             else

	jmp	$LN3@Render
$LN10@Render:

; 4663 :             if( m_dwStyle & MULTISELECTION )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	and	ecx, 1
	je	SHORT $LN3@Render

; 4664 :             {
; 4665 :                 if( m_bDrag &&
; 4666 :                     ( ( i >= m_nSelected && i < m_nSelStart ) ||
; 4667 :                       ( i <= m_nSelected && i > m_nSelStart ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+315]
	test	ecx, ecx
	je	SHORT $LN7@Render
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+307]
	jl	SHORT $LN5@Render
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+311]
	jl	SHORT $LN6@Render
$LN5@Render:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+307]
	jg	SHORT $LN7@Render
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax+311]
	jle	SHORT $LN7@Render
$LN6@Render:

; 4668 :                     bSelectedStyle = m_Items[m_nSelStart]->bSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	al, BYTE PTR [edx+276]
	mov	BYTE PTR _bSelectedStyle$1[ebp], al

; 4669 :                 else

	jmp	SHORT $LN3@Render
$LN7@Render:

; 4670 :                 if( pItem->bSelected )

	mov	eax, DWORD PTR _pItem$2[ebp]
	movzx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	je	SHORT $LN3@Render

; 4671 :                     bSelectedStyle = true;

	mov	BYTE PTR _bSelectedStyle$1[ebp], 1
$LN3@Render:

; 4672 :             }
; 4673 : 
; 4674 :             if( bSelectedStyle )

	movzx	eax, BYTE PTR _bSelectedStyle$1[ebp]
	test	eax, eax
	je	SHORT $LN2@Render

; 4675 :             {
; 4676 :                 rcSel.top = rc.top; rcSel.bottom = rc.bottom;

	mov	eax, DWORD PTR _rc$5[ebp+4]
	mov	DWORD PTR _rcSel$4[ebp+4], eax
	mov	eax, DWORD PTR _rc$5[ebp+12]
	mov	DWORD PTR _rcSel$4[ebp+12], eax

; 4677 :                 m_pDialog->DrawSprite( pSelElement, &rcSel );

	lea	eax, DWORD PTR _rcSel$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 4678 :                 m_pDialog->DrawText( pItem->strText, pSelElement, &rc );

	push	-1
	push	0
	lea	eax, DWORD PTR _rc$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSelElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pItem$2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 4679 :             }
; 4680 :             else

	jmp	SHORT $LN1@Render
$LN2@Render:

; 4681 :                 m_pDialog->DrawText( pItem->strText, pElement, &rc );

	push	-1
	push	0
	lea	eax, DWORD PTR _rc$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pItem$2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
$LN1@Render:

; 4682 : 
; 4683 :             OffsetRect( &rc, 0, m_nTextHeight );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+299]
	push	ecx
	push	0
	lea	edx, DWORD PTR _rc$5[ebp]
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4684 :         }

	jmp	$LN13@Render
$LN12@Render:

; 4685 :     }
; 4686 : 
; 4687 :     // Render the scroll bar
; 4688 : 
; 4689 :     m_ScrollBar.Render( pd3dDevice, fElapsedTime );

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+109]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@Render:

; 4690 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN25@Render:
	DD	2
	DD	$LN24@Render
$LN24@Render:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN22@Render
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN23@Render
$LN23@Render:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN22@Render:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
?Render@CDXUTListBox@@UAEXPAUIDirect3DDevice9@@M@Z ENDP	; CDXUTListBox::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTListBox@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv472 = -472						; size = 4
tv328 = -472						; size = 4
tv322 = -472						; size = 4
tv272 = -472						; size = 4
tv266 = -472						; size = 4
tv233 = -472						; size = 4
tv227 = -472						; size = 4
tv218 = -472						; size = 4
tv145 = -472						; size = 4
_nScrollAmount$1 = -272					; size = 4
_uLines$2 = -260					; size = 4
_nItem$3 = -248						; size = 4
_n$4 = -236						; size = 4
_nEnd$5 = -224						; size = 4
_pItem$6 = -212						; size = 4
_i$7 = -200						; size = 4
_pItem$8 = -188						; size = 4
_i$9 = -176						; size = 4
_bLastSelected$10 = -161				; size = 1
_nEnd$11 = -152						; size = 4
_nBegin$12 = -140					; size = 4
_pItem$13 = -128					; size = 4
_i$14 = -116						; size = 4
_pItem$15 = -104					; size = 4
_i$16 = -92						; size = 4
_pItem$17 = -80						; size = 4
_i$18 = -68						; size = 4
_nEnd$19 = -56						; size = 4
_nBegin$20 = -44					; size = 4
_pSelItem$21 = -32					; size = 4
_nClicked$22 = -20					; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTListBox@@UAE_NIUtagPOINT@@IJ@Z PROC	; CDXUTListBox::HandleMouse, COMDAT
; _this$ = ecx

; 4394 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4395 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN51@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN52@HandleMous
$LN51@HandleMous:

; 4396 :         return false;

	xor	al, al
	jmp	$LN53@HandleMous
$LN52@HandleMous:

; 4397 : 
; 4398 :     // First acquire focus
; 4399 :     if( WM_LBUTTONDOWN == uMsg )

	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	jne	SHORT $LN50@HandleMous

; 4400 :         if( !m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN50@HandleMous

; 4401 :             m_pDialog->RequestFocus( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
$LN50@HandleMous:

; 4402 : 
; 4403 :     // Let the scroll bar handle it first.
; 4404 :     if( m_ScrollBar.HandleMouse( uMsg, pt, wParam, lParam ) )

	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pt$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uMsg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+109]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN48@HandleMous

; 4405 :         return true;

	mov	al, 1
	jmp	$LN53@HandleMous
$LN48@HandleMous:

; 4406 : 
; 4407 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv145[ebp], ecx
	cmp	DWORD PTR tv145[ebp], 10		; 0000000aH
	ja	$LN46@HandleMous
	mov	edx, DWORD PTR tv145[ebp]
	movzx	eax, BYTE PTR $LN71@HandleMous[edx]
	jmp	DWORD PTR $LN75@HandleMous[eax*4]
$LN45@HandleMous:

; 4408 :     {
; 4409 :         case WM_LBUTTONDOWN:
; 4410 :         case WM_LBUTTONDBLCLK:
; 4411 :             // Check for clicks in the text area
; 4412 :             if( m_Items.GetSize() > 0 && PtInRect( &m_rcSelection, pt ) )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	test	eax, eax
	jle	$LN44@HandleMous
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 93					; 0000005dH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN44@HandleMous

; 4413 :             {
; 4414 :                 // Compute the index of the clicked item
; 4415 : 
; 4416 :                 int nClicked;
; 4417 :                 if( m_nTextHeight )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+299], 0
	je	SHORT $LN43@HandleMous

; 4418 :                     nClicked = m_ScrollBar.GetTrackPos() + ( pt.y - m_rcText.top ) / m_nTextHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pt$[ebp+4]
	sub	eax, DWORD PTR [edx+81]
	mov	esi, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [esi+299]
	add	ecx, eax
	mov	DWORD PTR _nClicked$22[ebp], ecx

; 4419 :                 else

	jmp	SHORT $LN42@HandleMous
$LN43@HandleMous:

; 4420 :                     nClicked = -1;

	mov	DWORD PTR _nClicked$22[ebp], -1
$LN42@HandleMous:

; 4421 : 
; 4422 :                 // Only proceed if the click falls on top of an item.
; 4423 : 
; 4424 :                 if( nClicked >= m_ScrollBar.GetTrackPos() &&
; 4425 :                     nClicked < (int)m_Items.GetSize() &&
; 4426 :                     nClicked < m_ScrollBar.GetTrackPos() + m_ScrollBar.GetPageSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	cmp	DWORD PTR _nClicked$22[ebp], eax
	jl	$LN41@HandleMous
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _nClicked$22[ebp], eax
	jge	$LN41@HandleMous
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetPageSize@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetPageSize
	add	esi, eax
	cmp	DWORD PTR _nClicked$22[ebp], esi
	jge	$LN41@HandleMous

; 4427 :                 {
; 4428 :                     SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4429 :                     m_bDrag = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+315], 1

; 4430 : 
; 4431 :                     // If this is a double click, fire off an event and exit
; 4432 :                     // since the first click would have taken care of the selection
; 4433 :                     // updating.
; 4434 :                     if( uMsg == WM_LBUTTONDBLCLK )

	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	jne	SHORT $LN40@HandleMous

; 4435 :                     {
; 4436 :                         m_pDialog->SendEvent( EVENT_LISTBOX_ITEM_DBLCLK, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1793					; 00000701H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 4437 :                         return true;

	mov	al, 1
	jmp	$LN53@HandleMous
$LN40@HandleMous:

; 4438 :                     }
; 4439 : 
; 4440 :                     m_nSelected = nClicked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nClicked$22[ebp]
	mov	DWORD PTR [eax+307], ecx

; 4441 :                     if( !( wParam & MK_SHIFT ) )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 4
	jne	SHORT $LN39@HandleMous

; 4442 :                         m_nSelStart = m_nSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+307]
	mov	DWORD PTR [eax+311], edx
$LN39@HandleMous:

; 4443 : 
; 4444 :                     // If this is a multi-selection listbox, update per-item
; 4445 :                     // selection data.
; 4446 : 
; 4447 :                     if( m_dwStyle & MULTISELECTION )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	and	ecx, 1
	je	$LN38@HandleMous

; 4448 :                     {
; 4449 :                         // Determine behavior based on the state of Shift and Ctrl
; 4450 : 
; 4451 :                         DXUTListBoxItem *pSelItem = m_Items.GetAt( m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _pSelItem$21[ebp], edx

; 4452 :                         if( ( wParam & (MK_SHIFT|MK_CONTROL) ) == MK_CONTROL )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 12					; 0000000cH
	cmp	eax, 8
	jne	SHORT $LN37@HandleMous

; 4453 :                         {
; 4454 :                             // Control click. Reverse the selection of this item.
; 4455 : 
; 4456 :                             pSelItem->bSelected = !pSelItem->bSelected;

	mov	eax, DWORD PTR _pSelItem$21[ebp]
	movzx	ecx, BYTE PTR [eax+276]
	test	ecx, ecx
	jne	SHORT $LN55@HandleMous
	mov	DWORD PTR tv218[ebp], 1
	jmp	SHORT $LN56@HandleMous
$LN55@HandleMous:
	mov	DWORD PTR tv218[ebp], 0
$LN56@HandleMous:
	mov	edx, DWORD PTR _pSelItem$21[ebp]
	mov	al, BYTE PTR tv218[ebp]
	mov	BYTE PTR [edx+276], al

; 4457 :                         } else

	jmp	$LN38@HandleMous
$LN37@HandleMous:

; 4458 :                         if( ( wParam & (MK_SHIFT|MK_CONTROL) ) == MK_SHIFT )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 12					; 0000000cH
	cmp	eax, 4
	jne	$LN35@HandleMous

; 4459 :                         {
; 4460 :                             // Shift click. Set the selection for all items
; 4461 :                             // from last selected item to the current item.
; 4462 :                             // Clear everything else.
; 4463 : 
; 4464 :                             int nBegin = __min( m_nSelStart, m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	jge	SHORT $LN57@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR tv227[ebp], ecx
	jmp	SHORT $LN58@HandleMous
$LN57@HandleMous:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	DWORD PTR tv227[ebp], eax
$LN58@HandleMous:
	mov	ecx, DWORD PTR tv227[ebp]
	mov	DWORD PTR _nBegin$20[ebp], ecx

; 4465 :                             int nEnd = __max( m_nSelStart, m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	jle	SHORT $LN59@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR tv233[ebp], ecx
	jmp	SHORT $LN60@HandleMous
$LN59@HandleMous:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	DWORD PTR tv233[ebp], eax
$LN60@HandleMous:
	mov	ecx, DWORD PTR tv233[ebp]
	mov	DWORD PTR _nEnd$19[ebp], ecx

; 4466 : 
; 4467 :                             for( int i = 0; i < nBegin; ++i )

	mov	DWORD PTR _i$18[ebp], 0
	jmp	SHORT $LN34@HandleMous
$LN33@HandleMous:
	mov	eax, DWORD PTR _i$18[ebp]
	add	eax, 1
	mov	DWORD PTR _i$18[ebp], eax
$LN34@HandleMous:
	mov	eax, DWORD PTR _i$18[ebp]
	cmp	eax, DWORD PTR _nBegin$20[ebp]
	jge	SHORT $LN32@HandleMous

; 4468 :                             {
; 4469 :                                 DXUTListBoxItem *pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$17[ebp], ecx

; 4470 :                                 pItem->bSelected = false;

	mov	eax, DWORD PTR _pItem$17[ebp]
	mov	BYTE PTR [eax+276], 0

; 4471 :                             }

	jmp	SHORT $LN33@HandleMous
$LN32@HandleMous:

; 4472 : 
; 4473 :                             for( int i = nEnd + 1; i < (int)m_Items.GetSize(); ++i )

	mov	eax, DWORD PTR _nEnd$19[ebp]
	add	eax, 1
	mov	DWORD PTR _i$16[ebp], eax
	jmp	SHORT $LN31@HandleMous
$LN30@HandleMous:
	mov	eax, DWORD PTR _i$16[ebp]
	add	eax, 1
	mov	DWORD PTR _i$16[ebp], eax
$LN31@HandleMous:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _i$16[ebp], eax
	jge	SHORT $LN29@HandleMous

; 4474 :                             {
; 4475 :                                 DXUTListBoxItem *pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$15[ebp], ecx

; 4476 :                                 pItem->bSelected = false;

	mov	eax, DWORD PTR _pItem$15[ebp]
	mov	BYTE PTR [eax+276], 0

; 4477 :                             }

	jmp	SHORT $LN30@HandleMous
$LN29@HandleMous:

; 4478 : 
; 4479 :                             for( int i = nBegin; i <= nEnd; ++i )

	mov	eax, DWORD PTR _nBegin$20[ebp]
	mov	DWORD PTR _i$14[ebp], eax
	jmp	SHORT $LN28@HandleMous
$LN27@HandleMous:
	mov	eax, DWORD PTR _i$14[ebp]
	add	eax, 1
	mov	DWORD PTR _i$14[ebp], eax
$LN28@HandleMous:
	mov	eax, DWORD PTR _i$14[ebp]
	cmp	eax, DWORD PTR _nEnd$19[ebp]
	jg	SHORT $LN26@HandleMous

; 4480 :                             {
; 4481 :                                 DXUTListBoxItem *pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$13[ebp], ecx

; 4482 :                                 pItem->bSelected = true;

	mov	eax, DWORD PTR _pItem$13[ebp]
	mov	BYTE PTR [eax+276], 1

; 4483 :                             }

	jmp	SHORT $LN27@HandleMous
$LN26@HandleMous:
	jmp	$LN38@HandleMous
$LN35@HandleMous:

; 4484 :                         } else
; 4485 :                         if( ( wParam & (MK_SHIFT|MK_CONTROL) ) == ( MK_SHIFT|MK_CONTROL ) )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 12					; 0000000cH
	cmp	eax, 12					; 0000000cH
	jne	$LN24@HandleMous

; 4486 :                         {
; 4487 :                             // Control-Shift-click.
; 4488 : 
; 4489 :                             // The behavior is:
; 4490 :                             //   Set all items from m_nSelStart to m_nSelected to
; 4491 :                             //     the same state as m_nSelStart, not including m_nSelected.
; 4492 :                             //   Set m_nSelected to selected.
; 4493 : 
; 4494 :                             int nBegin = __min( m_nSelStart, m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	jge	SHORT $LN61@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR tv266[ebp], ecx
	jmp	SHORT $LN62@HandleMous
$LN61@HandleMous:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	DWORD PTR tv266[ebp], eax
$LN62@HandleMous:
	mov	ecx, DWORD PTR tv266[ebp]
	mov	DWORD PTR _nBegin$12[ebp], ecx

; 4495 :                             int nEnd = __max( m_nSelStart, m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	jle	SHORT $LN63@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR tv272[ebp], ecx
	jmp	SHORT $LN64@HandleMous
$LN63@HandleMous:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	DWORD PTR tv272[ebp], eax
$LN64@HandleMous:
	mov	ecx, DWORD PTR tv272[ebp]
	mov	DWORD PTR _nEnd$11[ebp], ecx

; 4496 : 
; 4497 :                             // The two ends do not need to be set here.
; 4498 : 
; 4499 :                             bool bLastSelected = m_Items.GetAt( m_nSelStart )->bSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	edx, DWORD PTR [eax]
	mov	al, BYTE PTR [edx+276]
	mov	BYTE PTR _bLastSelected$10[ebp], al

; 4500 :                             for( int i = nBegin + 1; i < nEnd; ++i )

	mov	eax, DWORD PTR _nBegin$12[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
	jmp	SHORT $LN23@HandleMous
$LN22@HandleMous:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9[ebp], eax
$LN23@HandleMous:
	mov	eax, DWORD PTR _i$9[ebp]
	cmp	eax, DWORD PTR _nEnd$11[ebp]
	jge	SHORT $LN21@HandleMous

; 4501 :                             {
; 4502 :                                 DXUTListBoxItem *pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$8[ebp], ecx

; 4503 :                                 pItem->bSelected = bLastSelected;

	mov	eax, DWORD PTR _pItem$8[ebp]
	mov	cl, BYTE PTR _bLastSelected$10[ebp]
	mov	BYTE PTR [eax+276], cl

; 4504 :                             }

	jmp	SHORT $LN22@HandleMous
$LN21@HandleMous:

; 4505 : 
; 4506 :                             pSelItem->bSelected = true;

	mov	eax, DWORD PTR _pSelItem$21[ebp]
	mov	BYTE PTR [eax+276], 1

; 4507 : 
; 4508 :                             // Restore m_nSelected to the previous value
; 4509 :                             // This matches the Windows behavior
; 4510 : 
; 4511 :                             m_nSelected = m_nSelStart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+311]
	mov	DWORD PTR [eax+307], edx
	jmp	SHORT $LN38@HandleMous
$LN24@HandleMous:

; 4512 :                         } else
; 4513 :                         {
; 4514 :                             // Simple click.  Clear all items and select the clicked
; 4515 :                             // item.
; 4516 : 
; 4517 : 
; 4518 :                             for( int i = 0; i < (int)m_Items.GetSize(); ++i )

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN19@HandleMous
$LN18@HandleMous:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN19@HandleMous:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _i$7[ebp], eax
	jge	SHORT $LN17@HandleMous

; 4519 :                             {
; 4520 :                                 DXUTListBoxItem *pItem = m_Items.GetAt( i );

	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetAt@?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$6[ebp], ecx

; 4521 :                                 pItem->bSelected = false;

	mov	eax, DWORD PTR _pItem$6[ebp]
	mov	BYTE PTR [eax+276], 0

; 4522 :                             }

	jmp	SHORT $LN18@HandleMous
$LN17@HandleMous:

; 4523 : 
; 4524 :                             pSelItem->bSelected = true;

	mov	eax, DWORD PTR _pSelItem$21[ebp]
	mov	BYTE PTR [eax+276], 1
$LN38@HandleMous:

; 4525 :                         }
; 4526 :                     }  // End of multi-selection case
; 4527 : 
; 4528 :                     m_pDialog->SendEvent( EVENT_LISTBOX_SELECTION, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1794					; 00000702H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN41@HandleMous:

; 4529 :                 }
; 4530 : 
; 4531 :                 return true;

	mov	al, 1
	jmp	$LN53@HandleMous
$LN44@HandleMous:

; 4532 :             }
; 4533 :             break;

	jmp	$LN46@HandleMous
$LN16@HandleMous:

; 4534 : 
; 4535 :         case WM_LBUTTONUP:
; 4536 :         {
; 4537 :             ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4538 :             m_bDrag = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+315], 0

; 4539 : 
; 4540 :             if( m_nSelected != -1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+307], -1
	je	$LN15@HandleMous

; 4541 :             {
; 4542 :                 // Set all items between m_nSelStart and m_nSelected to
; 4543 :                 // the same state as m_nSelStart
; 4544 :                 int nEnd = __max( m_nSelStart, m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	jle	SHORT $LN65@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR tv322[ebp], ecx
	jmp	SHORT $LN66@HandleMous
$LN65@HandleMous:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	DWORD PTR tv322[ebp], eax
$LN66@HandleMous:
	mov	ecx, DWORD PTR tv322[ebp]
	mov	DWORD PTR _nEnd$5[ebp], ecx

; 4545 : 
; 4546 :                 for( int n = __min( m_nSelStart, m_nSelected ) + 1; n < nEnd; ++n )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	jge	SHORT $LN67@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR tv328[ebp], ecx
	jmp	SHORT $LN68@HandleMous
$LN67@HandleMous:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	DWORD PTR tv328[ebp], eax
$LN68@HandleMous:
	mov	ecx, DWORD PTR tv328[ebp]
	add	ecx, 1
	mov	DWORD PTR _n$4[ebp], ecx
	jmp	SHORT $LN14@HandleMous
$LN13@HandleMous:
	mov	eax, DWORD PTR _n$4[ebp]
	add	eax, 1
	mov	DWORD PTR _n$4[ebp], eax
$LN14@HandleMous:
	mov	eax, DWORD PTR _n$4[ebp]
	cmp	eax, DWORD PTR _nEnd$5[ebp]
	jge	SHORT $LN12@HandleMous

; 4547 :                     m_Items[n]->bSelected = m_Items[m_nSelStart]->bSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	esi, DWORD PTR [eax]
	mov	edx, DWORD PTR _n$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	cl, BYTE PTR [esi+276]
	mov	BYTE PTR [eax+276], cl
	jmp	SHORT $LN13@HandleMous
$LN12@HandleMous:

; 4548 :                 m_Items[m_nSelected]->bSelected = m_Items[m_nSelStart]->bSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	esi, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [esi+276]
	mov	BYTE PTR [ecx+276], dl

; 4549 : 
; 4550 :                 // If m_nSelStart and m_nSelected are not the same,
; 4551 :                 // the user has dragged the mouse to make a selection.
; 4552 :                 // Notify the application of this.
; 4553 :                 if( m_nSelStart != m_nSelected )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	je	SHORT $LN15@HandleMous

; 4554 :                     m_pDialog->SendEvent( EVENT_LISTBOX_SELECTION, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1794					; 00000702H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN15@HandleMous:

; 4555 :             }
; 4556 :             return false;

	xor	al, al
	jmp	$LN53@HandleMous
$LN10@HandleMous:

; 4557 :         }
; 4558 : 
; 4559 :         case WM_MOUSEMOVE:
; 4560 :             if( m_bDrag )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+315]
	test	ecx, ecx
	je	$LN9@HandleMous

; 4561 :             {
; 4562 :                 // Compute the index of the item below cursor
; 4563 : 
; 4564 :                 int nItem;
; 4565 :                 if( m_nTextHeight )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+299], 0
	je	SHORT $LN8@HandleMous

; 4566 :                     nItem = m_ScrollBar.GetTrackPos() + ( pt.y - m_rcText.top ) / m_nTextHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pt$[ebp+4]
	sub	eax, DWORD PTR [edx+81]
	mov	esi, DWORD PTR _this$[ebp]
	cdq
	idiv	DWORD PTR [esi+299]
	add	ecx, eax
	mov	DWORD PTR _nItem$3[ebp], ecx

; 4567 :                 else

	jmp	SHORT $LN7@HandleMous
$LN8@HandleMous:

; 4568 :                     nItem = -1;

	mov	DWORD PTR _nItem$3[ebp], -1
$LN7@HandleMous:

; 4569 : 
; 4570 :                 // Only proceed if the cursor is on top of an item.
; 4571 : 
; 4572 :                 if( nItem >= (int)m_ScrollBar.GetTrackPos() &&
; 4573 :                     nItem < (int)m_Items.GetSize() &&
; 4574 :                     nItem < m_ScrollBar.GetTrackPos() + m_ScrollBar.GetPageSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	cmp	DWORD PTR _nItem$3[ebp], eax
	jl	SHORT $LN6@HandleMous
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _nItem$3[ebp], eax
	jge	SHORT $LN6@HandleMous
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetPageSize@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetPageSize
	add	esi, eax
	cmp	DWORD PTR _nItem$3[ebp], esi
	jge	SHORT $LN6@HandleMous

; 4575 :                 {
; 4576 :                     m_nSelected = nItem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nItem$3[ebp]
	mov	DWORD PTR [eax+307], ecx

; 4577 :                     m_pDialog->SendEvent( EVENT_LISTBOX_SELECTION, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1794					; 00000702H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 4578 :                 } else

	jmp	$LN9@HandleMous
$LN6@HandleMous:

; 4579 :                 if( nItem < (int)m_ScrollBar.GetTrackPos() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	cmp	DWORD PTR _nItem$3[ebp], eax
	jge	SHORT $LN4@HandleMous

; 4580 :                 {
; 4581 :                     // User drags the mouse above window top
; 4582 :                     m_ScrollBar.Scroll( -1 );

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 4583 :                     m_nSelected = m_ScrollBar.GetTrackPos();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+307], eax

; 4584 :                     m_pDialog->SendEvent( EVENT_LISTBOX_SELECTION, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1794					; 00000702H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 4585 :                 } else

	jmp	$LN9@HandleMous
$LN4@HandleMous:

; 4586 :                 if( nItem >= m_ScrollBar.GetTrackPos() + m_ScrollBar.GetPageSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetPageSize@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetPageSize
	add	esi, eax
	cmp	DWORD PTR _nItem$3[ebp], esi
	jl	$LN9@HandleMous

; 4587 :                 {
; 4588 :                     // User drags the mouse below window bottom
; 4589 :                     m_ScrollBar.Scroll( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 4590 :                     m_nSelected = __min( (int)m_Items.GetSize(), m_ScrollBar.GetTrackPos() + m_ScrollBar.GetPageSize() ) - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	edi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetPageSize@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetPageSize
	add	edi, eax
	cmp	esi, edi
	jge	SHORT $LN69@HandleMous
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	mov	DWORD PTR tv472[ebp], eax
	jmp	SHORT $LN70@HandleMous
$LN69@HandleMous:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetTrackPos@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetTrackPos
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetPageSize@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetPageSize
	add	esi, eax
	mov	DWORD PTR tv472[ebp], esi
$LN70@HandleMous:
	mov	eax, DWORD PTR tv472[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+307], eax

; 4591 :                     m_pDialog->SendEvent( EVENT_LISTBOX_SELECTION, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1794					; 00000702H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN9@HandleMous:

; 4592 :                 }
; 4593 :             }
; 4594 :             break;

	jmp	SHORT $LN46@HandleMous
$LN1@HandleMous:

; 4595 : 
; 4596 :         case WM_MOUSEWHEEL:
; 4597 :         {
; 4598 :             UINT uLines;
; 4599 :             SystemParametersInfo( SPI_GETWHEELSCROLLLINES, 0, &uLines, 0 );

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _uLines$2[ebp]
	push	eax
	push	0
	push	104					; 00000068H
	call	DWORD PTR __imp__SystemParametersInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4600 :             int nScrollAmount = int((short)HIWORD(wParam)) / WHEEL_DELTA * uLines;

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	cwde
	cdq
	mov	ecx, 120				; 00000078H
	idiv	ecx
	imul	eax, DWORD PTR _uLines$2[ebp]
	mov	DWORD PTR _nScrollAmount$1[ebp], eax

; 4601 :             m_ScrollBar.Scroll( -nScrollAmount );

	mov	eax, DWORD PTR _nScrollAmount$1[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 4602 :             return true;

	mov	al, 1
	jmp	SHORT $LN53@HandleMous
$LN46@HandleMous:

; 4603 :         }
; 4604 :     }
; 4605 : 
; 4606 :     return false;

	xor	al, al
$LN53@HandleMous:

; 4607 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN74@HandleMous
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN74@HandleMous:
	DD	1
	DD	$LN73@HandleMous
$LN73@HandleMous:
	DD	-260					; fffffefcH
	DD	4
	DD	$LN72@HandleMous
$LN72@HandleMous:
	DB	117					; 00000075H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
	npad	1
$LN75@HandleMous:
	DD	$LN10@HandleMous
	DD	$LN45@HandleMous
	DD	$LN16@HandleMous
	DD	$LN1@HandleMous
	DD	$LN46@HandleMous
$LN71@HandleMous:
	DB	0
	DB	1
	DB	2
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?HandleMouse@CDXUTListBox@@UAE_NIUtagPOINT@@IJ@Z ENDP	; CDXUTListBox::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleKeyboard@CDXUTListBox@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv204 = -268						; size = 4
tv198 = -268						; size = 4
tv132 = -268						; size = 4
tv94 = -268						; size = 4
tv93 = -268						; size = 4
_n$1 = -68						; size = 4
_nEnd$2 = -56						; size = 4
_pItem$3 = -44						; size = 4
_i$4 = -32						; size = 4
_nOldSelected$5 = -20					; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTListBox@@UAE_NIIJ@Z PROC		; CDXUTListBox::HandleKeyboard, COMDAT
; _this$ = ecx

; 4300 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4301 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN30@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN31@HandleKeyb
$LN30@HandleKeyb:

; 4302 :         return false;

	xor	al, al
	jmp	$LN32@HandleKeyb
$LN31@HandleKeyb:

; 4303 : 
; 4304 :     // Let the scroll bar have a chance to handle it first
; 4305 :     if( m_ScrollBar.HandleKeyboard( uMsg, wParam, lParam ) )

	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+109]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN29@HandleKeyb

; 4306 :         return true;

	mov	al, 1
	jmp	$LN32@HandleKeyb
$LN29@HandleKeyb:

; 4307 : 
; 4308 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv93[ebp], eax
	cmp	DWORD PTR tv93[ebp], 256		; 00000100H
	je	SHORT $LN26@HandleKeyb
	jmp	$LN27@HandleKeyb
$LN26@HandleKeyb:

; 4309 :     {
; 4310 :         case WM_KEYDOWN:
; 4311 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv94[ebp], eax
	mov	ecx, DWORD PTR tv94[ebp]
	sub	ecx, 33					; 00000021H
	mov	DWORD PTR tv94[ebp], ecx
	cmp	DWORD PTR tv94[ebp], 7
	ja	$LN27@HandleKeyb
	mov	edx, DWORD PTR tv94[ebp]
	movzx	eax, BYTE PTR $LN38@HandleKeyb[edx]
	jmp	DWORD PTR $LN39@HandleKeyb[eax*4]
$LN23@HandleKeyb:

; 4312 :             {
; 4313 :                 case VK_UP:
; 4314 :                 case VK_DOWN:
; 4315 :                 case VK_NEXT:
; 4316 :                 case VK_PRIOR:
; 4317 :                 case VK_HOME:
; 4318 :                 case VK_END:
; 4319 : 
; 4320 :                     // If no item exists, do nothing.
; 4321 :                     if( m_Items.GetSize() == 0 )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	test	eax, eax
	jne	SHORT $LN22@HandleKeyb

; 4322 :                         return true;

	mov	al, 1
	jmp	$LN32@HandleKeyb
$LN22@HandleKeyb:

; 4323 : 
; 4324 :                     int nOldSelected = m_nSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	mov	DWORD PTR _nOldSelected$5[ebp], ecx

; 4325 : 
; 4326 :                     // Adjust m_nSelected
; 4327 :                     switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv132[ebp], eax
	mov	ecx, DWORD PTR tv132[ebp]
	sub	ecx, 33					; 00000021H
	mov	DWORD PTR tv132[ebp], ecx
	cmp	DWORD PTR tv132[ebp], 7
	ja	$LN20@HandleKeyb
	mov	edx, DWORD PTR tv132[ebp]
	jmp	DWORD PTR $LN40@HandleKeyb[edx*4]
$LN19@HandleKeyb:

; 4328 :                     {
; 4329 :                         case VK_UP: --m_nSelected; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+307], ecx
	jmp	$LN20@HandleKeyb
$LN18@HandleKeyb:

; 4330 :                         case VK_DOWN: ++m_nSelected; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+307], ecx
	jmp	SHORT $LN20@HandleKeyb
$LN17@HandleKeyb:

; 4331 :                         case VK_NEXT: m_nSelected += m_ScrollBar.GetPageSize() - 1; break;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetPageSize@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetPageSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+307]
	lea	eax, DWORD PTR [eax+edx-1]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+307], eax
	jmp	SHORT $LN20@HandleKeyb
$LN16@HandleKeyb:

; 4332 :                         case VK_PRIOR: m_nSelected -= m_ScrollBar.GetPageSize() - 1; break;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?GetPageSize@CDXUTScrollBar@@QAEHXZ	; CDXUTScrollBar::GetPageSize
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+307]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+307], edx
	jmp	SHORT $LN20@HandleKeyb
$LN15@HandleKeyb:

; 4333 :                         case VK_HOME: m_nSelected = 0; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+307], 0
	jmp	SHORT $LN20@HandleKeyb
$LN14@HandleKeyb:

; 4334 :                         case VK_END: m_nSelected = m_Items.GetSize() - 1; break;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+307], eax
$LN20@HandleKeyb:

; 4335 :                     }
; 4336 : 
; 4337 :                     // Perform capping
; 4338 :                     if( m_nSelected < 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+307], 0
	jge	SHORT $LN13@HandleKeyb

; 4339 :                         m_nSelected = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+307], 0
$LN13@HandleKeyb:

; 4340 :                     if( m_nSelected >= (int)m_Items.GetSize() )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+307], eax
	jl	SHORT $LN12@HandleKeyb

; 4341 :                         m_nSelected = m_Items.GetSize() - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+307], eax
$LN12@HandleKeyb:

; 4342 : 
; 4343 :                     if( nOldSelected != m_nSelected )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nOldSelected$5[ebp]
	cmp	ecx, DWORD PTR [eax+307]
	je	$LN11@HandleKeyb

; 4344 :                     {
; 4345 :                         if( m_dwStyle & MULTISELECTION )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	and	ecx, 1
	je	$LN10@HandleKeyb

; 4346 :                         {
; 4347 :                             // Multiple selection
; 4348 : 
; 4349 :                             // Clear all selection
; 4350 :                             for( int i = 0; i < (int)m_Items.GetSize(); ++i )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN9@HandleKeyb
$LN8@HandleKeyb:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN9@HandleKeyb:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	?GetSize@?$CGrowableArray@PAUDXUTListBoxItem@@@@QBEHXZ ; CGrowableArray<DXUTListBoxItem *>::GetSize
	cmp	DWORD PTR _i$4[ebp], eax
	jge	SHORT $LN7@HandleKeyb

; 4351 :                             {
; 4352 :                                 DXUTListBoxItem *pItem = m_Items[i];

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pItem$3[ebp], ecx

; 4353 :                                 pItem->bSelected = false;

	mov	eax, DWORD PTR _pItem$3[ebp]
	mov	BYTE PTR [eax+276], 0

; 4354 :                             }

	jmp	SHORT $LN8@HandleKeyb
$LN7@HandleKeyb:

; 4355 : 
; 4356 :                             if( GetKeyState( VK_SHIFT ) < 0 )

	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	jge	$LN6@HandleKeyb

; 4357 :                             {
; 4358 :                                 // Select all items from m_nSelStart to
; 4359 :                                 // m_nSelected
; 4360 :                                 int nEnd = __max( m_nSelStart, m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	jle	SHORT $LN34@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR tv198[ebp], ecx
	jmp	SHORT $LN35@HandleKeyb
$LN34@HandleKeyb:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	DWORD PTR tv198[ebp], eax
$LN35@HandleKeyb:
	mov	ecx, DWORD PTR tv198[ebp]
	mov	DWORD PTR _nEnd$2[ebp], ecx

; 4361 : 
; 4362 :                                 for( int n = __min( m_nSelStart, m_nSelected ); n <= nEnd; ++n )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+311]
	cmp	edx, DWORD PTR [ecx+307]
	jge	SHORT $LN36@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR tv204[ebp], ecx
	jmp	SHORT $LN37@HandleKeyb
$LN36@HandleKeyb:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	DWORD PTR tv204[ebp], eax
$LN37@HandleKeyb:
	mov	ecx, DWORD PTR tv204[ebp]
	mov	DWORD PTR _n$1[ebp], ecx
	jmp	SHORT $LN5@HandleKeyb
$LN4@HandleKeyb:
	mov	eax, DWORD PTR _n$1[ebp]
	add	eax, 1
	mov	DWORD PTR _n$1[ebp], eax
$LN5@HandleKeyb:
	mov	eax, DWORD PTR _n$1[ebp]
	cmp	eax, DWORD PTR _nEnd$2[ebp]
	jg	SHORT $LN3@HandleKeyb

; 4363 :                                     m_Items[n]->bSelected = true;

	mov	eax, DWORD PTR _n$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+276], 1
	jmp	SHORT $LN4@HandleKeyb
$LN3@HandleKeyb:

; 4364 :                             }
; 4365 :                             else

	jmp	SHORT $LN2@HandleKeyb
$LN6@HandleKeyb:

; 4366 :                             {
; 4367 :                                 m_Items[m_nSelected]->bSelected = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??A?$CGrowableArray@PAUDXUTListBoxItem@@@@QAEAAPAUDXUTListBoxItem@@H@Z ; CGrowableArray<DXUTListBoxItem *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	BYTE PTR [edx+276], 1

; 4368 : 
; 4369 :                                 // Update selection start
; 4370 :                                 m_nSelStart = m_nSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+307]
	mov	DWORD PTR [eax+311], edx
$LN2@HandleKeyb:

; 4371 :                             }

	jmp	SHORT $LN1@HandleKeyb
$LN10@HandleKeyb:

; 4372 :                         } else
; 4373 :                             m_nSelStart = m_nSelected;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+307]
	mov	DWORD PTR [eax+311], edx
$LN1@HandleKeyb:

; 4374 : 
; 4375 :                         // Adjust scroll bar
; 4376 : 
; 4377 :                         m_ScrollBar.ShowItem( m_nSelected );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	?ShowItem@CDXUTScrollBar@@QAEXH@Z	; CDXUTScrollBar::ShowItem

; 4378 : 
; 4379 :                         // Send notification
; 4380 : 
; 4381 :                         m_pDialog->SendEvent( EVENT_LISTBOX_SELECTION, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	1794					; 00000702H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN11@HandleKeyb:

; 4382 :                     }
; 4383 :                     return true;

	mov	al, 1
	jmp	SHORT $LN32@HandleKeyb
$LN27@HandleKeyb:

; 4384 :             }
; 4385 :             break;
; 4386 :     }
; 4387 : 
; 4388 :     return false;

	xor	al, al
$LN32@HandleKeyb:

; 4389 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN39@HandleKeyb:
	DD	$LN23@HandleKeyb
	DD	$LN27@HandleKeyb
$LN38@HandleKeyb:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	0
	DB	1
	DB	0
$LN40@HandleKeyb:
	DD	$LN16@HandleKeyb
	DD	$LN17@HandleKeyb
	DD	$LN14@HandleKeyb
	DD	$LN15@HandleKeyb
	DD	$LN20@HandleKeyb
	DD	$LN19@HandleKeyb
	DD	$LN20@HandleKeyb
	DD	$LN18@HandleKeyb
?HandleKeyboard@CDXUTListBox@@UAE_NIIJ@Z ENDP		; CDXUTListBox::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?CanHaveFocus@CDXUTListBox@@UAE_NXZ
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
?CanHaveFocus@CDXUTListBox@@UAE_NXZ PROC		; CDXUTListBox::CanHaveFocus, COMDAT
; _this$ = ecx

; 606  :     virtual bool    CanHaveFocus() { return (m_bVisible && m_bEnabled); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@CanHaveFoc
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	test	eax, eax
	je	SHORT $LN3@CanHaveFoc
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@CanHaveFoc
$LN3@CanHaveFoc:
	mov	DWORD PTR tv78[ebp], 0
$LN4@CanHaveFoc:
	mov	al, BYTE PTR tv78[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CanHaveFocus@CDXUTListBox@@UAE_NXZ ENDP		; CDXUTListBox::CanHaveFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnInit@CDXUTListBox@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnInit@CDXUTListBox@@UAEJXZ PROC			; CDXUTListBox::OnInit, COMDAT
; _this$ = ecx

; 605  :     virtual HRESULT OnInit() { return m_pDialog->InitControl( &m_ScrollBar ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 109				; 0000006dH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?InitControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::InitControl
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnInit@CDXUTListBox@@UAEJXZ ENDP			; CDXUTListBox::OnInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CDXUTListBox@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTListBox@@UAE@XZ PROC				; CDXUTListBox::~CDXUTListBox, COMDAT
; _this$ = ecx

; 4096 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTListBox@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTListBox@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 4097 :     RemoveAllItems();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAllItems@CDXUTListBox@@QAEXXZ	; CDXUTListBox::RemoveAllItems

; 4098 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??1?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTListBoxItem *>::~CGrowableArray<DXUTListBoxItem *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	??1CDXUTScrollBar@@UAE@XZ		; CDXUTScrollBar::~CDXUTScrollBar
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDXUTListBox@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
__unwindfunclet$??1CDXUTListBox@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	jmp	??1CDXUTScrollBar@@UAE@XZ		; CDXUTScrollBar::~CDXUTScrollBar
__unwindfunclet$??1CDXUTListBox@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	jmp	??1?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTListBoxItem *>::~CGrowableArray<DXUTListBoxItem *>
__ehhandler$??1CDXUTListBox@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTListBox@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTListBox@@UAE@XZ ENDP				; CDXUTListBox::~CDXUTListBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pDialog$ = 8						; size = 4
??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTListBox::CDXUTListBox, COMDAT
; _this$ = ecx

; 4079 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z	; CDXUTControl::CDXUTControl
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTListBox@@6B@
	mov	eax, DWORD PTR _pDialog$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	call	??0CDXUTScrollBar@@QAE@PAVCDXUTDialog@@@Z ; CDXUTScrollBar::CDXUTScrollBar
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	call	??0?$CGrowableArray@PAUDXUTListBoxItem@@@@QAE@XZ ; CGrowableArray<DXUTListBoxItem *>::CGrowableArray<DXUTListBoxItem *>

; 4080 :     m_Type = DXUT_CONTROL_LISTBOX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 8

; 4081 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 4082 : 
; 4083 :     m_dwStyle = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+303], 0

; 4084 :     m_nSBWidth = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+287], 16			; 00000010H

; 4085 :     m_nSelected = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+307], -1

; 4086 :     m_nSelStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+311], 0

; 4087 :     m_bDrag = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+315], 0

; 4088 :     m_nBorder = 6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+291], 6

; 4089 :     m_nMargin = 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+295], 5

; 4090 :     m_nTextHeight = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+299], 0

; 4091 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
__unwindfunclet$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 109				; 0000006dH
	jmp	??1CDXUTScrollBar@@UAE@XZ		; CDXUTScrollBar::~CDXUTScrollBar
__ehhandler$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTListBox::CDXUTListBox
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTScrollBar@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTScrollBar@@UAEPAXI@Z PROC			; CDXUTScrollBar::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTScrollBar@@UAE@XZ		; CDXUTScrollBar::~CDXUTScrollBar
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTScrollBar@@UAEPAXI@Z ENDP			; CDXUTScrollBar::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Cap@CDXUTScrollBar@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Cap@CDXUTScrollBar@@IAEXXZ PROC			; CDXUTScrollBar::Cap, COMDAT
; _this$ = ecx

; 4061 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4062 :     if( m_nPosition < m_nStart ||
; 4063 :         m_nEnd - m_nStart <= m_nPageSize )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+142]
	cmp	edx, DWORD PTR [ecx+150]
	jl	SHORT $LN3@Cap
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+154]
	sub	edx, DWORD PTR [ecx+150]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [eax+146]
	jg	SHORT $LN4@Cap
$LN3@Cap:

; 4064 :     {
; 4065 :         m_nPosition = m_nStart;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+150]
	mov	DWORD PTR [eax+142], edx

; 4066 :     }
; 4067 :     else

	jmp	SHORT $LN5@Cap
$LN4@Cap:

; 4068 :     if( m_nPosition + m_nPageSize > m_nEnd )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+142]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+146]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+154]
	jle	SHORT $LN5@Cap

; 4069 :         m_nPosition = m_nEnd - m_nPageSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+154]
	sub	edx, DWORD PTR [ecx+146]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+142], edx
$LN5@Cap:

; 4070 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cap@CDXUTScrollBar@@IAEXXZ ENDP			; CDXUTScrollBar::Cap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ
_TEXT	SEGMENT
tv88 = -232						; size = 4
_nMaxPosition$1 = -32					; size = 4
_nThumbHeight$2 = -20					; size = 4
_this$ = -8						; size = 4
?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ PROC		; CDXUTScrollBar::UpdateThumbRect, COMDAT
; _this$ = ecx

; 3773 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3774 :     if( m_nEnd - m_nStart > m_nPageSize )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+154]
	sub	edx, DWORD PTR [ecx+150]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [eax+146]
	jle	$LN2@UpdateThum

; 3775 :     {
; 3776 :         int nThumbHeight = __max( RectHeight( m_rcTrack ) * m_nPageSize / ( m_nEnd - m_nStart ), SCROLLBAR_MINTHUMBSIZE );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 110				; 0000006eH
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+146]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+154]
	sub	esi, DWORD PTR [ecx+150]
	cdq
	idiv	esi
	cmp	eax, 8
	jle	SHORT $LN5@UpdateThum
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 110				; 0000006eH
	push	edx
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+146]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+154]
	sub	esi, DWORD PTR [ecx+150]
	cdq
	idiv	esi
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN6@UpdateThum
$LN5@UpdateThum:
	mov	DWORD PTR tv88[ebp], 8
$LN6@UpdateThum:
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR _nThumbHeight$2[ebp], edx

; 3777 :         int nMaxPosition = m_nEnd - m_nStart - m_nPageSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+154]
	sub	edx, DWORD PTR [ecx+150]
	mov	eax, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [eax+146]
	mov	DWORD PTR _nMaxPosition$1[ebp], edx

; 3778 :         m_rcThumb.top = m_rcTrack.top + ( m_nPosition - m_nStart ) * ( RectHeight( m_rcTrack ) - nThumbHeight )
; 3779 :                         / nMaxPosition;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+142]
	sub	esi, DWORD PTR [ecx+150]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 110				; 0000006eH
	push	edx
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	sub	eax, DWORD PTR _nThumbHeight$2[ebp]
	imul	eax, esi
	cdq
	idiv	DWORD PTR _nMaxPosition$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+114]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+130], eax

; 3780 :         m_rcThumb.bottom = m_rcThumb.top + nThumbHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+130]
	add	ecx, DWORD PTR _nThumbHeight$2[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+138], ecx

; 3781 :         m_bShowThumb = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+77], 1

; 3782 : 
; 3783 :     } 
; 3784 :     else

	jmp	SHORT $LN3@UpdateThum
$LN2@UpdateThum:

; 3785 :     {
; 3786 :         // No content to scroll
; 3787 :         m_rcThumb.bottom = m_rcThumb.top;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+130]
	mov	DWORD PTR [eax+138], edx

; 3788 :         m_bShowThumb = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+77], 0
$LN3@UpdateThum:

; 3789 :     }
; 3790 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ ENDP		; CDXUTScrollBar::UpdateThumbRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ShowItem@CDXUTScrollBar@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?ShowItem@CDXUTScrollBar@@QAEXH@Z PROC			; CDXUTScrollBar::ShowItem, COMDAT
; _this$ = ecx

; 3811 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3812 :     // Cap the index
; 3813 : 
; 3814 :     if( nIndex < 0 )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jge	SHORT $LN5@ShowItem

; 3815 :         nIndex = 0;

	mov	DWORD PTR _nIndex$[ebp], 0
$LN5@ShowItem:

; 3816 : 
; 3817 :     if( nIndex >= m_nEnd )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+154]
	jl	SHORT $LN4@ShowItem

; 3818 :         nIndex = m_nEnd - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+154]
	sub	ecx, 1
	mov	DWORD PTR _nIndex$[ebp], ecx
$LN4@ShowItem:

; 3819 : 
; 3820 :     // Adjust position
; 3821 : 
; 3822 :     if( m_nPosition > nIndex )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+142]
	cmp	ecx, DWORD PTR _nIndex$[ebp]
	jle	SHORT $LN3@ShowItem

; 3823 :         m_nPosition = nIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	mov	DWORD PTR [eax+142], ecx

; 3824 :     else

	jmp	SHORT $LN2@ShowItem
$LN3@ShowItem:

; 3825 :     if( m_nPosition + m_nPageSize <= nIndex )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+142]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+146]
	cmp	ecx, DWORD PTR _nIndex$[ebp]
	jg	SHORT $LN2@ShowItem

; 3826 :         m_nPosition = nIndex - m_nPageSize + 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	sub	ecx, DWORD PTR [eax+146]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+142], ecx
$LN2@ShowItem:

; 3827 : 
; 3828 :     UpdateThumbRect();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ	; CDXUTScrollBar::UpdateThumbRect

; 3829 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShowItem@CDXUTScrollBar@@QAEXH@Z ENDP			; CDXUTScrollBar::ShowItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Scroll@CDXUTScrollBar@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nDelta$ = 8						; size = 4
?Scroll@CDXUTScrollBar@@QAEXH@Z PROC			; CDXUTScrollBar::Scroll, COMDAT
; _this$ = ecx

; 3797 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3798 :     // Perform scroll
; 3799 :     m_nPosition += nDelta;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+142]
	add	ecx, DWORD PTR _nDelta$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+142], ecx

; 3800 : 
; 3801 :     // Cap position
; 3802 :     Cap();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cap@CDXUTScrollBar@@IAEXXZ		; CDXUTScrollBar::Cap

; 3803 : 
; 3804 :     // Update thumb position
; 3805 :     UpdateThumbRect();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ	; CDXUTScrollBar::UpdateThumbRect

; 3806 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Scroll@CDXUTScrollBar@@QAEXH@Z ENDP			; CDXUTScrollBar::Scroll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetPageSize@CDXUTScrollBar@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nPageSize$ = 8						; size = 4
?SetPageSize@CDXUTScrollBar@@QAEXH@Z PROC		; CDXUTScrollBar::SetPageSize, COMDAT
; _this$ = ecx

; 555  :     void SetPageSize( int nPageSize ) { m_nPageSize = nPageSize; Cap(); UpdateThumbRect(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nPageSize$[ebp]
	mov	DWORD PTR [eax+146], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cap@CDXUTScrollBar@@IAEXXZ		; CDXUTScrollBar::Cap
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ	; CDXUTScrollBar::UpdateThumbRect
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPageSize@CDXUTScrollBar@@QAEXH@Z ENDP		; CDXUTScrollBar::SetPageSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetPageSize@CDXUTScrollBar@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPageSize@CDXUTScrollBar@@QAEHXZ PROC		; CDXUTScrollBar::GetPageSize, COMDAT
; _this$ = ecx

; 554  :     int GetPageSize() { return m_nPageSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+146]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPageSize@CDXUTScrollBar@@QAEHXZ ENDP		; CDXUTScrollBar::GetPageSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetTrackPos@CDXUTScrollBar@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTrackPos@CDXUTScrollBar@@QAEHXZ PROC		; CDXUTScrollBar::GetTrackPos, COMDAT
; _this$ = ecx

; 552  :     int GetTrackPos() { return m_nPosition; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+142]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTrackPos@CDXUTScrollBar@@QAEHXZ ENDP		; CDXUTScrollBar::GetTrackPos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nStart$ = 8						; size = 4
_nEnd$ = 12						; size = 4
?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z PROC		; CDXUTScrollBar::SetTrackRange, COMDAT
; _this$ = ecx

; 4052 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4053 :     m_nStart = nStart; m_nEnd = nEnd;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nStart$[ebp]
	mov	DWORD PTR [eax+150], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nEnd$[ebp]
	mov	DWORD PTR [eax+154], ecx

; 4054 :     Cap();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Cap@CDXUTScrollBar@@IAEXXZ		; CDXUTScrollBar::Cap

; 4055 :     UpdateThumbRect();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ	; CDXUTScrollBar::UpdateThumbRect

; 4056 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetTrackRange@CDXUTScrollBar@@QAEXHH@Z ENDP		; CDXUTScrollBar::SetTrackRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateRects@CDXUTScrollBar@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?UpdateRects@CDXUTScrollBar@@UAEXXZ PROC		; CDXUTScrollBar::UpdateRects, COMDAT
; _this$ = ecx

; 3752 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3753 :     CDXUTControl::UpdateRects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateRects@CDXUTControl@@MAEXXZ	; CDXUTControl::UpdateRects

; 3754 : 
; 3755 :     // Make the buttons square
; 3756 : 
; 3757 :     SetRect( &m_rcUpButton, m_rcBoundingBox.left, m_rcBoundingBox.top,
; 3758 :                             m_rcBoundingBox.right, m_rcBoundingBox.top + RectWidth( m_rcBoundingBox ) );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	push	eax
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+65]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+69]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+65]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+61]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 78					; 0000004eH
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3759 :     SetRect( &m_rcDownButton, m_rcBoundingBox.left, m_rcBoundingBox.bottom - RectWidth( m_rcBoundingBox ),
; 3760 :                               m_rcBoundingBox.right, m_rcBoundingBox.bottom );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+73]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+69]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 61					; 0000003dH
	push	ecx
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+73]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+61]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 94					; 0000005eH
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3761 :     SetRect( &m_rcTrack, m_rcUpButton.left, m_rcUpButton.bottom,
; 3762 :                          m_rcDownButton.right, m_rcDownButton.top );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+98]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+102]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+90]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+78]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 110				; 0000006eH
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3763 :     m_rcThumb.left = m_rcUpButton.left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+78]
	mov	DWORD PTR [eax+126], edx

; 3764 :     m_rcThumb.right = m_rcUpButton.right;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+86]
	mov	DWORD PTR [eax+134], edx

; 3765 : 
; 3766 :     UpdateThumbRect();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ	; CDXUTScrollBar::UpdateThumbRect

; 3767 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRects@CDXUTScrollBar@@UAEXXZ ENDP		; CDXUTScrollBar::UpdateRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTScrollBar@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv177 = -260						; size = 4
tv129 = -260						; size = 4
tv74 = -260						; size = 4
_pElement$ = -60					; size = 4
_fBlendRate$ = -48					; size = 4
_iState$ = -36						; size = 4
_dCurrTime$1 = -24					; size = 8
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTScrollBar@@UAEXPAUIDirect3DDevice9@@M@Z PROC ; CDXUTScrollBar::Render, COMDAT
; _this$ = ecx

; 3954 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3955 :     // Check if the arrow button has been held for a while.
; 3956 :     // If so, update the thumb position to simulate repeated
; 3957 :     // scroll.
; 3958 :     if( m_Arrow != CLEAR )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+166], 0
	je	$LN13@Render

; 3959 :     {
; 3960 :         double dCurrTime = DXUTGetTime();

	call	?DXUTGetTime@@YANXZ			; DXUTGetTime
	fstp	QWORD PTR _dCurrTime$1[ebp]

; 3961 :         if( PtInRect( &m_rcUpButton, m_LastMouse ) )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+162]
	push	ecx
	mov	edx, DWORD PTR [eax+158]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 78					; 0000004eH
	push	eax
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN23@Render

; 3962 :         {
; 3963 :             switch( m_Arrow )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+166]
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 1
	je	SHORT $LN20@Render
	cmp	DWORD PTR tv74[ebp], 3
	je	SHORT $LN18@Render
	jmp	SHORT $LN21@Render
$LN20@Render:

; 3964 :             {
; 3965 :                 case CLICKED_UP:
; 3966 :                     if( SCROLLBAR_ARROWCLICK_DELAY < dCurrTime - m_dArrowTS )

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dCurrTime$1[ebp]
	subsd	xmm0, QWORD PTR [eax+170]
	comisd	xmm0, QWORD PTR __real@3fd51eb851eb851f
	jbe	SHORT $LN19@Render

; 3967 :                     {
; 3968 :                         Scroll( -1 );

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 3969 :                         m_Arrow = HELD_UP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+166], 3

; 3970 :                         m_dArrowTS = dCurrTime;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dCurrTime$1[ebp]
	movsd	QWORD PTR [eax+170], xmm0
$LN19@Render:

; 3971 :                     }
; 3972 :                     break;

	jmp	SHORT $LN21@Render
$LN18@Render:

; 3973 :                 case HELD_UP:
; 3974 :                     if( SCROLLBAR_ARROWCLICK_REPEAT < dCurrTime - m_dArrowTS )

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dCurrTime$1[ebp]
	subsd	xmm0, QWORD PTR [eax+170]
	comisd	xmm0, QWORD PTR __real@3fa999999999999a
	jbe	SHORT $LN17@Render

; 3975 :                     {
; 3976 :                         Scroll( -1 );

	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 3977 :                         m_dArrowTS = dCurrTime;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dCurrTime$1[ebp]
	movsd	QWORD PTR [eax+170], xmm0
$LN17@Render:
$LN21@Render:

; 3978 :                     }
; 3979 :                     break;
; 3980 :             }
; 3981 :         } else

	jmp	$LN13@Render
$LN23@Render:

; 3982 :         if( PtInRect( &m_rcDownButton, m_LastMouse ) )

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+162]
	push	ecx
	mov	edx, DWORD PTR [eax+158]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 94					; 0000005eH
	push	eax
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN13@Render

; 3983 :         {
; 3984 :             switch( m_Arrow )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+166]
	mov	DWORD PTR tv129[ebp], ecx
	cmp	DWORD PTR tv129[ebp], 2
	je	SHORT $LN12@Render
	cmp	DWORD PTR tv129[ebp], 4
	je	SHORT $LN10@Render
	jmp	SHORT $LN13@Render
$LN12@Render:

; 3985 :             {
; 3986 :                 case CLICKED_DOWN:
; 3987 :                     if( SCROLLBAR_ARROWCLICK_DELAY < dCurrTime - m_dArrowTS )

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dCurrTime$1[ebp]
	subsd	xmm0, QWORD PTR [eax+170]
	comisd	xmm0, QWORD PTR __real@3fd51eb851eb851f
	jbe	SHORT $LN11@Render

; 3988 :                     {
; 3989 :                         Scroll( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 3990 :                         m_Arrow = HELD_DOWN;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+166], 4

; 3991 :                         m_dArrowTS = dCurrTime;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dCurrTime$1[ebp]
	movsd	QWORD PTR [eax+170], xmm0
$LN11@Render:

; 3992 :                     }
; 3993 :                     break;

	jmp	SHORT $LN13@Render
$LN10@Render:

; 3994 :                 case HELD_DOWN:
; 3995 :                     if( SCROLLBAR_ARROWCLICK_REPEAT < dCurrTime - m_dArrowTS )

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dCurrTime$1[ebp]
	subsd	xmm0, QWORD PTR [eax+170]
	comisd	xmm0, QWORD PTR __real@3fa999999999999a
	jbe	SHORT $LN9@Render

; 3996 :                     {
; 3997 :                         Scroll( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 3998 :                         m_dArrowTS = dCurrTime;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dCurrTime$1[ebp]
	movsd	QWORD PTR [eax+170], xmm0
$LN9@Render:
$LN13@Render:

; 3999 :                     }
; 4000 :                     break;
; 4001 :             }
; 4002 :         }
; 4003 :     }
; 4004 : 
; 4005 :     DXUT_CONTROL_STATE iState = DXUT_STATE_NORMAL;

	mov	DWORD PTR _iState$[ebp], 0

; 4006 : 
; 4007 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN8@Render

; 4008 :         iState = DXUT_STATE_HIDDEN;

	mov	DWORD PTR _iState$[ebp], 2
	jmp	SHORT $LN1@Render
$LN8@Render:

; 4009 :     else if( m_bEnabled == false || m_bShowThumb == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN5@Render
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+77]
	test	ecx, ecx
	jne	SHORT $LN6@Render
$LN5@Render:

; 4010 :         iState = DXUT_STATE_DISABLED;

	mov	DWORD PTR _iState$[ebp], 1
	jmp	SHORT $LN1@Render
$LN6@Render:

; 4011 :     else if( m_bMouseOver )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	test	ecx, ecx
	je	SHORT $LN3@Render

; 4012 :         iState = DXUT_STATE_MOUSEOVER;

	mov	DWORD PTR _iState$[ebp], 4
	jmp	SHORT $LN1@Render
$LN3@Render:

; 4013 :     else if( m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	je	SHORT $LN1@Render

; 4014 :         iState = DXUT_STATE_FOCUS;

	mov	DWORD PTR _iState$[ebp], 3
$LN1@Render:

; 4015 : 
; 4016 : 
; 4017 :     float fBlendRate = ( iState == DXUT_STATE_PRESSED ) ? 0.0f : 0.8f;

	cmp	DWORD PTR _iState$[ebp], 5
	jne	SHORT $LN27@Render
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv177[ebp], xmm0
	jmp	SHORT $LN28@Render
$LN27@Render:
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR tv177[ebp], xmm0
$LN28@Render:
	movss	xmm0, DWORD PTR tv177[ebp]
	movss	DWORD PTR _fBlendRate$[ebp], xmm0

; 4018 : 
; 4019 :     // Background track layer
; 4020 :     CDXUTElement* pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 4021 :     
; 4022 :     // Blend current color
; 4023 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 4024 :     m_pDialog->DrawSprite( pElement, &m_rcTrack );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 110				; 0000006eH
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 4025 : 
; 4026 :     // Up Arrow
; 4027 :     pElement = m_Elements.GetAt( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 4028 :     
; 4029 :     // Blend current color
; 4030 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 4031 :     m_pDialog->DrawSprite( pElement, &m_rcUpButton );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 78					; 0000004eH
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 4032 : 
; 4033 :     // Down Arrow
; 4034 :     pElement = m_Elements.GetAt( 2 );

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 4035 :     
; 4036 :     // Blend current color
; 4037 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 4038 :     m_pDialog->DrawSprite( pElement, &m_rcDownButton );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 94					; 0000005eH
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 4039 : 
; 4040 :     // Thumb button
; 4041 :     pElement = m_Elements.GetAt( 3 );

	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 4042 :     
; 4043 :     // Blend current color
; 4044 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 4045 :     m_pDialog->DrawSprite( pElement, &m_rcThumb );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 126				; 0000007eH
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 4046 :  
; 4047 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Render@CDXUTScrollBar@@UAEXPAUIDirect3DDevice9@@M@Z ENDP ; CDXUTScrollBar::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv65 = -232						; size = 4
_nMaxThumb$1 = -32					; size = 4
_nMaxFirstItem$2 = -20					; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z PROC	; CDXUTScrollBar::HandleMouse, COMDAT
; _this$ = ecx

; 3841 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3842 :     static int ThumbOffsetY;
; 3843 :     static bool bDrag;
; 3844 : 
; 3845 :     m_LastMouse = pt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR [eax+158], ecx
	mov	edx, DWORD PTR _pt$[ebp+4]
	mov	DWORD PTR [eax+162], edx

; 3846 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 3
	ja	$LN17@HandleMous
	mov	edx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN21@HandleMous[edx*4]
$LN16@HandleMous:

; 3847 :     {
; 3848 :         case WM_LBUTTONDOWN:
; 3849 :         case WM_LBUTTONDBLCLK:
; 3850 :         {
; 3851 :             // Check for click on up button
; 3852 : 
; 3853 :             if( PtInRect( &m_rcUpButton, pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 78					; 0000004eH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN15@HandleMous

; 3854 :             {
; 3855 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3856 :                 if( m_nPosition > m_nStart )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+142]
	cmp	edx, DWORD PTR [ecx+150]
	jle	SHORT $LN14@HandleMous

; 3857 :                     --m_nPosition;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+142]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+142], ecx
$LN14@HandleMous:

; 3858 :                 UpdateThumbRect();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ	; CDXUTScrollBar::UpdateThumbRect

; 3859 :                 m_Arrow = CLICKED_UP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+166], 1

; 3860 :                 m_dArrowTS = DXUTGetTime();

	call	?DXUTGetTime@@YANXZ			; DXUTGetTime
	mov	eax, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [eax+170]

; 3861 :                 return true;

	mov	al, 1
	jmp	$LN19@HandleMous
$LN15@HandleMous:

; 3862 :             }
; 3863 : 
; 3864 :             // Check for click on down button
; 3865 : 
; 3866 :             if( PtInRect( &m_rcDownButton, pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 94					; 0000005eH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN13@HandleMous

; 3867 :             {
; 3868 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3869 :                 if( m_nPosition + m_nPageSize < m_nEnd )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+142]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+146]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax+154]
	jge	SHORT $LN12@HandleMous

; 3870 :                     ++m_nPosition;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+142]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+142], ecx
$LN12@HandleMous:

; 3871 :                 UpdateThumbRect();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ	; CDXUTScrollBar::UpdateThumbRect

; 3872 :                 m_Arrow = CLICKED_DOWN;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+166], 2

; 3873 :                 m_dArrowTS = DXUTGetTime();

	call	?DXUTGetTime@@YANXZ			; DXUTGetTime
	mov	eax, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [eax+170]

; 3874 :                 return true;

	mov	al, 1
	jmp	$LN19@HandleMous
$LN13@HandleMous:

; 3875 :             }
; 3876 : 
; 3877 :             // Check for click on thumb
; 3878 : 
; 3879 :             if( PtInRect( &m_rcThumb, pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 126				; 0000007eH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN11@HandleMous

; 3880 :             {
; 3881 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3882 :                 bDrag = true;

	mov	BYTE PTR ?bDrag@?1??HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z@4_NA, 1

; 3883 :                 ThumbOffsetY = pt.y - m_rcThumb.top;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pt$[ebp+4]
	sub	ecx, DWORD PTR [eax+130]
	mov	DWORD PTR ?ThumbOffsetY@?1??HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z@4HA, ecx

; 3884 :                 return true;

	mov	al, 1
	jmp	$LN19@HandleMous
$LN11@HandleMous:

; 3885 :             }
; 3886 : 
; 3887 :             // Check for click on track
; 3888 : 
; 3889 :             if( m_rcThumb.left <= pt.x &&
; 3890 :                 m_rcThumb.right > pt.x )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+126]
	cmp	ecx, DWORD PTR _pt$[ebp]
	jg	$LN7@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+134]
	cmp	ecx, DWORD PTR _pt$[ebp]
	jle	$LN7@HandleMous

; 3891 :             {
; 3892 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3893 :                 if( m_rcThumb.top > pt.y &&
; 3894 :                     m_rcTrack.top <= pt.y )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+130]
	cmp	ecx, DWORD PTR _pt$[ebp+4]
	jle	SHORT $LN9@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+114]
	cmp	ecx, DWORD PTR _pt$[ebp+4]
	jg	SHORT $LN9@HandleMous

; 3895 :                 {
; 3896 :                     Scroll( -( m_nPageSize - 1 ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+146]
	sub	ecx, 1
	neg	ecx
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 3897 :                     return true;

	mov	al, 1
	jmp	$LN19@HandleMous

; 3898 :                 } else

	jmp	SHORT $LN7@HandleMous
$LN9@HandleMous:

; 3899 :                 if( m_rcThumb.bottom <= pt.y &&
; 3900 :                     m_rcTrack.bottom > pt.y )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+138]
	cmp	ecx, DWORD PTR _pt$[ebp+4]
	jg	SHORT $LN7@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+122]
	cmp	ecx, DWORD PTR _pt$[ebp+4]
	jle	SHORT $LN7@HandleMous

; 3901 :                 {
; 3902 :                     Scroll( m_nPageSize - 1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+146]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Scroll@CDXUTScrollBar@@QAEXH@Z		; CDXUTScrollBar::Scroll

; 3903 :                     return true;

	mov	al, 1
	jmp	$LN19@HandleMous
$LN7@HandleMous:

; 3904 :                 }
; 3905 :             }
; 3906 : 
; 3907 :             break;

	jmp	$LN17@HandleMous
$LN6@HandleMous:

; 3908 :         }
; 3909 : 
; 3910 :         case WM_LBUTTONUP:
; 3911 :         {
; 3912 :             bDrag = false;

	mov	BYTE PTR ?bDrag@?1??HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z@4_NA, 0

; 3913 :             ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3914 :             UpdateThumbRect();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateThumbRect@CDXUTScrollBar@@IAEXXZ	; CDXUTScrollBar::UpdateThumbRect

; 3915 :             m_Arrow = CLEAR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+166], 0

; 3916 :             break;

	jmp	$LN17@HandleMous
$LN5@HandleMous:

; 3917 :         }
; 3918 : 
; 3919 :         case WM_MOUSEMOVE:
; 3920 :         {
; 3921 :             if( bDrag )

	movzx	eax, BYTE PTR ?bDrag@?1??HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z@4_NA
	test	eax, eax
	je	$LN4@HandleMous

; 3922 :             {
; 3923 :                 m_rcThumb.bottom += pt.y - ThumbOffsetY - m_rcThumb.top;

	mov	eax, DWORD PTR _pt$[ebp+4]
	sub	eax, DWORD PTR ?ThumbOffsetY@?1??HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z@4HA
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+130]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+138]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+138], eax

; 3924 :                 m_rcThumb.top = pt.y - ThumbOffsetY;

	mov	eax, DWORD PTR _pt$[ebp+4]
	sub	eax, DWORD PTR ?ThumbOffsetY@?1??HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z@4HA
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+130], eax

; 3925 :                 if( m_rcThumb.top < m_rcTrack.top )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+130]
	cmp	edx, DWORD PTR [ecx+114]
	jge	SHORT $LN3@HandleMous

; 3926 :                     OffsetRect( &m_rcThumb, 0, m_rcTrack.top - m_rcThumb.top );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+114]
	sub	edx, DWORD PTR [ecx+130]
	mov	esi, esp
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 126				; 0000007eH
	push	eax
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3927 :                 else

	jmp	SHORT $LN1@HandleMous
$LN3@HandleMous:

; 3928 :                 if( m_rcThumb.bottom > m_rcTrack.bottom )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+138]
	cmp	edx, DWORD PTR [ecx+122]
	jle	SHORT $LN1@HandleMous

; 3929 :                     OffsetRect( &m_rcThumb, 0, m_rcTrack.bottom - m_rcThumb.bottom );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+122]
	sub	edx, DWORD PTR [ecx+138]
	mov	esi, esp
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 126				; 0000007eH
	push	eax
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@HandleMous:

; 3930 : 
; 3931 :                 // Compute first item index based on thumb position
; 3932 : 
; 3933 :                 int nMaxFirstItem = m_nEnd - m_nStart - m_nPageSize;  // Largest possible index for first item

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+154]
	sub	edx, DWORD PTR [ecx+150]
	mov	eax, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [eax+146]
	mov	DWORD PTR _nMaxFirstItem$2[ebp], edx

; 3934 :                 int nMaxThumb = RectHeight( m_rcTrack ) - RectHeight( m_rcThumb );  // Largest possible thumb position from the top

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 110				; 0000006eH
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 126				; 0000007eH
	push	ecx
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	sub	esi, eax
	mov	DWORD PTR _nMaxThumb$1[ebp], esi

; 3935 : 
; 3936 :                 m_nPosition = m_nStart +
; 3937 :                               ( m_rcThumb.top - m_rcTrack.top +
; 3938 :                                 nMaxThumb / ( nMaxFirstItem * 2 ) ) * // Shift by half a row to avoid last row covered by only one pixel
; 3939 :                               nMaxFirstItem  / nMaxThumb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+130]
	sub	esi, DWORD PTR [ecx+114]
	mov	ecx, DWORD PTR _nMaxFirstItem$2[ebp]
	shl	ecx, 1
	mov	eax, DWORD PTR _nMaxThumb$1[ebp]
	cdq
	idiv	ecx
	add	esi, eax
	imul	esi, DWORD PTR _nMaxFirstItem$2[ebp]
	mov	eax, esi
	cdq
	idiv	DWORD PTR _nMaxThumb$1[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+150]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+142], eax

; 3940 : 
; 3941 :                 return true;

	mov	al, 1
	jmp	SHORT $LN19@HandleMous
$LN4@HandleMous:
$LN17@HandleMous:

; 3942 :             }
; 3943 : 
; 3944 :             break;
; 3945 :         }
; 3946 :     }
; 3947 : 
; 3948 :     return false;

	xor	al, al
$LN19@HandleMous:

; 3949 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN21@HandleMous:
	DD	$LN5@HandleMous
	DD	$LN16@HandleMous
	DD	$LN6@HandleMous
	DD	$LN16@HandleMous
?HandleMouse@CDXUTScrollBar@@UAE_NIUtagPOINT@@IJ@Z ENDP	; CDXUTScrollBar::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleKeyboard@CDXUTScrollBar@@UAE_NIIJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTScrollBar@@UAE_NIIJ@Z PROC		; CDXUTScrollBar::HandleKeyboard, COMDAT
; _this$ = ecx

; 3834 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3835 :     return false;

	xor	al, al

; 3836 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HandleKeyboard@CDXUTScrollBar@@UAE_NIIJ@Z ENDP		; CDXUTScrollBar::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CDXUTScrollBar@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CDXUTScrollBar@@UAE@XZ PROC				; CDXUTScrollBar::~CDXUTScrollBar, COMDAT
; _this$ = ecx

; 3746 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTScrollBar@@6B@

; 3747 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTScrollBar@@UAE@XZ ENDP				; CDXUTScrollBar::~CDXUTScrollBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTScrollBar@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDialog$ = 8						; size = 4
??0CDXUTScrollBar@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTScrollBar::CDXUTScrollBar, COMDAT
; _this$ = ecx

; 3725 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z	; CDXUTControl::CDXUTControl
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTScrollBar@@6B@

; 3726 :     m_Type = DXUT_CONTROL_SCROLLBAR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 9

; 3727 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3728 : 
; 3729 :     m_bShowThumb = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+77], 1

; 3730 : 
; 3731 :     SetRect( &m_rcUpButton, 0, 0, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 78					; 0000004eH
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3732 :     SetRect( &m_rcDownButton, 0, 0, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 94					; 0000005eH
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3733 :     SetRect( &m_rcTrack, 0, 0, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 110				; 0000006eH
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3734 :     SetRect( &m_rcThumb, 0, 0, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 126				; 0000007eH
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3735 :     m_nPosition = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+142], 0

; 3736 :     m_nPageSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+146], 1

; 3737 :     m_nStart = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+150], 0

; 3738 :     m_nEnd = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+154], 1

; 3739 :     m_Arrow = CLEAR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+166], 0

; 3740 :     m_dArrowTS = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [eax+170], xmm0

; 3741 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDXUTScrollBar@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTScrollBar::CDXUTScrollBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTRadioButton@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTRadioButton@@UAEPAXI@Z PROC			; CDXUTRadioButton::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTRadioButton@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTRadioButton@@UAEPAXI@Z ENDP			; CDXUTRadioButton::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CDXUTRadioButton@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CDXUTRadioButton@@UAE@XZ PROC			; CDXUTRadioButton::~CDXUTRadioButton, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTCheckBox@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTRadioButton@@UAE@XZ ENDP			; CDXUTRadioButton::~CDXUTRadioButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetCheckedInternal@CDXUTRadioButton@@MAEX_N00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bChecked$ = 8						; size = 1
_bClearGroup$ = 12					; size = 1
_bFromInput$ = 16					; size = 1
?SetCheckedInternal@CDXUTRadioButton@@MAEX_N00@Z PROC	; CDXUTRadioButton::SetCheckedInternal, COMDAT
; _this$ = ecx

; 2768 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2769 :     if( bChecked && bClearGroup )

	movzx	eax, BYTE PTR _bChecked$[ebp]
	test	eax, eax
	je	SHORT $LN1@SetChecked
	movzx	eax, BYTE PTR _bClearGroup$[ebp]
	test	eax, eax
	je	SHORT $LN1@SetChecked

; 2770 :         m_pDialog->ClearRadioButtonGroup( m_nButtonGroup );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+371]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?ClearRadioButtonGroup@CDXUTDialog@@QAEXI@Z ; CDXUTDialog::ClearRadioButtonGroup
$LN1@SetChecked:

; 2771 : 
; 2772 :     m_bChecked = bChecked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bChecked$[ebp]
	mov	BYTE PTR [eax+338], cl

; 2773 :     m_pDialog->SendEvent( EVENT_RADIOBUTTON_CHANGED, bFromInput, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bFromInput$[ebp]
	push	ecx
	push	769					; 00000301H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 2774 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetCheckedInternal@CDXUTRadioButton@@MAEX_N00@Z ENDP	; CDXUTRadioButton::SetCheckedInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetButtonGroup@CDXUTRadioButton@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetButtonGroup@CDXUTRadioButton@@QAEIXZ PROC		; CDXUTRadioButton::GetButtonGroup, COMDAT
; _this$ = ecx

; 528  :     UINT GetButtonGroup() { return m_nButtonGroup; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+371]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetButtonGroup@CDXUTRadioButton@@QAEIXZ ENDP		; CDXUTRadioButton::GetButtonGroup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetButtonGroup@CDXUTRadioButton@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nButtonGroup$ = 8					; size = 4
?SetButtonGroup@CDXUTRadioButton@@QAEXI@Z PROC		; CDXUTRadioButton::SetButtonGroup, COMDAT
; _this$ = ecx

; 527  :     void SetButtonGroup( UINT nButtonGroup ) { m_nButtonGroup = nButtonGroup; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nButtonGroup$[ebp]
	mov	DWORD PTR [eax+371], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetButtonGroup@CDXUTRadioButton@@QAEXI@Z ENDP		; CDXUTRadioButton::SetButtonGroup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetChecked@CDXUTRadioButton@@QAEX_N0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bChecked$ = 8						; size = 1
_bClearGroup$ = 12					; size = 1
?SetChecked@CDXUTRadioButton@@QAEX_N0@Z PROC		; CDXUTRadioButton::SetChecked, COMDAT
; _this$ = ecx

; 526  :     void SetChecked( bool bChecked, bool bClearGroup=true ) { SetCheckedInternal( bChecked, bClearGroup, false ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	push	0
	movzx	eax, BYTE PTR _bClearGroup$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bChecked$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+84]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetChecked@CDXUTRadioButton@@QAEX_N0@Z ENDP		; CDXUTRadioButton::SetChecked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnHotkey@CDXUTRadioButton@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnHotkey@CDXUTRadioButton@@UAEXXZ PROC			; CDXUTRadioButton::OnHotkey, COMDAT
; _this$ = ecx

; 524  :     virtual void OnHotkey() { m_pDialog->RequestFocus( this ); SetCheckedInternal( true, true, true ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
	mov	esi, esp
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnHotkey@CDXUTRadioButton@@UAEXXZ ENDP			; CDXUTRadioButton::OnHotkey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTRadioButton@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv188 = -208						; size = 4
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTRadioButton@@UAE_NIUtagPOINT@@IJ@Z PROC ; CDXUTRadioButton::HandleMouse, COMDAT
; _this$ = ecx

; 2716 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2717 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN9@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN10@HandleMous
$LN9@HandleMous:

; 2718 :         return false;

	xor	al, al
	jmp	$LN11@HandleMous
$LN10@HandleMous:

; 2719 : 
; 2720 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 513		; 00000201H
	je	SHORT $LN6@HandleMous
	cmp	DWORD PTR tv78[ebp], 514		; 00000202H
	je	SHORT $LN3@HandleMous
	cmp	DWORD PTR tv78[ebp], 515		; 00000203H
	je	SHORT $LN6@HandleMous
	jmp	$LN7@HandleMous
$LN6@HandleMous:

; 2721 :     {
; 2722 :         case WM_LBUTTONDOWN:
; 2723 :         case WM_LBUTTONDBLCLK:
; 2724 :         {
; 2725 :             if( ContainsPoint( pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@HandleMous

; 2726 :             {
; 2727 :                 // Pressed while inside the control
; 2728 :                 m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 1

; 2729 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2730 : 
; 2731 :                 if( !m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN4@HandleMous

; 2732 :                     m_pDialog->RequestFocus( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
$LN4@HandleMous:

; 2733 : 
; 2734 :                 return true;

	mov	al, 1
	jmp	$LN11@HandleMous
$LN5@HandleMous:

; 2735 :             }
; 2736 : 
; 2737 :             break;

	jmp	$LN7@HandleMous
$LN3@HandleMous:

; 2738 :         }
; 2739 : 
; 2740 :         case WM_LBUTTONUP:
; 2741 :         {
; 2742 :             if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	test	ecx, ecx
	je	$LN7@HandleMous

; 2743 :             {
; 2744 :                 m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 2745 :                 ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2746 : 
; 2747 :                 // Button click
; 2748 :                 if( ContainsPoint( pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@HandleMous

; 2749 :                 {
; 2750 :                     m_pDialog->ClearRadioButtonGroup( m_nButtonGroup );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+371]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?ClearRadioButtonGroup@CDXUTDialog@@QAEXI@Z ; CDXUTDialog::ClearRadioButtonGroup

; 2751 :                     m_bChecked = !m_bChecked;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+338]
	test	ecx, ecx
	jne	SHORT $LN13@HandleMous
	mov	DWORD PTR tv188[ebp], 1
	jmp	SHORT $LN14@HandleMous
$LN13@HandleMous:
	mov	DWORD PTR tv188[ebp], 0
$LN14@HandleMous:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv188[ebp]
	mov	BYTE PTR [edx+338], al

; 2752 : 
; 2753 :                     m_pDialog->SendEvent( EVENT_RADIOBUTTON_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	769					; 00000301H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN1@HandleMous:

; 2754 :                 }
; 2755 : 
; 2756 :                 return true;

	mov	al, 1
	jmp	SHORT $LN11@HandleMous
$LN7@HandleMous:

; 2757 :             }
; 2758 : 
; 2759 :             break;
; 2760 :         }
; 2761 :     };
; 2762 :     
; 2763 :     return false;

	xor	al, al
$LN11@HandleMous:

; 2764 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?HandleMouse@CDXUTRadioButton@@UAE_NIUtagPOINT@@IJ@Z ENDP ; CDXUTRadioButton::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleKeyboard@CDXUTRadioButton@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv151 = -208						; size = 4
tv86 = -208						; size = 4
tv79 = -208						; size = 4
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTRadioButton@@UAE_NIIJ@Z PROC	; CDXUTRadioButton::HandleKeyboard, COMDAT
; _this$ = ecx

; 2676 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2677 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN12@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN13@HandleKeyb
$LN12@HandleKeyb:

; 2678 :         return false;

	xor	al, al
	jmp	$LN14@HandleKeyb
$LN13@HandleKeyb:

; 2679 : 
; 2680 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 256		; 00000100H
	je	SHORT $LN9@HandleKeyb
	cmp	DWORD PTR tv78[ebp], 257		; 00000101H
	je	SHORT $LN5@HandleKeyb
	jmp	$LN10@HandleKeyb
$LN9@HandleKeyb:

; 2681 :     {
; 2682 :         case WM_KEYDOWN:
; 2683 :         {
; 2684 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 32			; 00000020H
	je	SHORT $LN6@HandleKeyb
	jmp	SHORT $LN5@HandleKeyb
$LN6@HandleKeyb:

; 2685 :             {
; 2686 :                 case VK_SPACE:
; 2687 :                     m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 1

; 2688 :                     return true;

	mov	al, 1
	jmp	$LN14@HandleKeyb
$LN5@HandleKeyb:

; 2689 :             }
; 2690 :         }
; 2691 : 
; 2692 :         case WM_KEYUP:
; 2693 :         {
; 2694 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	cmp	DWORD PTR tv86[ebp], 32			; 00000020H
	je	SHORT $LN2@HandleKeyb
	jmp	SHORT $LN10@HandleKeyb
$LN2@HandleKeyb:

; 2695 :             {
; 2696 :                 case VK_SPACE:
; 2697 :                     if( m_bPressed == true )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	cmp	ecx, 1
	jne	SHORT $LN1@HandleKeyb

; 2698 :                     {
; 2699 :                         m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 2700 :                         
; 2701 :                         m_pDialog->ClearRadioButtonGroup( m_nButtonGroup );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+371]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?ClearRadioButtonGroup@CDXUTDialog@@QAEXI@Z ; CDXUTDialog::ClearRadioButtonGroup

; 2702 :                         m_bChecked = !m_bChecked;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+338]
	test	ecx, ecx
	jne	SHORT $LN16@HandleKeyb
	mov	DWORD PTR tv151[ebp], 1
	jmp	SHORT $LN17@HandleKeyb
$LN16@HandleKeyb:
	mov	DWORD PTR tv151[ebp], 0
$LN17@HandleKeyb:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv151[ebp]
	mov	BYTE PTR [edx+338], al

; 2703 : 
; 2704 :                         m_pDialog->SendEvent( EVENT_RADIOBUTTON_CHANGED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	769					; 00000301H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN1@HandleKeyb:

; 2705 :                     }
; 2706 :                     return true;

	mov	al, 1
	jmp	SHORT $LN14@HandleKeyb
$LN10@HandleKeyb:

; 2707 :             }
; 2708 :         }
; 2709 :     }
; 2710 :     return false;

	xor	al, al
$LN14@HandleKeyb:

; 2711 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HandleKeyboard@CDXUTRadioButton@@UAE_NIIJ@Z ENDP	; CDXUTRadioButton::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTRadioButton@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDialog$ = 8						; size = 4
??0CDXUTRadioButton@@QAE@PAVCDXUTDialog@@@Z PROC	; CDXUTRadioButton::CDXUTRadioButton, COMDAT
; _this$ = ecx

; 2667 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTCheckBox@@QAE@PAVCDXUTDialog@@@Z ; CDXUTCheckBox::CDXUTCheckBox
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTRadioButton@@6B@

; 2668 :     m_Type = DXUT_CONTROL_RADIOBUTTON;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 3

; 2669 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2670 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDXUTRadioButton@@QAE@PAVCDXUTDialog@@@Z ENDP	; CDXUTRadioButton::CDXUTRadioButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTCheckBox@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTCheckBox@@UAEPAXI@Z PROC			; CDXUTCheckBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTCheckBox@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTCheckBox@@UAEPAXI@Z ENDP			; CDXUTCheckBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CDXUTCheckBox@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CDXUTCheckBox@@UAE@XZ PROC				; CDXUTCheckBox::~CDXUTCheckBox, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTButton@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTCheckBox@@UAE@XZ ENDP				; CDXUTCheckBox::~CDXUTCheckBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetCheckedInternal@CDXUTCheckBox@@MAEX_N0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bChecked$ = 8						; size = 1
_bFromInput$ = 12					; size = 1
?SetCheckedInternal@CDXUTCheckBox@@MAEX_N0@Z PROC	; CDXUTCheckBox::SetCheckedInternal, COMDAT
; _this$ = ecx

; 2593 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2594 :     m_bChecked = bChecked; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bChecked$[ebp]
	mov	BYTE PTR [eax+338], cl

; 2595 : 
; 2596 :     m_pDialog->SendEvent( EVENT_CHECKBOX_CHANGED, bFromInput, this ); 

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bFromInput$[ebp]
	push	ecx
	push	1025					; 00000401H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent

; 2597 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetCheckedInternal@CDXUTCheckBox@@MAEX_N0@Z ENDP	; CDXUTCheckBox::SetCheckedInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetChecked@CDXUTCheckBox@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bChecked$ = 8						; size = 1
?SetChecked@CDXUTCheckBox@@QAEX_N@Z PROC		; CDXUTCheckBox::SetChecked, COMDAT
; _this$ = ecx

; 503  :     void SetChecked( bool bChecked ) { SetCheckedInternal( bChecked, false ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	push	0
	movzx	eax, BYTE PTR _bChecked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetChecked@CDXUTCheckBox@@QAEX_N@Z ENDP		; CDXUTCheckBox::SetChecked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTCheckBox@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv140 = -244						; size = 4
_fBlendRate$ = -44					; size = 4
_pElement$ = -32					; size = 4
_iState$ = -20						; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTCheckBox@@UAEXPAUIDirect3DDevice9@@M@Z PROC ; CDXUTCheckBox::Render, COMDAT
; _this$ = ecx

; 2625 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2626 :     DXUT_CONTROL_STATE iState = DXUT_STATE_NORMAL;

	mov	DWORD PTR _iState$[ebp], 0

; 2627 : 
; 2628 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN10@Render

; 2629 :         iState = DXUT_STATE_HIDDEN;

	mov	DWORD PTR _iState$[ebp], 2
	jmp	SHORT $LN2@Render
$LN10@Render:

; 2630 :     else if( m_bEnabled == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN8@Render

; 2631 :         iState = DXUT_STATE_DISABLED;

	mov	DWORD PTR _iState$[ebp], 1
	jmp	SHORT $LN2@Render
$LN8@Render:

; 2632 :     else if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	test	ecx, ecx
	je	SHORT $LN6@Render

; 2633 :         iState = DXUT_STATE_PRESSED;

	mov	DWORD PTR _iState$[ebp], 5
	jmp	SHORT $LN2@Render
$LN6@Render:

; 2634 :     else if( m_bMouseOver )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	test	ecx, ecx
	je	SHORT $LN4@Render

; 2635 :         iState = DXUT_STATE_MOUSEOVER;

	mov	DWORD PTR _iState$[ebp], 4
	jmp	SHORT $LN2@Render
$LN4@Render:

; 2636 :     else if( m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	je	SHORT $LN2@Render

; 2637 :         iState = DXUT_STATE_FOCUS;

	mov	DWORD PTR _iState$[ebp], 3
$LN2@Render:

; 2638 : 
; 2639 :     CDXUTElement* pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 2640 : 
; 2641 :     float fBlendRate = ( iState == DXUT_STATE_PRESSED ) ? 0.0f : 0.8f;

	cmp	DWORD PTR _iState$[ebp], 5
	jne	SHORT $LN13@Render
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv140[ebp], xmm0
	jmp	SHORT $LN14@Render
$LN13@Render:
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR tv140[ebp], xmm0
$LN14@Render:
	movss	xmm0, DWORD PTR tv140[ebp]
	movss	DWORD PTR _fBlendRate$[ebp], xmm0

; 2642 : 
; 2643 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 2644 :     pElement->FontColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 68					; 00000044H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 2645 : 
; 2646 :     m_pDialog->DrawSprite( pElement, &m_rcButton );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 339				; 00000153H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 2647 :     m_pDialog->DrawText( m_strText, pElement, &m_rcText, true );

	push	-1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 355				; 00000163H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 77					; 0000004dH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 2648 : 
; 2649 :     if( !m_bChecked )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+338]
	test	ecx, ecx
	jne	SHORT $LN1@Render

; 2650 :         iState = DXUT_STATE_HIDDEN;

	mov	DWORD PTR _iState$[ebp], 2
$LN1@Render:

; 2651 : 
; 2652 :     pElement = m_Elements.GetAt( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 2653 : 
; 2654 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 2655 :     m_pDialog->DrawSprite( pElement, &m_rcButton );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 339				; 00000153H
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 2656 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Render@CDXUTCheckBox@@UAEXPAUIDirect3DDevice9@@M@Z ENDP ; CDXUTCheckBox::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateRects@CDXUTCheckBox@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?UpdateRects@CDXUTCheckBox@@UAEXXZ PROC			; CDXUTCheckBox::UpdateRects, COMDAT
; _this$ = ecx

; 2611 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2612 :     CDXUTButton::UpdateRects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateRects@CDXUTControl@@MAEXXZ	; CDXUTControl::UpdateRects

; 2613 : 
; 2614 :     m_rcButton = m_rcBoundingBox;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 339				; 00000153H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2615 :     m_rcButton.right = m_rcButton.left + RectHeight( m_rcButton );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 339				; 00000153H
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+339]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+347], eax

; 2616 : 
; 2617 :     m_rcText = m_rcBoundingBox;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 355				; 00000163H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2618 :     m_rcText.left += (int) ( 1.25f * RectWidth( m_rcButton ) );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 339				; 00000153H
	push	eax
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3fa00000
	cvttss2si ecx, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+355]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+355], ecx

; 2619 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRects@CDXUTCheckBox@@UAEXXZ ENDP			; CDXUTCheckBox::UpdateRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ContainsPoint@CDXUTCheckBox@@UAEHUtagPOINT@@@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_pt$ = 8						; size = 8
?ContainsPoint@CDXUTCheckBox@@UAEHUtagPOINT@@@Z PROC	; CDXUTCheckBox::ContainsPoint, COMDAT
; _this$ = ecx

; 2602 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2603 :     return ( PtInRect( &m_rcBoundingBox, pt ) || 
; 2604 :              PtInRect( &m_rcButton, pt ) ); 

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 61					; 0000003dH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@ContainsPo
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 339				; 00000153H
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@ContainsPo
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN4@ContainsPo
$LN3@ContainsPo:
	mov	DWORD PTR tv78[ebp], 1
$LN4@ContainsPo:
	mov	eax, DWORD PTR tv78[ebp]

; 2605 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ContainsPoint@CDXUTCheckBox@@UAEHUtagPOINT@@@Z ENDP	; CDXUTCheckBox::ContainsPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnHotkey@CDXUTCheckBox@@UAEXXZ
_TEXT	SEGMENT
tv82 = -205						; size = 1
_this$ = -8						; size = 4
?OnHotkey@CDXUTCheckBox@@UAEXXZ PROC			; CDXUTCheckBox::OnHotkey, COMDAT
; _this$ = ecx

; 495  :     virtual void OnHotkey() { m_pDialog->RequestFocus( this ); SetCheckedInternal( !m_bChecked, true ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+338]
	test	ecx, ecx
	jne	SHORT $LN3@OnHotkey
	mov	BYTE PTR tv82[ebp], 1
	jmp	SHORT $LN4@OnHotkey
$LN3@OnHotkey:
	mov	BYTE PTR tv82[ebp], 0
$LN4@OnHotkey:
	mov	esi, esp
	push	1
	movzx	edx, BYTE PTR tv82[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnHotkey@CDXUTCheckBox@@UAEXXZ ENDP			; CDXUTCheckBox::OnHotkey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTCheckBox@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
tv175 = -205						; size = 1
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTCheckBox@@UAE_NIUtagPOINT@@IJ@Z PROC	; CDXUTCheckBox::HandleMouse, COMDAT
; _this$ = ecx

; 2545 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2546 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN9@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN10@HandleMous
$LN9@HandleMous:

; 2547 :         return false;

	xor	al, al
	jmp	$LN11@HandleMous
$LN10@HandleMous:

; 2548 : 
; 2549 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 513		; 00000201H
	je	SHORT $LN6@HandleMous
	cmp	DWORD PTR tv78[ebp], 514		; 00000202H
	je	SHORT $LN3@HandleMous
	cmp	DWORD PTR tv78[ebp], 515		; 00000203H
	je	SHORT $LN6@HandleMous
	jmp	$LN7@HandleMous
$LN6@HandleMous:

; 2550 :     {
; 2551 :         case WM_LBUTTONDOWN:
; 2552 :         case WM_LBUTTONDBLCLK:
; 2553 :         {
; 2554 :             if( ContainsPoint( pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@HandleMous

; 2555 :             {
; 2556 :                 // Pressed while inside the control
; 2557 :                 m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 1

; 2558 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2559 : 
; 2560 :                 if( !m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN4@HandleMous

; 2561 :                     m_pDialog->RequestFocus( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
$LN4@HandleMous:

; 2562 : 
; 2563 :                 return true;

	mov	al, 1
	jmp	$LN11@HandleMous
$LN5@HandleMous:

; 2564 :             }
; 2565 : 
; 2566 :             break;

	jmp	$LN7@HandleMous
$LN3@HandleMous:

; 2567 :         }
; 2568 : 
; 2569 :         case WM_LBUTTONUP:
; 2570 :         {
; 2571 :             if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	test	ecx, ecx
	je	SHORT $LN7@HandleMous

; 2572 :             {
; 2573 :                 m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 2574 :                 ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2575 : 
; 2576 :                 // Button click
; 2577 :                 if( ContainsPoint( pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@HandleMous

; 2578 :                     SetCheckedInternal( !m_bChecked, true );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+338]
	test	ecx, ecx
	jne	SHORT $LN13@HandleMous
	mov	BYTE PTR tv175[ebp], 1
	jmp	SHORT $LN14@HandleMous
$LN13@HandleMous:
	mov	BYTE PTR tv175[ebp], 0
$LN14@HandleMous:
	mov	esi, esp
	push	1
	movzx	edx, BYTE PTR tv175[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@HandleMous:

; 2579 :                 
; 2580 :                 return true;

	mov	al, 1
	jmp	SHORT $LN11@HandleMous
$LN7@HandleMous:

; 2581 :             }
; 2582 : 
; 2583 :             break;
; 2584 :         }
; 2585 :     };
; 2586 :     
; 2587 :     return false;

	xor	al, al
$LN11@HandleMous:

; 2588 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?HandleMouse@CDXUTCheckBox@@UAE_NIUtagPOINT@@IJ@Z ENDP	; CDXUTCheckBox::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleKeyboard@CDXUTCheckBox@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv86 = -208						; size = 4
tv79 = -208						; size = 4
tv78 = -208						; size = 4
tv138 = -205						; size = 1
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTCheckBox@@UAE_NIIJ@Z PROC		; CDXUTCheckBox::HandleKeyboard, COMDAT
; _this$ = ecx

; 2509 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2510 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN12@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN13@HandleKeyb
$LN12@HandleKeyb:

; 2511 :         return false;

	xor	al, al
	jmp	$LN14@HandleKeyb
$LN13@HandleKeyb:

; 2512 : 
; 2513 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 256		; 00000100H
	je	SHORT $LN9@HandleKeyb
	cmp	DWORD PTR tv78[ebp], 257		; 00000101H
	je	SHORT $LN5@HandleKeyb
	jmp	$LN10@HandleKeyb
$LN9@HandleKeyb:

; 2514 :     {
; 2515 :         case WM_KEYDOWN:
; 2516 :         {
; 2517 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 32			; 00000020H
	je	SHORT $LN6@HandleKeyb
	jmp	SHORT $LN5@HandleKeyb
$LN6@HandleKeyb:

; 2518 :             {
; 2519 :                 case VK_SPACE:
; 2520 :                     m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 1

; 2521 :                     return true;

	mov	al, 1
	jmp	SHORT $LN14@HandleKeyb
$LN5@HandleKeyb:

; 2522 :             }
; 2523 :         }
; 2524 : 
; 2525 :         case WM_KEYUP:
; 2526 :         {
; 2527 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv86[ebp], eax
	cmp	DWORD PTR tv86[ebp], 32			; 00000020H
	je	SHORT $LN2@HandleKeyb
	jmp	SHORT $LN10@HandleKeyb
$LN2@HandleKeyb:

; 2528 :             {
; 2529 :                 case VK_SPACE:
; 2530 :                     if( m_bPressed == true )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	cmp	ecx, 1
	jne	SHORT $LN1@HandleKeyb

; 2531 :                     {
; 2532 :                         m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 2533 :                         SetCheckedInternal( !m_bChecked, true );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+338]
	test	ecx, ecx
	jne	SHORT $LN16@HandleKeyb
	mov	BYTE PTR tv138[ebp], 1
	jmp	SHORT $LN17@HandleKeyb
$LN16@HandleKeyb:
	mov	BYTE PTR tv138[ebp], 0
$LN17@HandleKeyb:
	mov	esi, esp
	push	1
	movzx	edx, BYTE PTR tv138[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@HandleKeyb:

; 2534 :                     }
; 2535 :                     return true;

	mov	al, 1
	jmp	SHORT $LN14@HandleKeyb
$LN10@HandleKeyb:

; 2536 :             }
; 2537 :         }
; 2538 :     }
; 2539 :     return false;

	xor	al, al
$LN14@HandleKeyb:

; 2540 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HandleKeyboard@CDXUTCheckBox@@UAE_NIIJ@Z ENDP		; CDXUTCheckBox::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTCheckBox@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDialog$ = 8						; size = 4
??0CDXUTCheckBox@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTCheckBox::CDXUTCheckBox, COMDAT
; _this$ = ecx

; 2499 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTButton@@QAE@PAVCDXUTDialog@@@Z	; CDXUTButton::CDXUTButton
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTCheckBox@@6B@

; 2500 :     m_Type = DXUT_CONTROL_CHECKBOX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 2

; 2501 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2502 : 
; 2503 :     m_bChecked = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+338], 0

; 2504 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDXUTCheckBox@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTCheckBox::CDXUTCheckBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTButton@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTButton@@UAEPAXI@Z PROC				; CDXUTButton::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTButton@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTButton@@UAEPAXI@Z ENDP				; CDXUTButton::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CDXUTButton@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CDXUTButton@@UAE@XZ PROC				; CDXUTButton::~CDXUTButton, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTStatic@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTButton@@UAE@XZ ENDP				; CDXUTButton::~CDXUTButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTButton@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
tv136 = -296						; size = 4
_rcWindow$ = -96					; size = 16
_fBlendRate$ = -72					; size = 4
_pElement$ = -60					; size = 4
_iState$ = -48						; size = 4
_nOffsetY$ = -36					; size = 4
_nOffsetX$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTButton@@UAEXPAUIDirect3DDevice9@@M@Z PROC	; CDXUTButton::Render, COMDAT
; _this$ = ecx

; 2429 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2430 :     int nOffsetX = 0;

	mov	DWORD PTR _nOffsetX$[ebp], 0

; 2431 :     int nOffsetY = 0;

	mov	DWORD PTR _nOffsetY$[ebp], 0

; 2432 : 
; 2433 :     DXUT_CONTROL_STATE iState = DXUT_STATE_NORMAL;

	mov	DWORD PTR _iState$[ebp], 0

; 2434 : 
; 2435 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN9@Render

; 2436 :     {
; 2437 :         iState = DXUT_STATE_HIDDEN;

	mov	DWORD PTR _iState$[ebp], 2
	jmp	SHORT $LN1@Render
$LN9@Render:

; 2438 :     }
; 2439 :     else if( m_bEnabled == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN7@Render

; 2440 :     {
; 2441 :         iState = DXUT_STATE_DISABLED;

	mov	DWORD PTR _iState$[ebp], 1
	jmp	SHORT $LN1@Render
$LN7@Render:

; 2442 :     }
; 2443 :     else if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	test	ecx, ecx
	je	SHORT $LN5@Render

; 2444 :     {
; 2445 :         iState = DXUT_STATE_PRESSED;

	mov	DWORD PTR _iState$[ebp], 5

; 2446 : 
; 2447 :         nOffsetX = 1;

	mov	DWORD PTR _nOffsetX$[ebp], 1

; 2448 :         nOffsetY = 2;

	mov	DWORD PTR _nOffsetY$[ebp], 2
	jmp	SHORT $LN1@Render
$LN5@Render:

; 2449 :     }
; 2450 :     else if( m_bMouseOver )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	test	ecx, ecx
	je	SHORT $LN3@Render

; 2451 :     {
; 2452 :         iState = DXUT_STATE_MOUSEOVER;

	mov	DWORD PTR _iState$[ebp], 4

; 2453 : 
; 2454 :         nOffsetX = -1;

	mov	DWORD PTR _nOffsetX$[ebp], -1

; 2455 :         nOffsetY = -2;

	mov	DWORD PTR _nOffsetY$[ebp], -2		; fffffffeH
	jmp	SHORT $LN1@Render
$LN3@Render:

; 2456 :     }
; 2457 :     else if( m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	je	SHORT $LN1@Render

; 2458 :     {
; 2459 :         iState = DXUT_STATE_FOCUS;

	mov	DWORD PTR _iState$[ebp], 3
$LN1@Render:

; 2460 :     }
; 2461 :     
; 2462 :     // Background fill layer
; 2463 :     //TODO: remove magic numbers
; 2464 :     CDXUTElement* pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 2465 :     
; 2466 :     float fBlendRate = ( iState == DXUT_STATE_PRESSED ) ? 0.0f : 0.8f;

	cmp	DWORD PTR _iState$[ebp], 5
	jne	SHORT $LN12@Render
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv136[ebp], xmm0
	jmp	SHORT $LN13@Render
$LN12@Render:
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR tv136[ebp], xmm0
$LN13@Render:
	movss	xmm0, DWORD PTR tv136[ebp]
	movss	DWORD PTR _fBlendRate$[ebp], xmm0

; 2467 : 
; 2468 :     RECT rcWindow = m_rcBoundingBox;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcWindow$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcWindow$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcWindow$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcWindow$[ebp+12], edx

; 2469 :     OffsetRect( &rcWindow, nOffsetX, nOffsetY );

	mov	esi, esp
	mov	eax, DWORD PTR _nOffsetY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nOffsetX$[ebp]
	push	ecx
	lea	edx, DWORD PTR _rcWindow$[ebp]
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2470 : 
; 2471 :  
; 2472 :     // Blend current color
; 2473 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 2474 :     pElement->FontColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 68					; 00000044H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 2475 : 
; 2476 :     m_pDialog->DrawSprite( pElement, &rcWindow );

	lea	eax, DWORD PTR _rcWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 2477 :     m_pDialog->DrawText( m_strText, pElement, &rcWindow );

	push	-1
	push	0
	lea	eax, DWORD PTR _rcWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 77					; 0000004dH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 2478 : 
; 2479 :     // Main button
; 2480 :     pElement = m_Elements.GetAt( 1 );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 2481 : 
; 2482 : 
; 2483 :     // Blend current color
; 2484 :     pElement->TextureColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 2485 :     pElement->FontColor.Blend( iState, fElapsedTime, fBlendRate );

	push	ecx
	movss	xmm0, DWORD PTR _fBlendRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 68					; 00000044H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 2486 : 
; 2487 :     m_pDialog->DrawSprite( pElement, &rcWindow );

	lea	eax, DWORD PTR _rcWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 2488 :     m_pDialog->DrawText( m_strText, pElement, &rcWindow );

	push	-1
	push	0
	lea	eax, DWORD PTR _rcWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 77					; 0000004dH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA

; 2489 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN16@Render:
	DD	1
	DD	$LN15@Render
$LN15@Render:
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN14@Render
$LN14@Render:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
?Render@CDXUTButton@@UAEXPAUIDirect3DDevice9@@M@Z ENDP	; CDXUTButton::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?CanHaveFocus@CDXUTButton@@UAE_NXZ
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
?CanHaveFocus@CDXUTButton@@UAE_NXZ PROC			; CDXUTButton::CanHaveFocus, COMDAT
; _this$ = ecx

; 476  :     virtual bool CanHaveFocus() { return (m_bVisible && m_bEnabled); }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@CanHaveFoc
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	test	eax, eax
	je	SHORT $LN3@CanHaveFoc
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@CanHaveFoc
$LN3@CanHaveFoc:
	mov	DWORD PTR tv78[ebp], 0
$LN4@CanHaveFoc:
	mov	al, BYTE PTR tv78[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CanHaveFocus@CDXUTButton@@UAE_NXZ ENDP			; CDXUTButton::CanHaveFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?ContainsPoint@CDXUTButton@@UAEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pt$ = 8						; size = 8
?ContainsPoint@CDXUTButton@@UAEHUtagPOINT@@@Z PROC	; CDXUTButton::ContainsPoint, COMDAT
; _this$ = ecx

; 475  :     virtual BOOL ContainsPoint( POINT pt ) { return PtInRect( &m_rcBoundingBox, pt ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 61					; 0000003dH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ContainsPoint@CDXUTButton@@UAEHUtagPOINT@@@Z ENDP	; CDXUTButton::ContainsPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnHotkey@CDXUTButton@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnHotkey@CDXUTButton@@UAEXXZ PROC			; CDXUTButton::OnHotkey, COMDAT
; _this$ = ecx

; 473  :     virtual void OnHotkey() { m_pDialog->RequestFocus( this ); m_pDialog->SendEvent( EVENT_BUTTON_CLICKED, true, this ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	257					; 00000101H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnHotkey@CDXUTButton@@UAEXXZ ENDP			; CDXUTButton::OnHotkey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleMouse@CDXUTButton@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
tv79 = -208						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTButton@@UAE_NIUtagPOINT@@IJ@Z PROC	; CDXUTButton::HandleMouse, COMDAT
; _this$ = ecx

; 2377 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2378 : 	OutputDebugString("CDXUTButton::HandleMouse");

	mov	esi, esp
	push	OFFSET ??_C@_0BJ@OLOOAJCD@CDXUTButton?3?3HandleMouse?$AA@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2379 : 
; 2380 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN10@HandleMous
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN11@HandleMous
$LN10@HandleMous:

; 2381 :         return false;

	xor	al, al
	jmp	$LN12@HandleMous
$LN11@HandleMous:

; 2382 : 
; 2383 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 513		; 00000201H
	je	SHORT $LN7@HandleMous
	cmp	DWORD PTR tv79[ebp], 514		; 00000202H
	je	SHORT $LN4@HandleMous
	cmp	DWORD PTR tv79[ebp], 515		; 00000203H
	je	SHORT $LN7@HandleMous
	jmp	$LN8@HandleMous
$LN7@HandleMous:

; 2384 :     {
; 2385 :         case WM_LBUTTONDOWN:
; 2386 :         case WM_LBUTTONDBLCLK:
; 2387 :         {
; 2388 :             if( ContainsPoint( pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN6@HandleMous

; 2389 :             {
; 2390 :                 // Pressed while inside the control
; 2391 :                 m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 1

; 2392 :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2393 : 
; 2394 :                 if( !m_bHasFocus )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN5@HandleMous

; 2395 :                     m_pDialog->RequestFocus( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ; CDXUTDialog::RequestFocus
$LN5@HandleMous:

; 2396 : 
; 2397 :                 return true;

	mov	al, 1
	jmp	SHORT $LN12@HandleMous
$LN6@HandleMous:

; 2398 :             }
; 2399 : 
; 2400 :             break;

	jmp	SHORT $LN8@HandleMous
$LN4@HandleMous:

; 2401 :         }
; 2402 : 
; 2403 :         case WM_LBUTTONUP:
; 2404 :         {
; 2405 :             if( m_bPressed )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	test	ecx, ecx
	je	SHORT $LN8@HandleMous

; 2406 :             {
; 2407 :                 m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 2408 :                 ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2409 : 
; 2410 :                 if( !m_pDialog->m_bKeyboardInput )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	jne	SHORT $LN2@HandleMous

; 2411 :                     m_pDialog->ClearFocus();

	call	?ClearFocus@CDXUTDialog@@SAXXZ		; CDXUTDialog::ClearFocus
$LN2@HandleMous:

; 2412 : 
; 2413 :                 // Button click
; 2414 :                 if( ContainsPoint( pt ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@HandleMous

; 2415 :                     m_pDialog->SendEvent( EVENT_BUTTON_CLICKED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	257					; 00000101H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN1@HandleMous:

; 2416 : 
; 2417 :                 return true;

	mov	al, 1
	jmp	SHORT $LN12@HandleMous
$LN8@HandleMous:

; 2418 :             }
; 2419 : 
; 2420 :             break;
; 2421 :         }
; 2422 :     };
; 2423 :     
; 2424 :     return false;

	xor	al, al
$LN12@HandleMous:

; 2425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?HandleMouse@CDXUTButton@@UAE_NIUtagPOINT@@IJ@Z ENDP	; CDXUTButton::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?HandleKeyboard@CDXUTButton@@UAE_NIIJ@Z
_TEXT	SEGMENT
tv82 = -208						; size = 4
tv79 = -208						; size = 4
tv78 = -208						; size = 4
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTButton@@UAE_NIIJ@Z PROC		; CDXUTButton::HandleKeyboard, COMDAT
; _this$ = ecx

; 2341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2342 :     if( !m_bEnabled || !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN12@HandleKeyb
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN13@HandleKeyb
$LN12@HandleKeyb:

; 2343 :         return false;

	xor	al, al
	jmp	$LN14@HandleKeyb
$LN13@HandleKeyb:

; 2344 : 
; 2345 :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 256		; 00000100H
	je	SHORT $LN9@HandleKeyb
	cmp	DWORD PTR tv78[ebp], 257		; 00000101H
	je	SHORT $LN5@HandleKeyb
	jmp	SHORT $LN10@HandleKeyb
$LN9@HandleKeyb:

; 2346 :     {
; 2347 :         case WM_KEYDOWN:
; 2348 :         {
; 2349 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 32			; 00000020H
	je	SHORT $LN6@HandleKeyb
	jmp	SHORT $LN5@HandleKeyb
$LN6@HandleKeyb:

; 2350 :             {
; 2351 :                 case VK_SPACE:
; 2352 :                     m_bPressed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 1

; 2353 :                     return true;

	mov	al, 1
	jmp	SHORT $LN14@HandleKeyb
$LN5@HandleKeyb:

; 2354 :             }
; 2355 :         }
; 2356 : 
; 2357 :         case WM_KEYUP:
; 2358 :         {
; 2359 :             switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 32			; 00000020H
	je	SHORT $LN2@HandleKeyb
	jmp	SHORT $LN10@HandleKeyb
$LN2@HandleKeyb:

; 2360 :             {
; 2361 :                 case VK_SPACE:
; 2362 :                     if( m_bPressed == true )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+337]
	cmp	ecx, 1
	jne	SHORT $LN1@HandleKeyb

; 2363 :                     {
; 2364 :                         m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 2365 :                         m_pDialog->SendEvent( EVENT_BUTTON_CLICKED, true, this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	1
	push	257					; 00000101H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ; CDXUTDialog::SendEvent
$LN1@HandleKeyb:

; 2366 :                     }
; 2367 :                     return true;

	mov	al, 1
	jmp	SHORT $LN14@HandleKeyb
$LN10@HandleKeyb:

; 2368 :             }
; 2369 :         }
; 2370 :     }
; 2371 :     return false;

	xor	al, al
$LN14@HandleKeyb:

; 2372 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HandleKeyboard@CDXUTButton@@UAE_NIIJ@Z ENDP		; CDXUTButton::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTButton@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDialog$ = 8						; size = 4
??0CDXUTButton@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTButton::CDXUTButton, COMDAT
; _this$ = ecx

; 2331 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z	; CDXUTStatic::CDXUTStatic
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTButton@@6B@

; 2332 :     m_Type = DXUT_CONTROL_BUTTON;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 2333 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2334 : 
; 2335 :     m_bPressed = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+337], 0

; 2336 :     m_nHotkey = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 2337 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDXUTButton@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTButton::CDXUTButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTStatic@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTStatic@@UAEPAXI@Z PROC				; CDXUTStatic::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTStatic@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTStatic@@UAEPAXI@Z ENDP				; CDXUTStatic::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CDXUTStatic@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CDXUTStatic@@UAE@XZ PROC				; CDXUTStatic::~CDXUTStatic, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDXUTStatic@@UAE@XZ ENDP				; CDXUTStatic::~CDXUTStatic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetText@CDXUTStatic@@QAEJPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
?SetText@CDXUTStatic@@QAEJPBD@Z PROC			; CDXUTStatic::SetText, COMDAT
; _this$ = ecx

; 2313 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2314 :     if( strText == NULL )

	cmp	DWORD PTR _strText$[ebp], 0
	jne	SHORT $LN1@SetText

; 2315 :     {
; 2316 :         m_strText[0] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+77], 0

; 2317 :         return S_OK;

	xor	eax, eax
	jmp	SHORT $LN2@SetText
$LN1@SetText:

; 2318 :     }
; 2319 :     
; 2320 :     StringCchCopy( m_strText, MAX_PATH, strText); 

	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	push	260					; 00000104H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 77					; 0000004dH
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 2321 :     return S_OK;

	xor	eax, eax
$LN2@SetText:

; 2322 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetText@CDXUTStatic@@QAEJPBD@Z ENDP			; CDXUTStatic::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetTextCopy@CDXUTStatic@@QAEJPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strDest$ = 8						; size = 4
_bufferCount$ = 12					; size = 4
?GetTextCopy@CDXUTStatic@@QAEJPADI@Z PROC		; CDXUTStatic::GetTextCopy, COMDAT
; _this$ = ecx

; 2297 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2298 :     // Validate incoming parameters
; 2299 :     if( strDest == NULL || bufferCount == 0 )

	cmp	DWORD PTR _strDest$[ebp], 0
	je	SHORT $LN1@GetTextCop
	cmp	DWORD PTR _bufferCount$[ebp], 0
	jne	SHORT $LN2@GetTextCop
$LN1@GetTextCop:

; 2300 :     {
; 2301 :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@GetTextCop
$LN2@GetTextCop:

; 2302 :     }
; 2303 : 
; 2304 :     // Copy the window text
; 2305 :     StringCchCopy( strDest, bufferCount, m_strText );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 77					; 0000004dH
	push	eax
	mov	ecx, DWORD PTR _bufferCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDest$[ebp]
	push	edx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 2306 : 
; 2307 :     return S_OK;

	xor	eax, eax
$LN3@GetTextCop:

; 2308 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetTextCopy@CDXUTStatic@@QAEJPADI@Z ENDP		; CDXUTStatic::GetTextCopy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?ContainsPoint@CDXUTStatic@@UAEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pt$ = 8						; size = 8
?ContainsPoint@CDXUTStatic@@UAEHUtagPOINT@@@Z PROC	; CDXUTStatic::ContainsPoint, COMDAT
; _this$ = ecx

; 451  :     virtual BOOL ContainsPoint( POINT pt ) { return false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?ContainsPoint@CDXUTStatic@@UAEHUtagPOINT@@@Z ENDP	; CDXUTStatic::ContainsPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Render@CDXUTStatic@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
_pElement$ = -32					; size = 4
_iState$ = -20						; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTStatic@@UAEXPAUIDirect3DDevice9@@M@Z PROC	; CDXUTStatic::Render, COMDAT
; _this$ = ecx

; 2279 : {    

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2280 :     if( m_bVisible == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN2@Render

; 2281 :         return;

	jmp	SHORT $LN3@Render
$LN2@Render:

; 2282 : 
; 2283 :     DXUT_CONTROL_STATE iState = DXUT_STATE_NORMAL;

	mov	DWORD PTR _iState$[ebp], 0

; 2284 : 
; 2285 :     if( m_bEnabled == false )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN1@Render

; 2286 :         iState = DXUT_STATE_DISABLED;

	mov	DWORD PTR _iState$[ebp], 1
$LN1@Render:

; 2287 :         
; 2288 :     CDXUTElement* pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 2289 : 
; 2290 :     pElement->FontColor.Blend( iState, fElapsedTime );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _iState$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 68					; 00000044H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 2291 :     
; 2292 :     m_pDialog->DrawText( m_strText, pElement, &m_rcBoundingBox, true );

	push	-1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 77					; 0000004dH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
$LN3@Render:

; 2293 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Render@CDXUTStatic@@UAEXPAUIDirect3DDevice9@@M@Z ENDP	; CDXUTStatic::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
$T2 = -248						; size = 4
_pElement$3 = -44					; size = 4
_i$4 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pDialog$ = 8						; size = 4
??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTStatic::CDXUTStatic, COMDAT
; _this$ = ecx

; 2261 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z	; CDXUTControl::CDXUTControl
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTStatic@@6B@

; 2262 :     m_Type = DXUT_CONTROL_STATIC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 1

; 2263 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2264 : 
; 2265 :     ZeroMemory( &m_strText, sizeof(m_strText) );  

	push	260					; 00000104H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 77					; 0000004dH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2266 : 
; 2267 :     for( int i=0; i < m_Elements.GetSize(); i++ )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@CDXUTStati
$LN3@CDXUTStati:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@CDXUTStati:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetSize@?$CGrowableArray@PAVCDXUTElement@@@@QBEHXZ ; CGrowableArray<CDXUTElement *>::GetSize
	cmp	DWORD PTR _i$4[ebp], eax
	jge	SHORT $LN2@CDXUTStati

; 2268 :     {
; 2269 :         CDXUTElement* pElement = m_Elements.GetAt( i );

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pElement$3[ebp], ecx

; 2270 :         SAFE_DELETE( pElement );

	cmp	DWORD PTR _pElement$3[ebp], 0
	je	SHORT $LN1@CDXUTStati
	mov	eax, DWORD PTR _pElement$3[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pElement$3[ebp], 0
$LN1@CDXUTStati:

; 2271 :     }

	jmp	SHORT $LN3@CDXUTStati
$LN2@CDXUTStati:

; 2272 : 
; 2273 :     m_Elements.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?RemoveAll@?$CGrowableArray@PAVCDXUTElement@@@@QAEXXZ ; CGrowableArray<CDXUTElement *>::RemoveAll

; 2274 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
__ehhandler$??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-256]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTStatic::CDXUTStatic
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0DXUTElementHolder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0DXUTElementHolder@@QAE@XZ PROC			; DXUTElementHolder::DXUTElementHolder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CDXUTElement@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0DXUTElementHolder@@QAE@XZ ENDP			; DXUTElementHolder::DXUTElementHolder
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDXUTControl@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTControl@@UAEPAXI@Z PROC			; CDXUTControl::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTControl@@UAE@XZ			; CDXUTControl::~CDXUTControl
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTControl@@UAEPAXI@Z ENDP			; CDXUTControl::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?UpdateRects@CDXUTControl@@MAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?UpdateRects@CDXUTControl@@MAEXXZ PROC			; CDXUTControl::UpdateRects, COMDAT
; _this$ = ecx

; 2250 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2251 :     SetRect( &m_rcBoundingBox, m_x, m_y, m_x + m_width, m_y + m_height );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 61					; 0000003dH
	push	ecx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2252 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateRects@CDXUTControl@@MAEXXZ ENDP			; CDXUTControl::UpdateRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@PAVCDXUTElement@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@PAVCDXUTElement@@@@IAEJH@Z PROC ; CGrowableArray<CDXUTElement *>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@PAVCDXUTElement@@@@IAEJH@Z ENDP ; CGrowableArray<CDXUTElement *>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@PAVCDXUTElement@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@PAVCDXUTElement@@@@QAEXXZ PROC ; CGrowableArray<CDXUTElement *>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@PAVCDXUTElement@@@@QAEJH@Z ; CGrowableArray<CDXUTElement *>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@PAVCDXUTElement@@@@QAEXXZ ENDP ; CGrowableArray<CDXUTElement *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@PAVCDXUTElement@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@PAVCDXUTElement@@@@QBEHXZ PROC ; CGrowableArray<CDXUTElement *>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@PAVCDXUTElement@@@@QBEHXZ ENDP ; CGrowableArray<CDXUTElement *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z PROC ; CGrowableArray<CDXUTElement *>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ENDP ; CGrowableArray<CDXUTElement *>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@PAVCDXUTElement@@@@QAEJABQAVCDXUTElement@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@PAVCDXUTElement@@@@QAEJABQAVCDXUTElement@@@Z PROC ; CGrowableArray<CDXUTElement *>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAVCDXUTElement@@@@IAEJH@Z ; CGrowableArray<CDXUTElement *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@PAVCDXUTElement@@@@QAEJABQAVCDXUTElement@@@Z ENDP ; CGrowableArray<CDXUTElement *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@PAVCDXUTElement@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@PAVCDXUTElement@@@@QAEJH@Z PROC ; CGrowableArray<CDXUTElement *>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAVCDXUTElement@@@@IAEJH@Z ; CGrowableArray<CDXUTElement *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@PAVCDXUTElement@@@@QAEJH@Z ENDP ; CGrowableArray<CDXUTElement *>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??A?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
??A?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z PROC ; CGrowableArray<CDXUTElement *>::operator[], COMDAT
; _this$ = ecx

; 25   :     TYPE& operator[]( int nIndex ) { return GetAt( nIndex ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ENDP ; CGrowableArray<CDXUTElement *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ PROC	; CGrowableArray<CDXUTElement *>::~CGrowableArray<CDXUTElement *>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAVCDXUTElement@@@@QAEXXZ ; CGrowableArray<CDXUTElement *>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ ENDP	; CGrowableArray<CDXUTElement *>::~CGrowableArray<CDXUTElement *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ PROC	; CGrowableArray<CDXUTElement *>::CGrowableArray<CDXUTElement *>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ ENDP	; CGrowableArray<CDXUTElement *>::CGrowableArray<CDXUTElement *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z
_TEXT	SEGMENT
tv77 = -304						; size = 4
$T2 = -296						; size = 4
$T3 = -284						; size = 4
$T4 = -272						; size = 4
_pCurElement$ = -68					; size = 4
_pNewElement$5 = -56					; size = 4
_i$6 = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_iElement$ = 8						; size = 4
_pElement$ = 12						; size = 4
?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z PROC	; CDXUTControl::SetElement, COMDAT
; _this$ = ecx

; 2205 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2206 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2207 : 
; 2208 :     if( pElement == NULL )

	cmp	DWORD PTR _pElement$[ebp], 0
	jne	SHORT $LN7@SetElement

; 2209 :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetElement
$LN7@SetElement:

; 2210 : 
; 2211 :     // Make certain the array is this large
; 2212 :     for( UINT i=m_Elements.GetSize(); i <= iElement; i++ )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetSize@?$CGrowableArray@PAVCDXUTElement@@@@QBEHXZ ; CGrowableArray<CDXUTElement *>::GetSize
	mov	DWORD PTR _i$6[ebp], eax
	jmp	SHORT $LN6@SetElement
$LN5@SetElement:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN6@SetElement:
	mov	eax, DWORD PTR _i$6[ebp]
	cmp	eax, DWORD PTR _iElement$[ebp]
	ja	$LN4@SetElement

; 2213 :     {
; 2214 :         CDXUTElement* pNewElement = new CDXUTElement();

	push	108					; 0000006cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN10@SetElement
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTElement@@QAE@XZ
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN11@SetElement
$LN10@SetElement:
	mov	DWORD PTR tv77[ebp], 0
$LN11@SetElement:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pNewElement$5[ebp], ecx

; 2215 :         if( pNewElement == NULL )

	cmp	DWORD PTR _pNewElement$5[ebp], 0
	jne	SHORT $LN3@SetElement

; 2216 :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetElement
$LN3@SetElement:

; 2217 : 
; 2218 :         hr = m_Elements.Add( pNewElement );

	lea	eax, DWORD PTR _pNewElement$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Add@?$CGrowableArray@PAVCDXUTElement@@@@QAEJABQAVCDXUTElement@@@Z ; CGrowableArray<CDXUTElement *>::Add
	mov	DWORD PTR _hr$[ebp], eax

; 2219 :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@SetElement

; 2220 :         {
; 2221 :             SAFE_DELETE( pNewElement );

	cmp	DWORD PTR _pNewElement$5[ebp], 0
	je	SHORT $LN1@SetElement
	mov	eax, DWORD PTR _pNewElement$5[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pNewElement$5[ebp], 0
$LN1@SetElement:

; 2222 :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN8@SetElement
$LN2@SetElement:

; 2223 :         }
; 2224 :     }

	jmp	$LN5@SetElement
$LN4@SetElement:

; 2225 : 
; 2226 :     // Update the data
; 2227 :     CDXUTElement* pCurElement = m_Elements.GetAt( iElement );

	mov	eax, DWORD PTR _iElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pCurElement$[ebp], ecx

; 2228 :     *pCurElement = *pElement;

	mov	ecx, 27					; 0000001bH
	mov	esi, DWORD PTR _pElement$[ebp]
	mov	edi, DWORD PTR _pCurElement$[ebp]
	rep movsd

; 2229 :     
; 2230 :     return S_OK;

	xor	eax, eax
$LN8@SetElement:

; 2231 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@SetElement
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN16@SetElement:
	DD	1
	DD	$LN15@SetElement
$LN15@SetElement:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN13@SetElement
$LN13@SetElement:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z ENDP	; CDXUTControl::SetElement
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetElement@CDXUTControl@@QAEPAVCDXUTElement@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iElement$ = 8						; size = 4
?GetElement@CDXUTControl@@QAEPAVCDXUTElement@@I@Z PROC	; CDXUTControl::GetElement, COMDAT
; _this$ = ecx

; 398  :     CDXUTElement* GetElement( UINT iElement ) { return m_Elements.GetAt( iElement ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _iElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetElement@CDXUTControl@@QAEPAVCDXUTElement@@I@Z ENDP	; CDXUTControl::GetElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetTextColor@CDXUTControl@@UAEXK@Z
_TEXT	SEGMENT
_pElement$ = -20					; size = 4
_this$ = -8						; size = 4
_Color$ = 8						; size = 4
?SetTextColor@CDXUTControl@@UAEXK@Z PROC		; CDXUTControl::SetTextColor, COMDAT
; _this$ = ecx

; 2195 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2196 :     CDXUTElement* pElement = m_Elements.GetAt( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pElement$[ebp], eax

; 2197 : 
; 2198 :     if( pElement )

	cmp	DWORD PTR _pElement$[ebp], 0
	je	SHORT $LN2@SetTextCol

; 2199 :         pElement->FontColor.States[DXUT_STATE_NORMAL] = Color;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pElement$[ebp]
	mov	eax, DWORD PTR _Color$[ebp]
	mov	DWORD PTR [edx+ecx+68], eax
$LN2@SetTextCol:

; 2200 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextColor@CDXUTControl@@UAEXK@Z ENDP		; CDXUTControl::SetTextColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetHotkey@CDXUTControl@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetHotkey@CDXUTControl@@QAEIXZ PROC			; CDXUTControl::GetHotkey, COMDAT
; _this$ = ecx

; 392  :     UINT GetHotkey() { return m_nHotkey; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHotkey@CDXUTControl@@QAEIXZ ENDP			; CDXUTControl::GetHotkey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetHotkey@CDXUTControl@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nHotkey$ = 8						; size = 4
?SetHotkey@CDXUTControl@@QAEXI@Z PROC			; CDXUTControl::SetHotkey, COMDAT
; _this$ = ecx

; 391  :     void SetHotkey( UINT nHotkey ) { m_nHotkey = nHotkey; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nHotkey$[ebp]
	mov	DWORD PTR [eax+52], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHotkey@CDXUTControl@@QAEXI@Z ENDP			; CDXUTControl::SetHotkey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetSize@CDXUTControl@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?SetSize@CDXUTControl@@QAEXHH@Z PROC			; CDXUTControl::SetSize, COMDAT
; _this$ = ecx

; 389  :     void SetSize( int width, int height ) { m_width = width; m_height = height; UpdateRects(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSize@CDXUTControl@@QAEXHH@Z ENDP			; CDXUTControl::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetLocation@CDXUTControl@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetLocation@CDXUTControl@@QAEXHH@Z PROC		; CDXUTControl::SetLocation, COMDAT
; _this$ = ecx

; 388  :     void SetLocation( int x, int y ) { m_x = x; m_y = y; UpdateRects(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetLocation@CDXUTControl@@QAEXHH@Z ENDP		; CDXUTControl::SetLocation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetID@CDXUTControl@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
?SetID@CDXUTControl@@QAEXH@Z PROC			; CDXUTControl::SetID, COMDAT
; _this$ = ecx

; 386  :     void SetID( int ID ) { m_ID = ID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ID$[ebp]
	mov	DWORD PTR [eax+44], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetID@CDXUTControl@@QAEXH@Z ENDP			; CDXUTControl::SetID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetID@CDXUTControl@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetID@CDXUTControl@@QBEHXZ PROC			; CDXUTControl::GetID, COMDAT
; _this$ = ecx

; 385  :     int  GetID() const { return m_ID; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetID@CDXUTControl@@QBEHXZ ENDP			; CDXUTControl::GetID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetType@CDXUTControl@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetType@CDXUTControl@@QBEIXZ PROC			; CDXUTControl::GetType, COMDAT
; _this$ = ecx

; 383  :     UINT GetType() const { return m_Type; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CDXUTControl@@QBEIXZ ENDP			; CDXUTControl::GetType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetVisible@CDXUTControl@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVisible@CDXUTControl@@UAE_NXZ PROC			; CDXUTControl::GetVisible, COMDAT
; _this$ = ecx

; 381  :     virtual bool GetVisible() { return m_bVisible; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVisible@CDXUTControl@@UAE_NXZ ENDP			; CDXUTControl::GetVisible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetVisible@CDXUTControl@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bVisible$ = 8						; size = 1
?SetVisible@CDXUTControl@@UAEX_N@Z PROC			; CDXUTControl::SetVisible, COMDAT
; _this$ = ecx

; 380  :     virtual void SetVisible( bool bVisible ) { m_bVisible = bVisible; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bVisible$[ebp]
	mov	BYTE PTR [eax+4], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetVisible@CDXUTControl@@UAEX_N@Z ENDP			; CDXUTControl::SetVisible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetEnabled@CDXUTControl@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetEnabled@CDXUTControl@@UAE_NXZ PROC			; CDXUTControl::GetEnabled, COMDAT
; _this$ = ecx

; 379  :     virtual bool GetEnabled() { return m_bEnabled; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+60]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEnabled@CDXUTControl@@UAE_NXZ ENDP			; CDXUTControl::GetEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?SetEnabled@CDXUTControl@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bEnabled$ = 8						; size = 1
?SetEnabled@CDXUTControl@@UAEX_N@Z PROC			; CDXUTControl::SetEnabled, COMDAT
; _this$ = ecx

; 378  :     virtual void SetEnabled( bool bEnabled ) { m_bEnabled = bEnabled; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bEnabled$[ebp]
	mov	BYTE PTR [eax+60], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetEnabled@CDXUTControl@@UAEX_N@Z ENDP			; CDXUTControl::SetEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pt$ = 8						; size = 8
?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z PROC	; CDXUTControl::ContainsPoint, COMDAT
; _this$ = ecx

; 376  :     virtual BOOL ContainsPoint( POINT pt ) { return PtInRect( &m_rcBoundingBox, pt ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 61					; 0000003dH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ContainsPoint@CDXUTControl@@UAEHUtagPOINT@@@Z ENDP	; CDXUTControl::ContainsPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnHotkey@CDXUTControl@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnHotkey@CDXUTControl@@UAEXXZ PROC			; CDXUTControl::OnHotkey, COMDAT
; _this$ = ecx

; 374  :     virtual void OnHotkey() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnHotkey@CDXUTControl@@UAEXXZ ENDP			; CDXUTControl::OnHotkey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnMouseLeave@CDXUTControl@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnMouseLeave@CDXUTControl@@UAEXXZ PROC			; CDXUTControl::OnMouseLeave, COMDAT
; _this$ = ecx

; 373  :     virtual void OnMouseLeave() { m_bMouseOver = false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnMouseLeave@CDXUTControl@@UAEXXZ ENDP			; CDXUTControl::OnMouseLeave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnMouseEnter@CDXUTControl@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnMouseEnter@CDXUTControl@@UAEXXZ PROC			; CDXUTControl::OnMouseEnter, COMDAT
; _this$ = ecx

; 372  :     virtual void OnMouseEnter() { m_bMouseOver = true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnMouseEnter@CDXUTControl@@UAEXXZ ENDP			; CDXUTControl::OnMouseEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnFocusOut@CDXUTControl@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnFocusOut@CDXUTControl@@UAEXXZ PROC			; CDXUTControl::OnFocusOut, COMDAT
; _this$ = ecx

; 371  :     virtual void OnFocusOut() { m_bHasFocus = false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+6], 0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnFocusOut@CDXUTControl@@UAEXXZ ENDP			; CDXUTControl::OnFocusOut
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnFocusIn@CDXUTControl@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnFocusIn@CDXUTControl@@UAEXXZ PROC			; CDXUTControl::OnFocusIn, COMDAT
; _this$ = ecx

; 370  :     virtual void OnFocusIn() { m_bHasFocus = true; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+6], 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnFocusIn@CDXUTControl@@UAEXXZ ENDP			; CDXUTControl::OnFocusIn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?CanHaveFocus@CDXUTControl@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CanHaveFocus@CDXUTControl@@UAE_NXZ PROC		; CDXUTControl::CanHaveFocus, COMDAT
; _this$ = ecx

; 369  :     virtual bool CanHaveFocus() { return false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CanHaveFocus@CDXUTControl@@UAE_NXZ ENDP		; CDXUTControl::CanHaveFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?HandleMouse@CDXUTControl@@UAE_NIUtagPOINT@@IJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_pt$ = 12						; size = 8
_wParam$ = 20						; size = 4
_lParam$ = 24						; size = 4
?HandleMouse@CDXUTControl@@UAE_NIUtagPOINT@@IJ@Z PROC	; CDXUTControl::HandleMouse, COMDAT
; _this$ = ecx

; 367  :     virtual bool HandleMouse( UINT uMsg, POINT pt, WPARAM wParam, LPARAM lParam ) { return false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?HandleMouse@CDXUTControl@@UAE_NIUtagPOINT@@IJ@Z ENDP	; CDXUTControl::HandleMouse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?HandleKeyboard@CDXUTControl@@UAE_NIIJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?HandleKeyboard@CDXUTControl@@UAE_NIIJ@Z PROC		; CDXUTControl::HandleKeyboard, COMDAT
; _this$ = ecx

; 366  :     virtual bool HandleKeyboard( UINT uMsg, WPARAM wParam, LPARAM lParam ) { return false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?HandleKeyboard@CDXUTControl@@UAE_NIIJ@Z ENDP		; CDXUTControl::HandleKeyboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?MsgProc@CDXUTControl@@UAE_NIIJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uMsg$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?MsgProc@CDXUTControl@@UAE_NIIJ@Z PROC			; CDXUTControl::MsgProc, COMDAT
; _this$ = ecx

; 364  :     virtual bool MsgProc( UINT uMsg, WPARAM wParam, LPARAM lParam ) { return false; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	al, al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MsgProc@CDXUTControl@@UAE_NIIJ@Z ENDP			; CDXUTControl::MsgProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?Render@CDXUTControl@@UAEXPAUIDirect3DDevice9@@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
_fElapsedTime$ = 12					; size = 4
?Render@CDXUTControl@@UAEXPAUIDirect3DDevice9@@M@Z PROC	; CDXUTControl::Render, COMDAT
; _this$ = ecx

; 361  :     virtual void Render( IDirect3DDevice9* pd3dDevice, float fElapsedTime ) { };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Render@CDXUTControl@@UAEXPAUIDirect3DDevice9@@M@Z ENDP	; CDXUTControl::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Refresh@CDXUTControl@@UAEXXZ
_TEXT	SEGMENT
_pElement$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
?Refresh@CDXUTControl@@UAEXXZ PROC			; CDXUTControl::Refresh, COMDAT
; _this$ = ecx

; 2236 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2237 :     m_bMouseOver = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 0

; 2238 :     m_bHasFocus = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+6], 0

; 2239 : 
; 2240 :     for( int i=0; i < m_Elements.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@Refresh
$LN2@Refresh:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@Refresh:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetSize@?$CGrowableArray@PAVCDXUTElement@@@@QBEHXZ ; CGrowableArray<CDXUTElement *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN4@Refresh

; 2241 :     {
; 2242 :         CDXUTElement* pElement = m_Elements.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetAt@?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pElement$1[ebp], ecx

; 2243 :         pElement->Refresh();

	mov	ecx, DWORD PTR _pElement$1[ebp]
	call	?Refresh@CDXUTElement@@QAEXXZ		; CDXUTElement::Refresh

; 2244 :     }

	jmp	SHORT $LN2@Refresh
$LN4@Refresh:

; 2245 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Refresh@CDXUTControl@@UAEXXZ ENDP			; CDXUTControl::Refresh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?OnInit@CDXUTControl@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?OnInit@CDXUTControl@@UAEJXZ PROC			; CDXUTControl::OnInit, COMDAT
; _this$ = ecx

; 359  :     virtual HRESULT OnInit() { return S_OK; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?OnInit@CDXUTControl@@UAEJXZ ENDP			; CDXUTControl::OnInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CDXUTControl@@UAE@XZ
_TEXT	SEGMENT
$T2 = -236						; size = 4
_i$3 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTControl@@UAE@XZ PROC				; CDXUTControl::~CDXUTControl, COMDAT
; _this$ = ecx

; 2184 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTControl@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTControl@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2185 :     for( int i = 0; i < m_Elements.GetSize(); ++i )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@CDXUTContr
$LN2@CDXUTContr:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN3@CDXUTContr:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetSize@?$CGrowableArray@PAVCDXUTElement@@@@QBEHXZ ; CGrowableArray<CDXUTElement *>::GetSize
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN1@CDXUTContr

; 2186 :     {
; 2187 :         delete m_Elements[i];

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$CGrowableArray@PAVCDXUTElement@@@@QAEAAPAVCDXUTElement@@H@Z ; CGrowableArray<CDXUTElement *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 2188 :     }

	jmp	SHORT $LN2@CDXUTContr
$LN1@CDXUTContr:

; 2189 :     m_Elements.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?RemoveAll@?$CGrowableArray@PAVCDXUTElement@@@@QAEXXZ ; CGrowableArray<CDXUTElement *>::RemoveAll

; 2190 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ ; CGrowableArray<CDXUTElement *>::~CGrowableArray<CDXUTElement *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDXUTControl@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ ; CGrowableArray<CDXUTElement *>::~CGrowableArray<CDXUTElement *>
__ehhandler$??1CDXUTControl@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTControl@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTControl@@UAE@XZ ENDP				; CDXUTControl::~CDXUTControl
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDialog$ = 8						; size = 4
??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z PROC		; CDXUTControl::CDXUTControl, COMDAT
; _this$ = ecx

; 2159 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTControl@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CGrowableArray@PAVCDXUTElement@@@@QAE@XZ ; CGrowableArray<CDXUTElement *>::CGrowableArray<CDXUTElement *>

; 2160 :     m_Type = DXUT_CONTROL_BUTTON;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 2161 :     m_pDialog = pDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDialog$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2162 :     m_ID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 2163 :     m_Index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2164 :     m_pUserData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 2165 : 
; 2166 :     m_bEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 1

; 2167 :     m_bVisible = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1

; 2168 :     m_bMouseOver = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 0

; 2169 :     m_bHasFocus = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+6], 0

; 2170 :     m_bIsDefault = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+7], 0

; 2171 : 
; 2172 :     m_pDialog = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 2173 : 
; 2174 :     m_x = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 2175 :     m_y = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 2176 :     m_width = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 2177 :     m_height = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 2178 : 
; 2179 :    ZeroMemory( &m_rcBoundingBox, sizeof( m_rcBoundingBox ) );

	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2180 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDXUTControl@@QAE@PAVCDXUTDialog@@@Z ENDP		; CDXUTControl::CDXUTControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z
_TEXT	SEGMENT
_info$ = -340						; size = 28
_strPath$ = -304					; size = 260
_pTextureNode$ = -36					; size = 4
_hr$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_iTexture$ = 8						; size = 4
?CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z PROC	; CDXUTDialogResourceManager::CreateTexture, COMDAT
; _this$ = ecx

; 1770 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1771 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1772 : 
; 1773 :     DXUTTextureNode* pTextureNode = m_TextureCache.GetAt( iTexture );

	mov	eax, DWORD PTR _iTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z ; CGrowableArray<DXUTTextureNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pTextureNode$[ebp], ecx

; 1774 :    
; 1775 : 	//_ASSERT(pTextureNode->strFilename[0] == 0);
; 1776 : 
; 1777 :     // Make sure there's a texture to create
; 1778 :     if( pTextureNode->strFilename[0] == 0 )

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pTextureNode$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN3@CreateText

; 1779 : 	{
; 1780 : 		OutputDebugString("CDXUTDialogResourceManager::CreateTexture(BAD_TEXFILE)");

	mov	esi, esp
	push	OFFSET ??_C@_0DH@CFMKICLK@CDXUTDialogResourceManager?3?3Crea@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1781 :         return S_OK;

	xor	eax, eax
	jmp	$LN4@CreateText
$LN3@CreateText:

; 1782 : 	}
; 1783 :     
; 1784 :     // Find the texture on the hard drive
; 1785 :     TCHAR strPath[MAX_PATH];
; 1786 :     hr = DXUTFindDXSDKMediaFileCch( strPath, MAX_PATH, pTextureNode->strFilename );

	mov	eax, DWORD PTR _pTextureNode$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	?DXUTFindDXSDKMediaFileCch@@YAJPADHPBD@Z ; DXUTFindDXSDKMediaFileCch
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hr$[ebp], eax

; 1787 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CreateText

; 1788 :     {
; 1789 :         return DXTRACE_ERR( "DXUTFindDXSDKMediaFileCch", hr );

	push	0
	push	OFFSET ??_C@_0BK@NOJEPBKH@DXUTFindDXSDKMediaFileCch?$AA@
	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z@4JA
	add	ecx, 19					; 00000013H
	push	ecx
	push	OFFSET ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper
	jmp	$LN4@CreateText
$LN2@CreateText:

; 1790 :     }
; 1791 : 
; 1792 :     // Create texture
; 1793 :     D3DXIMAGE_INFO info;
; 1794 :     hr =  D3DXCreateTextureFromFileEx( m_pd3dDevice, strPath, D3DX_DEFAULT, D3DX_DEFAULT, 
; 1795 :                                        D3DX_DEFAULT, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED, 
; 1796 :                                        D3DX_DEFAULT, D3DX_DEFAULT, 0, 
; 1797 :                                        &info, NULL, &pTextureNode->pTexture );

	mov	eax, DWORD PTR _pTextureNode$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	push	0
	lea	ecx, DWORD PTR _info$[ebp]
	push	ecx
	push	0
	push	-1
	push	-1
	push	1
	push	0
	push	0
	push	-1
	push	-1
	push	-1
	lea	edx, DWORD PTR _strPath$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_D3DXCreateTextureFromFileExA@56
	mov	DWORD PTR _hr$[ebp], eax

; 1798 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CreateText

; 1799 :     {
; 1800 :         return DXTRACE_ERR( "D3DXCreateTextureFromFileEx", hr );

	push	0
	push	OFFSET ??_C@_0BM@CBAPLCDC@D3DXCreateTextureFromFileEx?$AA@
	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z@4JA
	add	ecx, 30					; 0000001eH
	push	ecx
	push	OFFSET ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper
	jmp	SHORT $LN4@CreateText
$LN1@CreateText:

; 1801 :     }
; 1802 : 
; 1803 :     // Store dimensions
; 1804 :     pTextureNode->dwWidth = info.Width;

	mov	eax, DWORD PTR _pTextureNode$[ebp]
	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+264], ecx

; 1805 :     pTextureNode->dwHeight = info.Height;

	mov	eax, DWORD PTR _pTextureNode$[ebp]
	mov	ecx, DWORD PTR _info$[ebp+4]
	mov	DWORD PTR [eax+268], ecx

; 1806 : 
; 1807 :     return S_OK;

	xor	eax, eax
$LN4@CreateText:

; 1808 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@CreateText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@CreateText:
	DD	2
	DD	$LN8@CreateText
$LN8@CreateText:
	DD	-304					; fffffed0H
	DD	260					; 00000104H
	DD	$LN6@CreateText
	DD	-340					; fffffeacH
	DD	28					; 0000001cH
	DD	$LN7@CreateText
$LN7@CreateText:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN6@CreateText:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z ENDP	; CDXUTDialogResourceManager::CreateTexture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?CreateFontA@CDXUTDialogResourceManager@@QAEJI@Z
_TEXT	SEGMENT
_pFontNode$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_iFont$ = 8						; size = 4
?CreateFontA@CDXUTDialogResourceManager@@QAEJI@Z PROC	; CDXUTDialogResourceManager::CreateFontA, COMDAT
; _this$ = ecx

; 1750 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1751 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1752 : 
; 1753 :     DXUTFontNode* pFontNode = m_FontCache.GetAt( iFont );

	mov	eax, DWORD PTR _iFont$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ; CGrowableArray<DXUTFontNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pFontNode$[ebp], ecx

; 1754 : 
; 1755 :     SAFE_RELEASE( pFontNode->pFont );

	mov	eax, DWORD PTR _pFontNode$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN1@CreateFont
	mov	eax, DWORD PTR _pFontNode$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR _pFontNode$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _pFontNode$[ebp]
	mov	DWORD PTR [eax+260], 0
$LN1@CreateFont:

; 1756 :     
; 1757 :     D3DXCreateFont( m_pd3dDevice, pFontNode->nHeight, 0, pFontNode->nWeight, 1, FALSE, DEFAULT_CHARSET, 
; 1758 :                     OUT_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, 
; 1759 :                      pFontNode->strFace, &pFontNode->pFont );

	mov	eax, DWORD PTR _pFontNode$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR _pFontNode$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	push	1
	push	0
	push	1
	mov	edx, DWORD PTR _pFontNode$[ebp]
	mov	eax, DWORD PTR [edx+268]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pFontNode$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_D3DXCreateFontA@48

; 1760 : 
; 1761 : 	/*
; 1762 : 	sprintf(szDebug,"CDXUTDialogResourceManager::CreateFont(pFont=0x%X,pD3DDevice=0x%X)",pFontNode->pFont,m_pd3dDevice);
; 1763 : 	OutputDebugString(szDebug);*/
; 1764 : 
; 1765 :     return S_OK;

	xor	eax, eax

; 1766 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CreateFontA@CDXUTDialogResourceManager@@QAEJI@Z ENDP	; CDXUTDialogResourceManager::CreateFontA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@PAUDXUTFontNode@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@PAUDXUTFontNode@@@@IAEJH@Z PROC ; CGrowableArray<DXUTFontNode *>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@PAUDXUTFontNode@@@@IAEJH@Z ENDP ; CGrowableArray<DXUTFontNode *>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@PAUDXUTFontNode@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@PAUDXUTFontNode@@@@QAEXXZ PROC ; CGrowableArray<DXUTFontNode *>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJH@Z ; CGrowableArray<DXUTFontNode *>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@PAUDXUTFontNode@@@@QAEXXZ ENDP ; CGrowableArray<DXUTFontNode *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ PROC ; CGrowableArray<DXUTFontNode *>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ENDP ; CGrowableArray<DXUTFontNode *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z PROC ; CGrowableArray<DXUTFontNode *>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ENDP ; CGrowableArray<DXUTFontNode *>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJABQAUDXUTFontNode@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJABQAUDXUTFontNode@@@Z PROC ; CGrowableArray<DXUTFontNode *>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTFontNode@@@@IAEJH@Z ; CGrowableArray<DXUTFontNode *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJABQAUDXUTFontNode@@@Z ENDP ; CGrowableArray<DXUTFontNode *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJH@Z PROC ; CGrowableArray<DXUTFontNode *>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTFontNode@@@@IAEJH@Z ; CGrowableArray<DXUTFontNode *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTFontNode *>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ PROC	; CGrowableArray<DXUTFontNode *>::~CGrowableArray<DXUTFontNode *>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAUDXUTFontNode@@@@QAEXXZ ; CGrowableArray<DXUTFontNode *>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ ENDP	; CGrowableArray<DXUTFontNode *>::~CGrowableArray<DXUTFontNode *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ PROC	; CGrowableArray<DXUTFontNode *>::CGrowableArray<DXUTFontNode *>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ ENDP	; CGrowableArray<DXUTFontNode *>::CGrowableArray<DXUTFontNode *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@PAUDXUTTextureNode@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@PAUDXUTTextureNode@@@@IAEJH@Z PROC ; CGrowableArray<DXUTTextureNode *>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@PAUDXUTTextureNode@@@@IAEJH@Z ENDP ; CGrowableArray<DXUTTextureNode *>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEXXZ PROC ; CGrowableArray<DXUTTextureNode *>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJH@Z ; CGrowableArray<DXUTTextureNode *>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEXXZ ENDP ; CGrowableArray<DXUTTextureNode *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ PROC ; CGrowableArray<DXUTTextureNode *>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ ENDP ; CGrowableArray<DXUTTextureNode *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z PROC ; CGrowableArray<DXUTTextureNode *>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z ENDP ; CGrowableArray<DXUTTextureNode *>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJABQAUDXUTTextureNode@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJABQAUDXUTTextureNode@@@Z PROC ; CGrowableArray<DXUTTextureNode *>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTTextureNode@@@@IAEJH@Z ; CGrowableArray<DXUTTextureNode *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJABQAUDXUTTextureNode@@@Z ENDP ; CGrowableArray<DXUTTextureNode *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJH@Z PROC ; CGrowableArray<DXUTTextureNode *>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTTextureNode@@@@IAEJH@Z ; CGrowableArray<DXUTTextureNode *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTTextureNode *>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ PROC	; CGrowableArray<DXUTTextureNode *>::~CGrowableArray<DXUTTextureNode *>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEXXZ ; CGrowableArray<DXUTTextureNode *>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ ENDP	; CGrowableArray<DXUTTextureNode *>::~CGrowableArray<DXUTTextureNode *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ PROC	; CGrowableArray<DXUTTextureNode *>::CGrowableArray<DXUTTextureNode *>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ ENDP	; CGrowableArray<DXUTTextureNode *>::CGrowableArray<DXUTTextureNode *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetD3DDevice@CDXUTDialogResourceManager@@QAEPAUIDirect3DDevice9@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetD3DDevice@CDXUTDialogResourceManager@@QAEPAUIDirect3DDevice9@@XZ PROC ; CDXUTDialogResourceManager::GetD3DDevice, COMDAT
; _this$ = ecx

; 330  :     IDirect3DDevice9* GetD3DDevice()                { return m_pd3dDevice; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetD3DDevice@CDXUTDialogResourceManager@@QAEPAUIDirect3DDevice9@@XZ ENDP ; CDXUTDialogResourceManager::GetD3DDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetTextureNode@CDXUTDialogResourceManager@@QAEPAUDXUTTextureNode@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iIndex$ = 8						; size = 4
?GetTextureNode@CDXUTDialogResourceManager@@QAEPAUDXUTTextureNode@@H@Z PROC ; CDXUTDialogResourceManager::GetTextureNode, COMDAT
; _this$ = ecx

; 329  :     DXUTTextureNode*  GetTextureNode( int iIndex )  { return m_TextureCache.GetAt( iIndex ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _iIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z ; CGrowableArray<DXUTTextureNode *>::GetAt
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTextureNode@CDXUTDialogResourceManager@@QAEPAUDXUTTextureNode@@H@Z ENDP ; CDXUTDialogResourceManager::GetTextureNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iIndex$ = 8						; size = 4
?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z PROC ; CDXUTDialogResourceManager::GetFontNode, COMDAT
; _this$ = ecx

; 328  :     DXUTFontNode*     GetFontNode( int iIndex )     { return m_FontCache.GetAt( iIndex ); };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _iIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ; CGrowableArray<DXUTFontNode *>::GetAt
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z ENDP ; CDXUTDialogResourceManager::GetFontNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddTexture@CDXUTDialogResourceManager@@QAEHPBD@Z
_TEXT	SEGMENT
tv82 = -280						; size = 4
$T1 = -272						; size = 4
$T2 = -260						; size = 4
_iTexture$ = -56					; size = 4
_pNewTextureNode$ = -44					; size = 4
_pTextureNode$3 = -32					; size = 4
_i$4 = -20						; size = 4
_this$ = -8						; size = 4
_strFilename$ = 8					; size = 4
?AddTexture@CDXUTDialogResourceManager@@QAEHPBD@Z PROC	; CDXUTDialogResourceManager::AddTexture, COMDAT
; _this$ = ecx

; 574  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 575  :     // See if this texture already exists
; 576  :     for( int i=0; i < m_TextureCache.GetSize(); i++ )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN6@AddTexture
$LN5@AddTexture:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN6@AddTexture:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ ; CGrowableArray<DXUTTextureNode *>::GetSize
	cmp	DWORD PTR _i$4[ebp], eax
	jge	SHORT $LN4@AddTexture

; 577  :     {
; 578  :         DXUTTextureNode* pTextureNode = m_TextureCache.GetAt(i);

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z ; CGrowableArray<DXUTTextureNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pTextureNode$3[ebp], ecx

; 579  :         if( 0 == _strnicmp(pTextureNode->strFilename, strFilename, MAX_PATH-1 ) )

	push	259					; 00000103H
	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTextureNode$3[ebp]
	push	ecx
	call	__strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@AddTexture

; 580  :         {
; 581  :             return i;

	mov	eax, DWORD PTR _i$4[ebp]
	jmp	$LN7@AddTexture
$LN3@AddTexture:

; 582  :         }
; 583  :     }

	jmp	SHORT $LN5@AddTexture
$LN4@AddTexture:

; 584  : 
; 585  :     // Add a new texture and try to create it
; 586  :     DXUTTextureNode* pNewTextureNode = new DXUTTextureNode();

	mov	DWORD PTR $T1[ebp], 272			; 00000110H
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN9@AddTexture
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN10@AddTexture
$LN9@AddTexture:
	mov	DWORD PTR tv82[ebp], 0
$LN10@AddTexture:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _pNewTextureNode$[ebp], ecx

; 587  :     if( pNewTextureNode == NULL )

	cmp	DWORD PTR _pNewTextureNode$[ebp], 0
	jne	SHORT $LN2@AddTexture

; 588  :         return -1;

	or	eax, -1
	jmp	SHORT $LN7@AddTexture
$LN2@AddTexture:

; 589  : 
; 590  :     ZeroMemory( pNewTextureNode, sizeof(DXUTTextureNode) );

	push	272					; 00000110H
	push	0
	mov	eax, DWORD PTR _pNewTextureNode$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 591  :     StringCchCopy( pNewTextureNode->strFilename, MAX_PATH, strFilename );

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	push	260					; 00000104H
	mov	ecx, DWORD PTR _pNewTextureNode$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 592  :     m_TextureCache.Add( pNewTextureNode );

	lea	eax, DWORD PTR _pNewTextureNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Add@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEJABQAUDXUTTextureNode@@@Z ; CGrowableArray<DXUTTextureNode *>::Add

; 593  :     
; 594  :     int iTexture = m_TextureCache.GetSize()-1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ ; CGrowableArray<DXUTTextureNode *>::GetSize
	sub	eax, 1
	mov	DWORD PTR _iTexture$[ebp], eax

; 595  : 
; 596  :     // If a device is available, try to create immediately
; 597  :     if( m_pd3dDevice )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@AddTexture

; 598  :         CreateTexture( iTexture );

	mov	eax, DWORD PTR _iTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z ; CDXUTDialogResourceManager::CreateTexture
$LN1@AddTexture:

; 599  : 
; 600  :     return iTexture;

	mov	eax, DWORD PTR _iTexture$[ebp]
$LN7@AddTexture:

; 601  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@AddTexture
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN13@AddTexture:
	DD	1
	DD	$LN12@AddTexture
$LN12@AddTexture:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN11@AddTexture
$LN11@AddTexture:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?AddTexture@CDXUTDialogResourceManager@@QAEHPBD@Z ENDP	; CDXUTDialogResourceManager::AddTexture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddFont@CDXUTDialogResourceManager@@QAEHPBDJJ@Z
_TEXT	SEGMENT
tv86 = -280						; size = 4
$T1 = -272						; size = 4
$T2 = -260						; size = 4
_iFont$ = -56						; size = 4
_pNewFontNode$ = -44					; size = 4
_pFontNode$3 = -32					; size = 4
_i$4 = -20						; size = 4
_this$ = -8						; size = 4
_strFaceName$ = 8					; size = 4
_height$ = 12						; size = 4
_weight$ = 16						; size = 4
?AddFont@CDXUTDialogResourceManager@@QAEHPBDJJ@Z PROC	; CDXUTDialogResourceManager::AddFont, COMDAT
; _this$ = ecx

; 506  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 507  :     // See if this font already exists
; 508  :     for( int i=0; i < m_FontCache.GetSize(); i++ )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN6@AddFont
$LN5@AddFont:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN6@AddFont:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ; CGrowableArray<DXUTFontNode *>::GetSize
	cmp	DWORD PTR _i$4[ebp], eax
	jge	SHORT $LN4@AddFont

; 509  :     {
; 510  :         DXUTFontNode* pFontNode = m_FontCache.GetAt(i);

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ; CGrowableArray<DXUTFontNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pFontNode$3[ebp], ecx

; 511  :         if( 0 == _strnicmp( pFontNode->strFace, strFaceName, MAX_PATH-1 ) &&
; 512  :             pFontNode->nHeight == height &&
; 513  :             pFontNode->nWeight == weight )

	push	259					; 00000103H
	mov	eax, DWORD PTR _strFaceName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFontNode$3[ebp]
	push	ecx
	call	__strnicmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@AddFont
	mov	eax, DWORD PTR _pFontNode$3[ebp]
	mov	ecx, DWORD PTR [eax+264]
	cmp	ecx, DWORD PTR _height$[ebp]
	jne	SHORT $LN3@AddFont
	mov	eax, DWORD PTR _pFontNode$3[ebp]
	mov	ecx, DWORD PTR [eax+268]
	cmp	ecx, DWORD PTR _weight$[ebp]
	jne	SHORT $LN3@AddFont

; 514  :         {
; 515  :             return i;

	mov	eax, DWORD PTR _i$4[ebp]
	jmp	$LN7@AddFont
$LN3@AddFont:

; 516  :         }
; 517  :     }

	jmp	SHORT $LN5@AddFont
$LN4@AddFont:

; 518  : 
; 519  :     // Add a new font and try to create it
; 520  :     DXUTFontNode* pNewFontNode = new DXUTFontNode();

	mov	DWORD PTR $T1[ebp], 272			; 00000110H
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN9@AddFont
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN10@AddFont
$LN9@AddFont:
	mov	DWORD PTR tv86[ebp], 0
$LN10@AddFont:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _pNewFontNode$[ebp], ecx

; 521  :     if( pNewFontNode == NULL )

	cmp	DWORD PTR _pNewFontNode$[ebp], 0
	jne	SHORT $LN2@AddFont

; 522  :         return -1;

	or	eax, -1
	jmp	SHORT $LN7@AddFont
$LN2@AddFont:

; 523  : 
; 524  :     ZeroMemory( pNewFontNode, sizeof(DXUTFontNode) );

	push	272					; 00000110H
	push	0
	mov	eax, DWORD PTR _pNewFontNode$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 525  :     StringCchCopy( pNewFontNode->strFace, MAX_PATH, strFaceName );

	mov	eax, DWORD PTR _strFaceName$[ebp]
	push	eax
	push	260					; 00000104H
	mov	ecx, DWORD PTR _pNewFontNode$[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 526  :     pNewFontNode->nHeight = height;

	mov	eax, DWORD PTR _pNewFontNode$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+264], ecx

; 527  :     pNewFontNode->nWeight = weight;

	mov	eax, DWORD PTR _pNewFontNode$[ebp]
	mov	ecx, DWORD PTR _weight$[ebp]
	mov	DWORD PTR [eax+268], ecx

; 528  :     m_FontCache.Add( pNewFontNode );

	lea	eax, DWORD PTR _pNewFontNode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Add@?$CGrowableArray@PAUDXUTFontNode@@@@QAEJABQAUDXUTFontNode@@@Z ; CGrowableArray<DXUTFontNode *>::Add

; 529  :     
; 530  :     int iFont = m_FontCache.GetSize()-1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ; CGrowableArray<DXUTFontNode *>::GetSize
	sub	eax, 1
	mov	DWORD PTR _iFont$[ebp], eax

; 531  : 
; 532  :     // If a device is available, try to create immediately
; 533  :     if( m_pd3dDevice )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@AddFont

; 534  :         CreateFont( iFont );

	mov	eax, DWORD PTR _iFont$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateFontA@CDXUTDialogResourceManager@@QAEJI@Z ; CDXUTDialogResourceManager::CreateFontA
$LN1@AddFont:

; 535  : 
; 536  :     return iFont;

	mov	eax, DWORD PTR _iFont$[ebp]
$LN7@AddFont:

; 537  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@AddFont
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN13@AddFont:
	DD	1
	DD	$LN12@AddFont
$LN12@AddFont:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN11@AddFont
$LN11@AddFont:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?AddFont@CDXUTDialogResourceManager@@QAEHPBDJJ@Z ENDP	; CDXUTDialogResourceManager::AddFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?MsgProc@CDXUTDialogResourceManager@@QAE_NPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?MsgProc@CDXUTDialogResourceManager@@QAE_NPAUHWND__@@IIJ@Z PROC ; CDXUTDialogResourceManager::MsgProc, COMDAT
; _this$ = ecx

; 296  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 297  :     // Let the CDXUTIMEEditBox's static message proc handle the msg.
; 298  :     // This is because some IME messages must be handled to ensure
; 299  :     // proper functionalities and the static msg proc ensures that
; 300  :     // this happens even if no control has the input focus.
; 301  :     if( CDXUTIMEEditBox::StaticMsgProc( uMsg, wParam, lParam ) )

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	call	?StaticMsgProc@CDXUTIMEEditBox@@SA_NIIJ@Z ; CDXUTIMEEditBox::StaticMsgProc
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@MsgProc

; 302  :         return true;

	mov	al, 1
	jmp	SHORT $LN2@MsgProc
$LN1@MsgProc:

; 303  : 
; 304  :     return false;

	xor	al, al
$LN2@MsgProc:

; 305  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?MsgProc@CDXUTDialogResourceManager@@QAE_NPAUHWND__@@IIJ@Z ENDP ; CDXUTDialogResourceManager::MsgProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnDestroyDevice@CDXUTDialogResourceManager@@QAEXXZ
_TEXT	SEGMENT
_pTextureNode$1 = -44					; size = 4
_pFontNode$2 = -32					; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?OnDestroyDevice@CDXUTDialogResourceManager@@QAEXXZ PROC ; CDXUTDialogResourceManager::OnDestroyDevice, COMDAT
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 329  :     int i=0; 

	mov	DWORD PTR _i$[ebp], 0

; 330  : 
; 331  :     //m_pd3dDevice = NULL;
; 332  : 
; 333  :     // Release the resources but don't clear the cache, as these will need to be
; 334  :     // recreated if the device is recreated
; 335  :     for( i=0; i < m_FontCache.GetSize(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@OnDestroyD
$LN8@OnDestroyD:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@OnDestroyD:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ; CGrowableArray<DXUTFontNode *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@OnDestroyD

; 336  :     {
; 337  :         DXUTFontNode* pFontNode = m_FontCache.GetAt( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ; CGrowableArray<DXUTFontNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pFontNode$2[ebp], ecx

; 338  :         SAFE_RELEASE( pFontNode->pFont );

	mov	eax, DWORD PTR _pFontNode$2[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN6@OnDestroyD
	mov	eax, DWORD PTR _pFontNode$2[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR _pFontNode$2[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _pFontNode$2[ebp]
	mov	DWORD PTR [eax+260], 0
$LN6@OnDestroyD:

; 339  :     }

	jmp	SHORT $LN8@OnDestroyD
$LN7@OnDestroyD:

; 340  :     
; 341  :     for( i=0; i < m_TextureCache.GetSize(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@OnDestroyD
$LN4@OnDestroyD:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@OnDestroyD:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ ; CGrowableArray<DXUTTextureNode *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN3@OnDestroyD

; 342  :     {
; 343  :         DXUTTextureNode* pTextureNode = m_TextureCache.GetAt( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z ; CGrowableArray<DXUTTextureNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pTextureNode$1[ebp], ecx

; 344  :         SAFE_RELEASE( pTextureNode->pTexture );

	mov	eax, DWORD PTR _pTextureNode$1[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN2@OnDestroyD
	mov	eax, DWORD PTR _pTextureNode$1[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR _pTextureNode$1[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _pTextureNode$1[ebp]
	mov	DWORD PTR [eax+260], 0
$LN2@OnDestroyD:

; 345  :     }

	jmp	SHORT $LN4@OnDestroyD
$LN3@OnDestroyD:

; 346  : 
; 347  :     SAFE_RELEASE( m_pSprite );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN10@OnDestroyD
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN10@OnDestroyD:

; 348  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnDestroyDevice@CDXUTDialogResourceManager@@QAEXXZ ENDP ; CDXUTDialogResourceManager::OnDestroyDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnLostDevice@CDXUTDialogResourceManager@@QAEXXZ
_TEXT	SEGMENT
_pFontNode$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
?OnLostDevice@CDXUTDialogResourceManager@@QAEXXZ PROC	; CDXUTDialogResourceManager::OnLostDevice, COMDAT
; _this$ = ecx

; 310  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 311  :     for( int i=0; i < m_FontCache.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@OnLostDevi
$LN5@OnLostDevi:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@OnLostDevi:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ; CGrowableArray<DXUTFontNode *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN4@OnLostDevi

; 312  :     {
; 313  :         DXUTFontNode* pFontNode = m_FontCache.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ; CGrowableArray<DXUTFontNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pFontNode$1[ebp], ecx

; 314  : 
; 315  :         if( pFontNode->pFont )

	mov	eax, DWORD PTR _pFontNode$1[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN3@OnLostDevi

; 316  :             pFontNode->pFont->OnLostDevice();

	mov	eax, DWORD PTR _pFontNode$1[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR _pFontNode$1[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@OnLostDevi:

; 317  :     }

	jmp	SHORT $LN5@OnLostDevi
$LN4@OnLostDevi:

; 318  : 
; 319  :     if( m_pSprite )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@OnLostDevi

; 320  :         m_pSprite->OnLostDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@OnLostDevi:

; 321  : 
; 322  :     SAFE_RELEASE( m_pStateBlock  );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@OnLostDevi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN7@OnLostDevi:

; 323  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnLostDevice@CDXUTDialogResourceManager@@QAEXXZ ENDP	; CDXUTDialogResourceManager::OnLostDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnResetDevice@CDXUTDialogResourceManager@@QAEJXZ
_TEXT	SEGMENT
_pFontNode$1 = -44					; size = 4
_i$2 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?OnResetDevice@CDXUTDialogResourceManager@@QAEJXZ PROC	; CDXUTDialogResourceManager::OnResetDevice, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 277  : 
; 278  :     for( int i=0; i < m_FontCache.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@OnResetDev
$LN4@OnResetDev:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@OnResetDev:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ; CGrowableArray<DXUTFontNode *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN3@OnResetDev

; 279  :     {
; 280  :         DXUTFontNode* pFontNode = m_FontCache.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ; CGrowableArray<DXUTFontNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pFontNode$1[ebp], ecx

; 281  : 
; 282  :         if( pFontNode->pFont )

	mov	eax, DWORD PTR _pFontNode$1[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN2@OnResetDev

; 283  :             pFontNode->pFont->OnResetDevice();

	mov	eax, DWORD PTR _pFontNode$1[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR _pFontNode$1[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@OnResetDev:

; 284  :     }

	jmp	SHORT $LN4@OnResetDev
$LN3@OnResetDev:

; 285  : 
; 286  :     if( m_pSprite )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@OnResetDev

; 287  :         m_pSprite->OnResetDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@OnResetDev:

; 288  : 
; 289  :     m_pd3dDevice->CreateStateBlock( D3DSBT_ALL, &m_pStateBlock );

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+236]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 290  : 
; 291  :     return S_OK;

	xor	eax, eax

; 292  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnResetDevice@CDXUTDialogResourceManager@@QAEJXZ ENDP	; CDXUTDialogResourceManager::OnResetDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnCreateDevice@CDXUTDialogResourceManager@@QAEJPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_i$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
?OnCreateDevice@CDXUTDialogResourceManager@@QAEJPAUIDirect3DDevice9@@@Z PROC ; CDXUTDialogResourceManager::OnCreateDevice, COMDAT
; _this$ = ecx

; 241  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 243  :     int i=0;

	mov	DWORD PTR _i$[ebp], 0

; 244  : 
; 245  :     m_pd3dDevice = pd3dDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 246  :     
; 247  :     for( i=0; i < m_FontCache.GetSize(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@OnCreateDe
$LN8@OnCreateDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@OnCreateDe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ; CGrowableArray<DXUTFontNode *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@OnCreateDe

; 248  :     {
; 249  :         hr = CreateFont( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateFontA@CDXUTDialogResourceManager@@QAEJI@Z ; CDXUTDialogResourceManager::CreateFontA
	mov	DWORD PTR _hr$[ebp], eax

; 250  :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@OnCreateDe

; 251  :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN10@OnCreateDe
$LN6@OnCreateDe:

; 252  :     }

	jmp	SHORT $LN8@OnCreateDe
$LN7@OnCreateDe:

; 253  :     
; 254  :     for( i=0; i < m_TextureCache.GetSize(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@OnCreateDe
$LN4@OnCreateDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@OnCreateDe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ ; CGrowableArray<DXUTTextureNode *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN3@OnCreateDe

; 255  :     {
; 256  :         hr = CreateTexture( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateTexture@CDXUTDialogResourceManager@@QAEJI@Z ; CDXUTDialogResourceManager::CreateTexture
	mov	DWORD PTR _hr$[ebp], eax

; 257  :         if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@OnCreateDe

; 258  :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN10@OnCreateDe
$LN2@OnCreateDe:

; 259  :     }

	jmp	SHORT $LN4@OnCreateDe
$LN3@OnCreateDe:

; 260  : 
; 261  :     hr = D3DXCreateSprite( pd3dDevice, &m_pSprite );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	call	_D3DXCreateSprite@8
	mov	DWORD PTR _hr$[ebp], eax

; 262  :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@OnCreateDe

; 263  :         return DXUT_ERR( "D3DXCreateSprite", hr );

	push	0
	push	OFFSET ??_C@_0BB@OBNOFHEC@D3DXCreateSprite?$AA@
	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??OnCreateDevice@CDXUTDialogResourceManager@@QAEJPAUIDirect3DDevice9@@@Z@4JA
	add	ecx, 22					; 00000016H
	push	ecx
	push	OFFSET ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXUTTrace@@YGJPBDKJ0_N@Z		; DXUTTrace
	jmp	SHORT $LN10@OnCreateDe
$LN1@OnCreateDe:

; 264  : 
; 265  :     // Call CDXUTIMEEditBox's StaticOnCreateDevice()
; 266  :     // to initialize certain window-dependent data.
; 267  :     CDXUTIMEEditBox::StaticOnCreateDevice();

	call	?StaticOnCreateDevice@CDXUTIMEEditBox@@SAJXZ ; CDXUTIMEEditBox::StaticOnCreateDevice

; 268  : 
; 269  :     return S_OK;

	xor	eax, eax
$LN10@OnCreateDe:

; 270  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?OnCreateDevice@CDXUTDialogResourceManager@@QAEJPAUIDirect3DDevice9@@@Z ENDP ; CDXUTDialogResourceManager::OnCreateDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CDXUTDialogResourceManager@@QAE@XZ
_TEXT	SEGMENT
$T2 = -272						; size = 4
$T3 = -260						; size = 4
_pTextureNode$4 = -56					; size = 4
_pFontNode$5 = -44					; size = 4
_i$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTDialogResourceManager@@QAE@XZ PROC		; CDXUTDialogResourceManager::~CDXUTDialogResourceManager, COMDAT
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTDialogResourceManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 219  :     int i;
; 220  :     for( i=0; i < m_FontCache.GetSize(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@CDXUTDialo
$LN7@CDXUTDialo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@CDXUTDialo:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetSize@?$CGrowableArray@PAUDXUTFontNode@@@@QBEHXZ ; CGrowableArray<DXUTFontNode *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN6@CDXUTDialo

; 221  :     {
; 222  :         DXUTFontNode* pFontNode = m_FontCache.GetAt( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?GetAt@?$CGrowableArray@PAUDXUTFontNode@@@@QAEAAPAUDXUTFontNode@@H@Z ; CGrowableArray<DXUTFontNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pFontNode$5[ebp], ecx

; 223  :         SAFE_DELETE( pFontNode );

	cmp	DWORD PTR _pFontNode$5[ebp], 0
	je	SHORT $LN5@CDXUTDialo
	mov	eax, DWORD PTR _pFontNode$5[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pFontNode$5[ebp], 0
$LN5@CDXUTDialo:

; 224  :     }

	jmp	SHORT $LN7@CDXUTDialo
$LN6@CDXUTDialo:

; 225  :     m_FontCache.RemoveAll();   

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?RemoveAll@?$CGrowableArray@PAUDXUTFontNode@@@@QAEXXZ ; CGrowableArray<DXUTFontNode *>::RemoveAll

; 226  : 
; 227  :     for( i=0; i < m_TextureCache.GetSize(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CDXUTDialo
$LN3@CDXUTDialo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CDXUTDialo:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetSize@?$CGrowableArray@PAUDXUTTextureNode@@@@QBEHXZ ; CGrowableArray<DXUTTextureNode *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@CDXUTDialo

; 228  :     {
; 229  :         DXUTTextureNode* pTextureNode = m_TextureCache.GetAt( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetAt@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEAAPAUDXUTTextureNode@@H@Z ; CGrowableArray<DXUTTextureNode *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pTextureNode$4[ebp], ecx

; 230  :         SAFE_DELETE( pTextureNode );

	cmp	DWORD PTR _pTextureNode$4[ebp], 0
	je	SHORT $LN1@CDXUTDialo
	mov	eax, DWORD PTR _pTextureNode$4[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pTextureNode$4[ebp], 0
$LN1@CDXUTDialo:

; 231  :     }

	jmp	SHORT $LN3@CDXUTDialo
$LN2@CDXUTDialo:

; 232  :     m_TextureCache.RemoveAll();   

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?RemoveAll@?$CGrowableArray@PAUDXUTTextureNode@@@@QAEXXZ ; CGrowableArray<DXUTTextureNode *>::RemoveAll

; 233  : 
; 234  :     CUniBuffer::Uninitialize();

	call	?Uninitialize@CUniBuffer@@SAXXZ		; CUniBuffer::Uninitialize

; 235  :     CDXUTIMEEditBox::Uninitialize();

	call	?Uninitialize@CDXUTIMEEditBox@@SAXXZ	; CDXUTIMEEditBox::Uninitialize

; 236  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ ; CGrowableArray<DXUTFontNode *>::~CGrowableArray<DXUTFontNode *>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ ; CGrowableArray<DXUTTextureNode *>::~CGrowableArray<DXUTTextureNode *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDXUTDialogResourceManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ ; CGrowableArray<DXUTTextureNode *>::~CGrowableArray<DXUTTextureNode *>
__unwindfunclet$??1CDXUTDialogResourceManager@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ ; CGrowableArray<DXUTFontNode *>::~CGrowableArray<DXUTFontNode *>
__ehhandler$??1CDXUTDialogResourceManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTDialogResourceManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTDialogResourceManager@@QAE@XZ ENDP		; CDXUTDialogResourceManager::~CDXUTDialogResourceManager
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTDialogResourceManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CDXUTDialogResourceManager@@QAE@XZ PROC		; CDXUTDialogResourceManager::CDXUTDialogResourceManager, COMDAT
; _this$ = ecx

; 209  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDXUTDialogResourceManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ ; CGrowableArray<DXUTTextureNode *>::CGrowableArray<DXUTTextureNode *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$CGrowableArray@PAUDXUTFontNode@@@@QAE@XZ ; CGrowableArray<DXUTFontNode *>::CGrowableArray<DXUTFontNode *>

; 210  :     m_pd3dDevice = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 211  :     m_pStateBlock = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 212  :     m_pSprite = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 213  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDXUTDialogResourceManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CGrowableArray@PAUDXUTTextureNode@@@@QAE@XZ ; CGrowableArray<DXUTTextureNode *>::~CGrowableArray<DXUTTextureNode *>
__ehhandler$??0CDXUTDialogResourceManager@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDXUTDialogResourceManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDXUTDialogResourceManager@@QAE@XZ ENDP		; CDXUTDialogResourceManager::CDXUTDialogResourceManager
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@PAUDXUTElementHolder@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@PAUDXUTElementHolder@@@@IAEJH@Z PROC ; CGrowableArray<DXUTElementHolder *>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@PAUDXUTElementHolder@@@@IAEJH@Z ENDP ; CGrowableArray<DXUTElementHolder *>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEXXZ PROC ; CGrowableArray<DXUTElementHolder *>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJH@Z ; CGrowableArray<DXUTElementHolder *>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEXXZ ENDP ; CGrowableArray<DXUTElementHolder *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QBEHXZ PROC ; CGrowableArray<DXUTElementHolder *>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QBEHXZ ENDP ; CGrowableArray<DXUTElementHolder *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEAAPAUDXUTElementHolder@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEAAPAUDXUTElementHolder@@H@Z PROC ; CGrowableArray<DXUTElementHolder *>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEAAPAUDXUTElementHolder@@H@Z ENDP ; CGrowableArray<DXUTElementHolder *>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJABQAUDXUTElementHolder@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJABQAUDXUTElementHolder@@@Z PROC ; CGrowableArray<DXUTElementHolder *>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTElementHolder@@@@IAEJH@Z ; CGrowableArray<DXUTElementHolder *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJABQAUDXUTElementHolder@@@Z ENDP ; CGrowableArray<DXUTElementHolder *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJH@Z PROC ; CGrowableArray<DXUTElementHolder *>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAUDXUTElementHolder@@@@IAEJH@Z ; CGrowableArray<DXUTElementHolder *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJH@Z ENDP ; CGrowableArray<DXUTElementHolder *>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ PROC	; CGrowableArray<DXUTElementHolder *>::~CGrowableArray<DXUTElementHolder *>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEXXZ ; CGrowableArray<DXUTElementHolder *>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ ENDP	; CGrowableArray<DXUTElementHolder *>::~CGrowableArray<DXUTElementHolder *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ PROC	; CGrowableArray<DXUTElementHolder *>::CGrowableArray<DXUTElementHolder *>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ ENDP	; CGrowableArray<DXUTElementHolder *>::CGrowableArray<DXUTElementHolder *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@PAVCDXUTControl@@@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@PAVCDXUTControl@@@@IAEJH@Z PROC ; CGrowableArray<CDXUTControl *>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@PAVCDXUTControl@@@@IAEJH@Z ENDP ; CGrowableArray<CDXUTControl *>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@PAVCDXUTControl@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@PAVCDXUTControl@@@@QAEXXZ PROC ; CGrowableArray<CDXUTControl *>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z ; CGrowableArray<CDXUTControl *>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@PAVCDXUTControl@@@@QAEXXZ ENDP ; CGrowableArray<CDXUTControl *>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Remove@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?Remove@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z PROC ; CGrowableArray<CDXUTControl *>::Remove, COMDAT
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  :     if( nIndex < 0 || 
; 872  :         nIndex >= m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@Remove
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@Remove
$LN1@Remove:

; 873  :     {
; 874  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN5@Remove
	push	874					; 0000036aH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@Remove:

; 875  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@Remove
$LN2@Remove:

; 876  :     }
; 877  : 
; 878  :     // Destruct the element to be removed
; 879  :     m_pData[nIndex].~TYPE();
; 880  : 
; 881  :     // Compact the array and decrease the size
; 882  :     MoveMemory( &m_pData[nIndex], &m_pData[nIndex+1], sizeof(TYPE) * (m_nSize - (nIndex+1)) );

	mov	eax, DWORD PTR _nIndex$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, eax
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _nIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH

; 883  :     --m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 884  : 
; 885  :     return S_OK;

	xor	eax, eax
$LN3@Remove:

; 886  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z ENDP ; CGrowableArray<CDXUTControl *>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ PROC ; CGrowableArray<CDXUTControl *>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ENDP ; CGrowableArray<CDXUTControl *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z PROC ; CGrowableArray<CDXUTControl *>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ENDP ; CGrowableArray<CDXUTControl *>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@PAVCDXUTControl@@@@QAEJABQAVCDXUTControl@@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@PAVCDXUTControl@@@@QAEJABQAVCDXUTControl@@@Z PROC ; CGrowableArray<CDXUTControl *>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAVCDXUTControl@@@@IAEJH@Z ; CGrowableArray<CDXUTControl *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@PAVCDXUTControl@@@@QAEJABQAVCDXUTControl@@@Z ENDP ; CGrowableArray<CDXUTControl *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z PROC ; CGrowableArray<CDXUTControl *>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@PAVCDXUTControl@@@@IAEJH@Z ; CGrowableArray<CDXUTControl *>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z ENDP ; CGrowableArray<CDXUTControl *>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ PROC	; CGrowableArray<CDXUTControl *>::~CGrowableArray<CDXUTControl *>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@PAVCDXUTControl@@@@QAEXXZ ; CGrowableArray<CDXUTControl *>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ ENDP	; CGrowableArray<CDXUTControl *>::~CGrowableArray<CDXUTControl *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ PROC	; CGrowableArray<CDXUTControl *>::CGrowableArray<CDXUTControl *>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ ENDP	; CGrowableArray<CDXUTControl *>::CGrowableArray<CDXUTControl *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSizeInternal@?$CGrowableArray@H@@IAEJH@Z
_TEXT	SEGMENT
tv91 = -232						; size = 4
tv85 = -232						; size = 4
_pDataNew$1 = -32					; size = 4
_nGrowBy$2 = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSizeInternal@?$CGrowableArray@H@@IAEJH@Z PROC	; CGrowableArray<int>::SetSizeInternal, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :     if( nNewMaxSize < 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jge	SHORT $LN7@SetSizeInt

; 672  :     {
; 673  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN10@SetSizeInt
	push	673					; 000002a1H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@SetSizeInt:

; 674  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN8@SetSizeInt
$LN7@SetSizeInt:

; 675  :     }
; 676  : 
; 677  :     if( nNewMaxSize == 0 )

	cmp	DWORD PTR _nNewMaxSize$[ebp], 0
	jne	SHORT $LN6@SetSizeInt

; 678  :     {
; 679  :         // Shrink to 0 size & cleanup
; 680  :         if( m_pData )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetSizeInt

; 681  :         {
; 682  :             free( m_pData );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_free
	add	esp, 4

; 683  :             m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@SetSizeInt:

; 684  :         }
; 685  : 
; 686  :         m_nMaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 687  :         m_nSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	jmp	$LN4@SetSizeInt
$LN6@SetSizeInt:

; 688  :     }
; 689  :     else if( m_pData == NULL || nNewMaxSize > m_nMaxSize )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetSizeInt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	$LN4@SetSizeInt
$LN2@SetSizeInt:

; 690  :     {
; 691  :         // Grow array
; 692  :         int nGrowBy = ( m_nMaxSize == 0 ) ? 16 : m_nMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@SetSizeInt
	mov	DWORD PTR tv85[ebp], 16			; 00000010H
	jmp	SHORT $LN12@SetSizeInt
$LN11@SetSizeInt:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv85[ebp], edx
$LN12@SetSizeInt:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nGrowBy$2[ebp], eax

; 693  :         nNewMaxSize = __max( nNewMaxSize, m_nMaxSize + nGrowBy );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	cmp	DWORD PTR _nNewMaxSize$[ebp], ecx
	jle	SHORT $LN13@SetSizeInt
	mov	edx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR tv91[ebp], edx
	jmp	SHORT $LN14@SetSizeInt
$LN13@SetSizeInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nGrowBy$2[ebp]
	mov	DWORD PTR tv91[ebp], ecx
$LN14@SetSizeInt:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _nNewMaxSize$[ebp], edx

; 694  : 
; 695  :         TYPE* pDataNew = (TYPE*) realloc( m_pData, nNewMaxSize * sizeof(TYPE) );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR _pDataNew$1[ebp], eax

; 696  :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$1[ebp], 0
	jne	SHORT $LN1@SetSizeInt

; 697  :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN8@SetSizeInt
$LN1@SetSizeInt:

; 698  : 
; 699  :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$1[ebp]
	mov	DWORD PTR [eax], ecx

; 700  :         m_nMaxSize = nNewMaxSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetSizeInt:

; 701  :     }
; 702  : 
; 703  :     return S_OK;

	xor	eax, eax
$LN8@SetSizeInt:

; 704  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSizeInternal@?$CGrowableArray@H@@IAEJH@Z ENDP	; CGrowableArray<int>::SetSizeInternal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?RemoveAll@?$CGrowableArray@H@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RemoveAll@?$CGrowableArray@H@@QAEXXZ PROC		; CGrowableArray<int>::RemoveAll, COMDAT
; _this$ = ecx

; 47   :     void    RemoveAll() { SetSize(0); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$CGrowableArray@H@@QAEJH@Z	; CGrowableArray<int>::SetSize
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CGrowableArray@H@@QAEXXZ ENDP		; CGrowableArray<int>::RemoveAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetSize@?$CGrowableArray@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CGrowableArray@H@@QBEHXZ PROC		; CGrowableArray<int>::GetSize, COMDAT
; _this$ = ecx

; 34   :     int     GetSize() const { return m_nSize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CGrowableArray@H@@QBEHXZ ENDP		; CGrowableArray<int>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?GetAt@?$CGrowableArray@H@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
?GetAt@?$CGrowableArray@H@@QAEAAHH@Z PROC		; CGrowableArray<int>::GetAt, COMDAT
; _this$ = ecx

; 33   :     TYPE&   GetAt( int nIndex ) { assert( nIndex >= 0 && nIndex < m_nSize ); return m_pData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN3@GetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN4@GetAt
$LN3@GetAt:
	push	33					; 00000021H
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1EA@JHMKKLFC@?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAm?$AA_?$AAn?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@GetAt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@?$CGrowableArray@H@@QAEAAHH@Z ENDP		; CGrowableArray<int>::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetAt@?$CGrowableArray@H@@QAEJHABH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
_value$ = 12						; size = 4
?SetAt@?$CGrowableArray@H@@QAEJHABH@Z PROC		; CGrowableArray<int>::SetAt, COMDAT
; _this$ = ecx

; 791  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 792  :     // Validate arguments
; 793  :     if( nIndex < 0 ||
; 794  :         nIndex >= m_nSize )

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $LN1@SetAt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN2@SetAt
$LN1@SetAt:

; 795  :     {
; 796  :         assert( false );

	xor	eax, eax
	jne	SHORT $LN5@SetAt
	push	796					; 0000031cH
	push	OFFSET ??_C@_1FK@FIMIDMPE@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1M@HLGKFCJM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN5@SetAt:

; 797  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@SetAt
$LN2@SetAt:

; 798  :     }
; 799  : 
; 800  :     m_pData[nIndex] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*4], eax

; 801  :     return S_OK;

	xor	eax, eax
$LN3@SetAt:

; 802  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAt@?$CGrowableArray@H@@QAEJHABH@Z ENDP		; CGrowableArray<int>::SetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?Add@?$CGrowableArray@H@@QAEJABH@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?Add@?$CGrowableArray@H@@QAEJABH@Z PROC			; CGrowableArray<int>::Add, COMDAT
; _this$ = ecx

; 740  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 741  :     HRESULT hr;
; 742  :     if( FAILED( hr = SetSizeInternal( m_nSize + 1 ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@H@@IAEJH@Z ; CGrowableArray<int>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Add

; 743  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 744  : 
; 745  :     // Construct the new element
; 746  :     ::new (&m_pData[m_nSize]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 747  : 
; 748  :     // Assign
; 749  :     m_pData[m_nSize] = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 750  :     ++m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 751  : 
; 752  :     return S_OK;

	xor	eax, eax
$LN2@Add:

; 753  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CGrowableArray@H@@QAEJABH@Z ENDP			; CGrowableArray<int>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ?SetSize@?$CGrowableArray@H@@QAEJH@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_hr$ = -44						; size = 4
_i$3 = -32						; size = 4
_nOldSize$ = -20					; size = 4
_this$ = -8						; size = 4
_nNewMaxSize$ = 8					; size = 4
?SetSize@?$CGrowableArray@H@@QAEJH@Z PROC		; CGrowableArray<int>::SetSize, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  :     int nOldSize = m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _nOldSize$[ebp], ecx

; 712  : 
; 713  :     if( nOldSize > nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jle	SHORT $LN8@SetSize

; 714  :     {
; 715  :         // Removing elements. Call dtor.
; 716  : 
; 717  :         for( int i = nNewMaxSize; i < nOldSize; ++i )

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN7@SetSize
$LN6@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN7@SetSize:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nOldSize$[ebp]
	jge	SHORT $LN8@SetSize

; 718  :             m_pData[i].~TYPE();

	jmp	SHORT $LN6@SetSize
$LN8@SetSize:

; 719  :     }
; 720  : 
; 721  :     // Adjust buffer.  Note that there's no need to check for error
; 722  :     // since if it happens, nOldSize == nNewMaxSize will be true.)
; 723  :     HRESULT hr = SetSizeInternal( nNewMaxSize );

	mov	eax, DWORD PTR _nNewMaxSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSizeInternal@?$CGrowableArray@H@@IAEJH@Z ; CGrowableArray<int>::SetSizeInternal
	mov	DWORD PTR _hr$[ebp], eax

; 724  : 
; 725  :     if( nOldSize < nNewMaxSize )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 726  :     {
; 727  :         // Adding elements. Call ctor.
; 728  : 
; 729  :         for( int i = nOldSize; i < nNewMaxSize; ++i )

	mov	eax, DWORD PTR _nOldSize$[ebp]
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetSize
$LN2@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetSize:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _nNewMaxSize$[ebp]
	jge	SHORT $LN4@SetSize

; 730  :             ::new (&m_pData[i]) TYPE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	jmp	SHORT $LN2@SetSize
$LN4@SetSize:

; 731  :     }
; 732  : 
; 733  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 734  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CGrowableArray@H@@QAEJH@Z ENDP		; CGrowableArray<int>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??1?$CGrowableArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CGrowableArray@H@@QAE@XZ PROC			; CGrowableArray<int>::~CGrowableArray<int>, COMDAT
; _this$ = ecx

; 22   :     ~CGrowableArray() { RemoveAll(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CGrowableArray@H@@QAEXXZ	; CGrowableArray<int>::RemoveAll
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CGrowableArray@H@@QAE@XZ ENDP			; CGrowableArray<int>::~CGrowableArray<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutmisc.h
;	COMDAT ??0?$CGrowableArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CGrowableArray@H@@QAE@XZ PROC			; CGrowableArray<int>::CGrowableArray<int>, COMDAT
; _this$ = ecx

; 20   :     CGrowableArray()  { m_pData = NULL; m_nSize = 0; m_nMaxSize = 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CGrowableArray@H@@QAE@XZ ENDP			; CGrowableArray<int>::CGrowableArray<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnCycleFocus@CDXUTDialog@@AAE_N_N@Z
_TEXT	SEGMENT
tv75 = -232						; size = 4
_i$1 = -32						; size = 4
_pControl$ = -20					; size = 4
_this$ = -8						; size = 4
_bForward$ = 8						; size = 1
?OnCycleFocus@CDXUTDialog@@AAE_N_N@Z PROC		; CDXUTDialog::OnCycleFocus, COMDAT
; _this$ = ecx

; 1716 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1717 :     // This should only be handled by the dialog which owns the focused control, and 
; 1718 :     // only if a control currently has focus
; 1719 :     if( s_pControlFocus == NULL || s_pControlFocus->m_pDialog != this )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN6@OnCycleFoc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN7@OnCycleFoc
$LN6@OnCycleFoc:

; 1720 :         return false;

	xor	al, al
	jmp	$LN8@OnCycleFoc
$LN7@OnCycleFoc:

; 1721 : 
; 1722 :     CDXUTControl* pControl = s_pControlFocus;

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	DWORD PTR _pControl$[ebp], eax

; 1723 :     for( int i=0; i < 0xffff; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@OnCycleFoc
$LN4@OnCycleFoc:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@OnCycleFoc:
	cmp	DWORD PTR _i$1[ebp], 65535		; 0000ffffH
	jge	$LN3@OnCycleFoc

; 1724 :     {
; 1725 :         pControl = (bForward) ? GetNextControl( pControl ) : GetPrevControl( pControl );

	movzx	eax, BYTE PTR _bForward$[ebp]
	test	eax, eax
	je	SHORT $LN10@OnCycleFoc
	mov	ecx, DWORD PTR _pControl$[ebp]
	push	ecx
	call	?GetNextControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z ; CDXUTDialog::GetNextControl
	add	esp, 4
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN11@OnCycleFoc
$LN10@OnCycleFoc:
	mov	edx, DWORD PTR _pControl$[ebp]
	push	edx
	call	?GetPrevControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z ; CDXUTDialog::GetPrevControl
	add	esp, 4
	mov	DWORD PTR tv75[ebp], eax
$LN11@OnCycleFoc:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR _pControl$[ebp], eax

; 1726 :         
; 1727 :         // If we've gone in a full circle then focus doesn't change
; 1728 :         if( pControl == s_pControlFocus )

	mov	eax, DWORD PTR _pControl$[ebp]
	cmp	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	jne	SHORT $LN2@OnCycleFoc

; 1729 :             return true;

	mov	al, 1
	jmp	$LN8@OnCycleFoc
$LN2@OnCycleFoc:

; 1730 : 
; 1731 :         // If the dialog accepts keybord input and the control can have focus then
; 1732 :         // move focus
; 1733 :         if( pControl->m_pDialog->m_bKeyboardInput && pControl->CanHaveFocus() )

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movzx	edx, BYTE PTR [ecx+1]
	test	edx, edx
	je	SHORT $LN1@OnCycleFoc
	mov	eax, DWORD PTR _pControl$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@OnCycleFoc

; 1734 :         {
; 1735 :             s_pControlFocus->OnFocusOut();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1736 :             s_pControlFocus = pControl;

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, eax ; CDXUTDialog::s_pControlFocus

; 1737 :             s_pControlFocus->OnFocusIn();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1738 :             return true;

	mov	al, 1
	jmp	SHORT $LN8@OnCycleFoc
$LN1@OnCycleFoc:

; 1739 :         }
; 1740 :     }

	jmp	$LN4@OnCycleFoc
$LN3@OnCycleFoc:

; 1741 : 
; 1742 :     // If we reached this point, the chain of dialogs didn't form a complete loop
; 1743 :     DXTRACE_ERR( "CDXUTDialog: Multiple dialogs are improperly chained together", E_FAIL );

	push	0
	push	OFFSET ??_C@_0DO@CFELJLCL@CDXUTDialog?3?5Multiple?5dialogs?5ar@
	push	-2147467259				; 80004005H
	mov	eax, DWORD PTR ?__LINE__Var@?1??OnCycleFocus@CDXUTDialog@@AAE_N_N@Z@4JA
	add	eax, 27					; 0000001bH
	push	eax
	push	OFFSET ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper

; 1744 :     return false;

	xor	al, al
$LN8@OnCycleFoc:

; 1745 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?OnCycleFocus@CDXUTDialog@@AAE_N_N@Z ENDP		; CDXUTDialog::OnCycleFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnMouseUp@CDXUTDialog@@AAEXUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pt$ = 8						; size = 8
?OnMouseUp@CDXUTDialog@@AAEXUtagPOINT@@@Z PROC		; CDXUTDialog::OnMouseUp, COMDAT
; _this$ = ecx

; 936  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 937  :     s_pControlPressed = NULL;

	mov	DWORD PTR ?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlPressed

; 938  :     m_pControlMouseOver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+15], 0

; 939  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?OnMouseUp@CDXUTDialog@@AAEXUtagPOINT@@@Z ENDP		; CDXUTDialog::OnMouseUp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnMouseMove@CDXUTDialog@@AAEXUtagPOINT@@@Z
_TEXT	SEGMENT
_pControl$ = -20					; size = 4
_this$ = -8						; size = 4
_pt$ = 8						; size = 8
?OnMouseMove@CDXUTDialog@@AAEXUtagPOINT@@@Z PROC	; CDXUTDialog::OnMouseMove, COMDAT
; _this$ = ecx

; 944  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 945  :     // Figure out which control the mouse is over now
; 946  :     CDXUTControl* pControl = GetControlAtPoint( pt );

	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetControlAtPoint@CDXUTDialog@@QAEPAVCDXUTControl@@UtagPOINT@@@Z ; CDXUTDialog::GetControlAtPoint
	mov	DWORD PTR _pControl$[ebp], eax

; 947  : 
; 948  :     // If the mouse is still over the same control, nothing needs to be done
; 949  :     if( pControl == m_pControlMouseOver )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pControl$[ebp]
	cmp	ecx, DWORD PTR [eax+15]
	jne	SHORT $LN3@OnMouseMov

; 950  :         return;

	jmp	SHORT $LN4@OnMouseMov
$LN3@OnMouseMov:

; 951  : 
; 952  :     // Handle mouse leaving the old control
; 953  :     if( m_pControlMouseOver )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+15], 0
	je	SHORT $LN2@OnMouseMov

; 954  :         m_pControlMouseOver->OnMouseLeave();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+15]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+15]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@OnMouseMov:

; 955  : 
; 956  :     // Handle mouse entering the new control
; 957  :     m_pControlMouseOver = pControl;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pControl$[ebp]
	mov	DWORD PTR [eax+15], ecx

; 958  :     if( pControl != NULL )

	cmp	DWORD PTR _pControl$[ebp], 0
	je	SHORT $LN4@OnMouseMov

; 959  :         m_pControlMouseOver->OnMouseEnter();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+15]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+15]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@OnMouseMov:

; 960  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?OnMouseMove@CDXUTDialog@@AAEXUtagPOINT@@@Z ENDP	; CDXUTDialog::OnMouseMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?InitDefaultElements@CDXUTDialog@@AAEXXZ
_TEXT	SEGMENT
_rcTexture$ = -152					; size = 16
_Element$ = -128					; size = 108
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?InitDefaultElements@CDXUTDialog@@AAEXXZ PROC		; CDXUTDialog::InitDefaultElements, COMDAT
; _this$ = ecx

; 1813 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1814 :     //SetTexture( 0, "DXUTControls.dds" );
; 1815 : 	SetTexture( 0, "dxutgui.png" );

	push	OFFSET ??_C@_0M@GAAOCDFL@dxutgui?4png?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTexture@CDXUTDialog@@QAEJIPBD@Z	; CDXUTDialog::SetTexture

; 1816 : 
; 1817 :     SetFont( 0, "Arial", 16, FW_BOLD );

	push	700					; 000002bcH
	push	16					; 00000010H
	push	OFFSET ??_C@_05MPFIAJAP@Arial?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFont@CDXUTDialog@@QAEJIPBDJJ@Z	; CDXUTDialog::SetFont

; 1818 :     
; 1819 :     CDXUTElement Element;

	lea	ecx, DWORD PTR _Element$[ebp]
	call	??0CDXUTElement@@QAE@XZ

; 1820 :     RECT rcTexture;
; 1821 : 
; 1822 :     //-------------------------------------
; 1823 :     // Element for the caption
; 1824 :     //-------------------------------------
; 1825 :     m_CapElement.SetFont( 0 );

	push	5
	push	-1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 374				; 00000176H
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1826 :     SetRect( &rcTexture, 17, 269, 241, 287 );

	mov	esi, esp
	push	287					; 0000011fH
	push	241					; 000000f1H
	push	269					; 0000010dH
	push	17					; 00000011H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1827 :     m_CapElement.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 374				; 00000176H
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1828 :     m_CapElement.TextureColor.States[ DXUT_STATE_NORMAL ] = D3DCOLOR_ARGB(255, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+402], -1

; 1829 :     m_CapElement.FontColor.States[ DXUT_STATE_NORMAL ] = D3DCOLOR_ARGB(255, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+442], -1

; 1830 :     m_CapElement.SetFont( 0, D3DCOLOR_ARGB(255, 255, 255, 255), DT_LEFT | DT_VCENTER );

	push	4
	push	-1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 374				; 00000176H
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1831 :     // Pre-blend as we don't need to transition the state
; 1832 :     m_CapElement.TextureColor.Blend( DXUT_STATE_NORMAL, 10.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 402				; 00000192H
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 1833 :     m_CapElement.FontColor.Blend( DXUT_STATE_NORMAL, 10.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 442				; 000001baH
	call	?Blend@DXUTBlendColor@@QAEXIMM@Z	; DXUTBlendColor::Blend

; 1834 : 
; 1835 :     //-------------------------------------
; 1836 :     // CDXUTStatic
; 1837 :     //-------------------------------------
; 1838 :     Element.SetFont( 0 );

	push	5
	push	-1
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1839 :     Element.FontColor.States[ DXUT_STATE_DISABLED ] = D3DCOLOR_ARGB( 200, 200, 200, 200 );

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _Element$[ebp+eax+68], -926365496 ; c8c8c8c8H

; 1840 : 
; 1841 :     // Assign the Element
; 1842 :     SetDefaultElement( DXUT_CONTROL_STATIC, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1843 :     
; 1844 : 
; 1845 :     //-------------------------------------
; 1846 :     // CDXUTButton - Button
; 1847 :     //-------------------------------------
; 1848 :     SetRect( &rcTexture, 0, 0, 136, 54 );

	mov	esi, esp
	push	54					; 00000036H
	push	136					; 00000088H
	push	0
	push	0
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1849 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1850 :     Element.SetFont( 0 );

	push	5
	push	-1
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1851 :     Element.TextureColor.States[ DXUT_STATE_NORMAL ] = D3DCOLOR_ARGB(150, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _Element$[ebp+ecx+28], -1761607681 ; 96ffffffH

; 1852 :     Element.TextureColor.States[ DXUT_STATE_PRESSED ] = D3DCOLOR_ARGB(200, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 5
	mov	DWORD PTR _Element$[ebp+ecx+28], -922746881 ; c8ffffffH

; 1853 :     Element.FontColor.States[ DXUT_STATE_MOUSEOVER ] = D3DCOLOR_ARGB(255, 0, 0, 0);

	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR _Element$[ebp+eax+68], -16777216 ; ff000000H

; 1854 :     
; 1855 :     // Assign the Element
; 1856 :     SetDefaultElement( DXUT_CONTROL_BUTTON, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1857 :     
; 1858 : 
; 1859 :     //-------------------------------------
; 1860 :     // CDXUTButton - Fill layer
; 1861 :     //-------------------------------------
; 1862 :     SetRect( &rcTexture, 136, 0, 272, 54 );

	mov	esi, esp
	push	54					; 00000036H
	push	272					; 00000110H
	push	0
	push	136					; 00000088H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1863 :     Element.SetTexture( 0, &rcTexture, D3DCOLOR_ARGB(0, 255, 255, 255) );

	push	16777215				; 00ffffffH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1864 :     Element.TextureColor.States[ DXUT_STATE_MOUSEOVER ] = D3DCOLOR_ARGB(160, 255, 255, 255);

	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR _Element$[ebp+eax+28], -1593835521 ; a0ffffffH

; 1865 :     Element.TextureColor.States[ DXUT_STATE_PRESSED ] = D3DCOLOR_ARGB(60, 0, 0, 0);

	mov	eax, 4
	imul	ecx, eax, 5
	mov	DWORD PTR _Element$[ebp+ecx+28], 1006632960 ; 3c000000H

; 1866 :     Element.TextureColor.States[ DXUT_STATE_FOCUS ] = D3DCOLOR_ARGB(30, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _Element$[ebp+ecx+28], 520093695 ; 1effffffH

; 1867 :     
; 1868 :     
; 1869 :     // Assign the Element
; 1870 :     SetDefaultElement( DXUT_CONTROL_BUTTON, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1871 : 
; 1872 : 
; 1873 :     //-------------------------------------
; 1874 :     // CDXUTCheckBox - Box
; 1875 :     //-------------------------------------
; 1876 :     SetRect( &rcTexture, 0, 54, 27, 81 );

	mov	esi, esp
	push	81					; 00000051H
	push	27					; 0000001bH
	push	54					; 00000036H
	push	0
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1877 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1878 :     Element.SetFont( 0, D3DCOLOR_ARGB(255, 255, 255, 255), DT_LEFT | DT_VCENTER );

	push	4
	push	-1
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1879 :     Element.FontColor.States[ DXUT_STATE_DISABLED ] = D3DCOLOR_ARGB( 200, 200, 200, 200 );

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _Element$[ebp+eax+68], -926365496 ; c8c8c8c8H

; 1880 :     Element.TextureColor.States[ DXUT_STATE_NORMAL ] = D3DCOLOR_ARGB(150, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _Element$[ebp+ecx+28], -1761607681 ; 96ffffffH

; 1881 :     Element.TextureColor.States[ DXUT_STATE_FOCUS ] = D3DCOLOR_ARGB(200, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _Element$[ebp+ecx+28], -922746881 ; c8ffffffH

; 1882 :     Element.TextureColor.States[ DXUT_STATE_PRESSED ] = D3DCOLOR_ARGB(255, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 5
	mov	DWORD PTR _Element$[ebp+ecx+28], -1

; 1883 :     
; 1884 :     // Assign the Element
; 1885 :     SetDefaultElement( DXUT_CONTROL_CHECKBOX, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1886 : 
; 1887 : 
; 1888 :     //-------------------------------------
; 1889 :     // CDXUTCheckBox - Check
; 1890 :     //-------------------------------------
; 1891 :     SetRect( &rcTexture, 27, 54, 54, 81 );

	mov	esi, esp
	push	81					; 00000051H
	push	54					; 00000036H
	push	54					; 00000036H
	push	27					; 0000001bH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1892 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1893 :     
; 1894 :     // Assign the Element
; 1895 :     SetDefaultElement( DXUT_CONTROL_CHECKBOX, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1896 : 
; 1897 : 
; 1898 :     //-------------------------------------
; 1899 :     // CDXUTRadioButton - Box
; 1900 :     //-------------------------------------
; 1901 :     SetRect( &rcTexture, 54, 54, 81, 81 );

	mov	esi, esp
	push	81					; 00000051H
	push	81					; 00000051H
	push	54					; 00000036H
	push	54					; 00000036H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1902 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1903 :     Element.SetFont( 0, D3DCOLOR_ARGB(255, 255, 255, 255), DT_LEFT | DT_VCENTER );

	push	4
	push	-1
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1904 :     Element.FontColor.States[ DXUT_STATE_DISABLED ] = D3DCOLOR_ARGB( 200, 200, 200, 200 );

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _Element$[ebp+eax+68], -926365496 ; c8c8c8c8H

; 1905 :     Element.TextureColor.States[ DXUT_STATE_NORMAL ] = D3DCOLOR_ARGB(150, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _Element$[ebp+ecx+28], -1761607681 ; 96ffffffH

; 1906 :     Element.TextureColor.States[ DXUT_STATE_FOCUS ] = D3DCOLOR_ARGB(200, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _Element$[ebp+ecx+28], -922746881 ; c8ffffffH

; 1907 :     Element.TextureColor.States[ DXUT_STATE_PRESSED ] = D3DCOLOR_ARGB(255, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 5
	mov	DWORD PTR _Element$[ebp+ecx+28], -1

; 1908 :     
; 1909 :     // Assign the Element
; 1910 :     SetDefaultElement( DXUT_CONTROL_RADIOBUTTON, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1911 : 
; 1912 : 
; 1913 :     //-------------------------------------
; 1914 :     // CDXUTRadioButton - Check
; 1915 :     //-------------------------------------
; 1916 :     SetRect( &rcTexture, 81, 54, 108, 81 );

	mov	esi, esp
	push	81					; 00000051H
	push	108					; 0000006cH
	push	54					; 00000036H
	push	81					; 00000051H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1917 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1918 :     
; 1919 :     // Assign the Element
; 1920 :     SetDefaultElement( DXUT_CONTROL_RADIOBUTTON, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1921 : 
; 1922 : 
; 1923 :     //-------------------------------------
; 1924 :     // CDXUTComboBox - Main
; 1925 :     //-------------------------------------
; 1926 :     SetRect( &rcTexture, 7, 81, 247, 123 );

	mov	esi, esp
	push	123					; 0000007bH
	push	247					; 000000f7H
	push	81					; 00000051H
	push	7
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1927 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1928 :     Element.SetFont( 0 );

	push	5
	push	-1
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1929 :     Element.TextureColor.States[ DXUT_STATE_NORMAL ] = D3DCOLOR_ARGB(150, 200, 200, 200);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _Element$[ebp+ecx+28], -1765226296 ; 96c8c8c8H

; 1930 :     Element.TextureColor.States[ DXUT_STATE_FOCUS ] = D3DCOLOR_ARGB(170, 230, 230, 230);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _Element$[ebp+ecx+28], -1427708186 ; aae6e6e6H

; 1931 :     Element.TextureColor.States[ DXUT_STATE_DISABLED ] = D3DCOLOR_ARGB(70, 200, 200, 200);

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _Element$[ebp+eax+28], 1187563720 ; 46c8c8c8H

; 1932 :     Element.FontColor.States[ DXUT_STATE_MOUSEOVER ] = D3DCOLOR_ARGB(255, 0, 0, 0);

	mov	eax, 4
	shl	eax, 2
	mov	DWORD PTR _Element$[ebp+eax+68], -16777216 ; ff000000H

; 1933 :     Element.FontColor.States[ DXUT_STATE_PRESSED ] = D3DCOLOR_ARGB(255, 0, 0, 0);

	mov	eax, 4
	imul	ecx, eax, 5
	mov	DWORD PTR _Element$[ebp+ecx+68], -16777216 ; ff000000H

; 1934 :     Element.FontColor.States[ DXUT_STATE_DISABLED ] = D3DCOLOR_ARGB(200, 200, 200, 200);

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _Element$[ebp+eax+68], -926365496 ; c8c8c8c8H

; 1935 :     
; 1936 :     
; 1937 :     // Assign the Element
; 1938 :     SetDefaultElement( DXUT_CONTROL_COMBOBOX, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1939 : 
; 1940 : 
; 1941 :     //-------------------------------------
; 1942 :     // CDXUTComboBox - Button
; 1943 :     //-------------------------------------
; 1944 :     SetRect( &rcTexture, 272, 0, 325, 49 );

	mov	esi, esp
	push	49					; 00000031H
	push	325					; 00000145H
	push	0
	push	272					; 00000110H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1945 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1946 :     Element.TextureColor.States[ DXUT_STATE_NORMAL ] = D3DCOLOR_ARGB(150, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _Element$[ebp+ecx+28], -1761607681 ; 96ffffffH

; 1947 :     Element.TextureColor.States[ DXUT_STATE_PRESSED ] = D3DCOLOR_ARGB(255, 150, 150, 150);

	mov	eax, 4
	imul	ecx, eax, 5
	mov	DWORD PTR _Element$[ebp+ecx+28], -6908266 ; ff969696H

; 1948 :     Element.TextureColor.States[ DXUT_STATE_FOCUS ] = D3DCOLOR_ARGB(200, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _Element$[ebp+ecx+28], -922746881 ; c8ffffffH

; 1949 :     Element.TextureColor.States[ DXUT_STATE_DISABLED ] = D3DCOLOR_ARGB(70, 255, 255, 255);

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _Element$[ebp+eax+28], 1191182335 ; 46ffffffH

; 1950 :     
; 1951 :     // Assign the Element
; 1952 :     SetDefaultElement( DXUT_CONTROL_COMBOBOX, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1953 : 
; 1954 : 
; 1955 :     //-------------------------------------
; 1956 :     // CDXUTComboBox - Dropdown
; 1957 :     //-------------------------------------
; 1958 :     SetRect( &rcTexture, 7, 123, 241, 265 );

	mov	esi, esp
	push	265					; 00000109H
	push	241					; 000000f1H
	push	123					; 0000007bH
	push	7
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1959 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1960 :     Element.SetFont( 0, D3DCOLOR_ARGB(255, 0, 0, 0), DT_LEFT | DT_TOP );

	push	0
	push	-16777216				; ff000000H
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1961 :     
; 1962 :     // Assign the Element
; 1963 :     SetDefaultElement( DXUT_CONTROL_COMBOBOX, 2, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	2
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1964 : 
; 1965 : 
; 1966 :     //-------------------------------------
; 1967 :     // CDXUTComboBox - Selection
; 1968 :     //-------------------------------------
; 1969 :     SetRect( &rcTexture, 7, 266, 241, 289 );

	mov	esi, esp
	push	289					; 00000121H
	push	241					; 000000f1H
	push	266					; 0000010aH
	push	7
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1970 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1971 :     Element.SetFont( 0, D3DCOLOR_ARGB(255, 255, 255, 255), DT_LEFT | DT_TOP );

	push	0
	push	-1
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 1972 :     
; 1973 :     // Assign the Element
; 1974 :     SetDefaultElement( DXUT_CONTROL_COMBOBOX, 3, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	3
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1975 : 
; 1976 : 
; 1977 :     //-------------------------------------
; 1978 :     // CDXUTSlider - Track
; 1979 :     //-------------------------------------
; 1980 :     SetRect( &rcTexture, 1, 290, 280, 331 );

	mov	esi, esp
	push	331					; 0000014bH
	push	280					; 00000118H
	push	290					; 00000122H
	push	1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1981 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1982 :     Element.TextureColor.States[ DXUT_STATE_NORMAL ] = D3DCOLOR_ARGB(150, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _Element$[ebp+ecx+28], -1761607681 ; 96ffffffH

; 1983 :     Element.TextureColor.States[ DXUT_STATE_FOCUS ] = D3DCOLOR_ARGB(200, 255, 255, 255);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _Element$[ebp+ecx+28], -922746881 ; c8ffffffH

; 1984 :     Element.TextureColor.States[ DXUT_STATE_DISABLED ] = D3DCOLOR_ARGB(70, 255, 255, 255);

	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _Element$[ebp+eax+28], 1191182335 ; 46ffffffH

; 1985 :     
; 1986 :     // Assign the Element
; 1987 :     SetDefaultElement( DXUT_CONTROL_SLIDER, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1988 : 
; 1989 :     //-------------------------------------
; 1990 :     // CDXUTSlider - Button
; 1991 :     //-------------------------------------
; 1992 :     SetRect( &rcTexture, 248, 55, 289, 96 );

	mov	esi, esp
	push	96					; 00000060H
	push	289					; 00000121H
	push	55					; 00000037H
	push	248					; 000000f8H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1993 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 1994 : 
; 1995 :     // Assign the Element
; 1996 :     SetDefaultElement( DXUT_CONTROL_SLIDER, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 1997 : 
; 1998 :     //-------------------------------------
; 1999 :     // CDXUTScrollBar - Track
; 2000 :     //-------------------------------------
; 2001 :     SetRect( &rcTexture, 243, 144, 265, 155 );

	mov	esi, esp
	push	155					; 0000009bH
	push	265					; 00000109H
	push	144					; 00000090H
	push	243					; 000000f3H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2002 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2003 :     Element.TextureColor.Init(D3DCOLOR_ARGB(170, 20, 20, 20),D3DCOLOR_ARGB(170, 20, 20, 20));

	push	0
	push	-1441524716				; aa141414H
	push	-1441524716				; aa141414H
	lea	ecx, DWORD PTR _Element$[ebp+28]
	call	?Init@DXUTBlendColor@@QAEXKKK@Z		; DXUTBlendColor::Init

; 2004 : 
; 2005 :     // Assign the Element
; 2006 :     SetDefaultElement( DXUT_CONTROL_SCROLLBAR, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2007 : 
; 2008 :     //-------------------------------------
; 2009 :     // CDXUTScrollBar - Up Arrow
; 2010 :     //-------------------------------------
; 2011 :     SetRect( &rcTexture, 243, 124, 265, 144 );

	mov	esi, esp
	push	144					; 00000090H
	push	265					; 00000109H
	push	124					; 0000007cH
	push	243					; 000000f3H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2012 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2013 : 	Element.TextureColor.Init(D3DCOLOR_ARGB(0, 20, 20, 20),D3DCOLOR_ARGB(0, 20, 20, 20));

	push	0
	push	1315860					; 00141414H
	push	1315860					; 00141414H
	lea	ecx, DWORD PTR _Element$[ebp+28]
	call	?Init@DXUTBlendColor@@QAEXKKK@Z		; DXUTBlendColor::Init

; 2014 :         
; 2015 :     
; 2016 :     
; 2017 :     // Assign the Element
; 2018 :     SetDefaultElement( DXUT_CONTROL_SCROLLBAR, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2019 : 
; 2020 :     //-------------------------------------
; 2021 :     // CDXUTScrollBar - Down Arrow
; 2022 :     //-------------------------------------
; 2023 :     SetRect( &rcTexture, 243, 155, 265, 176 );

	mov	esi, esp
	push	176					; 000000b0H
	push	265					; 00000109H
	push	155					; 0000009bH
	push	243					; 000000f3H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2024 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2025 :     Element.TextureColor.Init(D3DCOLOR_ARGB(0, 20, 20, 20),D3DCOLOR_ARGB(0, 20, 20, 20));

	push	0
	push	1315860					; 00141414H
	push	1315860					; 00141414H
	lea	ecx, DWORD PTR _Element$[ebp+28]
	call	?Init@DXUTBlendColor@@QAEXKKK@Z		; DXUTBlendColor::Init

; 2026 :         
; 2027 :     
; 2028 :     // Assign the Element
; 2029 :     SetDefaultElement( DXUT_CONTROL_SCROLLBAR, 2, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	2
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2030 : 
; 2031 :     //-------------------------------------
; 2032 :     // CDXUTScrollBar - Button
; 2033 :     //-------------------------------------
; 2034 :     SetRect( &rcTexture, 266, 123, 286, 167 );

	mov	esi, esp
	push	167					; 000000a7H
	push	286					; 0000011eH
	push	123					; 0000007bH
	push	266					; 0000010aH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2035 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2036 :     Element.TextureColor.Init(D3DCOLOR_ARGB(255, 200, 200, 200),D3DCOLOR_ARGB(255, 200, 200, 200));

	push	0
	push	-3618616				; ffc8c8c8H
	push	-3618616				; ffc8c8c8H
	lea	ecx, DWORD PTR _Element$[ebp+28]
	call	?Init@DXUTBlendColor@@QAEXKKK@Z		; DXUTBlendColor::Init

; 2037 : 
; 2038 :     // Assign the Element
; 2039 :     SetDefaultElement( DXUT_CONTROL_SCROLLBAR, 3, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	3
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2040 : 
; 2041 : 
; 2042 :     //-------------------------------------
; 2043 :     // CDXUTEditBox
; 2044 :     //-------------------------------------
; 2045 :     // Element assignment:
; 2046 :     //   0 - text area
; 2047 :     //   1 - top left border
; 2048 :     //   2 - top border
; 2049 :     //   3 - top right border
; 2050 :     //   4 - left border
; 2051 :     //   5 - right border
; 2052 :     //   6 - lower left border
; 2053 :     //   7 - lower border
; 2054 :     //   8 - lower right border
; 2055 : 
; 2056 :     Element.SetFont( 0, D3DCOLOR_ARGB( 255, 0, 0, 0 ), DT_LEFT | DT_TOP );

	push	0
	push	-16777216				; ff000000H
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 2057 : 
; 2058 :     // Assign the style
; 2059 :     SetRect( &rcTexture, 14, 90, 241, 113 );

	mov	esi, esp
	push	113					; 00000071H
	push	241					; 000000f1H
	push	90					; 0000005aH
	push	14					; 0000000eH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2060 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2061 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2062 :     SetRect( &rcTexture, 8, 82, 14, 90 );

	mov	esi, esp
	push	90					; 0000005aH
	push	14					; 0000000eH
	push	82					; 00000052H
	push	8
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2063 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2064 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2065 :     SetRect( &rcTexture, 14, 82, 241, 90 );

	mov	esi, esp
	push	90					; 0000005aH
	push	241					; 000000f1H
	push	82					; 00000052H
	push	14					; 0000000eH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2066 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2067 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 2, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	2
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2068 :     SetRect( &rcTexture, 241, 82, 246, 90 );

	mov	esi, esp
	push	90					; 0000005aH
	push	246					; 000000f6H
	push	82					; 00000052H
	push	241					; 000000f1H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2069 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2070 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 3, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	3
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2071 :     SetRect( &rcTexture, 8, 90, 14, 113 );

	mov	esi, esp
	push	113					; 00000071H
	push	14					; 0000000eH
	push	90					; 0000005aH
	push	8
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2072 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2073 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 4, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	4
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2074 :     SetRect( &rcTexture, 241, 90, 246, 113 );

	mov	esi, esp
	push	113					; 00000071H
	push	246					; 000000f6H
	push	90					; 0000005aH
	push	241					; 000000f1H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2075 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2076 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 5, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	5
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2077 :     SetRect( &rcTexture, 8, 113, 14, 121 );

	mov	esi, esp
	push	121					; 00000079H
	push	14					; 0000000eH
	push	113					; 00000071H
	push	8
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2078 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2079 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 6, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	6
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2080 :     SetRect( &rcTexture, 14, 113, 241, 121 );

	mov	esi, esp
	push	121					; 00000079H
	push	241					; 000000f1H
	push	113					; 00000071H
	push	14					; 0000000eH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2081 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2082 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 7, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	7
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2083 :     SetRect( &rcTexture, 241, 113, 246, 121 );

	mov	esi, esp
	push	121					; 00000079H
	push	246					; 000000f6H
	push	113					; 00000071H
	push	241					; 000000f1H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2084 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2085 :     SetDefaultElement( DXUT_CONTROL_EDITBOX, 8, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	8
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2086 : 
; 2087 : 
; 2088 :     //-------------------------------------
; 2089 :     // CDXUTIMEEditBox
; 2090 :     //-------------------------------------
; 2091 : 
; 2092 :     Element.SetFont( 0, D3DCOLOR_ARGB( 255, 0, 0, 0 ), DT_LEFT | DT_TOP );

	push	0
	push	-16777216				; ff000000H
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 2093 : 
; 2094 :     // Assign the style
; 2095 :     SetRect( &rcTexture, 14, 90, 241, 113 );

	mov	esi, esp
	push	113					; 00000071H
	push	241					; 000000f1H
	push	90					; 0000005aH
	push	14					; 0000000eH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2096 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2097 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2098 :     SetRect( &rcTexture, 8, 82, 14, 90 );

	mov	esi, esp
	push	90					; 0000005aH
	push	14					; 0000000eH
	push	82					; 00000052H
	push	8
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2099 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2100 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2101 :     SetRect( &rcTexture, 14, 82, 241, 90 );

	mov	esi, esp
	push	90					; 0000005aH
	push	241					; 000000f1H
	push	82					; 00000052H
	push	14					; 0000000eH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2102 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2103 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 2, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	2
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2104 :     SetRect( &rcTexture, 241, 82, 246, 90 );

	mov	esi, esp
	push	90					; 0000005aH
	push	246					; 000000f6H
	push	82					; 00000052H
	push	241					; 000000f1H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2105 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2106 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 3, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	3
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2107 :     SetRect( &rcTexture, 8, 90, 14, 113 );

	mov	esi, esp
	push	113					; 00000071H
	push	14					; 0000000eH
	push	90					; 0000005aH
	push	8
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2108 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2109 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 4, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	4
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2110 :     SetRect( &rcTexture, 241, 90, 246, 113 );

	mov	esi, esp
	push	113					; 00000071H
	push	246					; 000000f6H
	push	90					; 0000005aH
	push	241					; 000000f1H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2111 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2112 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 5, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	5
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2113 :     SetRect( &rcTexture, 8, 113, 14, 121 );

	mov	esi, esp
	push	121					; 00000079H
	push	14					; 0000000eH
	push	113					; 00000071H
	push	8
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2114 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2115 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 6, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	6
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2116 :     SetRect( &rcTexture, 14, 113, 241, 121 );

	mov	esi, esp
	push	121					; 00000079H
	push	241					; 000000f1H
	push	113					; 00000071H
	push	14					; 0000000eH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2117 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2118 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 7, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	7
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2119 :     SetRect( &rcTexture, 241, 113, 246, 121 );

	mov	esi, esp
	push	121					; 00000079H
	push	246					; 000000f6H
	push	113					; 00000071H
	push	241					; 000000f1H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2120 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2121 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 8, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	8
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2122 :     // Element 9 for IME text, and indicator button
; 2123 :     SetRect( &rcTexture, 0, 0, 136, 54 );

	mov	esi, esp
	push	54					; 00000036H
	push	136					; 00000088H
	push	0
	push	0
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2124 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2125 :     Element.SetFont( 0, D3DCOLOR_ARGB( 255, 0, 0, 0 ), DT_CENTER | DT_VCENTER );

	push	5
	push	-16777216				; ff000000H
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 2126 :     SetDefaultElement( DXUT_CONTROL_IMEEDITBOX, 9, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	9
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2127 : 
; 2128 :     //-------------------------------------
; 2129 :     // CDXUTListBox - Main
; 2130 :     //-------------------------------------
; 2131 : 
; 2132 :     SetRect( &rcTexture, 13, 124, 241, 265 );

	mov	esi, esp
	push	265					; 00000109H
	push	241					; 000000f1H
	push	124					; 0000007cH
	push	13					; 0000000dH
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2133 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2134 :     Element.SetFont( 0, D3DCOLOR_ARGB(255, 0, 0, 0), DT_LEFT | DT_TOP );

	push	0
	push	-16777216				; ff000000H
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 2135 : 
; 2136 :     // Assign the Element
; 2137 :     SetDefaultElement( DXUT_CONTROL_LISTBOX, 0, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	0
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2138 : 
; 2139 :     //-------------------------------------
; 2140 :     // CDXUTListBox - Selection
; 2141 :     //-------------------------------------
; 2142 : 
; 2143 :     SetRect( &rcTexture, 17, 269, 241, 287 );

	mov	esi, esp
	push	287					; 0000011fH
	push	241					; 000000f1H
	push	269					; 0000010dH
	push	17					; 00000011H
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2144 :     Element.SetTexture( 0, &rcTexture );

	push	-1
	lea	eax, DWORD PTR _rcTexture$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ; CDXUTElement::SetTexture

; 2145 :     Element.SetFont( 0, D3DCOLOR_ARGB(255, 255, 255, 255), DT_LEFT | DT_TOP );

	push	0
	push	-1
	push	0
	lea	ecx, DWORD PTR _Element$[ebp]
	call	?SetFont@CDXUTElement@@QAEXIKK@Z	; CDXUTElement::SetFont

; 2146 : 
; 2147 :     // Assign the Element
; 2148 :     SetDefaultElement( DXUT_CONTROL_LISTBOX, 1, &Element );

	lea	eax, DWORD PTR _Element$[ebp]
	push	eax
	push	1
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ; CDXUTDialog::SetDefaultElement

; 2149 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@InitDefaul
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@InitDefaul:
	DD	2
	DD	$LN5@InitDefaul
$LN5@InitDefaul:
	DD	-128					; ffffff80H
	DD	108					; 0000006cH
	DD	$LN3@InitDefaul
	DD	-152					; ffffff68H
	DD	16					; 00000010H
	DD	$LN4@InitDefaul
$LN4@InitDefaul:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN3@InitDefaul:
	DB	69					; 00000045H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?InitDefaultElements@CDXUTDialog@@AAEXXZ ENDP		; CDXUTDialog::InitDefaultElements
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?FocusDefaultControl@CDXUTDialog@@QAEXXZ
_TEXT	SEGMENT
_pControl$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
?FocusDefaultControl@CDXUTDialog@@QAEXXZ PROC		; CDXUTDialog::FocusDefaultControl, COMDAT
; _this$ = ecx

; 1694 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1695 :     // Check for default control in this dialog
; 1696 :     for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@FocusDefau
$LN3@FocusDefau:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@FocusDefau:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN5@FocusDefau

; 1697 :     {
; 1698 :         CDXUTControl* pControl = m_Controls.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$1[ebp], ecx

; 1699 :         if( pControl->m_bIsDefault )

	mov	eax, DWORD PTR _pControl$1[ebp]
	movzx	ecx, BYTE PTR [eax+7]
	test	ecx, ecx
	je	SHORT $LN1@FocusDefau

; 1700 :         {
; 1701 :             // Remove focus from the current control
; 1702 :             ClearFocus();

	call	?ClearFocus@CDXUTDialog@@SAXXZ		; CDXUTDialog::ClearFocus

; 1703 : 
; 1704 :             // Give focus to the default control
; 1705 :             s_pControlFocus = pControl;

	mov	eax, DWORD PTR _pControl$1[ebp]
	mov	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, eax ; CDXUTDialog::s_pControlFocus

; 1706 :             s_pControlFocus->OnFocusIn();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1707 :             return;

	jmp	SHORT $LN5@FocusDefau
$LN1@FocusDefau:

; 1708 :         }
; 1709 :     }

	jmp	SHORT $LN3@FocusDefau
$LN5@FocusDefau:

; 1710 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FocusDefaultControl@CDXUTDialog@@QAEXXZ ENDP		; CDXUTDialog::FocusDefaultControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ClearFocus@CDXUTDialog@@SAXXZ
_TEXT	SEGMENT
?ClearFocus@CDXUTDialog@@SAXXZ PROC			; CDXUTDialog::ClearFocus, COMDAT

; 1681 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1682 :     if( s_pControlFocus )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN1@ClearFocus

; 1683 :     {
; 1684 :         s_pControlFocus->OnFocusOut();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1685 :         s_pControlFocus = NULL;

	mov	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
$LN1@ClearFocus:

; 1686 :     }
; 1687 : 
; 1688 :     ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1689 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearFocus@CDXUTDialog@@SAXXZ ENDP			; CDXUTDialog::ClearFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ PROC ; CDXUTDialog::GetManager, COMDAT
; _this$ = ecx

; 227  :     CDXUTDialogResourceManager* GetManager() { return m_pManager; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+314]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetManager@CDXUTDialog@@QAEPAVCDXUTDialogResourceManager@@XZ ENDP ; CDXUTDialog::GetManager
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetTexture@CDXUTDialog@@QAEPAUDXUTTextureNode@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?GetTexture@CDXUTDialog@@QAEPAUDXUTTextureNode@@I@Z PROC ; CDXUTDialog::GetTexture, COMDAT
; _this$ = ecx

; 628  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 629  :     if( NULL == m_pManager )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+314], 0
	jne	SHORT $LN1@GetTexture

; 630  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetTexture
$LN1@GetTexture:

; 631  :     return m_pManager->GetTextureNode( m_Textures.GetAt( index ) );

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	call	?GetAt@?$CGrowableArray@H@@QAEAAHH@Z	; CGrowableArray<int>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+314]
	call	?GetTextureNode@CDXUTDialogResourceManager@@QAEPAUDXUTTextureNode@@H@Z ; CDXUTDialogResourceManager::GetTextureNode
$LN2@GetTexture:

; 632  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTexture@CDXUTDialog@@QAEPAUDXUTTextureNode@@I@Z ENDP ; CDXUTDialog::GetTexture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetTexture@CDXUTDialog@@QAEJIPBD@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
_iTexture$ = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
_strFilename$ = 12					; size = 4
?SetTexture@CDXUTDialog@@QAEJIPBD@Z PROC		; CDXUTDialog::SetTexture, COMDAT
; _this$ = ecx

; 606  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  :     // If this assert triggers, you need to call CDXUTDialog::Init() first.  This change
; 608  :     // was made so that the DXUT's GUI could become seperate and optional from DXUT's core.  The 
; 609  :     // creation and interfacing with CDXUTDialogResourceManager is now the responsibility 
; 610  :     // of the application if it wishes to use DXUT's GUI.
; 611  :     assert( m_pManager != NULL && "To fix call CDXUTDialog::Init() first.  See comments for details." ); 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+314], 0
	je	SHORT $LN6@SetTexture
	mov	ecx, OFFSET ??_C@_0EC@INLDDICL@To?5fix?5call?5CDXUTDialog?3?3Init?$CI?$CJ?5@
	test	ecx, ecx
	jne	SHORT $LN7@SetTexture
$LN6@SetTexture:
	mov	edx, DWORD PTR ?__LINE__Var@?1??SetTexture@CDXUTDialog@@QAEJIPBD@Z@4JA
	add	edx, 5
	push	edx
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1LE@JLCOLCJL@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AA?5?$AAf?$AAi?$AAx?$AA?5?$AAc?$AAa@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@SetTexture:

; 612  : 
; 613  :     // Make sure the list is at least as large as the index being set
; 614  :     for( UINT i=m_Textures.GetSize(); i <= index; i++ )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	call	?GetSize@?$CGrowableArray@H@@QBEHXZ	; CGrowableArray<int>::GetSize
	mov	DWORD PTR _i$2[ebp], eax
	jmp	SHORT $LN3@SetTexture
$LN2@SetTexture:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@SetTexture:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	ja	SHORT $LN1@SetTexture

; 615  :     {
; 616  :         m_Textures.Add( -1 );

	mov	DWORD PTR $T1[ebp], -1
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	call	?Add@?$CGrowableArray@H@@QAEJABH@Z	; CGrowableArray<int>::Add

; 617  :     }

	jmp	SHORT $LN2@SetTexture
$LN1@SetTexture:

; 618  : 
; 619  :     int iTexture = m_pManager->AddTexture( strFilename );

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+314]
	call	?AddTexture@CDXUTDialogResourceManager@@QAEHPBD@Z ; CDXUTDialogResourceManager::AddTexture
	mov	DWORD PTR _iTexture$[ebp], eax

; 620  : 
; 621  :     m_Textures.SetAt( index, iTexture );

	lea	eax, DWORD PTR _iTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	call	?SetAt@?$CGrowableArray@H@@QAEJHABH@Z	; CGrowableArray<int>::SetAt

; 622  :     return S_OK;

	xor	eax, eax

; 623  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SetTexture
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN10@SetTexture:
	DD	1
	DD	$LN9@SetTexture
$LN9@SetTexture:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@SetTexture
$LN8@SetTexture:
	DB	105					; 00000069H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
?SetTexture@CDXUTDialog@@QAEJIPBD@Z ENDP		; CDXUTDialog::SetTexture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z PROC	; CDXUTDialog::GetFont, COMDAT
; _this$ = ecx

; 565  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  :     if( NULL == m_pManager )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+314], 0
	jne	SHORT $LN1@GetFont

; 567  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetFont
$LN1@GetFont:

; 568  :     return m_pManager->GetFontNode( m_Fonts.GetAt( index ) );

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	call	?GetAt@?$CGrowableArray@H@@QAEAAHH@Z	; CGrowableArray<int>::GetAt
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+314]
	call	?GetFontNode@CDXUTDialogResourceManager@@QAEPAUDXUTFontNode@@H@Z ; CDXUTDialogResourceManager::GetFontNode
$LN2@GetFont:

; 569  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z ENDP	; CDXUTDialog::GetFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetFont@CDXUTDialog@@QAEJIPBDJJ@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
_iFont$ = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
_strFaceName$ = 12					; size = 4
_height$ = 16						; size = 4
_weight$ = 20						; size = 4
?SetFont@CDXUTDialog@@QAEJIPBDJJ@Z PROC			; CDXUTDialog::SetFont, COMDAT
; _this$ = ecx

; 542  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 543  :     // If this assert triggers, you need to call CDXUTDialog::Init() first.  This change
; 544  :     // was made so that the DXUT's GUI could become seperate and optional from DXUT's core.  The 
; 545  :     // creation and interfacing with CDXUTDialogResourceManager is now the responsibility 
; 546  :     // of the application if it wishes to use DXUT's GUI.
; 547  :     assert( m_pManager != NULL && "To fix call CDXUTDialog::Init() first.  See comments for details." ); 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+314], 0
	je	SHORT $LN6@SetFont
	mov	ecx, OFFSET ??_C@_0EC@INLDDICL@To?5fix?5call?5CDXUTDialog?3?3Init?$CI?$CJ?5@
	test	ecx, ecx
	jne	SHORT $LN7@SetFont
$LN6@SetFont:
	mov	edx, DWORD PTR ?__LINE__Var@?1??SetFont@CDXUTDialog@@QAEJIPBDJJ@Z@4JA
	add	edx, 5
	push	edx
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1LE@JLCOLCJL@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AA?5?$AAf?$AAi?$AAx?$AA?5?$AAc?$AAa@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@SetFont:

; 548  : 
; 549  :     // Make sure the list is at least as large as the index being set
; 550  :     UINT i;
; 551  :     for( i=m_Fonts.GetSize(); i <= index; i++ )

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	call	?GetSize@?$CGrowableArray@H@@QBEHXZ	; CGrowableArray<int>::GetSize
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@SetFont
$LN2@SetFont:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@SetFont:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	ja	SHORT $LN1@SetFont

; 552  :     {
; 553  :         m_Fonts.Add( -1 );

	mov	DWORD PTR $T1[ebp], -1
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	call	?Add@?$CGrowableArray@H@@QAEJABH@Z	; CGrowableArray<int>::Add

; 554  :     }

	jmp	SHORT $LN2@SetFont
$LN1@SetFont:

; 555  : 
; 556  :     int iFont = m_pManager->AddFont( strFaceName, height, weight );

	mov	eax, DWORD PTR _weight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strFaceName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	call	?AddFont@CDXUTDialogResourceManager@@QAEHPBDJJ@Z ; CDXUTDialogResourceManager::AddFont
	mov	DWORD PTR _iFont$[ebp], eax

; 557  :     m_Fonts.SetAt( index, iFont );

	lea	eax, DWORD PTR _iFont$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	call	?SetAt@?$CGrowableArray@H@@QAEJHABH@Z	; CGrowableArray<int>::SetAt

; 558  : 
; 559  :     return S_OK;

	xor	eax, eax

; 560  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SetFont
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN10@SetFont:
	DD	1
	DD	$LN9@SetFont
$LN9@SetFont:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@SetFont
$LN8@SetFont:
	DB	105					; 00000069H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?SetFont@CDXUTDialog@@QAEJIPBDJJ@Z ENDP			; CDXUTDialog::SetFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?OnRender@CDXUTDialog@@QAEJM@Z
_TEXT	SEGMENT
_pControl$1 = -468					; size = 4
_i$2 = -456						; size = 4
_wszOutput$3 = -444					; size = 256
_rc$4 = -180						; size = 16
_pTextureNode$ = -156					; size = 4
_pd3dDevice$ = -144					; size = 4
_vertices$ = -132					; size = 112
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?OnRender@CDXUTDialog@@QAEJM@Z PROC			; CDXUTDialog::OnRender, COMDAT
; _this$ = ecx

; 377  : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 664				; 00000298H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-664]
	mov	ecx, 166				; 000000a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 378  :     // If this assert triggers, you need to call CDXUTDialogResourceManager::On*Device() from inside
; 379  :     // the application's device callbacks.  See the SDK samples for an example of how to do this.
; 380  :     assert( m_pManager->GetD3DDevice() && m_pManager->m_pStateBlock && "To fix hook up CDXUTDialogResourceManager to device callbacks.  See comments for details" );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	call	?GetD3DDevice@CDXUTDialogResourceManager@@QAEPAUIDirect3DDevice9@@XZ ; CDXUTDialogResourceManager::GetD3DDevice
	test	eax, eax
	je	SHORT $LN14@OnRender
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+314]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN14@OnRender
	mov	eax, OFFSET ??_C@_0FJ@OFKGNHOL@To?5fix?5hook?5up?5CDXUTDialogResour@
	test	eax, eax
	jne	SHORT $LN15@OnRender
$LN14@OnRender:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??OnRender@CDXUTDialog@@QAEJM@Z@4JA
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1BCM@NAODPGLM@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?9?$AA?$DO?$AAG?$AAe?$AAt?$AAD?$AA3?$AAD?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAm?$AA_@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@OnRender:

; 381  : 
; 382  :     // See if the dialog needs to be refreshed
; 383  :     if( m_fTimeLastRefresh < s_fTimeRefresh )

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR ?s_fTimeRefresh@CDXUTDialog@@0NA
	comisd	xmm0, QWORD PTR [eax+7]
	jbe	SHORT $LN11@OnRender

; 384  :     {
; 385  :         m_fTimeLastRefresh = DXUTGetTime();

	call	?DXUTGetTime@@YANXZ			; DXUTGetTime
	mov	eax, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [eax+7]

; 386  :         Refresh();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Refresh@CDXUTDialog@@QAEXXZ		; CDXUTDialog::Refresh
$LN11@OnRender:

; 387  :     }
; 388  : 
; 389  :     // For invisible dialog, out now.
; 390  :     if( !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+19]
	test	ecx, ecx
	jne	SHORT $LN10@OnRender

; 391  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@OnRender
$LN10@OnRender:

; 392  : 
; 393  :     DXUT_SCREEN_VERTEX vertices[4] =
; 394  :     {
; 395  :         (float)m_x,           (float)m_y,            0.5f, 1.0f, m_colorTopLeft, 0.0f, 0.5f, 
; 396  :         (float)m_x + m_width, (float)m_y,            0.5f, 1.0f, m_colorTopRight, 1.0f, 0.5f,
; 397  :         (float)m_x + m_width, (float)m_y + m_height, 0.5f, 1.0f, m_colorBottomRight, 1.0f, 1.0f, 
; 398  :         (float)m_x,           (float)m_y + m_height, 0.5f, 1.0f, m_colorBottomLeft, 0.0f, 1.0f, 
; 399  :     };

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+278]
	movss	DWORD PTR _vertices$[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+282]
	movss	DWORD PTR _vertices$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+298]
	mov	DWORD PTR _vertices$[ebp+16], ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+20], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+24], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+278]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+286]
	addss	xmm0, xmm1
	movss	DWORD PTR _vertices$[ebp+28], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+282]
	movss	DWORD PTR _vertices$[ebp+32], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+36], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+40], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+302]
	mov	DWORD PTR _vertices$[ebp+44], ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+48], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+52], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+278]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+286]
	addss	xmm0, xmm1
	movss	DWORD PTR _vertices$[ebp+56], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+282]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+290]
	addss	xmm0, xmm1
	movss	DWORD PTR _vertices$[ebp+60], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+64], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+68], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+310]
	mov	DWORD PTR _vertices$[ebp+72], ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+76], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+80], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+278]
	movss	DWORD PTR _vertices$[ebp+84], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+282]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+290]
	addss	xmm0, xmm1
	movss	DWORD PTR _vertices$[ebp+88], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+92], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+96], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+306]
	mov	DWORD PTR _vertices$[ebp+100], ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+104], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+108], xmm0

; 400  : 
; 401  :     IDirect3DDevice9* pd3dDevice = m_pManager->GetD3DDevice();     

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	call	?GetD3DDevice@CDXUTDialogResourceManager@@QAEPAUIDirect3DDevice9@@XZ ; CDXUTDialogResourceManager::GetD3DDevice
	mov	DWORD PTR _pd3dDevice$[ebp], eax

; 402  : 
; 403  :     // Set up a state block here and restore it when finished drawing all the controls
; 404  :     m_pManager->m_pStateBlock->Capture();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 405  : 
; 406  :     pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 407  :     pd3dDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_SRCALPHA );

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 408  :     pd3dDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA );

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 409  :     pd3dDevice->SetRenderState( D3DRS_ALPHATESTENABLE, FALSE );

	mov	esi, esp
	push	0
	push	15					; 0000000fH
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 410  : 
; 411  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_SELECTARG2 );

	mov	esi, esp
	push	3
	push	1
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 412  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 413  : 
; 414  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1 );

	mov	esi, esp
	push	2
	push	4
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 415  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	5
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 416  : 
; 417  :     pd3dDevice->SetVertexShader( NULL );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+368]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 418  :     pd3dDevice->SetPixelShader( NULL );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+428]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 419  : 
; 420  :     //pd3dDevice->Clear( 0, NULL, D3DCLEAR_ZBUFFER, 0, 1.0f, 0 );
; 421  :     pd3dDevice->SetRenderState( D3DRS_ZENABLE, FALSE );

	mov	esi, esp
	push	0
	push	7
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 422  : 
; 423  :     if( !m_bMinimized )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	jne	SHORT $LN9@OnRender

; 424  :     {
; 425  :         pd3dDevice->SetFVF( DXUT_SCREEN_VERTEX::FVF );

	mov	esi, esp
	mov	eax, DWORD PTR ?FVF@DXUT_SCREEN_VERTEX@@2KA ; DXUT_SCREEN_VERTEX::FVF
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+356]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 426  :         pd3dDevice->DrawPrimitiveUP( D3DPT_TRIANGLEFAN, 2, vertices, sizeof(DXUT_SCREEN_VERTEX) );

	mov	esi, esp
	push	28					; 0000001cH
	lea	eax, DWORD PTR _vertices$[ebp]
	push	eax
	push	2
	push	6
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+332]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@OnRender:

; 427  :     }
; 428  : 
; 429  : 
; 430  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 431  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 432  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 433  :     
; 434  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 435  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 436  :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	6
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 437  : 
; 438  :     pd3dDevice->SetSamplerState( 0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	6
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+276]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 439  : 
; 440  :     DXUTTextureNode* pTextureNode = GetTexture( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTexture@CDXUTDialog@@QAEPAUDXUTTextureNode@@I@Z ; CDXUTDialog::GetTexture
	mov	DWORD PTR _pTextureNode$[ebp], eax

; 441  :     pd3dDevice->SetTexture( 0, pTextureNode->pTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _pTextureNode$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+260]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 442  : 
; 443  :     m_pManager->m_pSprite->Begin( D3DXSPRITE_DONOTSAVESTATE );

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 444  : 
; 445  :     // Render the caption if it's enabled.
; 446  :     if( m_bCaption )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	$LN8@OnRender

; 447  :     {
; 448  :         // DrawSprite will offset the rect down by
; 449  :         // m_nCaptionHeight, so adjust the rect higher
; 450  :         // here to negate the effect.
; 451  :         RECT rc = { 0, -m_nCaptionHeight, m_width, 0 };

	mov	DWORD PTR _rc$4[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+294]
	neg	ecx
	mov	DWORD PTR _rc$4[ebp+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+286]
	mov	DWORD PTR _rc$4[ebp+8], ecx
	mov	DWORD PTR _rc$4[ebp+12], 0

; 452  :         DrawSprite( &m_CapElement, &rc );

	lea	eax, DWORD PTR _rc$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 374				; 00000176H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ; CDXUTDialog::DrawSprite

; 453  :         rc.left += 5; // Make a left margin

	mov	eax, DWORD PTR _rc$4[ebp]
	add	eax, 5
	mov	DWORD PTR _rc$4[ebp], eax

; 454  :         TCHAR wszOutput[256];
; 455  :         StringCchCopy( wszOutput, 256, m_wszCaption );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 22					; 00000016H
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _wszOutput$3[ebp]
	push	ecx
	call	?StringCchCopyA@@YGJPADIPBD@Z		; StringCchCopyA

; 456  :         if( m_bMinimized )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	je	SHORT $LN7@OnRender

; 457  :             StringCchCat( wszOutput, 256, " (Minimized)" );

	push	OFFSET ??_C@_0N@EHHLLFIF@?5?$CIMinimized?$CJ?$AA@
	push	256					; 00000100H
	lea	eax, DWORD PTR _wszOutput$3[ebp]
	push	eax
	call	?StringCchCatA@@YGJPADIPBD@Z		; StringCchCatA
$LN7@OnRender:

; 458  :         DrawText( wszOutput, &m_CapElement, &rc, true );

	push	-1
	push	1
	lea	eax, DWORD PTR _rc$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 374				; 00000176H
	push	ecx
	lea	edx, DWORD PTR _wszOutput$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ; CDXUTDialog::DrawTextA
$LN8@OnRender:

; 459  :     }
; 460  : 
; 461  :     // If the dialog is minimized, skip rendering
; 462  :     // its controls.
; 463  :     if( !m_bMinimized )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	jne	$LN1@OnRender

; 464  :     {
; 465  :         for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@OnRender
$LN4@OnRender:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@OnRender:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN3@OnRender

; 466  :         {
; 467  :             CDXUTControl* pControl = m_Controls.GetAt(i);   

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$1[ebp], ecx

; 468  : 
; 469  :             // Focused control is drawn last
; 470  :             if( pControl == s_pControlFocus )

	mov	eax, DWORD PTR _pControl$1[ebp]
	cmp	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	jne	SHORT $LN2@OnRender

; 471  :                 continue;

	jmp	SHORT $LN4@OnRender
$LN2@OnRender:

; 472  : 
; 473  :             pControl->Render( pd3dDevice, fElapsedTime );

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pControl$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pControl$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 474  :         }

	jmp	$LN4@OnRender
$LN3@OnRender:

; 475  : 
; 476  :         if( s_pControlFocus != NULL && s_pControlFocus->m_pDialog == this )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN1@OnRender
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@OnRender

; 477  :             s_pControlFocus->Render( pd3dDevice, fElapsedTime );

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@OnRender:

; 478  :     }
; 479  : 
; 480  :     m_pManager->m_pSprite->End();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 481  : 
; 482  :     m_pManager->m_pStateBlock->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 483  : 
; 484  :     return S_OK;

	xor	eax, eax
$LN12@OnRender:

; 485  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@OnRender
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 664				; 00000298H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN20@OnRender:
	DD	3
	DD	$LN19@OnRender
$LN19@OnRender:
	DD	-132					; ffffff7cH
	DD	112					; 00000070H
	DD	$LN16@OnRender
	DD	-180					; ffffff4cH
	DD	16					; 00000010H
	DD	$LN17@OnRender
	DD	-444					; fffffe44H
	DD	256					; 00000100H
	DD	$LN18@OnRender
$LN18@OnRender:
	DB	119					; 00000077H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN17@OnRender:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN16@OnRender:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?OnRender@CDXUTDialog@@QAEJM@Z ENDP			; CDXUTDialog::OnRender
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Refresh@CDXUTDialog@@QAEXXZ
_TEXT	SEGMENT
_pControl$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
?Refresh@CDXUTDialog@@QAEXXZ PROC			; CDXUTDialog::Refresh, COMDAT
; _this$ = ecx

; 353  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 354  :     if( s_pControlFocus )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN6@Refresh

; 355  :         s_pControlFocus->OnFocusOut();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@Refresh:

; 356  : 
; 357  :     if( m_pControlMouseOver )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+15], 0
	je	SHORT $LN5@Refresh

; 358  :         m_pControlMouseOver->OnMouseLeave();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+15]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+15]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@Refresh:

; 359  : 
; 360  :     s_pControlFocus = NULL;

	mov	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus

; 361  :     s_pControlPressed = NULL;

	mov	DWORD PTR ?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlPressed

; 362  :     m_pControlMouseOver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+15], 0

; 363  : 
; 364  :     for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@Refresh
$LN3@Refresh:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@Refresh:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@Refresh

; 365  :     {
; 366  :         CDXUTControl* pControl = m_Controls.GetAt(i);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$1[ebp], ecx

; 367  :         pControl->Refresh();

	mov	eax, DWORD PTR _pControl$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 368  :     }

	jmp	SHORT $LN3@Refresh
$LN2@Refresh:

; 369  : 
; 370  :     if( m_bKeyboardInput )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN7@Refresh

; 371  :         FocusDefaultControl();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FocusDefaultControl@CDXUTDialog@@QAEXXZ ; CDXUTDialog::FocusDefaultControl
$LN7@Refresh:

; 372  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Refresh@CDXUTDialog@@QAEXXZ ENDP			; CDXUTDialog::Refresh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetCallback@CDXUTDialog@@QAEXP6GXIHPAVCDXUTControl@@PAX@Z1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pCallback$ = 8						; size = 4
_pUserContext$ = 12					; size = 4
?SetCallback@CDXUTDialog@@QAEXP6GXIHPAVCDXUTControl@@PAX@Z1@Z PROC ; CDXUTDialog::SetCallback, COMDAT
; _this$ = ecx

; 148  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 149  :     // If this assert triggers, you need to call CDXUTDialog::Init() first.  This change
; 150  :     // was made so that the DXUT's GUI could become seperate and optional from DXUT's core.  The 
; 151  :     // creation and interfacing with CDXUTDialogResourceManager is now the responsibility 
; 152  :     // of the application if it wishes to use DXUT's GUI.
; 153  :     assert( m_pManager != NULL && "To fix call CDXUTDialog::Init() first.  See comments for details." ); 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+314], 0
	je	SHORT $LN3@SetCallbac
	mov	ecx, OFFSET ??_C@_0EC@INLDDICL@To?5fix?5call?5CDXUTDialog?3?3Init?$CI?$CJ?5@
	test	ecx, ecx
	jne	SHORT $LN4@SetCallbac
$LN3@SetCallbac:
	mov	edx, DWORD PTR ?__LINE__Var@?1??SetCallback@CDXUTDialog@@QAEXP6GXIHPAVCDXUTControl@@PAX@Z1@Z@4JA
	add	edx, 5
	push	edx
	push	OFFSET ??_C@_1FM@FMACGJEA@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAd?$AA3?$AAd?$AA9?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@
	push	OFFSET ??_C@_1LE@JLCOLCJL@?$AAm?$AA_?$AAp?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AA?5?$AAf?$AAi?$AAx?$AA?5?$AAc?$AAa@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@SetCallbac:

; 154  : 
; 155  :     m_pCallbackEvent = pCallback; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pCallback$[ebp]
	mov	DWORD PTR [eax+318], ecx

; 156  :     m_pCallbackEventUserContext = pUserContext; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pUserContext$[ebp]
	mov	DWORD PTR [eax+322], ecx

; 157  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetCallback@CDXUTDialog@@QAEXP6GXIHPAVCDXUTControl@@PAX@Z1@Z ENDP ; CDXUTDialog::SetCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveAllControls@CDXUTDialog@@QAEXXZ
_TEXT	SEGMENT
tv87 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_pControl$3 = -32					; size = 4
_i$4 = -20						; size = 4
_this$ = -8						; size = 4
?RemoveAllControls@CDXUTDialog@@QAEXXZ PROC		; CDXUTDialog::RemoveAllControls, COMDAT
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 191  :     if( s_pControlFocus && s_pControlFocus->m_pDialog == this )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN6@RemoveAllC
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN6@RemoveAllC

; 192  :         s_pControlFocus = NULL;

	mov	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
$LN6@RemoveAllC:

; 193  :     if( s_pControlPressed && s_pControlPressed->m_pDialog == this )

	cmp	DWORD PTR ?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlPressed
	je	SHORT $LN5@RemoveAllC
	mov	eax, DWORD PTR ?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlPressed
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN5@RemoveAllC

; 194  :         s_pControlPressed = NULL;

	mov	DWORD PTR ?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlPressed
$LN5@RemoveAllC:

; 195  :     m_pControlMouseOver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+15], 0

; 196  : 
; 197  :     for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@RemoveAllC
$LN3@RemoveAllC:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@RemoveAllC:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$4[ebp], eax
	jge	SHORT $LN2@RemoveAllC

; 198  :     {
; 199  :         CDXUTControl* pControl = m_Controls.GetAt( i );

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$3[ebp], ecx

; 200  :         SAFE_DELETE( pControl );

	cmp	DWORD PTR _pControl$3[ebp], 0
	je	SHORT $LN1@RemoveAllC
	mov	eax, DWORD PTR _pControl$3[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN9@RemoveAllC
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN10@RemoveAllC
$LN9@RemoveAllC:
	mov	DWORD PTR tv87[ebp], 0
$LN10@RemoveAllC:
	mov	DWORD PTR _pControl$3[ebp], 0
$LN1@RemoveAllC:

; 201  :     }

	jmp	$LN3@RemoveAllC
$LN2@RemoveAllC:

; 202  : 
; 203  :     m_Controls.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?RemoveAll@?$CGrowableArray@PAVCDXUTControl@@@@QAEXXZ ; CGrowableArray<CDXUTControl *>::RemoveAll

; 204  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAllControls@CDXUTDialog@@QAEXXZ ENDP		; CDXUTDialog::RemoveAllControls
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RemoveControl@CDXUTDialog@@QAEXH@Z
_TEXT	SEGMENT
tv88 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_pControl$3 = -32					; size = 4
_i$4 = -20						; size = 4
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
?RemoveControl@CDXUTDialog@@QAEXH@Z PROC		; CDXUTDialog::RemoveControl, COMDAT
; _this$ = ecx

; 162  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  :     for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN8@RemoveCont
$LN7@RemoveCont:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN8@RemoveCont:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$4[ebp], eax
	jge	$LN9@RemoveCont

; 164  :     {
; 165  :         CDXUTControl* pControl = m_Controls.GetAt( i );

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$3[ebp], ecx

; 166  :         if( pControl->GetID() == ID )

	mov	ecx, DWORD PTR _pControl$3[ebp]
	call	?GetID@CDXUTControl@@QBEHXZ		; CDXUTControl::GetID
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	$LN5@RemoveCont

; 167  :         {
; 168  :             // Clean focus first
; 169  :             ClearFocus();

	call	?ClearFocus@CDXUTDialog@@SAXXZ		; CDXUTDialog::ClearFocus

; 170  : 
; 171  :             // Clear references to this control
; 172  :             if( s_pControlFocus == pControl )

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	cmp	eax, DWORD PTR _pControl$3[ebp]
	jne	SHORT $LN4@RemoveCont

; 173  :                 s_pControlFocus = NULL;

	mov	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
$LN4@RemoveCont:

; 174  :             if( s_pControlPressed == pControl )

	mov	eax, DWORD PTR ?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlPressed
	cmp	eax, DWORD PTR _pControl$3[ebp]
	jne	SHORT $LN3@RemoveCont

; 175  :                 s_pControlPressed = NULL;

	mov	DWORD PTR ?s_pControlPressed@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlPressed
$LN3@RemoveCont:

; 176  :             if( m_pControlMouseOver == pControl )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+15]
	cmp	ecx, DWORD PTR _pControl$3[ebp]
	jne	SHORT $LN2@RemoveCont

; 177  :                 m_pControlMouseOver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+15], 0
$LN2@RemoveCont:

; 178  : 
; 179  :             SAFE_DELETE( pControl );

	cmp	DWORD PTR _pControl$3[ebp], 0
	je	SHORT $LN1@RemoveCont
	mov	eax, DWORD PTR _pControl$3[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN11@RemoveCont
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN12@RemoveCont
$LN11@RemoveCont:
	mov	DWORD PTR tv88[ebp], 0
$LN12@RemoveCont:
	mov	DWORD PTR _pControl$3[ebp], 0
$LN1@RemoveCont:

; 180  :             m_Controls.Remove( i );

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?Remove@?$CGrowableArray@PAVCDXUTControl@@@@QAEJH@Z ; CGrowableArray<CDXUTControl *>::Remove

; 181  : 
; 182  :             return;

	jmp	SHORT $LN9@RemoveCont
$LN5@RemoveCont:

; 183  :         }
; 184  :     }

	jmp	$LN7@RemoveCont
$LN9@RemoveCont:

; 185  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveControl@CDXUTDialog@@QAEXH@Z ENDP		; CDXUTDialog::RemoveControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetPrevControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z
_TEXT	SEGMENT
_pDialog$ = -20						; size = 4
_index$ = -8						; size = 4
_pControl$ = 8						; size = 4
?GetPrevControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z PROC ; CDXUTDialog::GetPrevControl, COMDAT

; 1388 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1389 :     int index = pControl->m_Index - 1;

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	sub	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1390 : 
; 1391 :     CDXUTDialog* pDialog = pControl->m_pDialog;

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _pDialog$[ebp], ecx
$LN3@GetPrevCon:

; 1392 :     
; 1393 :     // Cycle through dialogs in the loop to find the next control. Note
; 1394 :     // that if only one control exists in all looped dialogs it will
; 1395 :     // be the returned 'previous' control.
; 1396 :     while( index < 0 )

	cmp	DWORD PTR _index$[ebp], 0
	jge	SHORT $LN2@GetPrevCon

; 1397 :     {
; 1398 :         pDialog = pDialog->m_pPrevDialog;

	mov	eax, DWORD PTR _pDialog$[ebp]
	mov	ecx, DWORD PTR [eax+486]
	mov	DWORD PTR _pDialog$[ebp], ecx

; 1399 :         if( pDialog == NULL )

	cmp	DWORD PTR _pDialog$[ebp], 0
	jne	SHORT $LN1@GetPrevCon

; 1400 :             pDialog = pControl->m_pDialog;

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _pDialog$[ebp], ecx
$LN1@GetPrevCon:

; 1401 : 
; 1402 :         index = pDialog->m_Controls.GetSize() - 1;

	mov	ecx, DWORD PTR _pDialog$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	sub	eax, 1
	mov	DWORD PTR _index$[ebp], eax

; 1403 :     }

	jmp	SHORT $LN3@GetPrevCon
$LN2@GetPrevCon:

; 1404 :     
; 1405 :     return pDialog->m_Controls.GetAt( index );    

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDialog$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	eax, DWORD PTR [eax]

; 1406 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPrevControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z ENDP ; CDXUTDialog::GetPrevControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetNextControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z
_TEXT	SEGMENT
_pDialog$ = -20						; size = 4
_index$ = -8						; size = 4
_pControl$ = 8						; size = 4
?GetNextControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z PROC ; CDXUTDialog::GetNextControl, COMDAT

; 1369 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1370 :     int index = pControl->m_Index + 1;

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	DWORD PTR _index$[ebp], ecx

; 1371 : 
; 1372 :     CDXUTDialog* pDialog = pControl->m_pDialog;

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _pDialog$[ebp], ecx
$LN2@GetNextCon:

; 1373 :     
; 1374 :     // Cycle through dialogs in the loop to find the next control. Note
; 1375 :     // that if only one control exists in all looped dialogs it will
; 1376 :     // be the returned 'next' control.
; 1377 :     while( index >= (int) pDialog->m_Controls.GetSize() )

	mov	ecx, DWORD PTR _pDialog$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _index$[ebp], eax
	jl	SHORT $LN1@GetNextCon

; 1378 :     {
; 1379 :         pDialog = pDialog->m_pNextDialog;

	mov	eax, DWORD PTR _pDialog$[ebp]
	mov	ecx, DWORD PTR [eax+482]
	mov	DWORD PTR _pDialog$[ebp], ecx

; 1380 :         index = 0;

	mov	DWORD PTR _index$[ebp], 0

; 1381 :     }

	jmp	SHORT $LN2@GetNextCon
$LN1@GetNextCon:

; 1382 :     
; 1383 :     return pDialog->m_Controls.GetAt( index );    

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDialog$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	eax, DWORD PTR [eax]

; 1384 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextControl@CDXUTDialog@@SAPAVCDXUTControl@@PAV2@@Z ENDP ; CDXUTDialog::GetNextControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetNextDialog@CDXUTDialog@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pNextDialog$ = 8					; size = 4
?SetNextDialog@CDXUTDialog@@QAEXPAV1@@Z PROC		; CDXUTDialog::SetNextDialog, COMDAT
; _this$ = ecx

; 1670 : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1671 :     if( pNextDialog == NULL )

	cmp	DWORD PTR _pNextDialog$[ebp], 0
	jne	SHORT $LN1@SetNextDia

; 1672 :         pNextDialog = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pNextDialog$[ebp], eax
$LN1@SetNextDia:

; 1673 :     
; 1674 :     m_pNextDialog = pNextDialog;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNextDialog$[ebp]
	mov	DWORD PTR [eax+482], ecx

; 1675 :     m_pNextDialog->m_pPrevDialog = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+482]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+486], edx

; 1676 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetNextDialog@CDXUTDialog@@QAEXPAV1@@Z ENDP		; CDXUTDialog::SetNextDialog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetHeight@CDXUTDialog@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetHeight@CDXUTDialog@@QAEHXZ PROC			; CDXUTDialog::GetHeight, COMDAT
; _this$ = ecx

; 197  :     int GetHeight() { return m_height; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+290]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHeight@CDXUTDialog@@QAEHXZ ENDP			; CDXUTDialog::GetHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetWidth@CDXUTDialog@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetWidth@CDXUTDialog@@QAEHXZ PROC			; CDXUTDialog::GetWidth, COMDAT
; _this$ = ecx

; 196  :     int GetWidth() { return m_width; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+286]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWidth@CDXUTDialog@@QAEHXZ ENDP			; CDXUTDialog::GetWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetBackgroundColors@CDXUTDialog@@QAEXKKKK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_colorTopLeft$ = 8					; size = 4
_colorTopRight$ = 12					; size = 4
_colorBottomLeft$ = 16					; size = 4
_colorBottomRight$ = 20					; size = 4
?SetBackgroundColors@CDXUTDialog@@QAEXKKKK@Z PROC	; CDXUTDialog::SetBackgroundColors, COMDAT
; _this$ = ecx

; 1660 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1661 :     m_colorTopLeft = colorTopLeft;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _colorTopLeft$[ebp]
	mov	DWORD PTR [eax+298], ecx

; 1662 :     m_colorTopRight = colorTopRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _colorTopRight$[ebp]
	mov	DWORD PTR [eax+302], ecx

; 1663 :     m_colorBottomLeft = colorBottomLeft;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _colorBottomLeft$[ebp]
	mov	DWORD PTR [eax+306], ecx

; 1664 :     m_colorBottomRight = colorBottomRight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _colorBottomRight$[ebp]
	mov	DWORD PTR [eax+310], ecx

; 1665 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetBackgroundColors@CDXUTDialog@@QAEXKKKK@Z ENDP	; CDXUTDialog::SetBackgroundColors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z
_TEXT	SEGMENT
_rcShadow$1 = -164					; size = 16
_pFontNode$ = -140					; size = 4
_matTransform$ = -128					; size = 64
_rcScreen$ = -48					; size = 16
_hr$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_strText$ = 8						; size = 4
_pElement$ = 12						; size = 4
_prcDest$ = 16						; size = 4
_bShadow$ = 20						; size = 1
_nCount$ = 24						; size = 4
?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z PROC ; CDXUTDialog::DrawTextA, COMDAT
; _this$ = ecx

; 1608 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1609 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1610 : 
; 1611 :     // No need to draw fully transparent layers
; 1612 :     if( pElement->FontColor.Current.a == 0 )

	mov	eax, DWORD PTR _pElement$[ebx]
	movss	xmm0, DWORD PTR [eax+104]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@DrawTextA

; 1613 :         return S_OK;

	xor	eax, eax
	jmp	$LN10@DrawTextA
$LN9@DrawTextA:

; 1614 : 
; 1615 :     RECT rcScreen = *prcDest;

	mov	eax, DWORD PTR _prcDest$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcScreen$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcScreen$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcScreen$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcScreen$[ebp+12], edx

; 1616 :     OffsetRect( &rcScreen, m_x, m_y );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+282]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+278]
	push	eax
	lea	ecx, DWORD PTR _rcScreen$[ebp]
	push	ecx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1617 : 
; 1618 :     // If caption is enabled, offset the Y position by its height.
; 1619 :     if( m_bCaption )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN8@DrawTextA

; 1620 :         OffsetRect( &rcScreen, 0, m_nCaptionHeight );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+294]
	push	ecx
	push	0
	lea	edx, DWORD PTR _rcScreen$[ebp]
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawTextA:

; 1621 : 
; 1622 :     //debug
; 1623 :     //DrawRect( &rcScreen, D3DCOLOR_ARGB(100, 255, 0, 0) );
; 1624 : 
; 1625 :     D3DXMATRIXA16 matTransform;

	lea	ecx, DWORD PTR _matTransform$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16

; 1626 :     D3DXMatrixIdentity( &matTransform );

	lea	eax, DWORD PTR _matTransform$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 1627 :     m_pManager->m_pSprite->SetTransform( &matTransform );

	mov	esi, esp
	lea	eax, DWORD PTR _matTransform$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+314]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+314]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1628 : 
; 1629 :     DXUTFontNode* pFontNode = GetFont( pElement->iFont );

	mov	eax, DWORD PTR _pElement$[ebx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z ; CDXUTDialog::GetFont
	mov	DWORD PTR _pFontNode$[ebp], eax

; 1630 :     
; 1631 :     if( bShadow )

	movzx	eax, BYTE PTR _bShadow$[ebx]
	test	eax, eax
	je	$LN4@DrawTextA

; 1632 :     {
; 1633 :         RECT rcShadow = rcScreen;

	mov	eax, DWORD PTR _rcScreen$[ebp]
	mov	DWORD PTR _rcShadow$1[ebp], eax
	mov	ecx, DWORD PTR _rcScreen$[ebp+4]
	mov	DWORD PTR _rcShadow$1[ebp+4], ecx
	mov	edx, DWORD PTR _rcScreen$[ebp+8]
	mov	DWORD PTR _rcShadow$1[ebp+8], edx
	mov	eax, DWORD PTR _rcScreen$[ebp+12]
	mov	DWORD PTR _rcShadow$1[ebp+12], eax

; 1634 :         OffsetRect( &rcShadow, 1, 1 );

	mov	esi, esp
	push	1
	push	1
	lea	eax, DWORD PTR _rcShadow$1[ebp]
	push	eax
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1635 : 		if(pFontNode->pFont) {

	mov	eax, DWORD PTR _pFontNode$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN6@DrawTextA

; 1636 : 			hr = pFontNode->pFont->DrawText( m_pManager->m_pSprite, strText, nCount, &rcShadow, pElement->dwTextFormat, D3DCOLOR_ARGB(DWORD(pElement->FontColor.Current.a * 255), 0, 0, 0) );

	mov	eax, DWORD PTR _pElement$[ebx]
	movss	xmm0, DWORD PTR [eax+104]
	mulss	xmm0, DWORD PTR __real@437f0000
	call	__ftoui3
	and	eax, 255				; 000000ffH
	shl	eax, 24					; 00000018H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pElement$[ebx]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR _rcShadow$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _nCount$[ebx]
	push	ecx
	mov	edx, DWORD PTR _strText$[ebx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pFontNode$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR _pFontNode$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 1637 : 		} else {

	jmp	SHORT $LN5@DrawTextA
$LN6@DrawTextA:

; 1638 : 			m_pManager->CreateFont(pElement->iFont);

	mov	eax, DWORD PTR _pElement$[ebx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+314]
	call	?CreateFontA@CDXUTDialogResourceManager@@QAEJI@Z ; CDXUTDialogResourceManager::CreateFontA
$LN5@DrawTextA:

; 1639 : 		}
; 1640 : 
; 1641 : 		if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@DrawTextA

; 1642 :             return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN10@DrawTextA
$LN4@DrawTextA:

; 1643 :     }
; 1644 : 
; 1645 : 	if(pFontNode->pFont) {

	mov	eax, DWORD PTR _pFontNode$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN3@DrawTextA

; 1646 : 		hr = pFontNode->pFont->DrawText( m_pManager->m_pSprite, strText, nCount, &rcScreen, pElement->dwTextFormat, pElement->FontColor.Current );

	mov	ecx, DWORD PTR _pElement$[ebx]
	add	ecx, 92					; 0000005cH
	call	??BD3DXCOLOR@@QBEKXZ			; D3DXCOLOR::operator unsigned long
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _pElement$[ebx]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	lea	edx, DWORD PTR _rcScreen$[ebp]
	push	edx
	mov	eax, DWORD PTR _nCount$[ebx]
	push	eax
	mov	ecx, DWORD PTR _strText$[ebx]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+314]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pFontNode$[ebp]
	mov	eax, DWORD PTR [edx+260]
	mov	ecx, DWORD PTR _pFontNode$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 1647 : 	} else {

	jmp	SHORT $LN2@DrawTextA
$LN3@DrawTextA:

; 1648 : 		m_pManager->CreateFont(pElement->iFont);

	mov	eax, DWORD PTR _pElement$[ebx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+314]
	call	?CreateFontA@CDXUTDialogResourceManager@@QAEJI@Z ; CDXUTDialogResourceManager::CreateFontA
$LN2@DrawTextA:

; 1649 : 	}
; 1650 : 
; 1651 : 	if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@DrawTextA

; 1652 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN10@DrawTextA
$LN1@DrawTextA:

; 1653 : 
; 1654 :     return S_OK;

	xor	eax, eax
$LN10@DrawTextA:

; 1655 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@DrawTextA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	20					; 00000014H
	npad	1
$LN16@DrawTextA:
	DD	3
	DD	$LN15@DrawTextA
$LN15@DrawTextA:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN12@DrawTextA
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN13@DrawTextA
	DD	-164					; ffffff5cH
	DD	16					; 00000010H
	DD	$LN14@DrawTextA
$LN14@DrawTextA:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
$LN13@DrawTextA:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN12@DrawTextA:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?DrawTextA@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@_NH@Z ENDP ; CDXUTDialog::DrawTextA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z
_TEXT	SEGMENT
_dwTextFormat$ = -44					; size = 4
_pFontNode$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
_pElement$ = 12						; size = 4
_prcDest$ = 16						; size = 4
_nCount$ = 20						; size = 4
?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z PROC ; CDXUTDialog::CalcTextRect, COMDAT
; _this$ = ecx

; 1589 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1590 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1591 : 
; 1592 :     DXUTFontNode* pFontNode = GetFont( pElement->iFont );

	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFont@CDXUTDialog@@QAEPAUDXUTFontNode@@I@Z ; CDXUTDialog::GetFont
	mov	DWORD PTR _pFontNode$[ebp], eax

; 1593 :     if( pFontNode == NULL )

	cmp	DWORD PTR _pFontNode$[ebp], 0
	jne	SHORT $LN2@CalcTextRe

; 1594 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN3@CalcTextRe
$LN2@CalcTextRe:

; 1595 : 
; 1596 :     DWORD dwTextFormat = pElement->dwTextFormat | DT_CALCRECT;

	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	or	ecx, 1024				; 00000400H
	mov	DWORD PTR _dwTextFormat$[ebp], ecx

; 1597 :     // Since we are only computing the rectangle, we don't need a sprite.
; 1598 :     hr = pFontNode->pFont->DrawText( NULL, strText, nCount, prcDest, dwTextFormat, pElement->FontColor.Current );

	mov	ecx, DWORD PTR _pElement$[ebp]
	add	ecx, 92					; 0000005cH
	call	??BD3DXCOLOR@@QBEKXZ			; D3DXCOLOR::operator unsigned long
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _dwTextFormat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prcDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pFontNode$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	eax, DWORD PTR _pFontNode$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 1599 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@CalcTextRe

; 1600 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN3@CalcTextRe
$LN1@CalcTextRe:

; 1601 : 
; 1602 :     return S_OK;

	xor	eax, eax
$LN3@CalcTextRe:

; 1603 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CalcTextRect@CDXUTDialog@@QAEJPBDPAVCDXUTElement@@PAUtagRECT@@H@Z ENDP ; CDXUTDialog::CalcTextRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z
_TEXT	SEGMENT
tv289 = -396						; size = 4
tv287 = -396						; size = 4
_vPos$ = -196						; size = 12
_matTransform$ = -176					; size = 64
_fScaleY$ = -96						; size = 4
_fScaleX$ = -84						; size = 4
_pTextureNode$ = -72					; size = 4
_rcScreen$ = -60					; size = 16
_rcTexture$ = -36					; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pElement$ = 8						; size = 4
_prcDest$ = 12						; size = 4
?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z PROC ; CDXUTDialog::DrawSprite, COMDAT
; _this$ = ecx

; 1552 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1553 :     // No need to draw fully transparent layers
; 1554 :     if( pElement->TextureColor.Current.a == 0 )

	mov	eax, DWORD PTR _pElement$[ebx]
	movss	xmm0, DWORD PTR [eax+64]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@DrawSprite

; 1555 :         return S_OK;

	xor	eax, eax
	jmp	$LN4@DrawSprite
$LN3@DrawSprite:

; 1556 : 
; 1557 :     RECT rcTexture = pElement->rcTexture;

	mov	eax, DWORD PTR _pElement$[ebx]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcTexture$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcTexture$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcTexture$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcTexture$[ebp+12], edx

; 1558 :     
; 1559 :     RECT rcScreen = *prcDest;

	mov	eax, DWORD PTR _prcDest$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcScreen$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcScreen$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcScreen$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcScreen$[ebp+12], edx

; 1560 :     OffsetRect( &rcScreen, m_x, m_y );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+282]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+278]
	push	eax
	lea	ecx, DWORD PTR _rcScreen$[ebp]
	push	ecx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1561 : 
; 1562 :     // If caption is enabled, offset the Y position by its height.
; 1563 :     if( m_bCaption )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN2@DrawSprite

; 1564 :         OffsetRect( &rcScreen, 0, m_nCaptionHeight );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+294]
	push	ecx
	push	0
	lea	edx, DWORD PTR _rcScreen$[ebp]
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawSprite:

; 1565 : 
; 1566 :     DXUTTextureNode* pTextureNode = GetTexture( pElement->iTexture );

	mov	eax, DWORD PTR _pElement$[ebx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTexture@CDXUTDialog@@QAEPAUDXUTTextureNode@@I@Z ; CDXUTDialog::GetTexture
	mov	DWORD PTR _pTextureNode$[ebp], eax

; 1567 :     if( pTextureNode == NULL )

	cmp	DWORD PTR _pTextureNode$[ebp], 0
	jne	SHORT $LN1@DrawSprite

; 1568 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN4@DrawSprite
$LN1@DrawSprite:

; 1569 :     
; 1570 :     float fScaleX = (float) RectWidth( rcScreen ) / RectWidth( rcTexture );

	lea	eax, DWORD PTR _rcScreen$[ebp]
	push	eax
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	lea	ecx, DWORD PTR _rcTexture$[ebp]
	push	ecx
	movss	DWORD PTR tv287[ebp], xmm0
	call	?RectWidth@@YAHAAUtagRECT@@@Z		; RectWidth
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv287[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _fScaleX$[ebp], xmm1

; 1571 :     float fScaleY = (float) RectHeight( rcScreen ) / RectHeight( rcTexture );

	lea	eax, DWORD PTR _rcScreen$[ebp]
	push	eax
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	cvtsi2ss xmm0, eax
	lea	ecx, DWORD PTR _rcTexture$[ebp]
	push	ecx
	movss	DWORD PTR tv289[ebp], xmm0
	call	?RectHeight@@YAHAAUtagRECT@@@Z		; RectHeight
	add	esp, 4
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv289[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _fScaleY$[ebp], xmm1

; 1572 : 
; 1573 :     D3DXMATRIXA16 matTransform;

	lea	ecx, DWORD PTR _matTransform$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16

; 1574 :     D3DXMatrixScaling( &matTransform, fScaleX, fScaleY, 1.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fScaleY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fScaleX$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _matTransform$[ebp]
	push	eax
	call	_D3DXMatrixScaling@16

; 1575 : 
; 1576 :     m_pManager->m_pSprite->SetTransform( &matTransform );

	mov	esi, esp
	lea	eax, DWORD PTR _matTransform$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+314]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+314]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1577 :     
; 1578 :     D3DXVECTOR3 vPos( (float)rcScreen.left, (float)rcScreen.top, 0.0f );

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vPos$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 1579 : 
; 1580 :     vPos.x /= fScaleX;

	movss	xmm0, DWORD PTR _vPos$[ebp]
	divss	xmm0, DWORD PTR _fScaleX$[ebp]
	movss	DWORD PTR _vPos$[ebp], xmm0

; 1581 :     vPos.y /= fScaleY;

	movss	xmm0, DWORD PTR _vPos$[ebp+4]
	divss	xmm0, DWORD PTR _fScaleY$[ebp]
	movss	DWORD PTR _vPos$[ebp+4], xmm0

; 1582 : 
; 1583 :     return m_pManager->m_pSprite->Draw( pTextureNode->pTexture, &rcTexture, NULL, &vPos, pElement->TextureColor.Current );

	mov	ecx, DWORD PTR _pElement$[ebx]
	add	ecx, 52					; 00000034H
	call	??BD3DXCOLOR@@QBEKXZ			; D3DXCOLOR::operator unsigned long
	mov	esi, esp
	push	eax
	lea	eax, DWORD PTR _vPos$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _rcTexture$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTextureNode$[ebp]
	mov	eax, DWORD PTR [edx+260]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+314]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+314]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@DrawSprite:

; 1584 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@DrawSprite
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN11@DrawSprite:
	DD	4
	DD	$LN10@DrawSprite
$LN10@DrawSprite:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN6@DrawSprite
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN7@DrawSprite
	DD	-176					; ffffff50H
	DD	64					; 00000040H
	DD	$LN8@DrawSprite
	DD	-196					; ffffff3cH
	DD	12					; 0000000cH
	DD	$LN9@DrawSprite
$LN9@DrawSprite:
	DB	118					; 00000076H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN8@DrawSprite:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN7@DrawSprite:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN6@DrawSprite:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
?DrawSprite@CDXUTDialog@@QAEJPAVCDXUTElement@@PAUtagRECT@@@Z ENDP ; CDXUTDialog::DrawSprite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?DrawPolyLine@CDXUTDialog@@QAEJPAUtagPOINT@@IK@Z
_TEXT	SEGMENT
$T1 = -296						; size = 4
$T2 = -284						; size = 4
_pDecl$ = -80						; size = 4
_pd3dDevice$ = -68					; size = 4
_i$3 = -56						; size = 4
_pt$ = -44						; size = 4
_pVertex$ = -32						; size = 4
_vertices$ = -20					; size = 4
_this$ = -8						; size = 4
_apPoints$ = 8						; size = 4
_nNumPoints$ = 12					; size = 4
_color$ = 16						; size = 4
?DrawPolyLine@CDXUTDialog@@QAEJPAUtagPOINT@@IK@Z PROC	; CDXUTDialog::DrawPolyLine, COMDAT
; _this$ = ecx

; 1503 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1504 :     DXUT_SCREEN_VERTEX* vertices = new DXUT_SCREEN_VERTEX[ nNumPoints ];

	xor	ecx, ecx
	mov	eax, DWORD PTR _nNumPoints$[ebp]
	mov	edx, 28					; 0000001cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _vertices$[ebp], eax

; 1505 :     if( vertices == NULL )

	cmp	DWORD PTR _vertices$[ebp], 0
	jne	SHORT $LN5@DrawPolyLi

; 1506 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN6@DrawPolyLi
$LN5@DrawPolyLi:

; 1507 : 
; 1508 :     DXUT_SCREEN_VERTEX* pVertex = vertices;

	mov	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR _pVertex$[ebp], eax

; 1509 :     POINT* pt = apPoints;

	mov	eax, DWORD PTR _apPoints$[ebp]
	mov	DWORD PTR _pt$[ebp], eax

; 1510 :     for( UINT i=0; i < nNumPoints; i++ )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@DrawPolyLi
$LN3@DrawPolyLi:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@DrawPolyLi:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _nNumPoints$[ebp]
	jae	$LN2@DrawPolyLi

; 1511 :     {
; 1512 :         pVertex->x = m_x + (float) pt->x;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+278]
	mov	ecx, DWORD PTR _pt$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _pVertex$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1513 :         pVertex->y = m_y + (float) pt->y;

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+282]
	mov	ecx, DWORD PTR _pt$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+4]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _pVertex$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 1514 :         pVertex->z = 0.5f;

	mov	eax, DWORD PTR _pVertex$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [eax+8], xmm0

; 1515 :         pVertex->h = 1.0f;

	mov	eax, DWORD PTR _pVertex$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 1516 :         pVertex->color = color;

	mov	eax, DWORD PTR _pVertex$[ebp]
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1517 :         pVertex->tu = 0.0f;

	mov	eax, DWORD PTR _pVertex$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 1518 :         pVertex->tv = 0.0f;

	mov	eax, DWORD PTR _pVertex$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 1519 : 
; 1520 :         pVertex++;

	mov	eax, DWORD PTR _pVertex$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR _pVertex$[ebp], eax

; 1521 :         pt++;

	mov	eax, DWORD PTR _pt$[ebp]
	add	eax, 8
	mov	DWORD PTR _pt$[ebp], eax

; 1522 :     }

	jmp	$LN3@DrawPolyLi
$LN2@DrawPolyLi:

; 1523 : 
; 1524 :     IDirect3DDevice9* pd3dDevice = m_pManager->GetD3DDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	call	?GetD3DDevice@CDXUTDialogResourceManager@@QAEPAUIDirect3DDevice9@@XZ ; CDXUTDialogResourceManager::GetD3DDevice
	mov	DWORD PTR _pd3dDevice$[ebp], eax

; 1525 : 
; 1526 :     // Since we're doing our own drawing here we need to flush the sprites
; 1527 :     m_pManager->m_pSprite->Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1528 :     IDirect3DVertexDeclaration9 *pDecl = NULL;

	mov	DWORD PTR _pDecl$[ebp], 0

; 1529 :     pd3dDevice->GetVertexDeclaration( &pDecl );  // Preserve the sprite's current vertex decl

	mov	esi, esp
	lea	eax, DWORD PTR _pDecl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+352]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1530 :     pd3dDevice->SetFVF( DXUT_SCREEN_VERTEX::FVF );

	mov	esi, esp
	mov	eax, DWORD PTR ?FVF@DXUT_SCREEN_VERTEX@@2KA ; DXUT_SCREEN_VERTEX::FVF
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+356]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1531 : 
; 1532 :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_SELECTARG2 );

	mov	esi, esp
	push	3
	push	1
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1533 :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2 );

	mov	esi, esp
	push	3
	push	4
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1534 : 
; 1535 :     pd3dDevice->DrawPrimitiveUP( D3DPT_LINESTRIP, nNumPoints - 1, vertices, sizeof(DXUT_SCREEN_VERTEX) );

	mov	esi, esp
	push	28					; 0000001cH
	mov	eax, DWORD PTR _vertices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nNumPoints$[ebp]
	sub	ecx, 1
	push	ecx
	push	3
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1536 : 
; 1537 :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1538 :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1539 : 
; 1540 :     // Restore the vertex decl
; 1541 :     pd3dDevice->SetVertexDeclaration( pDecl );

	mov	esi, esp
	mov	eax, DWORD PTR _pDecl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+348]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1542 :     pDecl->Release();

	mov	eax, DWORD PTR _pDecl$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDecl$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1543 : 
; 1544 :     SAFE_DELETE_ARRAY( vertices );

	cmp	DWORD PTR _vertices$[ebp], 0
	je	SHORT $LN1@DrawPolyLi
	mov	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _vertices$[ebp], 0
$LN1@DrawPolyLi:

; 1545 :     return S_OK;

	xor	eax, eax
$LN6@DrawPolyLi:

; 1546 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@DrawPolyLi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN10@DrawPolyLi:
	DD	1
	DD	$LN9@DrawPolyLi
$LN9@DrawPolyLi:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN8@DrawPolyLi
$LN8@DrawPolyLi:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
?DrawPolyLine@CDXUTDialog@@QAEJPAUtagPOINT@@IK@Z ENDP	; CDXUTDialog::DrawPolyLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z
_TEXT	SEGMENT
_pDecl$ = -180						; size = 4
_pd3dDevice$ = -168					; size = 4
_vertices$ = -156					; size = 112
_rcScreen$ = -36					; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pRect$ = 8						; size = 4
_color$ = 12						; size = 4
?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z PROC		; CDXUTDialog::DrawRect, COMDAT
; _this$ = ecx

; 1461 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1462 :     RECT rcScreen = *pRect;

	mov	eax, DWORD PTR _pRect$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rcScreen$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rcScreen$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rcScreen$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rcScreen$[ebp+12], edx

; 1463 :     OffsetRect( &rcScreen, m_x, m_y );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+282]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+278]
	push	eax
	lea	ecx, DWORD PTR _rcScreen$[ebp]
	push	ecx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1464 : 
; 1465 :     // If caption is enabled, offset the Y position by its height.
; 1466 :     if( m_bCaption )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN1@DrawRect

; 1467 :         OffsetRect( &rcScreen, 0, m_nCaptionHeight );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+294]
	push	ecx
	push	0
	lea	edx, DWORD PTR _rcScreen$[ebp]
	push	edx
	call	DWORD PTR __imp__OffsetRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawRect:

; 1468 : 
; 1469 :     DXUT_SCREEN_VERTEX vertices[4] =
; 1470 :     {
; 1471 :         (float) rcScreen.left -0.5f,  (float) rcScreen.top -0.5f,    0.5f, 1.0f, color, 0, 0,
; 1472 :         (float) rcScreen.right -0.5f, (float) rcScreen.top -0.5f,    0.5f, 1.0f, color, 0, 0, 
; 1473 :         (float) rcScreen.right -0.5f, (float) rcScreen.bottom -0.5f, 0.5f, 1.0f, color, 0, 0, 
; 1474 :         (float) rcScreen.left -0.5f,  (float) rcScreen.bottom -0.5f, 0.5f, 1.0f, color, 0, 0,
; 1475 :     };

	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp+4]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+12], xmm0
	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _vertices$[ebp+16], eax
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+20], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+24], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp+8]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+28], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp+4]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+32], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+36], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+40], xmm0
	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _vertices$[ebp+44], eax
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+48], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+52], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp+8]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+56], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp+12]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+60], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+64], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+68], xmm0
	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _vertices$[ebp+72], eax
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+76], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+80], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+84], xmm0
	cvtsi2ss xmm0, DWORD PTR _rcScreen$[ebp+12]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+88], xmm0
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _vertices$[ebp+92], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _vertices$[ebp+96], xmm0
	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _vertices$[ebp+100], eax
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+104], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _vertices$[ebp+108], xmm0

; 1476 : 
; 1477 :     IDirect3DDevice9* pd3dDevice = m_pManager->GetD3DDevice();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	call	?GetD3DDevice@CDXUTDialogResourceManager@@QAEPAUIDirect3DDevice9@@XZ ; CDXUTDialogResourceManager::GetD3DDevice
	mov	DWORD PTR _pd3dDevice$[ebp], eax

; 1478 : 
; 1479 :     // Since we're doing our own drawing here we need to flush the sprites
; 1480 :     m_pManager->m_pSprite->Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+314]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1481 :     IDirect3DVertexDeclaration9 *pDecl = NULL;

	mov	DWORD PTR _pDecl$[ebp], 0

; 1482 :     pd3dDevice->GetVertexDeclaration( &pDecl );  // Preserve the sprite's current vertex decl

	mov	esi, esp
	lea	eax, DWORD PTR _pDecl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+352]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1483 :     pd3dDevice->SetFVF( DXUT_SCREEN_VERTEX::FVF );

	mov	esi, esp
	mov	eax, DWORD PTR ?FVF@DXUT_SCREEN_VERTEX@@2KA ; DXUT_SCREEN_VERTEX::FVF
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+356]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1484 : 
; 1485 :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_SELECTARG2 );

	mov	esi, esp
	push	3
	push	1
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1486 :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2 );

	mov	esi, esp
	push	3
	push	4
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1487 : 
; 1488 :     pd3dDevice->DrawPrimitiveUP( D3DPT_TRIANGLEFAN, 2, vertices, sizeof(DXUT_SCREEN_VERTEX) );

	mov	esi, esp
	push	28					; 0000001cH
	lea	eax, DWORD PTR _vertices$[ebp]
	push	eax
	push	2
	push	6
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+332]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1489 : 
; 1490 :     pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1491 :     pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+268]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1492 : 
; 1493 :     // Restore the vertex decl
; 1494 :     pd3dDevice->SetVertexDeclaration( pDecl );

	mov	esi, esp
	mov	eax, DWORD PTR _pDecl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+348]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1495 :     pDecl->Release();

	mov	eax, DWORD PTR _pDecl$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pDecl$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1496 : 
; 1497 :     return S_OK;

	xor	eax, eax

; 1498 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DrawRect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@DrawRect:
	DD	3
	DD	$LN7@DrawRect
$LN7@DrawRect:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN4@DrawRect
	DD	-156					; ffffff64H
	DD	112					; 00000070H
	DD	$LN5@DrawRect
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN6@DrawRect
$LN6@DrawRect:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN5@DrawRect:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN4@DrawRect:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?DrawRect@CDXUTDialog@@QAEJPAUtagRECT@@K@Z ENDP		; CDXUTDialog::DrawRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pControl$ = 8						; size = 4
?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z PROC	; CDXUTDialog::RequestFocus, COMDAT
; _this$ = ecx

; 1444 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1445 :     if( s_pControlFocus == pControl )

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	cmp	eax, DWORD PTR _pControl$[ebp]
	jne	SHORT $LN3@RequestFoc

; 1446 :         return;

	jmp	SHORT $LN4@RequestFoc
$LN3@RequestFoc:

; 1447 : 
; 1448 :     if( !pControl->CanHaveFocus() )

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@RequestFoc

; 1449 :         return;

	jmp	SHORT $LN4@RequestFoc
$LN2@RequestFoc:

; 1450 : 
; 1451 :     if( s_pControlFocus )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN1@RequestFoc

; 1452 :         s_pControlFocus->OnFocusOut();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@RequestFoc:

; 1453 : 
; 1454 :     pControl->OnFocusIn();

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1455 :     s_pControlFocus = pControl;

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, eax ; CDXUTDialog::s_pControlFocus
$LN4@RequestFoc:

; 1456 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RequestFocus@CDXUTDialog@@QAEXPAVCDXUTControl@@@Z ENDP	; CDXUTDialog::RequestFocus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nEvent$ = 8						; size = 4
_bTriggeredByUser$ = 12					; size = 1
_pControl$ = 16						; size = 4
?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z PROC	; CDXUTDialog::SendEvent, COMDAT
; _this$ = ecx

; 490  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 491  :     // If no callback has been registered there's nowhere to send the event to
; 492  :     if( m_pCallbackEvent == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+318], 0
	jne	SHORT $LN2@SendEvent

; 493  :         return;

	jmp	SHORT $LN3@SendEvent
$LN2@SendEvent:

; 494  : 
; 495  :     // Discard events triggered programatically if these types of events haven't been
; 496  :     // enabled
; 497  :     if( !bTriggeredByUser && !m_bNonUserEvents )

	movzx	eax, BYTE PTR _bTriggeredByUser$[ebp]
	test	eax, eax
	jne	SHORT $LN1@SendEvent
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@SendEvent

; 498  :         return;

	jmp	SHORT $LN3@SendEvent
$LN1@SendEvent:

; 499  : 
; 500  :     m_pCallbackEvent( nEvent, pControl->GetID(), pControl, m_pCallbackEventUserContext );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+322]
	push	ecx
	mov	edx, DWORD PTR _pControl$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pControl$[ebp]
	call	?GetID@CDXUTControl@@QBEHXZ		; CDXUTControl::GetID
	push	eax
	mov	eax, DWORD PTR _nEvent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+318]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@SendEvent:

; 501  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SendEvent@CDXUTDialog@@QAEXI_NPAVCDXUTControl@@@Z ENDP	; CDXUTDialog::SendEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetDefaultElement@CDXUTDialog@@QAEPAVCDXUTElement@@II@Z
_TEXT	SEGMENT
_pElementHolder$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_nControlType$ = 8					; size = 4
_iElement$ = 12						; size = 4
?GetDefaultElement@CDXUTDialog@@QAEPAVCDXUTElement@@II@Z PROC ; CDXUTDialog::GetDefaultElement, COMDAT
; _this$ = ecx

; 996  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  :     for( int i=0; i < m_DefaultElements.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@GetDefault
$LN3@GetDefault:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@GetDefault:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?GetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QBEHXZ ; CGrowableArray<DXUTElementHolder *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@GetDefault

; 998  :     {
; 999  :         DXUTElementHolder* pElementHolder = m_DefaultElements.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?GetAt@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEAAPAUDXUTElementHolder@@H@Z ; CGrowableArray<DXUTElementHolder *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pElementHolder$1[ebp], ecx

; 1000 :         
; 1001 :         if( pElementHolder->nControlType == nControlType &&
; 1002 :             pElementHolder->iElement == iElement )

	mov	eax, DWORD PTR _pElementHolder$1[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _nControlType$[ebp]
	jne	SHORT $LN1@GetDefault
	mov	eax, DWORD PTR _pElementHolder$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _iElement$[ebp]
	jne	SHORT $LN1@GetDefault

; 1003 :         {
; 1004 :             return &pElementHolder->Element;

	mov	eax, DWORD PTR _pElementHolder$1[ebp]
	add	eax, 8
	jmp	SHORT $LN5@GetDefault
$LN1@GetDefault:

; 1005 :         }
; 1006 :     }

	jmp	SHORT $LN3@GetDefault
$LN2@GetDefault:

; 1007 :     
; 1008 :     return NULL;

	xor	eax, eax
$LN5@GetDefault:

; 1009 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetDefaultElement@CDXUTDialog@@QAEPAVCDXUTElement@@II@Z ENDP ; CDXUTDialog::GetDefaultElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z
_TEXT	SEGMENT
tv86 = -280						; size = 4
$T2 = -272						; size = 4
$T3 = -260						; size = 4
_pNewHolder$ = -56					; size = 4
_pElementHolder$4 = -44					; size = 4
_i$5 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_nControlType$ = 8					; size = 4
_iElement$ = 12						; size = 4
_pElement$ = 16						; size = 4
?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z PROC ; CDXUTDialog::SetDefaultElement, COMDAT
; _this$ = ecx

; 965  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 966  :     // If this Element type already exist in the list, simply update the stored Element
; 967  :     for( int i=0; i < m_DefaultElements.GetSize(); i++ )

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN5@SetDefault
$LN4@SetDefault:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN5@SetDefault:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?GetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QBEHXZ ; CGrowableArray<DXUTElementHolder *>::GetSize
	cmp	DWORD PTR _i$5[ebp], eax
	jge	SHORT $LN3@SetDefault

; 968  :     {
; 969  :         DXUTElementHolder* pElementHolder = m_DefaultElements.GetAt( i );

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?GetAt@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEAAPAUDXUTElementHolder@@H@Z ; CGrowableArray<DXUTElementHolder *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pElementHolder$4[ebp], ecx

; 970  :         
; 971  :         if( pElementHolder->nControlType == nControlType &&
; 972  :             pElementHolder->iElement == iElement )

	mov	eax, DWORD PTR _pElementHolder$4[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _nControlType$[ebp]
	jne	SHORT $LN2@SetDefault
	mov	eax, DWORD PTR _pElementHolder$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _iElement$[ebp]
	jne	SHORT $LN2@SetDefault

; 973  :         {
; 974  :             pElementHolder->Element = *pElement;

	mov	edi, DWORD PTR _pElementHolder$4[ebp]
	add	edi, 8
	mov	ecx, 27					; 0000001bH
	mov	esi, DWORD PTR _pElement$[ebp]
	rep movsd

; 975  :             return S_OK;

	xor	eax, eax
	jmp	$LN6@SetDefault
$LN2@SetDefault:

; 976  :         }
; 977  :     }

	jmp	SHORT $LN4@SetDefault
$LN3@SetDefault:

; 978  : 
; 979  :     // Otherwise, add a new entry
; 980  :     DXUTElementHolder* pNewHolder;
; 981  :     pNewHolder = new DXUTElementHolder;

	push	116					; 00000074H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN8@SetDefault
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0DXUTElementHolder@@QAE@XZ
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN9@SetDefault
$LN8@SetDefault:
	mov	DWORD PTR tv86[ebp], 0
$LN9@SetDefault:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pNewHolder$[ebp], ecx

; 982  :     if( pNewHolder == NULL )

	cmp	DWORD PTR _pNewHolder$[ebp], 0
	jne	SHORT $LN1@SetDefault

; 983  :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN6@SetDefault
$LN1@SetDefault:

; 984  : 
; 985  :     pNewHolder->nControlType = nControlType;

	mov	eax, DWORD PTR _pNewHolder$[ebp]
	mov	ecx, DWORD PTR _nControlType$[ebp]
	mov	DWORD PTR [eax], ecx

; 986  :     pNewHolder->iElement = iElement;

	mov	eax, DWORD PTR _pNewHolder$[ebp]
	mov	ecx, DWORD PTR _iElement$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 987  :     pNewHolder->Element = *pElement;

	mov	edi, DWORD PTR _pNewHolder$[ebp]
	add	edi, 8
	mov	ecx, 27					; 0000001bH
	mov	esi, DWORD PTR _pElement$[ebp]
	rep movsd

; 988  : 
; 989  :     m_DefaultElements.Add( pNewHolder );

	lea	eax, DWORD PTR _pNewHolder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?Add@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEJABQAUDXUTElementHolder@@@Z ; CGrowableArray<DXUTElementHolder *>::Add

; 990  :     return S_OK;

	xor	eax, eax
$LN6@SetDefault:

; 991  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SetDefault
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN14@SetDefault:
	DD	1
	DD	$LN13@SetDefault
$LN13@SetDefault:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN11@SetDefault
$LN11@SetDefault:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	72					; 00000048H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDefaultElement@CDXUTDialog@@QAEJIIPAVCDXUTElement@@@Z ENDP ; CDXUTDialog::SetDefaultElement
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ClearComboBox@CDXUTDialog@@QAEXH@Z
_TEXT	SEGMENT
_pComboBox$ = -20					; size = 4
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
?ClearComboBox@CDXUTDialog@@QAEXH@Z PROC		; CDXUTDialog::ClearComboBox, COMDAT
; _this$ = ecx

; 1431 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1432 :     CDXUTComboBox* pComboBox = GetComboBox( ID );

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetComboBox@CDXUTDialog@@QAEPAVCDXUTComboBox@@H@Z ; CDXUTDialog::GetComboBox
	mov	DWORD PTR _pComboBox$[ebp], eax

; 1433 :     if( pComboBox == NULL )

	cmp	DWORD PTR _pComboBox$[ebp], 0
	jne	SHORT $LN1@ClearCombo

; 1434 :         return;

	jmp	SHORT $LN2@ClearCombo
$LN1@ClearCombo:

; 1435 : 
; 1436 :     pComboBox->RemoveAllItems();

	mov	ecx, DWORD PTR _pComboBox$[ebp]
	call	?RemoveAllItems@CDXUTComboBox@@QAEXXZ	; CDXUTComboBox::RemoveAllItems
$LN2@ClearCombo:

; 1437 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearComboBox@CDXUTDialog@@QAEXH@Z ENDP		; CDXUTDialog::ClearComboBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?ClearRadioButtonGroup@CDXUTDialog@@QAEXI@Z
_TEXT	SEGMENT
_pRadioButton$1 = -44					; size = 4
_pControl$2 = -32					; size = 4
_i$3 = -20						; size = 4
_this$ = -8						; size = 4
_nButtonGroup$ = 8					; size = 4
?ClearRadioButtonGroup@CDXUTDialog@@QAEXI@Z PROC	; CDXUTDialog::ClearRadioButtonGroup, COMDAT
; _this$ = ecx

; 1411 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1412 :     // Find all radio buttons with the given group number
; 1413 :     for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN5@ClearRadio
$LN4@ClearRadio:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN5@ClearRadio:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$3[ebp], eax
	jge	SHORT $LN6@ClearRadio

; 1414 :     {
; 1415 :         CDXUTControl* pControl = m_Controls.GetAt( i );

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$2[ebp], ecx

; 1416 : 
; 1417 :         if( pControl->GetType() == DXUT_CONTROL_RADIOBUTTON )

	mov	ecx, DWORD PTR _pControl$2[ebp]
	call	?GetType@CDXUTControl@@QBEIXZ		; CDXUTControl::GetType
	cmp	eax, 3
	jne	SHORT $LN2@ClearRadio

; 1418 :         {
; 1419 :             CDXUTRadioButton* pRadioButton = (CDXUTRadioButton*) pControl;

	mov	eax, DWORD PTR _pControl$2[ebp]
	mov	DWORD PTR _pRadioButton$1[ebp], eax

; 1420 : 
; 1421 :             if( pRadioButton->GetButtonGroup() == nButtonGroup )

	mov	ecx, DWORD PTR _pRadioButton$1[ebp]
	call	?GetButtonGroup@CDXUTRadioButton@@QAEIXZ ; CDXUTRadioButton::GetButtonGroup
	cmp	eax, DWORD PTR _nButtonGroup$[ebp]
	jne	SHORT $LN2@ClearRadio

; 1422 :                 pRadioButton->SetChecked( false, false );

	push	0
	push	0
	mov	ecx, DWORD PTR _pRadioButton$1[ebp]
	call	?SetChecked@CDXUTRadioButton@@QAEX_N0@Z	; CDXUTRadioButton::SetChecked
$LN2@ClearRadio:

; 1423 :         }
; 1424 :     }

	jmp	SHORT $LN4@ClearRadio
$LN6@ClearRadio:

; 1425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearRadioButtonGroup@CDXUTDialog@@QAEXI@Z ENDP	; CDXUTDialog::ClearRadioButtonGroup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetControlEnabled@CDXUTDialog@@QAEXH_N@Z
_TEXT	SEGMENT
_pControl$ = -20					; size = 4
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
_bEnabled$ = 12						; size = 1
?SetControlEnabled@CDXUTDialog@@QAEXH_N@Z PROC		; CDXUTDialog::SetControlEnabled, COMDAT
; _this$ = ecx

; 925  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 926  :     CDXUTControl* pControl = GetControl( ID );

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@H@Z ; CDXUTDialog::GetControl
	mov	DWORD PTR _pControl$[ebp], eax

; 927  :     if( pControl == NULL )

	cmp	DWORD PTR _pControl$[ebp], 0
	jne	SHORT $LN1@SetControl

; 928  :         return;

	jmp	SHORT $LN2@SetControl
$LN1@SetControl:

; 929  : 
; 930  :     pControl->SetEnabled( bEnabled );

	mov	esi, esp
	movzx	eax, BYTE PTR _bEnabled$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pControl$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pControl$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SetControl:

; 931  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetControlEnabled@CDXUTDialog@@QAEXH_N@Z ENDP		; CDXUTDialog::SetControlEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetControlEnabled@CDXUTDialog@@QAE_NH@Z
_TEXT	SEGMENT
_pControl$ = -20					; size = 4
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
?GetControlEnabled@CDXUTDialog@@QAE_NH@Z PROC		; CDXUTDialog::GetControlEnabled, COMDAT
; _this$ = ecx

; 913  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  :     CDXUTControl* pControl = GetControl( ID );

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@H@Z ; CDXUTDialog::GetControl
	mov	DWORD PTR _pControl$[ebp], eax

; 915  :     if( pControl == NULL )

	cmp	DWORD PTR _pControl$[ebp], 0
	jne	SHORT $LN1@GetControl

; 916  :         return false;

	xor	al, al
	jmp	SHORT $LN2@GetControl
$LN1@GetControl:

; 917  : 
; 918  :     return pControl->GetEnabled();

	mov	eax, DWORD PTR _pControl$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@GetControl:

; 919  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetControlEnabled@CDXUTDialog@@QAE_NH@Z ENDP		; CDXUTDialog::GetControlEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetControlAtPoint@CDXUTDialog@@QAEPAVCDXUTControl@@UtagPOINT@@@Z
_TEXT	SEGMENT
_pControl$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_pt$ = 8						; size = 8
?GetControlAtPoint@CDXUTDialog@@QAEPAVCDXUTControl@@UtagPOINT@@@Z PROC ; CDXUTDialog::GetControlAtPoint, COMDAT
; _this$ = ecx

; 886  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  :     // Search through all child controls for the first one which
; 888  :     // contains the mouse point
; 889  :     for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@GetControl
$LN4@GetControl:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@GetControl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	$LN3@GetControl

; 890  :     {
; 891  :         CDXUTControl* pControl = m_Controls.GetAt(i);

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$1[ebp], ecx

; 892  : 
; 893  :         if( pControl == NULL )

	cmp	DWORD PTR _pControl$1[ebp], 0
	jne	SHORT $LN2@GetControl

; 894  :         {
; 895  :             continue;

	jmp	SHORT $LN4@GetControl
$LN2@GetControl:

; 896  :         }
; 897  : 
; 898  :         // We only return the current control if it is visible
; 899  :         // and enabled.  Because GetControlAtPoint() is used to do mouse
; 900  :         // hittest, it makes sense to perform this filtering.
; 901  :         if( pControl->ContainsPoint( pt ) && pControl->GetEnabled() && pControl->GetVisible() )

	mov	esi, esp
	mov	eax, DWORD PTR _pt$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pControl$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pControl$1[ebp]
	mov	edx, DWORD PTR [eax+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetControl
	mov	eax, DWORD PTR _pControl$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$1[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetControl
	mov	eax, DWORD PTR _pControl$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$1[ebp]
	mov	eax, DWORD PTR [edx+68]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@GetControl

; 902  :         {
; 903  :             return pControl;

	mov	eax, DWORD PTR _pControl$1[ebp]
	jmp	SHORT $LN6@GetControl
$LN1@GetControl:

; 904  :         }
; 905  :     }

	jmp	$LN4@GetControl
$LN3@GetControl:

; 906  : 
; 907  :     return NULL;

	xor	eax, eax
$LN6@GetControl:

; 908  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetControlAtPoint@CDXUTDialog@@QAEPAVCDXUTControl@@UtagPOINT@@@Z ENDP ; CDXUTDialog::GetControlAtPoint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@HI@Z
_TEXT	SEGMENT
_pControl$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
_nControlType$ = 12					; size = 4
?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@HI@Z PROC	; CDXUTDialog::GetControl, COMDAT
; _this$ = ecx

; 1349 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1350 :     // Try to find the control with the given ID
; 1351 :     for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@GetControl
$LN3@GetControl:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@GetControl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@GetControl

; 1352 :     {
; 1353 :         CDXUTControl* pControl = m_Controls.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$1[ebp], ecx

; 1354 : 
; 1355 :         if( pControl->GetID() == ID && pControl->GetType() == nControlType )

	mov	ecx, DWORD PTR _pControl$1[ebp]
	call	?GetID@CDXUTControl@@QBEHXZ		; CDXUTControl::GetID
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN1@GetControl
	mov	ecx, DWORD PTR _pControl$1[ebp]
	call	?GetType@CDXUTControl@@QBEIXZ		; CDXUTControl::GetType
	cmp	eax, DWORD PTR _nControlType$[ebp]
	jne	SHORT $LN1@GetControl

; 1356 :         {
; 1357 :             return pControl;

	mov	eax, DWORD PTR _pControl$1[ebp]
	jmp	SHORT $LN5@GetControl
$LN1@GetControl:

; 1358 :         }
; 1359 :     }

	jmp	SHORT $LN3@GetControl
$LN2@GetControl:

; 1360 : 
; 1361 :     // Not found
; 1362 :     return NULL;

	xor	eax, eax
$LN5@GetControl:

; 1363 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@HI@Z ENDP	; CDXUTDialog::GetControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@H@Z
_TEXT	SEGMENT
_pControl$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@H@Z PROC	; CDXUTDialog::GetControl, COMDAT
; _this$ = ecx

; 1329 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1330 :     // Try to find the control with the given ID
; 1331 :     for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@GetControl
$LN3@GetControl:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@GetControl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@GetControl

; 1332 :     {
; 1333 :         CDXUTControl* pControl = m_Controls.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$1[ebp], ecx

; 1334 : 
; 1335 :         if( pControl->GetID() == ID )

	mov	ecx, DWORD PTR _pControl$1[ebp]
	call	?GetID@CDXUTControl@@QBEHXZ		; CDXUTControl::GetID
	cmp	eax, DWORD PTR _ID$[ebp]
	jne	SHORT $LN1@GetControl

; 1336 :         {
; 1337 :             return pControl;

	mov	eax, DWORD PTR _pControl$1[ebp]
	jmp	SHORT $LN5@GetControl
$LN1@GetControl:

; 1338 :         }
; 1339 :     }

	jmp	SHORT $LN3@GetControl
$LN2@GetControl:

; 1340 : 
; 1341 :     // Not found
; 1342 :     return NULL;

	xor	eax, eax
$LN5@GetControl:

; 1343 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@H@Z ENDP	; CDXUTDialog::GetControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.h
;	COMDAT ?GetComboBox@CDXUTDialog@@QAEPAVCDXUTComboBox@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ID$ = 8						; size = 4
?GetComboBox@CDXUTDialog@@QAEPAVCDXUTComboBox@@H@Z PROC	; CDXUTDialog::GetComboBox, COMDAT
; _this$ = ecx

; 151  :     CDXUTComboBox*    GetComboBox( int ID ) { return (CDXUTComboBox*) GetControl( ID, DXUT_CONTROL_COMBOBOX ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetControl@CDXUTDialog@@QAEPAVCDXUTControl@@HI@Z ; CDXUTDialog::GetControl
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetComboBox@CDXUTDialog@@QAEPAVCDXUTComboBox@@H@Z ENDP	; CDXUTDialog::GetComboBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?InitControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z
_TEXT	SEGMENT
_pElementHolder$1 = -44					; size = 4
_i$2 = -32						; size = 4
_this$ = -8						; size = 4
_pControl$ = 8						; size = 4
?InitControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z PROC	; CDXUTDialog::InitControl, COMDAT
; _this$ = ecx

; 1284 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1285 :     HRESULT hr;
; 1286 : 
; 1287 :     if( pControl == NULL )

	cmp	DWORD PTR _pControl$[ebp], 0
	jne	SHORT $LN5@InitContro

; 1288 :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN6@InitContro
$LN5@InitContro:

; 1289 : 
; 1290 :     pControl->m_Index = m_Controls.GetSize();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	mov	ecx, DWORD PTR _pControl$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1291 :     
; 1292 :     // Look for a default Element entries
; 1293 :     for( int i=0; i < m_DefaultElements.GetSize(); i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@InitContro
$LN3@InitContro:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@InitContro:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?GetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QBEHXZ ; CGrowableArray<DXUTElementHolder *>::GetSize
	cmp	DWORD PTR _i$2[ebp], eax
	jge	SHORT $LN2@InitContro

; 1294 :     {
; 1295 :         DXUTElementHolder* pElementHolder = m_DefaultElements.GetAt( i );

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?GetAt@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEAAPAUDXUTElementHolder@@H@Z ; CGrowableArray<DXUTElementHolder *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pElementHolder$1[ebp], ecx

; 1296 :         if( pElementHolder->nControlType == pControl->GetType() )

	mov	ecx, DWORD PTR _pControl$[ebp]
	call	?GetType@CDXUTControl@@QBEIXZ		; CDXUTControl::GetType
	mov	ecx, DWORD PTR _pElementHolder$1[ebp]
	cmp	DWORD PTR [ecx], eax
	jne	SHORT $LN1@InitContro

; 1297 :             pControl->SetElement( pElementHolder->iElement, &pElementHolder->Element );

	mov	eax, DWORD PTR _pElementHolder$1[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _pElementHolder$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _pControl$[ebp]
	call	?SetElement@CDXUTControl@@QAEJIPAVCDXUTElement@@@Z ; CDXUTControl::SetElement
$LN1@InitContro:

; 1298 :     }

	jmp	SHORT $LN3@InitContro
$LN2@InitContro:

; 1299 : 
; 1300 :     V_RETURN( pControl->OnInit() );
; 1301 : 
; 1302 :     return S_OK;

	xor	eax, eax
$LN6@InitContro:

; 1303 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InitControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ENDP	; CDXUTDialog::InitControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pControl$ = 8						; size = 4
?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z PROC	; CDXUTDialog::AddControl, COMDAT
; _this$ = ecx

; 1309 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1311 : 
; 1312 :     hr = InitControl( pControl );

	mov	eax, DWORD PTR _pControl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::InitControl
	mov	DWORD PTR _hr$[ebp], eax

; 1313 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@AddControl

; 1314 :         return DXTRACE_ERR( "CDXUTDialog::InitControl", hr );

	push	0
	push	OFFSET ??_C@_0BJ@NMGKIFBC@CDXUTDialog?3?3InitControl?$AA@
	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z@4JA
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper
	jmp	SHORT $LN3@AddControl
$LN2@AddControl:

; 1315 : 
; 1316 :     // Add to the list
; 1317 :     hr = m_Controls.Add( pControl );

	lea	eax, DWORD PTR _pControl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?Add@?$CGrowableArray@PAVCDXUTControl@@@@QAEJABQAVCDXUTControl@@@Z ; CGrowableArray<CDXUTControl *>::Add
	mov	DWORD PTR _hr$[ebp], eax

; 1318 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddControl

; 1319 :     {
; 1320 :         return DXTRACE_ERR( "CGrowableArray::Add", hr );

	push	0
	push	OFFSET ??_C@_0BE@PJMOKIGM@CGrowableArray?3?3Add?$AA@
	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z@4JA
	add	ecx, 11					; 0000000bH
	push	ecx
	push	OFFSET ??_C@_0CO@PNKEDBKA@z?3?2sampsrc?202xu1?2saco?2d3d9?2commo@
	call	?DXTraceWrapper@@YGJPBDKJ0H@Z		; DXTraceWrapper
	jmp	SHORT $LN3@AddControl
$LN1@AddControl:

; 1321 :     }
; 1322 : 
; 1323 :     return S_OK;

	xor	eax, eax
$LN3@AddControl:

; 1324 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ENDP	; CDXUTDialog::AddControl
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pListBox$ = -44					; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_dwStyle$ = 28						; size = 4
_ppCreated$ = 32					; size = 4
?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z PROC ; CDXUTDialog::AddListBox, COMDAT
; _this$ = ecx

; 1257 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1258 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1259 :     CDXUTListBox *pListBox = new CDXUTListBox( this );

	push	328					; 00000148H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@AddListBox
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTListBox@@QAE@PAVCDXUTDialog@@@Z	; CDXUTListBox::CDXUTListBox
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN7@AddListBox
$LN6@AddListBox:
	mov	DWORD PTR tv72[ebp], 0
$LN7@AddListBox:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pListBox$[ebp], edx

; 1260 : 
; 1261 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN3@AddListBox

; 1262 :         *ppCreated = pListBox;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pListBox$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AddListBox:

; 1263 : 
; 1264 :     if( pListBox == NULL )

	cmp	DWORD PTR _pListBox$[ebp], 0
	jne	SHORT $LN2@AddListBox

; 1265 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN4@AddListBox
$LN2@AddListBox:

; 1266 : 
; 1267 :     hr = AddControl( pListBox );

	mov	eax, DWORD PTR _pListBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1268 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddListBox

; 1269 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@AddListBox
$LN1@AddListBox:

; 1270 : 
; 1271 :     // Set the ID and position
; 1272 :     pListBox->SetID( ID );

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pListBox$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1273 :     pListBox->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pListBox$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1274 :     pListBox->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pListBox$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1275 :     pListBox->SetStyle( dwStyle );

	mov	eax, DWORD PTR _dwStyle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pListBox$[ebp]
	call	?SetStyle@CDXUTListBox@@QAEXK@Z		; CDXUTListBox::SetStyle

; 1276 : 
; 1277 :     return S_OK;

	xor	eax, eax
$LN4@AddListBox:

; 1278 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddListBox@CDXUTDialog@@QAEJHHHHHKPAPAVCDXUTListBox@@@Z ENDP ; CDXUTDialog::AddListBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pEditBox$ = -44					; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_strText$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_bIsDefault$ = 32					; size = 1
_ppCreated$ = 36					; size = 4
?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z PROC ; CDXUTDialog::AddIMEEditBox, COMDAT
; _this$ = ecx

; 1227 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1228 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1229 :     CDXUTIMEEditBox *pEditBox = new CDXUTIMEEditBox( this );

	push	401					; 00000191H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@AddIMEEdit
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTIMEEditBox@@QAE@PAVCDXUTDialog@@@Z ; CDXUTIMEEditBox::CDXUTIMEEditBox
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN8@AddIMEEdit
$LN7@AddIMEEdit:
	mov	DWORD PTR tv72[ebp], 0
$LN8@AddIMEEdit:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pEditBox$[ebp], edx

; 1230 : 
; 1231 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN4@AddIMEEdit

; 1232 :         *ppCreated = pEditBox;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@AddIMEEdit:

; 1233 : 
; 1234 :     if( pEditBox == NULL )

	cmp	DWORD PTR _pEditBox$[ebp], 0
	jne	SHORT $LN3@AddIMEEdit

; 1235 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN5@AddIMEEdit
$LN3@AddIMEEdit:

; 1236 : 
; 1237 :     hr = AddControl( pEditBox );

	mov	eax, DWORD PTR _pEditBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1238 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@AddIMEEdit

; 1239 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN5@AddIMEEdit
$LN2@AddIMEEdit:

; 1240 : 
; 1241 :     // Set the ID and position
; 1242 :     pEditBox->SetID( ID ); 

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1243 :     pEditBox->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1244 :     pEditBox->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1245 :     pEditBox->m_bIsDefault = bIsDefault;

	mov	eax, DWORD PTR _pEditBox$[ebp]
	mov	cl, BYTE PTR _bIsDefault$[ebp]
	mov	BYTE PTR [eax+7], cl

; 1246 : 
; 1247 :     if( strText )

	cmp	DWORD PTR _strText$[ebp], 0
	je	SHORT $LN1@AddIMEEdit

; 1248 :         pEditBox->SetText( strText );

	push	0
	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	call	?SetText@CDXUTEditBox@@QAEXPBD_N@Z	; CDXUTEditBox::SetText
$LN1@AddIMEEdit:

; 1249 : 
; 1250 :     return S_OK;

	xor	eax, eax
$LN5@AddIMEEdit:

; 1251 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddIMEEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTIMEEditBox@@@Z ENDP ; CDXUTDialog::AddIMEEditBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pEditBox$ = -44					; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_strText$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_bIsDefault$ = 32					; size = 1
_ppCreated$ = 36					; size = 4
?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z PROC ; CDXUTDialog::AddEditBox, COMDAT
; _this$ = ecx

; 1196 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1197 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1198 : 
; 1199 :     CDXUTEditBox *pEditBox = new CDXUTEditBox( this );

	push	309					; 00000135H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@AddEditBox
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTEditBox@@QAE@PAVCDXUTDialog@@@Z	; CDXUTEditBox::CDXUTEditBox
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN8@AddEditBox
$LN7@AddEditBox:
	mov	DWORD PTR tv72[ebp], 0
$LN8@AddEditBox:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pEditBox$[ebp], edx

; 1200 : 
; 1201 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN4@AddEditBox

; 1202 :         *ppCreated = pEditBox;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@AddEditBox:

; 1203 : 
; 1204 :     if( pEditBox == NULL )

	cmp	DWORD PTR _pEditBox$[ebp], 0
	jne	SHORT $LN3@AddEditBox

; 1205 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN5@AddEditBox
$LN3@AddEditBox:

; 1206 : 
; 1207 :     hr = AddControl( pEditBox );

	mov	eax, DWORD PTR _pEditBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1208 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@AddEditBox

; 1209 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN5@AddEditBox
$LN2@AddEditBox:

; 1210 : 
; 1211 :     // Set the ID and position
; 1212 :     pEditBox->SetID( ID ); 

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1213 :     pEditBox->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1214 :     pEditBox->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1215 :     pEditBox->m_bIsDefault = bIsDefault;

	mov	eax, DWORD PTR _pEditBox$[ebp]
	mov	cl, BYTE PTR _bIsDefault$[ebp]
	mov	BYTE PTR [eax+7], cl

; 1216 : 
; 1217 :     if( strText )

	cmp	DWORD PTR _strText$[ebp], 0
	je	SHORT $LN1@AddEditBox

; 1218 :         pEditBox->SetText( strText );

	push	0
	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEditBox$[ebp]
	call	?SetText@CDXUTEditBox@@QAEXPBD_N@Z	; CDXUTEditBox::SetText
$LN1@AddEditBox:

; 1219 : 
; 1220 :     return S_OK;

	xor	eax, eax
$LN5@AddEditBox:

; 1221 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddEditBox@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTEditBox@@@Z ENDP ; CDXUTDialog::AddEditBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pSlider$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_min$ = 28						; size = 4
_max$ = 32						; size = 4
_value$ = 36						; size = 4
_bIsDefault$ = 40					; size = 1
_ppCreated$ = 44					; size = 4
?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z PROC ; CDXUTDialog::AddSlider, COMDAT
; _this$ = ecx

; 1166 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1167 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1168 : 
; 1169 :     CDXUTSlider* pSlider = new CDXUTSlider( this );

	push	118					; 00000076H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@AddSlider
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTSlider@@QAE@PAVCDXUTDialog@@@Z	; CDXUTSlider::CDXUTSlider
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN7@AddSlider
$LN6@AddSlider:
	mov	DWORD PTR tv72[ebp], 0
$LN7@AddSlider:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pSlider$[ebp], edx

; 1170 : 
; 1171 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN3@AddSlider

; 1172 :         *ppCreated = pSlider;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pSlider$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AddSlider:

; 1173 : 
; 1174 :     if( pSlider == NULL )

	cmp	DWORD PTR _pSlider$[ebp], 0
	jne	SHORT $LN2@AddSlider

; 1175 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN4@AddSlider
$LN2@AddSlider:

; 1176 : 
; 1177 :     hr = AddControl( pSlider );

	mov	eax, DWORD PTR _pSlider$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1178 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddSlider

; 1179 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@AddSlider
$LN1@AddSlider:

; 1180 : 
; 1181 :     // Set the ID and list index
; 1182 :     pSlider->SetID( ID ); 

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSlider$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1183 :     pSlider->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pSlider$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1184 :     pSlider->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pSlider$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1185 :     pSlider->m_bIsDefault = bIsDefault;

	mov	eax, DWORD PTR _pSlider$[ebp]
	mov	cl, BYTE PTR _bIsDefault$[ebp]
	mov	BYTE PTR [eax+7], cl

; 1186 :     pSlider->SetRange( min, max );

	mov	eax, DWORD PTR _max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _min$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pSlider$[ebp]
	call	?SetRange@CDXUTSlider@@QAEXHH@Z		; CDXUTSlider::SetRange

; 1187 :     pSlider->SetValue( value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSlider$[ebp]
	call	?SetValue@CDXUTSlider@@QAEXH@Z		; CDXUTSlider::SetValue

; 1188 : 
; 1189 :     return S_OK;

	xor	eax, eax
$LN4@AddSlider:

; 1190 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddSlider@CDXUTDialog@@QAEJHHHHHHHH_NPAPAVCDXUTSlider@@@Z ENDP ; CDXUTDialog::AddSlider
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pComboBox$ = -44					; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
_nHotkey$ = 28						; size = 4
_bIsDefault$ = 32					; size = 1
_ppCreated$ = 36					; size = 4
?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z PROC ; CDXUTDialog::AddComboBox, COMDAT
; _this$ = ecx

; 1137 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1138 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1139 : 
; 1140 :     CDXUTComboBox* pComboBox = new CDXUTComboBox( this );

	push	609					; 00000261H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@AddComboBo
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTComboBox@@QAE@PAVCDXUTDialog@@@Z ; CDXUTComboBox::CDXUTComboBox
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN7@AddComboBo
$LN6@AddComboBo:
	mov	DWORD PTR tv72[ebp], 0
$LN7@AddComboBo:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pComboBox$[ebp], edx

; 1141 : 
; 1142 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN3@AddComboBo

; 1143 :         *ppCreated = pComboBox;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pComboBox$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AddComboBo:

; 1144 : 
; 1145 :     if( pComboBox == NULL )

	cmp	DWORD PTR _pComboBox$[ebp], 0
	jne	SHORT $LN2@AddComboBo

; 1146 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN4@AddComboBo
$LN2@AddComboBo:

; 1147 : 
; 1148 :     hr = AddControl( pComboBox );

	mov	eax, DWORD PTR _pComboBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1149 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddComboBo

; 1150 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@AddComboBo
$LN1@AddComboBo:

; 1151 : 
; 1152 :     // Set the ID and list index
; 1153 :     pComboBox->SetID( ID ); 

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pComboBox$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1154 :     pComboBox->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pComboBox$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1155 :     pComboBox->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pComboBox$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1156 :     pComboBox->SetHotkey( nHotkey );

	mov	eax, DWORD PTR _nHotkey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pComboBox$[ebp]
	call	?SetHotkey@CDXUTControl@@QAEXI@Z	; CDXUTControl::SetHotkey

; 1157 :     pComboBox->m_bIsDefault = bIsDefault;

	mov	eax, DWORD PTR _pComboBox$[ebp]
	mov	cl, BYTE PTR _bIsDefault$[ebp]
	mov	BYTE PTR [eax+7], cl

; 1158 : 
; 1159 :     return S_OK;

	xor	eax, eax
$LN4@AddComboBo:

; 1160 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddComboBox@CDXUTDialog@@QAEJHHHHHI_NPAPAVCDXUTComboBox@@@Z ENDP ; CDXUTDialog::AddComboBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pRadioButton$ = -44					; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_nButtonGroup$ = 12					; size = 4
_strText$ = 16						; size = 4
_x$ = 20						; size = 4
_y$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_bChecked$ = 36						; size = 1
_nHotkey$ = 40						; size = 4
_bIsDefault$ = 44					; size = 1
_ppCreated$ = 48					; size = 4
?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z PROC ; CDXUTDialog::AddRadioButton, COMDAT
; _this$ = ecx

; 1103 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1104 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1105 : 
; 1106 :     CDXUTRadioButton* pRadioButton = new CDXUTRadioButton( this );

	push	375					; 00000177H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@AddRadioBu
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTRadioButton@@QAE@PAVCDXUTDialog@@@Z ; CDXUTRadioButton::CDXUTRadioButton
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN7@AddRadioBu
$LN6@AddRadioBu:
	mov	DWORD PTR tv72[ebp], 0
$LN7@AddRadioBu:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pRadioButton$[ebp], edx

; 1107 : 
; 1108 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN3@AddRadioBu

; 1109 :         *ppCreated = pRadioButton;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AddRadioBu:

; 1110 : 
; 1111 :     if( pRadioButton == NULL )

	cmp	DWORD PTR _pRadioButton$[ebp], 0
	jne	SHORT $LN2@AddRadioBu

; 1112 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN4@AddRadioBu
$LN2@AddRadioBu:

; 1113 : 
; 1114 :     hr = AddControl( pRadioButton );

	mov	eax, DWORD PTR _pRadioButton$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1115 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddRadioBu

; 1116 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@AddRadioBu
$LN1@AddRadioBu:

; 1117 : 
; 1118 :     // Set the ID and list index
; 1119 :     pRadioButton->SetID( ID ); 

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1120 :     pRadioButton->SetText( strText );

	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	call	?SetText@CDXUTStatic@@QAEJPBD@Z		; CDXUTStatic::SetText

; 1121 :     pRadioButton->SetButtonGroup( nButtonGroup );

	mov	eax, DWORD PTR _nButtonGroup$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	call	?SetButtonGroup@CDXUTRadioButton@@QAEXI@Z ; CDXUTRadioButton::SetButtonGroup

; 1122 :     pRadioButton->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1123 :     pRadioButton->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1124 :     pRadioButton->SetHotkey( nHotkey );

	mov	eax, DWORD PTR _nHotkey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	call	?SetHotkey@CDXUTControl@@QAEXI@Z	; CDXUTControl::SetHotkey

; 1125 :     pRadioButton->SetChecked( bChecked );

	push	1
	movzx	eax, BYTE PTR _bChecked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	call	?SetChecked@CDXUTRadioButton@@QAEX_N0@Z	; CDXUTRadioButton::SetChecked

; 1126 :     pRadioButton->m_bIsDefault = bIsDefault;

	mov	eax, DWORD PTR _pRadioButton$[ebp]
	mov	cl, BYTE PTR _bIsDefault$[ebp]
	mov	BYTE PTR [eax+7], cl

; 1127 :     pRadioButton->SetChecked( bChecked );

	push	1
	movzx	eax, BYTE PTR _bChecked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRadioButton$[ebp]
	call	?SetChecked@CDXUTRadioButton@@QAEX_N0@Z	; CDXUTRadioButton::SetChecked

; 1128 : 
; 1129 :     return S_OK;

	xor	eax, eax
$LN4@AddRadioBu:

; 1130 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddRadioButton@CDXUTDialog@@QAEJHIPBDHHHH_NI1PAPAVCDXUTRadioButton@@@Z ENDP ; CDXUTDialog::AddRadioButton
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pCheckBox$ = -44					; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_strText$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_bChecked$ = 32						; size = 1
_nHotkey$ = 36						; size = 4
_bIsDefault$ = 40					; size = 1
_ppCreated$ = 44					; size = 4
?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z PROC ; CDXUTDialog::AddCheckBox, COMDAT
; _this$ = ecx

; 1072 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1073 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1074 : 
; 1075 :     CDXUTCheckBox* pCheckBox = new CDXUTCheckBox( this );

	push	371					; 00000173H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@AddCheckBo
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTCheckBox@@QAE@PAVCDXUTDialog@@@Z ; CDXUTCheckBox::CDXUTCheckBox
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN7@AddCheckBo
$LN6@AddCheckBo:
	mov	DWORD PTR tv72[ebp], 0
$LN7@AddCheckBo:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pCheckBox$[ebp], edx

; 1076 : 
; 1077 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN3@AddCheckBo

; 1078 :         *ppCreated = pCheckBox;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pCheckBox$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AddCheckBo:

; 1079 : 
; 1080 :     if( pCheckBox == NULL )

	cmp	DWORD PTR _pCheckBox$[ebp], 0
	jne	SHORT $LN2@AddCheckBo

; 1081 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN4@AddCheckBo
$LN2@AddCheckBo:

; 1082 : 
; 1083 :     hr = AddControl( pCheckBox );

	mov	eax, DWORD PTR _pCheckBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1084 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddCheckBo

; 1085 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@AddCheckBo
$LN1@AddCheckBo:

; 1086 : 
; 1087 :     // Set the ID and list index
; 1088 :     pCheckBox->SetID( ID ); 

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCheckBox$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1089 :     pCheckBox->SetText( strText );

	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCheckBox$[ebp]
	call	?SetText@CDXUTStatic@@QAEJPBD@Z		; CDXUTStatic::SetText

; 1090 :     pCheckBox->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCheckBox$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1091 :     pCheckBox->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCheckBox$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1092 :     pCheckBox->SetHotkey( nHotkey );

	mov	eax, DWORD PTR _nHotkey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCheckBox$[ebp]
	call	?SetHotkey@CDXUTControl@@QAEXI@Z	; CDXUTControl::SetHotkey

; 1093 :     pCheckBox->m_bIsDefault = bIsDefault;

	mov	eax, DWORD PTR _pCheckBox$[ebp]
	mov	cl, BYTE PTR _bIsDefault$[ebp]
	mov	BYTE PTR [eax+7], cl

; 1094 :     pCheckBox->SetChecked( bChecked );

	movzx	eax, BYTE PTR _bChecked$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCheckBox$[ebp]
	call	?SetChecked@CDXUTCheckBox@@QAEX_N@Z	; CDXUTCheckBox::SetChecked

; 1095 :     
; 1096 :     return S_OK;

	xor	eax, eax
$LN4@AddCheckBo:

; 1097 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddCheckBox@CDXUTDialog@@QAEJHPBDHHHH_NI1PAPAVCDXUTCheckBox@@@Z ENDP ; CDXUTDialog::AddCheckBox
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pButton$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_strText$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_nHotkey$ = 32						; size = 4
_bIsDefault$ = 36					; size = 1
_ppCreated$ = 40					; size = 4
?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z PROC ; CDXUTDialog::AddButton, COMDAT
; _this$ = ecx

; 1043 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1044 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1045 : 
; 1046 :     CDXUTButton* pButton = new CDXUTButton( this );

	push	338					; 00000152H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@AddButton
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTButton@@QAE@PAVCDXUTDialog@@@Z	; CDXUTButton::CDXUTButton
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN7@AddButton
$LN6@AddButton:
	mov	DWORD PTR tv72[ebp], 0
$LN7@AddButton:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pButton$[ebp], edx

; 1047 : 
; 1048 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN3@AddButton

; 1049 :         *ppCreated = pButton;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pButton$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AddButton:

; 1050 : 
; 1051 :     if( pButton == NULL )

	cmp	DWORD PTR _pButton$[ebp], 0
	jne	SHORT $LN2@AddButton

; 1052 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN4@AddButton
$LN2@AddButton:

; 1053 : 
; 1054 :     hr = AddControl( pButton );

	mov	eax, DWORD PTR _pButton$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1055 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddButton

; 1056 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@AddButton
$LN1@AddButton:

; 1057 : 
; 1058 :     // Set the ID and list index
; 1059 :     pButton->SetID( ID ); 

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pButton$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1060 :     pButton->SetText( strText );

	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pButton$[ebp]
	call	?SetText@CDXUTStatic@@QAEJPBD@Z		; CDXUTStatic::SetText

; 1061 :     pButton->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pButton$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1062 :     pButton->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pButton$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1063 :     pButton->SetHotkey( nHotkey );

	mov	eax, DWORD PTR _nHotkey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pButton$[ebp]
	call	?SetHotkey@CDXUTControl@@QAEXI@Z	; CDXUTControl::SetHotkey

; 1064 :     pButton->m_bIsDefault = bIsDefault;

	mov	eax, DWORD PTR _pButton$[ebp]
	mov	cl, BYTE PTR _bIsDefault$[ebp]
	mov	BYTE PTR [eax+7], cl

; 1065 : 
; 1066 :     return S_OK;

	xor	eax, eax
$LN4@AddButton:

; 1067 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddButton@CDXUTDialog@@QAEJHPBDHHHHI_NPAPAVCDXUTButton@@@Z ENDP ; CDXUTDialog::AddButton
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pStatic$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ID$ = 8						; size = 4
_strText$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_bIsDefault$ = 32					; size = 1
_ppCreated$ = 36					; size = 4
?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z PROC ; CDXUTDialog::AddStatic, COMDAT
; _this$ = ecx

; 1015 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1016 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1017 : 
; 1018 :     CDXUTStatic* pStatic = new CDXUTStatic( this );

	push	337					; 00000151H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN6@AddStatic
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDXUTStatic@@QAE@PAVCDXUTDialog@@@Z	; CDXUTStatic::CDXUTStatic
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN7@AddStatic
$LN6@AddStatic:
	mov	DWORD PTR tv72[ebp], 0
$LN7@AddStatic:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pStatic$[ebp], edx

; 1019 : 
; 1020 :     if( ppCreated != NULL )

	cmp	DWORD PTR _ppCreated$[ebp], 0
	je	SHORT $LN3@AddStatic

; 1021 :         *ppCreated = pStatic;

	mov	eax, DWORD PTR _ppCreated$[ebp]
	mov	ecx, DWORD PTR _pStatic$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AddStatic:

; 1022 : 
; 1023 :     if( pStatic == NULL )

	cmp	DWORD PTR _pStatic$[ebp], 0
	jne	SHORT $LN2@AddStatic

; 1024 :         return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	SHORT $LN4@AddStatic
$LN2@AddStatic:

; 1025 : 
; 1026 :     hr = AddControl( pStatic );

	mov	eax, DWORD PTR _pStatic$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControl@CDXUTDialog@@QAEJPAVCDXUTControl@@@Z ; CDXUTDialog::AddControl
	mov	DWORD PTR _hr$[ebp], eax

; 1027 :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddStatic

; 1028 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@AddStatic
$LN1@AddStatic:

; 1029 : 
; 1030 :     // Set the ID and list index
; 1031 :     pStatic->SetID( ID ); 

	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStatic$[ebp]
	call	?SetID@CDXUTControl@@QAEXH@Z		; CDXUTControl::SetID

; 1032 :     pStatic->SetText( strText );

	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStatic$[ebp]
	call	?SetText@CDXUTStatic@@QAEJPBD@Z		; CDXUTStatic::SetText

; 1033 :     pStatic->SetLocation( x, y );

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pStatic$[ebp]
	call	?SetLocation@CDXUTControl@@QAEXHH@Z	; CDXUTControl::SetLocation

; 1034 :     pStatic->SetSize( width, height );

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pStatic$[ebp]
	call	?SetSize@CDXUTControl@@QAEXHH@Z		; CDXUTControl::SetSize

; 1035 :     pStatic->m_bIsDefault = bIsDefault;

	mov	eax, DWORD PTR _pStatic$[ebp]
	mov	cl, BYTE PTR _bIsDefault$[ebp]
	mov	BYTE PTR [eax+7], cl

; 1036 : 
; 1037 :     return S_OK;

	xor	eax, eax
$LN4@AddStatic:

; 1038 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddStatic@CDXUTDialog@@QAEJHPBDHHHH_NPAPAVCDXUTStatic@@@Z ENDP ; CDXUTDialog::AddStatic
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?MsgProc@CDXUTDialog@@QAE_NPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv337 = -332						; size = 4
tv261 = -332						; size = 4
tv245 = -332						; size = 4
tv181 = -332						; size = 4
tv158 = -332						; size = 4
tv267 = -329						; size = 1
_pControl$1 = -132					; size = 4
_mousePoint$2 = -120					; size = 8
_bShiftDown$3 = -101					; size = 1
_pControl$4 = -92					; size = 4
_i$5 = -80						; size = 4
_pt$6 = -68						; size = 8
_mousePoint$7 = -52					; size = 8
_mousePoint$8 = -36					; size = 8
_bHandled$ = -17					; size = 1
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?MsgProc@CDXUTDialog@@QAE_NPAUHWND__@@IIJ@Z PROC	; CDXUTDialog::MsgProc, COMDAT
; _this$ = ecx

; 638  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 639  :     bool bHandled = false;

	mov	BYTE PTR _bHandled$[ebp], 0

; 640  : 
; 641  : 	//OutputDebugString("CDXUTDialog::MsgProc");
; 642  : 
; 643  :     // For invisible dialog, do not handle anything.
; 644  :     if( !m_bVisible )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+19]
	test	ecx, ecx
	jne	SHORT $LN52@MsgProc

; 645  :         return false;

	xor	al, al
	jmp	$LN53@MsgProc
$LN52@MsgProc:

; 646  : 
; 647  :     // If automation command-line switch is on, enable this dialog's keyboard input
; 648  :     // upon any key press or mouse click.
; 649  :     if( DXUTGetAutomation() &&
; 650  :         ( WM_LBUTTONDOWN == uMsg || WM_LBUTTONDBLCLK == uMsg || WM_KEYDOWN == uMsg ) )

	call	?DXUTGetAutomation@@YA_NXZ		; DXUTGetAutomation
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN51@MsgProc
	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN50@MsgProc
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	je	SHORT $LN50@MsgProc
	cmp	DWORD PTR _uMsg$[ebp], 256		; 00000100H
	jne	SHORT $LN51@MsgProc
$LN50@MsgProc:

; 651  :     {
; 652  :         m_bKeyboardInput = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 1
$LN51@MsgProc:

; 653  :     }
; 654  : 
; 655  :     // If caption is enable, check for clicks in the caption area.
; 656  :     if( m_bCaption )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	$LN49@MsgProc

; 657  :     {
; 658  :         static bool bDrag;
; 659  : 
; 660  :         if( uMsg == WM_LBUTTONDOWN || uMsg == WM_LBUTTONDBLCLK )

	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN47@MsgProc
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	jne	$LN48@MsgProc
$LN47@MsgProc:

; 661  :         {
; 662  :             POINT mousePoint = { short(LOWORD(lParam)), short(HIWORD(lParam)) };

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _mousePoint$8[ebp], ecx
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _mousePoint$8[ebp+4], ecx

; 663  : 
; 664  :             if( mousePoint.x >= m_x && mousePoint.x < m_x + m_width &&
; 665  :                 mousePoint.y >= m_y && mousePoint.y < m_y + m_nCaptionHeight )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mousePoint$8[ebp]
	cmp	ecx, DWORD PTR [eax+278]
	jl	SHORT $LN46@MsgProc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+278]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+286]
	cmp	DWORD PTR _mousePoint$8[ebp], ecx
	jge	SHORT $LN46@MsgProc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mousePoint$8[ebp+4]
	cmp	ecx, DWORD PTR [eax+282]
	jl	SHORT $LN46@MsgProc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+282]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+294]
	cmp	DWORD PTR _mousePoint$8[ebp+4], ecx
	jge	SHORT $LN46@MsgProc

; 666  :             {
; 667  :                 bDrag = true;

	mov	BYTE PTR ?bDrag@?9??MsgProc@CDXUTDialog@@QAE_NPAUHWND__@@IIJ@Z@4_NA, 1

; 668  :                 SetCapture( DXUTGetHWND() );

	call	?DXUTGetHWND@@YAPAUHWND__@@XZ		; DXUTGetHWND
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 669  :                 return true;

	mov	al, 1
	jmp	$LN53@MsgProc
$LN46@MsgProc:

; 670  :             }
; 671  :         } else

	jmp	$LN49@MsgProc
$LN48@MsgProc:

; 672  :         if( uMsg == WM_LBUTTONUP && bDrag )

	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	jne	$LN49@MsgProc
	movzx	eax, BYTE PTR ?bDrag@?9??MsgProc@CDXUTDialog@@QAE_NPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	$LN49@MsgProc

; 673  :         {
; 674  :             POINT mousePoint = { short(LOWORD(lParam)), short(HIWORD(lParam)) };

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _mousePoint$7[ebp], ecx
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _mousePoint$7[ebp+4], ecx

; 675  : 
; 676  :             if( mousePoint.x >= m_x && mousePoint.x < m_x + m_width &&
; 677  :                 mousePoint.y >= m_y && mousePoint.y < m_y + m_nCaptionHeight )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mousePoint$7[ebp]
	cmp	ecx, DWORD PTR [eax+278]
	jl	$LN49@MsgProc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+278]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+286]
	cmp	DWORD PTR _mousePoint$7[ebp], ecx
	jge	SHORT $LN49@MsgProc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mousePoint$7[ebp+4]
	cmp	ecx, DWORD PTR [eax+282]
	jl	SHORT $LN49@MsgProc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+282]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+294]
	cmp	DWORD PTR _mousePoint$7[ebp+4], ecx
	jge	SHORT $LN49@MsgProc

; 678  :             {
; 679  :                 ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 680  :                 bDrag = false;

	mov	BYTE PTR ?bDrag@?9??MsgProc@CDXUTDialog@@QAE_NPAUHWND__@@IIJ@Z@4_NA, 0

; 681  :                 m_bMinimized = !m_bMinimized;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	jne	SHORT $LN55@MsgProc
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN56@MsgProc
$LN55@MsgProc:
	mov	DWORD PTR tv158[ebp], 0
$LN56@MsgProc:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv158[ebp]
	mov	BYTE PTR [edx+21], al

; 682  :                 return true;

	mov	al, 1
	jmp	$LN53@MsgProc
$LN49@MsgProc:

; 683  :             }
; 684  :         }
; 685  :     }
; 686  : 
; 687  :     // If the dialog is minimized, don't send any messages to controls.
; 688  :     if( m_bMinimized )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+21]
	test	ecx, ecx
	je	SHORT $LN42@MsgProc

; 689  :         return false;

	xor	al, al
	jmp	$LN53@MsgProc
$LN42@MsgProc:

; 690  : 
; 691  :     // If a control is in focus, it belongs to this dialog, and it's enabled, then give
; 692  :     // it the first chance at handling the message.
; 693  :     if( s_pControlFocus && 
; 694  :         s_pControlFocus->m_pDialog == this && 
; 695  :         s_pControlFocus->GetEnabled() )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN41@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN41@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@MsgProc

; 696  :     {
; 697  :         // If the control MsgProc handles it, then we don't.
; 698  :         if( s_pControlFocus->MsgProc( uMsg, wParam, lParam ) )

	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN41@MsgProc

; 699  :             return true;

	mov	al, 1
	jmp	$LN53@MsgProc
$LN41@MsgProc:

; 700  :     }
; 701  : 
; 702  :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv181[ebp], eax
	cmp	DWORD PTR tv181[ebp], 257		; 00000101H
	ja	SHORT $LN61@MsgProc
	cmp	DWORD PTR tv181[ebp], 256		; 00000100H
	jae	$LN32@MsgProc
	cmp	DWORD PTR tv181[ebp], 3
	je	SHORT $LN37@MsgProc
	cmp	DWORD PTR tv181[ebp], 5
	je	SHORT $LN37@MsgProc
	cmp	DWORD PTR tv181[ebp], 28		; 0000001cH
	je	SHORT $LN36@MsgProc
	jmp	$LN38@MsgProc
$LN61@MsgProc:
	cmp	DWORD PTR tv181[ebp], 524		; 0000020cH
	ja	SHORT $LN62@MsgProc
	cmp	DWORD PTR tv181[ebp], 512		; 00000200H
	jae	$LN12@MsgProc
	cmp	DWORD PTR tv181[ebp], 260		; 00000104H
	jb	$LN38@MsgProc
	cmp	DWORD PTR tv181[ebp], 261		; 00000105H
	jbe	$LN32@MsgProc
	jmp	$LN38@MsgProc
$LN62@MsgProc:
	jmp	$LN38@MsgProc
$LN37@MsgProc:

; 703  :     {
; 704  :         case WM_SIZE:
; 705  :         case WM_MOVE:
; 706  :         {
; 707  :             // Handle sizing and moving messages so that in case the mouse cursor is moved out
; 708  :             // of an UI control because of the window adjustment, we can properly
; 709  :             // unhighlight the highlighted control.
; 710  :             POINT pt = { -1, -1 };

	mov	DWORD PTR _pt$6[ebp], -1
	mov	DWORD PTR _pt$6[ebp+4], -1

; 711  :             OnMouseMove( pt );

	mov	eax, DWORD PTR _pt$6[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _pt$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnMouseMove@CDXUTDialog@@AAEXUtagPOINT@@@Z ; CDXUTDialog::OnMouseMove

; 712  :             break;

	jmp	$LN38@MsgProc
$LN36@MsgProc:

; 713  :         }
; 714  : 
; 715  :         case WM_ACTIVATEAPP:
; 716  :             // Call OnFocusIn()/OnFocusOut() of the control that currently has the focus
; 717  :             // as the application is activated/deactivated.  This matches the Windows
; 718  :             // behavior.
; 719  :             if( s_pControlFocus && 
; 720  :                 s_pControlFocus->m_pDialog == this && 
; 721  :                 s_pControlFocus->GetEnabled() )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN35@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN35@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN35@MsgProc

; 722  :             {
; 723  :                 if( wParam )

	cmp	DWORD PTR _wParam$[ebp], 0
	je	SHORT $LN34@MsgProc

; 724  :                     s_pControlFocus->OnFocusIn();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 725  :                 else

	jmp	SHORT $LN35@MsgProc
$LN34@MsgProc:

; 726  :                     s_pControlFocus->OnFocusOut();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@MsgProc:

; 727  :             }
; 728  :             break;

	jmp	$LN38@MsgProc
$LN32@MsgProc:

; 729  : 
; 730  :         // Keyboard messages
; 731  :         case WM_KEYDOWN:
; 732  :         case WM_SYSKEYDOWN:
; 733  :         case WM_KEYUP:
; 734  :         case WM_SYSKEYUP:
; 735  :         {
; 736  :             // If a control is in focus, it belongs to this dialog, and it's enabled, then give
; 737  :             // it the first chance at handling the message.
; 738  :             if( s_pControlFocus && 
; 739  :                 s_pControlFocus->m_pDialog == this && 
; 740  :                 s_pControlFocus->GetEnabled() )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN31@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN31@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN31@MsgProc

; 741  :             {
; 742  :                 if( s_pControlFocus->HandleKeyboard( uMsg, wParam, lParam ) )

	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN31@MsgProc

; 743  :                     return true;

	mov	al, 1
	jmp	$LN53@MsgProc
$LN31@MsgProc:

; 744  :             }
; 745  : 
; 746  :             // Not yet handled, see if this matches a control's hotkey
; 747  :             // Activate the hotkey if the focus doesn't belong to an
; 748  :             // edit box.
; 749  :             if( uMsg == WM_KEYDOWN && ( !s_pControlFocus ||
; 750  :                                       ( s_pControlFocus->GetType() != DXUT_CONTROL_EDITBOX
; 751  :                                      && s_pControlFocus->GetType() != DXUT_CONTROL_IMEEDITBOX ) ) )

	cmp	DWORD PTR _uMsg$[ebp], 256		; 00000100H
	jne	$LN29@MsgProc
	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN28@MsgProc
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	call	?GetType@CDXUTControl@@QBEIXZ		; CDXUTControl::GetType
	cmp	eax, 6
	je	SHORT $LN29@MsgProc
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	call	?GetType@CDXUTControl@@QBEIXZ		; CDXUTControl::GetType
	cmp	eax, 7
	je	SHORT $LN29@MsgProc
$LN28@MsgProc:

; 752  :             {
; 753  :                 for( int i=0; i < m_Controls.GetSize(); i++ )

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN27@MsgProc
$LN26@MsgProc:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN27@MsgProc:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetSize@?$CGrowableArray@PAVCDXUTControl@@@@QBEHXZ ; CGrowableArray<CDXUTControl *>::GetSize
	cmp	DWORD PTR _i$5[ebp], eax
	jge	SHORT $LN29@MsgProc

; 754  :                 {
; 755  :                     CDXUTControl* pControl = m_Controls.GetAt( i );

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	?GetAt@?$CGrowableArray@PAVCDXUTControl@@@@QAEAAPAVCDXUTControl@@H@Z ; CGrowableArray<CDXUTControl *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pControl$4[ebp], ecx

; 756  :                     if( pControl->GetHotkey() == wParam )

	mov	ecx, DWORD PTR _pControl$4[ebp]
	call	?GetHotkey@CDXUTControl@@QAEIXZ		; CDXUTControl::GetHotkey
	cmp	eax, DWORD PTR _wParam$[ebp]
	jne	SHORT $LN24@MsgProc

; 757  :                     {
; 758  :                         pControl->OnHotkey();

	mov	eax, DWORD PTR _pControl$4[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$4[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 759  :                         return true;

	mov	al, 1
	jmp	$LN53@MsgProc
$LN24@MsgProc:

; 760  :                     }
; 761  :                 }

	jmp	SHORT $LN26@MsgProc
$LN29@MsgProc:

; 762  :             }
; 763  : 
; 764  :             // Not yet handled, check for focus messages
; 765  :             if( uMsg == WM_KEYDOWN )

	cmp	DWORD PTR _uMsg$[ebp], 256		; 00000100H
	jne	$LN23@MsgProc

; 766  :             {
; 767  :                 // If keyboard input is not enabled, this message should be ignored
; 768  :                 if( !m_bKeyboardInput )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	jne	SHORT $LN22@MsgProc

; 769  :                     return false;

	xor	al, al
	jmp	$LN53@MsgProc
$LN22@MsgProc:

; 770  : 
; 771  :                 switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv245[ebp], eax
	mov	ecx, DWORD PTR tv245[ebp]
	sub	ecx, 9
	mov	DWORD PTR tv245[ebp], ecx
	cmp	DWORD PTR tv245[ebp], 31		; 0000001fH
	ja	$LN23@MsgProc
	mov	edx, DWORD PTR tv245[ebp]
	movzx	eax, BYTE PTR $LN63@MsgProc[edx]
	jmp	DWORD PTR $LN70@MsgProc[eax*4]
$LN19@MsgProc:

; 772  :                 {
; 773  :                     case VK_RIGHT:
; 774  :                     case VK_DOWN:
; 775  :                         if( s_pControlFocus != NULL )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN18@MsgProc

; 776  :                         {
; 777  :                             return OnCycleFocus( true );

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnCycleFocus@CDXUTDialog@@AAE_N_N@Z	; CDXUTDialog::OnCycleFocus
	jmp	$LN53@MsgProc
$LN18@MsgProc:

; 778  :                         }
; 779  :                         break;

	jmp	$LN23@MsgProc
$LN17@MsgProc:

; 780  : 
; 781  :                     case VK_LEFT:
; 782  :                     case VK_UP:
; 783  :                         if( s_pControlFocus != NULL )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN16@MsgProc

; 784  :                         {
; 785  :                             return OnCycleFocus( false );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnCycleFocus@CDXUTDialog@@AAE_N_N@Z	; CDXUTDialog::OnCycleFocus
	jmp	$LN53@MsgProc
$LN16@MsgProc:

; 786  :                         }
; 787  :                         break;

	jmp	SHORT $LN23@MsgProc
$LN15@MsgProc:

; 788  : 
; 789  :                     case VK_TAB: 
; 790  :                         if( s_pControlFocus == NULL )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	jne	SHORT $LN14@MsgProc

; 791  :                         {
; 792  :                             FocusDefaultControl();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FocusDefaultControl@CDXUTDialog@@QAEXXZ ; CDXUTDialog::FocusDefaultControl

; 793  :                         }
; 794  :                         else

	jmp	SHORT $LN13@MsgProc
$LN14@MsgProc:

; 795  :                         {
; 796  :                             bool bShiftDown = ((GetAsyncKeyState( VK_SHIFT ) & 0x8000) != 0);

	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	and	eax, 32768				; 00008000H
	je	SHORT $LN57@MsgProc
	mov	DWORD PTR tv261[ebp], 1
	jmp	SHORT $LN58@MsgProc
$LN57@MsgProc:
	mov	DWORD PTR tv261[ebp], 0
$LN58@MsgProc:
	mov	cl, BYTE PTR tv261[ebp]
	mov	BYTE PTR _bShiftDown$3[ebp], cl

; 797  :                             return OnCycleFocus( !bShiftDown );

	movzx	eax, BYTE PTR _bShiftDown$3[ebp]
	test	eax, eax
	jne	SHORT $LN59@MsgProc
	mov	BYTE PTR tv267[ebp], 1
	jmp	SHORT $LN60@MsgProc
$LN59@MsgProc:
	mov	BYTE PTR tv267[ebp], 0
$LN60@MsgProc:
	movzx	ecx, BYTE PTR tv267[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnCycleFocus@CDXUTDialog@@AAE_N_N@Z	; CDXUTDialog::OnCycleFocus
	jmp	$LN53@MsgProc
$LN13@MsgProc:

; 798  :                         }
; 799  :                         return true;

	mov	al, 1
	jmp	$LN53@MsgProc
$LN23@MsgProc:

; 800  :                 }
; 801  :             }
; 802  : 
; 803  :             break;

	jmp	$LN38@MsgProc
$LN12@MsgProc:

; 804  :         }
; 805  : 
; 806  : 
; 807  :         // Mouse messages
; 808  :         case WM_MOUSEMOVE:
; 809  :         case WM_LBUTTONDOWN:
; 810  :         case WM_LBUTTONUP:
; 811  :         case WM_MBUTTONDOWN:
; 812  :         case WM_MBUTTONUP:
; 813  :         case WM_RBUTTONDOWN:
; 814  :         case WM_RBUTTONUP:
; 815  :         case WM_XBUTTONDOWN:
; 816  :         case WM_XBUTTONUP:
; 817  :         case WM_LBUTTONDBLCLK:
; 818  :         case WM_MBUTTONDBLCLK:
; 819  :         case WM_RBUTTONDBLCLK:
; 820  :         case WM_MOUSEWHEEL:
; 821  :         {
; 822  : 			OutputDebugString("CDXUTDialog::MsgProc(MOUSE)");

	mov	esi, esp
	push	OFFSET ??_C@_0BM@EKOPLJBN@CDXUTDialog?3?3MsgProc?$CIMOUSE?$CJ?$AA@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 823  : 
; 824  :             // If not accepting mouse input, return false to indicate the message should still 
; 825  :             // be handled by the application (usually to move the camera).
; 826  :             if( !m_bMouseInput )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN11@MsgProc

; 827  :                 return false;

	xor	al, al
	jmp	$LN53@MsgProc
$LN11@MsgProc:

; 828  : 
; 829  :             POINT mousePoint = { short(LOWORD(lParam)), short(HIWORD(lParam)) };

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _mousePoint$2[ebp], ecx
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _mousePoint$2[ebp+4], ecx

; 830  :             mousePoint.x -= m_x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mousePoint$2[ebp]
	sub	ecx, DWORD PTR [eax+278]
	mov	DWORD PTR _mousePoint$2[ebp], ecx

; 831  :             mousePoint.y -= m_y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mousePoint$2[ebp+4]
	sub	ecx, DWORD PTR [eax+282]
	mov	DWORD PTR _mousePoint$2[ebp+4], ecx

; 832  : 
; 833  :             // If caption is enabled, offset the Y coordinate by the negative of its height.
; 834  :             if( m_bCaption )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN10@MsgProc

; 835  :                 mousePoint.y -= m_nCaptionHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mousePoint$2[ebp+4]
	sub	ecx, DWORD PTR [eax+294]
	mov	DWORD PTR _mousePoint$2[ebp+4], ecx
$LN10@MsgProc:

; 836  : 
; 837  :             // If a control is in focus, it belongs to this dialog, and it's enabled, then give
; 838  :             // it the first chance at handling the message.
; 839  :             if( s_pControlFocus && 
; 840  :                 s_pControlFocus->m_pDialog == this && 
; 841  :                 s_pControlFocus->GetEnabled() )

	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN9@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN9@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@MsgProc

; 842  :             {
; 843  :                 if( s_pControlFocus->HandleMouse( uMsg, mousePoint, wParam, lParam ) )

	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mousePoint$2[ebp+4]
	push	edx
	mov	eax, DWORD PTR _mousePoint$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _uMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@MsgProc

; 844  :                     return true;

	mov	al, 1
	jmp	$LN53@MsgProc
$LN9@MsgProc:

; 845  :             }
; 846  : 
; 847  :             // Not yet handled, see if the mouse is over any controls
; 848  :             CDXUTControl* pControl = GetControlAtPoint( mousePoint );

	mov	eax, DWORD PTR _mousePoint$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _mousePoint$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetControlAtPoint@CDXUTDialog@@QAEPAVCDXUTControl@@UtagPOINT@@@Z ; CDXUTDialog::GetControlAtPoint
	mov	DWORD PTR _pControl$1[ebp], eax

; 849  :             if( pControl != NULL && pControl->GetEnabled() )

	cmp	DWORD PTR _pControl$1[ebp], 0
	je	SHORT $LN7@MsgProc
	mov	eax, DWORD PTR _pControl$1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pControl$1[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@MsgProc

; 850  :             {
; 851  :                 bHandled = pControl->HandleMouse( uMsg, mousePoint, wParam, lParam );

	mov	esi, esp
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mousePoint$2[ebp+4]
	push	edx
	mov	eax, DWORD PTR _mousePoint$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _uMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pControl$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pControl$1[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR _bHandled$[ebp], al

; 852  :                 if( bHandled )

	movzx	eax, BYTE PTR _bHandled$[ebp]
	test	eax, eax
	je	SHORT $LN6@MsgProc

; 853  :                     return true;

	mov	al, 1
	jmp	SHORT $LN53@MsgProc
$LN6@MsgProc:

; 854  :             }
; 855  :             else

	jmp	SHORT $LN5@MsgProc
$LN7@MsgProc:

; 856  :             {
; 857  :                 // Mouse not over any controls in this dialog, if there was a control
; 858  :                 // which had focus it just lost it
; 859  :                 if( uMsg == WM_LBUTTONDOWN && 
; 860  :                     s_pControlFocus && 
; 861  :                     s_pControlFocus->m_pDialog == this )

	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	jne	SHORT $LN5@MsgProc
	cmp	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
	je	SHORT $LN5@MsgProc
	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN5@MsgProc

; 862  :                 {
; 863  :                     s_pControlFocus->OnFocusOut();

	mov	eax, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A ; CDXUTDialog::s_pControlFocus
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 864  :                     s_pControlFocus = NULL;

	mov	DWORD PTR ?s_pControlFocus@CDXUTDialog@@0PAVCDXUTControl@@A, 0 ; CDXUTDialog::s_pControlFocus
$LN5@MsgProc:

; 865  :                 }
; 866  :             }
; 867  : 
; 868  :             // Still not handled, hand this off to the dialog. Return false to indicate the
; 869  :             // message should still be handled by the application (usually to move the camera).
; 870  :             switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv337[ebp], eax
	cmp	DWORD PTR tv337[ebp], 512		; 00000200H
	je	SHORT $LN1@MsgProc
	jmp	SHORT $LN38@MsgProc
$LN1@MsgProc:

; 871  :             {
; 872  :                 case WM_MOUSEMOVE:
; 873  :                     OnMouseMove( mousePoint );

	mov	eax, DWORD PTR _mousePoint$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _mousePoint$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnMouseMove@CDXUTDialog@@AAEXUtagPOINT@@@Z ; CDXUTDialog::OnMouseMove

; 874  :                     return false;

	xor	al, al
	jmp	SHORT $LN53@MsgProc
$LN38@MsgProc:

; 875  :             }
; 876  : 
; 877  :             break;
; 878  :         }
; 879  :     }
; 880  : 
; 881  :     return false;

	xor	al, al
$LN53@MsgProc:

; 882  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN69@MsgProc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN69@MsgProc:
	DD	4
	DD	$LN68@MsgProc
$LN68@MsgProc:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN64@MsgProc
	DD	-52					; ffffffccH
	DD	8
	DD	$LN65@MsgProc
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN66@MsgProc
	DD	-120					; ffffff88H
	DD	8
	DD	$LN67@MsgProc
$LN67@MsgProc:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN66@MsgProc:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	0
$LN65@MsgProc:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN64@MsgProc:
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN70@MsgProc:
	DD	$LN15@MsgProc
	DD	$LN17@MsgProc
	DD	$LN19@MsgProc
	DD	$LN23@MsgProc
$LN63@MsgProc:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	2
	DB	2
?MsgProc@CDXUTDialog@@QAE_NPAUHWND__@@IIJ@Z ENDP	; CDXUTDialog::MsgProc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Init@CDXUTDialog@@QAEXPAVCDXUTDialogResourceManager@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pManager$ = 8						; size = 4
?Init@CDXUTDialog@@QAEXPAVCDXUTDialogResourceManager@@@Z PROC ; CDXUTDialog::Init, COMDAT
; _this$ = ecx

; 140  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  :     m_pManager = pManager;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pManager$[ebp]
	mov	DWORD PTR [eax+314], ecx

; 142  :     InitDefaultElements(); // requires a CDXUTDialogResourceManager to store textures/fonts

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitDefaultElements@CDXUTDialog@@AAEXXZ ; CDXUTDialog::InitDefaultElements

; 143  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Init@CDXUTDialog@@QAEXPAVCDXUTDialogResourceManager@@@Z ENDP ; CDXUTDialog::Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??1CDXUTDialog@@QAE@XZ
_TEXT	SEGMENT
$T2 = -248						; size = 4
_pElementHolder$3 = -44					; size = 4
_i$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTDialog@@QAE@XZ PROC				; CDXUTDialog::~CDXUTDialog, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTDialog@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3

; 121  :     int i=0;

	mov	DWORD PTR _i$[ebp], 0

; 122  : 
; 123  :     RemoveAllControls();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAllControls@CDXUTDialog@@QAEXXZ	; CDXUTDialog::RemoveAllControls

; 124  : 
; 125  :     m_Fonts.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	call	?RemoveAll@?$CGrowableArray@H@@QAEXXZ	; CGrowableArray<int>::RemoveAll

; 126  :     m_Textures.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	call	?RemoveAll@?$CGrowableArray@H@@QAEXXZ	; CGrowableArray<int>::RemoveAll

; 127  : 
; 128  :     for( i=0; i < m_DefaultElements.GetSize(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CDXUTDialo
$LN3@CDXUTDialo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CDXUTDialo:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?GetSize@?$CGrowableArray@PAUDXUTElementHolder@@@@QBEHXZ ; CGrowableArray<DXUTElementHolder *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@CDXUTDialo

; 129  :     {
; 130  :         DXUTElementHolder* pElementHolder = m_DefaultElements.GetAt( i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?GetAt@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEAAPAUDXUTElementHolder@@H@Z ; CGrowableArray<DXUTElementHolder *>::GetAt
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pElementHolder$3[ebp], ecx

; 131  :         SAFE_DELETE( pElementHolder );

	cmp	DWORD PTR _pElementHolder$3[ebp], 0
	je	SHORT $LN1@CDXUTDialo
	mov	eax, DWORD PTR _pElementHolder$3[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pElementHolder$3[ebp], 0
$LN1@CDXUTDialo:

; 132  :     }

	jmp	SHORT $LN3@CDXUTDialo
$LN2@CDXUTDialo:

; 133  : 
; 134  :     m_DefaultElements.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	?RemoveAll@?$CGrowableArray@PAUDXUTElementHolder@@@@QAEXXZ ; CGrowableArray<DXUTElementHolder *>::RemoveAll

; 135  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	??1?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ ; CGrowableArray<DXUTElementHolder *>::~CGrowableArray<DXUTElementHolder *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	??1?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ ; CGrowableArray<CDXUTControl *>::~CGrowableArray<CDXUTControl *>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	call	??1?$CGrowableArray@H@@QAE@XZ		; CGrowableArray<int>::~CGrowableArray<int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	call	??1?$CGrowableArray@H@@QAE@XZ		; CGrowableArray<int>::~CGrowableArray<int>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDXUTDialog@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	jmp	??1?$CGrowableArray@H@@QAE@XZ		; CGrowableArray<int>::~CGrowableArray<int>
__unwindfunclet$??1CDXUTDialog@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	jmp	??1?$CGrowableArray@H@@QAE@XZ		; CGrowableArray<int>::~CGrowableArray<int>
__unwindfunclet$??1CDXUTDialog@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	jmp	??1?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ ; CGrowableArray<CDXUTControl *>::~CGrowableArray<CDXUTControl *>
__unwindfunclet$??1CDXUTDialog@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	jmp	??1?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ ; CGrowableArray<DXUTElementHolder *>::~CGrowableArray<DXUTElementHolder *>
__ehhandler$??1CDXUTDialog@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-256]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTDialog@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTDialog@@QAE@XZ ENDP				; CDXUTDialog::~CDXUTDialog
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ??0CDXUTDialog@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CDXUTDialog@@QAE@XZ PROC				; CDXUTDialog::CDXUTDialog, COMDAT
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDXUTDialog@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	call	??0?$CGrowableArray@H@@QAE@XZ		; CGrowableArray<int>::CGrowableArray<int>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	call	??0?$CGrowableArray@H@@QAE@XZ		; CGrowableArray<int>::CGrowableArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	call	??0?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ ; CGrowableArray<CDXUTControl *>::CGrowableArray<CDXUTControl *>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	call	??0?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ ; CGrowableArray<DXUTElementHolder *>::CGrowableArray<DXUTElementHolder *>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 374				; 00000176H
	call	??0CDXUTElement@@QAE@XZ

; 84   :     m_x = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+278], 0

; 85   :     m_y = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+282], 0

; 86   :     m_width = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+286], 0

; 87   :     m_height = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+290], 0

; 88   : 
; 89   :     m_pManager = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+314], 0

; 90   :     m_bVisible = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 1

; 91   :     m_bCaption = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+20], 0

; 92   :     m_bMinimized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+21], 0

; 93   :     m_wszCaption[0] = L'\0';

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+22], 0

; 94   :     m_nCaptionHeight = 18;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+294], 18			; 00000012H

; 95   : 
; 96   :     m_colorTopLeft = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+298], 0

; 97   :     m_colorTopRight = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+302], 0

; 98   :     m_colorBottomLeft = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+306], 0

; 99   :     m_colorBottomRight = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+310], 0

; 100  : 
; 101  :     m_pCallbackEvent = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+318], 0

; 102  :     m_pCallbackEventUserContext = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+322], 0

; 103  : 
; 104  :     m_fTimeLastRefresh = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [eax+7], xmm0

; 105  : 
; 106  :     m_pControlMouseOver = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+15], 0

; 107  : 
; 108  :     m_pNextDialog = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+482], ecx

; 109  :     m_pPrevDialog = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+486], ecx

; 110  : 
; 111  :     m_nDefaultControlID = 0xffff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+3], 65535		; 0000ffffH

; 112  :     m_bNonUserEvents = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0

; 113  :     m_bKeyboardInput = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0

; 114  :     m_bMouseInput = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+2], 1

; 115  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDXUTDialog@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 326				; 00000146H
	jmp	??1?$CGrowableArray@H@@QAE@XZ		; CGrowableArray<int>::~CGrowableArray<int>
__unwindfunclet$??0CDXUTDialog@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 338				; 00000152H
	jmp	??1?$CGrowableArray@H@@QAE@XZ		; CGrowableArray<int>::~CGrowableArray<int>
__unwindfunclet$??0CDXUTDialog@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 350				; 0000015eH
	jmp	??1?$CGrowableArray@PAVCDXUTControl@@@@QAE@XZ ; CGrowableArray<CDXUTControl *>::~CGrowableArray<CDXUTControl *>
__unwindfunclet$??0CDXUTDialog@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 362				; 0000016aH
	jmp	??1?$CGrowableArray@PAUDXUTElementHolder@@@@QAE@XZ ; CGrowableArray<DXUTElementHolder *>::~CGrowableArray<DXUTElementHolder *>
__ehhandler$??0CDXUTDialog@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDXUTDialog@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDXUTDialog@@QAE@XZ ENDP				; CDXUTDialog::CDXUTDialog
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CDXUTElement@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CDXUTElement@@QAE@XZ PROC				; CDXUTElement::CDXUTElement, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0DXUTBlendColor@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0DXUTBlendColor@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDXUTElement@@QAE@XZ ENDP				; CDXUTElement::CDXUTElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Refresh@CDXUTElement@@QAEXXZ
_TEXT	SEGMENT
$T1 = -248						; size = 16
$T2 = -224						; size = 16
_this$ = -8						; size = 4
?Refresh@CDXUTElement@@QAEXXZ PROC			; CDXUTElement::Refresh, COMDAT
; _this$ = ecx

; 7734 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7735 :     TextureColor.Current = TextureColor.States[ DXUT_STATE_HIDDEN ];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+28]
	push	edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 52					; 00000034H
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T1[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 7736 :     FontColor.Current = FontColor.States[ DXUT_STATE_HIDDEN ];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+68]
	push	edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T2[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 7737 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Refresh@CDXUTElement@@QAEXXZ ENDP			; CDXUTElement::Refresh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetFont@CDXUTElement@@QAEXIKK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iFont$ = 8						; size = 4
_defaultFontColor$ = 12					; size = 4
_dwTextFormat$ = 16					; size = 4
?SetFont@CDXUTElement@@QAEXIKK@Z PROC			; CDXUTElement::SetFont, COMDAT
; _this$ = ecx

; 7724 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7725 :     this->iFont = iFont;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iFont$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 7726 :     this->dwTextFormat = dwTextFormat;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwTextFormat$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 7727 : 
; 7728 :     FontColor.Init( defaultFontColor );

	push	0
	push	-931102592				; c8808080H
	mov	eax, DWORD PTR _defaultFontColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?Init@DXUTBlendColor@@QAEXKKK@Z		; DXUTBlendColor::Init

; 7729 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetFont@CDXUTElement@@QAEXIKK@Z ENDP			; CDXUTElement::SetFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iTexture$ = 8						; size = 4
_prcTexture$ = 12					; size = 4
_defaultTextureColor$ = 16				; size = 4
?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z PROC	; CDXUTElement::SetTexture, COMDAT
; _this$ = ecx

; 7710 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7711 :     this->iTexture = iTexture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iTexture$[ebp]
	mov	DWORD PTR [eax], ecx

; 7712 :     
; 7713 :     if( prcTexture )

	cmp	DWORD PTR _prcTexture$[ebp], 0
	je	SHORT $LN2@SetTexture

; 7714 :         rcTexture = *prcTexture;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _prcTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 7715 :     else

	jmp	SHORT $LN1@SetTexture
$LN2@SetTexture:

; 7716 :         SetRectEmpty( &rcTexture );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__SetRectEmpty@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetTexture:

; 7717 :     
; 7718 :     TextureColor.Init( defaultTextureColor );

	push	0
	push	-931102592				; c8808080H
	mov	eax, DWORD PTR _defaultTextureColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Init@DXUTBlendColor@@QAEXKKK@Z		; DXUTBlendColor::Init

; 7719 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTexture@CDXUTElement@@QAEXIPAUtagRECT@@K@Z ENDP	; CDXUTElement::SetTexture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0DXUTBlendColor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0DXUTBlendColor@@QAE@XZ PROC				; DXUTBlendColor::DXUTBlendColor, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0D3DXCOLOR@@QAE@XZ			; D3DXCOLOR::D3DXCOLOR
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0DXUTBlendColor@@QAE@XZ ENDP				; DXUTBlendColor::DXUTBlendColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Blend@DXUTBlendColor@@QAEXIMM@Z
_TEXT	SEGMENT
tv90 = -232						; size = 4
_destColor$ = -32					; size = 16
_this$ = -8						; size = 4
_iState$ = 8						; size = 4
_fElapsedTime$ = 12					; size = 4
_fRate$ = 16						; size = 4
?Blend@DXUTBlendColor@@QAEXIMM@Z PROC			; DXUTBlendColor::Blend, COMDAT
; _this$ = ecx

; 7701 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7702 :     D3DXCOLOR destColor = States[ iState ];

	mov	eax, DWORD PTR _iState$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	lea	ecx, DWORD PTR _destColor$[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR

; 7703 :     D3DXColorLerp( &Current, &Current, &destColor, 1.0f - powf( fRate, 30 * fElapsedTime ) );

	movss	xmm0, DWORD PTR __real@41f00000
	mulss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fRate$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_powf
	add	esp, 8
	fstp	DWORD PTR tv90[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR tv90[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _destColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	call	?D3DXColorLerp@@YAPAUD3DXCOLOR@@PAU1@PBU1@1M@Z ; D3DXColorLerp
	add	esp, 16					; 00000010H

; 7704 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Blend
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN5@Blend:
	DD	1
	DD	$LN4@Blend
$LN4@Blend:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@Blend
$LN3@Blend:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?Blend@DXUTBlendColor@@QAEXIMM@Z ENDP			; DXUTBlendColor::Blend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\common\dxutgui.cpp
;	COMDAT ?Init@DXUTBlendColor@@QAEXKKK@Z
_TEXT	SEGMENT
$T1 = -236						; size = 16
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_defaultColor$ = 8					; size = 4
_disabledColor$ = 12					; size = 4
_hiddenColor$ = 16					; size = 4
?Init@DXUTBlendColor@@QAEXKKK@Z PROC			; DXUTBlendColor::Init, COMDAT
; _this$ = ecx

; 7687 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7688 :     for( int i=0; i < MAX_CONTROL_STATES; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@Init
$LN2@Init:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@Init:
	cmp	DWORD PTR _i$2[ebp], 6
	jge	SHORT $LN1@Init

; 7689 :     {
; 7690 :         States[ i ] = defaultColor;

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _defaultColor$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 7691 :     }

	jmp	SHORT $LN2@Init
$LN1@Init:

; 7692 : 
; 7693 :     States[ DXUT_STATE_DISABLED ] = disabledColor;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _disabledColor$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 7694 :     States[ DXUT_STATE_HIDDEN ] = hiddenColor;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hiddenColor$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 7695 :     Current = hiddenColor;

	mov	eax, DWORD PTR _hiddenColor$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0D3DXCOLOR@@QAE@K@Z			; D3DXCOLOR::D3DXCOLOR
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T1[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T1[ebp+12]
	mov	DWORD PTR [ecx+12], eax

; 7696 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@DXUTBlendColor@@QAEXKKK@Z ENDP			; DXUTBlendColor::Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchPrintfA@@YAJPADIPBDZZ
_TEXT	SEGMENT
_argList$1 = -20					; size = 4
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
?StringCchPrintfA@@YAJPADIPBDZZ PROC			; StringCchPrintfA, COMDAT

; 2678 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2679 :     HRESULT hr;
; 2680 : 
; 2681 :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchP

; 2682 :     {
; 2683 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 2684 :     }
; 2685 :     else

	jmp	SHORT $LN1@StringCchP
$LN2@StringCchP:

; 2686 :     {
; 2687 :         va_list argList;
; 2688 : 
; 2689 :         va_start(argList, pszFormat);

	lea	eax, DWORD PTR _pszFormat$[ebp+4]
	mov	DWORD PTR _argList$1[ebp], eax

; 2690 : 
; 2691 :         hr = StringVPrintfWorkerA(pszDest, cchDest, pszFormat, argList);

	mov	eax, DWORD PTR _argList$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszDest$[ebp]
	push	eax
	call	?StringVPrintfWorkerA@@YGJPADIPBD0@Z	; StringVPrintfWorkerA
	mov	DWORD PTR _hr$[ebp], eax

; 2692 : 
; 2693 :         va_end(argList);

	mov	DWORD PTR _argList$1[ebp], 0
$LN1@StringCchP:

; 2694 :     }
; 2695 : 
; 2696 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 2697 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StringCchPrintfA@@YAJPADIPBDZZ ENDP			; StringCchPrintfA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchCatA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCchCatA@@YGJPADIPBD@Z PROC			; StringCchCatA, COMDAT

; 1347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1348 :     HRESULT hr;
; 1349 : 
; 1350 :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchC

; 1351 :     {
; 1352 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 1353 :     }
; 1354 :     else

	jmp	SHORT $LN1@StringCchC
$LN2@StringCchC:

; 1355 :     {
; 1356 :         hr = StringCatWorkerA(pszDest, cchDest, pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringCatWorkerA@@YGJPADIPBD@Z		; StringCatWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCchC:

; 1357 :     }
; 1358 : 
; 1359 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1360 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCchCatA@@YGJPADIPBD@Z ENDP			; StringCchCatA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCchCopyA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCchCopyA@@YGJPADIPBD@Z PROC			; StringCchCopyA, COMDAT

; 231  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 232  :     HRESULT hr;
; 233  : 
; 234  :     if (cchDest > STRSAFE_MAX_CCH)

	cmp	DWORD PTR _cchDest$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN2@StringCchC

; 235  :     {
; 236  :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 237  :     }
; 238  :     else

	jmp	SHORT $LN1@StringCchC
$LN2@StringCchC:

; 239  :     {
; 240  :         hr = StringCopyWorkerA(pszDest, cchDest, pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringCopyWorkerA@@YGJPADIPBD@Z	; StringCopyWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCchC:

; 241  :     }
; 242  : 
; 243  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 244  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCchCopyA@@YGJPADIPBD@Z ENDP			; StringCchCopyA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringLengthWorkerA@@YGJPBDIPAI@Z
_TEXT	SEGMENT
_cchMaxPrev$ = -20					; size = 4
_hr$ = -8						; size = 4
_psz$ = 8						; size = 4
_cchMax$ = 12						; size = 4
_pcch$ = 16						; size = 4
?StringLengthWorkerA@@YGJPBDIPAI@Z PROC			; StringLengthWorkerA, COMDAT

; 5963 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5964 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 5965 :     size_t cchMaxPrev = cchMax;

	mov	eax, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _cchMaxPrev$[ebp], eax
$LN4@StringLeng:

; 5966 : 
; 5967 :     while (cchMax && (*psz != '\0'))

	cmp	DWORD PTR _cchMax$[ebp], 0
	je	SHORT $LN3@StringLeng
	mov	eax, DWORD PTR _psz$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StringLeng

; 5968 :     {
; 5969 :         psz++;

	mov	eax, DWORD PTR _psz$[ebp]
	add	eax, 1
	mov	DWORD PTR _psz$[ebp], eax

; 5970 :         cchMax--;

	mov	eax, DWORD PTR _cchMax$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchMax$[ebp], eax

; 5971 :     }

	jmp	SHORT $LN4@StringLeng
$LN3@StringLeng:

; 5972 : 
; 5973 :     if (cchMax == 0)

	cmp	DWORD PTR _cchMax$[ebp], 0
	jne	SHORT $LN2@StringLeng

; 5974 :     {
; 5975 :         // the string is longer than cchMax
; 5976 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
$LN2@StringLeng:

; 5977 :     }
; 5978 : 
; 5979 :     if (SUCCEEDED(hr) && pcch)

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringLeng
	cmp	DWORD PTR _pcch$[ebp], 0
	je	SHORT $LN1@StringLeng

; 5980 :     {
; 5981 :         *pcch = cchMaxPrev - cchMax;

	mov	eax, DWORD PTR _cchMaxPrev$[ebp]
	sub	eax, DWORD PTR _cchMax$[ebp]
	mov	ecx, DWORD PTR _pcch$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@StringLeng:

; 5982 :     }
; 5983 : 
; 5984 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 5985 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringLengthWorkerA@@YGJPBDIPAI@Z ENDP			; StringLengthWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringVPrintfWorkerA@@YGJPADIPBD0@Z
_TEXT	SEGMENT
_cchMax$1 = -32						; size = 4
_iRet$2 = -20						; size = 4
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
_argList$ = 20						; size = 4
?StringVPrintfWorkerA@@YGJPADIPBD0@Z PROC		; StringVPrintfWorkerA, COMDAT

; 5579 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5580 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 5581 : 
; 5582 :     if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN6@StringVPri

; 5583 :     {
; 5584 :         // can not null terminate a zero-byte dest buffer
; 5585 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 5586 :     }
; 5587 :     else

	jmp	SHORT $LN5@StringVPri
$LN6@StringVPri:

; 5588 :     {
; 5589 :         int iRet;
; 5590 :         size_t cchMax;
; 5591 : 
; 5592 :         // leave the last space for the null terminator
; 5593 :         cchMax = cchDest - 1;

	mov	eax, DWORD PTR _cchDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchMax$1[ebp], eax

; 5594 : 
; 5595 :         iRet = _vsnprintf(pszDest, cchMax, pszFormat, argList);

	mov	eax, DWORD PTR _argList$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchMax$1[ebp]
	push	edx
	mov	eax, DWORD PTR _pszDest$[ebp]
	push	eax
	call	__vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iRet$2[ebp], eax

; 5596 :         // ASSERT((iRet < 0) || (((size_t)iRet) <= cchMax));
; 5597 : 
; 5598 :         if ((iRet < 0) || (((size_t)iRet) > cchMax))

	cmp	DWORD PTR _iRet$2[ebp], 0
	jl	SHORT $LN3@StringVPri
	mov	eax, DWORD PTR _iRet$2[ebp]
	cmp	eax, DWORD PTR _cchMax$1[ebp]
	jbe	SHORT $LN4@StringVPri
$LN3@StringVPri:

; 5599 :         {
; 5600 :             // need to null terminate the string
; 5601 :             pszDest += cchMax;

	mov	eax, DWORD PTR _pszDest$[ebp]
	add	eax, DWORD PTR _cchMax$1[ebp]
	mov	DWORD PTR _pszDest$[ebp], eax

; 5602 :             *pszDest = '\0';

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	BYTE PTR [eax], 0

; 5603 : 
; 5604 :             // we have truncated pszDest
; 5605 :             hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR _hr$[ebp], -2147024774	; 8007007aH
	jmp	SHORT $LN5@StringVPri
$LN4@StringVPri:

; 5606 :         }
; 5607 :         else if (((size_t)iRet) == cchMax)

	mov	eax, DWORD PTR _iRet$2[ebp]
	cmp	eax, DWORD PTR _cchMax$1[ebp]
	jne	SHORT $LN5@StringVPri

; 5608 :         {
; 5609 :             // need to null terminate the string
; 5610 :             pszDest += cchMax;

	mov	eax, DWORD PTR _pszDest$[ebp]
	add	eax, DWORD PTR _cchMax$1[ebp]
	mov	DWORD PTR _pszDest$[ebp], eax

; 5611 :             *pszDest = '\0';

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	BYTE PTR [eax], 0
$LN5@StringVPri:

; 5612 :         }
; 5613 :     }
; 5614 : 
; 5615 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 5616 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?StringVPrintfWorkerA@@YGJPADIPBD0@Z ENDP		; StringVPrintfWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCatWorkerA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_cchDestCurrent$ = -20					; size = 4
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCatWorkerA@@YGJPADIPBD@Z PROC			; StringCatWorkerA, COMDAT

; 4923 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4924 :    HRESULT hr;
; 4925 :    size_t cchDestCurrent;
; 4926 : 
; 4927 :    hr = StringLengthWorkerA(pszDest, cchDest, &cchDestCurrent);

	lea	eax, DWORD PTR _cchDestCurrent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	push	edx
	call	?StringLengthWorkerA@@YGJPBDIPAI@Z	; StringLengthWorkerA
	mov	DWORD PTR _hr$[ebp], eax

; 4928 : 
; 4929 :    if (SUCCEEDED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@StringCatW

; 4930 :    {
; 4931 :        hr = StringCopyWorkerA(pszDest + cchDestCurrent,
; 4932 :                               cchDest - cchDestCurrent,
; 4933 :                               pszSrc);

	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	sub	ecx, DWORD PTR _cchDestCurrent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$[ebp]
	add	edx, DWORD PTR _cchDestCurrent$[ebp]
	push	edx
	call	?StringCopyWorkerA@@YGJPADIPBD@Z	; StringCopyWorkerA
	mov	DWORD PTR _hr$[ebp], eax
$LN1@StringCatW:

; 4934 :    }
; 4935 : 
; 4936 :    return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4937 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@StringCatW
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN6@StringCatW:
	DD	1
	DD	$LN5@StringCatW
$LN5@StringCatW:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@StringCatW
$LN4@StringCatW:
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?StringCatWorkerA@@YGJPADIPBD@Z ENDP			; StringCatWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\strsafe.h
;	COMDAT ?StringCopyWorkerA@@YGJPADIPBD@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_pszDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
_pszSrc$ = 16						; size = 4
?StringCopyWorkerA@@YGJPADIPBD@Z PROC			; StringCopyWorkerA, COMDAT

; 4247 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4248 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 4249 : 
; 4250 :     if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN3@StringCopy

; 4251 :     {
; 4252 :         // can not null terminate a zero-byte dest buffer
; 4253 :         hr = STRSAFE_E_INVALID_PARAMETER;

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H

; 4254 :     }
; 4255 :     else

	jmp	SHORT $LN4@StringCopy
$LN3@StringCopy:

; 4256 :     {
; 4257 :         while (cchDest && (*pszSrc != '\0'))

	cmp	DWORD PTR _cchDest$[ebp], 0
	je	SHORT $LN2@StringCopy
	mov	eax, DWORD PTR _pszSrc$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@StringCopy

; 4258 :         {
; 4259 :             *pszDest++ = *pszSrc++;

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _pszDest$[ebp]
	add	eax, 1
	mov	DWORD PTR _pszDest$[ebp], eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pszSrc$[ebp], ecx

; 4260 :             cchDest--;

	mov	eax, DWORD PTR _cchDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _cchDest$[ebp], eax

; 4261 :         }

	jmp	SHORT $LN3@StringCopy
$LN2@StringCopy:

; 4262 : 
; 4263 :         if (cchDest == 0)

	cmp	DWORD PTR _cchDest$[ebp], 0
	jne	SHORT $LN1@StringCopy

; 4264 :         {
; 4265 :             // we are going to truncate pszDest
; 4266 :             pszDest--;

	mov	eax, DWORD PTR _pszDest$[ebp]
	sub	eax, 1
	mov	DWORD PTR _pszDest$[ebp], eax

; 4267 :             hr = STRSAFE_E_INSUFFICIENT_BUFFER;

	mov	DWORD PTR _hr$[ebp], -2147024774	; 8007007aH
$LN1@StringCopy:

; 4268 :         }
; 4269 : 
; 4270 :         *pszDest= '\0';

	mov	eax, DWORD PTR _pszDest$[ebp]
	mov	BYTE PTR [eax], 0
$LN4@StringCopy:

; 4271 :     }
; 4272 : 
; 4273 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 4274 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?StringCopyWorkerA@@YGJPADIPBD@Z ENDP			; StringCopyWorkerA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXColorLerp@@YAPAUD3DXCOLOR@@PAU1@PBU1@1M@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
_pC1$ = 12						; size = 4
_pC2$ = 16						; size = 4
_s$ = 20						; size = 4
?D3DXColorLerp@@YAPAUD3DXCOLOR@@PAU1@PBU1@1M@Z PROC	; D3DXColorLerp, COMDAT

; 2229 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2230 : #ifdef D3DX_DEBUG
; 2231 :     if(!pOut || !pC1 || !pC2)
; 2232 :         return NULL;
; 2233 : #endif
; 2234 : 
; 2235 :     pOut->r = pC1->r + s * (pC2->r - pC1->r);

	mov	eax, DWORD PTR _pC2$[ebp]
	mov	ecx, DWORD PTR _pC1$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _pC1$[ebp]
	addss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _pOut$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2236 :     pOut->g = pC1->g + s * (pC2->g - pC1->g);

	mov	eax, DWORD PTR _pC2$[ebp]
	mov	ecx, DWORD PTR _pC1$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _pC1$[ebp]
	addss	xmm0, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pOut$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 2237 :     pOut->b = pC1->b + s * (pC2->b - pC1->b);

	mov	eax, DWORD PTR _pC2$[ebp]
	mov	ecx, DWORD PTR _pC1$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _pC1$[ebp]
	addss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _pOut$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 2238 :     pOut->a = pC1->a + s * (pC2->a - pC1->a);

	mov	eax, DWORD PTR _pC2$[ebp]
	mov	ecx, DWORD PTR _pC1$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	subss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _pC1$[ebp]
	addss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _pOut$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 2239 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 2240 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXColorLerp@@YAPAUD3DXCOLOR@@PAU1@PBU1@1M@Z ENDP	; D3DXColorLerp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1981 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1982 : #ifdef D3DX_DEBUG
; 1983 :     if(!pOut)
; 1984 :         return NULL;
; 1985 : #endif
; 1986 : 
; 1987 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1988 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1989 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1990 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 1991 : 
; 1992 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1993 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1994 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??BD3DXCOLOR@@QBEKXZ
_TEXT	SEGMENT
tv138 = -260						; size = 4
tv95 = -260						; size = 4
tv84 = -260						; size = 4
tv73 = -260						; size = 4
tv139 = -256						; size = 4
tv128 = -256						; size = 4
tv85 = -256						; size = 4
tv74 = -256						; size = 4
_dwA$ = -56						; size = 4
_dwB$ = -44						; size = 4
_dwG$ = -32						; size = 4
_dwR$ = -20						; size = 4
_this$ = -8						; size = 4
??BD3DXCOLOR@@QBEKXZ PROC				; D3DXCOLOR::operator unsigned long, COMDAT
; _this$ = ecx

; 1401 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1402 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN5@operator
	mov	DWORD PTR tv74[ebp], 255		; 000000ffH
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx]
	jb	SHORT $LN3@operator
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	call	__ftoui3
	mov	DWORD PTR tv73[ebp], eax
$LN4@operator:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN6@operator:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _dwR$[ebp], ecx

; 1403 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN9@operator
	mov	DWORD PTR tv85[ebp], 255		; 000000ffH
	jmp	SHORT $LN10@operator
$LN9@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+4]
	jb	SHORT $LN7@operator
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	call	__ftoui3
	mov	DWORD PTR tv84[ebp], eax
$LN8@operator:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv85[ebp], eax
$LN10@operator:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _dwG$[ebp], ecx

; 1404 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN13@operator
	mov	DWORD PTR tv128[ebp], 255		; 000000ffH
	jmp	SHORT $LN14@operator
$LN13@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+8]
	jb	SHORT $LN11@operator
	mov	DWORD PTR tv95[ebp], 0
	jmp	SHORT $LN12@operator
$LN11@operator:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	call	__ftoui3
	mov	DWORD PTR tv95[ebp], eax
$LN12@operator:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR tv128[ebp], eax
$LN14@operator:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _dwB$[ebp], ecx

; 1405 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN17@operator
	mov	DWORD PTR tv139[ebp], 255		; 000000ffH
	jmp	SHORT $LN18@operator
$LN17@operator:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [ecx+12]
	jb	SHORT $LN15@operator
	mov	DWORD PTR tv138[ebp], 0
	jmp	SHORT $LN16@operator
$LN15@operator:
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	call	__ftoui3
	mov	DWORD PTR tv138[ebp], eax
$LN16@operator:
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN18@operator:
	mov	ecx, DWORD PTR tv139[ebp]
	mov	DWORD PTR _dwA$[ebp], ecx

; 1406 : 
; 1407 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

	mov	eax, DWORD PTR _dwA$[ebp]
	shl	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _dwR$[ebp]
	shl	ecx, 16					; 00000010H
	or	eax, ecx
	mov	edx, DWORD PTR _dwG$[ebp]
	shl	edx, 8
	or	eax, edx
	or	eax, DWORD PTR _dwB$[ebp]

; 1408 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??BD3DXCOLOR@@QBEKXZ ENDP				; D3DXCOLOR::operator unsigned long
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??0D3DXCOLOR@@QAE@K@Z
_TEXT	SEGMENT
_f$ = -20						; size = 4
_this$ = -8						; size = 4
_dw$ = 8						; size = 4
??0D3DXCOLOR@@QAE@K@Z PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 1346 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1347 :     CONST FLOAT f = 1.0f / 255.0f;

	movss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR _f$[ebp], xmm0

; 1348 :     r = f * (FLOAT) (unsigned char) (dw >> 16);

	mov	eax, DWORD PTR _dw$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, al
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1349 :     g = f * (FLOAT) (unsigned char) (dw >>  8);

	mov	eax, DWORD PTR _dw$[ebp]
	shr	eax, 8
	movzx	ecx, al
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 1350 :     b = f * (FLOAT) (unsigned char) (dw >>  0);

	movzx	eax, BYTE PTR _dw$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1351 :     a = f * (FLOAT) (unsigned char) (dw >> 24);

	mov	eax, DWORD PTR _dw$[ebp]
	shr	eax, 24					; 00000018H
	movzx	ecx, al
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 1352 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0D3DXCOLOR@@QAE@K@Z ENDP				; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXCOLOR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXCOLOR@@QAE@XZ PROC				; D3DXCOLOR::D3DXCOLOR, COMDAT
; _this$ = ecx

; 516  :     D3DXCOLOR() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXCOLOR@@QAE@XZ ENDP				; D3DXCOLOR::D3DXCOLOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0_D3DXMATRIXA16@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_D3DXMATRIXA16@@QAE@XZ PROC				; _D3DXMATRIXA16::_D3DXMATRIXA16, COMDAT
; _this$ = ecx

; 382  :     _D3DXMATRIXA16() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_D3DXMATRIXA16@@QAE@XZ ENDP				; _D3DXMATRIXA16::_D3DXMATRIXA16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 305  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fx$[ebp]
	movss	DWORD PTR [eax], xmm0

; 306  :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fy$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 307  :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fz$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 308  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _powf
_TEXT	SEGMENT
tv74 = -196						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_powf	PROC						; COMDAT

; 759  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 760  :     return (float)pow(_X, _Y);

	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 761  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_powf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 103  :         {return (_Where); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __Where$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
