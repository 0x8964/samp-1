; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\RakNetTransport.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_UNASSIGNED_PLAYER_ID DD 0ffffffffH
	DW	0ffffH
CONST	ENDS
PUBLIC	??4PlayerID@@QAEAAU0@ABU0@@Z			; PlayerID::operator=
PUBLIC	??0TransportInterface@@QAE@XZ			; TransportInterface::TransportInterface
PUBLIC	??0RakNetTransportCommandParser@@QAE@XZ		; RakNetTransportCommandParser::RakNetTransportCommandParser
PUBLIC	??1RakNetTransportCommandParser@@UAE@XZ		; RakNetTransportCommandParser::~RakNetTransportCommandParser
PUBLIC	?OnCommand@RakNetTransportCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z ; RakNetTransportCommandParser::OnCommand
PUBLIC	?GetName@RakNetTransportCommandParser@@UBEPADXZ	; RakNetTransportCommandParser::GetName
PUBLIC	?SendHelp@RakNetTransportCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z ; RakNetTransportCommandParser::SendHelp
PUBLIC	??_GRakNetTransportCommandParser@@UAEPAXI@Z	; RakNetTransportCommandParser::`scalar deleting destructor'
PUBLIC	??0RakNetTransport@@QAE@XZ			; RakNetTransport::RakNetTransport
PUBLIC	??1RakNetTransport@@QAE@XZ			; RakNetTransport::~RakNetTransport
PUBLIC	?Start@RakNetTransport@@UAE_NG_N@Z		; RakNetTransport::Start
PUBLIC	?Stop@RakNetTransport@@UAEXXZ			; RakNetTransport::Stop
PUBLIC	?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ	; RakNetTransport::Send
PUBLIC	?Receive@RakNetTransport@@UAEPAUPacket@@XZ	; RakNetTransport::Receive
PUBLIC	?DeallocatePacket@RakNetTransport@@UAEXPAUPacket@@@Z ; RakNetTransport::DeallocatePacket
PUBLIC	?CloseConnection@RakNetTransport@@UAEXUPlayerID@@@Z ; RakNetTransport::CloseConnection
PUBLIC	?HasNewConnection@RakNetTransport@@UAE?AUPlayerID@@XZ ; RakNetTransport::HasNewConnection
PUBLIC	?HasLostConnection@RakNetTransport@@UAE?AUPlayerID@@XZ ; RakNetTransport::HasLostConnection
PUBLIC	?SetIncomingPassword@RakNetTransport@@QAEXPBD@Z	; RakNetTransport::SetIncomingPassword
PUBLIC	?GetIncomingPassword@RakNetTransport@@QAEPADXZ	; RakNetTransport::GetIncomingPassword
PUBLIC	?GetCommandParser@RakNetTransport@@UAEPAVCommandParserInterface@@XZ ; RakNetTransport::GetCommandParser
PUBLIC	?AutoAllocate@RakNetTransport@@IAEXXZ		; RakNetTransport::AutoAllocate
PUBLIC	??0?$Queue@UPlayerID@@@DataStructures@@QAE@XZ	; DataStructures::Queue<PlayerID>::Queue<PlayerID>
PUBLIC	??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ	; DataStructures::Queue<PlayerID>::~Queue<PlayerID>
PUBLIC	?Push@?$Queue@UPlayerID@@@DataStructures@@QAEXABUPlayerID@@@Z ; DataStructures::Queue<PlayerID>::Push
PUBLIC	?Pop@?$Queue@UPlayerID@@@DataStructures@@QAE?AUPlayerID@@XZ ; DataStructures::Queue<PlayerID>::Pop
PUBLIC	?Size@?$Queue@UPlayerID@@@DataStructures@@QBEIXZ ; DataStructures::Queue<PlayerID>::Size
PUBLIC	?Clear@?$Queue@UPlayerID@@@DataStructures@@QAEXXZ ; DataStructures::Queue<PlayerID>::Clear
PUBLIC	??$Write@E@BitStream@RakNet@@QAEXE@Z		; RakNet::BitStream::Write<unsigned char>
PUBLIC	??_7TransportInterface@@6B@			; TransportInterface::`vftable'
PUBLIC	??_7RakNetTransportCommandParser@@6B@		; RakNetTransportCommandParser::`vftable'
PUBLIC	??_7RakNetTransport@@6B@			; RakNetTransport::`vftable'
PUBLIC	??_C@_0CK@NKBOGLPO@Changes?5the?5console?5password?5to?5@ ; `string'
PUBLIC	??_C@_0M@FBJIDDGJ@SetPassword?$AA@		; `string'
PUBLIC	??_C@_0BP@OKIDMABB@Removes?5the?5console?5passwords?4?$AA@ ; `string'
PUBLIC	??_C@_0O@BELEKNGP@ClearPassword?$AA@		; `string'
PUBLIC	??_C@_0BL@JBBBHLMH@Gets?5the?5console?5password?4?$AA@ ; `string'
PUBLIC	??_C@_0M@FOIGOFOK@GetPassword?$AA@		; `string'
PUBLIC	??_C@_0BJ@FNFBMFGC@Password?5changed?5to?5?$CFs?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BD@OGNGJJCO@Password?5cleared?$AN?6?$AA@	; `string'
PUBLIC	??_C@_0BB@JMOHCMGH@Password?5is?5?$CFs?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@MENCBHLB@No?5password?5is?5set?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@HPJJPGNF@RakNetTransport?$AA@		; `string'
PUBLIC	??_C@_0DE@FMKBCBHO@Provides?5a?5secure?5connection?5bet@ ; `string'
PUBLIC	??_C@_0EA@MEMGAOBM@and?5the?5console?5server?4?5?5Used?5to@ ; `string'
PUBLIC	??_C@_1EG@DIEEECKO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAq?$AAu?$AAe?$AAu?$AAe@ ; `string'
PUBLIC	??_C@_1BE@OMEGJCHO@?$AAn?$AAe?$AAw?$AA_?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GG@JDEIIJCO@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN@ ; `string'
PUBLIC	??_R4TransportInterface@@6B@			; TransportInterface::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTransportInterface@@@8			; TransportInterface `RTTI Type Descriptor'
PUBLIC	??_R3TransportInterface@@8			; TransportInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TransportInterface@@8			; TransportInterface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TransportInterface@@8		; TransportInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RakNetTransport@@6B@			; RakNetTransport::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRakNetTransport@@@8			; RakNetTransport `RTTI Type Descriptor'
PUBLIC	??_R3RakNetTransport@@8				; RakNetTransport::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RakNetTransport@@8				; RakNetTransport::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RakNetTransport@@8		; RakNetTransport::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RakNetTransportCommandParser@@6B@		; RakNetTransportCommandParser::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRakNetTransportCommandParser@@@8	; RakNetTransportCommandParser `RTTI Type Descriptor'
PUBLIC	??_R3RakNetTransportCommandParser@@8		; RakNetTransportCommandParser::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RakNetTransportCommandParser@@8		; RakNetTransportCommandParser::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RakNetTransportCommandParser@@8	; RakNetTransportCommandParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CommandParserInterface@@8		; CommandParserInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCommandParserInterface@@@8		; CommandParserInterface `RTTI Type Descriptor'
PUBLIC	??_R3CommandParserInterface@@8			; CommandParserInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CommandParserInterface@@8			; CommandParserInterface::`RTTI Base Class Array'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	??8PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator==
EXTRN	__wassert:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	??0CommandParserInterface@@QAE@XZ:PROC		; CommandParserInterface::CommandParserInterface
EXTRN	??1CommandParserInterface@@UAE@XZ:PROC		; CommandParserInterface::~CommandParserInterface
EXTRN	?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z:PROC ; CommandParserInterface::OnNewIncomingConnection
EXTRN	?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z:PROC ; CommandParserInterface::OnConnectionLost
EXTRN	?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z:PROC ; CommandParserInterface::OnTransportChange
EXTRN	?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z:PROC ; CommandParserInterface::GetRegisteredCommand
EXTRN	?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::SendCommandList
EXTRN	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z:PROC ; CommandParserInterface::RegisterCommand
EXTRN	?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	??_ERakNetTransportCommandParser@@UAEPAXI@Z:PROC ; RakNetTransportCommandParser::`vector deleting destructor'
EXTRN	?GetRakPeerInterface@RakNetworkFactory@@SAPAVRakPeerInterface@@XZ:PROC ; RakNetworkFactory::GetRakPeerInterface
EXTRN	?DestroyRakPeerInterface@RakNetworkFactory@@SAXPAVRakPeerInterface@@@Z:PROC ; RakNetworkFactory::DestroyRakPeerInterface
EXTRN	??0BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::BitStream
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?Write@BitStream@RakNet@@QAEXPBDH@Z:PROC	; RakNet::BitStream::Write
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z:PROC	; RakNet::BitStream::WriteBits
EXTRN	__vsnprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?password@?1??GetIncomingPassword@RakNetTransport@@QAEPADXZ@4PADA DB 0100H DUP (?) ; `RakNetTransport::GetIncomingPassword'::`2'::password
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R2CommandParserInterface@@8
rdata$r	SEGMENT
??_R2CommandParserInterface@@8 DD FLAT:??_R1A@?0A@EA@CommandParserInterface@@8 ; CommandParserInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CommandParserInterface@@8
rdata$r	SEGMENT
??_R3CommandParserInterface@@8 DD 00H			; CommandParserInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCommandParserInterface@@@8
data$r	SEGMENT
??_R0?AVCommandParserInterface@@@8 DD FLAT:??_7type_info@@6B@ ; CommandParserInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCommandParserInterface@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CommandParserInterface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CommandParserInterface@@8 DD FLAT:??_R0?AVCommandParserInterface@@@8 ; CommandParserInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RakNetTransportCommandParser@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RakNetTransportCommandParser@@8 DD FLAT:??_R0?AVRakNetTransportCommandParser@@@8 ; RakNetTransportCommandParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RakNetTransportCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_R2RakNetTransportCommandParser@@8
rdata$r	SEGMENT
??_R2RakNetTransportCommandParser@@8 DD FLAT:??_R1A@?0A@EA@RakNetTransportCommandParser@@8 ; RakNetTransportCommandParser::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R3RakNetTransportCommandParser@@8
rdata$r	SEGMENT
??_R3RakNetTransportCommandParser@@8 DD 00H		; RakNetTransportCommandParser::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2RakNetTransportCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRakNetTransportCommandParser@@@8
data$r	SEGMENT
??_R0?AVRakNetTransportCommandParser@@@8 DD FLAT:??_7type_info@@6B@ ; RakNetTransportCommandParser `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRakNetTransportCommandParser@@', 00H
data$r	ENDS
;	COMDAT ??_R4RakNetTransportCommandParser@@6B@
rdata$r	SEGMENT
??_R4RakNetTransportCommandParser@@6B@ DD 00H		; RakNetTransportCommandParser::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRakNetTransportCommandParser@@@8
	DD	FLAT:??_R3RakNetTransportCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RakNetTransport@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RakNetTransport@@8 DD FLAT:??_R0?AVRakNetTransport@@@8 ; RakNetTransport::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RakNetTransport@@8
rdata$r	ENDS
;	COMDAT ??_R2RakNetTransport@@8
rdata$r	SEGMENT
??_R2RakNetTransport@@8 DD FLAT:??_R1A@?0A@EA@RakNetTransport@@8 ; RakNetTransport::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TransportInterface@@8
rdata$r	ENDS
;	COMDAT ??_R3RakNetTransport@@8
rdata$r	SEGMENT
??_R3RakNetTransport@@8 DD 00H				; RakNetTransport::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2RakNetTransport@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRakNetTransport@@@8
data$r	SEGMENT
??_R0?AVRakNetTransport@@@8 DD FLAT:??_7type_info@@6B@	; RakNetTransport `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRakNetTransport@@', 00H
data$r	ENDS
;	COMDAT ??_R4RakNetTransport@@6B@
rdata$r	SEGMENT
??_R4RakNetTransport@@6B@ DD 00H			; RakNetTransport::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRakNetTransport@@@8
	DD	FLAT:??_R3RakNetTransport@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TransportInterface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TransportInterface@@8 DD FLAT:??_R0?AVTransportInterface@@@8 ; TransportInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TransportInterface@@8
rdata$r	ENDS
;	COMDAT ??_R2TransportInterface@@8
rdata$r	SEGMENT
??_R2TransportInterface@@8 DD FLAT:??_R1A@?0A@EA@TransportInterface@@8 ; TransportInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TransportInterface@@8
rdata$r	SEGMENT
??_R3TransportInterface@@8 DD 00H			; TransportInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TransportInterface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTransportInterface@@@8
data$r	SEGMENT
??_R0?AVTransportInterface@@@8 DD FLAT:??_7type_info@@6B@ ; TransportInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTransportInterface@@', 00H
data$r	ENDS
;	COMDAT ??_R4TransportInterface@@6B@
rdata$r	SEGMENT
??_R4TransportInterface@@6B@ DD 00H			; TransportInterface::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTransportInterface@@@8
	DD	FLAT:??_R3TransportInterface@@8
rdata$r	ENDS
;	COMDAT ??_C@_1GG@JDEIIJCO@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN@
CONST	SEGMENT
??_C@_1GG@JDEIIJCO@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN@ DB 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, '(', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'h', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@OMEGJCHO@?$AAn?$AAe?$AAw?$AA_?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@OMEGJCHO@?$AAn?$AAe?$AAw?$AA_?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$AA@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H
	DB	'a', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@DIEEECKO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAq?$AAu?$AAe?$AAu?$AAe@
CONST	SEGMENT
??_C@_1EG@DIEEECKO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAq?$AAu?$AAe?$AAu?$AAe@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'd', 00H, 's', 00H, '_'
	DB	00H, 'q', 00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MEMGAOBM@and?5the?5console?5server?4?5?5Used?5to@
CONST	SEGMENT
??_C@_0EA@MEMGAOBM@and?5the?5console?5server?4?5?5Used?5to@ DB 'and the c'
	DB	'onsole server.  Used to modify the console password.', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FMKBCBHO@Provides?5a?5secure?5connection?5bet@
CONST	SEGMENT
??_C@_0DE@FMKBCBHO@Provides?5a?5secure?5connection?5bet@ DB 'Provides a s'
	DB	'ecure connection between your console', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HPJJPGNF@RakNetTransport?$AA@
CONST	SEGMENT
??_C@_0BA@HPJJPGNF@RakNetTransport?$AA@ DB 'RakNetTransport', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MENCBHLB@No?5password?5is?5set?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BG@MENCBHLB@No?5password?5is?5set?4?$AN?6?$AA@ DB 'No password is '
	DB	'set.', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JMOHCMGH@Password?5is?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BB@JMOHCMGH@Password?5is?5?$CFs?$AN?6?$AA@ DB 'Password is %s', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OGNGJJCO@Password?5cleared?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BD@OGNGJJCO@Password?5cleared?$AN?6?$AA@ DB 'Password cleared', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FNFBMFGC@Password?5changed?5to?5?$CFs?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BJ@FNFBMFGC@Password?5changed?5to?5?$CFs?$AN?6?$AA@ DB 'Password c'
	DB	'hanged to %s', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOIGOFOK@GetPassword?$AA@
CONST	SEGMENT
??_C@_0M@FOIGOFOK@GetPassword?$AA@ DB 'GetPassword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JBBBHLMH@Gets?5the?5console?5password?4?$AA@
CONST	SEGMENT
??_C@_0BL@JBBBHLMH@Gets?5the?5console?5password?4?$AA@ DB 'Gets the conso'
	DB	'le password.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BELEKNGP@ClearPassword?$AA@
CONST	SEGMENT
??_C@_0O@BELEKNGP@ClearPassword?$AA@ DB 'ClearPassword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OKIDMABB@Removes?5the?5console?5passwords?4?$AA@
CONST	SEGMENT
??_C@_0BP@OKIDMABB@Removes?5the?5console?5passwords?4?$AA@ DB 'Removes th'
	DB	'e console passwords.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FBJIDDGJ@SetPassword?$AA@
CONST	SEGMENT
??_C@_0M@FBJIDDGJ@SetPassword?$AA@ DB 'SetPassword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NKBOGLPO@Changes?5the?5console?5password?5to?5@
CONST	SEGMENT
??_C@_0CK@NKBOGLPO@Changes?5the?5console?5password?5to?5@ DB 'Changes the'
	DB	' console password to whatever.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7RakNetTransport@@6B@
CONST	SEGMENT
??_7RakNetTransport@@6B@ DD FLAT:??_R4RakNetTransport@@6B@ ; RakNetTransport::`vftable'
	DD	FLAT:?Start@RakNetTransport@@UAE_NG_N@Z
	DD	FLAT:?Stop@RakNetTransport@@UAEXXZ
	DD	FLAT:?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ
	DD	FLAT:?CloseConnection@RakNetTransport@@UAEXUPlayerID@@@Z
	DD	FLAT:?Receive@RakNetTransport@@UAEPAUPacket@@XZ
	DD	FLAT:?DeallocatePacket@RakNetTransport@@UAEXPAUPacket@@@Z
	DD	FLAT:?HasNewConnection@RakNetTransport@@UAE?AUPlayerID@@XZ
	DD	FLAT:?HasLostConnection@RakNetTransport@@UAE?AUPlayerID@@XZ
	DD	FLAT:?GetCommandParser@RakNetTransport@@UAEPAVCommandParserInterface@@XZ
CONST	ENDS
;	COMDAT ??_7RakNetTransportCommandParser@@6B@
CONST	SEGMENT
??_7RakNetTransportCommandParser@@6B@ DD FLAT:??_R4RakNetTransportCommandParser@@6B@ ; RakNetTransportCommandParser::`vftable'
	DD	FLAT:??_ERakNetTransportCommandParser@@UAEPAXI@Z
	DD	FLAT:?GetName@RakNetTransportCommandParser@@UBEPADXZ
	DD	FLAT:?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z
	DD	FLAT:?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z
	DD	FLAT:?SendHelp@RakNetTransportCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?OnCommand@RakNetTransportCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z
	DD	FLAT:?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z
	DD	FLAT:?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z
	DD	FLAT:?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z
CONST	ENDS
;	COMDAT ??_7TransportInterface@@6B@
CONST	SEGMENT
??_7TransportInterface@@6B@ DD FLAT:??_R4TransportInterface@@6B@ ; TransportInterface::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ$0
__ehfuncinfo$?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RakNetTransport@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RakNetTransport@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1RakNetTransport@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1RakNetTransport@@QAE@XZ$2
__ehfuncinfo$??1RakNetTransport@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1RakNetTransport@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RakNetTransport@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RakNetTransport@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0RakNetTransport@@QAE@XZ$1
__ehfuncinfo$??0RakNetTransport@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0RakNetTransport@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RakNetTransportCommandParser@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RakNetTransportCommandParser@@QAE@XZ$0
__ehfuncinfo$??0RakNetTransportCommandParser@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RakNetTransportCommandParser@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@E@BitStream@RakNet@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 1
??$Write@E@BitStream@RakNet@@QAEXE@Z PROC		; RakNet::BitStream::Write<unsigned char>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@E@BitStream@RakNet@@QAEXE@Z ENDP		; RakNet::BitStream::Write<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queue.h
;	COMDAT ?Clear@?$Queue@UPlayerID@@@DataStructures@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Clear@?$Queue@UPlayerID@@@DataStructures@@QAEXXZ PROC	; DataStructures::Queue<PlayerID>::Clear, COMDAT
; _this$ = ecx

; 285  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  : 		if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@Clear

; 287  : 			return ;

	jmp	SHORT $LN3@Clear
$LN2@Clear:

; 288  : 
; 289  : 		if (allocation_size > 32)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 32			; 00000020H
	jbe	SHORT $LN1@Clear

; 290  : 		{
; 291  : 			delete[] array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 292  : 			allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN1@Clear:

; 293  : 		}
; 294  : 
; 295  : 		head = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 296  : 		tail = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@Clear:

; 297  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$Queue@UPlayerID@@@DataStructures@@QAEXXZ ENDP	; DataStructures::Queue<PlayerID>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queue.h
;	COMDAT ?Size@?$Queue@UPlayerID@@@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$Queue@UPlayerID@@@DataStructures@@QBEIXZ PROC	; DataStructures::Queue<PlayerID>::Size, COMDAT
; _this$ = ecx

; 62   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 		if ( head <= tail )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	ja	SHORT $LN2@Size

; 64   : 			return tail -head;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN3@Size

; 65   : 		else

	jmp	SHORT $LN3@Size
$LN2@Size:

; 66   : 			return allocation_size -head + tail;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+8]
$LN3@Size:

; 67   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$Queue@UPlayerID@@@DataStructures@@QBEIXZ ENDP	; DataStructures::Queue<PlayerID>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queue.h
;	COMDAT ?Pop@?$Queue@UPlayerID@@@DataStructures@@QAE?AUPlayerID@@XZ
_TEXT	SEGMENT
tv78 = -240						; size = 4
$T1 = -230						; size = 6
$T2 = -214						; size = 6
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Pop@?$Queue@UPlayerID@@@DataStructures@@QAE?AUPlayerID@@XZ PROC ; DataStructures::Queue<PlayerID>::Pop, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : #ifdef _DEBUG
; 101  : 		assert( allocation_size > 0 && Size() >= 0 && head != tail);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jbe	SHORT $LN5@Pop
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$Queue@UPlayerID@@@DataStructures@@QBEIXZ ; DataStructures::Queue<PlayerID>::Size
	test	eax, eax
	jb	SHORT $LN5@Pop
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN6@Pop
$LN5@Pop:
	push	101					; 00000065H
	push	OFFSET ??_C@_1EG@DIEEECKO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAq?$AAu?$AAe?$AAu?$AAe@
	push	OFFSET ??_C@_1GG@JDEIIJCO@?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@Pop:

; 102  : #endif
; 103  : 		//head=(head+1) % allocation_size;
; 104  : 
; 105  : 		if ( ++head == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv78[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN2@Pop

; 106  : 			head = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@Pop:

; 107  : 
; 108  : 		if ( head == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Pop

; 109  : 			return ( queue_type ) array[ allocation_size -1 ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T1[ebp], edx
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR $T1[ebp+4], ax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR $T1[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@Pop
$LN1@Pop:

; 110  : 
; 111  : 		return ( queue_type ) array[ head -1 ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T2[ebp], edx
	mov	ax, WORD PTR [ecx+4]
	mov	WORD PTR $T2[ebp+4], ax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR $T2[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@Pop:

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Pop@?$Queue@UPlayerID@@@DataStructures@@QAE?AUPlayerID@@XZ ENDP ; DataStructures::Queue<PlayerID>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queue.h
;	COMDAT ?Push@?$Queue@UPlayerID@@@DataStructures@@QAEXABUPlayerID@@@Z
_TEXT	SEGMENT
tv87 = -268						; size = 4
$T1 = -260						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_counter$4 = -32					; size = 4
_new_array$5 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Push@?$Queue@UPlayerID@@@DataStructures@@QAEXABUPlayerID@@@Z PROC ; DataStructures::Queue<PlayerID>::Push, COMDAT
; _this$ = ecx

; 182  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 		if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN6@Push

; 184  : 		{
; 185  : 			array = new queue_type[ 16 ];

	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx

; 186  : 			head = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 187  : 			tail = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 188  : 			array[ 0 ] = input;

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, 6
	imul	ecx, ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 189  : 			allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 16			; 00000010H

; 190  : 			return ;

	jmp	$LN7@Push
$LN6@Push:

; 191  : 		}
; 192  : 
; 193  : 		array[ tail++ ] = input;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+8], 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR tv87[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv87[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=

; 194  : 
; 195  : 		if ( tail == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN5@Push

; 196  : 			tail = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN5@Push:

; 197  : 
; 198  : 		if ( tail == head )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	$LN7@Push

; 199  : 		{
; 200  : 			//  unsigned int index=tail;
; 201  : 
; 202  : 			// Need to allocate more memory.
; 203  : 			queue_type * new_array;
; 204  : 			new_array = new queue_type[ allocation_size * 2 ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	shl	eax, 1
	xor	ecx, ecx
	mov	edx, 6
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _new_array$5[ebp], eax

; 205  : #ifdef _DEBUG
; 206  : 
; 207  : 			assert( new_array );

	cmp	DWORD PTR _new_array$5[ebp], 0
	jne	SHORT $LN9@Push
	push	207					; 000000cfH
	push	OFFSET ??_C@_1EG@DIEEECKO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAq?$AAu?$AAe?$AAu?$AAe@
	push	OFFSET ??_C@_1BE@OMEGJCHO@?$AAn?$AAe?$AAw?$AA_?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@Push:

; 208  : #endif
; 209  : 
; 210  : 			for ( unsigned int counter = 0; counter < allocation_size; ++counter )

	mov	DWORD PTR _counter$4[ebp], 0
	jmp	SHORT $LN3@Push
$LN2@Push:
	mov	eax, DWORD PTR _counter$4[ebp]
	add	eax, 1
	mov	DWORD PTR _counter$4[ebp], eax
$LN3@Push:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _counter$4[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@Push

; 211  : 				new_array[ counter ] = array[ ( head + counter ) % ( allocation_size ) ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, DWORD PTR _counter$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+12]
	imul	edx, edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	imul	ecx, DWORD PTR _counter$4[ebp], 6
	add	ecx, DWORD PTR _new_array$5[ebp]
	call	??4PlayerID@@QAEAAU0@ABU0@@Z		; PlayerID::operator=
	jmp	SHORT $LN2@Push
$LN1@Push:

; 212  : 
; 213  : 			head = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 214  : 
; 215  : 			tail = allocation_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx

; 216  : 
; 217  : 			allocation_size *= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 218  : 
; 219  : 			// Delete the old array and move the pointer to the new array
; 220  : 			delete [] array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 221  : 
; 222  : 			array = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$5[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@Push:

; 223  : 		}
; 224  : 
; 225  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$Queue@UPlayerID@@@DataStructures@@QAEXABUPlayerID@@@Z ENDP ; DataStructures::Queue<PlayerID>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queue.h
;	COMDAT ??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ PROC	; DataStructures::Queue<PlayerID>::~Queue<PlayerID>, COMDAT
; _this$ = ecx

; 92   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 		if (allocation_size>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jbe	SHORT $LN2@Queue

; 94   : 			delete [] array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@Queue:

; 95   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ENDP	; DataStructures::Queue<PlayerID>::~Queue<PlayerID>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_queue.h
;	COMDAT ??0?$Queue@UPlayerID@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??0?$Queue@UPlayerID@@@DataStructures@@QAE@XZ PROC	; DataStructures::Queue<PlayerID>::Queue<PlayerID>, COMDAT
; _this$ = ecx

; 83   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 		allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 16			; 00000010H

; 85   : 		array = new queue_type[ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, 6
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx

; 86   : 		head = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 87   : 		tail = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 88   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ENDP	; DataStructures::Queue<PlayerID>::Queue<PlayerID>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?AutoAllocate@RakNetTransport@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AutoAllocate@RakNetTransport@@IAEXXZ PROC		; RakNetTransport::AutoAllocate, COMDAT
; _this$ = ecx

; 172  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 173  : 	if (rakPeer==0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@AutoAlloca

; 174  : 		rakPeer=RakNetworkFactory::GetRakPeerInterface();

	call	?GetRakPeerInterface@RakNetworkFactory@@SAPAVRakPeerInterface@@XZ ; RakNetworkFactory::GetRakPeerInterface
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN2@AutoAlloca:

; 175  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AutoAllocate@RakNetTransport@@IAEXXZ ENDP		; RakNetTransport::AutoAllocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?GetCommandParser@RakNetTransport@@UAEPAVCommandParserInterface@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCommandParser@RakNetTransport@@UAEPAVCommandParserInterface@@XZ PROC ; RakNetTransport::GetCommandParser, COMDAT
; _this$ = ecx

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 178  :     return &rakNetTransportCommandParser;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 40					; 00000028H

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCommandParser@RakNetTransport@@UAEPAVCommandParserInterface@@XZ ENDP ; RakNetTransport::GetCommandParser
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?GetIncomingPassword@RakNetTransport@@QAEPADXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
_passwordLength$ = -20					; size = 4
_this$ = -8						; size = 4
?GetIncomingPassword@RakNetTransport@@QAEPADXZ PROC	; RakNetTransport::GetIncomingPassword, COMDAT
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 	static char password[256];
; 160  : 	int passwordLength=255;

	mov	DWORD PTR _passwordLength$[ebp], 255	; 000000ffH

; 161  : 	rakPeer->GetIncomingPassword((char*)password, &passwordLength);

	mov	esi, esp
	lea	eax, DWORD PTR _passwordLength$[ebp]
	push	eax
	push	OFFSET ?password@?1??GetIncomingPassword@RakNetTransport@@QAEPADXZ@4PADA
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 162  : 	password[passwordLength]=0;

	mov	eax, DWORD PTR _passwordLength$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 256			; 00000100H
	jae	SHORT $LN3@GetIncomin
	jmp	SHORT $LN4@GetIncomin
$LN3@GetIncomin:
	call	___report_rangecheckfailure
$LN4@GetIncomin:
	mov	ecx, DWORD PTR $T1[ebp]
	mov	BYTE PTR ?password@?1??GetIncomingPassword@RakNetTransport@@QAEPADXZ@4PADA[ecx], 0

; 163  : 	return (char*) password;

	mov	eax, OFFSET ?password@?1??GetIncomingPassword@RakNetTransport@@QAEPADXZ@4PADA
$LN2@GetIncomin:

; 164  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GetIncomin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@GetIncomin:
	DD	1
	DD	$LN6@GetIncomin
$LN6@GetIncomin:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@GetIncomin
$LN5@GetIncomin:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?GetIncomingPassword@RakNetTransport@@QAEPADXZ ENDP	; RakNetTransport::GetIncomingPassword
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?SetIncomingPassword@RakNetTransport@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_password$ = 8						; size = 4
?SetIncomingPassword@RakNetTransport@@QAEXPBD@Z PROC	; RakNetTransport::SetIncomingPassword, COMDAT
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	if (password)

	cmp	DWORD PTR _password$[ebp], 0
	je	SHORT $LN2@SetIncomin

; 153  : 		rakPeer->SetIncomingPassword(password, (int) strlen(password)+1);

	mov	eax, DWORD PTR _password$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _password$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 154  : 	else

	jmp	SHORT $LN3@SetIncomin
$LN2@SetIncomin:

; 155  : 		rakPeer->SetIncomingPassword(0, 0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@SetIncomin:

; 156  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetIncomingPassword@RakNetTransport@@QAEXPBD@Z ENDP	; RakNetTransport::SetIncomingPassword
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?HasLostConnection@RakNetTransport@@UAE?AUPlayerID@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?HasLostConnection@RakNetTransport@@UAE?AUPlayerID@@XZ PROC ; RakNetTransport::HasLostConnection, COMDAT
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 	if (lostConnections.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Size@?$Queue@UPlayerID@@@DataStructures@@QBEIXZ ; DataStructures::Queue<PlayerID>::Size
	test	eax, eax
	je	SHORT $LN1@HasLostCon

; 147  : 		return lostConnections.Pop();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Pop@?$Queue@UPlayerID@@@DataStructures@@QAE?AUPlayerID@@XZ ; DataStructures::Queue<PlayerID>::Pop
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@HasLostCon
$LN1@HasLostCon:

; 148  : 	return UNASSIGNED_PLAYER_ID;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _UNASSIGNED_PLAYER_ID
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _UNASSIGNED_PLAYER_ID+4
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@HasLostCon:

; 149  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?HasLostConnection@RakNetTransport@@UAE?AUPlayerID@@XZ ENDP ; RakNetTransport::HasLostConnection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?HasNewConnection@RakNetTransport@@UAE?AUPlayerID@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?HasNewConnection@RakNetTransport@@UAE?AUPlayerID@@XZ PROC ; RakNetTransport::HasNewConnection, COMDAT
; _this$ = ecx

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 	if (newConnections.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$Queue@UPlayerID@@@DataStructures@@QBEIXZ ; DataStructures::Queue<PlayerID>::Size
	test	eax, eax
	je	SHORT $LN1@HasNewConn

; 141  : 		return newConnections.Pop();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Pop@?$Queue@UPlayerID@@@DataStructures@@QAE?AUPlayerID@@XZ ; DataStructures::Queue<PlayerID>::Pop
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@HasNewConn
$LN1@HasNewConn:

; 142  : 	return UNASSIGNED_PLAYER_ID;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _UNASSIGNED_PLAYER_ID
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _UNASSIGNED_PLAYER_ID+4
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@HasNewConn:

; 143  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?HasNewConnection@RakNetTransport@@UAE?AUPlayerID@@XZ ENDP ; RakNetTransport::HasNewConnection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?CloseConnection@RakNetTransport@@UAEXUPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
?CloseConnection@RakNetTransport@@UAEXUPlayerID@@@Z PROC ; RakNetTransport::CloseConnection, COMDAT
; _this$ = ecx

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 	rakPeer->CloseConnection(playerId, true, 0);

	mov	esi, esp
	push	0
	push	1
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+88]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 113  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CloseConnection@RakNetTransport@@UAEXUPlayerID@@@Z ENDP ; RakNetTransport::CloseConnection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?DeallocatePacket@RakNetTransport@@UAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?DeallocatePacket@RakNetTransport@@UAEXPAUPacket@@@Z PROC ; RakNetTransport::DeallocatePacket, COMDAT
; _this$ = ecx

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 	if (rakPeer==0) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Deallocate
	jmp	SHORT $LN2@Deallocate
$LN1@Deallocate:

; 168  : 	packet->data--; // Go back to ID_TRANSPORT_STRING, which we passed up in Receive()

	mov	eax, DWORD PTR _packet$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	edx, DWORD PTR _packet$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 169  : 	rakPeer->DeallocatePacket(packet);

	mov	esi, esp
	mov	eax, DWORD PTR _packet$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Deallocate:

; 170  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeallocatePacket@RakNetTransport@@UAEXPAUPacket@@@Z ENDP ; RakNetTransport::DeallocatePacket
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?Receive@RakNetTransport@@UAEPAUPacket@@XZ
_TEXT	SEGMENT
_p$ = -20						; size = 4
_this$ = -8						; size = 4
?Receive@RakNetTransport@@UAEPAUPacket@@XZ PROC		; RakNetTransport::Receive, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 	if (rakPeer==0) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@Receive
	xor	eax, eax
	jmp	$LN8@Receive
$LN7@Receive:

; 117  : 	Packet *p;
; 118  : 	p=rakPeer->Receive();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 119  : 	if (p==0)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN6@Receive

; 120  : 		return 0;

	xor	eax, eax
	jmp	$LN8@Receive
$LN6@Receive:

; 121  : 	if (p->data[0]==ID_TRANSPORT_STRING)

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 55					; 00000037H
	jne	SHORT $LN5@Receive

; 122  : 	{
; 123  : 		p->data++; // Go past ID_TRANSPORT_STRING, since the transport protocol is only supposed to send strings.

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 124  : 		return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	$LN8@Receive
$LN5@Receive:

; 125  : 	}
; 126  : 	if (p->data[0]==ID_NEW_INCOMING_CONNECTION)

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 26					; 0000001aH
	jne	SHORT $LN4@Receive

; 127  : 	{
; 128  : 		newConnections.Push(p->playerId);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Push@?$Queue@UPlayerID@@@DataStructures@@QAEXABUPlayerID@@@Z ; DataStructures::Queue<PlayerID>::Push
	jmp	SHORT $LN3@Receive
$LN4@Receive:

; 129  : 	}
; 130  : 	else if (p->data[0]==ID_DISCONNECTION_NOTIFICATION || p->data[0]==ID_CONNECTION_LOST)

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 28					; 0000001cH
	je	SHORT $LN1@Receive
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 30					; 0000001eH
	jne	SHORT $LN3@Receive
$LN1@Receive:

; 131  : 	{
; 132  : 		lostConnections.Push(p->playerId);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Push@?$Queue@UPlayerID@@@DataStructures@@QAEXABUPlayerID@@@Z ; DataStructures::Queue<PlayerID>::Push
$LN3@Receive:

; 133  : 	}
; 134  : 	rakPeer->DeallocatePacket(p);

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 135  : 
; 136  : 	return 0;

	xor	eax, eax
$LN8@Receive:

; 137  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Receive@RakNetTransport@@UAEPAUPacket@@XZ ENDP		; RakNetTransport::Receive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ
_TEXT	SEGMENT
tv136 = -1037						; size = 1
$T2 = -1032						; size = 4
_str$ = -828						; size = 273
_ap$ = -544						; size = 4
_text$ = -532						; size = 512
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_playerId$ = 12						; size = 6
_data$ = 20						; size = 4
?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ PROC	; RakNetTransport::Send, COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1028				; 00000404H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1040]
	mov	ecx, 257				; 00000101H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 94   : 	if (rakPeer==0) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@Send
	jmp	$LN5@Send
$LN3@Send:

; 95   : 	if (data==0 || data[0]==0) return;

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN1@Send
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _data$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN2@Send
$LN1@Send:
	jmp	$LN5@Send
$LN2@Send:

; 96   : 
; 97   : 	char text[REMOTE_MAX_TEXT_INPUT];
; 98   : 	va_list ap;
; 99   : 	va_start(ap, data);

	lea	eax, DWORD PTR _data$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax

; 100  : 	_vsnprintf(text, REMOTE_MAX_TEXT_INPUT, data, ap);

	mov	eax, DWORD PTR _ap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _text$[ebp]
	push	edx
	call	__vsnprintf
	add	esp, 16					; 00000010H

; 101  : 	va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0

; 102  : 	text[REMOTE_MAX_TEXT_INPUT-1]=0;

	mov	eax, 1
	imul	ecx, eax, 511
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 512			; 00000200H
	jae	SHORT $LN6@Send
	jmp	SHORT $LN7@Send
$LN6@Send:
	call	___report_rangecheckfailure
$LN7@Send:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _text$[ebp+edx], 0

; 103  : 
; 104  : 	RakNet::BitStream str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 105  : 	str.Write((unsigned char) ID_TRANSPORT_STRING);

	push	55					; 00000037H
	lea	ecx, DWORD PTR _str$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 106  : 	str.Write(text, (int) strlen(text));

	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 107  : 	str.Write((unsigned char) 0); // Null terminate the string

	push	0
	lea	ecx, DWORD PTR _str$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 108  : 	rakPeer->Send(&str, MEDIUM_PRIORITY, RELIABLE_ORDERED, 0, playerId, (playerId==UNASSIGNED_PLAYER_ID)!=0);

	push	OFFSET _UNASSIGNED_PLAYER_ID
	lea	ecx, DWORD PTR _playerId$[ebp]
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@Send
	mov	BYTE PTR tv136[ebp], 1
	jmp	SHORT $LN9@Send
$LN8@Send:
	mov	BYTE PTR tv136[ebp], 0
$LN9@Send:
	mov	esi, esp
	movzx	ecx, BYTE PTR tv136[ebp]
	push	ecx
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [edx+4], cx
	push	0
	push	3
	push	2
	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 109  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _str$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN5@Send:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Send
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1040				; 00000410H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@Send:
	DD	2
	DD	$LN14@Send
$LN14@Send:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN11@Send
	DD	-828					; fffffcc4H
	DD	273					; 00000111H
	DD	$LN12@Send
$LN12@Send:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN11@Send:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ$0:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1044]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Send@RakNetTransport@@UAAXUPlayerID@@PBDZZ ENDP	; RakNetTransport::Send
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?Stop@RakNetTransport@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Stop@RakNetTransport@@UAEXXZ PROC			; RakNetTransport::Stop, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	if (rakPeer==0) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Stop
	jmp	SHORT $LN2@Stop
$LN1@Stop:

; 88   : 	rakPeer->Disconnect(1000, 0);

	mov	esi, esp
	push	0
	push	1000					; 000003e8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 89   : 	newConnections.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Clear@?$Queue@UPlayerID@@@DataStructures@@QAEXXZ ; DataStructures::Queue<PlayerID>::Clear

; 90   : 	lostConnections.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Clear@?$Queue@UPlayerID@@@DataStructures@@QAEXXZ ; DataStructures::Queue<PlayerID>::Clear
$LN2@Stop:

; 91   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Stop@RakNetTransport@@UAEXXZ ENDP			; RakNetTransport::Stop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?Start@RakNetTransport@@UAE_NG_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_port$ = 8						; size = 2
_serverMode$ = 12					; size = 1
?Start@RakNetTransport@@UAE_NG_N@Z PROC			; RakNetTransport::Start, COMDAT
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 	AutoAllocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AutoAllocate@RakNetTransport@@IAEXXZ	; RakNetTransport::AutoAllocate

; 75   : 	rakPeer->InitializeSecurity(0,0,0,0);

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 76   : 
; 77   : 	if (serverMode)

	movzx	eax, BYTE PTR _serverMode$[ebp]
	test	eax, eax
	je	SHORT $LN1@Start

; 78   : 	{
; 79   : 		// Allow up to 8 remote systems to login
; 80   : 		rakPeer->SetMaximumIncomingConnections(8);

	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Start:

; 81   : 	}
; 82   : 
; 83   : 	return rakPeer->Initialize(8, port, 250, 0);

	mov	esi, esp
	push	0
	push	250					; 000000faH
	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Start@RakNetTransport@@UAE_NG_N@Z ENDP			; RakNetTransport::Start
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ??1RakNetTransport@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1RakNetTransport@@QAE@XZ PROC				; RakNetTransport::~RakNetTransport, COMDAT
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RakNetTransport@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RakNetTransport@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 69   : 	if (rakPeer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@RakNetTran

; 70   : 		RakNetworkFactory::DestroyRakPeerInterface(rakPeer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?DestroyRakPeerInterface@RakNetworkFactory@@SAXPAVRakPeerInterface@@@Z ; RakNetworkFactory::DestroyRakPeerInterface
	add	esp, 4
$LN2@RakNetTran:

; 71   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1RakNetTransportCommandParser@@UAE@XZ	; RakNetTransportCommandParser::~RakNetTransportCommandParser
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ; DataStructures::Queue<PlayerID>::~Queue<PlayerID>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ; DataStructures::Queue<PlayerID>::~Queue<PlayerID>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RakNetTransport@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ; DataStructures::Queue<PlayerID>::~Queue<PlayerID>
__unwindfunclet$??1RakNetTransport@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ; DataStructures::Queue<PlayerID>::~Queue<PlayerID>
__unwindfunclet$??1RakNetTransport@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1RakNetTransportCommandParser@@UAE@XZ	; RakNetTransportCommandParser::~RakNetTransportCommandParser
__ehhandler$??1RakNetTransport@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RakNetTransport@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RakNetTransport@@QAE@XZ ENDP				; RakNetTransport::~RakNetTransport
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ??0RakNetTransport@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0RakNetTransport@@QAE@XZ PROC				; RakNetTransport::RakNetTransport, COMDAT
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RakNetTransport@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TransportInterface@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RakNetTransport@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ; DataStructures::Queue<PlayerID>::Queue<PlayerID>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ; DataStructures::Queue<PlayerID>::Queue<PlayerID>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0RakNetTransportCommandParser@@QAE@XZ	; RakNetTransportCommandParser::RakNetTransportCommandParser

; 65   : 	rakPeer=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 66   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RakNetTransport@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ; DataStructures::Queue<PlayerID>::~Queue<PlayerID>
__unwindfunclet$??0RakNetTransport@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$Queue@UPlayerID@@@DataStructures@@QAE@XZ ; DataStructures::Queue<PlayerID>::~Queue<PlayerID>
__ehhandler$??0RakNetTransport@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RakNetTransport@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RakNetTransport@@QAE@XZ ENDP				; RakNetTransport::RakNetTransport
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GRakNetTransportCommandParser@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GRakNetTransportCommandParser@@UAEPAXI@Z PROC	; RakNetTransportCommandParser::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RakNetTransportCommandParser@@UAE@XZ	; RakNetTransportCommandParser::~RakNetTransportCommandParser
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRakNetTransportCommandParser@@UAEPAXI@Z ENDP	; RakNetTransportCommandParser::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?SendHelp@RakNetTransportCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_transport$ = 8						; size = 4
_playerId$ = 12						; size = 6
?SendHelp@RakNetTransportCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z PROC ; RakNetTransportCommandParser::SendHelp, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	transport->Send(playerId, "Provides a secure connection between your console\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DE@FMKBCBHO@Provides?5a?5secure?5connection?5bet@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 61   : 	transport->Send(playerId, "and the console server.  Used to modify the console password.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0EA@MEMGAOBM@and?5the?5console?5server?4?5?5Used?5to@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SendHelp@RakNetTransportCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z ENDP ; RakNetTransportCommandParser::SendHelp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?GetName@RakNetTransportCommandParser@@UBEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetName@RakNetTransportCommandParser@@UBEPADXZ PROC	; RakNetTransportCommandParser::GetName, COMDAT
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 	return "RakNetTransport";

	mov	eax, OFFSET ??_C@_0BA@HPJJPGNF@RakNetTransport?$AA@

; 57   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetName@RakNetTransportCommandParser@@UBEPADXZ ENDP	; RakNetTransportCommandParser::GetName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ?OnCommand@RakNetTransportCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z
_TEXT	SEGMENT
_password$1 = -32					; size = 4
_rnt$ = -20						; size = 4
_this$ = -8						; size = 4
_command$ = 8						; size = 4
_numParameters$ = 12					; size = 4
_parameterList$ = 16					; size = 4
_transport$ = 20					; size = 4
_playerId$ = 24						; size = 6
_originalString$ = 32					; size = 4
?OnCommand@RakNetTransportCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z PROC ; RakNetTransportCommandParser::OnCommand, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 	RakNetTransport *rnt = (RakNetTransport*) transport;

	mov	eax, DWORD PTR _transport$[ebp]
	mov	DWORD PTR _rnt$[ebp], eax

; 33   : 	if (strcmp(command, "SetPassword")==0)

	push	OFFSET ??_C@_0M@FBJIDDGJ@SetPassword?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@OnCommand

; 34   : 	{
; 35   : 		rnt->SetIncomingPassword(parameterList[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _rnt$[ebp]
	call	?SetIncomingPassword@RakNetTransport@@QAEXPBD@Z ; RakNetTransport::SetIncomingPassword

; 36   : 		rnt->Send(playerId, "Password changed to %s\r\n", parameterList[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	esi, esp
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	push	OFFSET ??_C@_0BJ@FNFBMFGC@Password?5changed?5to?5?$CFs?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _rnt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _rnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@OnCommand
$LN7@OnCommand:

; 37   : 	}
; 38   : 	else if (strcmp(command, "ClearPassword")==0)

	push	OFFSET ??_C@_0O@BELEKNGP@ClearPassword?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@OnCommand

; 39   : 	{
; 40   : 		rnt->SetIncomingPassword(0);

	push	0
	mov	ecx, DWORD PTR _rnt$[ebp]
	call	?SetIncomingPassword@RakNetTransport@@QAEXPBD@Z ; RakNetTransport::SetIncomingPassword

; 41   : 		rnt->Send(playerId, "Password cleared\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OGNGJJCO@Password?5cleared?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _rnt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rnt$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN6@OnCommand
$LN5@OnCommand:

; 42   : 	}
; 43   : 	else if (strcmp(command, "GetPassword")==0)

	push	OFFSET ??_C@_0M@FOIGOFOK@GetPassword?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN6@OnCommand

; 44   : 	{
; 45   : 		char *password;
; 46   : 		password=rnt->GetIncomingPassword();

	mov	ecx, DWORD PTR _rnt$[ebp]
	call	?GetIncomingPassword@RakNetTransport@@QAEPADXZ ; RakNetTransport::GetIncomingPassword
	mov	DWORD PTR _password$1[ebp], eax

; 47   : 		if (password[0])

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _password$1[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN2@OnCommand

; 48   : 			rnt->Send(playerId, "Password is %s\r\n",password);

	mov	esi, esp
	mov	eax, DWORD PTR _password$1[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@JMOHCMGH@Password?5is?5?$CFs?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _rnt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _rnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 		else

	jmp	SHORT $LN6@OnCommand
$LN2@OnCommand:

; 50   : 			rnt->Send(playerId, "No password is set.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BG@MENCBHLB@No?5password?5is?5set?4?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _rnt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _rnt$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@OnCommand:

; 51   : 	}
; 52   : 	return true;

	mov	al, 1

; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?OnCommand@RakNetTransportCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z ENDP ; RakNetTransportCommandParser::OnCommand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ??1RakNetTransportCommandParser@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1RakNetTransportCommandParser@@UAE@XZ PROC		; RakNetTransportCommandParser::~RakNetTransportCommandParser, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RakNetTransportCommandParser@@6B@

; 26   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CommandParserInterface@@UAE@XZ	; CommandParserInterface::~CommandParserInterface
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1RakNetTransportCommandParser@@UAE@XZ ENDP		; RakNetTransportCommandParser::~RakNetTransportCommandParser
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknettransport.cpp
;	COMDAT ??0RakNetTransportCommandParser@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0RakNetTransportCommandParser@@QAE@XZ PROC		; RakNetTransportCommandParser::RakNetTransportCommandParser, COMDAT
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RakNetTransportCommandParser@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CommandParserInterface@@QAE@XZ	; CommandParserInterface::CommandParserInterface
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RakNetTransportCommandParser@@6B@

; 20   : 	RegisterCommand(1, "SetPassword","Changes the console password to whatever.");

	push	OFFSET ??_C@_0CK@NKBOGLPO@Changes?5the?5console?5password?5to?5@
	push	OFFSET ??_C@_0M@FBJIDDGJ@SetPassword?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 21   : 	RegisterCommand(0, "ClearPassword","Removes the console passwords.");

	push	OFFSET ??_C@_0BP@OKIDMABB@Removes?5the?5console?5passwords?4?$AA@
	push	OFFSET ??_C@_0O@BELEKNGP@ClearPassword?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 22   : 	RegisterCommand(0, "GetPassword","Gets the console password.");

	push	OFFSET ??_C@_0BL@JBBBHLMH@Gets?5the?5console?5password?4?$AA@
	push	OFFSET ??_C@_0M@FOIGOFOK@GetPassword?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 23   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RakNetTransportCommandParser@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandParserInterface@@UAE@XZ	; CommandParserInterface::~CommandParserInterface
__ehhandler$??0RakNetTransportCommandParser@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RakNetTransportCommandParser@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RakNetTransportCommandParser@@QAE@XZ ENDP		; RakNetTransportCommandParser::RakNetTransportCommandParser
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0TransportInterface@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TransportInterface@@QAE@XZ PROC			; TransportInterface::TransportInterface, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TransportInterface@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TransportInterface@@QAE@XZ ENDP			; TransportInterface::TransportInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\networktypes.h
;	COMDAT ??4PlayerID@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4PlayerID@@QAEAAU0@ABU0@@Z PROC			; PlayerID::operator=, COMDAT
; _this$ = ecx

; 74   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		binaryAddress = input.binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 76   : 		port = input.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 77   : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4PlayerID@@QAEAAU0@ABU0@@Z ENDP			; PlayerID::operator=
_TEXT	ENDS
END
