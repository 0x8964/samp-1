; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\LightweightDatabaseCommon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z ; DatabaseFilter::Serialize
PUBLIC	?Deserialize@DatabaseFilter@@QAE_NPAVBitStream@RakNet@@@Z ; DatabaseFilter::Deserialize
PUBLIC	?Serialize@DatabaseCellUpdate@@QAEXPAVBitStream@RakNet@@@Z ; DatabaseCellUpdate::Serialize
PUBLIC	?Deserialize@DatabaseCellUpdate@@QAE_NPAVBitStream@RakNet@@@Z ; DatabaseCellUpdate::Deserialize
PUBLIC	??$Write@E@BitStream@RakNet@@QAEXE@Z		; RakNet::BitStream::Write<unsigned char>
PUBLIC	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z		; RakNet::BitStream::Read<unsigned char>
PUBLIC	?__LINE__Var@?1??Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z@4JA ; `DatabaseFilter::Serialize'::`2'::__LINE__Var
PUBLIC	??_C@_1GM@BLKPLKPO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAi?$AAg?$AAh?$AAt?$AAw?$AAe?$AAi@ ; `string'
PUBLIC	??_C@_1DC@MGEMJLMA@?$AAc?$AAe?$AAl?$AAl?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?4?$AAi?$AAs?$AAE?$AAm?$AAp?$AAt?$AAy?$AA?$DN?$AA?$DN?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ ; `string'
EXTRN	__wassert:PROC
EXTRN	?SerializeCell@TableSerializer@@SAXPAVBitStream@RakNet@@PAUCell@Table@DataStructures@@W4ColumnType@56@@Z:PROC ; TableSerializer::SerializeCell
EXTRN	?DeserializeCell@TableSerializer@@SA_NPAVBitStream@RakNet@@PAUCell@Table@DataStructures@@W4ColumnType@56@@Z:PROC ; TableSerializer::DeserializeCell
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z:PROC	; RakNet::BitStream::WriteBits
EXTRN	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z:PROC	; RakNet::BitStream::ReadBits
EXTRN	?Instance@StringCompressor@@SAPAV1@XZ:PROC	; StringCompressor::Instance
EXTRN	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z:PROC ; StringCompressor::EncodeString
EXTRN	?DecodeString@StringCompressor@@QAE_NPADHPAVBitStream@RakNet@@H@Z:PROC ; StringCompressor::DecodeString
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DC@MGEMJLMA@?$AAc?$AAe?$AAl?$AAl?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?4?$AAi?$AAs?$AAE?$AAm?$AAp?$AAt?$AAy?$AA?$DN?$AA?$DN?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@MGEMJLMA@?$AAc?$AAe?$AAl?$AAl?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?4?$AAi?$AAs?$AAE?$AAm?$AAp?$AAt?$AAy?$AA?$DN?$AA?$DN?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'e', 00H, 'l', 00H, 'l', 00H, 'V', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '.', 00H, 'i', 00H, 's', 00H, 'E', 00H, 'm'
	DB	00H, 'p', 00H, 't', 00H, 'y', 00H, '=', 00H, '=', 00H, 'f', 00H
	DB	'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@BLKPLKPO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAi?$AAg?$AAh?$AAt?$AAw?$AAe?$AAi@
CONST	SEGMENT
??_C@_1GM@BLKPLKPO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAi?$AAg?$AAh?$AAt?$AAw?$AAe?$AAi@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'g'
	DB	00H, 'h', 00H, 't', 00H, 'w', 00H, 'e', 00H, 'i', 00H, 'g', 00H
	DB	'h', 00H, 't', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'm', 00H
	DB	'm', 00H, 'o', 00H, 'n', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z@4JA DD 07H ; `DatabaseFilter::Serialize'::`2'::__LINE__Var
_DATA	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@E@BitStream@RakNet@@QAE_NAAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@E@BitStream@RakNet@@QAE_NAAE@Z PROC		; RakNet::BitStream::Read<unsigned char>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	8
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@E@BitStream@RakNet@@QAE_NAAE@Z ENDP		; RakNet::BitStream::Read<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@E@BitStream@RakNet@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 1
??$Write@E@BitStream@RakNet@@QAEXE@Z PROC		; RakNet::BitStream::Write<unsigned char>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@E@BitStream@RakNet@@QAEXE@Z ENDP		; RakNet::BitStream::Write<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabasecommon.cpp
;	COMDAT ?Deserialize@DatabaseCellUpdate@@QAE_NPAVBitStream@RakNet@@@Z
_TEXT	SEGMENT
_temp$ = -17						; size = 1
_this$ = -8						; size = 4
_in$ = 8						; size = 4
?Deserialize@DatabaseCellUpdate@@QAE_NPAVBitStream@RakNet@@@Z PROC ; DatabaseCellUpdate::Deserialize, COMDAT
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 	unsigned char temp;
; 41   : 	stringCompressor->DecodeString(columnName, _TABLE_MAX_COLUMN_NAME_LENGTH, in);

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 13					; 0000000dH
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?DecodeString@StringCompressor@@QAE_NPADHPAVBitStream@RakNet@@H@Z ; StringCompressor::DecodeString

; 42   : 	in->Read(temp);

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 43   : 	columnType=(DataStructures::Table::ColumnType)temp;

	movzx	eax, BYTE PTR _temp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+9], eax

; 44   : 	return TableSerializer::DeserializeCell(in, &cellValue, columnType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	?DeserializeCell@TableSerializer@@SA_NPAVBitStream@RakNet@@PAUCell@Table@DataStructures@@W4ColumnType@56@@Z ; TableSerializer::DeserializeCell
	add	esp, 12					; 0000000cH

; 45   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Deserializ
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@Deserializ:
	DD	1
	DD	$LN4@Deserializ
$LN4@Deserializ:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Deserializ
$LN3@Deserializ:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Deserialize@DatabaseCellUpdate@@QAE_NPAVBitStream@RakNet@@@Z ENDP ; DatabaseCellUpdate::Deserialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabasecommon.cpp
;	COMDAT ?Serialize@DatabaseCellUpdate@@QAEXPAVBitStream@RakNet@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_out$ = 8						; size = 4
?Serialize@DatabaseCellUpdate@@QAEXPAVBitStream@RakNet@@@Z PROC ; DatabaseCellUpdate::Serialize, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : 	stringCompressor->EncodeString(columnName, _TABLE_MAX_COLUMN_NAME_LENGTH, out);

	push	0
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 13					; 0000000dH
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z ; StringCompressor::EncodeString

; 35   : 	out->Write((unsigned char)columnType);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 36   : 	TableSerializer::SerializeCell(out, &cellValue, columnType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+9]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	?SerializeCell@TableSerializer@@SAXPAVBitStream@RakNet@@PAUCell@Table@DataStructures@@W4ColumnType@56@@Z ; TableSerializer::SerializeCell
	add	esp, 12					; 0000000cH

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Serialize@DatabaseCellUpdate@@QAEXPAVBitStream@RakNet@@@Z ENDP ; DatabaseCellUpdate::Serialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabasecommon.cpp
;	COMDAT ?Deserialize@DatabaseFilter@@QAE_NPAVBitStream@RakNet@@@Z
_TEXT	SEGMENT
_temp$ = -17						; size = 1
_this$ = -8						; size = 4
_in$ = 8						; size = 4
?Deserialize@DatabaseFilter@@QAE_NPAVBitStream@RakNet@@@Z PROC ; DatabaseFilter::Deserialize, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 	unsigned char temp;
; 20   : 	stringCompressor->DecodeString(columnName, _TABLE_MAX_COLUMN_NAME_LENGTH, in);

	push	0
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 17					; 00000011H
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?DecodeString@StringCompressor@@QAE_NPADHPAVBitStream@RakNet@@H@Z ; StringCompressor::DecodeString

; 21   : 	in->Read(temp);

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 22   : 	columnType=(DataStructures::Table::ColumnType)temp;

	movzx	eax, BYTE PTR _temp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+13], eax

; 23   : 	if (in->Read(temp)==false)

	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN2@Deserializ

; 24   : 		return false;

	xor	al, al
	jmp	SHORT $LN3@Deserializ
$LN2@Deserializ:

; 25   : 	operation=(DataStructures::Table::FilterQueryType)temp;

	movzx	eax, BYTE PTR _temp$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+9], eax

; 26   : 	if (operation!=DataStructures::Table::QF_IS_EMPTY && operation!=DataStructures::Table::QF_NOT_EMPTY)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+9], 4
	je	SHORT $LN1@Deserializ
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+9], 5
	je	SHORT $LN1@Deserializ

; 27   : 	{
; 28   : 		return TableSerializer::DeserializeCell(in, &cellValue, columnType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	?DeserializeCell@TableSerializer@@SA_NPAVBitStream@RakNet@@PAUCell@Table@DataStructures@@W4ColumnType@56@@Z ; TableSerializer::DeserializeCell
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN3@Deserializ
$LN1@Deserializ:

; 29   : 	}
; 30   : 	return true;

	mov	al, 1
$LN3@Deserializ:

; 31   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Deserializ
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN7@Deserializ:
	DD	1
	DD	$LN6@Deserializ
$LN6@Deserializ:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN5@Deserializ
$LN5@Deserializ:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?Deserialize@DatabaseFilter@@QAE_NPAVBitStream@RakNet@@@Z ENDP ; DatabaseFilter::Deserialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\lightweightdatabasecommon.cpp
;	COMDAT ?Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_out$ = 8						; size = 4
?Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z PROC ; DatabaseFilter::Serialize, COMDAT
; _this$ = ecx

; 7    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 8    : 	stringCompressor->EncodeString(columnName, _TABLE_MAX_COLUMN_NAME_LENGTH, out);

	push	0
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 17					; 00000011H
	push	ecx
	call	?Instance@StringCompressor@@SAPAV1@XZ	; StringCompressor::Instance
	mov	ecx, eax
	call	?EncodeString@StringCompressor@@QAEXPBDHPAVBitStream@RakNet@@H@Z ; StringCompressor::EncodeString

; 9    : 	out->Write((unsigned char)columnType);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	push	ecx
	mov	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 10   : 	out->Write((unsigned char)operation);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	push	ecx
	mov	ecx, DWORD PTR _out$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 11   : 	if (operation!=DataStructures::Table::QF_IS_EMPTY && operation!=DataStructures::Table::QF_NOT_EMPTY)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+9], 4
	je	SHORT $LN2@Serialize
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+9], 5
	je	SHORT $LN2@Serialize

; 12   : 	{
; 13   : 		assert(cellValue.isEmpty==false);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@Serialize
	mov	edx, DWORD PTR ?__LINE__Var@?1??Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z@4JA
	add	edx, 6
	push	edx
	push	OFFSET ??_C@_1GM@BLKPLKPO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAl?$AAi?$AAg?$AAh?$AAt?$AAw?$AAe?$AAi@
	push	OFFSET ??_C@_1DC@MGEMJLMA@?$AAc?$AAe?$AAl?$AAl?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?4?$AAi?$AAs?$AAE?$AAm?$AAp?$AAt?$AAy?$AA?$DN?$AA?$DN?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN4@Serialize:

; 14   : 		TableSerializer::SerializeCell(out, &cellValue, columnType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _out$[ebp]
	push	eax
	call	?SerializeCell@TableSerializer@@SAXPAVBitStream@RakNet@@PAUCell@Table@DataStructures@@W4ColumnType@56@@Z ; TableSerializer::SerializeCell
	add	esp, 12					; 0000000cH
$LN2@Serialize:

; 15   : 	}
; 16   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Serialize@DatabaseFilter@@QAEXPAVBitStream@RakNet@@@Z ENDP ; DatabaseFilter::Serialize
_TEXT	ENDS
END
