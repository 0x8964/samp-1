; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\CommandParserInterface.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
CONST	SEGMENT
?VARIABLE_NUMBER_OF_PARAMETERS@CommandParserInterface@@2EB DB 0ffH ; CommandParserInterface::VARIABLE_NUMBER_OF_PARAMETERS
CONST	ENDS
PUBLIC	?RegisteredCommandComp@@YAHABQBDABURegisteredCommand@@@Z ; RegisteredCommandComp
PUBLIC	??0CommandParserInterface@@QAE@XZ		; CommandParserInterface::CommandParserInterface
PUBLIC	??1CommandParserInterface@@UAE@XZ		; CommandParserInterface::~CommandParserInterface
PUBLIC	?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z ; CommandParserInterface::OnNewIncomingConnection
PUBLIC	?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z ; CommandParserInterface::OnConnectionLost
PUBLIC	?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z ; CommandParserInterface::OnTransportChange
PUBLIC	?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z ; CommandParserInterface::GetRegisteredCommand
PUBLIC	?ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z ; CommandParserInterface::ParseConsoleString
PUBLIC	?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z ; CommandParserInterface::SendCommandList
PUBLIC	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand
PUBLIC	?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z ; CommandParserInterface::ReturnResult
PUBLIC	?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z ; CommandParserInterface::ReturnResult
PUBLIC	?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z ; CommandParserInterface::ReturnResult
PUBLIC	?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z ; CommandParserInterface::ReturnResult
PUBLIC	?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z ; CommandParserInterface::ReturnResult
PUBLIC	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
PUBLIC	??0?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>
PUBLIC	??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::~OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>
PUBLIC	?GetIndexFromKey@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIABQBDPA_N@Z ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::GetIndexFromKey
PUBLIC	?Insert@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEIABQBDABURegisteredCommand@@@Z ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Insert
PUBLIC	??A?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEAAURegisteredCommand@@I@Z ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::operator[]
PUBLIC	?Clear@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEXXZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Clear
PUBLIC	?Size@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIXZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Size
PUBLIC	??0?$List@URegisteredCommand@@@DataStructures@@QAE@XZ ; DataStructures::List<RegisteredCommand>::List<RegisteredCommand>
PUBLIC	??1?$List@URegisteredCommand@@@DataStructures@@QAE@XZ ; DataStructures::List<RegisteredCommand>::~List<RegisteredCommand>
PUBLIC	??A?$List@URegisteredCommand@@@DataStructures@@QBEAAURegisteredCommand@@I@Z ; DataStructures::List<RegisteredCommand>::operator[]
PUBLIC	?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@I@Z ; DataStructures::List<RegisteredCommand>::Insert
PUBLIC	?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@@Z ; DataStructures::List<RegisteredCommand>::Insert
PUBLIC	?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ ; DataStructures::List<RegisteredCommand>::Size
PUBLIC	?Clear@?$List@URegisteredCommand@@@DataStructures@@QAEX_N@Z ; DataStructures::List<RegisteredCommand>::Clear
PUBLIC	??_GCommandParserInterface@@UAEPAXI@Z		; CommandParserInterface::`scalar deleting destructor'
PUBLIC	??_7CommandParserInterface@@6B@			; CommandParserInterface::`vftable'
PUBLIC	?__LINE__Var@?1??ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z@4JA@67f38f93 ; `CommandParserInterface::ParseConsoleString'::`2'::__LINE__Var
PUBLIC	??_C@_1GG@JFECOKLF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAp@ ; `string'
PUBLIC	??_C@_1FC@EJKJHPMI@?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAL?$AAi?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAL?$AAi@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0BJ@HDHJPLOO@No?5registered?5commands?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@NNEBOEPC@?$CFs?5returned?5true?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@GGKBCBPH@?$CFs?5returned?5false?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@PEFIMDMK@?$CFs?5returned?5?$CFi?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@FDDMKJLH@Successfully?5called?5?$CFs?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@NOAIEMOJ@?$CFs?5returned?5?$CFs?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@KFHIEIOE@?$CFs?5returned?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ ; `string'
PUBLIC	??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@FMCFHBCK@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_R4CommandParserInterface@@6B@		; CommandParserInterface::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCommandParserInterface@@@8		; CommandParserInterface `RTTI Type Descriptor'
PUBLIC	??_R3CommandParserInterface@@8			; CommandParserInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CommandParserInterface@@8			; CommandParserInterface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CommandParserInterface@@8		; CommandParserInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__wassert:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	__stricmp:PROC
EXTRN	??_ECommandParserInterface@@UAEPAXI@Z:PROC	; CommandParserInterface::`vector deleting destructor'
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CommandParserInterface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CommandParserInterface@@8 DD FLAT:??_R0?AVCommandParserInterface@@@8 ; CommandParserInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R2CommandParserInterface@@8
rdata$r	SEGMENT
??_R2CommandParserInterface@@8 DD FLAT:??_R1A@?0A@EA@CommandParserInterface@@8 ; CommandParserInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CommandParserInterface@@8
rdata$r	SEGMENT
??_R3CommandParserInterface@@8 DD 00H			; CommandParserInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCommandParserInterface@@@8
data$r	SEGMENT
??_R0?AVCommandParserInterface@@@8 DD FLAT:??_7type_info@@6B@ ; CommandParserInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCommandParserInterface@@', 00H
data$r	ENDS
;	COMDAT ??_R4CommandParserInterface@@6B@
rdata$r	SEGMENT
??_R4CommandParserInterface@@6B@ DD 00H			; CommandParserInterface::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCommandParserInterface@@@8
	DD	FLAT:??_R3CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CM@FMCFHBCK@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@FMCFHBCK@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'l', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
CONST	SEGMENT
??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'd', 00H, 's', 00H, '_'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KFHIEIOE@?$CFs?5returned?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BH@KFHIEIOE@?$CFs?5returned?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@ DB '%s'
	DB	' returned %s %i:%i', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NOAIEMOJ@?$CFs?5returned?5?$CFs?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BC@NOAIEMOJ@?$CFs?5returned?5?$CFs?4?$AN?6?$AA@ DB '%s returned %s'
	DB	'.', 0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FDDMKJLH@Successfully?5called?5?$CFs?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BK@FDDMKJLH@Successfully?5called?5?$CFs?4?$AN?6?$AA@ DB 'Successfu'
	DB	'lly called %s.', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PEFIMDMK@?$CFs?5returned?5?$CFi?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BC@PEFIMDMK@?$CFs?5returned?5?$CFi?4?$AN?6?$AA@ DB '%s returned %i'
	DB	'.', 0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GGKBCBPH@?$CFs?5returned?5false?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BF@GGKBCBPH@?$CFs?5returned?5false?4?$AN?6?$AA@ DB '%s returned fa'
	DB	'lse.', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NNEBOEPC@?$CFs?5returned?5true?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BE@NNEBOEPC@?$CFs?5returned?5true?4?$AN?6?$AA@ DB '%s returned tru'
	DB	'e.', 0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDHJPLOO@No?5registered?5commands?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BJ@HDHJPLOO@No?5registered?5commands?$AN?6?$AA@ DB 'No registered '
	DB	'commands', 0dH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@EJKJHPMI@?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAL?$AAi?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAL?$AAi@
CONST	SEGMENT
??_C@_1FC@EJKJHPMI@?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAL?$AAi?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAL?$AAi@ DB 'p'
	DB	00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 'I'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'L', 00H, 'i', 00H, 's', 00H
	DB	't', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@JFECOKLF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAp@
CONST	SEGMENT
??_C@_1GG@JFECOKLF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAp@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'm'
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z@4JA@67f38f93
_DATA	SEGMENT
?__LINE__Var@?1??ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z@4JA@67f38f93 DD 025H ; `CommandParserInterface::ParseConsoleString'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_7CommandParserInterface@@6B@
CONST	SEGMENT
??_7CommandParserInterface@@6B@ DD FLAT:??_R4CommandParserInterface@@6B@ ; CommandParserInterface::`vftable'
	DD	FLAT:??_ECommandParserInterface@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z
	DD	FLAT:?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z
	DD	FLAT:?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z
	DD	FLAT:?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ$0
__ehfuncinfo$??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCommandParserInterface@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCommandParserInterface@@UAEPAXI@Z PROC		; CommandParserInterface::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CommandParserInterface@@UAE@XZ	; CommandParserInterface::~CommandParserInterface
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCommandParserInterface@@UAEPAXI@Z ENDP		; CommandParserInterface::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Clear@?$List@URegisteredCommand@@@DataStructures@@QAEX_N@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
_doNotDeallocate$ = 8					; size = 1
?Clear@?$List@URegisteredCommand@@@DataStructures@@QAEX_N@Z PROC ; DataStructures::List<RegisteredCommand>::Clear, COMDAT
; _this$ = ecx

; 379  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Clear

; 381  : 			return;

	jmp	SHORT $LN3@Clear
$LN2@Clear:

; 382  : 
; 383  : 		if (allocation_size>512 && doNotDeallocate==false)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 512			; 00000200H
	jbe	SHORT $LN1@Clear
	movzx	eax, BYTE PTR _doNotDeallocate$[ebp]
	test	eax, eax
	jne	SHORT $LN1@Clear

; 384  : 		{
; 385  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 386  : 			allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 387  : 			listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@Clear:

; 388  : 		}
; 389  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@Clear:

; 390  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@?$List@URegisteredCommand@@@DataStructures@@QAEX_N@Z ENDP ; DataStructures::List<RegisteredCommand>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ PROC ; DataStructures::List<RegisteredCommand>::Size, COMDAT
; _this$ = ecx

; 373  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 		return list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 375  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ ENDP ; DataStructures::List<RegisteredCommand>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_array$3 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 9
?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@@Z PROC ; DataStructures::List<RegisteredCommand>::Insert, COMDAT
; _this$ = ecx

; 242  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 		// Reallocate list if necessary
; 244  : 
; 245  : 		if ( list_size == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@Insert

; 246  : 		{
; 247  : 			// allocate twice the currently allocated memory
; 248  : 			list_type * new_array;
; 249  : 
; 250  : 			if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Insert

; 251  : 				allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 16			; 00000010H

; 252  : 			else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 253  : 				allocation_size *= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@Insert:

; 254  : 
; 255  : 			new_array = new list_type [ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 9
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _new_array$3[ebp], eax

; 256  : 
; 257  : 			// copy old array over
; 258  : 			//	for ( unsigned int counter = 0; counter < list_size; ++counter )
; 259  : 			//		new_array[ counter ] = listArray[ counter ];
; 260  : 
; 261  : 			// Don't call constructors, assignment operators, etc.
; 262  : 			memcpy(new_array, listArray, list_size*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 9
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _new_array$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 263  : 
; 264  : 			// set old array to point to the newly allocated and twice as large array
; 265  : 			delete[] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 266  : 
; 267  : 			listArray = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$3[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Insert:

; 268  : 		}
; 269  : 
; 270  : 		// Insert the new item at the correct spot
; 271  : 		listArray[ list_size ] = input;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 9
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _input$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	cl, BYTE PTR _input$[ebp+8]
	mov	BYTE PTR [eax+8], cl

; 272  : 
; 273  : 		++list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 274  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@@Z ENDP ; DataStructures::List<RegisteredCommand>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@I@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_array$3 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 9
_position$ = 20						; size = 4
?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@I@Z PROC ; DataStructures::List<RegisteredCommand>::Insert, COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 195  : #ifdef _DEBUG
; 196  : 		assert( position <= list_size );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN6@Insert
	push	196					; 000000c4H
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1CM@FMCFHBCK@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@Insert:

; 197  : #endif
; 198  : 
; 199  : 		// Reallocate list if necessary
; 200  : 		if ( list_size == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@Insert

; 201  : 		{
; 202  : 			// allocate twice the currently allocated memory
; 203  : 			list_type * new_array;
; 204  : 
; 205  : 			if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Insert

; 206  : 				allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 16			; 00000010H

; 207  : 			else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 208  : 				allocation_size *= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@Insert:

; 209  : 
; 210  : 			new_array = new list_type [ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 9
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _new_array$3[ebp], eax

; 211  : 
; 212  : 			// copy old array over
; 213  : 			//for ( unsigned int counter = 0; counter < list_size; ++counter )
; 214  : 			//	new_array[ counter ] = listArray[ counter ];
; 215  : 
; 216  : 			// Don't call constructors, assignment operators, etc.
; 217  : 			memcpy(new_array, listArray, list_size*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 9
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _new_array$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 218  : 
; 219  : 			// set old array to point to the newly allocated and twice as large array
; 220  : 			delete[] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 221  : 
; 222  : 			listArray = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$3[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Insert:

; 223  : 		}
; 224  : 
; 225  : 		// Move the elements in the list to make room
; 226  : 		//for ( unsigned int counter = list_size; counter != position; counter-- )
; 227  : 		//	listArray[ counter ] = listArray[ counter - 1 ];
; 228  : 
; 229  : 		// Don't call constructors, assignment operators, etc.
; 230  : 		memmove(listArray+position+1, listArray+position, (list_size-position)*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _position$[ebp]
	imul	edx, ecx, 9
	push	edx
	imul	eax, DWORD PTR _position$[ebp], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	imul	edx, DWORD PTR _position$[ebp], 9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx+9]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 231  : 
; 232  : 		// Insert the new item at the correct spot
; 233  : 		listArray[ position ] = input;

	imul	eax, DWORD PTR _position$[ebp], 9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _input$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	al, BYTE PTR _input$[ebp+8]
	mov	BYTE PTR [edx+8], al

; 234  : 
; 235  : 		++list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 236  : 
; 237  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@I@Z ENDP ; DataStructures::List<RegisteredCommand>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??A?$List@URegisteredCommand@@@DataStructures@@QBEAAURegisteredCommand@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
??A?$List@URegisteredCommand@@@DataStructures@@QBEAAURegisteredCommand@@I@Z PROC ; DataStructures::List<RegisteredCommand>::operator[], COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : #ifdef _DEBUG
; 187  : 		assert ( position < list_size );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@operator
	push	187					; 000000bbH
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 188  : #endif
; 189  : 		return listArray[ position ];

	imul	eax, DWORD PTR _position$[ebp], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@URegisteredCommand@@@DataStructures@@QBEAAURegisteredCommand@@I@Z ENDP ; DataStructures::List<RegisteredCommand>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??1?$List@URegisteredCommand@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$List@URegisteredCommand@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<RegisteredCommand>::~List<RegisteredCommand>, COMDAT
; _this$ = ecx

; 121  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (allocation_size>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	SHORT $LN2@List

; 123  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@List:

; 124  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@URegisteredCommand@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<RegisteredCommand>::~List<RegisteredCommand>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??0?$List@URegisteredCommand@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$List@URegisteredCommand@@@DataStructures@@QAE@XZ PROC ; DataStructures::List<RegisteredCommand>::List<RegisteredCommand>, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 115  : 		listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 116  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@URegisteredCommand@@@DataStructures@@QAE@XZ ENDP ; DataStructures::List<RegisteredCommand>::List<RegisteredCommand>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_orderedlist.h
;	COMDAT ?Size@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIXZ PROC ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Size, COMDAT
; _this$ = ecx

; 231  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 232  : 		return orderedList.Size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ ; DataStructures::List<RegisteredCommand>::Size

; 233  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIXZ ENDP ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_orderedlist.h
;	COMDAT ?Clear@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Clear@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEXXZ PROC ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Clear, COMDAT
; _this$ = ecx

; 219  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 220  : 		orderedList.Clear();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@URegisteredCommand@@@DataStructures@@QAEX_N@Z ; DataStructures::List<RegisteredCommand>::Clear

; 221  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEXXZ ENDP ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_orderedlist.h
;	COMDAT ??A?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEAAURegisteredCommand@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
??A?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEAAURegisteredCommand@@I@Z PROC ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::operator[], COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 		return orderedList[position];

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@URegisteredCommand@@@DataStructures@@QBEAAURegisteredCommand@@I@Z ; DataStructures::List<RegisteredCommand>::operator[]

; 227  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEAAURegisteredCommand@@I@Z ENDP ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_orderedlist.h
;	COMDAT ?Insert@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEIABQBDABURegisteredCommand@@@Z
_TEXT	SEGMENT
_index$ = -32						; size = 4
_objectExists$ = -17					; size = 1
_this$ = -8						; size = 4
_key$ = 8						; size = 4
_data$ = 12						; size = 4
?Insert@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEIABQBDABURegisteredCommand@@@Z PROC ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Insert, COMDAT
; _this$ = ecx

; 156  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 157  : 		bool objectExists;
; 158  : 		unsigned index;
; 159  : 		index = GetIndexFromKey(key, &objectExists);

	lea	eax, DWORD PTR _objectExists$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIndexFromKey@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIABQBDPA_N@Z ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::GetIndexFromKey
	mov	DWORD PTR _index$[ebp], eax

; 160  : 
; 161  : 		// Don't allow duplicate insertion.
; 162  : 		if (objectExists)

	movzx	eax, BYTE PTR _objectExists$[ebp]
	test	eax, eax
	je	SHORT $LN3@Insert

; 163  : 			return (unsigned)-1;

	or	eax, -1
	jmp	SHORT $LN4@Insert
$LN3@Insert:

; 164  : 
; 165  : 		if (index>=orderedList.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ ; DataStructures::List<RegisteredCommand>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jb	SHORT $LN2@Insert

; 166  : 		{
; 167  : 			orderedList.Insert(data);

	mov	eax, DWORD PTR _data$[ebp]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	al, BYTE PTR [eax+8]
	mov	BYTE PTR [ecx+8], al
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@@Z ; DataStructures::List<RegisteredCommand>::Insert

; 168  : 			return orderedList.Size()-1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ ; DataStructures::List<RegisteredCommand>::Size
	sub	eax, 1
	jmp	SHORT $LN4@Insert

; 169  : 		}
; 170  : 		else

	jmp	SHORT $LN4@Insert
$LN2@Insert:

; 171  : 		{
; 172  : 			orderedList.Insert(data,index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	cl, BYTE PTR [ecx+8]
	mov	BYTE PTR [edx+8], cl
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$List@URegisteredCommand@@@DataStructures@@QAEXURegisteredCommand@@I@Z ; DataStructures::List<RegisteredCommand>::Insert

; 173  : 			return index;

	mov	eax, DWORD PTR _index$[ebp]
$LN4@Insert:

; 174  : 		}		
; 175  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Insert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@Insert:
	DD	1
	DD	$LN7@Insert
$LN7@Insert:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN6@Insert
$LN6@Insert:
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?Insert@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEIABQBDABURegisteredCommand@@@Z ENDP ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_orderedlist.h
;	COMDAT ?GetIndexFromKey@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIABQBDPA_N@Z
_TEXT	SEGMENT
_res$ = -56						; size = 4
_lowerBound$ = -44					; size = 4
_upperBound$ = -32					; size = 4
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_key$ = 8						; size = 4
_objectExists$ = 12					; size = 4
?GetIndexFromKey@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIABQBDPA_N@Z PROC ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::GetIndexFromKey, COMDAT
; _this$ = ecx

; 110  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 111  : 		int index, upperBound, lowerBound;
; 112  : 		int res;
; 113  : 
; 114  : 		if (orderedList.Size()==0)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ ; DataStructures::List<RegisteredCommand>::Size
	test	eax, eax
	jne	SHORT $LN8@GetIndexFr

; 115  : 		{
; 116  : 			*objectExists=false;

	mov	eax, DWORD PTR _objectExists$[ebp]
	mov	BYTE PTR [eax], 0

; 117  : 			return 0;

	xor	eax, eax
	jmp	$LN9@GetIndexFr
$LN8@GetIndexFr:

; 118  : 		}
; 119  : 
; 120  : 		upperBound=(int)orderedList.Size()-1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ ; DataStructures::List<RegisteredCommand>::Size
	sub	eax, 1
	mov	DWORD PTR _upperBound$[ebp], eax

; 121  : 		lowerBound=0;

	mov	DWORD PTR _lowerBound$[ebp], 0

; 122  : 		index = (int)orderedList.Size()/2;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@URegisteredCommand@@@DataStructures@@QBEIXZ ; DataStructures::List<RegisteredCommand>::Size
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN7@GetIndexFr:

; 123  : 
; 124  : #ifdef _MSC_VER
; 125  : 	#pragma warning( disable : 4127 ) // warning C4127: conditional expression is constant
; 126  : #endif
; 127  : 		while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN9@GetIndexFr

; 128  : 		{
; 129  : 			res = comparison_function(key,orderedList[index]);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@URegisteredCommand@@@DataStructures@@QBEAAURegisteredCommand@@I@Z ; DataStructures::List<RegisteredCommand>::operator[]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	?RegisteredCommandComp@@YAHABQBDABURegisteredCommand@@@Z ; RegisteredCommandComp
	add	esp, 8
	mov	DWORD PTR _res$[ebp], eax

; 130  : 			if (res==0)

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN5@GetIndexFr

; 131  : 			{
; 132  : 				*objectExists=true;

	mov	eax, DWORD PTR _objectExists$[ebp]
	mov	BYTE PTR [eax], 1

; 133  : 				return index;

	mov	eax, DWORD PTR _index$[ebp]
	jmp	SHORT $LN9@GetIndexFr
	jmp	SHORT $LN4@GetIndexFr
$LN5@GetIndexFr:

; 134  : 			}
; 135  : 			else if (res<0)

	cmp	DWORD PTR _res$[ebp], 0
	jge	SHORT $LN3@GetIndexFr

; 136  : 			{
; 137  : 				upperBound=index-1;

	mov	eax, DWORD PTR _index$[ebp]
	sub	eax, 1
	mov	DWORD PTR _upperBound$[ebp], eax

; 138  : 			}
; 139  : 			else// if (res>0)

	jmp	SHORT $LN4@GetIndexFr
$LN3@GetIndexFr:

; 140  : 			{
; 141  : 				lowerBound=index+1;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _lowerBound$[ebp], eax
$LN4@GetIndexFr:

; 142  : 			}
; 143  : 
; 144  : 			index=lowerBound+(upperBound-lowerBound)/2;

	mov	eax, DWORD PTR _upperBound$[ebp]
	sub	eax, DWORD PTR _lowerBound$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _lowerBound$[ebp]
	mov	DWORD PTR _index$[ebp], eax

; 145  : 
; 146  : 			if (lowerBound>upperBound)

	mov	eax, DWORD PTR _lowerBound$[ebp]
	cmp	eax, DWORD PTR _upperBound$[ebp]
	jle	SHORT $LN1@GetIndexFr

; 147  : 			{
; 148  : 				*objectExists=false;

	mov	eax, DWORD PTR _objectExists$[ebp]
	mov	BYTE PTR [eax], 0

; 149  : 				return lowerBound; // No match

	mov	eax, DWORD PTR _lowerBound$[ebp]
	jmp	SHORT $LN9@GetIndexFr
$LN1@GetIndexFr:

; 150  : 			}
; 151  : 		}

	jmp	SHORT $LN7@GetIndexFr
$LN9@GetIndexFr:

; 152  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetIndexFromKey@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIABQBDPA_N@Z ENDP ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::GetIndexFromKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_orderedlist.h
;	COMDAT ??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ PROC ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::~OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>, COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 73   : 		Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEXXZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Clear

; 74   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$List@URegisteredCommand@@@DataStructures@@QAE@XZ ; DataStructures::List<RegisteredCommand>::~List<RegisteredCommand>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$List@URegisteredCommand@@@DataStructures@@QAE@XZ ; DataStructures::List<RegisteredCommand>::~List<RegisteredCommand>
__ehhandler$??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ ENDP ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::~OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_orderedlist.h
;	COMDAT ??0?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ PROC ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>, COMDAT
; _this$ = ecx

; 67   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$List@URegisteredCommand@@@DataStructures@@QAE@XZ ; DataStructures::List<RegisteredCommand>::List<RegisteredCommand>

; 68   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ ENDP ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z
_TEXT	SEGMENT
_playerId$ = -24					; size = 6
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_binaryAddress$ = 12					; size = 4
_port$ = 16						; size = 4
?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z PROC ; CommandParserInterface::IntegersToPlayerID, COMDAT
; _this$ = ecx

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 	PlayerID playerId;
; 166  : 	playerId.binaryAddress=binaryAddress;

	mov	eax, DWORD PTR _binaryAddress$[ebp]
	mov	DWORD PTR _playerId$[ebp], eax

; 167  : 	playerId.port=(unsigned short)port;

	mov	ax, WORD PTR _port$[ebp]
	mov	WORD PTR _playerId$[ebp+4], ax

; 168  : 	return playerId;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 169  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@IntegersTo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN5@IntegersTo:
	DD	1
	DD	$LN4@IntegersTo
$LN4@IntegersTo:
	DD	-24					; ffffffe8H
	DD	6
	DD	$LN3@IntegersTo
$LN3@IntegersTo:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ENDP ; CommandParserInterface::IntegersToPlayerID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_command$ = 8						; size = 4
_transport$ = 12					; size = 4
_playerId$ = 16						; size = 6
?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z PROC ; CommandParserInterface::ReturnResult, COMDAT
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 	transport->Send(playerId, "Successfully called %s.\r\n", command);

	mov	esi, esp
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	push	OFFSET ??_C@_0BK@FDDMKJLH@Successfully?5called?5?$CFs?4?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 147  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z ENDP ; CommandParserInterface::ReturnResult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_res$ = 8						; size = 4
_command$ = 12						; size = 4
_transport$ = 16					; size = 4
_playerId$ = 20						; size = 6
?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z PROC ; CommandParserInterface::ReturnResult, COMDAT
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 	transport->Send(playerId, "%s returned %i.\r\n", command, res);

	mov	esi, esp
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BC@PEFIMDMK@?$CFs?5returned?5?$CFi?4?$AN?6?$AA@
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _transport$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _transport$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z ENDP ; CommandParserInterface::ReturnResult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z
_TEXT	SEGMENT
_in$ = -20						; size = 4
_this$ = -8						; size = 4
_res$ = 8						; size = 6
_command$ = 16						; size = 4
_transport$ = 20					; size = 4
_playerId$ = 24						; size = 6
?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z PROC ; CommandParserInterface::ReturnResult, COMDAT
; _this$ = ecx

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 154  : #if !defined(_COMPATIBILITY_1)
; 155  : 	in_addr in;
; 156  : 	in.s_addr = playerId.binaryAddress;

	mov	eax, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR _in$[ebp], eax

; 157  : 	inet_ntoa( in );

	mov	esi, esp
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	call	DWORD PTR __imp__inet_ntoa@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 158  : 	transport->Send(playerId, "%s returned %s %i:%i\r\n", command,inet_ntoa( in ),res.binaryAddress, res.port);

	movzx	eax, WORD PTR _res$[ebp+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	mov	edi, esp
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	call	DWORD PTR __imp__inet_ntoa@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	push	OFFSET ??_C@_0BH@KFHIEIOE@?$CFs?5returned?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : #else
; 160  : 	transport->Send(playerId, "%s returned %i:%i\r\n", command,res.binaryAddress, res.port);
; 161  : #endif
; 162  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ReturnResu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN5@ReturnResu:
	DD	1
	DD	$LN4@ReturnResu
$LN4@ReturnResu:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@ReturnResu
$LN3@ReturnResu:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z ENDP ; CommandParserInterface::ReturnResult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_res$ = 8						; size = 4
_command$ = 12						; size = 4
_transport$ = 16					; size = 4
_playerId$ = 20						; size = 6
?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z PROC ; CommandParserInterface::ReturnResult, COMDAT
; _this$ = ecx

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 150  : 	transport->Send(playerId, "%s returned %s.\r\n", command, res);

	mov	esi, esp
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BC@NOAIEMOJ@?$CFs?5returned?5?$CFs?4?$AN?6?$AA@
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _transport$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _transport$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 151  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z ENDP ; CommandParserInterface::ReturnResult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_res$ = 8						; size = 1
_command$ = 12						; size = 4
_transport$ = 16					; size = 4
_playerId$ = 20						; size = 6
?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z PROC ; CommandParserInterface::ReturnResult, COMDAT
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 135  : 	if (res)

	movzx	eax, BYTE PTR _res$[ebp]
	test	eax, eax
	je	SHORT $LN2@ReturnResu

; 136  : 		transport->Send(playerId, "%s returned true.\r\n", command);

	mov	esi, esp
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@NNEBOEPC@?$CFs?5returned?5true?4?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : 	else

	jmp	SHORT $LN3@ReturnResu
$LN2@ReturnResu:

; 138  : 		transport->Send(playerId, "%s returned false.\r\n", command);

	mov	esi, esp
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	push	OFFSET ??_C@_0BF@GGKBCBPH@?$CFs?5returned?5false?4?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@ReturnResu:

; 139  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z ENDP ; CommandParserInterface::ReturnResult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z
_TEXT	SEGMENT
_rc$ = -28						; size = 9
_this$ = -8						; size = 4
_parameterCount$ = 8					; size = 1
_command$ = 12						; size = 4
_commandHelp$ = 16					; size = 4
?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z PROC ; CommandParserInterface::RegisterCommand, COMDAT
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 	RegisteredCommand rc;
; 101  : 	rc.command=command;

	mov	eax, DWORD PTR _command$[ebp]
	mov	DWORD PTR _rc$[ebp], eax

; 102  : 	rc.commandHelp=commandHelp;

	mov	eax, DWORD PTR _commandHelp$[ebp]
	mov	DWORD PTR _rc$[ebp+4], eax

; 103  : 	rc.parameterCount=parameterCount;

	mov	al, BYTE PTR _parameterCount$[ebp]
	mov	BYTE PTR _rc$[ebp+8], al

; 104  : 	commandList.Insert( command, rc);

	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	lea	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Insert@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAEIABQBDABURegisteredCommand@@@Z ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Insert

; 105  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@RegisterCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN5@RegisterCo:
	DD	1
	DD	$LN4@RegisterCo
$LN4@RegisterCo:
	DD	-28					; ffffffe4H
	DD	9
	DD	$LN3@RegisterCo
$LN3@RegisterCo:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ENDP ; CommandParserInterface::RegisterCommand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_transport$ = 8						; size = 4
_playerId$ = 12						; size = 6
?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z PROC ; CommandParserInterface::SendCommandList, COMDAT
; _this$ = ecx

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 84   : 	unsigned i;
; 85   : 	if (commandList.Size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIXZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Size
	test	eax, eax
	je	$LN6@SendComman

; 86   : 	{
; 87   : 		for (i=0; i < commandList.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@SendComman
$LN4@SendComman:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@SendComman:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIXZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN3@SendComman

; 88   : 		{
; 89   : 			transport->Send(playerId, "%s", commandList[i].command);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEAAURegisteredCommand@@I@Z ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::operator[]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _transport$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _transport$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   : 			if (i < commandList.Size()-1)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Size@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIXZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::Size
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN2@SendComman

; 91   : 				transport->Send(playerId, ", ");

	mov	esi, esp
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SendComman:

; 92   : 		}

	jmp	$LN4@SendComman
$LN3@SendComman:

; 93   : 		transport->Send(playerId, "\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_02PCIJFNDE@?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 94   : 	}
; 95   : 	else

	jmp	SHORT $LN7@SendComman
$LN6@SendComman:

; 96   : 		transport->Send(playerId, "No registered commands\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BJ@HDHJPLOO@No?5registered?5commands?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@SendComman:

; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z ENDP ; CommandParserInterface::SendCommandList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z
_TEXT	SEGMENT
tv128 = -244						; size = 4
_replaceDelineator$ = -41				; size = 1
_strLen$ = -32						; size = 4
_parameterListIndex$ = -20				; size = 4
_strIndex$ = -8						; size = 4
_str$ = 8						; size = 4
_delineator$ = 12					; size = 1
_delineatorToggle$ = 16					; size = 1
_numParameters$ = 20					; size = 4
_parameterList$ = 24					; size = 4
_parameterListLength$ = 28				; size = 4
?ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z PROC ; CommandParserInterface::ParseConsoleString, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 38   : 	unsigned strIndex, parameterListIndex;
; 39   : 	unsigned strLen;
; 40   : 	bool replaceDelineator=true;

	mov	BYTE PTR _replaceDelineator$[ebp], 1

; 41   : 
; 42   : 	strLen = (unsigned) strlen(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _strLen$[ebp], eax

; 43   : 
; 44   : 	// Replace every instance of delineator, \n, \r with 0
; 45   : 	for (strIndex=0; strIndex < strLen; strIndex++)

	mov	DWORD PTR _strIndex$[ebp], 0
	jmp	SHORT $LN14@ParseConso
$LN13@ParseConso:
	mov	eax, DWORD PTR _strIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _strIndex$[ebp], eax
$LN14@ParseConso:
	mov	eax, DWORD PTR _strIndex$[ebp]
	cmp	eax, DWORD PTR _strLen$[ebp]
	jae	$LN12@ParseConso

; 46   : 	{
; 47   : 		if (str[strIndex]==delineator && replaceDelineator)

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _delineator$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN11@ParseConso
	movzx	eax, BYTE PTR _replaceDelineator$[ebp]
	test	eax, eax
	je	SHORT $LN11@ParseConso

; 48   : 			str[strIndex]=0;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	mov	BYTE PTR [eax], 0
$LN11@ParseConso:

; 49   : 
; 50   : 		if (str[strIndex]=='\n' || str[strIndex]=='\r')

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN9@ParseConso
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN10@ParseConso
$LN9@ParseConso:

; 51   : 			str[strIndex]=0;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	mov	BYTE PTR [eax], 0
$LN10@ParseConso:

; 52   : 
; 53   : 		if (str[strIndex]==delineatorToggle)

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _delineatorToggle$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN8@ParseConso

; 54   : 		{
; 55   : 			str[strIndex]=0;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	mov	BYTE PTR [eax], 0

; 56   : 			replaceDelineator=!replaceDelineator;

	movzx	eax, BYTE PTR _replaceDelineator$[ebp]
	test	eax, eax
	jne	SHORT $LN17@ParseConso
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN18@ParseConso
$LN17@ParseConso:
	mov	DWORD PTR tv128[ebp], 0
$LN18@ParseConso:
	mov	cl, BYTE PTR tv128[ebp]
	mov	BYTE PTR _replaceDelineator$[ebp], cl
$LN8@ParseConso:

; 57   : 		}
; 58   : 	}

	jmp	$LN13@ParseConso
$LN12@ParseConso:

; 59   : 
; 60   : 	// Fill up parameterList starting at each non-0
; 61   : 	for (strIndex=0, parameterListIndex=0; strIndex < strLen; )

	mov	DWORD PTR _strIndex$[ebp], 0
	mov	DWORD PTR _parameterListIndex$[ebp], 0
$LN7@ParseConso:
	mov	eax, DWORD PTR _strIndex$[ebp]
	cmp	eax, DWORD PTR _strLen$[ebp]
	jae	$LN6@ParseConso

; 62   : 	{
; 63   : 		if (str[strIndex]!=0)

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@ParseConso

; 64   : 		{
; 65   : 			parameterList[parameterListIndex]=str+strIndex;

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	mov	ecx, DWORD PTR _parameterListIndex$[ebp]
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 66   : 			parameterListIndex++;

	mov	eax, DWORD PTR _parameterListIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _parameterListIndex$[ebp], eax

; 67   : 			assert(parameterListIndex < parameterListLength);

	mov	eax, DWORD PTR _parameterListIndex$[ebp]
	cmp	eax, DWORD PTR _parameterListLength$[ebp]
	jb	SHORT $LN19@ParseConso
	mov	ecx, DWORD PTR ?__LINE__Var@?1??ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z@4JA@67f38f93
	add	ecx, 30					; 0000001eH
	push	ecx
	push	OFFSET ??_C@_1GG@JFECOKLF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAp@
	push	OFFSET ??_C@_1FC@EJKJHPMI@?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAL?$AAi?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr?$AAL?$AAi@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN19@ParseConso:

; 68   : 			if (parameterListIndex >= parameterListLength)

	mov	eax, DWORD PTR _parameterListIndex$[ebp]
	cmp	eax, DWORD PTR _parameterListLength$[ebp]
	jb	SHORT $LN4@ParseConso

; 69   : 				break;

	jmp	SHORT $LN6@ParseConso
$LN4@ParseConso:

; 70   : 
; 71   : 			strIndex++;

	mov	eax, DWORD PTR _strIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _strIndex$[ebp], eax
$LN3@ParseConso:

; 72   : 			while (str[strIndex]!=0 && strIndex < strLen)

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _strIndex$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@ParseConso
	mov	eax, DWORD PTR _strIndex$[ebp]
	cmp	eax, DWORD PTR _strLen$[ebp]
	jae	SHORT $LN2@ParseConso

; 73   : 				strIndex++;

	mov	eax, DWORD PTR _strIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _strIndex$[ebp], eax
	jmp	SHORT $LN3@ParseConso
$LN2@ParseConso:

; 74   : 		}
; 75   : 		else

	jmp	SHORT $LN1@ParseConso
$LN5@ParseConso:

; 76   : 			strIndex++;

	mov	eax, DWORD PTR _strIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _strIndex$[ebp], eax
$LN1@ParseConso:

; 77   : 	}

	jmp	$LN7@ParseConso
$LN6@ParseConso:

; 78   : 
; 79   : 	parameterList[parameterListIndex]=0;

	mov	eax, DWORD PTR _parameterListIndex$[ebp]
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 80   : 	*numParameters=parameterListIndex;

	mov	eax, DWORD PTR _numParameters$[ebp]
	mov	ecx, DWORD PTR _parameterListIndex$[ebp]
	mov	DWORD PTR [eax], ecx

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ParseConsoleString@CommandParserInterface@@SAXPADDEPAIPAPADI@Z ENDP ; CommandParserInterface::ParseConsoleString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z
_TEXT	SEGMENT
_index$ = -32						; size = 4
_objectExists$ = -17					; size = 1
_this$ = -8						; size = 4
_command$ = 8						; size = 4
_rc$ = 12						; size = 4
?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z PROC ; CommandParserInterface::GetRegisteredCommand, COMDAT
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	bool objectExists;
; 109  : 	unsigned index;
; 110  : 	index=commandList.GetIndexFromKey(command, &objectExists);

	lea	eax, DWORD PTR _objectExists$[ebp]
	push	eax
	lea	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetIndexFromKey@?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEIABQBDPA_N@Z ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::GetIndexFromKey
	mov	DWORD PTR _index$[ebp], eax

; 111  : 	if (objectExists)

	movzx	eax, BYTE PTR _objectExists$[ebp]
	test	eax, eax
	je	SHORT $LN1@GetRegiste

; 112  : 		*rc=commandList[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QBEAAURegisteredCommand@@I@Z ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::operator[]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	al, BYTE PTR [eax+8]
	mov	BYTE PTR [ecx+8], al
$LN1@GetRegiste:

; 113  : 	return objectExists;

	mov	al, BYTE PTR _objectExists$[ebp]

; 114  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@GetRegiste
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN6@GetRegiste:
	DD	1
	DD	$LN5@GetRegiste
$LN5@GetRegiste:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN4@GetRegiste
$LN4@GetRegiste:
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z ENDP ; CommandParserInterface::GetRegisteredCommand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_transport$ = 8						; size = 4
?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z PROC ; CommandParserInterface::OnTransportChange, COMDAT
; _this$ = ecx

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z ENDP ; CommandParserInterface::OnTransportChange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
_transport$ = 16					; size = 4
?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z PROC ; CommandParserInterface::OnConnectionLost, COMDAT
; _this$ = ecx

; 131  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 132  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z ENDP ; CommandParserInterface::OnConnectionLost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerId$ = 8						; size = 6
_transport$ = 16					; size = 4
?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z PROC ; CommandParserInterface::OnNewIncomingConnection, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z ENDP ; CommandParserInterface::OnNewIncomingConnection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ??1CommandParserInterface@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CommandParserInterface@@UAE@XZ PROC			; CommandParserInterface::~CommandParserInterface, COMDAT
; _this$ = ecx

; 34   : CommandParserInterface::~CommandParserInterface() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CommandParserInterface@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::~OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CommandParserInterface@@UAE@XZ ENDP			; CommandParserInterface::~CommandParserInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ??0CommandParserInterface@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CommandParserInterface@@QAE@XZ PROC			; CommandParserInterface::CommandParserInterface, COMDAT
; _this$ = ecx

; 33   : CommandParserInterface::CommandParserInterface() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CommandParserInterface@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$OrderedList@PBDURegisteredCommand@@$1?RegisteredCommandComp@@YAHABQBDABU1@@Z@DataStructures@@QAE@XZ ; DataStructures::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>::OrderedList<char const *,RegisteredCommand,&RegisteredCommandComp>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CommandParserInterface@@QAE@XZ ENDP			; CommandParserInterface::CommandParserInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\commandparserinterface.cpp
;	COMDAT ?RegisteredCommandComp@@YAHABQBDABURegisteredCommand@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
_data$ = 12						; size = 4
?RegisteredCommandComp@@YAHABQBDABURegisteredCommand@@@Z PROC ; RegisteredCommandComp, COMDAT

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 30   : 	return _stricmp(key,data.command);

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__stricmp
	add	esp, 8

; 31   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RegisteredCommandComp@@YAHABQBDABURegisteredCommand@@@Z ENDP ; RegisteredCommandComp
_TEXT	ENDS
END
