; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\rijndael.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?Logtable@@3PAEA				; Logtable
PUBLIC	?Alogtable@@3PAEA				; Alogtable
PUBLIC	?S@@3PAEA					; S
PUBLIC	?Si@@3PAEA					; Si
PUBLIC	?T1@@3PAY03EA					; T1
PUBLIC	?T2@@3PAY03EA					; T2
PUBLIC	?T3@@3PAY03EA					; T3
PUBLIC	?T4@@3PAY03EA					; T4
PUBLIC	?T5@@3PAY03EA					; T5
PUBLIC	?T6@@3PAY03EA					; T6
PUBLIC	?T7@@3PAY03EA					; T7
PUBLIC	?T8@@3PAY03EA					; T8
PUBLIC	?S5@@3PAEA					; S5
PUBLIC	?U1@@3PAY03EA					; U1
PUBLIC	?U2@@3PAY03EA					; U2
PUBLIC	?U3@@3PAY03EA					; U3
PUBLIC	?U4@@3PAY03EA					; U4
PUBLIC	?rcon@@3PAIA					; rcon
PUBLIC	?ROUNDS@@3HA					; ROUNDS
_BSS	SEGMENT
?ROUNDS@@3HA DD	01H DUP (?)				; ROUNDS
_BSS	ENDS
_DATA	SEGMENT
?Logtable@@3PAEA DB 00H					; Logtable
	DB	00H
	DB	019H
	DB	01H
	DB	032H
	DB	02H
	DB	01aH
	DB	0c6H
	DB	04bH
	DB	0c7H
	DB	01bH
	DB	068H
	DB	033H
	DB	0eeH
	DB	0dfH
	DB	03H
	DB	064H
	DB	04H
	DB	0e0H
	DB	0eH
	DB	034H
	DB	08dH
	DB	081H
	DB	0efH
	DB	04cH
	DB	071H
	DB	08H
	DB	0c8H
	DB	0f8H
	DB	069H
	DB	01cH
	DB	0c1H
	DB	07dH
	DB	0c2H
	DB	01dH
	DB	0b5H
	DB	0f9H
	DB	0b9H
	DB	027H
	DB	06aH
	DB	04dH
	DB	0e4H
	DB	0a6H
	DB	072H
	DB	09aH
	DB	0c9H
	DB	09H
	DB	078H
	DB	065H
	DB	02fH
	DB	08aH
	DB	05H
	DB	021H
	DB	0fH
	DB	0e1H
	DB	024H
	DB	012H
	DB	0f0H
	DB	082H
	DB	045H
	DB	035H
	DB	093H
	DB	0daH
	DB	08eH
	DB	096H
	DB	08fH
	DB	0dbH
	DB	0bdH
	DB	036H
	DB	0d0H
	DB	0ceH
	DB	094H
	DB	013H
	DB	05cH
	DB	0d2H
	DB	0f1H
	DB	040H
	DB	046H
	DB	083H
	DB	038H
	DB	066H
	DB	0ddH
	DB	0fdH
	DB	030H
	DB	0bfH
	DB	06H
	DB	08bH
	DB	062H
	DB	0b3H
	DB	025H
	DB	0e2H
	DB	098H
	DB	022H
	DB	088H
	DB	091H
	DB	010H
	DB	07eH
	DB	06eH
	DB	048H
	DB	0c3H
	DB	0a3H
	DB	0b6H
	DB	01eH
	DB	042H
	DB	03aH
	DB	06bH
	DB	028H
	DB	054H
	DB	0faH
	DB	085H
	DB	03dH
	DB	0baH
	DB	02bH
	DB	079H
	DB	0aH
	DB	015H
	DB	09bH
	DB	09fH
	DB	05eH
	DB	0caH
	DB	04eH
	DB	0d4H
	DB	0acH
	DB	0e5H
	DB	0f3H
	DB	073H
	DB	0a7H
	DB	057H
	DB	0afH
	DB	058H
	DB	0a8H
	DB	050H
	DB	0f4H
	DB	0eaH
	DB	0d6H
	DB	074H
	DB	04fH
	DB	0aeH
	DB	0e9H
	DB	0d5H
	DB	0e7H
	DB	0e6H
	DB	0adH
	DB	0e8H
	DB	02cH
	DB	0d7H
	DB	075H
	DB	07aH
	DB	0ebH
	DB	016H
	DB	0bH
	DB	0f5H
	DB	059H
	DB	0cbH
	DB	05fH
	DB	0b0H
	DB	09cH
	DB	0a9H
	DB	051H
	DB	0a0H
	DB	07fH
	DB	0cH
	DB	0f6H
	DB	06fH
	DB	017H
	DB	0c4H
	DB	049H
	DB	0ecH
	DB	0d8H
	DB	043H
	DB	01fH
	DB	02dH
	DB	0a4H
	DB	076H
	DB	07bH
	DB	0b7H
	DB	0ccH
	DB	0bbH
	DB	03eH
	DB	05aH
	DB	0fbH
	DB	060H
	DB	0b1H
	DB	086H
	DB	03bH
	DB	052H
	DB	0a1H
	DB	06cH
	DB	0aaH
	DB	055H
	DB	029H
	DB	09dH
	DB	097H
	DB	0b2H
	DB	087H
	DB	090H
	DB	061H
	DB	0beH
	DB	0dcH
	DB	0fcH
	DB	0bcH
	DB	095H
	DB	0cfH
	DB	0cdH
	DB	037H
	DB	03fH
	DB	05bH
	DB	0d1H
	DB	053H
	DB	039H
	DB	084H
	DB	03cH
	DB	041H
	DB	0a2H
	DB	06dH
	DB	047H
	DB	014H
	DB	02aH
	DB	09eH
	DB	05dH
	DB	056H
	DB	0f2H
	DB	0d3H
	DB	0abH
	DB	044H
	DB	011H
	DB	092H
	DB	0d9H
	DB	023H
	DB	020H
	DB	02eH
	DB	089H
	DB	0b4H
	DB	07cH
	DB	0b8H
	DB	026H
	DB	077H
	DB	099H
	DB	0e3H
	DB	0a5H
	DB	067H
	DB	04aH
	DB	0edH
	DB	0deH
	DB	0c5H
	DB	031H
	DB	0feH
	DB	018H
	DB	0dH
	DB	063H
	DB	08cH
	DB	080H
	DB	0c0H
	DB	0f7H
	DB	070H
	DB	07H
?Alogtable@@3PAEA DB 01H				; Alogtable
	DB	03H
	DB	05H
	DB	0fH
	DB	011H
	DB	033H
	DB	055H
	DB	0ffH
	DB	01aH
	DB	02eH
	DB	072H
	DB	096H
	DB	0a1H
	DB	0f8H
	DB	013H
	DB	035H
	DB	05fH
	DB	0e1H
	DB	038H
	DB	048H
	DB	0d8H
	DB	073H
	DB	095H
	DB	0a4H
	DB	0f7H
	DB	02H
	DB	06H
	DB	0aH
	DB	01eH
	DB	022H
	DB	066H
	DB	0aaH
	DB	0e5H
	DB	034H
	DB	05cH
	DB	0e4H
	DB	037H
	DB	059H
	DB	0ebH
	DB	026H
	DB	06aH
	DB	0beH
	DB	0d9H
	DB	070H
	DB	090H
	DB	0abH
	DB	0e6H
	DB	031H
	DB	053H
	DB	0f5H
	DB	04H
	DB	0cH
	DB	014H
	DB	03cH
	DB	044H
	DB	0ccH
	DB	04fH
	DB	0d1H
	DB	068H
	DB	0b8H
	DB	0d3H
	DB	06eH
	DB	0b2H
	DB	0cdH
	DB	04cH
	DB	0d4H
	DB	067H
	DB	0a9H
	DB	0e0H
	DB	03bH
	DB	04dH
	DB	0d7H
	DB	062H
	DB	0a6H
	DB	0f1H
	DB	08H
	DB	018H
	DB	028H
	DB	078H
	DB	088H
	DB	083H
	DB	09eH
	DB	0b9H
	DB	0d0H
	DB	06bH
	DB	0bdH
	DB	0dcH
	DB	07fH
	DB	081H
	DB	098H
	DB	0b3H
	DB	0ceH
	DB	049H
	DB	0dbH
	DB	076H
	DB	09aH
	DB	0b5H
	DB	0c4H
	DB	057H
	DB	0f9H
	DB	010H
	DB	030H
	DB	050H
	DB	0f0H
	DB	0bH
	DB	01dH
	DB	027H
	DB	069H
	DB	0bbH
	DB	0d6H
	DB	061H
	DB	0a3H
	DB	0feH
	DB	019H
	DB	02bH
	DB	07dH
	DB	087H
	DB	092H
	DB	0adH
	DB	0ecH
	DB	02fH
	DB	071H
	DB	093H
	DB	0aeH
	DB	0e9H
	DB	020H
	DB	060H
	DB	0a0H
	DB	0fbH
	DB	016H
	DB	03aH
	DB	04eH
	DB	0d2H
	DB	06dH
	DB	0b7H
	DB	0c2H
	DB	05dH
	DB	0e7H
	DB	032H
	DB	056H
	DB	0faH
	DB	015H
	DB	03fH
	DB	041H
	DB	0c3H
	DB	05eH
	DB	0e2H
	DB	03dH
	DB	047H
	DB	0c9H
	DB	040H
	DB	0c0H
	DB	05bH
	DB	0edH
	DB	02cH
	DB	074H
	DB	09cH
	DB	0bfH
	DB	0daH
	DB	075H
	DB	09fH
	DB	0baH
	DB	0d5H
	DB	064H
	DB	0acH
	DB	0efH
	DB	02aH
	DB	07eH
	DB	082H
	DB	09dH
	DB	0bcH
	DB	0dfH
	DB	07aH
	DB	08eH
	DB	089H
	DB	080H
	DB	09bH
	DB	0b6H
	DB	0c1H
	DB	058H
	DB	0e8H
	DB	023H
	DB	065H
	DB	0afH
	DB	0eaH
	DB	025H
	DB	06fH
	DB	0b1H
	DB	0c8H
	DB	043H
	DB	0c5H
	DB	054H
	DB	0fcH
	DB	01fH
	DB	021H
	DB	063H
	DB	0a5H
	DB	0f4H
	DB	07H
	DB	09H
	DB	01bH
	DB	02dH
	DB	077H
	DB	099H
	DB	0b0H
	DB	0cbH
	DB	046H
	DB	0caH
	DB	045H
	DB	0cfH
	DB	04aH
	DB	0deH
	DB	079H
	DB	08bH
	DB	086H
	DB	091H
	DB	0a8H
	DB	0e3H
	DB	03eH
	DB	042H
	DB	0c6H
	DB	051H
	DB	0f3H
	DB	0eH
	DB	012H
	DB	036H
	DB	05aH
	DB	0eeH
	DB	029H
	DB	07bH
	DB	08dH
	DB	08cH
	DB	08fH
	DB	08aH
	DB	085H
	DB	094H
	DB	0a7H
	DB	0f2H
	DB	0dH
	DB	017H
	DB	039H
	DB	04bH
	DB	0ddH
	DB	07cH
	DB	084H
	DB	097H
	DB	0a2H
	DB	0fdH
	DB	01cH
	DB	024H
	DB	06cH
	DB	0b4H
	DB	0c7H
	DB	052H
	DB	0f6H
	DB	01H
?S@@3PAEA DB	063H					; S
	DB	07cH
	DB	077H
	DB	07bH
	DB	0f2H
	DB	06bH
	DB	06fH
	DB	0c5H
	DB	030H
	DB	01H
	DB	067H
	DB	02bH
	DB	0feH
	DB	0d7H
	DB	0abH
	DB	076H
	DB	0caH
	DB	082H
	DB	0c9H
	DB	07dH
	DB	0faH
	DB	059H
	DB	047H
	DB	0f0H
	DB	0adH
	DB	0d4H
	DB	0a2H
	DB	0afH
	DB	09cH
	DB	0a4H
	DB	072H
	DB	0c0H
	DB	0b7H
	DB	0fdH
	DB	093H
	DB	026H
	DB	036H
	DB	03fH
	DB	0f7H
	DB	0ccH
	DB	034H
	DB	0a5H
	DB	0e5H
	DB	0f1H
	DB	071H
	DB	0d8H
	DB	031H
	DB	015H
	DB	04H
	DB	0c7H
	DB	023H
	DB	0c3H
	DB	018H
	DB	096H
	DB	05H
	DB	09aH
	DB	07H
	DB	012H
	DB	080H
	DB	0e2H
	DB	0ebH
	DB	027H
	DB	0b2H
	DB	075H
	DB	09H
	DB	083H
	DB	02cH
	DB	01aH
	DB	01bH
	DB	06eH
	DB	05aH
	DB	0a0H
	DB	052H
	DB	03bH
	DB	0d6H
	DB	0b3H
	DB	029H
	DB	0e3H
	DB	02fH
	DB	084H
	DB	053H
	DB	0d1H
	DB	00H
	DB	0edH
	DB	020H
	DB	0fcH
	DB	0b1H
	DB	05bH
	DB	06aH
	DB	0cbH
	DB	0beH
	DB	039H
	DB	04aH
	DB	04cH
	DB	058H
	DB	0cfH
	DB	0d0H
	DB	0efH
	DB	0aaH
	DB	0fbH
	DB	043H
	DB	04dH
	DB	033H
	DB	085H
	DB	045H
	DB	0f9H
	DB	02H
	DB	07fH
	DB	050H
	DB	03cH
	DB	09fH
	DB	0a8H
	DB	051H
	DB	0a3H
	DB	040H
	DB	08fH
	DB	092H
	DB	09dH
	DB	038H
	DB	0f5H
	DB	0bcH
	DB	0b6H
	DB	0daH
	DB	021H
	DB	010H
	DB	0ffH
	DB	0f3H
	DB	0d2H
	DB	0cdH
	DB	0cH
	DB	013H
	DB	0ecH
	DB	05fH
	DB	097H
	DB	044H
	DB	017H
	DB	0c4H
	DB	0a7H
	DB	07eH
	DB	03dH
	DB	064H
	DB	05dH
	DB	019H
	DB	073H
	DB	060H
	DB	081H
	DB	04fH
	DB	0dcH
	DB	022H
	DB	02aH
	DB	090H
	DB	088H
	DB	046H
	DB	0eeH
	DB	0b8H
	DB	014H
	DB	0deH
	DB	05eH
	DB	0bH
	DB	0dbH
	DB	0e0H
	DB	032H
	DB	03aH
	DB	0aH
	DB	049H
	DB	06H
	DB	024H
	DB	05cH
	DB	0c2H
	DB	0d3H
	DB	0acH
	DB	062H
	DB	091H
	DB	095H
	DB	0e4H
	DB	079H
	DB	0e7H
	DB	0c8H
	DB	037H
	DB	06dH
	DB	08dH
	DB	0d5H
	DB	04eH
	DB	0a9H
	DB	06cH
	DB	056H
	DB	0f4H
	DB	0eaH
	DB	065H
	DB	07aH
	DB	0aeH
	DB	08H
	DB	0baH
	DB	078H
	DB	025H
	DB	02eH
	DB	01cH
	DB	0a6H
	DB	0b4H
	DB	0c6H
	DB	0e8H
	DB	0ddH
	DB	074H
	DB	01fH
	DB	04bH
	DB	0bdH
	DB	08bH
	DB	08aH
	DB	070H
	DB	03eH
	DB	0b5H
	DB	066H
	DB	048H
	DB	03H
	DB	0f6H
	DB	0eH
	DB	061H
	DB	035H
	DB	057H
	DB	0b9H
	DB	086H
	DB	0c1H
	DB	01dH
	DB	09eH
	DB	0e1H
	DB	0f8H
	DB	098H
	DB	011H
	DB	069H
	DB	0d9H
	DB	08eH
	DB	094H
	DB	09bH
	DB	01eH
	DB	087H
	DB	0e9H
	DB	0ceH
	DB	055H
	DB	028H
	DB	0dfH
	DB	08cH
	DB	0a1H
	DB	089H
	DB	0dH
	DB	0bfH
	DB	0e6H
	DB	042H
	DB	068H
	DB	041H
	DB	099H
	DB	02dH
	DB	0fH
	DB	0b0H
	DB	054H
	DB	0bbH
	DB	016H
?Si@@3PAEA DB	052H					; Si
	DB	09H
	DB	06aH
	DB	0d5H
	DB	030H
	DB	036H
	DB	0a5H
	DB	038H
	DB	0bfH
	DB	040H
	DB	0a3H
	DB	09eH
	DB	081H
	DB	0f3H
	DB	0d7H
	DB	0fbH
	DB	07cH
	DB	0e3H
	DB	039H
	DB	082H
	DB	09bH
	DB	02fH
	DB	0ffH
	DB	087H
	DB	034H
	DB	08eH
	DB	043H
	DB	044H
	DB	0c4H
	DB	0deH
	DB	0e9H
	DB	0cbH
	DB	054H
	DB	07bH
	DB	094H
	DB	032H
	DB	0a6H
	DB	0c2H
	DB	023H
	DB	03dH
	DB	0eeH
	DB	04cH
	DB	095H
	DB	0bH
	DB	042H
	DB	0faH
	DB	0c3H
	DB	04eH
	DB	08H
	DB	02eH
	DB	0a1H
	DB	066H
	DB	028H
	DB	0d9H
	DB	024H
	DB	0b2H
	DB	076H
	DB	05bH
	DB	0a2H
	DB	049H
	DB	06dH
	DB	08bH
	DB	0d1H
	DB	025H
	DB	072H
	DB	0f8H
	DB	0f6H
	DB	064H
	DB	086H
	DB	068H
	DB	098H
	DB	016H
	DB	0d4H
	DB	0a4H
	DB	05cH
	DB	0ccH
	DB	05dH
	DB	065H
	DB	0b6H
	DB	092H
	DB	06cH
	DB	070H
	DB	048H
	DB	050H
	DB	0fdH
	DB	0edH
	DB	0b9H
	DB	0daH
	DB	05eH
	DB	015H
	DB	046H
	DB	057H
	DB	0a7H
	DB	08dH
	DB	09dH
	DB	084H
	DB	090H
	DB	0d8H
	DB	0abH
	DB	00H
	DB	08cH
	DB	0bcH
	DB	0d3H
	DB	0aH
	DB	0f7H
	DB	0e4H
	DB	058H
	DB	05H
	DB	0b8H
	DB	0b3H
	DB	045H
	DB	06H
	DB	0d0H
	DB	02cH
	DB	01eH
	DB	08fH
	DB	0caH
	DB	03fH
	DB	0fH
	DB	02H
	DB	0c1H
	DB	0afH
	DB	0bdH
	DB	03H
	DB	01H
	DB	013H
	DB	08aH
	DB	06bH
	DB	03aH
	DB	091H
	DB	011H
	DB	041H
	DB	04fH
	DB	067H
	DB	0dcH
	DB	0eaH
	DB	097H
	DB	0f2H
	DB	0cfH
	DB	0ceH
	DB	0f0H
	DB	0b4H
	DB	0e6H
	DB	073H
	DB	096H
	DB	0acH
	DB	074H
	DB	022H
	DB	0e7H
	DB	0adH
	DB	035H
	DB	085H
	DB	0e2H
	DB	0f9H
	DB	037H
	DB	0e8H
	DB	01cH
	DB	075H
	DB	0dfH
	DB	06eH
	DB	047H
	DB	0f1H
	DB	01aH
	DB	071H
	DB	01dH
	DB	029H
	DB	0c5H
	DB	089H
	DB	06fH
	DB	0b7H
	DB	062H
	DB	0eH
	DB	0aaH
	DB	018H
	DB	0beH
	DB	01bH
	DB	0fcH
	DB	056H
	DB	03eH
	DB	04bH
	DB	0c6H
	DB	0d2H
	DB	079H
	DB	020H
	DB	09aH
	DB	0dbH
	DB	0c0H
	DB	0feH
	DB	078H
	DB	0cdH
	DB	05aH
	DB	0f4H
	DB	01fH
	DB	0ddH
	DB	0a8H
	DB	033H
	DB	088H
	DB	07H
	DB	0c7H
	DB	031H
	DB	0b1H
	DB	012H
	DB	010H
	DB	059H
	DB	027H
	DB	080H
	DB	0ecH
	DB	05fH
	DB	060H
	DB	051H
	DB	07fH
	DB	0a9H
	DB	019H
	DB	0b5H
	DB	04aH
	DB	0dH
	DB	02dH
	DB	0e5H
	DB	07aH
	DB	09fH
	DB	093H
	DB	0c9H
	DB	09cH
	DB	0efH
	DB	0a0H
	DB	0e0H
	DB	03bH
	DB	04dH
	DB	0aeH
	DB	02aH
	DB	0f5H
	DB	0b0H
	DB	0c8H
	DB	0ebH
	DB	0bbH
	DB	03cH
	DB	083H
	DB	053H
	DB	099H
	DB	061H
	DB	017H
	DB	02bH
	DB	04H
	DB	07eH
	DB	0baH
	DB	077H
	DB	0d6H
	DB	026H
	DB	0e1H
	DB	069H
	DB	014H
	DB	063H
	DB	055H
	DB	021H
	DB	0cH
	DB	07dH
?T1@@3PAY03EA DB 0c6H					; T1
	DB	063H
	DB	063H
	DB	0a5H
	DB	0f8H
	DB	07cH
	DB	07cH
	DB	084H
	DB	0eeH
	DB	077H
	DB	077H
	DB	099H
	DB	0f6H
	DB	07bH
	DB	07bH
	DB	08dH
	DB	0ffH
	DB	0f2H
	DB	0f2H
	DB	0dH
	DB	0d6H
	DB	06bH
	DB	06bH
	DB	0bdH
	DB	0deH
	DB	06fH
	DB	06fH
	DB	0b1H
	DB	091H
	DB	0c5H
	DB	0c5H
	DB	054H
	DB	060H
	DB	030H
	DB	030H
	DB	050H
	DB	02H
	DB	01H
	DB	01H
	DB	03H
	DB	0ceH
	DB	067H
	DB	067H
	DB	0a9H
	DB	056H
	DB	02bH
	DB	02bH
	DB	07dH
	DB	0e7H
	DB	0feH
	DB	0feH
	DB	019H
	DB	0b5H
	DB	0d7H
	DB	0d7H
	DB	062H
	DB	04dH
	DB	0abH
	DB	0abH
	DB	0e6H
	DB	0ecH
	DB	076H
	DB	076H
	DB	09aH
	DB	08fH
	DB	0caH
	DB	0caH
	DB	045H
	DB	01fH
	DB	082H
	DB	082H
	DB	09dH
	DB	089H
	DB	0c9H
	DB	0c9H
	DB	040H
	DB	0faH
	DB	07dH
	DB	07dH
	DB	087H
	DB	0efH
	DB	0faH
	DB	0faH
	DB	015H
	DB	0b2H
	DB	059H
	DB	059H
	DB	0ebH
	DB	08eH
	DB	047H
	DB	047H
	DB	0c9H
	DB	0fbH
	DB	0f0H
	DB	0f0H
	DB	0bH
	DB	041H
	DB	0adH
	DB	0adH
	DB	0ecH
	DB	0b3H
	DB	0d4H
	DB	0d4H
	DB	067H
	DB	05fH
	DB	0a2H
	DB	0a2H
	DB	0fdH
	DB	045H
	DB	0afH
	DB	0afH
	DB	0eaH
	DB	023H
	DB	09cH
	DB	09cH
	DB	0bfH
	DB	053H
	DB	0a4H
	DB	0a4H
	DB	0f7H
	DB	0e4H
	DB	072H
	DB	072H
	DB	096H
	DB	09bH
	DB	0c0H
	DB	0c0H
	DB	05bH
	DB	075H
	DB	0b7H
	DB	0b7H
	DB	0c2H
	DB	0e1H
	DB	0fdH
	DB	0fdH
	DB	01cH
	DB	03dH
	DB	093H
	DB	093H
	DB	0aeH
	DB	04cH
	DB	026H
	DB	026H
	DB	06aH
	DB	06cH
	DB	036H
	DB	036H
	DB	05aH
	DB	07eH
	DB	03fH
	DB	03fH
	DB	041H
	DB	0f5H
	DB	0f7H
	DB	0f7H
	DB	02H
	DB	083H
	DB	0ccH
	DB	0ccH
	DB	04fH
	DB	068H
	DB	034H
	DB	034H
	DB	05cH
	DB	051H
	DB	0a5H
	DB	0a5H
	DB	0f4H
	DB	0d1H
	DB	0e5H
	DB	0e5H
	DB	034H
	DB	0f9H
	DB	0f1H
	DB	0f1H
	DB	08H
	DB	0e2H
	DB	071H
	DB	071H
	DB	093H
	DB	0abH
	DB	0d8H
	DB	0d8H
	DB	073H
	DB	062H
	DB	031H
	DB	031H
	DB	053H
	DB	02aH
	DB	015H
	DB	015H
	DB	03fH
	DB	08H
	DB	04H
	DB	04H
	DB	0cH
	DB	095H
	DB	0c7H
	DB	0c7H
	DB	052H
	DB	046H
	DB	023H
	DB	023H
	DB	065H
	DB	09dH
	DB	0c3H
	DB	0c3H
	DB	05eH
	DB	030H
	DB	018H
	DB	018H
	DB	028H
	DB	037H
	DB	096H
	DB	096H
	DB	0a1H
	DB	0aH
	DB	05H
	DB	05H
	DB	0fH
	DB	02fH
	DB	09aH
	DB	09aH
	DB	0b5H
	DB	0eH
	DB	07H
	DB	07H
	DB	09H
	DB	024H
	DB	012H
	DB	012H
	DB	036H
	DB	01bH
	DB	080H
	DB	080H
	DB	09bH
	DB	0dfH
	DB	0e2H
	DB	0e2H
	DB	03dH
	DB	0cdH
	DB	0ebH
	DB	0ebH
	DB	026H
	DB	04eH
	DB	027H
	DB	027H
	DB	069H
	DB	07fH
	DB	0b2H
	DB	0b2H
	DB	0cdH
	DB	0eaH
	DB	075H
	DB	075H
	DB	09fH
	DB	012H
	DB	09H
	DB	09H
	DB	01bH
	DB	01dH
	DB	083H
	DB	083H
	DB	09eH
	DB	058H
	DB	02cH
	DB	02cH
	DB	074H
	DB	034H
	DB	01aH
	DB	01aH
	DB	02eH
	DB	036H
	DB	01bH
	DB	01bH
	DB	02dH
	DB	0dcH
	DB	06eH
	DB	06eH
	DB	0b2H
	DB	0b4H
	DB	05aH
	DB	05aH
	DB	0eeH
	DB	05bH
	DB	0a0H
	DB	0a0H
	DB	0fbH
	DB	0a4H
	DB	052H
	DB	052H
	DB	0f6H
	DB	076H
	DB	03bH
	DB	03bH
	DB	04dH
	DB	0b7H
	DB	0d6H
	DB	0d6H
	DB	061H
	DB	07dH
	DB	0b3H
	DB	0b3H
	DB	0ceH
	DB	052H
	DB	029H
	DB	029H
	DB	07bH
	DB	0ddH
	DB	0e3H
	DB	0e3H
	DB	03eH
	DB	05eH
	DB	02fH
	DB	02fH
	DB	071H
	DB	013H
	DB	084H
	DB	084H
	DB	097H
	DB	0a6H
	DB	053H
	DB	053H
	DB	0f5H
	DB	0b9H
	DB	0d1H
	DB	0d1H
	DB	068H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0c1H
	DB	0edH
	DB	0edH
	DB	02cH
	DB	040H
	DB	020H
	DB	020H
	DB	060H
	DB	0e3H
	DB	0fcH
	DB	0fcH
	DB	01fH
	DB	079H
	DB	0b1H
	DB	0b1H
	DB	0c8H
	DB	0b6H
	DB	05bH
	DB	05bH
	DB	0edH
	DB	0d4H
	DB	06aH
	DB	06aH
	DB	0beH
	DB	08dH
	DB	0cbH
	DB	0cbH
	DB	046H
	DB	067H
	DB	0beH
	DB	0beH
	DB	0d9H
	DB	072H
	DB	039H
	DB	039H
	DB	04bH
	DB	094H
	DB	04aH
	DB	04aH
	DB	0deH
	DB	098H
	DB	04cH
	DB	04cH
	DB	0d4H
	DB	0b0H
	DB	058H
	DB	058H
	DB	0e8H
	DB	085H
	DB	0cfH
	DB	0cfH
	DB	04aH
	DB	0bbH
	DB	0d0H
	DB	0d0H
	DB	06bH
	DB	0c5H
	DB	0efH
	DB	0efH
	DB	02aH
	DB	04fH
	DB	0aaH
	DB	0aaH
	DB	0e5H
	DB	0edH
	DB	0fbH
	DB	0fbH
	DB	016H
	DB	086H
	DB	043H
	DB	043H
	DB	0c5H
	DB	09aH
	DB	04dH
	DB	04dH
	DB	0d7H
	DB	066H
	DB	033H
	DB	033H
	DB	055H
	DB	011H
	DB	085H
	DB	085H
	DB	094H
	DB	08aH
	DB	045H
	DB	045H
	DB	0cfH
	DB	0e9H
	DB	0f9H
	DB	0f9H
	DB	010H
	DB	04H
	DB	02H
	DB	02H
	DB	06H
	DB	0feH
	DB	07fH
	DB	07fH
	DB	081H
	DB	0a0H
	DB	050H
	DB	050H
	DB	0f0H
	DB	078H
	DB	03cH
	DB	03cH
	DB	044H
	DB	025H
	DB	09fH
	DB	09fH
	DB	0baH
	DB	04bH
	DB	0a8H
	DB	0a8H
	DB	0e3H
	DB	0a2H
	DB	051H
	DB	051H
	DB	0f3H
	DB	05dH
	DB	0a3H
	DB	0a3H
	DB	0feH
	DB	080H
	DB	040H
	DB	040H
	DB	0c0H
	DB	05H
	DB	08fH
	DB	08fH
	DB	08aH
	DB	03fH
	DB	092H
	DB	092H
	DB	0adH
	DB	021H
	DB	09dH
	DB	09dH
	DB	0bcH
	DB	070H
	DB	038H
	DB	038H
	DB	048H
	DB	0f1H
	DB	0f5H
	DB	0f5H
	DB	04H
	DB	063H
	DB	0bcH
	DB	0bcH
	DB	0dfH
	DB	077H
	DB	0b6H
	DB	0b6H
	DB	0c1H
	DB	0afH
	DB	0daH
	DB	0daH
	DB	075H
	DB	042H
	DB	021H
	DB	021H
	DB	063H
	DB	020H
	DB	010H
	DB	010H
	DB	030H
	DB	0e5H
	DB	0ffH
	DB	0ffH
	DB	01aH
	DB	0fdH
	DB	0f3H
	DB	0f3H
	DB	0eH
	DB	0bfH
	DB	0d2H
	DB	0d2H
	DB	06dH
	DB	081H
	DB	0cdH
	DB	0cdH
	DB	04cH
	DB	018H
	DB	0cH
	DB	0cH
	DB	014H
	DB	026H
	DB	013H
	DB	013H
	DB	035H
	DB	0c3H
	DB	0ecH
	DB	0ecH
	DB	02fH
	DB	0beH
	DB	05fH
	DB	05fH
	DB	0e1H
	DB	035H
	DB	097H
	DB	097H
	DB	0a2H
	DB	088H
	DB	044H
	DB	044H
	DB	0ccH
	DB	02eH
	DB	017H
	DB	017H
	DB	039H
	DB	093H
	DB	0c4H
	DB	0c4H
	DB	057H
	DB	055H
	DB	0a7H
	DB	0a7H
	DB	0f2H
	DB	0fcH
	DB	07eH
	DB	07eH
	DB	082H
	DB	07aH
	DB	03dH
	DB	03dH
	DB	047H
	DB	0c8H
	DB	064H
	DB	064H
	DB	0acH
	DB	0baH
	DB	05dH
	DB	05dH
	DB	0e7H
	DB	032H
	DB	019H
	DB	019H
	DB	02bH
	DB	0e6H
	DB	073H
	DB	073H
	DB	095H
	DB	0c0H
	DB	060H
	DB	060H
	DB	0a0H
	DB	019H
	DB	081H
	DB	081H
	DB	098H
	DB	09eH
	DB	04fH
	DB	04fH
	DB	0d1H
	DB	0a3H
	DB	0dcH
	DB	0dcH
	DB	07fH
	DB	044H
	DB	022H
	DB	022H
	DB	066H
	DB	054H
	DB	02aH
	DB	02aH
	DB	07eH
	DB	03bH
	DB	090H
	DB	090H
	DB	0abH
	DB	0bH
	DB	088H
	DB	088H
	DB	083H
	DB	08cH
	DB	046H
	DB	046H
	DB	0caH
	DB	0c7H
	DB	0eeH
	DB	0eeH
	DB	029H
	DB	06bH
	DB	0b8H
	DB	0b8H
	DB	0d3H
	DB	028H
	DB	014H
	DB	014H
	DB	03cH
	DB	0a7H
	DB	0deH
	DB	0deH
	DB	079H
	DB	0bcH
	DB	05eH
	DB	05eH
	DB	0e2H
	DB	016H
	DB	0bH
	DB	0bH
	DB	01dH
	DB	0adH
	DB	0dbH
	DB	0dbH
	DB	076H
	DB	0dbH
	DB	0e0H
	DB	0e0H
	DB	03bH
	DB	064H
	DB	032H
	DB	032H
	DB	056H
	DB	074H
	DB	03aH
	DB	03aH
	DB	04eH
	DB	014H
	DB	0aH
	DB	0aH
	DB	01eH
	DB	092H
	DB	049H
	DB	049H
	DB	0dbH
	DB	0cH
	DB	06H
	DB	06H
	DB	0aH
	DB	048H
	DB	024H
	DB	024H
	DB	06cH
	DB	0b8H
	DB	05cH
	DB	05cH
	DB	0e4H
	DB	09fH
	DB	0c2H
	DB	0c2H
	DB	05dH
	DB	0bdH
	DB	0d3H
	DB	0d3H
	DB	06eH
	DB	043H
	DB	0acH
	DB	0acH
	DB	0efH
	DB	0c4H
	DB	062H
	DB	062H
	DB	0a6H
	DB	039H
	DB	091H
	DB	091H
	DB	0a8H
	DB	031H
	DB	095H
	DB	095H
	DB	0a4H
	DB	0d3H
	DB	0e4H
	DB	0e4H
	DB	037H
	DB	0f2H
	DB	079H
	DB	079H
	DB	08bH
	DB	0d5H
	DB	0e7H
	DB	0e7H
	DB	032H
	DB	08bH
	DB	0c8H
	DB	0c8H
	DB	043H
	DB	06eH
	DB	037H
	DB	037H
	DB	059H
	DB	0daH
	DB	06dH
	DB	06dH
	DB	0b7H
	DB	01H
	DB	08dH
	DB	08dH
	DB	08cH
	DB	0b1H
	DB	0d5H
	DB	0d5H
	DB	064H
	DB	09cH
	DB	04eH
	DB	04eH
	DB	0d2H
	DB	049H
	DB	0a9H
	DB	0a9H
	DB	0e0H
	DB	0d8H
	DB	06cH
	DB	06cH
	DB	0b4H
	DB	0acH
	DB	056H
	DB	056H
	DB	0faH
	DB	0f3H
	DB	0f4H
	DB	0f4H
	DB	07H
	DB	0cfH
	DB	0eaH
	DB	0eaH
	DB	025H
	DB	0caH
	DB	065H
	DB	065H
	DB	0afH
	DB	0f4H
	DB	07aH
	DB	07aH
	DB	08eH
	DB	047H
	DB	0aeH
	DB	0aeH
	DB	0e9H
	DB	010H
	DB	08H
	DB	08H
	DB	018H
	DB	06fH
	DB	0baH
	DB	0baH
	DB	0d5H
	DB	0f0H
	DB	078H
	DB	078H
	DB	088H
	DB	04aH
	DB	025H
	DB	025H
	DB	06fH
	DB	05cH
	DB	02eH
	DB	02eH
	DB	072H
	DB	038H
	DB	01cH
	DB	01cH
	DB	024H
	DB	057H
	DB	0a6H
	DB	0a6H
	DB	0f1H
	DB	073H
	DB	0b4H
	DB	0b4H
	DB	0c7H
	DB	097H
	DB	0c6H
	DB	0c6H
	DB	051H
	DB	0cbH
	DB	0e8H
	DB	0e8H
	DB	023H
	DB	0a1H
	DB	0ddH
	DB	0ddH
	DB	07cH
	DB	0e8H
	DB	074H
	DB	074H
	DB	09cH
	DB	03eH
	DB	01fH
	DB	01fH
	DB	021H
	DB	096H
	DB	04bH
	DB	04bH
	DB	0ddH
	DB	061H
	DB	0bdH
	DB	0bdH
	DB	0dcH
	DB	0dH
	DB	08bH
	DB	08bH
	DB	086H
	DB	0fH
	DB	08aH
	DB	08aH
	DB	085H
	DB	0e0H
	DB	070H
	DB	070H
	DB	090H
	DB	07cH
	DB	03eH
	DB	03eH
	DB	042H
	DB	071H
	DB	0b5H
	DB	0b5H
	DB	0c4H
	DB	0ccH
	DB	066H
	DB	066H
	DB	0aaH
	DB	090H
	DB	048H
	DB	048H
	DB	0d8H
	DB	06H
	DB	03H
	DB	03H
	DB	05H
	DB	0f7H
	DB	0f6H
	DB	0f6H
	DB	01H
	DB	01cH
	DB	0eH
	DB	0eH
	DB	012H
	DB	0c2H
	DB	061H
	DB	061H
	DB	0a3H
	DB	06aH
	DB	035H
	DB	035H
	DB	05fH
	DB	0aeH
	DB	057H
	DB	057H
	DB	0f9H
	DB	069H
	DB	0b9H
	DB	0b9H
	DB	0d0H
	DB	017H
	DB	086H
	DB	086H
	DB	091H
	DB	099H
	DB	0c1H
	DB	0c1H
	DB	058H
	DB	03aH
	DB	01dH
	DB	01dH
	DB	027H
	DB	027H
	DB	09eH
	DB	09eH
	DB	0b9H
	DB	0d9H
	DB	0e1H
	DB	0e1H
	DB	038H
	DB	0ebH
	DB	0f8H
	DB	0f8H
	DB	013H
	DB	02bH
	DB	098H
	DB	098H
	DB	0b3H
	DB	022H
	DB	011H
	DB	011H
	DB	033H
	DB	0d2H
	DB	069H
	DB	069H
	DB	0bbH
	DB	0a9H
	DB	0d9H
	DB	0d9H
	DB	070H
	DB	07H
	DB	08eH
	DB	08eH
	DB	089H
	DB	033H
	DB	094H
	DB	094H
	DB	0a7H
	DB	02dH
	DB	09bH
	DB	09bH
	DB	0b6H
	DB	03cH
	DB	01eH
	DB	01eH
	DB	022H
	DB	015H
	DB	087H
	DB	087H
	DB	092H
	DB	0c9H
	DB	0e9H
	DB	0e9H
	DB	020H
	DB	087H
	DB	0ceH
	DB	0ceH
	DB	049H
	DB	0aaH
	DB	055H
	DB	055H
	DB	0ffH
	DB	050H
	DB	028H
	DB	028H
	DB	078H
	DB	0a5H
	DB	0dfH
	DB	0dfH
	DB	07aH
	DB	03H
	DB	08cH
	DB	08cH
	DB	08fH
	DB	059H
	DB	0a1H
	DB	0a1H
	DB	0f8H
	DB	09H
	DB	089H
	DB	089H
	DB	080H
	DB	01aH
	DB	0dH
	DB	0dH
	DB	017H
	DB	065H
	DB	0bfH
	DB	0bfH
	DB	0daH
	DB	0d7H
	DB	0e6H
	DB	0e6H
	DB	031H
	DB	084H
	DB	042H
	DB	042H
	DB	0c6H
	DB	0d0H
	DB	068H
	DB	068H
	DB	0b8H
	DB	082H
	DB	041H
	DB	041H
	DB	0c3H
	DB	029H
	DB	099H
	DB	099H
	DB	0b0H
	DB	05aH
	DB	02dH
	DB	02dH
	DB	077H
	DB	01eH
	DB	0fH
	DB	0fH
	DB	011H
	DB	07bH
	DB	0b0H
	DB	0b0H
	DB	0cbH
	DB	0a8H
	DB	054H
	DB	054H
	DB	0fcH
	DB	06dH
	DB	0bbH
	DB	0bbH
	DB	0d6H
	DB	02cH
	DB	016H
	DB	016H
	DB	03aH
?T2@@3PAY03EA DB 0a5H					; T2
	DB	0c6H
	DB	063H
	DB	063H
	DB	084H
	DB	0f8H
	DB	07cH
	DB	07cH
	DB	099H
	DB	0eeH
	DB	077H
	DB	077H
	DB	08dH
	DB	0f6H
	DB	07bH
	DB	07bH
	DB	0dH
	DB	0ffH
	DB	0f2H
	DB	0f2H
	DB	0bdH
	DB	0d6H
	DB	06bH
	DB	06bH
	DB	0b1H
	DB	0deH
	DB	06fH
	DB	06fH
	DB	054H
	DB	091H
	DB	0c5H
	DB	0c5H
	DB	050H
	DB	060H
	DB	030H
	DB	030H
	DB	03H
	DB	02H
	DB	01H
	DB	01H
	DB	0a9H
	DB	0ceH
	DB	067H
	DB	067H
	DB	07dH
	DB	056H
	DB	02bH
	DB	02bH
	DB	019H
	DB	0e7H
	DB	0feH
	DB	0feH
	DB	062H
	DB	0b5H
	DB	0d7H
	DB	0d7H
	DB	0e6H
	DB	04dH
	DB	0abH
	DB	0abH
	DB	09aH
	DB	0ecH
	DB	076H
	DB	076H
	DB	045H
	DB	08fH
	DB	0caH
	DB	0caH
	DB	09dH
	DB	01fH
	DB	082H
	DB	082H
	DB	040H
	DB	089H
	DB	0c9H
	DB	0c9H
	DB	087H
	DB	0faH
	DB	07dH
	DB	07dH
	DB	015H
	DB	0efH
	DB	0faH
	DB	0faH
	DB	0ebH
	DB	0b2H
	DB	059H
	DB	059H
	DB	0c9H
	DB	08eH
	DB	047H
	DB	047H
	DB	0bH
	DB	0fbH
	DB	0f0H
	DB	0f0H
	DB	0ecH
	DB	041H
	DB	0adH
	DB	0adH
	DB	067H
	DB	0b3H
	DB	0d4H
	DB	0d4H
	DB	0fdH
	DB	05fH
	DB	0a2H
	DB	0a2H
	DB	0eaH
	DB	045H
	DB	0afH
	DB	0afH
	DB	0bfH
	DB	023H
	DB	09cH
	DB	09cH
	DB	0f7H
	DB	053H
	DB	0a4H
	DB	0a4H
	DB	096H
	DB	0e4H
	DB	072H
	DB	072H
	DB	05bH
	DB	09bH
	DB	0c0H
	DB	0c0H
	DB	0c2H
	DB	075H
	DB	0b7H
	DB	0b7H
	DB	01cH
	DB	0e1H
	DB	0fdH
	DB	0fdH
	DB	0aeH
	DB	03dH
	DB	093H
	DB	093H
	DB	06aH
	DB	04cH
	DB	026H
	DB	026H
	DB	05aH
	DB	06cH
	DB	036H
	DB	036H
	DB	041H
	DB	07eH
	DB	03fH
	DB	03fH
	DB	02H
	DB	0f5H
	DB	0f7H
	DB	0f7H
	DB	04fH
	DB	083H
	DB	0ccH
	DB	0ccH
	DB	05cH
	DB	068H
	DB	034H
	DB	034H
	DB	0f4H
	DB	051H
	DB	0a5H
	DB	0a5H
	DB	034H
	DB	0d1H
	DB	0e5H
	DB	0e5H
	DB	08H
	DB	0f9H
	DB	0f1H
	DB	0f1H
	DB	093H
	DB	0e2H
	DB	071H
	DB	071H
	DB	073H
	DB	0abH
	DB	0d8H
	DB	0d8H
	DB	053H
	DB	062H
	DB	031H
	DB	031H
	DB	03fH
	DB	02aH
	DB	015H
	DB	015H
	DB	0cH
	DB	08H
	DB	04H
	DB	04H
	DB	052H
	DB	095H
	DB	0c7H
	DB	0c7H
	DB	065H
	DB	046H
	DB	023H
	DB	023H
	DB	05eH
	DB	09dH
	DB	0c3H
	DB	0c3H
	DB	028H
	DB	030H
	DB	018H
	DB	018H
	DB	0a1H
	DB	037H
	DB	096H
	DB	096H
	DB	0fH
	DB	0aH
	DB	05H
	DB	05H
	DB	0b5H
	DB	02fH
	DB	09aH
	DB	09aH
	DB	09H
	DB	0eH
	DB	07H
	DB	07H
	DB	036H
	DB	024H
	DB	012H
	DB	012H
	DB	09bH
	DB	01bH
	DB	080H
	DB	080H
	DB	03dH
	DB	0dfH
	DB	0e2H
	DB	0e2H
	DB	026H
	DB	0cdH
	DB	0ebH
	DB	0ebH
	DB	069H
	DB	04eH
	DB	027H
	DB	027H
	DB	0cdH
	DB	07fH
	DB	0b2H
	DB	0b2H
	DB	09fH
	DB	0eaH
	DB	075H
	DB	075H
	DB	01bH
	DB	012H
	DB	09H
	DB	09H
	DB	09eH
	DB	01dH
	DB	083H
	DB	083H
	DB	074H
	DB	058H
	DB	02cH
	DB	02cH
	DB	02eH
	DB	034H
	DB	01aH
	DB	01aH
	DB	02dH
	DB	036H
	DB	01bH
	DB	01bH
	DB	0b2H
	DB	0dcH
	DB	06eH
	DB	06eH
	DB	0eeH
	DB	0b4H
	DB	05aH
	DB	05aH
	DB	0fbH
	DB	05bH
	DB	0a0H
	DB	0a0H
	DB	0f6H
	DB	0a4H
	DB	052H
	DB	052H
	DB	04dH
	DB	076H
	DB	03bH
	DB	03bH
	DB	061H
	DB	0b7H
	DB	0d6H
	DB	0d6H
	DB	0ceH
	DB	07dH
	DB	0b3H
	DB	0b3H
	DB	07bH
	DB	052H
	DB	029H
	DB	029H
	DB	03eH
	DB	0ddH
	DB	0e3H
	DB	0e3H
	DB	071H
	DB	05eH
	DB	02fH
	DB	02fH
	DB	097H
	DB	013H
	DB	084H
	DB	084H
	DB	0f5H
	DB	0a6H
	DB	053H
	DB	053H
	DB	068H
	DB	0b9H
	DB	0d1H
	DB	0d1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02cH
	DB	0c1H
	DB	0edH
	DB	0edH
	DB	060H
	DB	040H
	DB	020H
	DB	020H
	DB	01fH
	DB	0e3H
	DB	0fcH
	DB	0fcH
	DB	0c8H
	DB	079H
	DB	0b1H
	DB	0b1H
	DB	0edH
	DB	0b6H
	DB	05bH
	DB	05bH
	DB	0beH
	DB	0d4H
	DB	06aH
	DB	06aH
	DB	046H
	DB	08dH
	DB	0cbH
	DB	0cbH
	DB	0d9H
	DB	067H
	DB	0beH
	DB	0beH
	DB	04bH
	DB	072H
	DB	039H
	DB	039H
	DB	0deH
	DB	094H
	DB	04aH
	DB	04aH
	DB	0d4H
	DB	098H
	DB	04cH
	DB	04cH
	DB	0e8H
	DB	0b0H
	DB	058H
	DB	058H
	DB	04aH
	DB	085H
	DB	0cfH
	DB	0cfH
	DB	06bH
	DB	0bbH
	DB	0d0H
	DB	0d0H
	DB	02aH
	DB	0c5H
	DB	0efH
	DB	0efH
	DB	0e5H
	DB	04fH
	DB	0aaH
	DB	0aaH
	DB	016H
	DB	0edH
	DB	0fbH
	DB	0fbH
	DB	0c5H
	DB	086H
	DB	043H
	DB	043H
	DB	0d7H
	DB	09aH
	DB	04dH
	DB	04dH
	DB	055H
	DB	066H
	DB	033H
	DB	033H
	DB	094H
	DB	011H
	DB	085H
	DB	085H
	DB	0cfH
	DB	08aH
	DB	045H
	DB	045H
	DB	010H
	DB	0e9H
	DB	0f9H
	DB	0f9H
	DB	06H
	DB	04H
	DB	02H
	DB	02H
	DB	081H
	DB	0feH
	DB	07fH
	DB	07fH
	DB	0f0H
	DB	0a0H
	DB	050H
	DB	050H
	DB	044H
	DB	078H
	DB	03cH
	DB	03cH
	DB	0baH
	DB	025H
	DB	09fH
	DB	09fH
	DB	0e3H
	DB	04bH
	DB	0a8H
	DB	0a8H
	DB	0f3H
	DB	0a2H
	DB	051H
	DB	051H
	DB	0feH
	DB	05dH
	DB	0a3H
	DB	0a3H
	DB	0c0H
	DB	080H
	DB	040H
	DB	040H
	DB	08aH
	DB	05H
	DB	08fH
	DB	08fH
	DB	0adH
	DB	03fH
	DB	092H
	DB	092H
	DB	0bcH
	DB	021H
	DB	09dH
	DB	09dH
	DB	048H
	DB	070H
	DB	038H
	DB	038H
	DB	04H
	DB	0f1H
	DB	0f5H
	DB	0f5H
	DB	0dfH
	DB	063H
	DB	0bcH
	DB	0bcH
	DB	0c1H
	DB	077H
	DB	0b6H
	DB	0b6H
	DB	075H
	DB	0afH
	DB	0daH
	DB	0daH
	DB	063H
	DB	042H
	DB	021H
	DB	021H
	DB	030H
	DB	020H
	DB	010H
	DB	010H
	DB	01aH
	DB	0e5H
	DB	0ffH
	DB	0ffH
	DB	0eH
	DB	0fdH
	DB	0f3H
	DB	0f3H
	DB	06dH
	DB	0bfH
	DB	0d2H
	DB	0d2H
	DB	04cH
	DB	081H
	DB	0cdH
	DB	0cdH
	DB	014H
	DB	018H
	DB	0cH
	DB	0cH
	DB	035H
	DB	026H
	DB	013H
	DB	013H
	DB	02fH
	DB	0c3H
	DB	0ecH
	DB	0ecH
	DB	0e1H
	DB	0beH
	DB	05fH
	DB	05fH
	DB	0a2H
	DB	035H
	DB	097H
	DB	097H
	DB	0ccH
	DB	088H
	DB	044H
	DB	044H
	DB	039H
	DB	02eH
	DB	017H
	DB	017H
	DB	057H
	DB	093H
	DB	0c4H
	DB	0c4H
	DB	0f2H
	DB	055H
	DB	0a7H
	DB	0a7H
	DB	082H
	DB	0fcH
	DB	07eH
	DB	07eH
	DB	047H
	DB	07aH
	DB	03dH
	DB	03dH
	DB	0acH
	DB	0c8H
	DB	064H
	DB	064H
	DB	0e7H
	DB	0baH
	DB	05dH
	DB	05dH
	DB	02bH
	DB	032H
	DB	019H
	DB	019H
	DB	095H
	DB	0e6H
	DB	073H
	DB	073H
	DB	0a0H
	DB	0c0H
	DB	060H
	DB	060H
	DB	098H
	DB	019H
	DB	081H
	DB	081H
	DB	0d1H
	DB	09eH
	DB	04fH
	DB	04fH
	DB	07fH
	DB	0a3H
	DB	0dcH
	DB	0dcH
	DB	066H
	DB	044H
	DB	022H
	DB	022H
	DB	07eH
	DB	054H
	DB	02aH
	DB	02aH
	DB	0abH
	DB	03bH
	DB	090H
	DB	090H
	DB	083H
	DB	0bH
	DB	088H
	DB	088H
	DB	0caH
	DB	08cH
	DB	046H
	DB	046H
	DB	029H
	DB	0c7H
	DB	0eeH
	DB	0eeH
	DB	0d3H
	DB	06bH
	DB	0b8H
	DB	0b8H
	DB	03cH
	DB	028H
	DB	014H
	DB	014H
	DB	079H
	DB	0a7H
	DB	0deH
	DB	0deH
	DB	0e2H
	DB	0bcH
	DB	05eH
	DB	05eH
	DB	01dH
	DB	016H
	DB	0bH
	DB	0bH
	DB	076H
	DB	0adH
	DB	0dbH
	DB	0dbH
	DB	03bH
	DB	0dbH
	DB	0e0H
	DB	0e0H
	DB	056H
	DB	064H
	DB	032H
	DB	032H
	DB	04eH
	DB	074H
	DB	03aH
	DB	03aH
	DB	01eH
	DB	014H
	DB	0aH
	DB	0aH
	DB	0dbH
	DB	092H
	DB	049H
	DB	049H
	DB	0aH
	DB	0cH
	DB	06H
	DB	06H
	DB	06cH
	DB	048H
	DB	024H
	DB	024H
	DB	0e4H
	DB	0b8H
	DB	05cH
	DB	05cH
	DB	05dH
	DB	09fH
	DB	0c2H
	DB	0c2H
	DB	06eH
	DB	0bdH
	DB	0d3H
	DB	0d3H
	DB	0efH
	DB	043H
	DB	0acH
	DB	0acH
	DB	0a6H
	DB	0c4H
	DB	062H
	DB	062H
	DB	0a8H
	DB	039H
	DB	091H
	DB	091H
	DB	0a4H
	DB	031H
	DB	095H
	DB	095H
	DB	037H
	DB	0d3H
	DB	0e4H
	DB	0e4H
	DB	08bH
	DB	0f2H
	DB	079H
	DB	079H
	DB	032H
	DB	0d5H
	DB	0e7H
	DB	0e7H
	DB	043H
	DB	08bH
	DB	0c8H
	DB	0c8H
	DB	059H
	DB	06eH
	DB	037H
	DB	037H
	DB	0b7H
	DB	0daH
	DB	06dH
	DB	06dH
	DB	08cH
	DB	01H
	DB	08dH
	DB	08dH
	DB	064H
	DB	0b1H
	DB	0d5H
	DB	0d5H
	DB	0d2H
	DB	09cH
	DB	04eH
	DB	04eH
	DB	0e0H
	DB	049H
	DB	0a9H
	DB	0a9H
	DB	0b4H
	DB	0d8H
	DB	06cH
	DB	06cH
	DB	0faH
	DB	0acH
	DB	056H
	DB	056H
	DB	07H
	DB	0f3H
	DB	0f4H
	DB	0f4H
	DB	025H
	DB	0cfH
	DB	0eaH
	DB	0eaH
	DB	0afH
	DB	0caH
	DB	065H
	DB	065H
	DB	08eH
	DB	0f4H
	DB	07aH
	DB	07aH
	DB	0e9H
	DB	047H
	DB	0aeH
	DB	0aeH
	DB	018H
	DB	010H
	DB	08H
	DB	08H
	DB	0d5H
	DB	06fH
	DB	0baH
	DB	0baH
	DB	088H
	DB	0f0H
	DB	078H
	DB	078H
	DB	06fH
	DB	04aH
	DB	025H
	DB	025H
	DB	072H
	DB	05cH
	DB	02eH
	DB	02eH
	DB	024H
	DB	038H
	DB	01cH
	DB	01cH
	DB	0f1H
	DB	057H
	DB	0a6H
	DB	0a6H
	DB	0c7H
	DB	073H
	DB	0b4H
	DB	0b4H
	DB	051H
	DB	097H
	DB	0c6H
	DB	0c6H
	DB	023H
	DB	0cbH
	DB	0e8H
	DB	0e8H
	DB	07cH
	DB	0a1H
	DB	0ddH
	DB	0ddH
	DB	09cH
	DB	0e8H
	DB	074H
	DB	074H
	DB	021H
	DB	03eH
	DB	01fH
	DB	01fH
	DB	0ddH
	DB	096H
	DB	04bH
	DB	04bH
	DB	0dcH
	DB	061H
	DB	0bdH
	DB	0bdH
	DB	086H
	DB	0dH
	DB	08bH
	DB	08bH
	DB	085H
	DB	0fH
	DB	08aH
	DB	08aH
	DB	090H
	DB	0e0H
	DB	070H
	DB	070H
	DB	042H
	DB	07cH
	DB	03eH
	DB	03eH
	DB	0c4H
	DB	071H
	DB	0b5H
	DB	0b5H
	DB	0aaH
	DB	0ccH
	DB	066H
	DB	066H
	DB	0d8H
	DB	090H
	DB	048H
	DB	048H
	DB	05H
	DB	06H
	DB	03H
	DB	03H
	DB	01H
	DB	0f7H
	DB	0f6H
	DB	0f6H
	DB	012H
	DB	01cH
	DB	0eH
	DB	0eH
	DB	0a3H
	DB	0c2H
	DB	061H
	DB	061H
	DB	05fH
	DB	06aH
	DB	035H
	DB	035H
	DB	0f9H
	DB	0aeH
	DB	057H
	DB	057H
	DB	0d0H
	DB	069H
	DB	0b9H
	DB	0b9H
	DB	091H
	DB	017H
	DB	086H
	DB	086H
	DB	058H
	DB	099H
	DB	0c1H
	DB	0c1H
	DB	027H
	DB	03aH
	DB	01dH
	DB	01dH
	DB	0b9H
	DB	027H
	DB	09eH
	DB	09eH
	DB	038H
	DB	0d9H
	DB	0e1H
	DB	0e1H
	DB	013H
	DB	0ebH
	DB	0f8H
	DB	0f8H
	DB	0b3H
	DB	02bH
	DB	098H
	DB	098H
	DB	033H
	DB	022H
	DB	011H
	DB	011H
	DB	0bbH
	DB	0d2H
	DB	069H
	DB	069H
	DB	070H
	DB	0a9H
	DB	0d9H
	DB	0d9H
	DB	089H
	DB	07H
	DB	08eH
	DB	08eH
	DB	0a7H
	DB	033H
	DB	094H
	DB	094H
	DB	0b6H
	DB	02dH
	DB	09bH
	DB	09bH
	DB	022H
	DB	03cH
	DB	01eH
	DB	01eH
	DB	092H
	DB	015H
	DB	087H
	DB	087H
	DB	020H
	DB	0c9H
	DB	0e9H
	DB	0e9H
	DB	049H
	DB	087H
	DB	0ceH
	DB	0ceH
	DB	0ffH
	DB	0aaH
	DB	055H
	DB	055H
	DB	078H
	DB	050H
	DB	028H
	DB	028H
	DB	07aH
	DB	0a5H
	DB	0dfH
	DB	0dfH
	DB	08fH
	DB	03H
	DB	08cH
	DB	08cH
	DB	0f8H
	DB	059H
	DB	0a1H
	DB	0a1H
	DB	080H
	DB	09H
	DB	089H
	DB	089H
	DB	017H
	DB	01aH
	DB	0dH
	DB	0dH
	DB	0daH
	DB	065H
	DB	0bfH
	DB	0bfH
	DB	031H
	DB	0d7H
	DB	0e6H
	DB	0e6H
	DB	0c6H
	DB	084H
	DB	042H
	DB	042H
	DB	0b8H
	DB	0d0H
	DB	068H
	DB	068H
	DB	0c3H
	DB	082H
	DB	041H
	DB	041H
	DB	0b0H
	DB	029H
	DB	099H
	DB	099H
	DB	077H
	DB	05aH
	DB	02dH
	DB	02dH
	DB	011H
	DB	01eH
	DB	0fH
	DB	0fH
	DB	0cbH
	DB	07bH
	DB	0b0H
	DB	0b0H
	DB	0fcH
	DB	0a8H
	DB	054H
	DB	054H
	DB	0d6H
	DB	06dH
	DB	0bbH
	DB	0bbH
	DB	03aH
	DB	02cH
	DB	016H
	DB	016H
?T3@@3PAY03EA DB 063H					; T3
	DB	0a5H
	DB	0c6H
	DB	063H
	DB	07cH
	DB	084H
	DB	0f8H
	DB	07cH
	DB	077H
	DB	099H
	DB	0eeH
	DB	077H
	DB	07bH
	DB	08dH
	DB	0f6H
	DB	07bH
	DB	0f2H
	DB	0dH
	DB	0ffH
	DB	0f2H
	DB	06bH
	DB	0bdH
	DB	0d6H
	DB	06bH
	DB	06fH
	DB	0b1H
	DB	0deH
	DB	06fH
	DB	0c5H
	DB	054H
	DB	091H
	DB	0c5H
	DB	030H
	DB	050H
	DB	060H
	DB	030H
	DB	01H
	DB	03H
	DB	02H
	DB	01H
	DB	067H
	DB	0a9H
	DB	0ceH
	DB	067H
	DB	02bH
	DB	07dH
	DB	056H
	DB	02bH
	DB	0feH
	DB	019H
	DB	0e7H
	DB	0feH
	DB	0d7H
	DB	062H
	DB	0b5H
	DB	0d7H
	DB	0abH
	DB	0e6H
	DB	04dH
	DB	0abH
	DB	076H
	DB	09aH
	DB	0ecH
	DB	076H
	DB	0caH
	DB	045H
	DB	08fH
	DB	0caH
	DB	082H
	DB	09dH
	DB	01fH
	DB	082H
	DB	0c9H
	DB	040H
	DB	089H
	DB	0c9H
	DB	07dH
	DB	087H
	DB	0faH
	DB	07dH
	DB	0faH
	DB	015H
	DB	0efH
	DB	0faH
	DB	059H
	DB	0ebH
	DB	0b2H
	DB	059H
	DB	047H
	DB	0c9H
	DB	08eH
	DB	047H
	DB	0f0H
	DB	0bH
	DB	0fbH
	DB	0f0H
	DB	0adH
	DB	0ecH
	DB	041H
	DB	0adH
	DB	0d4H
	DB	067H
	DB	0b3H
	DB	0d4H
	DB	0a2H
	DB	0fdH
	DB	05fH
	DB	0a2H
	DB	0afH
	DB	0eaH
	DB	045H
	DB	0afH
	DB	09cH
	DB	0bfH
	DB	023H
	DB	09cH
	DB	0a4H
	DB	0f7H
	DB	053H
	DB	0a4H
	DB	072H
	DB	096H
	DB	0e4H
	DB	072H
	DB	0c0H
	DB	05bH
	DB	09bH
	DB	0c0H
	DB	0b7H
	DB	0c2H
	DB	075H
	DB	0b7H
	DB	0fdH
	DB	01cH
	DB	0e1H
	DB	0fdH
	DB	093H
	DB	0aeH
	DB	03dH
	DB	093H
	DB	026H
	DB	06aH
	DB	04cH
	DB	026H
	DB	036H
	DB	05aH
	DB	06cH
	DB	036H
	DB	03fH
	DB	041H
	DB	07eH
	DB	03fH
	DB	0f7H
	DB	02H
	DB	0f5H
	DB	0f7H
	DB	0ccH
	DB	04fH
	DB	083H
	DB	0ccH
	DB	034H
	DB	05cH
	DB	068H
	DB	034H
	DB	0a5H
	DB	0f4H
	DB	051H
	DB	0a5H
	DB	0e5H
	DB	034H
	DB	0d1H
	DB	0e5H
	DB	0f1H
	DB	08H
	DB	0f9H
	DB	0f1H
	DB	071H
	DB	093H
	DB	0e2H
	DB	071H
	DB	0d8H
	DB	073H
	DB	0abH
	DB	0d8H
	DB	031H
	DB	053H
	DB	062H
	DB	031H
	DB	015H
	DB	03fH
	DB	02aH
	DB	015H
	DB	04H
	DB	0cH
	DB	08H
	DB	04H
	DB	0c7H
	DB	052H
	DB	095H
	DB	0c7H
	DB	023H
	DB	065H
	DB	046H
	DB	023H
	DB	0c3H
	DB	05eH
	DB	09dH
	DB	0c3H
	DB	018H
	DB	028H
	DB	030H
	DB	018H
	DB	096H
	DB	0a1H
	DB	037H
	DB	096H
	DB	05H
	DB	0fH
	DB	0aH
	DB	05H
	DB	09aH
	DB	0b5H
	DB	02fH
	DB	09aH
	DB	07H
	DB	09H
	DB	0eH
	DB	07H
	DB	012H
	DB	036H
	DB	024H
	DB	012H
	DB	080H
	DB	09bH
	DB	01bH
	DB	080H
	DB	0e2H
	DB	03dH
	DB	0dfH
	DB	0e2H
	DB	0ebH
	DB	026H
	DB	0cdH
	DB	0ebH
	DB	027H
	DB	069H
	DB	04eH
	DB	027H
	DB	0b2H
	DB	0cdH
	DB	07fH
	DB	0b2H
	DB	075H
	DB	09fH
	DB	0eaH
	DB	075H
	DB	09H
	DB	01bH
	DB	012H
	DB	09H
	DB	083H
	DB	09eH
	DB	01dH
	DB	083H
	DB	02cH
	DB	074H
	DB	058H
	DB	02cH
	DB	01aH
	DB	02eH
	DB	034H
	DB	01aH
	DB	01bH
	DB	02dH
	DB	036H
	DB	01bH
	DB	06eH
	DB	0b2H
	DB	0dcH
	DB	06eH
	DB	05aH
	DB	0eeH
	DB	0b4H
	DB	05aH
	DB	0a0H
	DB	0fbH
	DB	05bH
	DB	0a0H
	DB	052H
	DB	0f6H
	DB	0a4H
	DB	052H
	DB	03bH
	DB	04dH
	DB	076H
	DB	03bH
	DB	0d6H
	DB	061H
	DB	0b7H
	DB	0d6H
	DB	0b3H
	DB	0ceH
	DB	07dH
	DB	0b3H
	DB	029H
	DB	07bH
	DB	052H
	DB	029H
	DB	0e3H
	DB	03eH
	DB	0ddH
	DB	0e3H
	DB	02fH
	DB	071H
	DB	05eH
	DB	02fH
	DB	084H
	DB	097H
	DB	013H
	DB	084H
	DB	053H
	DB	0f5H
	DB	0a6H
	DB	053H
	DB	0d1H
	DB	068H
	DB	0b9H
	DB	0d1H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0edH
	DB	02cH
	DB	0c1H
	DB	0edH
	DB	020H
	DB	060H
	DB	040H
	DB	020H
	DB	0fcH
	DB	01fH
	DB	0e3H
	DB	0fcH
	DB	0b1H
	DB	0c8H
	DB	079H
	DB	0b1H
	DB	05bH
	DB	0edH
	DB	0b6H
	DB	05bH
	DB	06aH
	DB	0beH
	DB	0d4H
	DB	06aH
	DB	0cbH
	DB	046H
	DB	08dH
	DB	0cbH
	DB	0beH
	DB	0d9H
	DB	067H
	DB	0beH
	DB	039H
	DB	04bH
	DB	072H
	DB	039H
	DB	04aH
	DB	0deH
	DB	094H
	DB	04aH
	DB	04cH
	DB	0d4H
	DB	098H
	DB	04cH
	DB	058H
	DB	0e8H
	DB	0b0H
	DB	058H
	DB	0cfH
	DB	04aH
	DB	085H
	DB	0cfH
	DB	0d0H
	DB	06bH
	DB	0bbH
	DB	0d0H
	DB	0efH
	DB	02aH
	DB	0c5H
	DB	0efH
	DB	0aaH
	DB	0e5H
	DB	04fH
	DB	0aaH
	DB	0fbH
	DB	016H
	DB	0edH
	DB	0fbH
	DB	043H
	DB	0c5H
	DB	086H
	DB	043H
	DB	04dH
	DB	0d7H
	DB	09aH
	DB	04dH
	DB	033H
	DB	055H
	DB	066H
	DB	033H
	DB	085H
	DB	094H
	DB	011H
	DB	085H
	DB	045H
	DB	0cfH
	DB	08aH
	DB	045H
	DB	0f9H
	DB	010H
	DB	0e9H
	DB	0f9H
	DB	02H
	DB	06H
	DB	04H
	DB	02H
	DB	07fH
	DB	081H
	DB	0feH
	DB	07fH
	DB	050H
	DB	0f0H
	DB	0a0H
	DB	050H
	DB	03cH
	DB	044H
	DB	078H
	DB	03cH
	DB	09fH
	DB	0baH
	DB	025H
	DB	09fH
	DB	0a8H
	DB	0e3H
	DB	04bH
	DB	0a8H
	DB	051H
	DB	0f3H
	DB	0a2H
	DB	051H
	DB	0a3H
	DB	0feH
	DB	05dH
	DB	0a3H
	DB	040H
	DB	0c0H
	DB	080H
	DB	040H
	DB	08fH
	DB	08aH
	DB	05H
	DB	08fH
	DB	092H
	DB	0adH
	DB	03fH
	DB	092H
	DB	09dH
	DB	0bcH
	DB	021H
	DB	09dH
	DB	038H
	DB	048H
	DB	070H
	DB	038H
	DB	0f5H
	DB	04H
	DB	0f1H
	DB	0f5H
	DB	0bcH
	DB	0dfH
	DB	063H
	DB	0bcH
	DB	0b6H
	DB	0c1H
	DB	077H
	DB	0b6H
	DB	0daH
	DB	075H
	DB	0afH
	DB	0daH
	DB	021H
	DB	063H
	DB	042H
	DB	021H
	DB	010H
	DB	030H
	DB	020H
	DB	010H
	DB	0ffH
	DB	01aH
	DB	0e5H
	DB	0ffH
	DB	0f3H
	DB	0eH
	DB	0fdH
	DB	0f3H
	DB	0d2H
	DB	06dH
	DB	0bfH
	DB	0d2H
	DB	0cdH
	DB	04cH
	DB	081H
	DB	0cdH
	DB	0cH
	DB	014H
	DB	018H
	DB	0cH
	DB	013H
	DB	035H
	DB	026H
	DB	013H
	DB	0ecH
	DB	02fH
	DB	0c3H
	DB	0ecH
	DB	05fH
	DB	0e1H
	DB	0beH
	DB	05fH
	DB	097H
	DB	0a2H
	DB	035H
	DB	097H
	DB	044H
	DB	0ccH
	DB	088H
	DB	044H
	DB	017H
	DB	039H
	DB	02eH
	DB	017H
	DB	0c4H
	DB	057H
	DB	093H
	DB	0c4H
	DB	0a7H
	DB	0f2H
	DB	055H
	DB	0a7H
	DB	07eH
	DB	082H
	DB	0fcH
	DB	07eH
	DB	03dH
	DB	047H
	DB	07aH
	DB	03dH
	DB	064H
	DB	0acH
	DB	0c8H
	DB	064H
	DB	05dH
	DB	0e7H
	DB	0baH
	DB	05dH
	DB	019H
	DB	02bH
	DB	032H
	DB	019H
	DB	073H
	DB	095H
	DB	0e6H
	DB	073H
	DB	060H
	DB	0a0H
	DB	0c0H
	DB	060H
	DB	081H
	DB	098H
	DB	019H
	DB	081H
	DB	04fH
	DB	0d1H
	DB	09eH
	DB	04fH
	DB	0dcH
	DB	07fH
	DB	0a3H
	DB	0dcH
	DB	022H
	DB	066H
	DB	044H
	DB	022H
	DB	02aH
	DB	07eH
	DB	054H
	DB	02aH
	DB	090H
	DB	0abH
	DB	03bH
	DB	090H
	DB	088H
	DB	083H
	DB	0bH
	DB	088H
	DB	046H
	DB	0caH
	DB	08cH
	DB	046H
	DB	0eeH
	DB	029H
	DB	0c7H
	DB	0eeH
	DB	0b8H
	DB	0d3H
	DB	06bH
	DB	0b8H
	DB	014H
	DB	03cH
	DB	028H
	DB	014H
	DB	0deH
	DB	079H
	DB	0a7H
	DB	0deH
	DB	05eH
	DB	0e2H
	DB	0bcH
	DB	05eH
	DB	0bH
	DB	01dH
	DB	016H
	DB	0bH
	DB	0dbH
	DB	076H
	DB	0adH
	DB	0dbH
	DB	0e0H
	DB	03bH
	DB	0dbH
	DB	0e0H
	DB	032H
	DB	056H
	DB	064H
	DB	032H
	DB	03aH
	DB	04eH
	DB	074H
	DB	03aH
	DB	0aH
	DB	01eH
	DB	014H
	DB	0aH
	DB	049H
	DB	0dbH
	DB	092H
	DB	049H
	DB	06H
	DB	0aH
	DB	0cH
	DB	06H
	DB	024H
	DB	06cH
	DB	048H
	DB	024H
	DB	05cH
	DB	0e4H
	DB	0b8H
	DB	05cH
	DB	0c2H
	DB	05dH
	DB	09fH
	DB	0c2H
	DB	0d3H
	DB	06eH
	DB	0bdH
	DB	0d3H
	DB	0acH
	DB	0efH
	DB	043H
	DB	0acH
	DB	062H
	DB	0a6H
	DB	0c4H
	DB	062H
	DB	091H
	DB	0a8H
	DB	039H
	DB	091H
	DB	095H
	DB	0a4H
	DB	031H
	DB	095H
	DB	0e4H
	DB	037H
	DB	0d3H
	DB	0e4H
	DB	079H
	DB	08bH
	DB	0f2H
	DB	079H
	DB	0e7H
	DB	032H
	DB	0d5H
	DB	0e7H
	DB	0c8H
	DB	043H
	DB	08bH
	DB	0c8H
	DB	037H
	DB	059H
	DB	06eH
	DB	037H
	DB	06dH
	DB	0b7H
	DB	0daH
	DB	06dH
	DB	08dH
	DB	08cH
	DB	01H
	DB	08dH
	DB	0d5H
	DB	064H
	DB	0b1H
	DB	0d5H
	DB	04eH
	DB	0d2H
	DB	09cH
	DB	04eH
	DB	0a9H
	DB	0e0H
	DB	049H
	DB	0a9H
	DB	06cH
	DB	0b4H
	DB	0d8H
	DB	06cH
	DB	056H
	DB	0faH
	DB	0acH
	DB	056H
	DB	0f4H
	DB	07H
	DB	0f3H
	DB	0f4H
	DB	0eaH
	DB	025H
	DB	0cfH
	DB	0eaH
	DB	065H
	DB	0afH
	DB	0caH
	DB	065H
	DB	07aH
	DB	08eH
	DB	0f4H
	DB	07aH
	DB	0aeH
	DB	0e9H
	DB	047H
	DB	0aeH
	DB	08H
	DB	018H
	DB	010H
	DB	08H
	DB	0baH
	DB	0d5H
	DB	06fH
	DB	0baH
	DB	078H
	DB	088H
	DB	0f0H
	DB	078H
	DB	025H
	DB	06fH
	DB	04aH
	DB	025H
	DB	02eH
	DB	072H
	DB	05cH
	DB	02eH
	DB	01cH
	DB	024H
	DB	038H
	DB	01cH
	DB	0a6H
	DB	0f1H
	DB	057H
	DB	0a6H
	DB	0b4H
	DB	0c7H
	DB	073H
	DB	0b4H
	DB	0c6H
	DB	051H
	DB	097H
	DB	0c6H
	DB	0e8H
	DB	023H
	DB	0cbH
	DB	0e8H
	DB	0ddH
	DB	07cH
	DB	0a1H
	DB	0ddH
	DB	074H
	DB	09cH
	DB	0e8H
	DB	074H
	DB	01fH
	DB	021H
	DB	03eH
	DB	01fH
	DB	04bH
	DB	0ddH
	DB	096H
	DB	04bH
	DB	0bdH
	DB	0dcH
	DB	061H
	DB	0bdH
	DB	08bH
	DB	086H
	DB	0dH
	DB	08bH
	DB	08aH
	DB	085H
	DB	0fH
	DB	08aH
	DB	070H
	DB	090H
	DB	0e0H
	DB	070H
	DB	03eH
	DB	042H
	DB	07cH
	DB	03eH
	DB	0b5H
	DB	0c4H
	DB	071H
	DB	0b5H
	DB	066H
	DB	0aaH
	DB	0ccH
	DB	066H
	DB	048H
	DB	0d8H
	DB	090H
	DB	048H
	DB	03H
	DB	05H
	DB	06H
	DB	03H
	DB	0f6H
	DB	01H
	DB	0f7H
	DB	0f6H
	DB	0eH
	DB	012H
	DB	01cH
	DB	0eH
	DB	061H
	DB	0a3H
	DB	0c2H
	DB	061H
	DB	035H
	DB	05fH
	DB	06aH
	DB	035H
	DB	057H
	DB	0f9H
	DB	0aeH
	DB	057H
	DB	0b9H
	DB	0d0H
	DB	069H
	DB	0b9H
	DB	086H
	DB	091H
	DB	017H
	DB	086H
	DB	0c1H
	DB	058H
	DB	099H
	DB	0c1H
	DB	01dH
	DB	027H
	DB	03aH
	DB	01dH
	DB	09eH
	DB	0b9H
	DB	027H
	DB	09eH
	DB	0e1H
	DB	038H
	DB	0d9H
	DB	0e1H
	DB	0f8H
	DB	013H
	DB	0ebH
	DB	0f8H
	DB	098H
	DB	0b3H
	DB	02bH
	DB	098H
	DB	011H
	DB	033H
	DB	022H
	DB	011H
	DB	069H
	DB	0bbH
	DB	0d2H
	DB	069H
	DB	0d9H
	DB	070H
	DB	0a9H
	DB	0d9H
	DB	08eH
	DB	089H
	DB	07H
	DB	08eH
	DB	094H
	DB	0a7H
	DB	033H
	DB	094H
	DB	09bH
	DB	0b6H
	DB	02dH
	DB	09bH
	DB	01eH
	DB	022H
	DB	03cH
	DB	01eH
	DB	087H
	DB	092H
	DB	015H
	DB	087H
	DB	0e9H
	DB	020H
	DB	0c9H
	DB	0e9H
	DB	0ceH
	DB	049H
	DB	087H
	DB	0ceH
	DB	055H
	DB	0ffH
	DB	0aaH
	DB	055H
	DB	028H
	DB	078H
	DB	050H
	DB	028H
	DB	0dfH
	DB	07aH
	DB	0a5H
	DB	0dfH
	DB	08cH
	DB	08fH
	DB	03H
	DB	08cH
	DB	0a1H
	DB	0f8H
	DB	059H
	DB	0a1H
	DB	089H
	DB	080H
	DB	09H
	DB	089H
	DB	0dH
	DB	017H
	DB	01aH
	DB	0dH
	DB	0bfH
	DB	0daH
	DB	065H
	DB	0bfH
	DB	0e6H
	DB	031H
	DB	0d7H
	DB	0e6H
	DB	042H
	DB	0c6H
	DB	084H
	DB	042H
	DB	068H
	DB	0b8H
	DB	0d0H
	DB	068H
	DB	041H
	DB	0c3H
	DB	082H
	DB	041H
	DB	099H
	DB	0b0H
	DB	029H
	DB	099H
	DB	02dH
	DB	077H
	DB	05aH
	DB	02dH
	DB	0fH
	DB	011H
	DB	01eH
	DB	0fH
	DB	0b0H
	DB	0cbH
	DB	07bH
	DB	0b0H
	DB	054H
	DB	0fcH
	DB	0a8H
	DB	054H
	DB	0bbH
	DB	0d6H
	DB	06dH
	DB	0bbH
	DB	016H
	DB	03aH
	DB	02cH
	DB	016H
?T4@@3PAY03EA DB 063H					; T4
	DB	063H
	DB	0a5H
	DB	0c6H
	DB	07cH
	DB	07cH
	DB	084H
	DB	0f8H
	DB	077H
	DB	077H
	DB	099H
	DB	0eeH
	DB	07bH
	DB	07bH
	DB	08dH
	DB	0f6H
	DB	0f2H
	DB	0f2H
	DB	0dH
	DB	0ffH
	DB	06bH
	DB	06bH
	DB	0bdH
	DB	0d6H
	DB	06fH
	DB	06fH
	DB	0b1H
	DB	0deH
	DB	0c5H
	DB	0c5H
	DB	054H
	DB	091H
	DB	030H
	DB	030H
	DB	050H
	DB	060H
	DB	01H
	DB	01H
	DB	03H
	DB	02H
	DB	067H
	DB	067H
	DB	0a9H
	DB	0ceH
	DB	02bH
	DB	02bH
	DB	07dH
	DB	056H
	DB	0feH
	DB	0feH
	DB	019H
	DB	0e7H
	DB	0d7H
	DB	0d7H
	DB	062H
	DB	0b5H
	DB	0abH
	DB	0abH
	DB	0e6H
	DB	04dH
	DB	076H
	DB	076H
	DB	09aH
	DB	0ecH
	DB	0caH
	DB	0caH
	DB	045H
	DB	08fH
	DB	082H
	DB	082H
	DB	09dH
	DB	01fH
	DB	0c9H
	DB	0c9H
	DB	040H
	DB	089H
	DB	07dH
	DB	07dH
	DB	087H
	DB	0faH
	DB	0faH
	DB	0faH
	DB	015H
	DB	0efH
	DB	059H
	DB	059H
	DB	0ebH
	DB	0b2H
	DB	047H
	DB	047H
	DB	0c9H
	DB	08eH
	DB	0f0H
	DB	0f0H
	DB	0bH
	DB	0fbH
	DB	0adH
	DB	0adH
	DB	0ecH
	DB	041H
	DB	0d4H
	DB	0d4H
	DB	067H
	DB	0b3H
	DB	0a2H
	DB	0a2H
	DB	0fdH
	DB	05fH
	DB	0afH
	DB	0afH
	DB	0eaH
	DB	045H
	DB	09cH
	DB	09cH
	DB	0bfH
	DB	023H
	DB	0a4H
	DB	0a4H
	DB	0f7H
	DB	053H
	DB	072H
	DB	072H
	DB	096H
	DB	0e4H
	DB	0c0H
	DB	0c0H
	DB	05bH
	DB	09bH
	DB	0b7H
	DB	0b7H
	DB	0c2H
	DB	075H
	DB	0fdH
	DB	0fdH
	DB	01cH
	DB	0e1H
	DB	093H
	DB	093H
	DB	0aeH
	DB	03dH
	DB	026H
	DB	026H
	DB	06aH
	DB	04cH
	DB	036H
	DB	036H
	DB	05aH
	DB	06cH
	DB	03fH
	DB	03fH
	DB	041H
	DB	07eH
	DB	0f7H
	DB	0f7H
	DB	02H
	DB	0f5H
	DB	0ccH
	DB	0ccH
	DB	04fH
	DB	083H
	DB	034H
	DB	034H
	DB	05cH
	DB	068H
	DB	0a5H
	DB	0a5H
	DB	0f4H
	DB	051H
	DB	0e5H
	DB	0e5H
	DB	034H
	DB	0d1H
	DB	0f1H
	DB	0f1H
	DB	08H
	DB	0f9H
	DB	071H
	DB	071H
	DB	093H
	DB	0e2H
	DB	0d8H
	DB	0d8H
	DB	073H
	DB	0abH
	DB	031H
	DB	031H
	DB	053H
	DB	062H
	DB	015H
	DB	015H
	DB	03fH
	DB	02aH
	DB	04H
	DB	04H
	DB	0cH
	DB	08H
	DB	0c7H
	DB	0c7H
	DB	052H
	DB	095H
	DB	023H
	DB	023H
	DB	065H
	DB	046H
	DB	0c3H
	DB	0c3H
	DB	05eH
	DB	09dH
	DB	018H
	DB	018H
	DB	028H
	DB	030H
	DB	096H
	DB	096H
	DB	0a1H
	DB	037H
	DB	05H
	DB	05H
	DB	0fH
	DB	0aH
	DB	09aH
	DB	09aH
	DB	0b5H
	DB	02fH
	DB	07H
	DB	07H
	DB	09H
	DB	0eH
	DB	012H
	DB	012H
	DB	036H
	DB	024H
	DB	080H
	DB	080H
	DB	09bH
	DB	01bH
	DB	0e2H
	DB	0e2H
	DB	03dH
	DB	0dfH
	DB	0ebH
	DB	0ebH
	DB	026H
	DB	0cdH
	DB	027H
	DB	027H
	DB	069H
	DB	04eH
	DB	0b2H
	DB	0b2H
	DB	0cdH
	DB	07fH
	DB	075H
	DB	075H
	DB	09fH
	DB	0eaH
	DB	09H
	DB	09H
	DB	01bH
	DB	012H
	DB	083H
	DB	083H
	DB	09eH
	DB	01dH
	DB	02cH
	DB	02cH
	DB	074H
	DB	058H
	DB	01aH
	DB	01aH
	DB	02eH
	DB	034H
	DB	01bH
	DB	01bH
	DB	02dH
	DB	036H
	DB	06eH
	DB	06eH
	DB	0b2H
	DB	0dcH
	DB	05aH
	DB	05aH
	DB	0eeH
	DB	0b4H
	DB	0a0H
	DB	0a0H
	DB	0fbH
	DB	05bH
	DB	052H
	DB	052H
	DB	0f6H
	DB	0a4H
	DB	03bH
	DB	03bH
	DB	04dH
	DB	076H
	DB	0d6H
	DB	0d6H
	DB	061H
	DB	0b7H
	DB	0b3H
	DB	0b3H
	DB	0ceH
	DB	07dH
	DB	029H
	DB	029H
	DB	07bH
	DB	052H
	DB	0e3H
	DB	0e3H
	DB	03eH
	DB	0ddH
	DB	02fH
	DB	02fH
	DB	071H
	DB	05eH
	DB	084H
	DB	084H
	DB	097H
	DB	013H
	DB	053H
	DB	053H
	DB	0f5H
	DB	0a6H
	DB	0d1H
	DB	0d1H
	DB	068H
	DB	0b9H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0edH
	DB	0edH
	DB	02cH
	DB	0c1H
	DB	020H
	DB	020H
	DB	060H
	DB	040H
	DB	0fcH
	DB	0fcH
	DB	01fH
	DB	0e3H
	DB	0b1H
	DB	0b1H
	DB	0c8H
	DB	079H
	DB	05bH
	DB	05bH
	DB	0edH
	DB	0b6H
	DB	06aH
	DB	06aH
	DB	0beH
	DB	0d4H
	DB	0cbH
	DB	0cbH
	DB	046H
	DB	08dH
	DB	0beH
	DB	0beH
	DB	0d9H
	DB	067H
	DB	039H
	DB	039H
	DB	04bH
	DB	072H
	DB	04aH
	DB	04aH
	DB	0deH
	DB	094H
	DB	04cH
	DB	04cH
	DB	0d4H
	DB	098H
	DB	058H
	DB	058H
	DB	0e8H
	DB	0b0H
	DB	0cfH
	DB	0cfH
	DB	04aH
	DB	085H
	DB	0d0H
	DB	0d0H
	DB	06bH
	DB	0bbH
	DB	0efH
	DB	0efH
	DB	02aH
	DB	0c5H
	DB	0aaH
	DB	0aaH
	DB	0e5H
	DB	04fH
	DB	0fbH
	DB	0fbH
	DB	016H
	DB	0edH
	DB	043H
	DB	043H
	DB	0c5H
	DB	086H
	DB	04dH
	DB	04dH
	DB	0d7H
	DB	09aH
	DB	033H
	DB	033H
	DB	055H
	DB	066H
	DB	085H
	DB	085H
	DB	094H
	DB	011H
	DB	045H
	DB	045H
	DB	0cfH
	DB	08aH
	DB	0f9H
	DB	0f9H
	DB	010H
	DB	0e9H
	DB	02H
	DB	02H
	DB	06H
	DB	04H
	DB	07fH
	DB	07fH
	DB	081H
	DB	0feH
	DB	050H
	DB	050H
	DB	0f0H
	DB	0a0H
	DB	03cH
	DB	03cH
	DB	044H
	DB	078H
	DB	09fH
	DB	09fH
	DB	0baH
	DB	025H
	DB	0a8H
	DB	0a8H
	DB	0e3H
	DB	04bH
	DB	051H
	DB	051H
	DB	0f3H
	DB	0a2H
	DB	0a3H
	DB	0a3H
	DB	0feH
	DB	05dH
	DB	040H
	DB	040H
	DB	0c0H
	DB	080H
	DB	08fH
	DB	08fH
	DB	08aH
	DB	05H
	DB	092H
	DB	092H
	DB	0adH
	DB	03fH
	DB	09dH
	DB	09dH
	DB	0bcH
	DB	021H
	DB	038H
	DB	038H
	DB	048H
	DB	070H
	DB	0f5H
	DB	0f5H
	DB	04H
	DB	0f1H
	DB	0bcH
	DB	0bcH
	DB	0dfH
	DB	063H
	DB	0b6H
	DB	0b6H
	DB	0c1H
	DB	077H
	DB	0daH
	DB	0daH
	DB	075H
	DB	0afH
	DB	021H
	DB	021H
	DB	063H
	DB	042H
	DB	010H
	DB	010H
	DB	030H
	DB	020H
	DB	0ffH
	DB	0ffH
	DB	01aH
	DB	0e5H
	DB	0f3H
	DB	0f3H
	DB	0eH
	DB	0fdH
	DB	0d2H
	DB	0d2H
	DB	06dH
	DB	0bfH
	DB	0cdH
	DB	0cdH
	DB	04cH
	DB	081H
	DB	0cH
	DB	0cH
	DB	014H
	DB	018H
	DB	013H
	DB	013H
	DB	035H
	DB	026H
	DB	0ecH
	DB	0ecH
	DB	02fH
	DB	0c3H
	DB	05fH
	DB	05fH
	DB	0e1H
	DB	0beH
	DB	097H
	DB	097H
	DB	0a2H
	DB	035H
	DB	044H
	DB	044H
	DB	0ccH
	DB	088H
	DB	017H
	DB	017H
	DB	039H
	DB	02eH
	DB	0c4H
	DB	0c4H
	DB	057H
	DB	093H
	DB	0a7H
	DB	0a7H
	DB	0f2H
	DB	055H
	DB	07eH
	DB	07eH
	DB	082H
	DB	0fcH
	DB	03dH
	DB	03dH
	DB	047H
	DB	07aH
	DB	064H
	DB	064H
	DB	0acH
	DB	0c8H
	DB	05dH
	DB	05dH
	DB	0e7H
	DB	0baH
	DB	019H
	DB	019H
	DB	02bH
	DB	032H
	DB	073H
	DB	073H
	DB	095H
	DB	0e6H
	DB	060H
	DB	060H
	DB	0a0H
	DB	0c0H
	DB	081H
	DB	081H
	DB	098H
	DB	019H
	DB	04fH
	DB	04fH
	DB	0d1H
	DB	09eH
	DB	0dcH
	DB	0dcH
	DB	07fH
	DB	0a3H
	DB	022H
	DB	022H
	DB	066H
	DB	044H
	DB	02aH
	DB	02aH
	DB	07eH
	DB	054H
	DB	090H
	DB	090H
	DB	0abH
	DB	03bH
	DB	088H
	DB	088H
	DB	083H
	DB	0bH
	DB	046H
	DB	046H
	DB	0caH
	DB	08cH
	DB	0eeH
	DB	0eeH
	DB	029H
	DB	0c7H
	DB	0b8H
	DB	0b8H
	DB	0d3H
	DB	06bH
	DB	014H
	DB	014H
	DB	03cH
	DB	028H
	DB	0deH
	DB	0deH
	DB	079H
	DB	0a7H
	DB	05eH
	DB	05eH
	DB	0e2H
	DB	0bcH
	DB	0bH
	DB	0bH
	DB	01dH
	DB	016H
	DB	0dbH
	DB	0dbH
	DB	076H
	DB	0adH
	DB	0e0H
	DB	0e0H
	DB	03bH
	DB	0dbH
	DB	032H
	DB	032H
	DB	056H
	DB	064H
	DB	03aH
	DB	03aH
	DB	04eH
	DB	074H
	DB	0aH
	DB	0aH
	DB	01eH
	DB	014H
	DB	049H
	DB	049H
	DB	0dbH
	DB	092H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	024H
	DB	024H
	DB	06cH
	DB	048H
	DB	05cH
	DB	05cH
	DB	0e4H
	DB	0b8H
	DB	0c2H
	DB	0c2H
	DB	05dH
	DB	09fH
	DB	0d3H
	DB	0d3H
	DB	06eH
	DB	0bdH
	DB	0acH
	DB	0acH
	DB	0efH
	DB	043H
	DB	062H
	DB	062H
	DB	0a6H
	DB	0c4H
	DB	091H
	DB	091H
	DB	0a8H
	DB	039H
	DB	095H
	DB	095H
	DB	0a4H
	DB	031H
	DB	0e4H
	DB	0e4H
	DB	037H
	DB	0d3H
	DB	079H
	DB	079H
	DB	08bH
	DB	0f2H
	DB	0e7H
	DB	0e7H
	DB	032H
	DB	0d5H
	DB	0c8H
	DB	0c8H
	DB	043H
	DB	08bH
	DB	037H
	DB	037H
	DB	059H
	DB	06eH
	DB	06dH
	DB	06dH
	DB	0b7H
	DB	0daH
	DB	08dH
	DB	08dH
	DB	08cH
	DB	01H
	DB	0d5H
	DB	0d5H
	DB	064H
	DB	0b1H
	DB	04eH
	DB	04eH
	DB	0d2H
	DB	09cH
	DB	0a9H
	DB	0a9H
	DB	0e0H
	DB	049H
	DB	06cH
	DB	06cH
	DB	0b4H
	DB	0d8H
	DB	056H
	DB	056H
	DB	0faH
	DB	0acH
	DB	0f4H
	DB	0f4H
	DB	07H
	DB	0f3H
	DB	0eaH
	DB	0eaH
	DB	025H
	DB	0cfH
	DB	065H
	DB	065H
	DB	0afH
	DB	0caH
	DB	07aH
	DB	07aH
	DB	08eH
	DB	0f4H
	DB	0aeH
	DB	0aeH
	DB	0e9H
	DB	047H
	DB	08H
	DB	08H
	DB	018H
	DB	010H
	DB	0baH
	DB	0baH
	DB	0d5H
	DB	06fH
	DB	078H
	DB	078H
	DB	088H
	DB	0f0H
	DB	025H
	DB	025H
	DB	06fH
	DB	04aH
	DB	02eH
	DB	02eH
	DB	072H
	DB	05cH
	DB	01cH
	DB	01cH
	DB	024H
	DB	038H
	DB	0a6H
	DB	0a6H
	DB	0f1H
	DB	057H
	DB	0b4H
	DB	0b4H
	DB	0c7H
	DB	073H
	DB	0c6H
	DB	0c6H
	DB	051H
	DB	097H
	DB	0e8H
	DB	0e8H
	DB	023H
	DB	0cbH
	DB	0ddH
	DB	0ddH
	DB	07cH
	DB	0a1H
	DB	074H
	DB	074H
	DB	09cH
	DB	0e8H
	DB	01fH
	DB	01fH
	DB	021H
	DB	03eH
	DB	04bH
	DB	04bH
	DB	0ddH
	DB	096H
	DB	0bdH
	DB	0bdH
	DB	0dcH
	DB	061H
	DB	08bH
	DB	08bH
	DB	086H
	DB	0dH
	DB	08aH
	DB	08aH
	DB	085H
	DB	0fH
	DB	070H
	DB	070H
	DB	090H
	DB	0e0H
	DB	03eH
	DB	03eH
	DB	042H
	DB	07cH
	DB	0b5H
	DB	0b5H
	DB	0c4H
	DB	071H
	DB	066H
	DB	066H
	DB	0aaH
	DB	0ccH
	DB	048H
	DB	048H
	DB	0d8H
	DB	090H
	DB	03H
	DB	03H
	DB	05H
	DB	06H
	DB	0f6H
	DB	0f6H
	DB	01H
	DB	0f7H
	DB	0eH
	DB	0eH
	DB	012H
	DB	01cH
	DB	061H
	DB	061H
	DB	0a3H
	DB	0c2H
	DB	035H
	DB	035H
	DB	05fH
	DB	06aH
	DB	057H
	DB	057H
	DB	0f9H
	DB	0aeH
	DB	0b9H
	DB	0b9H
	DB	0d0H
	DB	069H
	DB	086H
	DB	086H
	DB	091H
	DB	017H
	DB	0c1H
	DB	0c1H
	DB	058H
	DB	099H
	DB	01dH
	DB	01dH
	DB	027H
	DB	03aH
	DB	09eH
	DB	09eH
	DB	0b9H
	DB	027H
	DB	0e1H
	DB	0e1H
	DB	038H
	DB	0d9H
	DB	0f8H
	DB	0f8H
	DB	013H
	DB	0ebH
	DB	098H
	DB	098H
	DB	0b3H
	DB	02bH
	DB	011H
	DB	011H
	DB	033H
	DB	022H
	DB	069H
	DB	069H
	DB	0bbH
	DB	0d2H
	DB	0d9H
	DB	0d9H
	DB	070H
	DB	0a9H
	DB	08eH
	DB	08eH
	DB	089H
	DB	07H
	DB	094H
	DB	094H
	DB	0a7H
	DB	033H
	DB	09bH
	DB	09bH
	DB	0b6H
	DB	02dH
	DB	01eH
	DB	01eH
	DB	022H
	DB	03cH
	DB	087H
	DB	087H
	DB	092H
	DB	015H
	DB	0e9H
	DB	0e9H
	DB	020H
	DB	0c9H
	DB	0ceH
	DB	0ceH
	DB	049H
	DB	087H
	DB	055H
	DB	055H
	DB	0ffH
	DB	0aaH
	DB	028H
	DB	028H
	DB	078H
	DB	050H
	DB	0dfH
	DB	0dfH
	DB	07aH
	DB	0a5H
	DB	08cH
	DB	08cH
	DB	08fH
	DB	03H
	DB	0a1H
	DB	0a1H
	DB	0f8H
	DB	059H
	DB	089H
	DB	089H
	DB	080H
	DB	09H
	DB	0dH
	DB	0dH
	DB	017H
	DB	01aH
	DB	0bfH
	DB	0bfH
	DB	0daH
	DB	065H
	DB	0e6H
	DB	0e6H
	DB	031H
	DB	0d7H
	DB	042H
	DB	042H
	DB	0c6H
	DB	084H
	DB	068H
	DB	068H
	DB	0b8H
	DB	0d0H
	DB	041H
	DB	041H
	DB	0c3H
	DB	082H
	DB	099H
	DB	099H
	DB	0b0H
	DB	029H
	DB	02dH
	DB	02dH
	DB	077H
	DB	05aH
	DB	0fH
	DB	0fH
	DB	011H
	DB	01eH
	DB	0b0H
	DB	0b0H
	DB	0cbH
	DB	07bH
	DB	054H
	DB	054H
	DB	0fcH
	DB	0a8H
	DB	0bbH
	DB	0bbH
	DB	0d6H
	DB	06dH
	DB	016H
	DB	016H
	DB	03aH
	DB	02cH
?T5@@3PAY03EA DB 051H					; T5
	DB	0f4H
	DB	0a7H
	DB	050H
	DB	07eH
	DB	041H
	DB	065H
	DB	053H
	DB	01aH
	DB	017H
	DB	0a4H
	DB	0c3H
	DB	03aH
	DB	027H
	DB	05eH
	DB	096H
	DB	03bH
	DB	0abH
	DB	06bH
	DB	0cbH
	DB	01fH
	DB	09dH
	DB	045H
	DB	0f1H
	DB	0acH
	DB	0faH
	DB	058H
	DB	0abH
	DB	04bH
	DB	0e3H
	DB	03H
	DB	093H
	DB	020H
	DB	030H
	DB	0faH
	DB	055H
	DB	0adH
	DB	076H
	DB	06dH
	DB	0f6H
	DB	088H
	DB	0ccH
	DB	076H
	DB	091H
	DB	0f5H
	DB	02H
	DB	04cH
	DB	025H
	DB	04fH
	DB	0e5H
	DB	0d7H
	DB	0fcH
	DB	0c5H
	DB	02aH
	DB	0cbH
	DB	0d7H
	DB	026H
	DB	035H
	DB	044H
	DB	080H
	DB	0b5H
	DB	062H
	DB	0a3H
	DB	08fH
	DB	0deH
	DB	0b1H
	DB	05aH
	DB	049H
	DB	025H
	DB	0baH
	DB	01bH
	DB	067H
	DB	045H
	DB	0eaH
	DB	0eH
	DB	098H
	DB	05dH
	DB	0feH
	DB	0c0H
	DB	0e1H
	DB	0c3H
	DB	02fH
	DB	075H
	DB	02H
	DB	081H
	DB	04cH
	DB	0f0H
	DB	012H
	DB	08dH
	DB	046H
	DB	097H
	DB	0a3H
	DB	06bH
	DB	0d3H
	DB	0f9H
	DB	0c6H
	DB	03H
	DB	08fH
	DB	05fH
	DB	0e7H
	DB	015H
	DB	092H
	DB	09cH
	DB	095H
	DB	0bfH
	DB	06dH
	DB	07aH
	DB	0ebH
	DB	095H
	DB	052H
	DB	059H
	DB	0daH
	DB	0d4H
	DB	0beH
	DB	083H
	DB	02dH
	DB	058H
	DB	074H
	DB	021H
	DB	0d3H
	DB	049H
	DB	0e0H
	DB	069H
	DB	029H
	DB	08eH
	DB	0c9H
	DB	0c8H
	DB	044H
	DB	075H
	DB	0c2H
	DB	089H
	DB	06aH
	DB	0f4H
	DB	08eH
	DB	079H
	DB	078H
	DB	099H
	DB	058H
	DB	03eH
	DB	06bH
	DB	027H
	DB	0b9H
	DB	071H
	DB	0ddH
	DB	0beH
	DB	0e1H
	DB	04fH
	DB	0b6H
	DB	0f0H
	DB	088H
	DB	0adH
	DB	017H
	DB	0c9H
	DB	020H
	DB	0acH
	DB	066H
	DB	07dH
	DB	0ceH
	DB	03aH
	DB	0b4H
	DB	063H
	DB	0dfH
	DB	04aH
	DB	018H
	DB	0e5H
	DB	01aH
	DB	031H
	DB	082H
	DB	097H
	DB	051H
	DB	033H
	DB	060H
	DB	062H
	DB	053H
	DB	07fH
	DB	045H
	DB	0b1H
	DB	064H
	DB	077H
	DB	0e0H
	DB	0bbH
	DB	06bH
	DB	0aeH
	DB	084H
	DB	0feH
	DB	081H
	DB	0a0H
	DB	01cH
	DB	0f9H
	DB	08H
	DB	02bH
	DB	094H
	DB	070H
	DB	048H
	DB	068H
	DB	058H
	DB	08fH
	DB	045H
	DB	0fdH
	DB	019H
	DB	094H
	DB	0deH
	DB	06cH
	DB	087H
	DB	052H
	DB	07bH
	DB	0f8H
	DB	0b7H
	DB	0abH
	DB	073H
	DB	0d3H
	DB	023H
	DB	072H
	DB	04bH
	DB	02H
	DB	0e2H
	DB	0e3H
	DB	01fH
	DB	08fH
	DB	057H
	DB	066H
	DB	055H
	DB	0abH
	DB	02aH
	DB	0b2H
	DB	0ebH
	DB	028H
	DB	07H
	DB	02fH
	DB	0b5H
	DB	0c2H
	DB	03H
	DB	086H
	DB	0c5H
	DB	07bH
	DB	09aH
	DB	0d3H
	DB	037H
	DB	08H
	DB	0a5H
	DB	030H
	DB	028H
	DB	087H
	DB	0f2H
	DB	023H
	DB	0bfH
	DB	0a5H
	DB	0b2H
	DB	02H
	DB	03H
	DB	06aH
	DB	0baH
	DB	0edH
	DB	016H
	DB	082H
	DB	05cH
	DB	08aH
	DB	0cfH
	DB	01cH
	DB	02bH
	DB	0a7H
	DB	079H
	DB	0b4H
	DB	092H
	DB	0f3H
	DB	07H
	DB	0f2H
	DB	0f0H
	DB	04eH
	DB	069H
	DB	0e2H
	DB	0a1H
	DB	065H
	DB	0daH
	DB	0f4H
	DB	0cdH
	DB	06H
	DB	05H
	DB	0beH
	DB	0d5H
	DB	0d1H
	DB	034H
	DB	062H
	DB	01fH
	DB	0c4H
	DB	0a6H
	DB	0feH
	DB	08aH
	DB	034H
	DB	02eH
	DB	053H
	DB	09dH
	DB	0a2H
	DB	0f3H
	DB	055H
	DB	0a0H
	DB	05H
	DB	08aH
	DB	0e1H
	DB	032H
	DB	0a4H
	DB	0f6H
	DB	0ebH
	DB	075H
	DB	0bH
	DB	083H
	DB	0ecH
	DB	039H
	DB	040H
	DB	060H
	DB	0efH
	DB	0aaH
	DB	05eH
	DB	071H
	DB	09fH
	DB	06H
	DB	0bdH
	DB	06eH
	DB	010H
	DB	051H
	DB	03eH
	DB	021H
	DB	08aH
	DB	0f9H
	DB	096H
	DB	0ddH
	DB	06H
	DB	03dH
	DB	0ddH
	DB	03eH
	DB	05H
	DB	0aeH
	DB	04dH
	DB	0e6H
	DB	0bdH
	DB	046H
	DB	091H
	DB	054H
	DB	08dH
	DB	0b5H
	DB	071H
	DB	0c4H
	DB	05dH
	DB	05H
	DB	04H
	DB	06H
	DB	0d4H
	DB	06fH
	DB	060H
	DB	050H
	DB	015H
	DB	0ffH
	DB	019H
	DB	098H
	DB	0fbH
	DB	024H
	DB	0d6H
	DB	0bdH
	DB	0e9H
	DB	097H
	DB	089H
	DB	040H
	DB	043H
	DB	0ccH
	DB	067H
	DB	0d9H
	DB	09eH
	DB	077H
	DB	0b0H
	DB	0e8H
	DB	042H
	DB	0bdH
	DB	07H
	DB	089H
	DB	08bH
	DB	088H
	DB	0e7H
	DB	019H
	DB	05bH
	DB	038H
	DB	079H
	DB	0c8H
	DB	0eeH
	DB	0dbH
	DB	0a1H
	DB	07cH
	DB	0aH
	DB	047H
	DB	07cH
	DB	042H
	DB	0fH
	DB	0e9H
	DB	0f8H
	DB	084H
	DB	01eH
	DB	0c9H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	09H
	DB	080H
	DB	086H
	DB	083H
	DB	032H
	DB	02bH
	DB	0edH
	DB	048H
	DB	01eH
	DB	011H
	DB	070H
	DB	0acH
	DB	06cH
	DB	05aH
	DB	072H
	DB	04eH
	DB	0fdH
	DB	0eH
	DB	0ffH
	DB	0fbH
	DB	0fH
	DB	085H
	DB	038H
	DB	056H
	DB	03dH
	DB	0aeH
	DB	0d5H
	DB	01eH
	DB	036H
	DB	02dH
	DB	039H
	DB	027H
	DB	0aH
	DB	0fH
	DB	0d9H
	DB	064H
	DB	068H
	DB	05cH
	DB	0a6H
	DB	021H
	DB	09bH
	DB	05bH
	DB	054H
	DB	0d1H
	DB	024H
	DB	036H
	DB	02eH
	DB	03aH
	DB	0cH
	DB	0aH
	DB	067H
	DB	0b1H
	DB	093H
	DB	057H
	DB	0e7H
	DB	0fH
	DB	0b4H
	DB	0eeH
	DB	096H
	DB	0d2H
	DB	01bH
	DB	09bH
	DB	091H
	DB	09eH
	DB	080H
	DB	0c0H
	DB	0c5H
	DB	04fH
	DB	061H
	DB	0dcH
	DB	020H
	DB	0a2H
	DB	05aH
	DB	077H
	DB	04bH
	DB	069H
	DB	01cH
	DB	012H
	DB	01aH
	DB	016H
	DB	0e2H
	DB	093H
	DB	0baH
	DB	0aH
	DB	0c0H
	DB	0a0H
	DB	02aH
	DB	0e5H
	DB	03cH
	DB	022H
	DB	0e0H
	DB	043H
	DB	012H
	DB	01bH
	DB	017H
	DB	01dH
	DB	0eH
	DB	09H
	DB	0dH
	DB	0bH
	DB	0f2H
	DB	08bH
	DB	0c7H
	DB	0adH
	DB	02dH
	DB	0b6H
	DB	0a8H
	DB	0b9H
	DB	014H
	DB	01eH
	DB	0a9H
	DB	0c8H
	DB	057H
	DB	0f1H
	DB	019H
	DB	085H
	DB	0afH
	DB	075H
	DB	07H
	DB	04cH
	DB	0eeH
	DB	099H
	DB	0ddH
	DB	0bbH
	DB	0a3H
	DB	07fH
	DB	060H
	DB	0fdH
	DB	0f7H
	DB	01H
	DB	026H
	DB	09fH
	DB	05cH
	DB	072H
	DB	0f5H
	DB	0bcH
	DB	044H
	DB	066H
	DB	03bH
	DB	0c5H
	DB	05bH
	DB	0fbH
	DB	07eH
	DB	034H
	DB	08bH
	DB	043H
	DB	029H
	DB	076H
	DB	0cbH
	DB	023H
	DB	0c6H
	DB	0dcH
	DB	0b6H
	DB	0edH
	DB	0fcH
	DB	068H
	DB	0b8H
	DB	0e4H
	DB	0f1H
	DB	063H
	DB	0d7H
	DB	031H
	DB	0dcH
	DB	0caH
	DB	042H
	DB	063H
	DB	085H
	DB	010H
	DB	013H
	DB	097H
	DB	022H
	DB	040H
	DB	084H
	DB	0c6H
	DB	011H
	DB	020H
	DB	085H
	DB	04aH
	DB	024H
	DB	07dH
	DB	0d2H
	DB	0bbH
	DB	03dH
	DB	0f8H
	DB	0aeH
	DB	0f9H
	DB	032H
	DB	011H
	DB	0c7H
	DB	029H
	DB	0a1H
	DB	06dH
	DB	01dH
	DB	09eH
	DB	02fH
	DB	04bH
	DB	0dcH
	DB	0b2H
	DB	030H
	DB	0f3H
	DB	0dH
	DB	086H
	DB	052H
	DB	0ecH
	DB	077H
	DB	0c1H
	DB	0e3H
	DB	0d0H
	DB	02bH
	DB	0b3H
	DB	016H
	DB	06cH
	DB	0a9H
	DB	070H
	DB	0b9H
	DB	099H
	DB	011H
	DB	094H
	DB	048H
	DB	0faH
	DB	047H
	DB	0e9H
	DB	064H
	DB	022H
	DB	0a8H
	DB	0fcH
	DB	08cH
	DB	0c4H
	DB	0a0H
	DB	0f0H
	DB	03fH
	DB	01aH
	DB	056H
	DB	07dH
	DB	02cH
	DB	0d8H
	DB	022H
	DB	033H
	DB	090H
	DB	0efH
	DB	087H
	DB	049H
	DB	04eH
	DB	0c7H
	DB	0d9H
	DB	038H
	DB	0d1H
	DB	0c1H
	DB	08cH
	DB	0caH
	DB	0a2H
	DB	0feH
	DB	098H
	DB	0d4H
	DB	0bH
	DB	036H
	DB	0a6H
	DB	0f5H
	DB	081H
	DB	0cfH
	DB	0a5H
	DB	07aH
	DB	0deH
	DB	028H
	DB	0daH
	DB	0b7H
	DB	08eH
	DB	026H
	DB	03fH
	DB	0adH
	DB	0bfH
	DB	0a4H
	DB	02cH
	DB	03aH
	DB	09dH
	DB	0e4H
	DB	050H
	DB	078H
	DB	092H
	DB	0dH
	DB	06aH
	DB	05fH
	DB	0ccH
	DB	09bH
	DB	054H
	DB	07eH
	DB	046H
	DB	062H
	DB	0f6H
	DB	08dH
	DB	013H
	DB	0c2H
	DB	090H
	DB	0d8H
	DB	0b8H
	DB	0e8H
	DB	02eH
	DB	039H
	DB	0f7H
	DB	05eH
	DB	082H
	DB	0c3H
	DB	0afH
	DB	0f5H
	DB	09fH
	DB	05dH
	DB	080H
	DB	0beH
	DB	069H
	DB	0d0H
	DB	093H
	DB	07cH
	DB	06fH
	DB	0d5H
	DB	02dH
	DB	0a9H
	DB	0cfH
	DB	025H
	DB	012H
	DB	0b3H
	DB	0c8H
	DB	0acH
	DB	099H
	DB	03bH
	DB	010H
	DB	018H
	DB	07dH
	DB	0a7H
	DB	0e8H
	DB	09cH
	DB	063H
	DB	06eH
	DB	0dbH
	DB	03bH
	DB	0bbH
	DB	07bH
	DB	0cdH
	DB	026H
	DB	078H
	DB	09H
	DB	06eH
	DB	059H
	DB	018H
	DB	0f4H
	DB	0ecH
	DB	09aH
	DB	0b7H
	DB	01H
	DB	083H
	DB	04fH
	DB	09aH
	DB	0a8H
	DB	0e6H
	DB	095H
	DB	06eH
	DB	065H
	DB	0aaH
	DB	0ffH
	DB	0e6H
	DB	07eH
	DB	021H
	DB	0bcH
	DB	0cfH
	DB	08H
	DB	0efH
	DB	015H
	DB	0e8H
	DB	0e6H
	DB	0baH
	DB	0e7H
	DB	09bH
	DB	0d9H
	DB	04aH
	DB	06fH
	DB	036H
	DB	0ceH
	DB	0eaH
	DB	09fH
	DB	09H
	DB	0d4H
	DB	029H
	DB	0b0H
	DB	07cH
	DB	0d6H
	DB	031H
	DB	0a4H
	DB	0b2H
	DB	0afH
	DB	02aH
	DB	03fH
	DB	023H
	DB	031H
	DB	0c6H
	DB	0a5H
	DB	094H
	DB	030H
	DB	035H
	DB	0a2H
	DB	066H
	DB	0c0H
	DB	074H
	DB	04eH
	DB	0bcH
	DB	037H
	DB	0fcH
	DB	082H
	DB	0caH
	DB	0a6H
	DB	0e0H
	DB	090H
	DB	0d0H
	DB	0b0H
	DB	033H
	DB	0a7H
	DB	0d8H
	DB	015H
	DB	0f1H
	DB	04H
	DB	098H
	DB	04aH
	DB	041H
	DB	0ecH
	DB	0daH
	DB	0f7H
	DB	07fH
	DB	0cdH
	DB	050H
	DB	0eH
	DB	017H
	DB	091H
	DB	0f6H
	DB	02fH
	DB	076H
	DB	04dH
	DB	0d6H
	DB	08dH
	DB	043H
	DB	0efH
	DB	0b0H
	DB	04dH
	DB	0ccH
	DB	0aaH
	DB	04dH
	DB	054H
	DB	0e4H
	DB	096H
	DB	04H
	DB	0dfH
	DB	09eH
	DB	0d1H
	DB	0b5H
	DB	0e3H
	DB	04cH
	DB	06aH
	DB	088H
	DB	01bH
	DB	0c1H
	DB	02cH
	DB	01fH
	DB	0b8H
	DB	046H
	DB	065H
	DB	051H
	DB	07fH
	DB	09dH
	DB	05eH
	DB	0eaH
	DB	04H
	DB	01H
	DB	08cH
	DB	035H
	DB	05dH
	DB	0faH
	DB	087H
	DB	074H
	DB	073H
	DB	0fbH
	DB	0bH
	DB	041H
	DB	02eH
	DB	0b3H
	DB	067H
	DB	01dH
	DB	05aH
	DB	092H
	DB	0dbH
	DB	0d2H
	DB	052H
	DB	0e9H
	DB	010H
	DB	056H
	DB	033H
	DB	06dH
	DB	0d6H
	DB	047H
	DB	013H
	DB	09aH
	DB	0d7H
	DB	061H
	DB	08cH
	DB	037H
	DB	0a1H
	DB	0cH
	DB	07aH
	DB	059H
	DB	0f8H
	DB	014H
	DB	08eH
	DB	0ebH
	DB	013H
	DB	03cH
	DB	089H
	DB	0ceH
	DB	0a9H
	DB	027H
	DB	0eeH
	DB	0b7H
	DB	061H
	DB	0c9H
	DB	035H
	DB	0e1H
	DB	01cH
	DB	0e5H
	DB	0edH
	DB	07aH
	DB	047H
	DB	0b1H
	DB	03cH
	DB	09cH
	DB	0d2H
	DB	0dfH
	DB	059H
	DB	055H
	DB	0f2H
	DB	073H
	DB	03fH
	DB	018H
	DB	014H
	DB	0ceH
	DB	079H
	DB	073H
	DB	0c7H
	DB	037H
	DB	0bfH
	DB	053H
	DB	0f7H
	DB	0cdH
	DB	0eaH
	DB	05fH
	DB	0fdH
	DB	0aaH
	DB	05bH
	DB	0dfH
	DB	03dH
	DB	06fH
	DB	014H
	DB	078H
	DB	044H
	DB	0dbH
	DB	086H
	DB	0caH
	DB	0afH
	DB	0f3H
	DB	081H
	DB	0b9H
	DB	068H
	DB	0c4H
	DB	03eH
	DB	038H
	DB	024H
	DB	034H
	DB	02cH
	DB	0c2H
	DB	0a3H
	DB	040H
	DB	05fH
	DB	016H
	DB	01dH
	DB	0c3H
	DB	072H
	DB	0bcH
	DB	0e2H
	DB	025H
	DB	0cH
	DB	028H
	DB	03cH
	DB	049H
	DB	08bH
	DB	0ffH
	DB	0dH
	DB	095H
	DB	041H
	DB	039H
	DB	0a8H
	DB	01H
	DB	071H
	DB	08H
	DB	0cH
	DB	0b3H
	DB	0deH
	DB	0d8H
	DB	0b4H
	DB	0e4H
	DB	09cH
	DB	064H
	DB	056H
	DB	0c1H
	DB	090H
	DB	07bH
	DB	0cbH
	DB	084H
	DB	061H
	DB	0d5H
	DB	032H
	DB	0b6H
	DB	070H
	DB	048H
	DB	06cH
	DB	05cH
	DB	074H
	DB	0d0H
	DB	0b8H
	DB	057H
	DB	042H
?T6@@3PAY03EA DB 050H					; T6
	DB	051H
	DB	0f4H
	DB	0a7H
	DB	053H
	DB	07eH
	DB	041H
	DB	065H
	DB	0c3H
	DB	01aH
	DB	017H
	DB	0a4H
	DB	096H
	DB	03aH
	DB	027H
	DB	05eH
	DB	0cbH
	DB	03bH
	DB	0abH
	DB	06bH
	DB	0f1H
	DB	01fH
	DB	09dH
	DB	045H
	DB	0abH
	DB	0acH
	DB	0faH
	DB	058H
	DB	093H
	DB	04bH
	DB	0e3H
	DB	03H
	DB	055H
	DB	020H
	DB	030H
	DB	0faH
	DB	0f6H
	DB	0adH
	DB	076H
	DB	06dH
	DB	091H
	DB	088H
	DB	0ccH
	DB	076H
	DB	025H
	DB	0f5H
	DB	02H
	DB	04cH
	DB	0fcH
	DB	04fH
	DB	0e5H
	DB	0d7H
	DB	0d7H
	DB	0c5H
	DB	02aH
	DB	0cbH
	DB	080H
	DB	026H
	DB	035H
	DB	044H
	DB	08fH
	DB	0b5H
	DB	062H
	DB	0a3H
	DB	049H
	DB	0deH
	DB	0b1H
	DB	05aH
	DB	067H
	DB	025H
	DB	0baH
	DB	01bH
	DB	098H
	DB	045H
	DB	0eaH
	DB	0eH
	DB	0e1H
	DB	05dH
	DB	0feH
	DB	0c0H
	DB	02H
	DB	0c3H
	DB	02fH
	DB	075H
	DB	012H
	DB	081H
	DB	04cH
	DB	0f0H
	DB	0a3H
	DB	08dH
	DB	046H
	DB	097H
	DB	0c6H
	DB	06bH
	DB	0d3H
	DB	0f9H
	DB	0e7H
	DB	03H
	DB	08fH
	DB	05fH
	DB	095H
	DB	015H
	DB	092H
	DB	09cH
	DB	0ebH
	DB	0bfH
	DB	06dH
	DB	07aH
	DB	0daH
	DB	095H
	DB	052H
	DB	059H
	DB	02dH
	DB	0d4H
	DB	0beH
	DB	083H
	DB	0d3H
	DB	058H
	DB	074H
	DB	021H
	DB	029H
	DB	049H
	DB	0e0H
	DB	069H
	DB	044H
	DB	08eH
	DB	0c9H
	DB	0c8H
	DB	06aH
	DB	075H
	DB	0c2H
	DB	089H
	DB	078H
	DB	0f4H
	DB	08eH
	DB	079H
	DB	06bH
	DB	099H
	DB	058H
	DB	03eH
	DB	0ddH
	DB	027H
	DB	0b9H
	DB	071H
	DB	0b6H
	DB	0beH
	DB	0e1H
	DB	04fH
	DB	017H
	DB	0f0H
	DB	088H
	DB	0adH
	DB	066H
	DB	0c9H
	DB	020H
	DB	0acH
	DB	0b4H
	DB	07dH
	DB	0ceH
	DB	03aH
	DB	018H
	DB	063H
	DB	0dfH
	DB	04aH
	DB	082H
	DB	0e5H
	DB	01aH
	DB	031H
	DB	060H
	DB	097H
	DB	051H
	DB	033H
	DB	045H
	DB	062H
	DB	053H
	DB	07fH
	DB	0e0H
	DB	0b1H
	DB	064H
	DB	077H
	DB	084H
	DB	0bbH
	DB	06bH
	DB	0aeH
	DB	01cH
	DB	0feH
	DB	081H
	DB	0a0H
	DB	094H
	DB	0f9H
	DB	08H
	DB	02bH
	DB	058H
	DB	070H
	DB	048H
	DB	068H
	DB	019H
	DB	08fH
	DB	045H
	DB	0fdH
	DB	087H
	DB	094H
	DB	0deH
	DB	06cH
	DB	0b7H
	DB	052H
	DB	07bH
	DB	0f8H
	DB	023H
	DB	0abH
	DB	073H
	DB	0d3H
	DB	0e2H
	DB	072H
	DB	04bH
	DB	02H
	DB	057H
	DB	0e3H
	DB	01fH
	DB	08fH
	DB	02aH
	DB	066H
	DB	055H
	DB	0abH
	DB	07H
	DB	0b2H
	DB	0ebH
	DB	028H
	DB	03H
	DB	02fH
	DB	0b5H
	DB	0c2H
	DB	09aH
	DB	086H
	DB	0c5H
	DB	07bH
	DB	0a5H
	DB	0d3H
	DB	037H
	DB	08H
	DB	0f2H
	DB	030H
	DB	028H
	DB	087H
	DB	0b2H
	DB	023H
	DB	0bfH
	DB	0a5H
	DB	0baH
	DB	02H
	DB	03H
	DB	06aH
	DB	05cH
	DB	0edH
	DB	016H
	DB	082H
	DB	02bH
	DB	08aH
	DB	0cfH
	DB	01cH
	DB	092H
	DB	0a7H
	DB	079H
	DB	0b4H
	DB	0f0H
	DB	0f3H
	DB	07H
	DB	0f2H
	DB	0a1H
	DB	04eH
	DB	069H
	DB	0e2H
	DB	0cdH
	DB	065H
	DB	0daH
	DB	0f4H
	DB	0d5H
	DB	06H
	DB	05H
	DB	0beH
	DB	01fH
	DB	0d1H
	DB	034H
	DB	062H
	DB	08aH
	DB	0c4H
	DB	0a6H
	DB	0feH
	DB	09dH
	DB	034H
	DB	02eH
	DB	053H
	DB	0a0H
	DB	0a2H
	DB	0f3H
	DB	055H
	DB	032H
	DB	05H
	DB	08aH
	DB	0e1H
	DB	075H
	DB	0a4H
	DB	0f6H
	DB	0ebH
	DB	039H
	DB	0bH
	DB	083H
	DB	0ecH
	DB	0aaH
	DB	040H
	DB	060H
	DB	0efH
	DB	06H
	DB	05eH
	DB	071H
	DB	09fH
	DB	051H
	DB	0bdH
	DB	06eH
	DB	010H
	DB	0f9H
	DB	03eH
	DB	021H
	DB	08aH
	DB	03dH
	DB	096H
	DB	0ddH
	DB	06H
	DB	0aeH
	DB	0ddH
	DB	03eH
	DB	05H
	DB	046H
	DB	04dH
	DB	0e6H
	DB	0bdH
	DB	0b5H
	DB	091H
	DB	054H
	DB	08dH
	DB	05H
	DB	071H
	DB	0c4H
	DB	05dH
	DB	06fH
	DB	04H
	DB	06H
	DB	0d4H
	DB	0ffH
	DB	060H
	DB	050H
	DB	015H
	DB	024H
	DB	019H
	DB	098H
	DB	0fbH
	DB	097H
	DB	0d6H
	DB	0bdH
	DB	0e9H
	DB	0ccH
	DB	089H
	DB	040H
	DB	043H
	DB	077H
	DB	067H
	DB	0d9H
	DB	09eH
	DB	0bdH
	DB	0b0H
	DB	0e8H
	DB	042H
	DB	088H
	DB	07H
	DB	089H
	DB	08bH
	DB	038H
	DB	0e7H
	DB	019H
	DB	05bH
	DB	0dbH
	DB	079H
	DB	0c8H
	DB	0eeH
	DB	047H
	DB	0a1H
	DB	07cH
	DB	0aH
	DB	0e9H
	DB	07cH
	DB	042H
	DB	0fH
	DB	0c9H
	DB	0f8H
	DB	084H
	DB	01eH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	083H
	DB	09H
	DB	080H
	DB	086H
	DB	048H
	DB	032H
	DB	02bH
	DB	0edH
	DB	0acH
	DB	01eH
	DB	011H
	DB	070H
	DB	04eH
	DB	06cH
	DB	05aH
	DB	072H
	DB	0fbH
	DB	0fdH
	DB	0eH
	DB	0ffH
	DB	056H
	DB	0fH
	DB	085H
	DB	038H
	DB	01eH
	DB	03dH
	DB	0aeH
	DB	0d5H
	DB	027H
	DB	036H
	DB	02dH
	DB	039H
	DB	064H
	DB	0aH
	DB	0fH
	DB	0d9H
	DB	021H
	DB	068H
	DB	05cH
	DB	0a6H
	DB	0d1H
	DB	09bH
	DB	05bH
	DB	054H
	DB	03aH
	DB	024H
	DB	036H
	DB	02eH
	DB	0b1H
	DB	0cH
	DB	0aH
	DB	067H
	DB	0fH
	DB	093H
	DB	057H
	DB	0e7H
	DB	0d2H
	DB	0b4H
	DB	0eeH
	DB	096H
	DB	09eH
	DB	01bH
	DB	09bH
	DB	091H
	DB	04fH
	DB	080H
	DB	0c0H
	DB	0c5H
	DB	0a2H
	DB	061H
	DB	0dcH
	DB	020H
	DB	069H
	DB	05aH
	DB	077H
	DB	04bH
	DB	016H
	DB	01cH
	DB	012H
	DB	01aH
	DB	0aH
	DB	0e2H
	DB	093H
	DB	0baH
	DB	0e5H
	DB	0c0H
	DB	0a0H
	DB	02aH
	DB	043H
	DB	03cH
	DB	022H
	DB	0e0H
	DB	01dH
	DB	012H
	DB	01bH
	DB	017H
	DB	0bH
	DB	0eH
	DB	09H
	DB	0dH
	DB	0adH
	DB	0f2H
	DB	08bH
	DB	0c7H
	DB	0b9H
	DB	02dH
	DB	0b6H
	DB	0a8H
	DB	0c8H
	DB	014H
	DB	01eH
	DB	0a9H
	DB	085H
	DB	057H
	DB	0f1H
	DB	019H
	DB	04cH
	DB	0afH
	DB	075H
	DB	07H
	DB	0bbH
	DB	0eeH
	DB	099H
	DB	0ddH
	DB	0fdH
	DB	0a3H
	DB	07fH
	DB	060H
	DB	09fH
	DB	0f7H
	DB	01H
	DB	026H
	DB	0bcH
	DB	05cH
	DB	072H
	DB	0f5H
	DB	0c5H
	DB	044H
	DB	066H
	DB	03bH
	DB	034H
	DB	05bH
	DB	0fbH
	DB	07eH
	DB	076H
	DB	08bH
	DB	043H
	DB	029H
	DB	0dcH
	DB	0cbH
	DB	023H
	DB	0c6H
	DB	068H
	DB	0b6H
	DB	0edH
	DB	0fcH
	DB	063H
	DB	0b8H
	DB	0e4H
	DB	0f1H
	DB	0caH
	DB	0d7H
	DB	031H
	DB	0dcH
	DB	010H
	DB	042H
	DB	063H
	DB	085H
	DB	040H
	DB	013H
	DB	097H
	DB	022H
	DB	020H
	DB	084H
	DB	0c6H
	DB	011H
	DB	07dH
	DB	085H
	DB	04aH
	DB	024H
	DB	0f8H
	DB	0d2H
	DB	0bbH
	DB	03dH
	DB	011H
	DB	0aeH
	DB	0f9H
	DB	032H
	DB	06dH
	DB	0c7H
	DB	029H
	DB	0a1H
	DB	04bH
	DB	01dH
	DB	09eH
	DB	02fH
	DB	0f3H
	DB	0dcH
	DB	0b2H
	DB	030H
	DB	0ecH
	DB	0dH
	DB	086H
	DB	052H
	DB	0d0H
	DB	077H
	DB	0c1H
	DB	0e3H
	DB	06cH
	DB	02bH
	DB	0b3H
	DB	016H
	DB	099H
	DB	0a9H
	DB	070H
	DB	0b9H
	DB	0faH
	DB	011H
	DB	094H
	DB	048H
	DB	022H
	DB	047H
	DB	0e9H
	DB	064H
	DB	0c4H
	DB	0a8H
	DB	0fcH
	DB	08cH
	DB	01aH
	DB	0a0H
	DB	0f0H
	DB	03fH
	DB	0d8H
	DB	056H
	DB	07dH
	DB	02cH
	DB	0efH
	DB	022H
	DB	033H
	DB	090H
	DB	0c7H
	DB	087H
	DB	049H
	DB	04eH
	DB	0c1H
	DB	0d9H
	DB	038H
	DB	0d1H
	DB	0feH
	DB	08cH
	DB	0caH
	DB	0a2H
	DB	036H
	DB	098H
	DB	0d4H
	DB	0bH
	DB	0cfH
	DB	0a6H
	DB	0f5H
	DB	081H
	DB	028H
	DB	0a5H
	DB	07aH
	DB	0deH
	DB	026H
	DB	0daH
	DB	0b7H
	DB	08eH
	DB	0a4H
	DB	03fH
	DB	0adH
	DB	0bfH
	DB	0e4H
	DB	02cH
	DB	03aH
	DB	09dH
	DB	0dH
	DB	050H
	DB	078H
	DB	092H
	DB	09bH
	DB	06aH
	DB	05fH
	DB	0ccH
	DB	062H
	DB	054H
	DB	07eH
	DB	046H
	DB	0c2H
	DB	0f6H
	DB	08dH
	DB	013H
	DB	0e8H
	DB	090H
	DB	0d8H
	DB	0b8H
	DB	05eH
	DB	02eH
	DB	039H
	DB	0f7H
	DB	0f5H
	DB	082H
	DB	0c3H
	DB	0afH
	DB	0beH
	DB	09fH
	DB	05dH
	DB	080H
	DB	07cH
	DB	069H
	DB	0d0H
	DB	093H
	DB	0a9H
	DB	06fH
	DB	0d5H
	DB	02dH
	DB	0b3H
	DB	0cfH
	DB	025H
	DB	012H
	DB	03bH
	DB	0c8H
	DB	0acH
	DB	099H
	DB	0a7H
	DB	010H
	DB	018H
	DB	07dH
	DB	06eH
	DB	0e8H
	DB	09cH
	DB	063H
	DB	07bH
	DB	0dbH
	DB	03bH
	DB	0bbH
	DB	09H
	DB	0cdH
	DB	026H
	DB	078H
	DB	0f4H
	DB	06eH
	DB	059H
	DB	018H
	DB	01H
	DB	0ecH
	DB	09aH
	DB	0b7H
	DB	0a8H
	DB	083H
	DB	04fH
	DB	09aH
	DB	065H
	DB	0e6H
	DB	095H
	DB	06eH
	DB	07eH
	DB	0aaH
	DB	0ffH
	DB	0e6H
	DB	08H
	DB	021H
	DB	0bcH
	DB	0cfH
	DB	0e6H
	DB	0efH
	DB	015H
	DB	0e8H
	DB	0d9H
	DB	0baH
	DB	0e7H
	DB	09bH
	DB	0ceH
	DB	04aH
	DB	06fH
	DB	036H
	DB	0d4H
	DB	0eaH
	DB	09fH
	DB	09H
	DB	0d6H
	DB	029H
	DB	0b0H
	DB	07cH
	DB	0afH
	DB	031H
	DB	0a4H
	DB	0b2H
	DB	031H
	DB	02aH
	DB	03fH
	DB	023H
	DB	030H
	DB	0c6H
	DB	0a5H
	DB	094H
	DB	0c0H
	DB	035H
	DB	0a2H
	DB	066H
	DB	037H
	DB	074H
	DB	04eH
	DB	0bcH
	DB	0a6H
	DB	0fcH
	DB	082H
	DB	0caH
	DB	0b0H
	DB	0e0H
	DB	090H
	DB	0d0H
	DB	015H
	DB	033H
	DB	0a7H
	DB	0d8H
	DB	04aH
	DB	0f1H
	DB	04H
	DB	098H
	DB	0f7H
	DB	041H
	DB	0ecH
	DB	0daH
	DB	0eH
	DB	07fH
	DB	0cdH
	DB	050H
	DB	02fH
	DB	017H
	DB	091H
	DB	0f6H
	DB	08dH
	DB	076H
	DB	04dH
	DB	0d6H
	DB	04dH
	DB	043H
	DB	0efH
	DB	0b0H
	DB	054H
	DB	0ccH
	DB	0aaH
	DB	04dH
	DB	0dfH
	DB	0e4H
	DB	096H
	DB	04H
	DB	0e3H
	DB	09eH
	DB	0d1H
	DB	0b5H
	DB	01bH
	DB	04cH
	DB	06aH
	DB	088H
	DB	0b8H
	DB	0c1H
	DB	02cH
	DB	01fH
	DB	07fH
	DB	046H
	DB	065H
	DB	051H
	DB	04H
	DB	09dH
	DB	05eH
	DB	0eaH
	DB	05dH
	DB	01H
	DB	08cH
	DB	035H
	DB	073H
	DB	0faH
	DB	087H
	DB	074H
	DB	02eH
	DB	0fbH
	DB	0bH
	DB	041H
	DB	05aH
	DB	0b3H
	DB	067H
	DB	01dH
	DB	052H
	DB	092H
	DB	0dbH
	DB	0d2H
	DB	033H
	DB	0e9H
	DB	010H
	DB	056H
	DB	013H
	DB	06dH
	DB	0d6H
	DB	047H
	DB	08cH
	DB	09aH
	DB	0d7H
	DB	061H
	DB	07aH
	DB	037H
	DB	0a1H
	DB	0cH
	DB	08eH
	DB	059H
	DB	0f8H
	DB	014H
	DB	089H
	DB	0ebH
	DB	013H
	DB	03cH
	DB	0eeH
	DB	0ceH
	DB	0a9H
	DB	027H
	DB	035H
	DB	0b7H
	DB	061H
	DB	0c9H
	DB	0edH
	DB	0e1H
	DB	01cH
	DB	0e5H
	DB	03cH
	DB	07aH
	DB	047H
	DB	0b1H
	DB	059H
	DB	09cH
	DB	0d2H
	DB	0dfH
	DB	03fH
	DB	055H
	DB	0f2H
	DB	073H
	DB	079H
	DB	018H
	DB	014H
	DB	0ceH
	DB	0bfH
	DB	073H
	DB	0c7H
	DB	037H
	DB	0eaH
	DB	053H
	DB	0f7H
	DB	0cdH
	DB	05bH
	DB	05fH
	DB	0fdH
	DB	0aaH
	DB	014H
	DB	0dfH
	DB	03dH
	DB	06fH
	DB	086H
	DB	078H
	DB	044H
	DB	0dbH
	DB	081H
	DB	0caH
	DB	0afH
	DB	0f3H
	DB	03eH
	DB	0b9H
	DB	068H
	DB	0c4H
	DB	02cH
	DB	038H
	DB	024H
	DB	034H
	DB	05fH
	DB	0c2H
	DB	0a3H
	DB	040H
	DB	072H
	DB	016H
	DB	01dH
	DB	0c3H
	DB	0cH
	DB	0bcH
	DB	0e2H
	DB	025H
	DB	08bH
	DB	028H
	DB	03cH
	DB	049H
	DB	041H
	DB	0ffH
	DB	0dH
	DB	095H
	DB	071H
	DB	039H
	DB	0a8H
	DB	01H
	DB	0deH
	DB	08H
	DB	0cH
	DB	0b3H
	DB	09cH
	DB	0d8H
	DB	0b4H
	DB	0e4H
	DB	090H
	DB	064H
	DB	056H
	DB	0c1H
	DB	061H
	DB	07bH
	DB	0cbH
	DB	084H
	DB	070H
	DB	0d5H
	DB	032H
	DB	0b6H
	DB	074H
	DB	048H
	DB	06cH
	DB	05cH
	DB	042H
	DB	0d0H
	DB	0b8H
	DB	057H
?T7@@3PAY03EA DB 0a7H					; T7
	DB	050H
	DB	051H
	DB	0f4H
	DB	065H
	DB	053H
	DB	07eH
	DB	041H
	DB	0a4H
	DB	0c3H
	DB	01aH
	DB	017H
	DB	05eH
	DB	096H
	DB	03aH
	DB	027H
	DB	06bH
	DB	0cbH
	DB	03bH
	DB	0abH
	DB	045H
	DB	0f1H
	DB	01fH
	DB	09dH
	DB	058H
	DB	0abH
	DB	0acH
	DB	0faH
	DB	03H
	DB	093H
	DB	04bH
	DB	0e3H
	DB	0faH
	DB	055H
	DB	020H
	DB	030H
	DB	06dH
	DB	0f6H
	DB	0adH
	DB	076H
	DB	076H
	DB	091H
	DB	088H
	DB	0ccH
	DB	04cH
	DB	025H
	DB	0f5H
	DB	02H
	DB	0d7H
	DB	0fcH
	DB	04fH
	DB	0e5H
	DB	0cbH
	DB	0d7H
	DB	0c5H
	DB	02aH
	DB	044H
	DB	080H
	DB	026H
	DB	035H
	DB	0a3H
	DB	08fH
	DB	0b5H
	DB	062H
	DB	05aH
	DB	049H
	DB	0deH
	DB	0b1H
	DB	01bH
	DB	067H
	DB	025H
	DB	0baH
	DB	0eH
	DB	098H
	DB	045H
	DB	0eaH
	DB	0c0H
	DB	0e1H
	DB	05dH
	DB	0feH
	DB	075H
	DB	02H
	DB	0c3H
	DB	02fH
	DB	0f0H
	DB	012H
	DB	081H
	DB	04cH
	DB	097H
	DB	0a3H
	DB	08dH
	DB	046H
	DB	0f9H
	DB	0c6H
	DB	06bH
	DB	0d3H
	DB	05fH
	DB	0e7H
	DB	03H
	DB	08fH
	DB	09cH
	DB	095H
	DB	015H
	DB	092H
	DB	07aH
	DB	0ebH
	DB	0bfH
	DB	06dH
	DB	059H
	DB	0daH
	DB	095H
	DB	052H
	DB	083H
	DB	02dH
	DB	0d4H
	DB	0beH
	DB	021H
	DB	0d3H
	DB	058H
	DB	074H
	DB	069H
	DB	029H
	DB	049H
	DB	0e0H
	DB	0c8H
	DB	044H
	DB	08eH
	DB	0c9H
	DB	089H
	DB	06aH
	DB	075H
	DB	0c2H
	DB	079H
	DB	078H
	DB	0f4H
	DB	08eH
	DB	03eH
	DB	06bH
	DB	099H
	DB	058H
	DB	071H
	DB	0ddH
	DB	027H
	DB	0b9H
	DB	04fH
	DB	0b6H
	DB	0beH
	DB	0e1H
	DB	0adH
	DB	017H
	DB	0f0H
	DB	088H
	DB	0acH
	DB	066H
	DB	0c9H
	DB	020H
	DB	03aH
	DB	0b4H
	DB	07dH
	DB	0ceH
	DB	04aH
	DB	018H
	DB	063H
	DB	0dfH
	DB	031H
	DB	082H
	DB	0e5H
	DB	01aH
	DB	033H
	DB	060H
	DB	097H
	DB	051H
	DB	07fH
	DB	045H
	DB	062H
	DB	053H
	DB	077H
	DB	0e0H
	DB	0b1H
	DB	064H
	DB	0aeH
	DB	084H
	DB	0bbH
	DB	06bH
	DB	0a0H
	DB	01cH
	DB	0feH
	DB	081H
	DB	02bH
	DB	094H
	DB	0f9H
	DB	08H
	DB	068H
	DB	058H
	DB	070H
	DB	048H
	DB	0fdH
	DB	019H
	DB	08fH
	DB	045H
	DB	06cH
	DB	087H
	DB	094H
	DB	0deH
	DB	0f8H
	DB	0b7H
	DB	052H
	DB	07bH
	DB	0d3H
	DB	023H
	DB	0abH
	DB	073H
	DB	02H
	DB	0e2H
	DB	072H
	DB	04bH
	DB	08fH
	DB	057H
	DB	0e3H
	DB	01fH
	DB	0abH
	DB	02aH
	DB	066H
	DB	055H
	DB	028H
	DB	07H
	DB	0b2H
	DB	0ebH
	DB	0c2H
	DB	03H
	DB	02fH
	DB	0b5H
	DB	07bH
	DB	09aH
	DB	086H
	DB	0c5H
	DB	08H
	DB	0a5H
	DB	0d3H
	DB	037H
	DB	087H
	DB	0f2H
	DB	030H
	DB	028H
	DB	0a5H
	DB	0b2H
	DB	023H
	DB	0bfH
	DB	06aH
	DB	0baH
	DB	02H
	DB	03H
	DB	082H
	DB	05cH
	DB	0edH
	DB	016H
	DB	01cH
	DB	02bH
	DB	08aH
	DB	0cfH
	DB	0b4H
	DB	092H
	DB	0a7H
	DB	079H
	DB	0f2H
	DB	0f0H
	DB	0f3H
	DB	07H
	DB	0e2H
	DB	0a1H
	DB	04eH
	DB	069H
	DB	0f4H
	DB	0cdH
	DB	065H
	DB	0daH
	DB	0beH
	DB	0d5H
	DB	06H
	DB	05H
	DB	062H
	DB	01fH
	DB	0d1H
	DB	034H
	DB	0feH
	DB	08aH
	DB	0c4H
	DB	0a6H
	DB	053H
	DB	09dH
	DB	034H
	DB	02eH
	DB	055H
	DB	0a0H
	DB	0a2H
	DB	0f3H
	DB	0e1H
	DB	032H
	DB	05H
	DB	08aH
	DB	0ebH
	DB	075H
	DB	0a4H
	DB	0f6H
	DB	0ecH
	DB	039H
	DB	0bH
	DB	083H
	DB	0efH
	DB	0aaH
	DB	040H
	DB	060H
	DB	09fH
	DB	06H
	DB	05eH
	DB	071H
	DB	010H
	DB	051H
	DB	0bdH
	DB	06eH
	DB	08aH
	DB	0f9H
	DB	03eH
	DB	021H
	DB	06H
	DB	03dH
	DB	096H
	DB	0ddH
	DB	05H
	DB	0aeH
	DB	0ddH
	DB	03eH
	DB	0bdH
	DB	046H
	DB	04dH
	DB	0e6H
	DB	08dH
	DB	0b5H
	DB	091H
	DB	054H
	DB	05dH
	DB	05H
	DB	071H
	DB	0c4H
	DB	0d4H
	DB	06fH
	DB	04H
	DB	06H
	DB	015H
	DB	0ffH
	DB	060H
	DB	050H
	DB	0fbH
	DB	024H
	DB	019H
	DB	098H
	DB	0e9H
	DB	097H
	DB	0d6H
	DB	0bdH
	DB	043H
	DB	0ccH
	DB	089H
	DB	040H
	DB	09eH
	DB	077H
	DB	067H
	DB	0d9H
	DB	042H
	DB	0bdH
	DB	0b0H
	DB	0e8H
	DB	08bH
	DB	088H
	DB	07H
	DB	089H
	DB	05bH
	DB	038H
	DB	0e7H
	DB	019H
	DB	0eeH
	DB	0dbH
	DB	079H
	DB	0c8H
	DB	0aH
	DB	047H
	DB	0a1H
	DB	07cH
	DB	0fH
	DB	0e9H
	DB	07cH
	DB	042H
	DB	01eH
	DB	0c9H
	DB	0f8H
	DB	084H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	086H
	DB	083H
	DB	09H
	DB	080H
	DB	0edH
	DB	048H
	DB	032H
	DB	02bH
	DB	070H
	DB	0acH
	DB	01eH
	DB	011H
	DB	072H
	DB	04eH
	DB	06cH
	DB	05aH
	DB	0ffH
	DB	0fbH
	DB	0fdH
	DB	0eH
	DB	038H
	DB	056H
	DB	0fH
	DB	085H
	DB	0d5H
	DB	01eH
	DB	03dH
	DB	0aeH
	DB	039H
	DB	027H
	DB	036H
	DB	02dH
	DB	0d9H
	DB	064H
	DB	0aH
	DB	0fH
	DB	0a6H
	DB	021H
	DB	068H
	DB	05cH
	DB	054H
	DB	0d1H
	DB	09bH
	DB	05bH
	DB	02eH
	DB	03aH
	DB	024H
	DB	036H
	DB	067H
	DB	0b1H
	DB	0cH
	DB	0aH
	DB	0e7H
	DB	0fH
	DB	093H
	DB	057H
	DB	096H
	DB	0d2H
	DB	0b4H
	DB	0eeH
	DB	091H
	DB	09eH
	DB	01bH
	DB	09bH
	DB	0c5H
	DB	04fH
	DB	080H
	DB	0c0H
	DB	020H
	DB	0a2H
	DB	061H
	DB	0dcH
	DB	04bH
	DB	069H
	DB	05aH
	DB	077H
	DB	01aH
	DB	016H
	DB	01cH
	DB	012H
	DB	0baH
	DB	0aH
	DB	0e2H
	DB	093H
	DB	02aH
	DB	0e5H
	DB	0c0H
	DB	0a0H
	DB	0e0H
	DB	043H
	DB	03cH
	DB	022H
	DB	017H
	DB	01dH
	DB	012H
	DB	01bH
	DB	0dH
	DB	0bH
	DB	0eH
	DB	09H
	DB	0c7H
	DB	0adH
	DB	0f2H
	DB	08bH
	DB	0a8H
	DB	0b9H
	DB	02dH
	DB	0b6H
	DB	0a9H
	DB	0c8H
	DB	014H
	DB	01eH
	DB	019H
	DB	085H
	DB	057H
	DB	0f1H
	DB	07H
	DB	04cH
	DB	0afH
	DB	075H
	DB	0ddH
	DB	0bbH
	DB	0eeH
	DB	099H
	DB	060H
	DB	0fdH
	DB	0a3H
	DB	07fH
	DB	026H
	DB	09fH
	DB	0f7H
	DB	01H
	DB	0f5H
	DB	0bcH
	DB	05cH
	DB	072H
	DB	03bH
	DB	0c5H
	DB	044H
	DB	066H
	DB	07eH
	DB	034H
	DB	05bH
	DB	0fbH
	DB	029H
	DB	076H
	DB	08bH
	DB	043H
	DB	0c6H
	DB	0dcH
	DB	0cbH
	DB	023H
	DB	0fcH
	DB	068H
	DB	0b6H
	DB	0edH
	DB	0f1H
	DB	063H
	DB	0b8H
	DB	0e4H
	DB	0dcH
	DB	0caH
	DB	0d7H
	DB	031H
	DB	085H
	DB	010H
	DB	042H
	DB	063H
	DB	022H
	DB	040H
	DB	013H
	DB	097H
	DB	011H
	DB	020H
	DB	084H
	DB	0c6H
	DB	024H
	DB	07dH
	DB	085H
	DB	04aH
	DB	03dH
	DB	0f8H
	DB	0d2H
	DB	0bbH
	DB	032H
	DB	011H
	DB	0aeH
	DB	0f9H
	DB	0a1H
	DB	06dH
	DB	0c7H
	DB	029H
	DB	02fH
	DB	04bH
	DB	01dH
	DB	09eH
	DB	030H
	DB	0f3H
	DB	0dcH
	DB	0b2H
	DB	052H
	DB	0ecH
	DB	0dH
	DB	086H
	DB	0e3H
	DB	0d0H
	DB	077H
	DB	0c1H
	DB	016H
	DB	06cH
	DB	02bH
	DB	0b3H
	DB	0b9H
	DB	099H
	DB	0a9H
	DB	070H
	DB	048H
	DB	0faH
	DB	011H
	DB	094H
	DB	064H
	DB	022H
	DB	047H
	DB	0e9H
	DB	08cH
	DB	0c4H
	DB	0a8H
	DB	0fcH
	DB	03fH
	DB	01aH
	DB	0a0H
	DB	0f0H
	DB	02cH
	DB	0d8H
	DB	056H
	DB	07dH
	DB	090H
	DB	0efH
	DB	022H
	DB	033H
	DB	04eH
	DB	0c7H
	DB	087H
	DB	049H
	DB	0d1H
	DB	0c1H
	DB	0d9H
	DB	038H
	DB	0a2H
	DB	0feH
	DB	08cH
	DB	0caH
	DB	0bH
	DB	036H
	DB	098H
	DB	0d4H
	DB	081H
	DB	0cfH
	DB	0a6H
	DB	0f5H
	DB	0deH
	DB	028H
	DB	0a5H
	DB	07aH
	DB	08eH
	DB	026H
	DB	0daH
	DB	0b7H
	DB	0bfH
	DB	0a4H
	DB	03fH
	DB	0adH
	DB	09dH
	DB	0e4H
	DB	02cH
	DB	03aH
	DB	092H
	DB	0dH
	DB	050H
	DB	078H
	DB	0ccH
	DB	09bH
	DB	06aH
	DB	05fH
	DB	046H
	DB	062H
	DB	054H
	DB	07eH
	DB	013H
	DB	0c2H
	DB	0f6H
	DB	08dH
	DB	0b8H
	DB	0e8H
	DB	090H
	DB	0d8H
	DB	0f7H
	DB	05eH
	DB	02eH
	DB	039H
	DB	0afH
	DB	0f5H
	DB	082H
	DB	0c3H
	DB	080H
	DB	0beH
	DB	09fH
	DB	05dH
	DB	093H
	DB	07cH
	DB	069H
	DB	0d0H
	DB	02dH
	DB	0a9H
	DB	06fH
	DB	0d5H
	DB	012H
	DB	0b3H
	DB	0cfH
	DB	025H
	DB	099H
	DB	03bH
	DB	0c8H
	DB	0acH
	DB	07dH
	DB	0a7H
	DB	010H
	DB	018H
	DB	063H
	DB	06eH
	DB	0e8H
	DB	09cH
	DB	0bbH
	DB	07bH
	DB	0dbH
	DB	03bH
	DB	078H
	DB	09H
	DB	0cdH
	DB	026H
	DB	018H
	DB	0f4H
	DB	06eH
	DB	059H
	DB	0b7H
	DB	01H
	DB	0ecH
	DB	09aH
	DB	09aH
	DB	0a8H
	DB	083H
	DB	04fH
	DB	06eH
	DB	065H
	DB	0e6H
	DB	095H
	DB	0e6H
	DB	07eH
	DB	0aaH
	DB	0ffH
	DB	0cfH
	DB	08H
	DB	021H
	DB	0bcH
	DB	0e8H
	DB	0e6H
	DB	0efH
	DB	015H
	DB	09bH
	DB	0d9H
	DB	0baH
	DB	0e7H
	DB	036H
	DB	0ceH
	DB	04aH
	DB	06fH
	DB	09H
	DB	0d4H
	DB	0eaH
	DB	09fH
	DB	07cH
	DB	0d6H
	DB	029H
	DB	0b0H
	DB	0b2H
	DB	0afH
	DB	031H
	DB	0a4H
	DB	023H
	DB	031H
	DB	02aH
	DB	03fH
	DB	094H
	DB	030H
	DB	0c6H
	DB	0a5H
	DB	066H
	DB	0c0H
	DB	035H
	DB	0a2H
	DB	0bcH
	DB	037H
	DB	074H
	DB	04eH
	DB	0caH
	DB	0a6H
	DB	0fcH
	DB	082H
	DB	0d0H
	DB	0b0H
	DB	0e0H
	DB	090H
	DB	0d8H
	DB	015H
	DB	033H
	DB	0a7H
	DB	098H
	DB	04aH
	DB	0f1H
	DB	04H
	DB	0daH
	DB	0f7H
	DB	041H
	DB	0ecH
	DB	050H
	DB	0eH
	DB	07fH
	DB	0cdH
	DB	0f6H
	DB	02fH
	DB	017H
	DB	091H
	DB	0d6H
	DB	08dH
	DB	076H
	DB	04dH
	DB	0b0H
	DB	04dH
	DB	043H
	DB	0efH
	DB	04dH
	DB	054H
	DB	0ccH
	DB	0aaH
	DB	04H
	DB	0dfH
	DB	0e4H
	DB	096H
	DB	0b5H
	DB	0e3H
	DB	09eH
	DB	0d1H
	DB	088H
	DB	01bH
	DB	04cH
	DB	06aH
	DB	01fH
	DB	0b8H
	DB	0c1H
	DB	02cH
	DB	051H
	DB	07fH
	DB	046H
	DB	065H
	DB	0eaH
	DB	04H
	DB	09dH
	DB	05eH
	DB	035H
	DB	05dH
	DB	01H
	DB	08cH
	DB	074H
	DB	073H
	DB	0faH
	DB	087H
	DB	041H
	DB	02eH
	DB	0fbH
	DB	0bH
	DB	01dH
	DB	05aH
	DB	0b3H
	DB	067H
	DB	0d2H
	DB	052H
	DB	092H
	DB	0dbH
	DB	056H
	DB	033H
	DB	0e9H
	DB	010H
	DB	047H
	DB	013H
	DB	06dH
	DB	0d6H
	DB	061H
	DB	08cH
	DB	09aH
	DB	0d7H
	DB	0cH
	DB	07aH
	DB	037H
	DB	0a1H
	DB	014H
	DB	08eH
	DB	059H
	DB	0f8H
	DB	03cH
	DB	089H
	DB	0ebH
	DB	013H
	DB	027H
	DB	0eeH
	DB	0ceH
	DB	0a9H
	DB	0c9H
	DB	035H
	DB	0b7H
	DB	061H
	DB	0e5H
	DB	0edH
	DB	0e1H
	DB	01cH
	DB	0b1H
	DB	03cH
	DB	07aH
	DB	047H
	DB	0dfH
	DB	059H
	DB	09cH
	DB	0d2H
	DB	073H
	DB	03fH
	DB	055H
	DB	0f2H
	DB	0ceH
	DB	079H
	DB	018H
	DB	014H
	DB	037H
	DB	0bfH
	DB	073H
	DB	0c7H
	DB	0cdH
	DB	0eaH
	DB	053H
	DB	0f7H
	DB	0aaH
	DB	05bH
	DB	05fH
	DB	0fdH
	DB	06fH
	DB	014H
	DB	0dfH
	DB	03dH
	DB	0dbH
	DB	086H
	DB	078H
	DB	044H
	DB	0f3H
	DB	081H
	DB	0caH
	DB	0afH
	DB	0c4H
	DB	03eH
	DB	0b9H
	DB	068H
	DB	034H
	DB	02cH
	DB	038H
	DB	024H
	DB	040H
	DB	05fH
	DB	0c2H
	DB	0a3H
	DB	0c3H
	DB	072H
	DB	016H
	DB	01dH
	DB	025H
	DB	0cH
	DB	0bcH
	DB	0e2H
	DB	049H
	DB	08bH
	DB	028H
	DB	03cH
	DB	095H
	DB	041H
	DB	0ffH
	DB	0dH
	DB	01H
	DB	071H
	DB	039H
	DB	0a8H
	DB	0b3H
	DB	0deH
	DB	08H
	DB	0cH
	DB	0e4H
	DB	09cH
	DB	0d8H
	DB	0b4H
	DB	0c1H
	DB	090H
	DB	064H
	DB	056H
	DB	084H
	DB	061H
	DB	07bH
	DB	0cbH
	DB	0b6H
	DB	070H
	DB	0d5H
	DB	032H
	DB	05cH
	DB	074H
	DB	048H
	DB	06cH
	DB	057H
	DB	042H
	DB	0d0H
	DB	0b8H
?T8@@3PAY03EA DB 0f4H					; T8
	DB	0a7H
	DB	050H
	DB	051H
	DB	041H
	DB	065H
	DB	053H
	DB	07eH
	DB	017H
	DB	0a4H
	DB	0c3H
	DB	01aH
	DB	027H
	DB	05eH
	DB	096H
	DB	03aH
	DB	0abH
	DB	06bH
	DB	0cbH
	DB	03bH
	DB	09dH
	DB	045H
	DB	0f1H
	DB	01fH
	DB	0faH
	DB	058H
	DB	0abH
	DB	0acH
	DB	0e3H
	DB	03H
	DB	093H
	DB	04bH
	DB	030H
	DB	0faH
	DB	055H
	DB	020H
	DB	076H
	DB	06dH
	DB	0f6H
	DB	0adH
	DB	0ccH
	DB	076H
	DB	091H
	DB	088H
	DB	02H
	DB	04cH
	DB	025H
	DB	0f5H
	DB	0e5H
	DB	0d7H
	DB	0fcH
	DB	04fH
	DB	02aH
	DB	0cbH
	DB	0d7H
	DB	0c5H
	DB	035H
	DB	044H
	DB	080H
	DB	026H
	DB	062H
	DB	0a3H
	DB	08fH
	DB	0b5H
	DB	0b1H
	DB	05aH
	DB	049H
	DB	0deH
	DB	0baH
	DB	01bH
	DB	067H
	DB	025H
	DB	0eaH
	DB	0eH
	DB	098H
	DB	045H
	DB	0feH
	DB	0c0H
	DB	0e1H
	DB	05dH
	DB	02fH
	DB	075H
	DB	02H
	DB	0c3H
	DB	04cH
	DB	0f0H
	DB	012H
	DB	081H
	DB	046H
	DB	097H
	DB	0a3H
	DB	08dH
	DB	0d3H
	DB	0f9H
	DB	0c6H
	DB	06bH
	DB	08fH
	DB	05fH
	DB	0e7H
	DB	03H
	DB	092H
	DB	09cH
	DB	095H
	DB	015H
	DB	06dH
	DB	07aH
	DB	0ebH
	DB	0bfH
	DB	052H
	DB	059H
	DB	0daH
	DB	095H
	DB	0beH
	DB	083H
	DB	02dH
	DB	0d4H
	DB	074H
	DB	021H
	DB	0d3H
	DB	058H
	DB	0e0H
	DB	069H
	DB	029H
	DB	049H
	DB	0c9H
	DB	0c8H
	DB	044H
	DB	08eH
	DB	0c2H
	DB	089H
	DB	06aH
	DB	075H
	DB	08eH
	DB	079H
	DB	078H
	DB	0f4H
	DB	058H
	DB	03eH
	DB	06bH
	DB	099H
	DB	0b9H
	DB	071H
	DB	0ddH
	DB	027H
	DB	0e1H
	DB	04fH
	DB	0b6H
	DB	0beH
	DB	088H
	DB	0adH
	DB	017H
	DB	0f0H
	DB	020H
	DB	0acH
	DB	066H
	DB	0c9H
	DB	0ceH
	DB	03aH
	DB	0b4H
	DB	07dH
	DB	0dfH
	DB	04aH
	DB	018H
	DB	063H
	DB	01aH
	DB	031H
	DB	082H
	DB	0e5H
	DB	051H
	DB	033H
	DB	060H
	DB	097H
	DB	053H
	DB	07fH
	DB	045H
	DB	062H
	DB	064H
	DB	077H
	DB	0e0H
	DB	0b1H
	DB	06bH
	DB	0aeH
	DB	084H
	DB	0bbH
	DB	081H
	DB	0a0H
	DB	01cH
	DB	0feH
	DB	08H
	DB	02bH
	DB	094H
	DB	0f9H
	DB	048H
	DB	068H
	DB	058H
	DB	070H
	DB	045H
	DB	0fdH
	DB	019H
	DB	08fH
	DB	0deH
	DB	06cH
	DB	087H
	DB	094H
	DB	07bH
	DB	0f8H
	DB	0b7H
	DB	052H
	DB	073H
	DB	0d3H
	DB	023H
	DB	0abH
	DB	04bH
	DB	02H
	DB	0e2H
	DB	072H
	DB	01fH
	DB	08fH
	DB	057H
	DB	0e3H
	DB	055H
	DB	0abH
	DB	02aH
	DB	066H
	DB	0ebH
	DB	028H
	DB	07H
	DB	0b2H
	DB	0b5H
	DB	0c2H
	DB	03H
	DB	02fH
	DB	0c5H
	DB	07bH
	DB	09aH
	DB	086H
	DB	037H
	DB	08H
	DB	0a5H
	DB	0d3H
	DB	028H
	DB	087H
	DB	0f2H
	DB	030H
	DB	0bfH
	DB	0a5H
	DB	0b2H
	DB	023H
	DB	03H
	DB	06aH
	DB	0baH
	DB	02H
	DB	016H
	DB	082H
	DB	05cH
	DB	0edH
	DB	0cfH
	DB	01cH
	DB	02bH
	DB	08aH
	DB	079H
	DB	0b4H
	DB	092H
	DB	0a7H
	DB	07H
	DB	0f2H
	DB	0f0H
	DB	0f3H
	DB	069H
	DB	0e2H
	DB	0a1H
	DB	04eH
	DB	0daH
	DB	0f4H
	DB	0cdH
	DB	065H
	DB	05H
	DB	0beH
	DB	0d5H
	DB	06H
	DB	034H
	DB	062H
	DB	01fH
	DB	0d1H
	DB	0a6H
	DB	0feH
	DB	08aH
	DB	0c4H
	DB	02eH
	DB	053H
	DB	09dH
	DB	034H
	DB	0f3H
	DB	055H
	DB	0a0H
	DB	0a2H
	DB	08aH
	DB	0e1H
	DB	032H
	DB	05H
	DB	0f6H
	DB	0ebH
	DB	075H
	DB	0a4H
	DB	083H
	DB	0ecH
	DB	039H
	DB	0bH
	DB	060H
	DB	0efH
	DB	0aaH
	DB	040H
	DB	071H
	DB	09fH
	DB	06H
	DB	05eH
	DB	06eH
	DB	010H
	DB	051H
	DB	0bdH
	DB	021H
	DB	08aH
	DB	0f9H
	DB	03eH
	DB	0ddH
	DB	06H
	DB	03dH
	DB	096H
	DB	03eH
	DB	05H
	DB	0aeH
	DB	0ddH
	DB	0e6H
	DB	0bdH
	DB	046H
	DB	04dH
	DB	054H
	DB	08dH
	DB	0b5H
	DB	091H
	DB	0c4H
	DB	05dH
	DB	05H
	DB	071H
	DB	06H
	DB	0d4H
	DB	06fH
	DB	04H
	DB	050H
	DB	015H
	DB	0ffH
	DB	060H
	DB	098H
	DB	0fbH
	DB	024H
	DB	019H
	DB	0bdH
	DB	0e9H
	DB	097H
	DB	0d6H
	DB	040H
	DB	043H
	DB	0ccH
	DB	089H
	DB	0d9H
	DB	09eH
	DB	077H
	DB	067H
	DB	0e8H
	DB	042H
	DB	0bdH
	DB	0b0H
	DB	089H
	DB	08bH
	DB	088H
	DB	07H
	DB	019H
	DB	05bH
	DB	038H
	DB	0e7H
	DB	0c8H
	DB	0eeH
	DB	0dbH
	DB	079H
	DB	07cH
	DB	0aH
	DB	047H
	DB	0a1H
	DB	042H
	DB	0fH
	DB	0e9H
	DB	07cH
	DB	084H
	DB	01eH
	DB	0c9H
	DB	0f8H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	080H
	DB	086H
	DB	083H
	DB	09H
	DB	02bH
	DB	0edH
	DB	048H
	DB	032H
	DB	011H
	DB	070H
	DB	0acH
	DB	01eH
	DB	05aH
	DB	072H
	DB	04eH
	DB	06cH
	DB	0eH
	DB	0ffH
	DB	0fbH
	DB	0fdH
	DB	085H
	DB	038H
	DB	056H
	DB	0fH
	DB	0aeH
	DB	0d5H
	DB	01eH
	DB	03dH
	DB	02dH
	DB	039H
	DB	027H
	DB	036H
	DB	0fH
	DB	0d9H
	DB	064H
	DB	0aH
	DB	05cH
	DB	0a6H
	DB	021H
	DB	068H
	DB	05bH
	DB	054H
	DB	0d1H
	DB	09bH
	DB	036H
	DB	02eH
	DB	03aH
	DB	024H
	DB	0aH
	DB	067H
	DB	0b1H
	DB	0cH
	DB	057H
	DB	0e7H
	DB	0fH
	DB	093H
	DB	0eeH
	DB	096H
	DB	0d2H
	DB	0b4H
	DB	09bH
	DB	091H
	DB	09eH
	DB	01bH
	DB	0c0H
	DB	0c5H
	DB	04fH
	DB	080H
	DB	0dcH
	DB	020H
	DB	0a2H
	DB	061H
	DB	077H
	DB	04bH
	DB	069H
	DB	05aH
	DB	012H
	DB	01aH
	DB	016H
	DB	01cH
	DB	093H
	DB	0baH
	DB	0aH
	DB	0e2H
	DB	0a0H
	DB	02aH
	DB	0e5H
	DB	0c0H
	DB	022H
	DB	0e0H
	DB	043H
	DB	03cH
	DB	01bH
	DB	017H
	DB	01dH
	DB	012H
	DB	09H
	DB	0dH
	DB	0bH
	DB	0eH
	DB	08bH
	DB	0c7H
	DB	0adH
	DB	0f2H
	DB	0b6H
	DB	0a8H
	DB	0b9H
	DB	02dH
	DB	01eH
	DB	0a9H
	DB	0c8H
	DB	014H
	DB	0f1H
	DB	019H
	DB	085H
	DB	057H
	DB	075H
	DB	07H
	DB	04cH
	DB	0afH
	DB	099H
	DB	0ddH
	DB	0bbH
	DB	0eeH
	DB	07fH
	DB	060H
	DB	0fdH
	DB	0a3H
	DB	01H
	DB	026H
	DB	09fH
	DB	0f7H
	DB	072H
	DB	0f5H
	DB	0bcH
	DB	05cH
	DB	066H
	DB	03bH
	DB	0c5H
	DB	044H
	DB	0fbH
	DB	07eH
	DB	034H
	DB	05bH
	DB	043H
	DB	029H
	DB	076H
	DB	08bH
	DB	023H
	DB	0c6H
	DB	0dcH
	DB	0cbH
	DB	0edH
	DB	0fcH
	DB	068H
	DB	0b6H
	DB	0e4H
	DB	0f1H
	DB	063H
	DB	0b8H
	DB	031H
	DB	0dcH
	DB	0caH
	DB	0d7H
	DB	063H
	DB	085H
	DB	010H
	DB	042H
	DB	097H
	DB	022H
	DB	040H
	DB	013H
	DB	0c6H
	DB	011H
	DB	020H
	DB	084H
	DB	04aH
	DB	024H
	DB	07dH
	DB	085H
	DB	0bbH
	DB	03dH
	DB	0f8H
	DB	0d2H
	DB	0f9H
	DB	032H
	DB	011H
	DB	0aeH
	DB	029H
	DB	0a1H
	DB	06dH
	DB	0c7H
	DB	09eH
	DB	02fH
	DB	04bH
	DB	01dH
	DB	0b2H
	DB	030H
	DB	0f3H
	DB	0dcH
	DB	086H
	DB	052H
	DB	0ecH
	DB	0dH
	DB	0c1H
	DB	0e3H
	DB	0d0H
	DB	077H
	DB	0b3H
	DB	016H
	DB	06cH
	DB	02bH
	DB	070H
	DB	0b9H
	DB	099H
	DB	0a9H
	DB	094H
	DB	048H
	DB	0faH
	DB	011H
	DB	0e9H
	DB	064H
	DB	022H
	DB	047H
	DB	0fcH
	DB	08cH
	DB	0c4H
	DB	0a8H
	DB	0f0H
	DB	03fH
	DB	01aH
	DB	0a0H
	DB	07dH
	DB	02cH
	DB	0d8H
	DB	056H
	DB	033H
	DB	090H
	DB	0efH
	DB	022H
	DB	049H
	DB	04eH
	DB	0c7H
	DB	087H
	DB	038H
	DB	0d1H
	DB	0c1H
	DB	0d9H
	DB	0caH
	DB	0a2H
	DB	0feH
	DB	08cH
	DB	0d4H
	DB	0bH
	DB	036H
	DB	098H
	DB	0f5H
	DB	081H
	DB	0cfH
	DB	0a6H
	DB	07aH
	DB	0deH
	DB	028H
	DB	0a5H
	DB	0b7H
	DB	08eH
	DB	026H
	DB	0daH
	DB	0adH
	DB	0bfH
	DB	0a4H
	DB	03fH
	DB	03aH
	DB	09dH
	DB	0e4H
	DB	02cH
	DB	078H
	DB	092H
	DB	0dH
	DB	050H
	DB	05fH
	DB	0ccH
	DB	09bH
	DB	06aH
	DB	07eH
	DB	046H
	DB	062H
	DB	054H
	DB	08dH
	DB	013H
	DB	0c2H
	DB	0f6H
	DB	0d8H
	DB	0b8H
	DB	0e8H
	DB	090H
	DB	039H
	DB	0f7H
	DB	05eH
	DB	02eH
	DB	0c3H
	DB	0afH
	DB	0f5H
	DB	082H
	DB	05dH
	DB	080H
	DB	0beH
	DB	09fH
	DB	0d0H
	DB	093H
	DB	07cH
	DB	069H
	DB	0d5H
	DB	02dH
	DB	0a9H
	DB	06fH
	DB	025H
	DB	012H
	DB	0b3H
	DB	0cfH
	DB	0acH
	DB	099H
	DB	03bH
	DB	0c8H
	DB	018H
	DB	07dH
	DB	0a7H
	DB	010H
	DB	09cH
	DB	063H
	DB	06eH
	DB	0e8H
	DB	03bH
	DB	0bbH
	DB	07bH
	DB	0dbH
	DB	026H
	DB	078H
	DB	09H
	DB	0cdH
	DB	059H
	DB	018H
	DB	0f4H
	DB	06eH
	DB	09aH
	DB	0b7H
	DB	01H
	DB	0ecH
	DB	04fH
	DB	09aH
	DB	0a8H
	DB	083H
	DB	095H
	DB	06eH
	DB	065H
	DB	0e6H
	DB	0ffH
	DB	0e6H
	DB	07eH
	DB	0aaH
	DB	0bcH
	DB	0cfH
	DB	08H
	DB	021H
	DB	015H
	DB	0e8H
	DB	0e6H
	DB	0efH
	DB	0e7H
	DB	09bH
	DB	0d9H
	DB	0baH
	DB	06fH
	DB	036H
	DB	0ceH
	DB	04aH
	DB	09fH
	DB	09H
	DB	0d4H
	DB	0eaH
	DB	0b0H
	DB	07cH
	DB	0d6H
	DB	029H
	DB	0a4H
	DB	0b2H
	DB	0afH
	DB	031H
	DB	03fH
	DB	023H
	DB	031H
	DB	02aH
	DB	0a5H
	DB	094H
	DB	030H
	DB	0c6H
	DB	0a2H
	DB	066H
	DB	0c0H
	DB	035H
	DB	04eH
	DB	0bcH
	DB	037H
	DB	074H
	DB	082H
	DB	0caH
	DB	0a6H
	DB	0fcH
	DB	090H
	DB	0d0H
	DB	0b0H
	DB	0e0H
	DB	0a7H
	DB	0d8H
	DB	015H
	DB	033H
	DB	04H
	DB	098H
	DB	04aH
	DB	0f1H
	DB	0ecH
	DB	0daH
	DB	0f7H
	DB	041H
	DB	0cdH
	DB	050H
	DB	0eH
	DB	07fH
	DB	091H
	DB	0f6H
	DB	02fH
	DB	017H
	DB	04dH
	DB	0d6H
	DB	08dH
	DB	076H
	DB	0efH
	DB	0b0H
	DB	04dH
	DB	043H
	DB	0aaH
	DB	04dH
	DB	054H
	DB	0ccH
	DB	096H
	DB	04H
	DB	0dfH
	DB	0e4H
	DB	0d1H
	DB	0b5H
	DB	0e3H
	DB	09eH
	DB	06aH
	DB	088H
	DB	01bH
	DB	04cH
	DB	02cH
	DB	01fH
	DB	0b8H
	DB	0c1H
	DB	065H
	DB	051H
	DB	07fH
	DB	046H
	DB	05eH
	DB	0eaH
	DB	04H
	DB	09dH
	DB	08cH
	DB	035H
	DB	05dH
	DB	01H
	DB	087H
	DB	074H
	DB	073H
	DB	0faH
	DB	0bH
	DB	041H
	DB	02eH
	DB	0fbH
	DB	067H
	DB	01dH
	DB	05aH
	DB	0b3H
	DB	0dbH
	DB	0d2H
	DB	052H
	DB	092H
	DB	010H
	DB	056H
	DB	033H
	DB	0e9H
	DB	0d6H
	DB	047H
	DB	013H
	DB	06dH
	DB	0d7H
	DB	061H
	DB	08cH
	DB	09aH
	DB	0a1H
	DB	0cH
	DB	07aH
	DB	037H
	DB	0f8H
	DB	014H
	DB	08eH
	DB	059H
	DB	013H
	DB	03cH
	DB	089H
	DB	0ebH
	DB	0a9H
	DB	027H
	DB	0eeH
	DB	0ceH
	DB	061H
	DB	0c9H
	DB	035H
	DB	0b7H
	DB	01cH
	DB	0e5H
	DB	0edH
	DB	0e1H
	DB	047H
	DB	0b1H
	DB	03cH
	DB	07aH
	DB	0d2H
	DB	0dfH
	DB	059H
	DB	09cH
	DB	0f2H
	DB	073H
	DB	03fH
	DB	055H
	DB	014H
	DB	0ceH
	DB	079H
	DB	018H
	DB	0c7H
	DB	037H
	DB	0bfH
	DB	073H
	DB	0f7H
	DB	0cdH
	DB	0eaH
	DB	053H
	DB	0fdH
	DB	0aaH
	DB	05bH
	DB	05fH
	DB	03dH
	DB	06fH
	DB	014H
	DB	0dfH
	DB	044H
	DB	0dbH
	DB	086H
	DB	078H
	DB	0afH
	DB	0f3H
	DB	081H
	DB	0caH
	DB	068H
	DB	0c4H
	DB	03eH
	DB	0b9H
	DB	024H
	DB	034H
	DB	02cH
	DB	038H
	DB	0a3H
	DB	040H
	DB	05fH
	DB	0c2H
	DB	01dH
	DB	0c3H
	DB	072H
	DB	016H
	DB	0e2H
	DB	025H
	DB	0cH
	DB	0bcH
	DB	03cH
	DB	049H
	DB	08bH
	DB	028H
	DB	0dH
	DB	095H
	DB	041H
	DB	0ffH
	DB	0a8H
	DB	01H
	DB	071H
	DB	039H
	DB	0cH
	DB	0b3H
	DB	0deH
	DB	08H
	DB	0b4H
	DB	0e4H
	DB	09cH
	DB	0d8H
	DB	056H
	DB	0c1H
	DB	090H
	DB	064H
	DB	0cbH
	DB	084H
	DB	061H
	DB	07bH
	DB	032H
	DB	0b6H
	DB	070H
	DB	0d5H
	DB	06cH
	DB	05cH
	DB	074H
	DB	048H
	DB	0b8H
	DB	057H
	DB	042H
	DB	0d0H
?S5@@3PAEA DB	052H					; S5
	DB	09H
	DB	06aH
	DB	0d5H
	DB	030H
	DB	036H
	DB	0a5H
	DB	038H
	DB	0bfH
	DB	040H
	DB	0a3H
	DB	09eH
	DB	081H
	DB	0f3H
	DB	0d7H
	DB	0fbH
	DB	07cH
	DB	0e3H
	DB	039H
	DB	082H
	DB	09bH
	DB	02fH
	DB	0ffH
	DB	087H
	DB	034H
	DB	08eH
	DB	043H
	DB	044H
	DB	0c4H
	DB	0deH
	DB	0e9H
	DB	0cbH
	DB	054H
	DB	07bH
	DB	094H
	DB	032H
	DB	0a6H
	DB	0c2H
	DB	023H
	DB	03dH
	DB	0eeH
	DB	04cH
	DB	095H
	DB	0bH
	DB	042H
	DB	0faH
	DB	0c3H
	DB	04eH
	DB	08H
	DB	02eH
	DB	0a1H
	DB	066H
	DB	028H
	DB	0d9H
	DB	024H
	DB	0b2H
	DB	076H
	DB	05bH
	DB	0a2H
	DB	049H
	DB	06dH
	DB	08bH
	DB	0d1H
	DB	025H
	DB	072H
	DB	0f8H
	DB	0f6H
	DB	064H
	DB	086H
	DB	068H
	DB	098H
	DB	016H
	DB	0d4H
	DB	0a4H
	DB	05cH
	DB	0ccH
	DB	05dH
	DB	065H
	DB	0b6H
	DB	092H
	DB	06cH
	DB	070H
	DB	048H
	DB	050H
	DB	0fdH
	DB	0edH
	DB	0b9H
	DB	0daH
	DB	05eH
	DB	015H
	DB	046H
	DB	057H
	DB	0a7H
	DB	08dH
	DB	09dH
	DB	084H
	DB	090H
	DB	0d8H
	DB	0abH
	DB	00H
	DB	08cH
	DB	0bcH
	DB	0d3H
	DB	0aH
	DB	0f7H
	DB	0e4H
	DB	058H
	DB	05H
	DB	0b8H
	DB	0b3H
	DB	045H
	DB	06H
	DB	0d0H
	DB	02cH
	DB	01eH
	DB	08fH
	DB	0caH
	DB	03fH
	DB	0fH
	DB	02H
	DB	0c1H
	DB	0afH
	DB	0bdH
	DB	03H
	DB	01H
	DB	013H
	DB	08aH
	DB	06bH
	DB	03aH
	DB	091H
	DB	011H
	DB	041H
	DB	04fH
	DB	067H
	DB	0dcH
	DB	0eaH
	DB	097H
	DB	0f2H
	DB	0cfH
	DB	0ceH
	DB	0f0H
	DB	0b4H
	DB	0e6H
	DB	073H
	DB	096H
	DB	0acH
	DB	074H
	DB	022H
	DB	0e7H
	DB	0adH
	DB	035H
	DB	085H
	DB	0e2H
	DB	0f9H
	DB	037H
	DB	0e8H
	DB	01cH
	DB	075H
	DB	0dfH
	DB	06eH
	DB	047H
	DB	0f1H
	DB	01aH
	DB	071H
	DB	01dH
	DB	029H
	DB	0c5H
	DB	089H
	DB	06fH
	DB	0b7H
	DB	062H
	DB	0eH
	DB	0aaH
	DB	018H
	DB	0beH
	DB	01bH
	DB	0fcH
	DB	056H
	DB	03eH
	DB	04bH
	DB	0c6H
	DB	0d2H
	DB	079H
	DB	020H
	DB	09aH
	DB	0dbH
	DB	0c0H
	DB	0feH
	DB	078H
	DB	0cdH
	DB	05aH
	DB	0f4H
	DB	01fH
	DB	0ddH
	DB	0a8H
	DB	033H
	DB	088H
	DB	07H
	DB	0c7H
	DB	031H
	DB	0b1H
	DB	012H
	DB	010H
	DB	059H
	DB	027H
	DB	080H
	DB	0ecH
	DB	05fH
	DB	060H
	DB	051H
	DB	07fH
	DB	0a9H
	DB	019H
	DB	0b5H
	DB	04aH
	DB	0dH
	DB	02dH
	DB	0e5H
	DB	07aH
	DB	09fH
	DB	093H
	DB	0c9H
	DB	09cH
	DB	0efH
	DB	0a0H
	DB	0e0H
	DB	03bH
	DB	04dH
	DB	0aeH
	DB	02aH
	DB	0f5H
	DB	0b0H
	DB	0c8H
	DB	0ebH
	DB	0bbH
	DB	03cH
	DB	083H
	DB	053H
	DB	099H
	DB	061H
	DB	017H
	DB	02bH
	DB	04H
	DB	07eH
	DB	0baH
	DB	077H
	DB	0d6H
	DB	026H
	DB	0e1H
	DB	069H
	DB	014H
	DB	063H
	DB	055H
	DB	021H
	DB	0cH
	DB	07dH
?U1@@3PAY03EA DB 00H					; U1
	DB	00H
	DB	00H
	DB	00H
	DB	0eH
	DB	09H
	DB	0dH
	DB	0bH
	DB	01cH
	DB	012H
	DB	01aH
	DB	016H
	DB	012H
	DB	01bH
	DB	017H
	DB	01dH
	DB	038H
	DB	024H
	DB	034H
	DB	02cH
	DB	036H
	DB	02dH
	DB	039H
	DB	027H
	DB	024H
	DB	036H
	DB	02eH
	DB	03aH
	DB	02aH
	DB	03fH
	DB	023H
	DB	031H
	DB	070H
	DB	048H
	DB	068H
	DB	058H
	DB	07eH
	DB	041H
	DB	065H
	DB	053H
	DB	06cH
	DB	05aH
	DB	072H
	DB	04eH
	DB	062H
	DB	053H
	DB	07fH
	DB	045H
	DB	048H
	DB	06cH
	DB	05cH
	DB	074H
	DB	046H
	DB	065H
	DB	051H
	DB	07fH
	DB	054H
	DB	07eH
	DB	046H
	DB	062H
	DB	05aH
	DB	077H
	DB	04bH
	DB	069H
	DB	0e0H
	DB	090H
	DB	0d0H
	DB	0b0H
	DB	0eeH
	DB	099H
	DB	0ddH
	DB	0bbH
	DB	0fcH
	DB	082H
	DB	0caH
	DB	0a6H
	DB	0f2H
	DB	08bH
	DB	0c7H
	DB	0adH
	DB	0d8H
	DB	0b4H
	DB	0e4H
	DB	09cH
	DB	0d6H
	DB	0bdH
	DB	0e9H
	DB	097H
	DB	0c4H
	DB	0a6H
	DB	0feH
	DB	08aH
	DB	0caH
	DB	0afH
	DB	0f3H
	DB	081H
	DB	090H
	DB	0d8H
	DB	0b8H
	DB	0e8H
	DB	09eH
	DB	0d1H
	DB	0b5H
	DB	0e3H
	DB	08cH
	DB	0caH
	DB	0a2H
	DB	0feH
	DB	082H
	DB	0c3H
	DB	0afH
	DB	0f5H
	DB	0a8H
	DB	0fcH
	DB	08cH
	DB	0c4H
	DB	0a6H
	DB	0f5H
	DB	081H
	DB	0cfH
	DB	0b4H
	DB	0eeH
	DB	096H
	DB	0d2H
	DB	0baH
	DB	0e7H
	DB	09bH
	DB	0d9H
	DB	0dbH
	DB	03bH
	DB	0bbH
	DB	07bH
	DB	0d5H
	DB	032H
	DB	0b6H
	DB	070H
	DB	0c7H
	DB	029H
	DB	0a1H
	DB	06dH
	DB	0c9H
	DB	020H
	DB	0acH
	DB	066H
	DB	0e3H
	DB	01fH
	DB	08fH
	DB	057H
	DB	0edH
	DB	016H
	DB	082H
	DB	05cH
	DB	0ffH
	DB	0dH
	DB	095H
	DB	041H
	DB	0f1H
	DB	04H
	DB	098H
	DB	04aH
	DB	0abH
	DB	073H
	DB	0d3H
	DB	023H
	DB	0a5H
	DB	07aH
	DB	0deH
	DB	028H
	DB	0b7H
	DB	061H
	DB	0c9H
	DB	035H
	DB	0b9H
	DB	068H
	DB	0c4H
	DB	03eH
	DB	093H
	DB	057H
	DB	0e7H
	DB	0fH
	DB	09dH
	DB	05eH
	DB	0eaH
	DB	04H
	DB	08fH
	DB	045H
	DB	0fdH
	DB	019H
	DB	081H
	DB	04cH
	DB	0f0H
	DB	012H
	DB	03bH
	DB	0abH
	DB	06bH
	DB	0cbH
	DB	035H
	DB	0a2H
	DB	066H
	DB	0c0H
	DB	027H
	DB	0b9H
	DB	071H
	DB	0ddH
	DB	029H
	DB	0b0H
	DB	07cH
	DB	0d6H
	DB	03H
	DB	08fH
	DB	05fH
	DB	0e7H
	DB	0dH
	DB	086H
	DB	052H
	DB	0ecH
	DB	01fH
	DB	09dH
	DB	045H
	DB	0f1H
	DB	011H
	DB	094H
	DB	048H
	DB	0faH
	DB	04bH
	DB	0e3H
	DB	03H
	DB	093H
	DB	045H
	DB	0eaH
	DB	0eH
	DB	098H
	DB	057H
	DB	0f1H
	DB	019H
	DB	085H
	DB	059H
	DB	0f8H
	DB	014H
	DB	08eH
	DB	073H
	DB	0c7H
	DB	037H
	DB	0bfH
	DB	07dH
	DB	0ceH
	DB	03aH
	DB	0b4H
	DB	06fH
	DB	0d5H
	DB	02dH
	DB	0a9H
	DB	061H
	DB	0dcH
	DB	020H
	DB	0a2H
	DB	0adH
	DB	076H
	DB	06dH
	DB	0f6H
	DB	0a3H
	DB	07fH
	DB	060H
	DB	0fdH
	DB	0b1H
	DB	064H
	DB	077H
	DB	0e0H
	DB	0bfH
	DB	06dH
	DB	07aH
	DB	0ebH
	DB	095H
	DB	052H
	DB	059H
	DB	0daH
	DB	09bH
	DB	05bH
	DB	054H
	DB	0d1H
	DB	089H
	DB	040H
	DB	043H
	DB	0ccH
	DB	087H
	DB	049H
	DB	04eH
	DB	0c7H
	DB	0ddH
	DB	03eH
	DB	05H
	DB	0aeH
	DB	0d3H
	DB	037H
	DB	08H
	DB	0a5H
	DB	0c1H
	DB	02cH
	DB	01fH
	DB	0b8H
	DB	0cfH
	DB	025H
	DB	012H
	DB	0b3H
	DB	0e5H
	DB	01aH
	DB	031H
	DB	082H
	DB	0ebH
	DB	013H
	DB	03cH
	DB	089H
	DB	0f9H
	DB	08H
	DB	02bH
	DB	094H
	DB	0f7H
	DB	01H
	DB	026H
	DB	09fH
	DB	04dH
	DB	0e6H
	DB	0bdH
	DB	046H
	DB	043H
	DB	0efH
	DB	0b0H
	DB	04dH
	DB	051H
	DB	0f4H
	DB	0a7H
	DB	050H
	DB	05fH
	DB	0fdH
	DB	0aaH
	DB	05bH
	DB	075H
	DB	0c2H
	DB	089H
	DB	06aH
	DB	07bH
	DB	0cbH
	DB	084H
	DB	061H
	DB	069H
	DB	0d0H
	DB	093H
	DB	07cH
	DB	067H
	DB	0d9H
	DB	09eH
	DB	077H
	DB	03dH
	DB	0aeH
	DB	0d5H
	DB	01eH
	DB	033H
	DB	0a7H
	DB	0d8H
	DB	015H
	DB	021H
	DB	0bcH
	DB	0cfH
	DB	08H
	DB	02fH
	DB	0b5H
	DB	0c2H
	DB	03H
	DB	05H
	DB	08aH
	DB	0e1H
	DB	032H
	DB	0bH
	DB	083H
	DB	0ecH
	DB	039H
	DB	019H
	DB	098H
	DB	0fbH
	DB	024H
	DB	017H
	DB	091H
	DB	0f6H
	DB	02fH
	DB	076H
	DB	04dH
	DB	0d6H
	DB	08dH
	DB	078H
	DB	044H
	DB	0dbH
	DB	086H
	DB	06aH
	DB	05fH
	DB	0ccH
	DB	09bH
	DB	064H
	DB	056H
	DB	0c1H
	DB	090H
	DB	04eH
	DB	069H
	DB	0e2H
	DB	0a1H
	DB	040H
	DB	060H
	DB	0efH
	DB	0aaH
	DB	052H
	DB	07bH
	DB	0f8H
	DB	0b7H
	DB	05cH
	DB	072H
	DB	0f5H
	DB	0bcH
	DB	06H
	DB	05H
	DB	0beH
	DB	0d5H
	DB	08H
	DB	0cH
	DB	0b3H
	DB	0deH
	DB	01aH
	DB	017H
	DB	0a4H
	DB	0c3H
	DB	014H
	DB	01eH
	DB	0a9H
	DB	0c8H
	DB	03eH
	DB	021H
	DB	08aH
	DB	0f9H
	DB	030H
	DB	028H
	DB	087H
	DB	0f2H
	DB	022H
	DB	033H
	DB	090H
	DB	0efH
	DB	02cH
	DB	03aH
	DB	09dH
	DB	0e4H
	DB	096H
	DB	0ddH
	DB	06H
	DB	03dH
	DB	098H
	DB	0d4H
	DB	0bH
	DB	036H
	DB	08aH
	DB	0cfH
	DB	01cH
	DB	02bH
	DB	084H
	DB	0c6H
	DB	011H
	DB	020H
	DB	0aeH
	DB	0f9H
	DB	032H
	DB	011H
	DB	0a0H
	DB	0f0H
	DB	03fH
	DB	01aH
	DB	0b2H
	DB	0ebH
	DB	028H
	DB	07H
	DB	0bcH
	DB	0e2H
	DB	025H
	DB	0cH
	DB	0e6H
	DB	095H
	DB	06eH
	DB	065H
	DB	0e8H
	DB	09cH
	DB	063H
	DB	06eH
	DB	0faH
	DB	087H
	DB	074H
	DB	073H
	DB	0f4H
	DB	08eH
	DB	079H
	DB	078H
	DB	0deH
	DB	0b1H
	DB	05aH
	DB	049H
	DB	0d0H
	DB	0b8H
	DB	057H
	DB	042H
	DB	0c2H
	DB	0a3H
	DB	040H
	DB	05fH
	DB	0ccH
	DB	0aaH
	DB	04dH
	DB	054H
	DB	041H
	DB	0ecH
	DB	0daH
	DB	0f7H
	DB	04fH
	DB	0e5H
	DB	0d7H
	DB	0fcH
	DB	05dH
	DB	0feH
	DB	0c0H
	DB	0e1H
	DB	053H
	DB	0f7H
	DB	0cdH
	DB	0eaH
	DB	079H
	DB	0c8H
	DB	0eeH
	DB	0dbH
	DB	077H
	DB	0c1H
	DB	0e3H
	DB	0d0H
	DB	065H
	DB	0daH
	DB	0f4H
	DB	0cdH
	DB	06bH
	DB	0d3H
	DB	0f9H
	DB	0c6H
	DB	031H
	DB	0a4H
	DB	0b2H
	DB	0afH
	DB	03fH
	DB	0adH
	DB	0bfH
	DB	0a4H
	DB	02dH
	DB	0b6H
	DB	0a8H
	DB	0b9H
	DB	023H
	DB	0bfH
	DB	0a5H
	DB	0b2H
	DB	09H
	DB	080H
	DB	086H
	DB	083H
	DB	07H
	DB	089H
	DB	08bH
	DB	088H
	DB	015H
	DB	092H
	DB	09cH
	DB	095H
	DB	01bH
	DB	09bH
	DB	091H
	DB	09eH
	DB	0a1H
	DB	07cH
	DB	0aH
	DB	047H
	DB	0afH
	DB	075H
	DB	07H
	DB	04cH
	DB	0bdH
	DB	06eH
	DB	010H
	DB	051H
	DB	0b3H
	DB	067H
	DB	01dH
	DB	05aH
	DB	099H
	DB	058H
	DB	03eH
	DB	06bH
	DB	097H
	DB	051H
	DB	033H
	DB	060H
	DB	085H
	DB	04aH
	DB	024H
	DB	07dH
	DB	08bH
	DB	043H
	DB	029H
	DB	076H
	DB	0d1H
	DB	034H
	DB	062H
	DB	01fH
	DB	0dfH
	DB	03dH
	DB	06fH
	DB	014H
	DB	0cdH
	DB	026H
	DB	078H
	DB	09H
	DB	0c3H
	DB	02fH
	DB	075H
	DB	02H
	DB	0e9H
	DB	010H
	DB	056H
	DB	033H
	DB	0e7H
	DB	019H
	DB	05bH
	DB	038H
	DB	0f5H
	DB	02H
	DB	04cH
	DB	025H
	DB	0fbH
	DB	0bH
	DB	041H
	DB	02eH
	DB	09aH
	DB	0d7H
	DB	061H
	DB	08cH
	DB	094H
	DB	0deH
	DB	06cH
	DB	087H
	DB	086H
	DB	0c5H
	DB	07bH
	DB	09aH
	DB	088H
	DB	0ccH
	DB	076H
	DB	091H
	DB	0a2H
	DB	0f3H
	DB	055H
	DB	0a0H
	DB	0acH
	DB	0faH
	DB	058H
	DB	0abH
	DB	0beH
	DB	0e1H
	DB	04fH
	DB	0b6H
	DB	0b0H
	DB	0e8H
	DB	042H
	DB	0bdH
	DB	0eaH
	DB	09fH
	DB	09H
	DB	0d4H
	DB	0e4H
	DB	096H
	DB	04H
	DB	0dfH
	DB	0f6H
	DB	08dH
	DB	013H
	DB	0c2H
	DB	0f8H
	DB	084H
	DB	01eH
	DB	0c9H
	DB	0d2H
	DB	0bbH
	DB	03dH
	DB	0f8H
	DB	0dcH
	DB	0b2H
	DB	030H
	DB	0f3H
	DB	0ceH
	DB	0a9H
	DB	027H
	DB	0eeH
	DB	0c0H
	DB	0a0H
	DB	02aH
	DB	0e5H
	DB	07aH
	DB	047H
	DB	0b1H
	DB	03cH
	DB	074H
	DB	04eH
	DB	0bcH
	DB	037H
	DB	066H
	DB	055H
	DB	0abH
	DB	02aH
	DB	068H
	DB	05cH
	DB	0a6H
	DB	021H
	DB	042H
	DB	063H
	DB	085H
	DB	010H
	DB	04cH
	DB	06aH
	DB	088H
	DB	01bH
	DB	05eH
	DB	071H
	DB	09fH
	DB	06H
	DB	050H
	DB	078H
	DB	092H
	DB	0dH
	DB	0aH
	DB	0fH
	DB	0d9H
	DB	064H
	DB	04H
	DB	06H
	DB	0d4H
	DB	06fH
	DB	016H
	DB	01dH
	DB	0c3H
	DB	072H
	DB	018H
	DB	014H
	DB	0ceH
	DB	079H
	DB	032H
	DB	02bH
	DB	0edH
	DB	048H
	DB	03cH
	DB	022H
	DB	0e0H
	DB	043H
	DB	02eH
	DB	039H
	DB	0f7H
	DB	05eH
	DB	020H
	DB	030H
	DB	0faH
	DB	055H
	DB	0ecH
	DB	09aH
	DB	0b7H
	DB	01H
	DB	0e2H
	DB	093H
	DB	0baH
	DB	0aH
	DB	0f0H
	DB	088H
	DB	0adH
	DB	017H
	DB	0feH
	DB	081H
	DB	0a0H
	DB	01cH
	DB	0d4H
	DB	0beH
	DB	083H
	DB	02dH
	DB	0daH
	DB	0b7H
	DB	08eH
	DB	026H
	DB	0c8H
	DB	0acH
	DB	099H
	DB	03bH
	DB	0c6H
	DB	0a5H
	DB	094H
	DB	030H
	DB	09cH
	DB	0d2H
	DB	0dfH
	DB	059H
	DB	092H
	DB	0dbH
	DB	0d2H
	DB	052H
	DB	080H
	DB	0c0H
	DB	0c5H
	DB	04fH
	DB	08eH
	DB	0c9H
	DB	0c8H
	DB	044H
	DB	0a4H
	DB	0f6H
	DB	0ebH
	DB	075H
	DB	0aaH
	DB	0ffH
	DB	0e6H
	DB	07eH
	DB	0b8H
	DB	0e4H
	DB	0f1H
	DB	063H
	DB	0b6H
	DB	0edH
	DB	0fcH
	DB	068H
	DB	0cH
	DB	0aH
	DB	067H
	DB	0b1H
	DB	02H
	DB	03H
	DB	06aH
	DB	0baH
	DB	010H
	DB	018H
	DB	07dH
	DB	0a7H
	DB	01eH
	DB	011H
	DB	070H
	DB	0acH
	DB	034H
	DB	02eH
	DB	053H
	DB	09dH
	DB	03aH
	DB	027H
	DB	05eH
	DB	096H
	DB	028H
	DB	03cH
	DB	049H
	DB	08bH
	DB	026H
	DB	035H
	DB	044H
	DB	080H
	DB	07cH
	DB	042H
	DB	0fH
	DB	0e9H
	DB	072H
	DB	04bH
	DB	02H
	DB	0e2H
	DB	060H
	DB	050H
	DB	015H
	DB	0ffH
	DB	06eH
	DB	059H
	DB	018H
	DB	0f4H
	DB	044H
	DB	066H
	DB	03bH
	DB	0c5H
	DB	04aH
	DB	06fH
	DB	036H
	DB	0ceH
	DB	058H
	DB	074H
	DB	021H
	DB	0d3H
	DB	056H
	DB	07dH
	DB	02cH
	DB	0d8H
	DB	037H
	DB	0a1H
	DB	0cH
	DB	07aH
	DB	039H
	DB	0a8H
	DB	01H
	DB	071H
	DB	02bH
	DB	0b3H
	DB	016H
	DB	06cH
	DB	025H
	DB	0baH
	DB	01bH
	DB	067H
	DB	0fH
	DB	085H
	DB	038H
	DB	056H
	DB	01H
	DB	08cH
	DB	035H
	DB	05dH
	DB	013H
	DB	097H
	DB	022H
	DB	040H
	DB	01dH
	DB	09eH
	DB	02fH
	DB	04bH
	DB	047H
	DB	0e9H
	DB	064H
	DB	022H
	DB	049H
	DB	0e0H
	DB	069H
	DB	029H
	DB	05bH
	DB	0fbH
	DB	07eH
	DB	034H
	DB	055H
	DB	0f2H
	DB	073H
	DB	03fH
	DB	07fH
	DB	0cdH
	DB	050H
	DB	0eH
	DB	071H
	DB	0c4H
	DB	05dH
	DB	05H
	DB	063H
	DB	0dfH
	DB	04aH
	DB	018H
	DB	06dH
	DB	0d6H
	DB	047H
	DB	013H
	DB	0d7H
	DB	031H
	DB	0dcH
	DB	0caH
	DB	0d9H
	DB	038H
	DB	0d1H
	DB	0c1H
	DB	0cbH
	DB	023H
	DB	0c6H
	DB	0dcH
	DB	0c5H
	DB	02aH
	DB	0cbH
	DB	0d7H
	DB	0efH
	DB	015H
	DB	0e8H
	DB	0e6H
	DB	0e1H
	DB	01cH
	DB	0e5H
	DB	0edH
	DB	0f3H
	DB	07H
	DB	0f2H
	DB	0f0H
	DB	0fdH
	DB	0eH
	DB	0ffH
	DB	0fbH
	DB	0a7H
	DB	079H
	DB	0b4H
	DB	092H
	DB	0a9H
	DB	070H
	DB	0b9H
	DB	099H
	DB	0bbH
	DB	06bH
	DB	0aeH
	DB	084H
	DB	0b5H
	DB	062H
	DB	0a3H
	DB	08fH
	DB	09fH
	DB	05dH
	DB	080H
	DB	0beH
	DB	091H
	DB	054H
	DB	08dH
	DB	0b5H
	DB	083H
	DB	04fH
	DB	09aH
	DB	0a8H
	DB	08dH
	DB	046H
	DB	097H
	DB	0a3H
?U2@@3PAY03EA DB 00H					; U2
	DB	00H
	DB	00H
	DB	00H
	DB	0bH
	DB	0eH
	DB	09H
	DB	0dH
	DB	016H
	DB	01cH
	DB	012H
	DB	01aH
	DB	01dH
	DB	012H
	DB	01bH
	DB	017H
	DB	02cH
	DB	038H
	DB	024H
	DB	034H
	DB	027H
	DB	036H
	DB	02dH
	DB	039H
	DB	03aH
	DB	024H
	DB	036H
	DB	02eH
	DB	031H
	DB	02aH
	DB	03fH
	DB	023H
	DB	058H
	DB	070H
	DB	048H
	DB	068H
	DB	053H
	DB	07eH
	DB	041H
	DB	065H
	DB	04eH
	DB	06cH
	DB	05aH
	DB	072H
	DB	045H
	DB	062H
	DB	053H
	DB	07fH
	DB	074H
	DB	048H
	DB	06cH
	DB	05cH
	DB	07fH
	DB	046H
	DB	065H
	DB	051H
	DB	062H
	DB	054H
	DB	07eH
	DB	046H
	DB	069H
	DB	05aH
	DB	077H
	DB	04bH
	DB	0b0H
	DB	0e0H
	DB	090H
	DB	0d0H
	DB	0bbH
	DB	0eeH
	DB	099H
	DB	0ddH
	DB	0a6H
	DB	0fcH
	DB	082H
	DB	0caH
	DB	0adH
	DB	0f2H
	DB	08bH
	DB	0c7H
	DB	09cH
	DB	0d8H
	DB	0b4H
	DB	0e4H
	DB	097H
	DB	0d6H
	DB	0bdH
	DB	0e9H
	DB	08aH
	DB	0c4H
	DB	0a6H
	DB	0feH
	DB	081H
	DB	0caH
	DB	0afH
	DB	0f3H
	DB	0e8H
	DB	090H
	DB	0d8H
	DB	0b8H
	DB	0e3H
	DB	09eH
	DB	0d1H
	DB	0b5H
	DB	0feH
	DB	08cH
	DB	0caH
	DB	0a2H
	DB	0f5H
	DB	082H
	DB	0c3H
	DB	0afH
	DB	0c4H
	DB	0a8H
	DB	0fcH
	DB	08cH
	DB	0cfH
	DB	0a6H
	DB	0f5H
	DB	081H
	DB	0d2H
	DB	0b4H
	DB	0eeH
	DB	096H
	DB	0d9H
	DB	0baH
	DB	0e7H
	DB	09bH
	DB	07bH
	DB	0dbH
	DB	03bH
	DB	0bbH
	DB	070H
	DB	0d5H
	DB	032H
	DB	0b6H
	DB	06dH
	DB	0c7H
	DB	029H
	DB	0a1H
	DB	066H
	DB	0c9H
	DB	020H
	DB	0acH
	DB	057H
	DB	0e3H
	DB	01fH
	DB	08fH
	DB	05cH
	DB	0edH
	DB	016H
	DB	082H
	DB	041H
	DB	0ffH
	DB	0dH
	DB	095H
	DB	04aH
	DB	0f1H
	DB	04H
	DB	098H
	DB	023H
	DB	0abH
	DB	073H
	DB	0d3H
	DB	028H
	DB	0a5H
	DB	07aH
	DB	0deH
	DB	035H
	DB	0b7H
	DB	061H
	DB	0c9H
	DB	03eH
	DB	0b9H
	DB	068H
	DB	0c4H
	DB	0fH
	DB	093H
	DB	057H
	DB	0e7H
	DB	04H
	DB	09dH
	DB	05eH
	DB	0eaH
	DB	019H
	DB	08fH
	DB	045H
	DB	0fdH
	DB	012H
	DB	081H
	DB	04cH
	DB	0f0H
	DB	0cbH
	DB	03bH
	DB	0abH
	DB	06bH
	DB	0c0H
	DB	035H
	DB	0a2H
	DB	066H
	DB	0ddH
	DB	027H
	DB	0b9H
	DB	071H
	DB	0d6H
	DB	029H
	DB	0b0H
	DB	07cH
	DB	0e7H
	DB	03H
	DB	08fH
	DB	05fH
	DB	0ecH
	DB	0dH
	DB	086H
	DB	052H
	DB	0f1H
	DB	01fH
	DB	09dH
	DB	045H
	DB	0faH
	DB	011H
	DB	094H
	DB	048H
	DB	093H
	DB	04bH
	DB	0e3H
	DB	03H
	DB	098H
	DB	045H
	DB	0eaH
	DB	0eH
	DB	085H
	DB	057H
	DB	0f1H
	DB	019H
	DB	08eH
	DB	059H
	DB	0f8H
	DB	014H
	DB	0bfH
	DB	073H
	DB	0c7H
	DB	037H
	DB	0b4H
	DB	07dH
	DB	0ceH
	DB	03aH
	DB	0a9H
	DB	06fH
	DB	0d5H
	DB	02dH
	DB	0a2H
	DB	061H
	DB	0dcH
	DB	020H
	DB	0f6H
	DB	0adH
	DB	076H
	DB	06dH
	DB	0fdH
	DB	0a3H
	DB	07fH
	DB	060H
	DB	0e0H
	DB	0b1H
	DB	064H
	DB	077H
	DB	0ebH
	DB	0bfH
	DB	06dH
	DB	07aH
	DB	0daH
	DB	095H
	DB	052H
	DB	059H
	DB	0d1H
	DB	09bH
	DB	05bH
	DB	054H
	DB	0ccH
	DB	089H
	DB	040H
	DB	043H
	DB	0c7H
	DB	087H
	DB	049H
	DB	04eH
	DB	0aeH
	DB	0ddH
	DB	03eH
	DB	05H
	DB	0a5H
	DB	0d3H
	DB	037H
	DB	08H
	DB	0b8H
	DB	0c1H
	DB	02cH
	DB	01fH
	DB	0b3H
	DB	0cfH
	DB	025H
	DB	012H
	DB	082H
	DB	0e5H
	DB	01aH
	DB	031H
	DB	089H
	DB	0ebH
	DB	013H
	DB	03cH
	DB	094H
	DB	0f9H
	DB	08H
	DB	02bH
	DB	09fH
	DB	0f7H
	DB	01H
	DB	026H
	DB	046H
	DB	04dH
	DB	0e6H
	DB	0bdH
	DB	04dH
	DB	043H
	DB	0efH
	DB	0b0H
	DB	050H
	DB	051H
	DB	0f4H
	DB	0a7H
	DB	05bH
	DB	05fH
	DB	0fdH
	DB	0aaH
	DB	06aH
	DB	075H
	DB	0c2H
	DB	089H
	DB	061H
	DB	07bH
	DB	0cbH
	DB	084H
	DB	07cH
	DB	069H
	DB	0d0H
	DB	093H
	DB	077H
	DB	067H
	DB	0d9H
	DB	09eH
	DB	01eH
	DB	03dH
	DB	0aeH
	DB	0d5H
	DB	015H
	DB	033H
	DB	0a7H
	DB	0d8H
	DB	08H
	DB	021H
	DB	0bcH
	DB	0cfH
	DB	03H
	DB	02fH
	DB	0b5H
	DB	0c2H
	DB	032H
	DB	05H
	DB	08aH
	DB	0e1H
	DB	039H
	DB	0bH
	DB	083H
	DB	0ecH
	DB	024H
	DB	019H
	DB	098H
	DB	0fbH
	DB	02fH
	DB	017H
	DB	091H
	DB	0f6H
	DB	08dH
	DB	076H
	DB	04dH
	DB	0d6H
	DB	086H
	DB	078H
	DB	044H
	DB	0dbH
	DB	09bH
	DB	06aH
	DB	05fH
	DB	0ccH
	DB	090H
	DB	064H
	DB	056H
	DB	0c1H
	DB	0a1H
	DB	04eH
	DB	069H
	DB	0e2H
	DB	0aaH
	DB	040H
	DB	060H
	DB	0efH
	DB	0b7H
	DB	052H
	DB	07bH
	DB	0f8H
	DB	0bcH
	DB	05cH
	DB	072H
	DB	0f5H
	DB	0d5H
	DB	06H
	DB	05H
	DB	0beH
	DB	0deH
	DB	08H
	DB	0cH
	DB	0b3H
	DB	0c3H
	DB	01aH
	DB	017H
	DB	0a4H
	DB	0c8H
	DB	014H
	DB	01eH
	DB	0a9H
	DB	0f9H
	DB	03eH
	DB	021H
	DB	08aH
	DB	0f2H
	DB	030H
	DB	028H
	DB	087H
	DB	0efH
	DB	022H
	DB	033H
	DB	090H
	DB	0e4H
	DB	02cH
	DB	03aH
	DB	09dH
	DB	03dH
	DB	096H
	DB	0ddH
	DB	06H
	DB	036H
	DB	098H
	DB	0d4H
	DB	0bH
	DB	02bH
	DB	08aH
	DB	0cfH
	DB	01cH
	DB	020H
	DB	084H
	DB	0c6H
	DB	011H
	DB	011H
	DB	0aeH
	DB	0f9H
	DB	032H
	DB	01aH
	DB	0a0H
	DB	0f0H
	DB	03fH
	DB	07H
	DB	0b2H
	DB	0ebH
	DB	028H
	DB	0cH
	DB	0bcH
	DB	0e2H
	DB	025H
	DB	065H
	DB	0e6H
	DB	095H
	DB	06eH
	DB	06eH
	DB	0e8H
	DB	09cH
	DB	063H
	DB	073H
	DB	0faH
	DB	087H
	DB	074H
	DB	078H
	DB	0f4H
	DB	08eH
	DB	079H
	DB	049H
	DB	0deH
	DB	0b1H
	DB	05aH
	DB	042H
	DB	0d0H
	DB	0b8H
	DB	057H
	DB	05fH
	DB	0c2H
	DB	0a3H
	DB	040H
	DB	054H
	DB	0ccH
	DB	0aaH
	DB	04dH
	DB	0f7H
	DB	041H
	DB	0ecH
	DB	0daH
	DB	0fcH
	DB	04fH
	DB	0e5H
	DB	0d7H
	DB	0e1H
	DB	05dH
	DB	0feH
	DB	0c0H
	DB	0eaH
	DB	053H
	DB	0f7H
	DB	0cdH
	DB	0dbH
	DB	079H
	DB	0c8H
	DB	0eeH
	DB	0d0H
	DB	077H
	DB	0c1H
	DB	0e3H
	DB	0cdH
	DB	065H
	DB	0daH
	DB	0f4H
	DB	0c6H
	DB	06bH
	DB	0d3H
	DB	0f9H
	DB	0afH
	DB	031H
	DB	0a4H
	DB	0b2H
	DB	0a4H
	DB	03fH
	DB	0adH
	DB	0bfH
	DB	0b9H
	DB	02dH
	DB	0b6H
	DB	0a8H
	DB	0b2H
	DB	023H
	DB	0bfH
	DB	0a5H
	DB	083H
	DB	09H
	DB	080H
	DB	086H
	DB	088H
	DB	07H
	DB	089H
	DB	08bH
	DB	095H
	DB	015H
	DB	092H
	DB	09cH
	DB	09eH
	DB	01bH
	DB	09bH
	DB	091H
	DB	047H
	DB	0a1H
	DB	07cH
	DB	0aH
	DB	04cH
	DB	0afH
	DB	075H
	DB	07H
	DB	051H
	DB	0bdH
	DB	06eH
	DB	010H
	DB	05aH
	DB	0b3H
	DB	067H
	DB	01dH
	DB	06bH
	DB	099H
	DB	058H
	DB	03eH
	DB	060H
	DB	097H
	DB	051H
	DB	033H
	DB	07dH
	DB	085H
	DB	04aH
	DB	024H
	DB	076H
	DB	08bH
	DB	043H
	DB	029H
	DB	01fH
	DB	0d1H
	DB	034H
	DB	062H
	DB	014H
	DB	0dfH
	DB	03dH
	DB	06fH
	DB	09H
	DB	0cdH
	DB	026H
	DB	078H
	DB	02H
	DB	0c3H
	DB	02fH
	DB	075H
	DB	033H
	DB	0e9H
	DB	010H
	DB	056H
	DB	038H
	DB	0e7H
	DB	019H
	DB	05bH
	DB	025H
	DB	0f5H
	DB	02H
	DB	04cH
	DB	02eH
	DB	0fbH
	DB	0bH
	DB	041H
	DB	08cH
	DB	09aH
	DB	0d7H
	DB	061H
	DB	087H
	DB	094H
	DB	0deH
	DB	06cH
	DB	09aH
	DB	086H
	DB	0c5H
	DB	07bH
	DB	091H
	DB	088H
	DB	0ccH
	DB	076H
	DB	0a0H
	DB	0a2H
	DB	0f3H
	DB	055H
	DB	0abH
	DB	0acH
	DB	0faH
	DB	058H
	DB	0b6H
	DB	0beH
	DB	0e1H
	DB	04fH
	DB	0bdH
	DB	0b0H
	DB	0e8H
	DB	042H
	DB	0d4H
	DB	0eaH
	DB	09fH
	DB	09H
	DB	0dfH
	DB	0e4H
	DB	096H
	DB	04H
	DB	0c2H
	DB	0f6H
	DB	08dH
	DB	013H
	DB	0c9H
	DB	0f8H
	DB	084H
	DB	01eH
	DB	0f8H
	DB	0d2H
	DB	0bbH
	DB	03dH
	DB	0f3H
	DB	0dcH
	DB	0b2H
	DB	030H
	DB	0eeH
	DB	0ceH
	DB	0a9H
	DB	027H
	DB	0e5H
	DB	0c0H
	DB	0a0H
	DB	02aH
	DB	03cH
	DB	07aH
	DB	047H
	DB	0b1H
	DB	037H
	DB	074H
	DB	04eH
	DB	0bcH
	DB	02aH
	DB	066H
	DB	055H
	DB	0abH
	DB	021H
	DB	068H
	DB	05cH
	DB	0a6H
	DB	010H
	DB	042H
	DB	063H
	DB	085H
	DB	01bH
	DB	04cH
	DB	06aH
	DB	088H
	DB	06H
	DB	05eH
	DB	071H
	DB	09fH
	DB	0dH
	DB	050H
	DB	078H
	DB	092H
	DB	064H
	DB	0aH
	DB	0fH
	DB	0d9H
	DB	06fH
	DB	04H
	DB	06H
	DB	0d4H
	DB	072H
	DB	016H
	DB	01dH
	DB	0c3H
	DB	079H
	DB	018H
	DB	014H
	DB	0ceH
	DB	048H
	DB	032H
	DB	02bH
	DB	0edH
	DB	043H
	DB	03cH
	DB	022H
	DB	0e0H
	DB	05eH
	DB	02eH
	DB	039H
	DB	0f7H
	DB	055H
	DB	020H
	DB	030H
	DB	0faH
	DB	01H
	DB	0ecH
	DB	09aH
	DB	0b7H
	DB	0aH
	DB	0e2H
	DB	093H
	DB	0baH
	DB	017H
	DB	0f0H
	DB	088H
	DB	0adH
	DB	01cH
	DB	0feH
	DB	081H
	DB	0a0H
	DB	02dH
	DB	0d4H
	DB	0beH
	DB	083H
	DB	026H
	DB	0daH
	DB	0b7H
	DB	08eH
	DB	03bH
	DB	0c8H
	DB	0acH
	DB	099H
	DB	030H
	DB	0c6H
	DB	0a5H
	DB	094H
	DB	059H
	DB	09cH
	DB	0d2H
	DB	0dfH
	DB	052H
	DB	092H
	DB	0dbH
	DB	0d2H
	DB	04fH
	DB	080H
	DB	0c0H
	DB	0c5H
	DB	044H
	DB	08eH
	DB	0c9H
	DB	0c8H
	DB	075H
	DB	0a4H
	DB	0f6H
	DB	0ebH
	DB	07eH
	DB	0aaH
	DB	0ffH
	DB	0e6H
	DB	063H
	DB	0b8H
	DB	0e4H
	DB	0f1H
	DB	068H
	DB	0b6H
	DB	0edH
	DB	0fcH
	DB	0b1H
	DB	0cH
	DB	0aH
	DB	067H
	DB	0baH
	DB	02H
	DB	03H
	DB	06aH
	DB	0a7H
	DB	010H
	DB	018H
	DB	07dH
	DB	0acH
	DB	01eH
	DB	011H
	DB	070H
	DB	09dH
	DB	034H
	DB	02eH
	DB	053H
	DB	096H
	DB	03aH
	DB	027H
	DB	05eH
	DB	08bH
	DB	028H
	DB	03cH
	DB	049H
	DB	080H
	DB	026H
	DB	035H
	DB	044H
	DB	0e9H
	DB	07cH
	DB	042H
	DB	0fH
	DB	0e2H
	DB	072H
	DB	04bH
	DB	02H
	DB	0ffH
	DB	060H
	DB	050H
	DB	015H
	DB	0f4H
	DB	06eH
	DB	059H
	DB	018H
	DB	0c5H
	DB	044H
	DB	066H
	DB	03bH
	DB	0ceH
	DB	04aH
	DB	06fH
	DB	036H
	DB	0d3H
	DB	058H
	DB	074H
	DB	021H
	DB	0d8H
	DB	056H
	DB	07dH
	DB	02cH
	DB	07aH
	DB	037H
	DB	0a1H
	DB	0cH
	DB	071H
	DB	039H
	DB	0a8H
	DB	01H
	DB	06cH
	DB	02bH
	DB	0b3H
	DB	016H
	DB	067H
	DB	025H
	DB	0baH
	DB	01bH
	DB	056H
	DB	0fH
	DB	085H
	DB	038H
	DB	05dH
	DB	01H
	DB	08cH
	DB	035H
	DB	040H
	DB	013H
	DB	097H
	DB	022H
	DB	04bH
	DB	01dH
	DB	09eH
	DB	02fH
	DB	022H
	DB	047H
	DB	0e9H
	DB	064H
	DB	029H
	DB	049H
	DB	0e0H
	DB	069H
	DB	034H
	DB	05bH
	DB	0fbH
	DB	07eH
	DB	03fH
	DB	055H
	DB	0f2H
	DB	073H
	DB	0eH
	DB	07fH
	DB	0cdH
	DB	050H
	DB	05H
	DB	071H
	DB	0c4H
	DB	05dH
	DB	018H
	DB	063H
	DB	0dfH
	DB	04aH
	DB	013H
	DB	06dH
	DB	0d6H
	DB	047H
	DB	0caH
	DB	0d7H
	DB	031H
	DB	0dcH
	DB	0c1H
	DB	0d9H
	DB	038H
	DB	0d1H
	DB	0dcH
	DB	0cbH
	DB	023H
	DB	0c6H
	DB	0d7H
	DB	0c5H
	DB	02aH
	DB	0cbH
	DB	0e6H
	DB	0efH
	DB	015H
	DB	0e8H
	DB	0edH
	DB	0e1H
	DB	01cH
	DB	0e5H
	DB	0f0H
	DB	0f3H
	DB	07H
	DB	0f2H
	DB	0fbH
	DB	0fdH
	DB	0eH
	DB	0ffH
	DB	092H
	DB	0a7H
	DB	079H
	DB	0b4H
	DB	099H
	DB	0a9H
	DB	070H
	DB	0b9H
	DB	084H
	DB	0bbH
	DB	06bH
	DB	0aeH
	DB	08fH
	DB	0b5H
	DB	062H
	DB	0a3H
	DB	0beH
	DB	09fH
	DB	05dH
	DB	080H
	DB	0b5H
	DB	091H
	DB	054H
	DB	08dH
	DB	0a8H
	DB	083H
	DB	04fH
	DB	09aH
	DB	0a3H
	DB	08dH
	DB	046H
	DB	097H
?U3@@3PAY03EA DB 00H					; U3
	DB	00H
	DB	00H
	DB	00H
	DB	0dH
	DB	0bH
	DB	0eH
	DB	09H
	DB	01aH
	DB	016H
	DB	01cH
	DB	012H
	DB	017H
	DB	01dH
	DB	012H
	DB	01bH
	DB	034H
	DB	02cH
	DB	038H
	DB	024H
	DB	039H
	DB	027H
	DB	036H
	DB	02dH
	DB	02eH
	DB	03aH
	DB	024H
	DB	036H
	DB	023H
	DB	031H
	DB	02aH
	DB	03fH
	DB	068H
	DB	058H
	DB	070H
	DB	048H
	DB	065H
	DB	053H
	DB	07eH
	DB	041H
	DB	072H
	DB	04eH
	DB	06cH
	DB	05aH
	DB	07fH
	DB	045H
	DB	062H
	DB	053H
	DB	05cH
	DB	074H
	DB	048H
	DB	06cH
	DB	051H
	DB	07fH
	DB	046H
	DB	065H
	DB	046H
	DB	062H
	DB	054H
	DB	07eH
	DB	04bH
	DB	069H
	DB	05aH
	DB	077H
	DB	0d0H
	DB	0b0H
	DB	0e0H
	DB	090H
	DB	0ddH
	DB	0bbH
	DB	0eeH
	DB	099H
	DB	0caH
	DB	0a6H
	DB	0fcH
	DB	082H
	DB	0c7H
	DB	0adH
	DB	0f2H
	DB	08bH
	DB	0e4H
	DB	09cH
	DB	0d8H
	DB	0b4H
	DB	0e9H
	DB	097H
	DB	0d6H
	DB	0bdH
	DB	0feH
	DB	08aH
	DB	0c4H
	DB	0a6H
	DB	0f3H
	DB	081H
	DB	0caH
	DB	0afH
	DB	0b8H
	DB	0e8H
	DB	090H
	DB	0d8H
	DB	0b5H
	DB	0e3H
	DB	09eH
	DB	0d1H
	DB	0a2H
	DB	0feH
	DB	08cH
	DB	0caH
	DB	0afH
	DB	0f5H
	DB	082H
	DB	0c3H
	DB	08cH
	DB	0c4H
	DB	0a8H
	DB	0fcH
	DB	081H
	DB	0cfH
	DB	0a6H
	DB	0f5H
	DB	096H
	DB	0d2H
	DB	0b4H
	DB	0eeH
	DB	09bH
	DB	0d9H
	DB	0baH
	DB	0e7H
	DB	0bbH
	DB	07bH
	DB	0dbH
	DB	03bH
	DB	0b6H
	DB	070H
	DB	0d5H
	DB	032H
	DB	0a1H
	DB	06dH
	DB	0c7H
	DB	029H
	DB	0acH
	DB	066H
	DB	0c9H
	DB	020H
	DB	08fH
	DB	057H
	DB	0e3H
	DB	01fH
	DB	082H
	DB	05cH
	DB	0edH
	DB	016H
	DB	095H
	DB	041H
	DB	0ffH
	DB	0dH
	DB	098H
	DB	04aH
	DB	0f1H
	DB	04H
	DB	0d3H
	DB	023H
	DB	0abH
	DB	073H
	DB	0deH
	DB	028H
	DB	0a5H
	DB	07aH
	DB	0c9H
	DB	035H
	DB	0b7H
	DB	061H
	DB	0c4H
	DB	03eH
	DB	0b9H
	DB	068H
	DB	0e7H
	DB	0fH
	DB	093H
	DB	057H
	DB	0eaH
	DB	04H
	DB	09dH
	DB	05eH
	DB	0fdH
	DB	019H
	DB	08fH
	DB	045H
	DB	0f0H
	DB	012H
	DB	081H
	DB	04cH
	DB	06bH
	DB	0cbH
	DB	03bH
	DB	0abH
	DB	066H
	DB	0c0H
	DB	035H
	DB	0a2H
	DB	071H
	DB	0ddH
	DB	027H
	DB	0b9H
	DB	07cH
	DB	0d6H
	DB	029H
	DB	0b0H
	DB	05fH
	DB	0e7H
	DB	03H
	DB	08fH
	DB	052H
	DB	0ecH
	DB	0dH
	DB	086H
	DB	045H
	DB	0f1H
	DB	01fH
	DB	09dH
	DB	048H
	DB	0faH
	DB	011H
	DB	094H
	DB	03H
	DB	093H
	DB	04bH
	DB	0e3H
	DB	0eH
	DB	098H
	DB	045H
	DB	0eaH
	DB	019H
	DB	085H
	DB	057H
	DB	0f1H
	DB	014H
	DB	08eH
	DB	059H
	DB	0f8H
	DB	037H
	DB	0bfH
	DB	073H
	DB	0c7H
	DB	03aH
	DB	0b4H
	DB	07dH
	DB	0ceH
	DB	02dH
	DB	0a9H
	DB	06fH
	DB	0d5H
	DB	020H
	DB	0a2H
	DB	061H
	DB	0dcH
	DB	06dH
	DB	0f6H
	DB	0adH
	DB	076H
	DB	060H
	DB	0fdH
	DB	0a3H
	DB	07fH
	DB	077H
	DB	0e0H
	DB	0b1H
	DB	064H
	DB	07aH
	DB	0ebH
	DB	0bfH
	DB	06dH
	DB	059H
	DB	0daH
	DB	095H
	DB	052H
	DB	054H
	DB	0d1H
	DB	09bH
	DB	05bH
	DB	043H
	DB	0ccH
	DB	089H
	DB	040H
	DB	04eH
	DB	0c7H
	DB	087H
	DB	049H
	DB	05H
	DB	0aeH
	DB	0ddH
	DB	03eH
	DB	08H
	DB	0a5H
	DB	0d3H
	DB	037H
	DB	01fH
	DB	0b8H
	DB	0c1H
	DB	02cH
	DB	012H
	DB	0b3H
	DB	0cfH
	DB	025H
	DB	031H
	DB	082H
	DB	0e5H
	DB	01aH
	DB	03cH
	DB	089H
	DB	0ebH
	DB	013H
	DB	02bH
	DB	094H
	DB	0f9H
	DB	08H
	DB	026H
	DB	09fH
	DB	0f7H
	DB	01H
	DB	0bdH
	DB	046H
	DB	04dH
	DB	0e6H
	DB	0b0H
	DB	04dH
	DB	043H
	DB	0efH
	DB	0a7H
	DB	050H
	DB	051H
	DB	0f4H
	DB	0aaH
	DB	05bH
	DB	05fH
	DB	0fdH
	DB	089H
	DB	06aH
	DB	075H
	DB	0c2H
	DB	084H
	DB	061H
	DB	07bH
	DB	0cbH
	DB	093H
	DB	07cH
	DB	069H
	DB	0d0H
	DB	09eH
	DB	077H
	DB	067H
	DB	0d9H
	DB	0d5H
	DB	01eH
	DB	03dH
	DB	0aeH
	DB	0d8H
	DB	015H
	DB	033H
	DB	0a7H
	DB	0cfH
	DB	08H
	DB	021H
	DB	0bcH
	DB	0c2H
	DB	03H
	DB	02fH
	DB	0b5H
	DB	0e1H
	DB	032H
	DB	05H
	DB	08aH
	DB	0ecH
	DB	039H
	DB	0bH
	DB	083H
	DB	0fbH
	DB	024H
	DB	019H
	DB	098H
	DB	0f6H
	DB	02fH
	DB	017H
	DB	091H
	DB	0d6H
	DB	08dH
	DB	076H
	DB	04dH
	DB	0dbH
	DB	086H
	DB	078H
	DB	044H
	DB	0ccH
	DB	09bH
	DB	06aH
	DB	05fH
	DB	0c1H
	DB	090H
	DB	064H
	DB	056H
	DB	0e2H
	DB	0a1H
	DB	04eH
	DB	069H
	DB	0efH
	DB	0aaH
	DB	040H
	DB	060H
	DB	0f8H
	DB	0b7H
	DB	052H
	DB	07bH
	DB	0f5H
	DB	0bcH
	DB	05cH
	DB	072H
	DB	0beH
	DB	0d5H
	DB	06H
	DB	05H
	DB	0b3H
	DB	0deH
	DB	08H
	DB	0cH
	DB	0a4H
	DB	0c3H
	DB	01aH
	DB	017H
	DB	0a9H
	DB	0c8H
	DB	014H
	DB	01eH
	DB	08aH
	DB	0f9H
	DB	03eH
	DB	021H
	DB	087H
	DB	0f2H
	DB	030H
	DB	028H
	DB	090H
	DB	0efH
	DB	022H
	DB	033H
	DB	09dH
	DB	0e4H
	DB	02cH
	DB	03aH
	DB	06H
	DB	03dH
	DB	096H
	DB	0ddH
	DB	0bH
	DB	036H
	DB	098H
	DB	0d4H
	DB	01cH
	DB	02bH
	DB	08aH
	DB	0cfH
	DB	011H
	DB	020H
	DB	084H
	DB	0c6H
	DB	032H
	DB	011H
	DB	0aeH
	DB	0f9H
	DB	03fH
	DB	01aH
	DB	0a0H
	DB	0f0H
	DB	028H
	DB	07H
	DB	0b2H
	DB	0ebH
	DB	025H
	DB	0cH
	DB	0bcH
	DB	0e2H
	DB	06eH
	DB	065H
	DB	0e6H
	DB	095H
	DB	063H
	DB	06eH
	DB	0e8H
	DB	09cH
	DB	074H
	DB	073H
	DB	0faH
	DB	087H
	DB	079H
	DB	078H
	DB	0f4H
	DB	08eH
	DB	05aH
	DB	049H
	DB	0deH
	DB	0b1H
	DB	057H
	DB	042H
	DB	0d0H
	DB	0b8H
	DB	040H
	DB	05fH
	DB	0c2H
	DB	0a3H
	DB	04dH
	DB	054H
	DB	0ccH
	DB	0aaH
	DB	0daH
	DB	0f7H
	DB	041H
	DB	0ecH
	DB	0d7H
	DB	0fcH
	DB	04fH
	DB	0e5H
	DB	0c0H
	DB	0e1H
	DB	05dH
	DB	0feH
	DB	0cdH
	DB	0eaH
	DB	053H
	DB	0f7H
	DB	0eeH
	DB	0dbH
	DB	079H
	DB	0c8H
	DB	0e3H
	DB	0d0H
	DB	077H
	DB	0c1H
	DB	0f4H
	DB	0cdH
	DB	065H
	DB	0daH
	DB	0f9H
	DB	0c6H
	DB	06bH
	DB	0d3H
	DB	0b2H
	DB	0afH
	DB	031H
	DB	0a4H
	DB	0bfH
	DB	0a4H
	DB	03fH
	DB	0adH
	DB	0a8H
	DB	0b9H
	DB	02dH
	DB	0b6H
	DB	0a5H
	DB	0b2H
	DB	023H
	DB	0bfH
	DB	086H
	DB	083H
	DB	09H
	DB	080H
	DB	08bH
	DB	088H
	DB	07H
	DB	089H
	DB	09cH
	DB	095H
	DB	015H
	DB	092H
	DB	091H
	DB	09eH
	DB	01bH
	DB	09bH
	DB	0aH
	DB	047H
	DB	0a1H
	DB	07cH
	DB	07H
	DB	04cH
	DB	0afH
	DB	075H
	DB	010H
	DB	051H
	DB	0bdH
	DB	06eH
	DB	01dH
	DB	05aH
	DB	0b3H
	DB	067H
	DB	03eH
	DB	06bH
	DB	099H
	DB	058H
	DB	033H
	DB	060H
	DB	097H
	DB	051H
	DB	024H
	DB	07dH
	DB	085H
	DB	04aH
	DB	029H
	DB	076H
	DB	08bH
	DB	043H
	DB	062H
	DB	01fH
	DB	0d1H
	DB	034H
	DB	06fH
	DB	014H
	DB	0dfH
	DB	03dH
	DB	078H
	DB	09H
	DB	0cdH
	DB	026H
	DB	075H
	DB	02H
	DB	0c3H
	DB	02fH
	DB	056H
	DB	033H
	DB	0e9H
	DB	010H
	DB	05bH
	DB	038H
	DB	0e7H
	DB	019H
	DB	04cH
	DB	025H
	DB	0f5H
	DB	02H
	DB	041H
	DB	02eH
	DB	0fbH
	DB	0bH
	DB	061H
	DB	08cH
	DB	09aH
	DB	0d7H
	DB	06cH
	DB	087H
	DB	094H
	DB	0deH
	DB	07bH
	DB	09aH
	DB	086H
	DB	0c5H
	DB	076H
	DB	091H
	DB	088H
	DB	0ccH
	DB	055H
	DB	0a0H
	DB	0a2H
	DB	0f3H
	DB	058H
	DB	0abH
	DB	0acH
	DB	0faH
	DB	04fH
	DB	0b6H
	DB	0beH
	DB	0e1H
	DB	042H
	DB	0bdH
	DB	0b0H
	DB	0e8H
	DB	09H
	DB	0d4H
	DB	0eaH
	DB	09fH
	DB	04H
	DB	0dfH
	DB	0e4H
	DB	096H
	DB	013H
	DB	0c2H
	DB	0f6H
	DB	08dH
	DB	01eH
	DB	0c9H
	DB	0f8H
	DB	084H
	DB	03dH
	DB	0f8H
	DB	0d2H
	DB	0bbH
	DB	030H
	DB	0f3H
	DB	0dcH
	DB	0b2H
	DB	027H
	DB	0eeH
	DB	0ceH
	DB	0a9H
	DB	02aH
	DB	0e5H
	DB	0c0H
	DB	0a0H
	DB	0b1H
	DB	03cH
	DB	07aH
	DB	047H
	DB	0bcH
	DB	037H
	DB	074H
	DB	04eH
	DB	0abH
	DB	02aH
	DB	066H
	DB	055H
	DB	0a6H
	DB	021H
	DB	068H
	DB	05cH
	DB	085H
	DB	010H
	DB	042H
	DB	063H
	DB	088H
	DB	01bH
	DB	04cH
	DB	06aH
	DB	09fH
	DB	06H
	DB	05eH
	DB	071H
	DB	092H
	DB	0dH
	DB	050H
	DB	078H
	DB	0d9H
	DB	064H
	DB	0aH
	DB	0fH
	DB	0d4H
	DB	06fH
	DB	04H
	DB	06H
	DB	0c3H
	DB	072H
	DB	016H
	DB	01dH
	DB	0ceH
	DB	079H
	DB	018H
	DB	014H
	DB	0edH
	DB	048H
	DB	032H
	DB	02bH
	DB	0e0H
	DB	043H
	DB	03cH
	DB	022H
	DB	0f7H
	DB	05eH
	DB	02eH
	DB	039H
	DB	0faH
	DB	055H
	DB	020H
	DB	030H
	DB	0b7H
	DB	01H
	DB	0ecH
	DB	09aH
	DB	0baH
	DB	0aH
	DB	0e2H
	DB	093H
	DB	0adH
	DB	017H
	DB	0f0H
	DB	088H
	DB	0a0H
	DB	01cH
	DB	0feH
	DB	081H
	DB	083H
	DB	02dH
	DB	0d4H
	DB	0beH
	DB	08eH
	DB	026H
	DB	0daH
	DB	0b7H
	DB	099H
	DB	03bH
	DB	0c8H
	DB	0acH
	DB	094H
	DB	030H
	DB	0c6H
	DB	0a5H
	DB	0dfH
	DB	059H
	DB	09cH
	DB	0d2H
	DB	0d2H
	DB	052H
	DB	092H
	DB	0dbH
	DB	0c5H
	DB	04fH
	DB	080H
	DB	0c0H
	DB	0c8H
	DB	044H
	DB	08eH
	DB	0c9H
	DB	0ebH
	DB	075H
	DB	0a4H
	DB	0f6H
	DB	0e6H
	DB	07eH
	DB	0aaH
	DB	0ffH
	DB	0f1H
	DB	063H
	DB	0b8H
	DB	0e4H
	DB	0fcH
	DB	068H
	DB	0b6H
	DB	0edH
	DB	067H
	DB	0b1H
	DB	0cH
	DB	0aH
	DB	06aH
	DB	0baH
	DB	02H
	DB	03H
	DB	07dH
	DB	0a7H
	DB	010H
	DB	018H
	DB	070H
	DB	0acH
	DB	01eH
	DB	011H
	DB	053H
	DB	09dH
	DB	034H
	DB	02eH
	DB	05eH
	DB	096H
	DB	03aH
	DB	027H
	DB	049H
	DB	08bH
	DB	028H
	DB	03cH
	DB	044H
	DB	080H
	DB	026H
	DB	035H
	DB	0fH
	DB	0e9H
	DB	07cH
	DB	042H
	DB	02H
	DB	0e2H
	DB	072H
	DB	04bH
	DB	015H
	DB	0ffH
	DB	060H
	DB	050H
	DB	018H
	DB	0f4H
	DB	06eH
	DB	059H
	DB	03bH
	DB	0c5H
	DB	044H
	DB	066H
	DB	036H
	DB	0ceH
	DB	04aH
	DB	06fH
	DB	021H
	DB	0d3H
	DB	058H
	DB	074H
	DB	02cH
	DB	0d8H
	DB	056H
	DB	07dH
	DB	0cH
	DB	07aH
	DB	037H
	DB	0a1H
	DB	01H
	DB	071H
	DB	039H
	DB	0a8H
	DB	016H
	DB	06cH
	DB	02bH
	DB	0b3H
	DB	01bH
	DB	067H
	DB	025H
	DB	0baH
	DB	038H
	DB	056H
	DB	0fH
	DB	085H
	DB	035H
	DB	05dH
	DB	01H
	DB	08cH
	DB	022H
	DB	040H
	DB	013H
	DB	097H
	DB	02fH
	DB	04bH
	DB	01dH
	DB	09eH
	DB	064H
	DB	022H
	DB	047H
	DB	0e9H
	DB	069H
	DB	029H
	DB	049H
	DB	0e0H
	DB	07eH
	DB	034H
	DB	05bH
	DB	0fbH
	DB	073H
	DB	03fH
	DB	055H
	DB	0f2H
	DB	050H
	DB	0eH
	DB	07fH
	DB	0cdH
	DB	05dH
	DB	05H
	DB	071H
	DB	0c4H
	DB	04aH
	DB	018H
	DB	063H
	DB	0dfH
	DB	047H
	DB	013H
	DB	06dH
	DB	0d6H
	DB	0dcH
	DB	0caH
	DB	0d7H
	DB	031H
	DB	0d1H
	DB	0c1H
	DB	0d9H
	DB	038H
	DB	0c6H
	DB	0dcH
	DB	0cbH
	DB	023H
	DB	0cbH
	DB	0d7H
	DB	0c5H
	DB	02aH
	DB	0e8H
	DB	0e6H
	DB	0efH
	DB	015H
	DB	0e5H
	DB	0edH
	DB	0e1H
	DB	01cH
	DB	0f2H
	DB	0f0H
	DB	0f3H
	DB	07H
	DB	0ffH
	DB	0fbH
	DB	0fdH
	DB	0eH
	DB	0b4H
	DB	092H
	DB	0a7H
	DB	079H
	DB	0b9H
	DB	099H
	DB	0a9H
	DB	070H
	DB	0aeH
	DB	084H
	DB	0bbH
	DB	06bH
	DB	0a3H
	DB	08fH
	DB	0b5H
	DB	062H
	DB	080H
	DB	0beH
	DB	09fH
	DB	05dH
	DB	08dH
	DB	0b5H
	DB	091H
	DB	054H
	DB	09aH
	DB	0a8H
	DB	083H
	DB	04fH
	DB	097H
	DB	0a3H
	DB	08dH
	DB	046H
?U4@@3PAY03EA DB 00H					; U4
	DB	00H
	DB	00H
	DB	00H
	DB	09H
	DB	0dH
	DB	0bH
	DB	0eH
	DB	012H
	DB	01aH
	DB	016H
	DB	01cH
	DB	01bH
	DB	017H
	DB	01dH
	DB	012H
	DB	024H
	DB	034H
	DB	02cH
	DB	038H
	DB	02dH
	DB	039H
	DB	027H
	DB	036H
	DB	036H
	DB	02eH
	DB	03aH
	DB	024H
	DB	03fH
	DB	023H
	DB	031H
	DB	02aH
	DB	048H
	DB	068H
	DB	058H
	DB	070H
	DB	041H
	DB	065H
	DB	053H
	DB	07eH
	DB	05aH
	DB	072H
	DB	04eH
	DB	06cH
	DB	053H
	DB	07fH
	DB	045H
	DB	062H
	DB	06cH
	DB	05cH
	DB	074H
	DB	048H
	DB	065H
	DB	051H
	DB	07fH
	DB	046H
	DB	07eH
	DB	046H
	DB	062H
	DB	054H
	DB	077H
	DB	04bH
	DB	069H
	DB	05aH
	DB	090H
	DB	0d0H
	DB	0b0H
	DB	0e0H
	DB	099H
	DB	0ddH
	DB	0bbH
	DB	0eeH
	DB	082H
	DB	0caH
	DB	0a6H
	DB	0fcH
	DB	08bH
	DB	0c7H
	DB	0adH
	DB	0f2H
	DB	0b4H
	DB	0e4H
	DB	09cH
	DB	0d8H
	DB	0bdH
	DB	0e9H
	DB	097H
	DB	0d6H
	DB	0a6H
	DB	0feH
	DB	08aH
	DB	0c4H
	DB	0afH
	DB	0f3H
	DB	081H
	DB	0caH
	DB	0d8H
	DB	0b8H
	DB	0e8H
	DB	090H
	DB	0d1H
	DB	0b5H
	DB	0e3H
	DB	09eH
	DB	0caH
	DB	0a2H
	DB	0feH
	DB	08cH
	DB	0c3H
	DB	0afH
	DB	0f5H
	DB	082H
	DB	0fcH
	DB	08cH
	DB	0c4H
	DB	0a8H
	DB	0f5H
	DB	081H
	DB	0cfH
	DB	0a6H
	DB	0eeH
	DB	096H
	DB	0d2H
	DB	0b4H
	DB	0e7H
	DB	09bH
	DB	0d9H
	DB	0baH
	DB	03bH
	DB	0bbH
	DB	07bH
	DB	0dbH
	DB	032H
	DB	0b6H
	DB	070H
	DB	0d5H
	DB	029H
	DB	0a1H
	DB	06dH
	DB	0c7H
	DB	020H
	DB	0acH
	DB	066H
	DB	0c9H
	DB	01fH
	DB	08fH
	DB	057H
	DB	0e3H
	DB	016H
	DB	082H
	DB	05cH
	DB	0edH
	DB	0dH
	DB	095H
	DB	041H
	DB	0ffH
	DB	04H
	DB	098H
	DB	04aH
	DB	0f1H
	DB	073H
	DB	0d3H
	DB	023H
	DB	0abH
	DB	07aH
	DB	0deH
	DB	028H
	DB	0a5H
	DB	061H
	DB	0c9H
	DB	035H
	DB	0b7H
	DB	068H
	DB	0c4H
	DB	03eH
	DB	0b9H
	DB	057H
	DB	0e7H
	DB	0fH
	DB	093H
	DB	05eH
	DB	0eaH
	DB	04H
	DB	09dH
	DB	045H
	DB	0fdH
	DB	019H
	DB	08fH
	DB	04cH
	DB	0f0H
	DB	012H
	DB	081H
	DB	0abH
	DB	06bH
	DB	0cbH
	DB	03bH
	DB	0a2H
	DB	066H
	DB	0c0H
	DB	035H
	DB	0b9H
	DB	071H
	DB	0ddH
	DB	027H
	DB	0b0H
	DB	07cH
	DB	0d6H
	DB	029H
	DB	08fH
	DB	05fH
	DB	0e7H
	DB	03H
	DB	086H
	DB	052H
	DB	0ecH
	DB	0dH
	DB	09dH
	DB	045H
	DB	0f1H
	DB	01fH
	DB	094H
	DB	048H
	DB	0faH
	DB	011H
	DB	0e3H
	DB	03H
	DB	093H
	DB	04bH
	DB	0eaH
	DB	0eH
	DB	098H
	DB	045H
	DB	0f1H
	DB	019H
	DB	085H
	DB	057H
	DB	0f8H
	DB	014H
	DB	08eH
	DB	059H
	DB	0c7H
	DB	037H
	DB	0bfH
	DB	073H
	DB	0ceH
	DB	03aH
	DB	0b4H
	DB	07dH
	DB	0d5H
	DB	02dH
	DB	0a9H
	DB	06fH
	DB	0dcH
	DB	020H
	DB	0a2H
	DB	061H
	DB	076H
	DB	06dH
	DB	0f6H
	DB	0adH
	DB	07fH
	DB	060H
	DB	0fdH
	DB	0a3H
	DB	064H
	DB	077H
	DB	0e0H
	DB	0b1H
	DB	06dH
	DB	07aH
	DB	0ebH
	DB	0bfH
	DB	052H
	DB	059H
	DB	0daH
	DB	095H
	DB	05bH
	DB	054H
	DB	0d1H
	DB	09bH
	DB	040H
	DB	043H
	DB	0ccH
	DB	089H
	DB	049H
	DB	04eH
	DB	0c7H
	DB	087H
	DB	03eH
	DB	05H
	DB	0aeH
	DB	0ddH
	DB	037H
	DB	08H
	DB	0a5H
	DB	0d3H
	DB	02cH
	DB	01fH
	DB	0b8H
	DB	0c1H
	DB	025H
	DB	012H
	DB	0b3H
	DB	0cfH
	DB	01aH
	DB	031H
	DB	082H
	DB	0e5H
	DB	013H
	DB	03cH
	DB	089H
	DB	0ebH
	DB	08H
	DB	02bH
	DB	094H
	DB	0f9H
	DB	01H
	DB	026H
	DB	09fH
	DB	0f7H
	DB	0e6H
	DB	0bdH
	DB	046H
	DB	04dH
	DB	0efH
	DB	0b0H
	DB	04dH
	DB	043H
	DB	0f4H
	DB	0a7H
	DB	050H
	DB	051H
	DB	0fdH
	DB	0aaH
	DB	05bH
	DB	05fH
	DB	0c2H
	DB	089H
	DB	06aH
	DB	075H
	DB	0cbH
	DB	084H
	DB	061H
	DB	07bH
	DB	0d0H
	DB	093H
	DB	07cH
	DB	069H
	DB	0d9H
	DB	09eH
	DB	077H
	DB	067H
	DB	0aeH
	DB	0d5H
	DB	01eH
	DB	03dH
	DB	0a7H
	DB	0d8H
	DB	015H
	DB	033H
	DB	0bcH
	DB	0cfH
	DB	08H
	DB	021H
	DB	0b5H
	DB	0c2H
	DB	03H
	DB	02fH
	DB	08aH
	DB	0e1H
	DB	032H
	DB	05H
	DB	083H
	DB	0ecH
	DB	039H
	DB	0bH
	DB	098H
	DB	0fbH
	DB	024H
	DB	019H
	DB	091H
	DB	0f6H
	DB	02fH
	DB	017H
	DB	04dH
	DB	0d6H
	DB	08dH
	DB	076H
	DB	044H
	DB	0dbH
	DB	086H
	DB	078H
	DB	05fH
	DB	0ccH
	DB	09bH
	DB	06aH
	DB	056H
	DB	0c1H
	DB	090H
	DB	064H
	DB	069H
	DB	0e2H
	DB	0a1H
	DB	04eH
	DB	060H
	DB	0efH
	DB	0aaH
	DB	040H
	DB	07bH
	DB	0f8H
	DB	0b7H
	DB	052H
	DB	072H
	DB	0f5H
	DB	0bcH
	DB	05cH
	DB	05H
	DB	0beH
	DB	0d5H
	DB	06H
	DB	0cH
	DB	0b3H
	DB	0deH
	DB	08H
	DB	017H
	DB	0a4H
	DB	0c3H
	DB	01aH
	DB	01eH
	DB	0a9H
	DB	0c8H
	DB	014H
	DB	021H
	DB	08aH
	DB	0f9H
	DB	03eH
	DB	028H
	DB	087H
	DB	0f2H
	DB	030H
	DB	033H
	DB	090H
	DB	0efH
	DB	022H
	DB	03aH
	DB	09dH
	DB	0e4H
	DB	02cH
	DB	0ddH
	DB	06H
	DB	03dH
	DB	096H
	DB	0d4H
	DB	0bH
	DB	036H
	DB	098H
	DB	0cfH
	DB	01cH
	DB	02bH
	DB	08aH
	DB	0c6H
	DB	011H
	DB	020H
	DB	084H
	DB	0f9H
	DB	032H
	DB	011H
	DB	0aeH
	DB	0f0H
	DB	03fH
	DB	01aH
	DB	0a0H
	DB	0ebH
	DB	028H
	DB	07H
	DB	0b2H
	DB	0e2H
	DB	025H
	DB	0cH
	DB	0bcH
	DB	095H
	DB	06eH
	DB	065H
	DB	0e6H
	DB	09cH
	DB	063H
	DB	06eH
	DB	0e8H
	DB	087H
	DB	074H
	DB	073H
	DB	0faH
	DB	08eH
	DB	079H
	DB	078H
	DB	0f4H
	DB	0b1H
	DB	05aH
	DB	049H
	DB	0deH
	DB	0b8H
	DB	057H
	DB	042H
	DB	0d0H
	DB	0a3H
	DB	040H
	DB	05fH
	DB	0c2H
	DB	0aaH
	DB	04dH
	DB	054H
	DB	0ccH
	DB	0ecH
	DB	0daH
	DB	0f7H
	DB	041H
	DB	0e5H
	DB	0d7H
	DB	0fcH
	DB	04fH
	DB	0feH
	DB	0c0H
	DB	0e1H
	DB	05dH
	DB	0f7H
	DB	0cdH
	DB	0eaH
	DB	053H
	DB	0c8H
	DB	0eeH
	DB	0dbH
	DB	079H
	DB	0c1H
	DB	0e3H
	DB	0d0H
	DB	077H
	DB	0daH
	DB	0f4H
	DB	0cdH
	DB	065H
	DB	0d3H
	DB	0f9H
	DB	0c6H
	DB	06bH
	DB	0a4H
	DB	0b2H
	DB	0afH
	DB	031H
	DB	0adH
	DB	0bfH
	DB	0a4H
	DB	03fH
	DB	0b6H
	DB	0a8H
	DB	0b9H
	DB	02dH
	DB	0bfH
	DB	0a5H
	DB	0b2H
	DB	023H
	DB	080H
	DB	086H
	DB	083H
	DB	09H
	DB	089H
	DB	08bH
	DB	088H
	DB	07H
	DB	092H
	DB	09cH
	DB	095H
	DB	015H
	DB	09bH
	DB	091H
	DB	09eH
	DB	01bH
	DB	07cH
	DB	0aH
	DB	047H
	DB	0a1H
	DB	075H
	DB	07H
	DB	04cH
	DB	0afH
	DB	06eH
	DB	010H
	DB	051H
	DB	0bdH
	DB	067H
	DB	01dH
	DB	05aH
	DB	0b3H
	DB	058H
	DB	03eH
	DB	06bH
	DB	099H
	DB	051H
	DB	033H
	DB	060H
	DB	097H
	DB	04aH
	DB	024H
	DB	07dH
	DB	085H
	DB	043H
	DB	029H
	DB	076H
	DB	08bH
	DB	034H
	DB	062H
	DB	01fH
	DB	0d1H
	DB	03dH
	DB	06fH
	DB	014H
	DB	0dfH
	DB	026H
	DB	078H
	DB	09H
	DB	0cdH
	DB	02fH
	DB	075H
	DB	02H
	DB	0c3H
	DB	010H
	DB	056H
	DB	033H
	DB	0e9H
	DB	019H
	DB	05bH
	DB	038H
	DB	0e7H
	DB	02H
	DB	04cH
	DB	025H
	DB	0f5H
	DB	0bH
	DB	041H
	DB	02eH
	DB	0fbH
	DB	0d7H
	DB	061H
	DB	08cH
	DB	09aH
	DB	0deH
	DB	06cH
	DB	087H
	DB	094H
	DB	0c5H
	DB	07bH
	DB	09aH
	DB	086H
	DB	0ccH
	DB	076H
	DB	091H
	DB	088H
	DB	0f3H
	DB	055H
	DB	0a0H
	DB	0a2H
	DB	0faH
	DB	058H
	DB	0abH
	DB	0acH
	DB	0e1H
	DB	04fH
	DB	0b6H
	DB	0beH
	DB	0e8H
	DB	042H
	DB	0bdH
	DB	0b0H
	DB	09fH
	DB	09H
	DB	0d4H
	DB	0eaH
	DB	096H
	DB	04H
	DB	0dfH
	DB	0e4H
	DB	08dH
	DB	013H
	DB	0c2H
	DB	0f6H
	DB	084H
	DB	01eH
	DB	0c9H
	DB	0f8H
	DB	0bbH
	DB	03dH
	DB	0f8H
	DB	0d2H
	DB	0b2H
	DB	030H
	DB	0f3H
	DB	0dcH
	DB	0a9H
	DB	027H
	DB	0eeH
	DB	0ceH
	DB	0a0H
	DB	02aH
	DB	0e5H
	DB	0c0H
	DB	047H
	DB	0b1H
	DB	03cH
	DB	07aH
	DB	04eH
	DB	0bcH
	DB	037H
	DB	074H
	DB	055H
	DB	0abH
	DB	02aH
	DB	066H
	DB	05cH
	DB	0a6H
	DB	021H
	DB	068H
	DB	063H
	DB	085H
	DB	010H
	DB	042H
	DB	06aH
	DB	088H
	DB	01bH
	DB	04cH
	DB	071H
	DB	09fH
	DB	06H
	DB	05eH
	DB	078H
	DB	092H
	DB	0dH
	DB	050H
	DB	0fH
	DB	0d9H
	DB	064H
	DB	0aH
	DB	06H
	DB	0d4H
	DB	06fH
	DB	04H
	DB	01dH
	DB	0c3H
	DB	072H
	DB	016H
	DB	014H
	DB	0ceH
	DB	079H
	DB	018H
	DB	02bH
	DB	0edH
	DB	048H
	DB	032H
	DB	022H
	DB	0e0H
	DB	043H
	DB	03cH
	DB	039H
	DB	0f7H
	DB	05eH
	DB	02eH
	DB	030H
	DB	0faH
	DB	055H
	DB	020H
	DB	09aH
	DB	0b7H
	DB	01H
	DB	0ecH
	DB	093H
	DB	0baH
	DB	0aH
	DB	0e2H
	DB	088H
	DB	0adH
	DB	017H
	DB	0f0H
	DB	081H
	DB	0a0H
	DB	01cH
	DB	0feH
	DB	0beH
	DB	083H
	DB	02dH
	DB	0d4H
	DB	0b7H
	DB	08eH
	DB	026H
	DB	0daH
	DB	0acH
	DB	099H
	DB	03bH
	DB	0c8H
	DB	0a5H
	DB	094H
	DB	030H
	DB	0c6H
	DB	0d2H
	DB	0dfH
	DB	059H
	DB	09cH
	DB	0dbH
	DB	0d2H
	DB	052H
	DB	092H
	DB	0c0H
	DB	0c5H
	DB	04fH
	DB	080H
	DB	0c9H
	DB	0c8H
	DB	044H
	DB	08eH
	DB	0f6H
	DB	0ebH
	DB	075H
	DB	0a4H
	DB	0ffH
	DB	0e6H
	DB	07eH
	DB	0aaH
	DB	0e4H
	DB	0f1H
	DB	063H
	DB	0b8H
	DB	0edH
	DB	0fcH
	DB	068H
	DB	0b6H
	DB	0aH
	DB	067H
	DB	0b1H
	DB	0cH
	DB	03H
	DB	06aH
	DB	0baH
	DB	02H
	DB	018H
	DB	07dH
	DB	0a7H
	DB	010H
	DB	011H
	DB	070H
	DB	0acH
	DB	01eH
	DB	02eH
	DB	053H
	DB	09dH
	DB	034H
	DB	027H
	DB	05eH
	DB	096H
	DB	03aH
	DB	03cH
	DB	049H
	DB	08bH
	DB	028H
	DB	035H
	DB	044H
	DB	080H
	DB	026H
	DB	042H
	DB	0fH
	DB	0e9H
	DB	07cH
	DB	04bH
	DB	02H
	DB	0e2H
	DB	072H
	DB	050H
	DB	015H
	DB	0ffH
	DB	060H
	DB	059H
	DB	018H
	DB	0f4H
	DB	06eH
	DB	066H
	DB	03bH
	DB	0c5H
	DB	044H
	DB	06fH
	DB	036H
	DB	0ceH
	DB	04aH
	DB	074H
	DB	021H
	DB	0d3H
	DB	058H
	DB	07dH
	DB	02cH
	DB	0d8H
	DB	056H
	DB	0a1H
	DB	0cH
	DB	07aH
	DB	037H
	DB	0a8H
	DB	01H
	DB	071H
	DB	039H
	DB	0b3H
	DB	016H
	DB	06cH
	DB	02bH
	DB	0baH
	DB	01bH
	DB	067H
	DB	025H
	DB	085H
	DB	038H
	DB	056H
	DB	0fH
	DB	08cH
	DB	035H
	DB	05dH
	DB	01H
	DB	097H
	DB	022H
	DB	040H
	DB	013H
	DB	09eH
	DB	02fH
	DB	04bH
	DB	01dH
	DB	0e9H
	DB	064H
	DB	022H
	DB	047H
	DB	0e0H
	DB	069H
	DB	029H
	DB	049H
	DB	0fbH
	DB	07eH
	DB	034H
	DB	05bH
	DB	0f2H
	DB	073H
	DB	03fH
	DB	055H
	DB	0cdH
	DB	050H
	DB	0eH
	DB	07fH
	DB	0c4H
	DB	05dH
	DB	05H
	DB	071H
	DB	0dfH
	DB	04aH
	DB	018H
	DB	063H
	DB	0d6H
	DB	047H
	DB	013H
	DB	06dH
	DB	031H
	DB	0dcH
	DB	0caH
	DB	0d7H
	DB	038H
	DB	0d1H
	DB	0c1H
	DB	0d9H
	DB	023H
	DB	0c6H
	DB	0dcH
	DB	0cbH
	DB	02aH
	DB	0cbH
	DB	0d7H
	DB	0c5H
	DB	015H
	DB	0e8H
	DB	0e6H
	DB	0efH
	DB	01cH
	DB	0e5H
	DB	0edH
	DB	0e1H
	DB	07H
	DB	0f2H
	DB	0f0H
	DB	0f3H
	DB	0eH
	DB	0ffH
	DB	0fbH
	DB	0fdH
	DB	079H
	DB	0b4H
	DB	092H
	DB	0a7H
	DB	070H
	DB	0b9H
	DB	099H
	DB	0a9H
	DB	06bH
	DB	0aeH
	DB	084H
	DB	0bbH
	DB	062H
	DB	0a3H
	DB	08fH
	DB	0b5H
	DB	05dH
	DB	080H
	DB	0beH
	DB	09fH
	DB	054H
	DB	08dH
	DB	0b5H
	DB	091H
	DB	04fH
	DB	09aH
	DB	0a8H
	DB	083H
	DB	046H
	DB	097H
	DB	0a3H
	DB	08dH
?rcon@@3PAIA DD	01H					; rcon
	DD	02H
	DD	04H
	DD	08H
	DD	010H
	DD	020H
	DD	040H
	DD	080H
	DD	01bH
	DD	036H
	DD	06cH
	DD	0d8H
	DD	0abH
	DD	04dH
	DD	09aH
	DD	02fH
	DD	05eH
	DD	0bcH
	DD	063H
	DD	0c6H
	DD	097H
	DD	035H
	DD	06aH
	DD	0d4H
	DD	0b3H
	DD	07dH
	DD	0faH
	DD	0efH
	DD	0c5H
	DD	091H
_shifts	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	05H
	DB	02H
	DB	04H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
	DB	07H
	DB	03H
	DB	05H
	DB	04H
	DB	04H
_DATA	ENDS
PUBLIC	?rijndaelKeySched@@YAHQAY03EHQAY133E@Z		; rijndaelKeySched
PUBLIC	?rijndaelKeyEnctoDec@@YAHHQAY133E@Z		; rijndaelKeyEnctoDec
PUBLIC	?rijndaelEncrypt@@YAHQAE0QAY133E@Z		; rijndaelEncrypt
PUBLIC	?rijndaelEncryptRound@@YAHQAY03EQAY133EH@Z	; rijndaelEncryptRound
PUBLIC	?rijndaelDecrypt@@YAHQAE0QAY133E@Z		; rijndaelDecrypt
PUBLIC	?rijndaelDecryptRound@@YAHQAY03EQAY133EH@Z	; rijndaelDecryptRound
PUBLIC	?makeKey@@YAHPAUkeyInstance@@EHPAD@Z		; makeKey
PUBLIC	?cipherInit@@YAHPAUcipherInstance@@EPAD@Z	; cipherInit
PUBLIC	?blockEncrypt@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2@Z ; blockEncrypt
PUBLIC	?blockDecrypt@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2@Z ; blockDecrypt
PUBLIC	?cipherUpdateRounds@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2H@Z ; cipherUpdateRounds
PUBLIC	?mul@@YAEEE@Z					; mul
PUBLIC	?KeyAddition@@YAXQAY03E0E@Z			; KeyAddition
PUBLIC	?ShiftRow@@YAXQAY03EEE@Z			; ShiftRow
PUBLIC	?Substitution@@YAXQAY03EQAEE@Z			; Substitution
PUBLIC	?MixColumn@@YAXQAY03EE@Z			; MixColumn
PUBLIC	?InvMixColumn@@YAXQAY03EE@Z			; InvMixColumn
EXTRN	_strncpy:PROC
EXTRN	?randomMT@@YAIXZ:PROC				; randomMT
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?InvMixColumn@@YAXQAY03EE@Z
_TEXT	SEGMENT
_j$ = -8						; size = 4
_a$ = 8							; size = 4
_BC$ = 12						; size = 1
?InvMixColumn@@YAXQAY03EE@Z PROC			; InvMixColumn, COMDAT

; 123  : void InvMixColumn(word8 a[4][4], word8 BC) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 124  :   // Mix the four bytes of every column in a linear way
; 125  : 	// This is the opposite operation of Mixcolumn
; 126  : 	
; 127  : 	int j;
; 128  : 
; 129  : 	for(j = 0; j < BC; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@InvMixColu
$LN2@InvMixColu:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@InvMixColu:
	movzx	eax, BYTE PTR _BC$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN4@InvMixColu

; 130  : 		*((word32*)a[j]) = *((word32*)U1[a[j][0]])
; 131  : 								^ *((word32*)U2[a[j][1]])
; 132  : 								^ *((word32*)U3[a[j][2]])
; 133  : 								^ *((word32*)U4[a[j][3]]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR ?U1@@3PAY03EA[edx*4]
	xor	ecx, DWORD PTR ?U2@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	xor	ecx, DWORD PTR ?U3@@3PAY03EA[edx*4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?U4@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	$LN2@InvMixColu
$LN4@InvMixColu:

; 134  : 
; 135  : 
; 136  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InvMixColumn@@YAXQAY03EE@Z ENDP			; InvMixColumn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?MixColumn@@YAXQAY03EE@Z
_TEXT	SEGMENT
_j$ = -48						; size = 4
_i$ = -36						; size = 4
_b$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_BC$ = 12						; size = 1
?MixColumn@@YAXQAY03EE@Z PROC				; MixColumn, COMDAT

; 106  : void MixColumn(word8 a[4][4], word8 BC) {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 107  :       // Mix the four bytes of every column in a linear way
; 108  : 	
; 109  : 	word8 b[4][4];
; 110  : 	int i, j;
; 111  : 		
; 112  : 	for(j = 0; j < BC; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@MixColumn
$LN11@MixColumn:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@MixColumn:
	movzx	eax, BYTE PTR _BC$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	$LN10@MixColumn

; 113  : 		for(i = 0; i < 4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@MixColumn
$LN8@MixColumn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@MixColumn:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN7@MixColumn

; 114  : 			b[j][i] = mul(2,a[j][i])
; 115  : 				^ mul(3,a[j][(i + 1) % 4])
; 116  : 				^ a[j][(i + 2) % 4]
; 117  : 				^ a[j][(i + 3) % 4];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	push	ecx
	push	2
	call	?mul@@YAEEE@Z				; mul
	add	esp, 8
	movzx	ebx, al
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	and	edx, -2147483645			; 80000003H
	jns	SHORT $LN18@MixColumn
	dec	edx
	or	edx, -4					; fffffffcH
	inc	edx
$LN18@MixColumn:
	movzx	eax, BYTE PTR [ecx+edx]
	push	eax
	push	3
	call	?mul@@YAEEE@Z				; mul
	add	esp, 8
	movzx	ecx, al
	xor	ebx, ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 2
	and	edx, -2147483645			; 80000003H
	jns	SHORT $LN19@MixColumn
	dec	edx
	or	edx, -4					; fffffffcH
	inc	edx
$LN19@MixColumn:
	movzx	eax, BYTE PTR [ecx+edx]
	xor	ebx, eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 3
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN20@MixColumn
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN20@MixColumn:
	movzx	edx, BYTE PTR [eax+ecx]
	xor	ebx, edx
	mov	eax, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR _b$[ebp+eax*4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+edx], bl
	jmp	$LN8@MixColumn
$LN7@MixColumn:
	jmp	$LN11@MixColumn
$LN10@MixColumn:

; 118  : 	for(i = 0; i < 4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@MixColumn
$LN5@MixColumn:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@MixColumn:
	cmp	DWORD PTR _i$[ebp], 4
	jge	SHORT $LN13@MixColumn

; 119  : 		for(j = 0; j < BC; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@MixColumn
$LN2@MixColumn:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@MixColumn:
	movzx	eax, BYTE PTR _BC$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN1@MixColumn

; 120  : 			a[j][i] = b[j][i];

	mov	eax, DWORD PTR _j$[ebp]
	lea	ecx, DWORD PTR _b$[ebp+eax*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [edx+eax], cl
	jmp	SHORT $LN2@MixColumn
$LN1@MixColumn:
	jmp	SHORT $LN5@MixColumn
$LN13@MixColumn:

; 121  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@MixColumn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@MixColumn:
	DD	1
	DD	$LN16@MixColumn
$LN16@MixColumn:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN15@MixColumn
$LN15@MixColumn:
	DB	98					; 00000062H
	DB	0
?MixColumn@@YAXQAY03EE@Z ENDP				; MixColumn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?Substitution@@YAXQAY03EQAEE@Z
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_a$ = 8							; size = 4
_box$ = 12						; size = 4
_BC$ = 16						; size = 1
?Substitution@@YAXQAY03EQAEE@Z PROC			; Substitution, COMDAT

; 95   : void Substitution(word8 a[4][4], word8 box[256], word8 BC) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 96   : 	// Replace every byte of the input by the byte at that place
; 97   : 	// in the nonlinear S-box
; 98   : 	
; 99   : 	int i, j;
; 100  : 	
; 101  : 	for(i = 0; i < BC; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@Substituti
$LN5@Substituti:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@Substituti:
	movzx	eax, BYTE PTR _BC$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@Substituti

; 102  : 		for(j = 0; j < 4; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@Substituti
$LN2@Substituti:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@Substituti:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN1@Substituti

; 103  : 			a[i][j] = box[a[i][j]] ;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _box$[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl
	jmp	SHORT $LN2@Substituti
$LN1@Substituti:
	jmp	SHORT $LN5@Substituti
$LN7@Substituti:

; 104  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Substitution@@YAXQAY03EQAEE@Z ENDP			; Substitution
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?ShiftRow@@YAXQAY03EEE@Z
_TEXT	SEGMENT
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_tmp$ = -8						; size = 4
_a$ = 8							; size = 4
_d$ = 12						; size = 1
_BC$ = 16						; size = 1
?ShiftRow@@YAXQAY03EEE@Z PROC				; ShiftRow, COMDAT

; 80   : void ShiftRow(word8 a[4][4], word8 d, word8 BC) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 81   : 	// Row 0 remains unchanged
; 82   : 	// The other three rows are shifted a variable amount
; 83   : 	
; 84   : 	word8 tmp[4];
; 85   : 	int i, j;
; 86   : 	
; 87   : 	for(i = 1; i < 4; i++) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN9@ShiftRow
$LN8@ShiftRow:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@ShiftRow:
	cmp	DWORD PTR _i$[ebp], 4
	jge	$LN10@ShiftRow

; 88   : 		for(j = 0; j < BC; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@ShiftRow
$LN5@ShiftRow:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN6@ShiftRow:
	movzx	eax, BYTE PTR _BC$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN4@ShiftRow

; 89   : 			tmp[j] = a[(j + shifts[SC][i][d]) % BC][i];

	movzx	eax, BYTE PTR _BC$[ebp]
	sub	eax, 4
	sar	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	lea	edx, DWORD PTR _shifts[ecx+eax*8]
	movzx	eax, BYTE PTR _d$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	add	eax, DWORD PTR _j$[ebp]
	movzx	ecx, BYTE PTR _BC$[ebp]
	cdq
	idiv	ecx
	mov	eax, DWORD PTR _a$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR _tmp$[ebp+edx], cl
	jmp	SHORT $LN5@ShiftRow
$LN4@ShiftRow:

; 90   : 		for(j = 0; j < BC; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@ShiftRow
$LN2@ShiftRow:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@ShiftRow:
	movzx	eax, BYTE PTR _BC$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN1@ShiftRow

; 91   : 			a[j][i] = tmp[j];

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	cl, BYTE PTR _tmp$[ebp+ecx]
	mov	BYTE PTR [edx+eax], cl
	jmp	SHORT $LN2@ShiftRow
$LN1@ShiftRow:

; 92   : 	}

	jmp	$LN8@ShiftRow
$LN10@ShiftRow:

; 93   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@ShiftRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@ShiftRow:
	DD	1
	DD	$LN13@ShiftRow
$LN13@ShiftRow:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN12@ShiftRow
$LN12@ShiftRow:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?ShiftRow@@YAXQAY03EEE@Z ENDP				; ShiftRow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?KeyAddition@@YAXQAY03E0E@Z
_TEXT	SEGMENT
_j$ = -20						; size = 4
_i$ = -8						; size = 4
_a$ = 8							; size = 4
_rk$ = 12						; size = 4
_BC$ = 16						; size = 1
?KeyAddition@@YAXQAY03E0E@Z PROC			; KeyAddition, COMDAT

; 71   : void KeyAddition(word8 a[4][4], word8 rk[4][4], word8 BC) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 72   : 	// XOR corresponding text input and round key input bytes
; 73   : 	int i, j;
; 74   : 	
; 75   : 	for(i = 0; i < BC; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@KeyAdditio
$LN5@KeyAdditio:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@KeyAdditio:
	movzx	eax, BYTE PTR _BC$[ebp]
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@KeyAdditio

; 76   :    	for(j = 0; j < 4; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@KeyAdditio
$LN2@KeyAdditio:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@KeyAdditio:
	cmp	DWORD PTR _j$[ebp], 4
	jge	SHORT $LN1@KeyAdditio

; 77   : 			a[i][j] ^= rk[i][j];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _rk$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	eax, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR _j$[ebp]
	movzx	edx, BYTE PTR [edx+ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	BYTE PTR [eax+ecx], dl
	jmp	SHORT $LN2@KeyAdditio
$LN1@KeyAdditio:
	jmp	SHORT $LN5@KeyAdditio
$LN7@KeyAdditio:

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyAddition@@YAXQAY03E0E@Z ENDP			; KeyAddition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?mul@@YAEEE@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
?mul@@YAEEE@Z PROC					; mul, COMDAT

; 61   : word8 mul(word8 a, word8 b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 62   :    // multiply two elements of GF(2^m)
; 63   :    // needed for MixColumn and InvMixColumn
; 64   :    
; 65   : 	if (a && b)

	movzx	eax, BYTE PTR _a$[ebp]
	test	eax, eax
	je	SHORT $LN2@mul
	movzx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	je	SHORT $LN2@mul

; 66   : 		return Alogtable[(Logtable[a] + Logtable[b])%255];

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR ?Logtable@@3PAEA[eax]
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR ?Logtable@@3PAEA[ecx]
	add	eax, edx
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	al, BYTE PTR ?Alogtable@@3PAEA[edx]
	jmp	SHORT $LN3@mul

; 67   : 	else

	jmp	SHORT $LN3@mul
$LN2@mul:

; 68   : 		return 0;

	xor	al, al
$LN3@mul:

; 69   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?mul@@YAEEE@Z ENDP					; mul
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?cipherUpdateRounds@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2H@Z
_TEXT	SEGMENT
tv74 = -236						; size = 4
_block$ = -36						; size = 16
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_input$ = 16						; size = 4
_inputLen$ = 20						; size = 4
_outBuffer$ = 24					; size = 4
_rounds$ = 28						; size = 4
?cipherUpdateRounds@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2H@Z PROC ; cipherUpdateRounds, COMDAT

; 765  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 766  : #ifdef _MSC_VER
; 767  : 	#pragma warning( disable : 4100 ) // warning C4100: <variable name> : unreferenced formal parameter
; 768  : #endif
; 769  : 
; 770  : 	int j;
; 771  : 	word8 block[4][4];
; 772  : 
; 773  : 	if (cipher == NULL ||
; 774  : 		key == NULL) {

	cmp	DWORD PTR _cipher$[ebp], 0
	je	SHORT $LN12@cipherUpda
	cmp	DWORD PTR _key$[ebp], 0
	jne	SHORT $LN13@cipherUpda
$LN12@cipherUpda:

; 775  : 		return BAD_CIPHER_STATE;

	mov	eax, -5					; fffffffbH
	jmp	$LN14@cipherUpda
$LN13@cipherUpda:

; 776  : 	}
; 777  : 
; 778  : 	for (j = 3; j >= 0; j--) {

	mov	DWORD PTR _j$[ebp], 3
	jmp	SHORT $LN11@cipherUpda
$LN10@cipherUpda:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN11@cipherUpda:
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN9@cipherUpda

; 779  : 		// parse input stream into rectangular array
; 780  :   		*((word32*)block[j]) = *((word32*)(input+4*j));

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _block$[ebp+eax*4], ecx

; 781  : 	}

	jmp	SHORT $LN10@cipherUpda
$LN9@cipherUpda:

; 782  : 
; 783  : 	switch (key->direction) {

	mov	eax, DWORD PTR _key$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv74[ebp], cl
	cmp	BYTE PTR tv74[ebp], 0
	je	SHORT $LN6@cipherUpda
	cmp	BYTE PTR tv74[ebp], 1
	je	SHORT $LN5@cipherUpda
	jmp	SHORT $LN4@cipherUpda
$LN6@cipherUpda:

; 784  : 	case DIR_ENCRYPT:
; 785  : 		rijndaelEncryptRound (block, key->keySched, rounds);

	mov	eax, DWORD PTR _rounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	add	ecx, 42					; 0000002aH
	push	ecx
	lea	edx, DWORD PTR _block$[ebp]
	push	edx
	call	?rijndaelEncryptRound@@YAHQAY03EQAY133EH@Z ; rijndaelEncryptRound
	add	esp, 12					; 0000000cH

; 786  : 	break;

	jmp	SHORT $LN7@cipherUpda
$LN5@cipherUpda:

; 787  : 		
; 788  : 	case DIR_DECRYPT:
; 789  : 		rijndaelDecryptRound (block, key->keySched, rounds);

	mov	eax, DWORD PTR _rounds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	add	ecx, 42					; 0000002aH
	push	ecx
	lea	edx, DWORD PTR _block$[ebp]
	push	edx
	call	?rijndaelDecryptRound@@YAHQAY03EQAY133EH@Z ; rijndaelDecryptRound
	add	esp, 12					; 0000000cH

; 790  : 	break;

	jmp	SHORT $LN7@cipherUpda
$LN4@cipherUpda:

; 791  : 		
; 792  : 	default: return BAD_KEY_DIR;

	or	eax, -1
	jmp	SHORT $LN14@cipherUpda
$LN7@cipherUpda:

; 793  : 	} 
; 794  : 
; 795  : 	for (j = 3; j >= 0; j--) {

	mov	DWORD PTR _j$[ebp], 3
	jmp	SHORT $LN3@cipherUpda
$LN2@cipherUpda:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@cipherUpda:
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN1@cipherUpda

; 796  : 		// parse rectangular array into output ciphertext bytes
; 797  : 		*((word32*)(outBuffer+4*j)) = *((word32*)block[j]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _outBuffer$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _block$[ebp+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 798  : 	}

	jmp	SHORT $LN2@cipherUpda
$LN1@cipherUpda:

; 799  : 	
; 800  : 	return TRUE;

	mov	eax, 1
$LN14@cipherUpda:

; 801  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@cipherUpda
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@cipherUpda:
	DD	1
	DD	$LN17@cipherUpda
$LN17@cipherUpda:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN16@cipherUpda
$LN16@cipherUpda:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?cipherUpdateRounds@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2H@Z ENDP ; cipherUpdateRounds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?blockDecrypt@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2@Z
_TEXT	SEGMENT
tv76 = -296						; size = 4
_inputLen$ = -96					; size = 4
_iv$ = -84						; size = 16
_block$ = -60						; size = 16
_numBlocks$ = -36					; size = 4
_k$ = -24						; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_input$ = 16						; size = 4
_inputByteLen$ = 20					; size = 4
_outBuffer$ = 24					; size = 4
?blockDecrypt@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2@Z PROC ; blockDecrypt, COMDAT

; 644  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 645  : 	int i, k, numBlocks;
; 646  : 	word8 block[16], iv[4][4];
; 647  : 	int inputLen = inputByteLen*8;

	mov	eax, DWORD PTR _inputByteLen$[ebp]
	shl	eax, 3
	mov	DWORD PTR _inputLen$[ebp], eax

; 648  : 
; 649  : 	if (cipher == NULL ||
; 650  : 		key == NULL ||
; 651  : 		cipher->mode != MODE_CFB1 && key->direction == DIR_ENCRYPT) {

	cmp	DWORD PTR _cipher$[ebp], 0
	je	SHORT $LN19@blockDecry
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN19@blockDecry
	mov	eax, DWORD PTR _cipher$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 3
	je	SHORT $LN20@blockDecry
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN20@blockDecry
$LN19@blockDecry:

; 652  : 		return BAD_CIPHER_STATE;

	mov	eax, -5					; fffffffbH
	jmp	$LN21@blockDecry
$LN20@blockDecry:

; 653  : 	}
; 654  : 	
; 655  : 
; 656  : 	numBlocks = inputLen/128;

	mov	eax, DWORD PTR _inputLen$[ebp]
	cdq
	and	edx, 127				; 0000007fH
	add	eax, edx
	sar	eax, 7
	mov	DWORD PTR _numBlocks$[ebp], eax

; 657  : 	
; 658  : 	switch (cipher->mode) {

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv76[ebp], cl
	cmp	BYTE PTR tv76[ebp], 1
	je	SHORT $LN16@blockDecry
	cmp	BYTE PTR tv76[ebp], 2
	je	SHORT $LN12@blockDecry
	cmp	BYTE PTR tv76[ebp], 3
	je	$LN8@blockDecry
	jmp	$LN1@blockDecry
$LN16@blockDecry:

; 659  : 	case MODE_ECB: 
; 660  : 		for (i = numBlocks; i > 0; i--) { 

	mov	eax, DWORD PTR _numBlocks$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN15@blockDecry
$LN14@blockDecry:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@blockDecry:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN13@blockDecry

; 661  : 
; 662  : 			rijndaelDecrypt (input, outBuffer, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	mov	ecx, DWORD PTR _outBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	?rijndaelDecrypt@@YAHQAE0QAY133E@Z	; rijndaelDecrypt
	add	esp, 12					; 0000000cH

; 663  : 
; 664  : 			input += 16;

	mov	eax, DWORD PTR _input$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _input$[ebp], eax

; 665  : 			outBuffer += 16;

	mov	eax, DWORD PTR _outBuffer$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _outBuffer$[ebp], eax

; 666  : 
; 667  : 		}

	jmp	SHORT $LN14@blockDecry
$LN13@blockDecry:

; 668  : 		break;

	jmp	$LN17@blockDecry
$LN12@blockDecry:

; 669  : 		
; 670  : 	case MODE_CBC:
; 671  : 		// first block 
; 672  : 
; 673  : 		rijndaelDecrypt (input, block, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	lea	ecx, DWORD PTR _block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	?rijndaelDecrypt@@YAHQAE0QAY133E@Z	; rijndaelDecrypt
	add	esp, 12					; 0000000cH

; 674  : #if STRICT_ALIGN
; 675  : 		memcpy(outBuffer,cipher->IV,16); 
; 676  :   		*((word32*)(outBuffer)) ^= *((word32*)block);
; 677  :   		*((word32*)(outBuffer+4)) ^= *((word32*)(block+4));
; 678  :   		*((word32*)(outBuffer+8)) ^= *((word32*)(block+8));
; 679  :   		*((word32*)(outBuffer+12)) ^= *((word32*)(block+12));
; 680  : #else
; 681  :   		*((word32*)(outBuffer)) = *((word32*)block) ^ *((word32*)(cipher->IV));

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax+1]
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	DWORD PTR [edx], ecx

; 682  :   		*((word32*)(outBuffer+4)) = *((word32*)(block+4)) ^ *((word32*)(cipher->IV+4));

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+4]
	xor	ecx, DWORD PTR [eax+5]
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 683  :   		*((word32*)(outBuffer+8)) = *((word32*)(block+8)) ^ *((word32*)(cipher->IV+8));

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+8]
	xor	ecx, DWORD PTR [eax+9]
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 684  :   		*((word32*)(outBuffer+12)) = *((word32*)(block+12)) ^ *((word32*)(cipher->IV+12));

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+12]
	xor	ecx, DWORD PTR [eax+13]
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 685  : #endif
; 686  : 		
; 687  : 		// next blocks
; 688  : 		for (i = numBlocks-1; i > 0; i--) { 

	mov	eax, DWORD PTR _numBlocks$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN11@blockDecry
$LN10@blockDecry:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@blockDecry:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN9@blockDecry

; 689  : 		
; 690  : 			rijndaelDecrypt (input, block, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	lea	ecx, DWORD PTR _block$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	?rijndaelDecrypt@@YAHQAE0QAY133E@Z	; rijndaelDecrypt
	add	esp, 12					; 0000000cH

; 691  : 			
; 692  : 			*((word32*)(outBuffer+16)) = *((word32*)block) ^
; 693  : 					*((word32*)(input-16));

	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax-16]
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 694  : 			*((word32*)(outBuffer+20)) = *((word32*)(block+4)) ^
; 695  : 					*((word32*)(input-12));

	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+4]
	xor	ecx, DWORD PTR [eax-12]
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 696  : 			*((word32*)(outBuffer+24)) = *((word32*)(block+8)) ^
; 697  : 					*((word32*)(input-8));

	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+8]
	xor	ecx, DWORD PTR [eax-8]
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 698  : 			*((word32*)(outBuffer+28)) = *((word32*)(block+12)) ^
; 699  : 					*((word32*)(input-4));

	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+12]
	xor	ecx, DWORD PTR [eax-4]
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 700  : 			
; 701  : 			input += 16;

	mov	eax, DWORD PTR _input$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _input$[ebp], eax

; 702  : 			outBuffer += 16;

	mov	eax, DWORD PTR _outBuffer$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _outBuffer$[ebp], eax

; 703  : 		}

	jmp	SHORT $LN10@blockDecry
$LN9@blockDecry:

; 704  : 		break;

	jmp	$LN17@blockDecry
$LN8@blockDecry:

; 705  : 	
; 706  : 	case MODE_CFB1:
; 707  : #if STRICT_ALIGN 
; 708  : 		memcpy(iv,cipher->IV,16); 
; 709  : #else
; 710  : 		*((word32*)iv[0]) = *((word32*)(cipher->IV));

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cipher$[ebp]
	mov	eax, DWORD PTR [edx+1]
	mov	DWORD PTR _iv$[ebp+ecx], eax

; 711  : 		*((word32*)iv[1]) = *((word32*)(cipher->IV+4));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cipher$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	DWORD PTR _iv$[ebp+eax], edx

; 712  : 		*((word32*)iv[2]) = *((word32*)(cipher->IV+8));

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _cipher$[ebp]
	mov	edx, DWORD PTR [ecx+9]
	mov	DWORD PTR _iv$[ebp+eax], edx

; 713  : 		*((word32*)iv[3]) = *((word32*)(cipher->IV+12));

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cipher$[ebp]
	mov	eax, DWORD PTR [edx+13]
	mov	DWORD PTR _iv$[ebp+ecx], eax

; 714  : #endif
; 715  : 		for (i = numBlocks; i > 0; i--) {

	mov	eax, DWORD PTR _numBlocks$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN7@blockDecry
$LN6@blockDecry:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@blockDecry:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN5@blockDecry

; 716  : 			for (k = 0; k < 128; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN4@blockDecry
$LN3@blockDecry:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN4@blockDecry:
	cmp	DWORD PTR _k$[ebp], 128			; 00000080H
	jge	$LN2@blockDecry

; 717  : 				*((word32*)block) = *((word32*)iv[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _iv$[ebp+ecx]
	mov	DWORD PTR _block$[ebp], edx

; 718  : 				*((word32*)(block+4)) = *((word32*)iv[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _iv$[ebp+eax]
	mov	DWORD PTR _block$[ebp+4], ecx

; 719  : 				*((word32*)(block+8)) = *((word32*)iv[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _iv$[ebp+eax]
	mov	DWORD PTR _block$[ebp+8], ecx

; 720  : 				*((word32*)(block+12)) = *((word32*)iv[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _iv$[ebp+ecx]
	mov	DWORD PTR _block$[ebp+12], edx

; 721  : 
; 722  : 				rijndaelEncrypt (block, block, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	lea	ecx, DWORD PTR _block$[ebp]
	push	ecx
	lea	edx, DWORD PTR _block$[ebp]
	push	edx
	call	?rijndaelEncrypt@@YAHQAE0QAY133E@Z	; rijndaelEncrypt
	add	esp, 12					; 0000000cH

; 723  : 				iv[0][0] = (iv[0][0] << 1) | (iv[0][1] >> 7);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	sar	eax, 7
	or	edx, eax
	mov	ecx, 4
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 0
	mov	BYTE PTR [ecx+eax], dl

; 724  : 				iv[0][1] = (iv[0][1] << 1) | (iv[0][2] >> 7);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR [eax+edx], cl

; 725  : 				iv[0][2] = (iv[0][2] << 1) | (iv[0][3] >> 7);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 3
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR [eax+edx], cl

; 726  : 				iv[0][3] = (iv[0][3] << 1) | (iv[1][0] >> 7);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	edx, BYTE PTR [edx+ecx]
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	sar	ecx, 7
	or	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	mov	BYTE PTR [eax+ecx], dl

; 727  : 				iv[1][0] = (iv[1][0] << 1) | (iv[1][1] >> 7);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	sar	eax, 7
	or	ecx, eax
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 0
	mov	BYTE PTR [eax+edx], cl

; 728  : 				iv[1][1] = (iv[1][1] << 1) | (iv[1][2] >> 7);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	sar	edx, 7
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR [edx+ecx], al

; 729  : 				iv[1][2] = (iv[1][2] << 1) | (iv[1][3] >> 7);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	movzx	edx, BYTE PTR [edx+ecx]
	sar	edx, 7
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	mov	BYTE PTR [edx+ecx], al

; 730  : 				iv[1][3] = (iv[1][3] << 1) | (iv[2][0] >> 7);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	sar	eax, 7
	or	ecx, eax
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	mov	BYTE PTR [eax+edx], cl

; 731  : 				iv[2][0] = (iv[2][0] << 1) | (iv[2][1] >> 7);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	sar	eax, 7
	or	ecx, eax
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 0
	mov	BYTE PTR [eax+edx], cl

; 732  : 				iv[2][1] = (iv[2][1] << 1) | (iv[2][2] >> 7);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	sar	edx, 7
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR [edx+ecx], al

; 733  : 				iv[2][2] = (iv[2][2] << 1) | (iv[2][3] >> 7);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	movzx	edx, BYTE PTR [edx+ecx]
	sar	edx, 7
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	mov	BYTE PTR [edx+ecx], al

; 734  : 				iv[2][3] = (iv[2][3] << 1) | (iv[3][0] >> 7);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 0
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	shl	eax, 1
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 3
	mov	BYTE PTR [edx+eax], cl

; 735  : 				iv[3][0] = (iv[3][0] << 1) | (iv[3][1] >> 7);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	sar	eax, 7
	or	edx, eax
	mov	ecx, 4
	imul	eax, ecx, 3
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 0
	mov	BYTE PTR [ecx+eax], dl

; 736  : 				iv[3][1] = (iv[3][1] << 1) | (iv[3][2] >> 7);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 3
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR [eax+edx], cl

; 737  : 				iv[3][2] = (iv[3][2] << 1) | (iv[3][3] >> 7);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 3
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 3
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR [eax+edx], cl

; 738  : 				iv[3][3] = (word8)((iv[3][3] << 1) | (input[k/8] >> (7-(k&7))) & 1);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	ebx, BYTE PTR [edx+ecx]
	shl	ebx, 1
	mov	eax, DWORD PTR _k$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, DWORD PTR _input$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	mov	ecx, DWORD PTR _k$[ebp]
	and	ecx, 7
	mov	edx, 7
	sub	edx, ecx
	mov	ecx, edx
	sar	eax, cl
	and	eax, 1
	or	ebx, eax
	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	mov	BYTE PTR [edx+ecx], bl

; 739  : 				outBuffer[k/8] ^= (block[0] & 0x80) >> (k & 7);

	mov	eax, DWORD PTR _k$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	edx, BYTE PTR _block$[ebp+edx]
	and	edx, 128				; 00000080H
	mov	ecx, DWORD PTR _k$[ebp]
	and	ecx, 7
	sar	edx, cl
	mov	ecx, DWORD PTR _outBuffer$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax]
	xor	ecx, edx
	mov	eax, DWORD PTR _k$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	BYTE PTR [edx+eax], cl

; 740  : 			}

	jmp	$LN3@blockDecry
$LN2@blockDecry:

; 741  : 		}

	jmp	$LN6@blockDecry
$LN5@blockDecry:

; 742  : 		break;

	jmp	SHORT $LN17@blockDecry
$LN1@blockDecry:

; 743  : 
; 744  : 	default:
; 745  : 		return BAD_CIPHER_STATE;

	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN21@blockDecry
$LN17@blockDecry:

; 746  : 	}
; 747  : 	
; 748  : 	return numBlocks*128;

	mov	eax, DWORD PTR _numBlocks$[ebp]
	shl	eax, 7
$LN21@blockDecry:

; 749  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@blockDecry
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@blockDecry:
	DD	2
	DD	$LN25@blockDecry
$LN25@blockDecry:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN23@blockDecry
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN24@blockDecry
$LN24@blockDecry:
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	0
$LN23@blockDecry:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?blockDecrypt@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2@Z ENDP ; blockDecrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?blockEncrypt@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2@Z
_TEXT	SEGMENT
tv73 = -296						; size = 4
_inputLen$ = -96					; size = 4
_iv$ = -84						; size = 16
_block$ = -60						; size = 16
_numBlocks$ = -36					; size = 4
_k$ = -24						; size = 4
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_cipher$ = 8						; size = 4
_key$ = 12						; size = 4
_input$ = 16						; size = 4
_inputByteLen$ = 20					; size = 4
_outBuffer$ = 24					; size = 4
?blockEncrypt@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2@Z PROC ; blockEncrypt, COMDAT

; 549  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 550  : 	int i, k, numBlocks;
; 551  : 	word8 block[16], iv[4][4];
; 552  : 	int inputLen = inputByteLen*8;

	mov	eax, DWORD PTR _inputByteLen$[ebp]
	shl	eax, 3
	mov	DWORD PTR _inputLen$[ebp], eax

; 553  : 
; 554  : 	if (cipher == NULL ||
; 555  : 		key == NULL ||
; 556  : 		key->direction == DIR_DECRYPT) {

	cmp	DWORD PTR _cipher$[ebp], 0
	je	SHORT $LN19@blockEncry
	cmp	DWORD PTR _key$[ebp], 0
	je	SHORT $LN19@blockEncry
	mov	eax, DWORD PTR _key$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	jne	SHORT $LN20@blockEncry
$LN19@blockEncry:

; 557  : 		return BAD_CIPHER_STATE;

	mov	eax, -5					; fffffffbH
	jmp	$LN21@blockEncry
$LN20@blockEncry:

; 558  : 	}
; 559  : 	
; 560  : 
; 561  : 	numBlocks = inputLen/128;

	mov	eax, DWORD PTR _inputLen$[ebp]
	cdq
	and	edx, 127				; 0000007fH
	add	eax, edx
	sar	eax, 7
	mov	DWORD PTR _numBlocks$[ebp], eax

; 562  : 	
; 563  : 	switch (cipher->mode) {

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv73[ebp], cl
	cmp	BYTE PTR tv73[ebp], 1
	je	SHORT $LN16@blockEncry
	cmp	BYTE PTR tv73[ebp], 2
	je	SHORT $LN12@blockEncry
	cmp	BYTE PTR tv73[ebp], 3
	je	$LN8@blockEncry
	jmp	$LN1@blockEncry
$LN16@blockEncry:

; 564  : 	case MODE_ECB: 
; 565  : 		for (i = numBlocks; i > 0; i--) {

	mov	eax, DWORD PTR _numBlocks$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN15@blockEncry
$LN14@blockEncry:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@blockEncry:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN13@blockEncry

; 566  : 			
; 567  : 			rijndaelEncrypt (input, outBuffer, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	mov	ecx, DWORD PTR _outBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	?rijndaelEncrypt@@YAHQAE0QAY133E@Z	; rijndaelEncrypt
	add	esp, 12					; 0000000cH

; 568  : 			
; 569  : 			input += 16;

	mov	eax, DWORD PTR _input$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _input$[ebp], eax

; 570  : 			outBuffer += 16;

	mov	eax, DWORD PTR _outBuffer$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _outBuffer$[ebp], eax

; 571  : 		}

	jmp	SHORT $LN14@blockEncry
$LN13@blockEncry:

; 572  : 		break;

	jmp	$LN17@blockEncry
$LN12@blockEncry:

; 573  : 		
; 574  : 	case MODE_CBC:
; 575  : #if STRICT_ALIGN 
; 576  : 		memcpy(block,cipher->IV,16); 
; 577  : #else
; 578  : 		*((word32*)block) =  *((word32*)(cipher->IV));

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR _block$[ebp], ecx

; 579  : 		*((word32*)(block+4)) =  *((word32*)(cipher->IV+4));

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	ecx, DWORD PTR [eax+5]
	mov	DWORD PTR _block$[ebp+4], ecx

; 580  : 		*((word32*)(block+8)) =  *((word32*)(cipher->IV+8));

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	ecx, DWORD PTR [eax+9]
	mov	DWORD PTR _block$[ebp+8], ecx

; 581  : 		*((word32*)(block+12)) =  *((word32*)(cipher->IV+12));

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	ecx, DWORD PTR [eax+13]
	mov	DWORD PTR _block$[ebp+12], ecx

; 582  : #endif
; 583  : 		
; 584  : 		for (i = numBlocks; i > 0; i--) {

	mov	eax, DWORD PTR _numBlocks$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN11@blockEncry
$LN10@blockEncry:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@blockEncry:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN9@blockEncry

; 585  : 			*((word32*)block) ^= *((word32*)(input));

	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _block$[ebp]
	xor	ecx, DWORD PTR [eax]
	mov	DWORD PTR _block$[ebp], ecx

; 586  : 			*((word32*)(block+4)) ^= *((word32*)(input+4));

	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+4]
	xor	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _block$[ebp+4], ecx

; 587  : 			*((word32*)(block+8)) ^= *((word32*)(input+8));

	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+8]
	xor	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _block$[ebp+8], ecx

; 588  : 			*((word32*)(block+12)) ^= *((word32*)(input+12));

	mov	eax, DWORD PTR _input$[ebp]
	mov	ecx, DWORD PTR _block$[ebp+12]
	xor	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _block$[ebp+12], ecx

; 589  : 
; 590  : 			rijndaelEncrypt (block, outBuffer, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	mov	ecx, DWORD PTR _outBuffer$[ebp]
	push	ecx
	lea	edx, DWORD PTR _block$[ebp]
	push	edx
	call	?rijndaelEncrypt@@YAHQAE0QAY133E@Z	; rijndaelEncrypt
	add	esp, 12					; 0000000cH

; 591  : 			
; 592  : 			input += 16;

	mov	eax, DWORD PTR _input$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _input$[ebp], eax

; 593  : 			outBuffer += 16;

	mov	eax, DWORD PTR _outBuffer$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _outBuffer$[ebp], eax

; 594  : 		}

	jmp	SHORT $LN10@blockEncry
$LN9@blockEncry:

; 595  : 		break;

	jmp	$LN17@blockEncry
$LN8@blockEncry:

; 596  : 	
; 597  : 	case MODE_CFB1:
; 598  : #if STRICT_ALIGN 
; 599  : 		memcpy(iv,cipher->IV,16); 
; 600  : #else
; 601  : 		*((word32*)iv[0]) = *((word32*)(cipher->IV));

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cipher$[ebp]
	mov	eax, DWORD PTR [edx+1]
	mov	DWORD PTR _iv$[ebp+ecx], eax

; 602  : 		*((word32*)iv[1]) = *((word32*)(cipher->IV+4));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _cipher$[ebp]
	mov	edx, DWORD PTR [ecx+5]
	mov	DWORD PTR _iv$[ebp+eax], edx

; 603  : 		*((word32*)iv[2]) = *((word32*)(cipher->IV+8));

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _cipher$[ebp]
	mov	edx, DWORD PTR [ecx+9]
	mov	DWORD PTR _iv$[ebp+eax], edx

; 604  : 		*((word32*)iv[3]) = *((word32*)(cipher->IV+12));

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _cipher$[ebp]
	mov	eax, DWORD PTR [edx+13]
	mov	DWORD PTR _iv$[ebp+ecx], eax

; 605  : #endif
; 606  : 		for (i = numBlocks; i > 0; i--) {

	mov	eax, DWORD PTR _numBlocks$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN7@blockEncry
$LN6@blockEncry:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@blockEncry:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN5@blockEncry

; 607  : 			for (k = 0; k < 128; k++) {

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN4@blockEncry
$LN3@blockEncry:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN4@blockEncry:
	cmp	DWORD PTR _k$[ebp], 128			; 00000080H
	jge	$LN2@blockEncry

; 608  : 				*((word32*)block) = *((word32*)iv[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _iv$[ebp+ecx]
	mov	DWORD PTR _block$[ebp], edx

; 609  : 				*((word32*)(block+4)) = *((word32*)iv[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _iv$[ebp+eax]
	mov	DWORD PTR _block$[ebp+4], ecx

; 610  : 				*((word32*)(block+8)) = *((word32*)iv[2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _iv$[ebp+eax]
	mov	DWORD PTR _block$[ebp+8], ecx

; 611  : 				*((word32*)(block+12)) = *((word32*)iv[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _iv$[ebp+ecx]
	mov	DWORD PTR _block$[ebp+12], edx

; 612  : 
; 613  : 				rijndaelEncrypt (block, block, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	lea	ecx, DWORD PTR _block$[ebp]
	push	ecx
	lea	edx, DWORD PTR _block$[ebp]
	push	edx
	call	?rijndaelEncrypt@@YAHQAE0QAY133E@Z	; rijndaelEncrypt
	add	esp, 12					; 0000000cH

; 614  : 				outBuffer[k/8] ^= (block[0] & 0x80) >> (k & 7);

	mov	eax, DWORD PTR _k$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	edx, BYTE PTR _block$[ebp+edx]
	and	edx, 128				; 00000080H
	mov	ecx, DWORD PTR _k$[ebp]
	and	ecx, 7
	sar	edx, cl
	mov	ecx, DWORD PTR _outBuffer$[ebp]
	movzx	ecx, BYTE PTR [ecx+eax]
	xor	ecx, edx
	mov	eax, DWORD PTR _k$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, DWORD PTR _outBuffer$[ebp]
	mov	BYTE PTR [edx+eax], cl

; 615  : 				iv[0][0] = (iv[0][0] << 1) | (iv[0][1] >> 7);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	sar	eax, 7
	or	edx, eax
	mov	ecx, 4
	imul	eax, ecx, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 0
	mov	BYTE PTR [ecx+eax], dl

; 616  : 				iv[0][1] = (iv[0][1] << 1) | (iv[0][2] >> 7);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR [eax+edx], cl

; 617  : 				iv[0][2] = (iv[0][2] << 1) | (iv[0][3] >> 7);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 0
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 3
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR [eax+edx], cl

; 618  : 				iv[0][3] = (iv[0][3] << 1) | (iv[1][0] >> 7);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	edx, BYTE PTR [edx+ecx]
	shl	edx, 1
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	sar	ecx, 7
	or	edx, ecx
	mov	eax, 4
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	mov	BYTE PTR [eax+ecx], dl

; 619  : 				iv[1][0] = (iv[1][0] << 1) | (iv[1][1] >> 7);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	sar	eax, 7
	or	ecx, eax
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 0
	mov	BYTE PTR [eax+edx], cl

; 620  : 				iv[1][1] = (iv[1][1] << 1) | (iv[1][2] >> 7);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	sar	edx, 7
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR [edx+ecx], al

; 621  : 				iv[1][2] = (iv[1][2] << 1) | (iv[1][3] >> 7);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	movzx	edx, BYTE PTR [edx+ecx]
	sar	edx, 7
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 0
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	mov	BYTE PTR [edx+ecx], al

; 622  : 				iv[1][3] = (iv[1][3] << 1) | (iv[2][0] >> 7);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	sar	eax, 7
	or	ecx, eax
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	mov	BYTE PTR [eax+edx], cl

; 623  : 				iv[2][0] = (iv[2][0] << 1) | (iv[2][1] >> 7);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	sar	eax, 7
	or	ecx, eax
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 0
	mov	BYTE PTR [eax+edx], cl

; 624  : 				iv[2][1] = (iv[2][1] << 1) | (iv[2][2] >> 7);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	sar	edx, 7
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR [edx+ecx], al

; 625  : 				iv[2][2] = (iv[2][2] << 1) | (iv[2][3] >> 7);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	movzx	edx, BYTE PTR [edx+ecx]
	sar	edx, 7
	or	eax, edx
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 1
	mov	BYTE PTR [edx+ecx], al

; 626  : 				iv[2][3] = (iv[2][3] << 1) | (iv[3][0] >> 7);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 0
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	shl	eax, 1
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 3
	mov	BYTE PTR [edx+eax], cl

; 627  : 				iv[3][0] = (iv[3][0] << 1) | (iv[3][1] >> 7);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	shl	edx, 1
	mov	eax, 4
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _iv$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	sar	eax, 7
	or	edx, eax
	mov	ecx, 4
	imul	eax, ecx, 3
	lea	ecx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 0
	mov	BYTE PTR [ecx+eax], dl

; 628  : 				iv[3][1] = (iv[3][1] << 1) | (iv[3][2] >> 7);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 3
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR [eax+edx], cl

; 629  : 				iv[3][2] = (iv[3][2] << 1) | (iv[3][3] >> 7);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	shl	ecx, 1
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _iv$[ebp+eax]
	mov	eax, 1
	imul	eax, eax, 3
	movzx	edx, BYTE PTR [edx+eax]
	sar	edx, 7
	or	ecx, edx
	mov	eax, 4
	imul	edx, eax, 3
	lea	eax, DWORD PTR _iv$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR [eax+edx], cl

; 630  : 				iv[3][3] = (word8)((iv[3][3] << 1) | (outBuffer[k/8] >> (7-(k&7))) & 1);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	ebx, BYTE PTR [edx+ecx]
	shl	ebx, 1
	mov	eax, DWORD PTR _k$[ebp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, DWORD PTR _outBuffer$[ebp]
	movzx	eax, BYTE PTR [edx+eax]
	mov	ecx, DWORD PTR _k$[ebp]
	and	ecx, 7
	mov	edx, 7
	sub	edx, ecx
	mov	ecx, edx
	sar	eax, cl
	and	eax, 1
	or	ebx, eax
	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _iv$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	mov	BYTE PTR [edx+ecx], bl

; 631  : 			}

	jmp	$LN3@blockEncry
$LN2@blockEncry:

; 632  : 		}

	jmp	$LN6@blockEncry
$LN5@blockEncry:

; 633  : 		break;

	jmp	SHORT $LN17@blockEncry
$LN1@blockEncry:

; 634  : 	
; 635  : 	default:
; 636  : 		return BAD_CIPHER_STATE;

	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN21@blockEncry
$LN17@blockEncry:

; 637  : 	}
; 638  : 	
; 639  : 	return numBlocks*128;

	mov	eax, DWORD PTR _numBlocks$[ebp]
	shl	eax, 7
$LN21@blockEncry:

; 640  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@blockEncry
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@blockEncry:
	DD	2
	DD	$LN25@blockEncry
$LN25@blockEncry:
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN23@blockEncry
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$LN24@blockEncry
$LN24@blockEncry:
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	0
$LN23@blockEncry:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?blockEncrypt@@YAHPAUcipherInstance@@PAUkeyInstance@@PAEH2@Z ENDP ; blockEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?cipherInit@@YAHPAUcipherInstance@@EPAD@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_cipher$ = 8						; size = 4
_mode$ = 12						; size = 1
_IV$ = 16						; size = 4
?cipherInit@@YAHPAUcipherInstance@@EPAD@Z PROC		; cipherInit, COMDAT

; 523  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 524  : 	int i;
; 525  : 	
; 526  : 	if ((mode == MODE_ECB) || (mode == MODE_CBC) || (mode == MODE_CFB1)) {

	movzx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 1
	je	SHORT $LN10@cipherInit
	movzx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 2
	je	SHORT $LN10@cipherInit
	movzx	eax, BYTE PTR _mode$[ebp]
	cmp	eax, 3
	jne	SHORT $LN11@cipherInit
$LN10@cipherInit:

; 527  : 		cipher->mode = mode;

	mov	eax, DWORD PTR _cipher$[ebp]
	mov	cl, BYTE PTR _mode$[ebp]
	mov	BYTE PTR [eax], cl

; 528  : 	} else {

	jmp	SHORT $LN9@cipherInit
$LN11@cipherInit:

; 529  : 		return BAD_CIPHER_MODE;

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN12@cipherInit
$LN9@cipherInit:

; 530  : 	}
; 531  : 	
; 532  : 
; 533  : 	if (IV != NULL) {

	cmp	DWORD PTR _IV$[ebp], 0
	je	SHORT $LN8@cipherInit

; 534  :  		for(i = 0; i < 16; i++) cipher->IV[i] = IV[i];

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@cipherInit
$LN6@cipherInit:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@cipherInit:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN5@cipherInit
	mov	eax, DWORD PTR _cipher$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _IV$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+1], dl
	jmp	SHORT $LN6@cipherInit
$LN5@cipherInit:

; 535  : 	}
; 536  : 	else

	jmp	SHORT $LN4@cipherInit
$LN8@cipherInit:

; 537  : 	{
; 538  : 		// KevinJ - Added this to just generate a random initialization vector
; 539  : 		for(i = 0; i < 16; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@cipherInit
$LN2@cipherInit:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@cipherInit:
	cmp	DWORD PTR _i$[ebp], 16			; 00000010H
	jge	SHORT $LN4@cipherInit

; 540  : 			cipher->IV[i]=(BYTE)randomMT();

	call	?randomMT@@YAIXZ			; randomMT
	mov	ecx, DWORD PTR _cipher$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+1], al
	jmp	SHORT $LN2@cipherInit
$LN4@cipherInit:

; 541  : 	}
; 542  : 
; 543  : 	return TRUE;

	mov	eax, 1
$LN12@cipherInit:

; 544  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cipherInit@@YAHPAUcipherInstance@@EPAD@Z ENDP		; cipherInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?makeKey@@YAHPAUkeyInstance@@EHPAD@Z
_TEXT	SEGMENT
_keyLen$ = -64						; size = 4
_i$ = -52						; size = 4
_k$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_direction$ = 12					; size = 1
_keyByteLen$ = 16					; size = 4
_keyMaterial$ = 20					; size = 4
?makeKey@@YAHPAUkeyInstance@@EHPAD@Z PROC		; makeKey, COMDAT

; 482  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 483  : 	word8 k[MAXKC][4];
; 484  : 	int i;
; 485  : 	int keyLen = keyByteLen*8;

	mov	eax, DWORD PTR _keyByteLen$[ebp]
	shl	eax, 3
	mov	DWORD PTR _keyLen$[ebp], eax

; 486  : 	
; 487  : 	if (key == NULL) {

	cmp	DWORD PTR _key$[ebp], 0
	jne	SHORT $LN13@makeKey

; 488  : 		return BAD_KEY_INSTANCE;

	mov	eax, -3					; fffffffdH
	jmp	$LN14@makeKey
$LN13@makeKey:

; 489  : 	}
; 490  : 
; 491  : 	if ((direction == DIR_ENCRYPT) || (direction == DIR_DECRYPT)) {

	movzx	eax, BYTE PTR _direction$[ebp]
	test	eax, eax
	je	SHORT $LN11@makeKey
	movzx	eax, BYTE PTR _direction$[ebp]
	cmp	eax, 1
	jne	SHORT $LN12@makeKey
$LN11@makeKey:

; 492  : 		key->direction = direction;

	mov	eax, DWORD PTR _key$[ebp]
	mov	cl, BYTE PTR _direction$[ebp]
	mov	BYTE PTR [eax], cl

; 493  : 	} else {

	jmp	SHORT $LN10@makeKey
$LN12@makeKey:

; 494  : 		return BAD_KEY_DIR;

	or	eax, -1
	jmp	$LN14@makeKey
$LN10@makeKey:

; 495  : 	}
; 496  : 
; 497  : 	if ((keyLen == 128) || (keyLen == 192) || (keyLen == 256)) { 

	cmp	DWORD PTR _keyLen$[ebp], 128		; 00000080H
	je	SHORT $LN8@makeKey
	cmp	DWORD PTR _keyLen$[ebp], 192		; 000000c0H
	je	SHORT $LN8@makeKey
	cmp	DWORD PTR _keyLen$[ebp], 256		; 00000100H
	jne	SHORT $LN9@makeKey
$LN8@makeKey:

; 498  : 		key->keyLen = keyLen;

	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _keyLen$[ebp]
	mov	DWORD PTR [eax+1], ecx

; 499  : 	} else {

	jmp	SHORT $LN7@makeKey
$LN9@makeKey:

; 500  : 		return BAD_KEY_MAT;

	mov	eax, -2					; fffffffeH
	jmp	$LN14@makeKey
$LN7@makeKey:

; 501  : 	}
; 502  : 
; 503  : 	if ( keyMaterial ) {

	cmp	DWORD PTR _keyMaterial$[ebp], 0
	je	SHORT $LN6@makeKey

; 504  : 		strncpy(key->keyMaterial, keyMaterial, keyByteLen);

	mov	eax, DWORD PTR _keyByteLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _keyMaterial$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	add	edx, 5
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 505  : 	} else {

	jmp	SHORT $LN5@makeKey
$LN6@makeKey:

; 506  : 		return BAD_KEY_MAT;

	mov	eax, -2					; fffffffeH
	jmp	$LN14@makeKey
$LN5@makeKey:

; 507  : 	}
; 508  : 
; 509  : 	ROUNDS = keyLen/32 + 6;

	mov	eax, DWORD PTR _keyLen$[ebp]
	cdq
	and	edx, 31					; 0000001fH
	add	eax, edx
	sar	eax, 5
	add	eax, 6
	mov	DWORD PTR ?ROUNDS@@3HA, eax		; ROUNDS

; 510  : 
; 511  : 	// initialize key schedule:
; 512  : 	for(i = 0; i < key->keyLen/8; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@makeKey
$LN3@makeKey:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@makeKey:
	mov	eax, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [eax+1]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@makeKey

; 513  : 		k[i / 4][i % 4] = (word8) key->keyMaterial[i]; 

	mov	eax, DWORD PTR _i$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	lea	eax, DWORD PTR _k$[ebp+eax*4]
	mov	ecx, DWORD PTR _i$[ebp]
	and	ecx, -2147483645			; 80000003H
	jns	SHORT $LN19@makeKey
	dec	ecx
	or	ecx, -4					; fffffffcH
	inc	ecx
$LN19@makeKey:
	mov	edx, DWORD PTR _key$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [edx+5]
	mov	BYTE PTR [eax+ecx], dl

; 514  : 	}

	jmp	SHORT $LN3@makeKey
$LN2@makeKey:

; 515  : 	rijndaelKeySched (k, key->keyLen, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+1]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	call	?rijndaelKeySched@@YAHQAY03EHQAY133E@Z	; rijndaelKeySched
	add	esp, 12					; 0000000cH

; 516  : 	if (direction == DIR_DECRYPT)

	movzx	eax, BYTE PTR _direction$[ebp]
	cmp	eax, 1
	jne	SHORT $LN1@makeKey

; 517  : 		rijndaelKeyEnctoDec (key->keyLen, key->keySched);

	mov	eax, DWORD PTR _key$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx+1]
	push	edx
	call	?rijndaelKeyEnctoDec@@YAHHQAY133E@Z	; rijndaelKeyEnctoDec
	add	esp, 8
$LN1@makeKey:

; 518  : 
; 519  : 	return TRUE;

	mov	eax, 1
$LN14@makeKey:

; 520  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@makeKey
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@makeKey:
	DD	1
	DD	$LN17@makeKey
$LN17@makeKey:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN16@makeKey
$LN16@makeKey:
	DB	107					; 0000006bH
	DB	0
?makeKey@@YAHPAUkeyInstance@@EHPAD@Z ENDP		; makeKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?rijndaelDecryptRound@@YAHQAY03EQAY133EH@Z
_TEXT	SEGMENT
_r$ = -8						; size = 4
_a$ = 8							; size = 4
_rk$ = 12						; size = 4
_rounds$ = 16						; size = 4
?rijndaelDecryptRound@@YAHQAY03EQAY133EH@Z PROC		; rijndaelDecryptRound, COMDAT

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 446  : 	int r;
; 447  : 	
; 448  : 
; 449  : 	// make number of rounds sane
; 450  : 	if (rounds > ROUNDS) rounds = ROUNDS;

	mov	eax, DWORD PTR _rounds$[ebp]
	cmp	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	jle	SHORT $LN5@rijndaelDe
	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	mov	DWORD PTR _rounds$[ebp], eax
$LN5@rijndaelDe:

; 451  : 
; 452  :         // First the special round:
; 453  : 	//   without InvMixColumn
; 454  : 	//   with extra KeyAddition
; 455  : 	
; 456  : 	KeyAddition(a,rk[ROUNDS],4);

	push	4
	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	?KeyAddition@@YAXQAY03E0E@Z		; KeyAddition
	add	esp, 12					; 0000000cH

; 457  : 	Substitution(a,Si,4);

	push	4
	push	OFFSET ?Si@@3PAEA			; Si
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?Substitution@@YAXQAY03EQAEE@Z		; Substitution
	add	esp, 12					; 0000000cH

; 458  : 	ShiftRow(a,1,4);              

	push	4
	push	1
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?ShiftRow@@YAXQAY03EEE@Z		; ShiftRow
	add	esp, 12					; 0000000cH

; 459  : 	
; 460  : 	// ROUNDS-1 ordinary rounds
; 461  : 	
; 462  : 	for(r = ROUNDS-1; r > rounds; r--) {

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	sub	eax, 1
	mov	DWORD PTR _r$[ebp], eax
	jmp	SHORT $LN4@rijndaelDe
$LN3@rijndaelDe:
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, 1
	mov	DWORD PTR _r$[ebp], eax
$LN4@rijndaelDe:
	mov	eax, DWORD PTR _r$[ebp]
	cmp	eax, DWORD PTR _rounds$[ebp]
	jle	SHORT $LN2@rijndaelDe

; 463  : 		KeyAddition(a,rk[r],4);

	push	4
	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	?KeyAddition@@YAXQAY03E0E@Z		; KeyAddition
	add	esp, 12					; 0000000cH

; 464  : 		InvMixColumn(a,4);      

	push	4
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?InvMixColumn@@YAXQAY03EE@Z		; InvMixColumn
	add	esp, 8

; 465  : 		Substitution(a,Si,4);

	push	4
	push	OFFSET ?Si@@3PAEA			; Si
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?Substitution@@YAXQAY03EQAEE@Z		; Substitution
	add	esp, 12					; 0000000cH

; 466  : 		ShiftRow(a,1,4);                

	push	4
	push	1
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?ShiftRow@@YAXQAY03EEE@Z		; ShiftRow
	add	esp, 12					; 0000000cH

; 467  : 	}

	jmp	SHORT $LN3@rijndaelDe
$LN2@rijndaelDe:

; 468  : 	
; 469  : 	if (rounds == 0) {

	cmp	DWORD PTR _rounds$[ebp], 0
	jne	SHORT $LN1@rijndaelDe

; 470  : 		// End with the extra key addition
; 471  : 			
; 472  : 		KeyAddition(a,rk[0],4);

	push	4
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebp]
	push	edx
	call	?KeyAddition@@YAXQAY03E0E@Z		; KeyAddition
	add	esp, 12					; 0000000cH
$LN1@rijndaelDe:

; 473  : 	}    
; 474  : 
; 475  : 	return 0;

	xor	eax, eax

; 476  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?rijndaelDecryptRound@@YAHQAY03EQAY133EH@Z ENDP		; rijndaelDecryptRound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?rijndaelDecrypt@@YAHQAE0QAY133E@Z
_TEXT	SEGMENT
_temp$ = -36						; size = 16
_r$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_rk$ = 16						; size = 4
?rijndaelDecrypt@@YAHQAE0QAY133E@Z PROC			; rijndaelDecrypt, COMDAT

; 360  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 361  : 	int r;
; 362  :    word8 temp[4][4];
; 363  : 	
; 364  : 
; 365  :     *((word32*)temp[0]) = *((word32*)a) ^ *((word32*)rk[ROUNDS][0]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 366  :     *((word32*)temp[1]) = *((word32*)(a+4)) ^ *((word32*)rk[ROUNDS][1]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [edx+4]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _temp$[ebp+eax], edx

; 367  :     *((word32*)temp[2]) = *((word32*)(a+8)) ^ *((word32*)rk[ROUNDS][2]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [edx+8]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _temp$[ebp+eax], edx

; 368  :     *((word32*)temp[3]) = *((word32*)(a+12)) ^ *((word32*)rk[ROUNDS][3]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 369  :     *((word32*)b) = *((word32*)T5[temp[0][0]])
; 370  :            ^ *((word32*)T6[temp[3][1]])
; 371  :            ^ *((word32*)T7[temp[2][2]]) 
; 372  :            ^ *((word32*)T8[temp[1][3]]);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _temp$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR ?T5@@3PAY03EA[edx*4]
	xor	ecx, DWORD PTR ?T6@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T7@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T8@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx], ecx

; 373  :    *((word32*)(b+4)) = *((word32*)T5[temp[1][0]])
; 374  :            ^ *((word32*)T6[temp[0][1]])
; 375  :            ^ *((word32*)T7[temp[3][2]]) 
; 376  :            ^ *((word32*)T8[temp[2][3]]);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	lea	edx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 0
	movzx	edx, BYTE PTR [edx+eax]
	mov	eax, DWORD PTR ?T5@@3PAY03EA[ecx*4]
	xor	eax, DWORD PTR ?T6@@3PAY03EA[edx*4]
	mov	ecx, 4
	imul	edx, ecx, 3
	lea	ecx, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T7@@3PAY03EA[ecx*4]
	mov	edx, 4
	shl	edx, 1
	lea	ecx, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T8@@3PAY03EA[ecx*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], eax

; 377  :    *((word32*)(b+8)) = *((word32*)T5[temp[2][0]])
; 378  :            ^ *((word32*)T6[temp[1][1]])
; 379  :            ^ *((word32*)T7[temp[0][2]]) 
; 380  :            ^ *((word32*)T8[temp[3][3]]);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR ?T5@@3PAY03EA[ecx*4]
	xor	ecx, DWORD PTR ?T6@@3PAY03EA[eax*4]
	mov	edx, 4
	imul	eax, edx, 0
	lea	edx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	xor	ecx, DWORD PTR ?T7@@3PAY03EA[edx*4]
	mov	eax, 4
	imul	edx, eax, 3
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T8@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 381  :    *((word32*)(b+12)) = *((word32*)T5[temp[3][0]])
; 382  :            ^ *((word32*)T6[temp[2][1]])
; 383  :            ^ *((word32*)T7[temp[1][2]]) 
; 384  :            ^ *((word32*)T8[temp[0][3]]);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR ?T5@@3PAY03EA[edx*4]
	xor	edx, DWORD PTR ?T6@@3PAY03EA[ecx*4]
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [ecx+eax]
	xor	edx, DWORD PTR ?T7@@3PAY03EA[ecx*4]
	mov	eax, 4
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _temp$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	movzx	eax, BYTE PTR [eax+ecx]
	xor	edx, DWORD PTR ?T8@@3PAY03EA[eax*4]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 385  :    for(r = ROUNDS-1; r > 1; r--) {

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	sub	eax, 1
	mov	DWORD PTR _r$[ebp], eax
	jmp	SHORT $LN3@rijndaelDe
$LN2@rijndaelDe:
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, 1
	mov	DWORD PTR _r$[ebp], eax
$LN3@rijndaelDe:
	cmp	DWORD PTR _r$[ebp], 1
	jle	$LN1@rijndaelDe

; 386  : 		*((word32*)temp[0]) = *((word32*)b) ^ *((word32*)rk[r][0]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 387  : 		*((word32*)temp[1]) = *((word32*)(b+4)) ^ *((word32*)rk[r][1]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+4]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _temp$[ebp+eax], edx

; 388  : 		*((word32*)temp[2]) = *((word32*)(b+8)) ^ *((word32*)rk[r][2]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+8]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _temp$[ebp+eax], edx

; 389  : 		*((word32*)temp[3]) = *((word32*)(b+12)) ^ *((word32*)rk[r][3]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 390  : 		*((word32*)b) = *((word32*)T5[temp[0][0]])
; 391  :            ^ *((word32*)T6[temp[3][1]])
; 392  :            ^ *((word32*)T7[temp[2][2]]) 
; 393  :            ^ *((word32*)T8[temp[1][3]]);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _temp$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR ?T5@@3PAY03EA[edx*4]
	xor	ecx, DWORD PTR ?T6@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T7@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T8@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx], ecx

; 394  : 		*((word32*)(b+4)) = *((word32*)T5[temp[1][0]])
; 395  :            ^ *((word32*)T6[temp[0][1]])
; 396  :            ^ *((word32*)T7[temp[3][2]]) 
; 397  :            ^ *((word32*)T8[temp[2][3]]);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	lea	edx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 0
	movzx	edx, BYTE PTR [edx+eax]
	mov	eax, DWORD PTR ?T5@@3PAY03EA[ecx*4]
	xor	eax, DWORD PTR ?T6@@3PAY03EA[edx*4]
	mov	ecx, 4
	imul	edx, ecx, 3
	lea	ecx, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T7@@3PAY03EA[ecx*4]
	mov	edx, 4
	shl	edx, 1
	lea	ecx, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T8@@3PAY03EA[ecx*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], eax

; 398  : 		*((word32*)(b+8)) = *((word32*)T5[temp[2][0]])
; 399  :            ^ *((word32*)T6[temp[1][1]])
; 400  :            ^ *((word32*)T7[temp[0][2]]) 
; 401  :            ^ *((word32*)T8[temp[3][3]]);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR ?T5@@3PAY03EA[ecx*4]
	xor	ecx, DWORD PTR ?T6@@3PAY03EA[eax*4]
	mov	edx, 4
	imul	eax, edx, 0
	lea	edx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	xor	ecx, DWORD PTR ?T7@@3PAY03EA[edx*4]
	mov	eax, 4
	imul	edx, eax, 3
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T8@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 402  : 		*((word32*)(b+12)) = *((word32*)T5[temp[3][0]])
; 403  :            ^ *((word32*)T6[temp[2][1]])
; 404  :            ^ *((word32*)T7[temp[1][2]]) 
; 405  :            ^ *((word32*)T8[temp[0][3]]);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR ?T5@@3PAY03EA[edx*4]
	xor	edx, DWORD PTR ?T6@@3PAY03EA[ecx*4]
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [ecx+eax]
	xor	edx, DWORD PTR ?T7@@3PAY03EA[ecx*4]
	mov	eax, 4
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _temp$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	movzx	eax, BYTE PTR [eax+ecx]
	xor	edx, DWORD PTR ?T8@@3PAY03EA[eax*4]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 406  :    }

	jmp	$LN2@rijndaelDe
$LN1@rijndaelDe:

; 407  :    // last round is special   
; 408  : 	*((word32*)temp[0]) = *((word32*)b) ^ *((word32*)rk[1][0]);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 409  : 	*((word32*)temp[1]) = *((word32*)(b+4)) ^ *((word32*)rk[1][1]);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+4]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _temp$[ebp+eax], edx

; 410  : 	*((word32*)temp[2]) = *((word32*)(b+8)) ^ *((word32*)rk[1][2]);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+8]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _temp$[ebp+eax], edx

; 411  : 	*((word32*)temp[3]) = *((word32*)(b+12)) ^ *((word32*)rk[1][3]);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 412  :    b[0] = S5[temp[0][0]];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR ?S5@@3PAEA[edx]
	mov	BYTE PTR [eax+ecx], dl

; 413  :    b[1] = S5[temp[3][1]];

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?S5@@3PAEA[ecx]
	mov	BYTE PTR [eax+edx], cl

; 414  :    b[2] = S5[temp[2][2]]; 

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	al, BYTE PTR ?S5@@3PAEA[eax]
	mov	BYTE PTR [edx+ecx], al

; 415  :    b[3] = S5[temp[1][3]];

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?S5@@3PAEA[ecx]
	mov	BYTE PTR [edx+eax], cl

; 416  :    b[4] = S5[temp[1][0]];

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?S5@@3PAEA[ecx]
	mov	BYTE PTR [eax+edx], cl

; 417  :    b[5] = S5[temp[0][1]];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	imul	eax, edx, 5
	mov	edx, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?S5@@3PAEA[ecx]
	mov	BYTE PTR [edx+eax], cl

; 418  :    b[6] = S5[temp[3][2]]; 

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	imul	eax, edx, 6
	mov	edx, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?S5@@3PAEA[ecx]
	mov	BYTE PTR [edx+eax], cl

; 419  :    b[7] = S5[temp[2][3]];

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	imul	eax, edx, 7
	mov	edx, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?S5@@3PAEA[ecx]
	mov	BYTE PTR [edx+eax], cl

; 420  :    b[8] = S5[temp[2][0]];

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?S5@@3PAEA[ecx]
	mov	BYTE PTR [eax+edx], cl

; 421  :    b[9] = S5[temp[1][1]];

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _b$[ebp]
	mov	al, BYTE PTR ?S5@@3PAEA[eax]
	mov	BYTE PTR [ecx+edx], al

; 422  :    b[10] = S5[temp[0][2]]; 

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	imul	eax, edx, 10
	mov	edx, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?S5@@3PAEA[ecx]
	mov	BYTE PTR [edx+eax], cl

; 423  :    b[11] = S5[temp[3][3]];

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 1
	imul	ecx, eax, 11
	mov	eax, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR ?S5@@3PAEA[edx]
	mov	BYTE PTR [eax+ecx], dl

; 424  :    b[12] = S5[temp[3][0]];

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 1
	imul	ecx, eax, 12
	mov	eax, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR ?S5@@3PAEA[edx]
	mov	BYTE PTR [eax+ecx], dl

; 425  :    b[13] = S5[temp[2][1]];

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _b$[ebp]
	mov	al, BYTE PTR ?S5@@3PAEA[eax]
	mov	BYTE PTR [ecx+edx], al

; 426  :    b[14] = S5[temp[1][2]]; 

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _b$[ebp]
	mov	al, BYTE PTR ?S5@@3PAEA[eax]
	mov	BYTE PTR [ecx+edx], al

; 427  :    b[15] = S5[temp[0][3]];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 1
	imul	ecx, eax, 15
	mov	eax, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR ?S5@@3PAEA[edx]
	mov	BYTE PTR [eax+ecx], dl

; 428  : 	*((word32*)b) ^= *((word32*)rk[0][0]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx]
	xor	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax], edx

; 429  : 	*((word32*)(b+4)) ^= *((word32*)rk[0][1]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 430  : 	*((word32*)(b+8)) ^= *((word32*)rk[0][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [eax+8]
	xor	eax, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 431  : 	*((word32*)(b+12)) ^= *((word32*)rk[0][3]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+12]
	xor	edx, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+12], edx

; 432  : 
; 433  : 	return 0;

	xor	eax, eax

; 434  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@rijndaelDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@rijndaelDe:
	DD	1
	DD	$LN7@rijndaelDe
$LN7@rijndaelDe:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN6@rijndaelDe
$LN6@rijndaelDe:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?rijndaelDecrypt@@YAHQAE0QAY133E@Z ENDP			; rijndaelDecrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?rijndaelEncryptRound@@YAHQAY03EQAY133EH@Z
_TEXT	SEGMENT
_temp$ = -36						; size = 16
_r$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_rk$ = 12						; size = 4
_rounds$ = 16						; size = 4
?rijndaelEncryptRound@@YAHQAY03EQAY133EH@Z PROC		; rijndaelEncryptRound, COMDAT

; 296  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 297  : 	int r;
; 298  :    word8 temp[4][4];
; 299  : 
; 300  : 
; 301  : 	// make number of rounds sane
; 302  : 	if (rounds > ROUNDS) rounds = ROUNDS;

	mov	eax, DWORD PTR _rounds$[ebp]
	cmp	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	jle	SHORT $LN5@rijndaelEn
	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	mov	DWORD PTR _rounds$[ebp], eax
$LN5@rijndaelEn:

; 303  : 
; 304  : 	*((word32*)a[0]) = *((word32*)a[0]) ^ *((word32*)rk[0][0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _rk$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 305  : 	*((word32*)a[1]) = *((word32*)a[1]) ^ *((word32*)rk[0][1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	esi, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 306  : 	*((word32*)a[2]) = *((word32*)a[2]) ^ *((word32*)rk[0][2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	esi, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [esi+eax]
	xor	eax, DWORD PTR [edx+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 307  : 	*((word32*)a[3]) = *((word32*)a[3]) ^ *((word32*)rk[0][3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _rk$[ebp]
	mov	edx, 4
	imul	edx, edx, 3
	mov	esi, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 308  : 
; 309  : 	for(r = 1; (r <= rounds) && (r < ROUNDS); r++) {

	mov	DWORD PTR _r$[ebp], 1
	jmp	SHORT $LN4@rijndaelEn
$LN3@rijndaelEn:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
$LN4@rijndaelEn:
	mov	eax, DWORD PTR _r$[ebp]
	cmp	eax, DWORD PTR _rounds$[ebp]
	jg	$LN2@rijndaelEn
	mov	eax, DWORD PTR _r$[ebp]
	cmp	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	jge	$LN2@rijndaelEn

; 310  : 		*((word32*)temp[0]) = *((word32*)T1[a[0][0]])
; 311  :            ^ *((word32*)T2[a[1][1]])
; 312  :            ^ *((word32*)T3[a[2][2]]) 
; 313  :            ^ *((word32*)T4[a[3][3]]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, 1
	shl	eax, 0
	movzx	edx, BYTE PTR [edx+eax]
	mov	eax, DWORD PTR ?T1@@3PAY03EA[ecx*4]
	xor	eax, DWORD PTR ?T2@@3PAY03EA[edx*4]
	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	shl	edx, 1
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T3@@3PAY03EA[ecx*4]
	mov	edx, 4
	imul	ecx, edx, 3
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T4@@3PAY03EA[ecx*4]
	mov	edx, 4
	imul	ecx, edx, 0
	mov	DWORD PTR _temp$[ebp+ecx], eax

; 314  : 		*((word32*)temp[1]) = *((word32*)T1[a[1][0]])
; 315  :            ^ *((word32*)T2[a[2][1]])
; 316  :            ^ *((word32*)T3[a[3][2]]) 
; 317  :            ^ *((word32*)T4[a[0][3]]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	ecx, BYTE PTR [ecx+edx]
	mov	edx, DWORD PTR ?T1@@3PAY03EA[eax*4]
	xor	edx, DWORD PTR ?T2@@3PAY03EA[ecx*4]
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _a$[ebp]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [ecx+eax]
	xor	edx, DWORD PTR ?T3@@3PAY03EA[ecx*4]
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _a$[ebp]
	mov	eax, 1
	imul	eax, eax, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	xor	edx, DWORD PTR ?T4@@3PAY03EA[ecx*4]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _temp$[ebp+eax], edx

; 318  : 		*((word32*)temp[2]) = *((word32*)T1[a[2][0]])
; 319  :            ^ *((word32*)T2[a[3][1]])
; 320  :            ^ *((word32*)T3[a[0][2]]) 
; 321  :            ^ *((word32*)T4[a[1][3]]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _a$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, DWORD PTR ?T1@@3PAY03EA[eax*4]
	xor	eax, DWORD PTR ?T2@@3PAY03EA[edx*4]
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _a$[ebp]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [edx+ecx]
	xor	eax, DWORD PTR ?T3@@3PAY03EA[edx*4]
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T4@@3PAY03EA[ecx*4]
	mov	edx, 4
	shl	edx, 1
	mov	DWORD PTR _temp$[ebp+edx], eax

; 322  : 		*((word32*)temp[3]) = *((word32*)T1[a[3][0]])
; 323  :            ^ *((word32*)T2[a[0][1]])
; 324  :            ^ *((word32*)T3[a[1][2]]) 
; 325  :            ^ *((word32*)T4[a[2][3]]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _a$[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR ?T1@@3PAY03EA[ecx*4]
	xor	ecx, DWORD PTR ?T2@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _a$[ebp]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	xor	ecx, DWORD PTR ?T3@@3PAY03EA[edx*4]
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T4@@3PAY03EA[eax*4]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 326  : 		*((word32*)a[0]) = *((word32*)temp[0]) ^ *((word32*)rk[r][0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _r$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _rk$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _temp$[ebp+ecx]
	xor	ecx, DWORD PTR [edx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 327  : 		*((word32*)a[1]) = *((word32*)temp[1]) ^ *((word32*)rk[r][1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _r$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _temp$[ebp+eax]
	xor	eax, DWORD PTR [ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 328  : 		*((word32*)a[2]) = *((word32*)temp[2]) ^ *((word32*)rk[r][2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _r$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _temp$[ebp+eax]
	xor	eax, DWORD PTR [ecx+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 329  : 		*((word32*)a[3]) = *((word32*)temp[3]) ^ *((word32*)rk[r][3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _r$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _rk$[ebp]
	mov	eax, 4
	imul	eax, eax, 3
	mov	ecx, DWORD PTR _temp$[ebp+ecx]
	xor	ecx, DWORD PTR [edx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 330  :    }

	jmp	$LN3@rijndaelEn
$LN2@rijndaelEn:

; 331  : 	if (rounds == ROUNDS) {

	mov	eax, DWORD PTR _rounds$[ebp]
	cmp	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	jne	$LN1@rijndaelEn

; 332  :    	// last round is special   
; 333  :    	temp[0][0] = T1[a[0][0]][1];

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 4
	imul	eax, eax, 0
	lea	eax, DWORD PTR _temp$[ebp+eax]
	mov	esi, 1
	imul	esi, esi, 0
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [eax+esi], cl

; 334  :    	temp[0][1] = T1[a[1][1]][1];

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, ecx, 0
	lea	ecx, DWORD PTR _temp$[ebp+ecx]
	mov	esi, 1
	shl	esi, 0
	mov	dl, BYTE PTR ?T1@@3PAY03EA[eax+edx*4]
	mov	BYTE PTR [ecx+esi], dl

; 335  :    	temp[0][2] = T1[a[2][2]][1]; 

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, ecx, 0
	lea	ecx, DWORD PTR _temp$[ebp+ecx]
	mov	esi, 1
	shl	esi, 1
	mov	dl, BYTE PTR ?T1@@3PAY03EA[eax+edx*4]
	mov	BYTE PTR [ecx+esi], dl

; 336  :    	temp[0][3] = T1[a[3][3]][1];

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 4
	imul	eax, eax, 0
	lea	eax, DWORD PTR _temp$[ebp+eax]
	mov	esi, 1
	imul	esi, esi, 3
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [eax+esi], cl

; 337  :    	temp[1][0] = T1[a[1][0]][1];

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	lea	edx, DWORD PTR _temp$[ebp+edx]
	mov	esi, 1
	imul	esi, esi, 0
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [edx+esi], al

; 338  :    	temp[1][1] = T1[a[2][1]][1];

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	shl	ecx, 0
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	lea	ecx, DWORD PTR _temp$[ebp+ecx]
	mov	esi, 1
	shl	esi, 0
	mov	dl, BYTE PTR ?T1@@3PAY03EA[eax+edx*4]
	mov	BYTE PTR [ecx+esi], dl

; 339  :    	temp[1][2] = T1[a[3][2]][1]; 

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	lea	edx, DWORD PTR _temp$[ebp+edx]
	mov	esi, 1
	shl	esi, 1
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [edx+esi], al

; 340  :    	temp[1][3] = T1[a[0][3]][1];

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	lea	eax, DWORD PTR _temp$[ebp+eax]
	mov	esi, 1
	imul	esi, esi, 3
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [eax+esi], cl

; 341  :    	temp[2][0] = T1[a[2][0]][1];

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	lea	edx, DWORD PTR _temp$[ebp+edx]
	mov	esi, 1
	imul	esi, esi, 0
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [edx+esi], al

; 342  :    	temp[2][1] = T1[a[3][1]][1];

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	lea	edx, DWORD PTR _temp$[ebp+edx]
	mov	esi, 1
	shl	esi, 0
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [edx+esi], al

; 343  :    	temp[2][2] = T1[a[0][2]][1]; 

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	lea	edx, DWORD PTR _temp$[ebp+edx]
	mov	esi, 1
	shl	esi, 1
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [edx+esi], al

; 344  :    	temp[2][3] = T1[a[1][3]][1];

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 3
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 1
	lea	edx, DWORD PTR _temp$[ebp+edx]
	mov	esi, 1
	imul	esi, esi, 3
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [edx+esi], al

; 345  :    	temp[3][0] = T1[a[3][0]][1];

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 4
	imul	eax, eax, 3
	lea	eax, DWORD PTR _temp$[ebp+eax]
	mov	esi, 1
	imul	esi, esi, 0
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [eax+esi], cl

; 346  :    	temp[3][1] = T1[a[0][1]][1];

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _a$[ebp]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 4
	imul	edx, edx, 3
	lea	edx, DWORD PTR _temp$[ebp+edx]
	mov	esi, 1
	shl	esi, 0
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [edx+esi], al

; 347  :    	temp[3][2] = T1[a[1][2]][1]; 

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	shl	ecx, 1
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, ecx, 3
	lea	ecx, DWORD PTR _temp$[ebp+ecx]
	mov	esi, 1
	shl	esi, 1
	mov	dl, BYTE PTR ?T1@@3PAY03EA[eax+edx*4]
	mov	BYTE PTR [ecx+esi], dl

; 348  :    	temp[3][3] = T1[a[2][3]][1];

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _a$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 3
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 4
	imul	edx, edx, 3
	lea	edx, DWORD PTR _temp$[ebp+edx]
	mov	esi, 1
	imul	esi, esi, 3
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [edx+esi], al

; 349  : 		*((word32*)a[0]) = *((word32*)temp[0]) ^ *((word32*)rk[ROUNDS][0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	edx, 4
	add	edx, DWORD PTR _rk$[ebp]
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _temp$[ebp+ecx]
	xor	ecx, DWORD PTR [edx+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 350  : 		*((word32*)a[1]) = *((word32*)temp[1]) ^ *((word32*)rk[ROUNDS][1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	ecx, 4
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _temp$[ebp+eax]
	xor	eax, DWORD PTR [ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 351  : 		*((word32*)a[2]) = *((word32*)temp[2]) ^ *((word32*)rk[ROUNDS][2]);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	ecx, 4
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _temp$[ebp+eax]
	xor	eax, DWORD PTR [ecx+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 352  : 		*((word32*)a[3]) = *((word32*)temp[3]) ^ *((word32*)rk[ROUNDS][3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	edx, 4
	add	edx, DWORD PTR _rk$[ebp]
	mov	eax, 4
	imul	eax, eax, 3
	mov	ecx, DWORD PTR _temp$[ebp+ecx]
	xor	ecx, DWORD PTR [edx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [edx+eax], ecx
$LN1@rijndaelEn:

; 353  : 	}
; 354  : 
; 355  : 	return 0;

	xor	eax, eax

; 356  : }   

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@rijndaelEn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@rijndaelEn:
	DD	1
	DD	$LN9@rijndaelEn
$LN9@rijndaelEn:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN8@rijndaelEn
$LN8@rijndaelEn:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?rijndaelEncryptRound@@YAHQAY03EQAY133EH@Z ENDP		; rijndaelEncryptRound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?rijndaelEncrypt@@YAHQAE0QAY133E@Z
_TEXT	SEGMENT
_temp$ = -36						; size = 16
_r$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_rk$ = 16						; size = 4
?rijndaelEncrypt@@YAHQAE0QAY133E@Z PROC			; rijndaelEncrypt, COMDAT

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 215  : 	// Encryption of one block. 
; 216  : 	
; 217  : 	int r;
; 218  :    word8 temp[4][4];
; 219  : 
; 220  :     *((word32*)temp[0]) = *((word32*)a) ^ *((word32*)rk[0][0]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [edx]
	xor	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR _temp$[ebp+ecx], edx

; 221  :     *((word32*)temp[1]) = *((word32*)(a+4)) ^ *((word32*)rk[0][1]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [eax+4]
	xor	eax, DWORD PTR [ecx+edx]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _temp$[ebp+ecx], eax

; 222  :     *((word32*)temp[2]) = *((word32*)(a+8)) ^ *((word32*)rk[0][2]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR [eax+8]
	xor	eax, DWORD PTR [ecx+edx]
	mov	ecx, 4
	shl	ecx, 1
	mov	DWORD PTR _temp$[ebp+ecx], eax

; 223  :     *((word32*)temp[3]) = *((word32*)(a+12)) ^ *((word32*)rk[0][3]);

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _rk$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [edx+12]
	xor	edx, DWORD PTR [ecx+eax]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	DWORD PTR _temp$[ebp+ecx], edx

; 224  :     *((word32*)b) = *((word32*)T1[temp[0][0]])
; 225  :            ^ *((word32*)T2[temp[1][1]])
; 226  :            ^ *((word32*)T3[temp[2][2]]) 
; 227  :            ^ *((word32*)T4[temp[3][3]]);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR ?T1@@3PAY03EA[edx*4]
	xor	edx, DWORD PTR ?T2@@3PAY03EA[ecx*4]
	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [ecx+eax]
	xor	edx, DWORD PTR ?T3@@3PAY03EA[ecx*4]
	mov	eax, 4
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _temp$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	movzx	eax, BYTE PTR [eax+ecx]
	xor	edx, DWORD PTR ?T4@@3PAY03EA[eax*4]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx], edx

; 228  :     *((word32*)(b+4)) = *((word32*)T1[temp[1][0]])
; 229  :            ^ *((word32*)T2[temp[2][1]])
; 230  :            ^ *((word32*)T3[temp[3][2]]) 
; 231  :            ^ *((word32*)T4[temp[0][3]]);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR ?T1@@3PAY03EA[ecx*4]
	xor	ecx, DWORD PTR ?T2@@3PAY03EA[eax*4]
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	xor	ecx, DWORD PTR ?T3@@3PAY03EA[edx*4]
	mov	eax, 4
	imul	edx, eax, 0
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T4@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 232  :     *((word32*)(b+8)) = *((word32*)T1[temp[2][0]])
; 233  :            ^ *((word32*)T2[temp[3][1]])
; 234  :            ^ *((word32*)T3[temp[0][2]]) 
; 235  :            ^ *((word32*)T4[temp[1][3]]);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 0
	movzx	edx, BYTE PTR [edx+eax]
	mov	eax, DWORD PTR ?T1@@3PAY03EA[ecx*4]
	xor	eax, DWORD PTR ?T2@@3PAY03EA[edx*4]
	mov	ecx, 4
	imul	edx, ecx, 0
	lea	ecx, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T3@@3PAY03EA[ecx*4]
	mov	edx, 4
	shl	edx, 0
	lea	ecx, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T4@@3PAY03EA[ecx*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+8], eax

; 236  :     *((word32*)(b+12)) = *((word32*)T1[temp[3][0]])
; 237  :            ^ *((word32*)T2[temp[0][1]])
; 238  :            ^ *((word32*)T3[temp[1][2]]) 
; 239  :            ^ *((word32*)T4[temp[2][3]]);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _temp$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR ?T1@@3PAY03EA[edx*4]
	xor	ecx, DWORD PTR ?T2@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T3@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T4@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 240  :    for(r = 1; r < ROUNDS-1; r++) {

	mov	DWORD PTR _r$[ebp], 1
	jmp	SHORT $LN3@rijndaelEn
$LN2@rijndaelEn:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
$LN3@rijndaelEn:
	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	sub	eax, 1
	cmp	DWORD PTR _r$[ebp], eax
	jge	$LN1@rijndaelEn

; 241  : 		*((word32*)temp[0]) = *((word32*)b) ^ *((word32*)rk[r][0]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 242  : 		*((word32*)temp[1]) = *((word32*)(b+4)) ^ *((word32*)rk[r][1]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+4]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _temp$[ebp+eax], edx

; 243  : 		*((word32*)temp[2]) = *((word32*)(b+8)) ^ *((word32*)rk[r][2]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+8]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _temp$[ebp+eax], edx

; 244  : 		*((word32*)temp[3]) = *((word32*)(b+12)) ^ *((word32*)rk[r][3]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 245  :    *((word32*)b) = *((word32*)T1[temp[0][0]])
; 246  :            ^ *((word32*)T2[temp[1][1]])
; 247  :            ^ *((word32*)T3[temp[2][2]]) 
; 248  :            ^ *((word32*)T4[temp[3][3]]);

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, DWORD PTR ?T1@@3PAY03EA[edx*4]
	xor	edx, DWORD PTR ?T2@@3PAY03EA[ecx*4]
	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [ecx+eax]
	xor	edx, DWORD PTR ?T3@@3PAY03EA[ecx*4]
	mov	eax, 4
	imul	ecx, eax, 3
	lea	eax, DWORD PTR _temp$[ebp+ecx]
	mov	ecx, 1
	imul	ecx, ecx, 3
	movzx	eax, BYTE PTR [eax+ecx]
	xor	edx, DWORD PTR ?T4@@3PAY03EA[eax*4]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [ecx], edx

; 249  :    *((word32*)(b+4)) = *((word32*)T1[temp[1][0]])
; 250  :            ^ *((word32*)T2[temp[2][1]])
; 251  :            ^ *((word32*)T3[temp[3][2]]) 
; 252  :            ^ *((word32*)T4[temp[0][3]]);

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, DWORD PTR ?T1@@3PAY03EA[ecx*4]
	xor	ecx, DWORD PTR ?T2@@3PAY03EA[eax*4]
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	xor	ecx, DWORD PTR ?T3@@3PAY03EA[edx*4]
	mov	eax, 4
	imul	edx, eax, 0
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T4@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 253  :    *((word32*)(b+8)) = *((word32*)T1[temp[2][0]])
; 254  :            ^ *((word32*)T2[temp[3][1]])
; 255  :            ^ *((word32*)T3[temp[0][2]]) 
; 256  :            ^ *((word32*)T4[temp[1][3]]);

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 4
	imul	eax, edx, 3
	lea	edx, DWORD PTR _temp$[ebp+eax]
	mov	eax, 1
	shl	eax, 0
	movzx	edx, BYTE PTR [edx+eax]
	mov	eax, DWORD PTR ?T1@@3PAY03EA[ecx*4]
	xor	eax, DWORD PTR ?T2@@3PAY03EA[edx*4]
	mov	ecx, 4
	imul	edx, ecx, 0
	lea	ecx, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T3@@3PAY03EA[ecx*4]
	mov	edx, 4
	shl	edx, 0
	lea	ecx, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	ecx, BYTE PTR [ecx+edx]
	xor	eax, DWORD PTR ?T4@@3PAY03EA[ecx*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+8], eax

; 257  :    *((word32*)(b+12)) = *((word32*)T1[temp[3][0]])
; 258  :            ^ *((word32*)T2[temp[0][1]])
; 259  :            ^ *((word32*)T3[temp[1][2]]) 
; 260  :            ^ *((word32*)T4[temp[2][3]]);

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	lea	eax, DWORD PTR _temp$[ebp+ecx]
	mov	ecx, 1
	shl	ecx, 0
	movzx	eax, BYTE PTR [eax+ecx]
	mov	ecx, DWORD PTR ?T1@@3PAY03EA[edx*4]
	xor	ecx, DWORD PTR ?T2@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 0
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T3@@3PAY03EA[eax*4]
	mov	edx, 4
	shl	edx, 1
	lea	eax, DWORD PTR _temp$[ebp+edx]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	xor	ecx, DWORD PTR ?T4@@3PAY03EA[eax*4]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 261  :    }

	jmp	$LN2@rijndaelEn
$LN1@rijndaelEn:

; 262  :    // last round is special   
; 263  : 	*((word32*)temp[0]) = *((word32*)b) ^ *((word32*)rk[ROUNDS-1][0]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	sub	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 264  : 	*((word32*)temp[1]) = *((word32*)(b+4)) ^ *((word32*)rk[ROUNDS-1][1]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	sub	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+4]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR _temp$[ebp+eax], edx

; 265  : 	*((word32*)temp[2]) = *((word32*)(b+8)) ^ *((word32*)rk[ROUNDS-1][2]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	sub	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+8]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR _temp$[ebp+eax], edx

; 266  : 	*((word32*)temp[3]) = *((word32*)(b+12)) ^ *((word32*)rk[ROUNDS-1][3]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	sub	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR _temp$[ebp+eax], ecx

; 267  :    b[0] = T1[temp[0][0]][1];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 1
	imul	ecx, ecx, 0
	mov	esi, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR ?T1@@3PAY03EA[eax+edx*4]
	mov	BYTE PTR [esi+ecx], dl

; 268  :    b[1] = T1[temp[1][1]][1];

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	esi, DWORD PTR _b$[ebp]
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [esi+edx], al

; 269  :    b[2] = T1[temp[2][2]][1]; 

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	esi, DWORD PTR _b$[ebp]
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [esi+edx], al

; 270  :    b[3] = T1[temp[3][3]][1];

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 1
	imul	ecx, ecx, 3
	mov	esi, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR ?T1@@3PAY03EA[eax+edx*4]
	mov	BYTE PTR [esi+ecx], dl

; 271  :    b[4] = T1[temp[1][0]][1];

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	shl	eax, 2
	mov	esi, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [esi+eax], cl

; 272  :    b[5] = T1[temp[2][1]][1];

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	shl	edx, 0
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, edx, 5
	mov	esi, DWORD PTR _b$[ebp]
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [esi+edx], al

; 273  :    b[6] = T1[temp[3][2]][1]; 

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	imul	eax, eax, 6
	mov	esi, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [esi+eax], cl

; 274  :    b[7] = T1[temp[0][3]][1];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 1
	imul	ecx, ecx, 7
	mov	esi, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR ?T1@@3PAY03EA[eax+edx*4]
	mov	BYTE PTR [esi+ecx], dl

; 275  :    b[8] = T1[temp[2][0]][1];

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 0
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	shl	eax, 3
	mov	esi, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [esi+eax], cl

; 276  :    b[9] = T1[temp[3][1]][1];

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	imul	eax, eax, 9
	mov	esi, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [esi+eax], cl

; 277  :    b[10] = T1[temp[0][2]][1]; 

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	imul	eax, eax, 10
	mov	esi, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [esi+eax], cl

; 278  :    b[11] = T1[temp[1][3]][1];

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	imul	eax, eax, 11
	mov	esi, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [esi+eax], cl

; 279  :    b[12] = T1[temp[3][0]][1];

	mov	eax, 4
	imul	ecx, eax, 3
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 1
	imul	ecx, ecx, 12
	mov	esi, DWORD PTR _b$[ebp]
	mov	dl, BYTE PTR ?T1@@3PAY03EA[eax+edx*4]
	mov	BYTE PTR [esi+ecx], dl

; 280  :    b[13] = T1[temp[0][1]][1];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _temp$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	movzx	ecx, BYTE PTR [edx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	imul	eax, eax, 13
	mov	esi, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [esi+eax], cl

; 281  :    b[14] = T1[temp[1][2]][1]; 

	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	shl	edx, 1
	movzx	eax, BYTE PTR [ecx+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, edx, 14
	mov	esi, DWORD PTR _b$[ebp]
	mov	al, BYTE PTR ?T1@@3PAY03EA[ecx+eax*4]
	mov	BYTE PTR [esi+edx], al

; 282  :    b[15] = T1[temp[2][3]][1];

	mov	eax, 4
	shl	eax, 1
	lea	ecx, DWORD PTR _temp$[ebp+eax]
	mov	edx, 1
	imul	eax, edx, 3
	movzx	ecx, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	eax, 1
	imul	eax, eax, 15
	mov	esi, DWORD PTR _b$[ebp]
	mov	cl, BYTE PTR ?T1@@3PAY03EA[edx+ecx*4]
	mov	BYTE PTR [esi+eax], cl

; 283  : 	*((word32*)b) ^= *((word32*)rk[ROUNDS][0]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx], ecx

; 284  : 	*((word32*)(b+4)) ^= *((word32*)rk[ROUNDS][1]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+4]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+4], edx

; 285  : 	*((word32*)(b+8)) ^= *((word32*)rk[ROUNDS][2]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [edx+8]
	xor	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [eax+8], edx

; 286  : 	*((word32*)(b+12)) ^= *((word32*)rk[ROUNDS][3]);

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	shl	eax, 4
	add	eax, DWORD PTR _rk$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	xor	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 287  : 
; 288  : 	return 0;

	xor	eax, eax

; 289  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@rijndaelEn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@rijndaelEn:
	DD	1
	DD	$LN7@rijndaelEn
$LN7@rijndaelEn:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN6@rijndaelEn
$LN6@rijndaelEn:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?rijndaelEncrypt@@YAHQAE0QAY133E@Z ENDP			; rijndaelEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?rijndaelKeyEnctoDec@@YAHHQAY133E@Z
_TEXT	SEGMENT
_r$ = -8						; size = 4
_keyBits$ = 8						; size = 4
_W$ = 12						; size = 4
?rijndaelKeyEnctoDec@@YAHHQAY133E@Z PROC		; rijndaelKeyEnctoDec, COMDAT

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 202  : #ifdef _MSC_VER
; 203  : 	#pragma warning( disable : 4100 ) // warning C4100: <variable name> : unreferenced formal parameter
; 204  : #endif
; 205  : 	int r;
; 206  : 
; 207  : 	for (r = 1; r < ROUNDS; r++) {

	mov	DWORD PTR _r$[ebp], 1
	jmp	SHORT $LN3@rijndaelKe
$LN2@rijndaelKe:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax
$LN3@rijndaelKe:
	mov	eax, DWORD PTR _r$[ebp]
	cmp	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	jge	SHORT $LN1@rijndaelKe

; 208  : 		InvMixColumn(W[r], 4);

	push	4
	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _W$[ebp]
	push	eax
	call	?InvMixColumn@@YAXQAY03EE@Z		; InvMixColumn
	add	esp, 8

; 209  : 	}

	jmp	SHORT $LN2@rijndaelKe
$LN1@rijndaelKe:

; 210  : 	return 0;

	xor	eax, eax

; 211  : }	

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?rijndaelKeyEnctoDec@@YAHHQAY133E@Z ENDP		; rijndaelKeyEnctoDec
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rijndael.cpp
;	COMDAT ?rijndaelKeySched@@YAHQAY03EHQAY133E@Z
_TEXT	SEGMENT
_KC$ = -100						; size = 4
_tk$ = -88						; size = 32
_rconpointer$ = -48					; size = 4
_t$ = -36						; size = 4
_r$ = -24						; size = 4
_j$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_keyBits$ = 12						; size = 4
_W$ = 16						; size = 4
?rijndaelKeySched@@YAHQAY03EHQAY133E@Z PROC		; rijndaelKeySched, COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 140  : #ifdef _MSC_VER
; 141  : 	#pragma warning( disable : 4100 ) // warning C4100: <variable name> : unreferenced formal parameter
; 142  : #endif
; 143  : 
; 144  : 	// Calculate the necessary round keys
; 145  : 	// The number of calculations depends on keyBits and blockBits
; 146  : 	 
; 147  : 	int j, r, t, rconpointer = 0;

	mov	DWORD PTR _rconpointer$[ebp], 0

; 148  : 	word8 tk[MAXKC][4];
; 149  : 	int KC = ROUNDS - 6;

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	sub	eax, 6
	mov	DWORD PTR _KC$[ebp], eax

; 150  : 
; 151  : 	for(j = KC-1; j >= 0; j--)

	mov	eax, DWORD PTR _KC$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN28@rijndaelKe
$LN27@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN28@rijndaelKe:
	cmp	DWORD PTR _j$[ebp], 0
	jl	SHORT $LN26@rijndaelKe

; 152  : 		*((word32*)tk[j]) = *((word32*)k[j]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _tk$[ebp+eax*4], ecx
	jmp	SHORT $LN27@rijndaelKe
$LN26@rijndaelKe:

; 153  : 	r = 0;

	mov	DWORD PTR _r$[ebp], 0

; 154  : 	t = 0;

	mov	DWORD PTR _t$[ebp], 0

; 155  : 	// copy values into round key array
; 156  : 	for(j = 0; (j < KC) && (r < (ROUNDS+1)); ) {

	mov	DWORD PTR _j$[ebp], 0
$LN25@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _KC$[ebp]
	jge	SHORT $LN19@rijndaelKe
	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	add	eax, 1
	cmp	DWORD PTR _r$[ebp], eax
	jge	SHORT $LN19@rijndaelKe

; 157  : 		for (; (j < KC) && (t < 4); j++, t++)

	jmp	SHORT $LN23@rijndaelKe
$LN22@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 1
	mov	DWORD PTR _t$[ebp], ecx
$LN23@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _KC$[ebp]
	jge	SHORT $LN21@rijndaelKe
	cmp	DWORD PTR _t$[ebp], 4
	jge	SHORT $LN21@rijndaelKe

; 158  : 			*((word32*)W[r][t]) = *((word32*)tk[j]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _W$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _tk$[ebp+edx*4]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN22@rijndaelKe
$LN21@rijndaelKe:

; 159  : 		if (t == 4) {

	cmp	DWORD PTR _t$[ebp], 4
	jne	SHORT $LN20@rijndaelKe

; 160  : 			r++;

	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax

; 161  : 			t = 0;

	mov	DWORD PTR _t$[ebp], 0
$LN20@rijndaelKe:

; 162  : 		}
; 163  : 	}

	jmp	SHORT $LN25@rijndaelKe
$LN19@rijndaelKe:

; 164  : 		
; 165  : 	while (r < (ROUNDS+1)) { // while not enough round key material calculated

	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	add	eax, 1
	cmp	DWORD PTR _r$[ebp], eax
	jge	$LN18@rijndaelKe

; 166  : 		// calculate new values
; 167  : 		tk[0][0] ^= S[tk[KC-1][1]];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _tk$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _KC$[ebp]
	lea	eax, DWORD PTR _tk$[ebp+eax*4-4]
	mov	esi, 1
	shl	esi, 0
	movzx	eax, BYTE PTR [eax+esi]
	movzx	eax, BYTE PTR ?S@@3PAEA[eax]
	movzx	ecx, BYTE PTR [edx+ecx]
	xor	ecx, eax
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, 4
	imul	edx, edx, 0
	lea	edx, DWORD PTR _tk$[ebp+edx]
	mov	BYTE PTR [edx+eax], cl

; 168  : 		tk[0][1] ^= S[tk[KC-1][2]];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _tk$[ebp+ecx]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _KC$[ebp]
	lea	ecx, DWORD PTR _tk$[ebp+ecx*4-4]
	mov	esi, 1
	shl	esi, 1
	movzx	ecx, BYTE PTR [ecx+esi]
	movzx	ecx, BYTE PTR ?S@@3PAEA[ecx]
	movzx	edx, BYTE PTR [edx+eax]
	xor	edx, ecx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, 4
	imul	ecx, ecx, 0
	lea	ecx, DWORD PTR _tk$[ebp+ecx]
	mov	BYTE PTR [ecx+eax], dl

; 169  : 		tk[0][2] ^= S[tk[KC-1][3]];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _tk$[ebp+ecx]
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _KC$[ebp]
	lea	ecx, DWORD PTR _tk$[ebp+ecx*4-4]
	mov	esi, 1
	imul	esi, esi, 3
	movzx	ecx, BYTE PTR [ecx+esi]
	movzx	ecx, BYTE PTR ?S@@3PAEA[ecx]
	movzx	edx, BYTE PTR [edx+eax]
	xor	edx, ecx
	mov	eax, 1
	shl	eax, 1
	mov	ecx, 4
	imul	ecx, ecx, 0
	lea	ecx, DWORD PTR _tk$[ebp+ecx]
	mov	BYTE PTR [ecx+eax], dl

; 170  : 		tk[0][3] ^= S[tk[KC-1][0]];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _tk$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _KC$[ebp]
	lea	eax, DWORD PTR _tk$[ebp+eax*4-4]
	mov	esi, 1
	imul	esi, esi, 0
	movzx	eax, BYTE PTR [eax+esi]
	movzx	eax, BYTE PTR ?S@@3PAEA[eax]
	movzx	ecx, BYTE PTR [edx+ecx]
	xor	ecx, eax
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, 4
	imul	edx, edx, 0
	lea	edx, DWORD PTR _tk$[ebp+edx]
	mov	BYTE PTR [edx+eax], cl

; 171  : 		tk[0][0] ^= rcon[rconpointer++];

	mov	eax, 4
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _tk$[ebp+ecx]
	mov	eax, 1
	imul	ecx, eax, 0
	movzx	edx, BYTE PTR [edx+ecx]
	mov	eax, DWORD PTR _rconpointer$[ebp]
	xor	edx, DWORD PTR ?rcon@@3PAIA[eax*4]
	mov	ecx, 1
	imul	eax, ecx, 0
	mov	ecx, 4
	imul	ecx, ecx, 0
	lea	ecx, DWORD PTR _tk$[ebp+ecx]
	mov	BYTE PTR [ecx+eax], dl
	mov	edx, DWORD PTR _rconpointer$[ebp]
	add	edx, 1
	mov	DWORD PTR _rconpointer$[ebp], edx

; 172  : 
; 173  : 		if (KC != 8)

	cmp	DWORD PTR _KC$[ebp], 8
	je	SHORT $LN17@rijndaelKe

; 174  : 			for(j = 1; j < KC; j++)

	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN16@rijndaelKe
$LN15@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN16@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _KC$[ebp]
	jge	SHORT $LN14@rijndaelKe

; 175  : 				*((word32*)tk[j]) ^= *((word32*)tk[j-1]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _tk$[ebp+eax*4]
	xor	edx, DWORD PTR _tk$[ebp+ecx*4-4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _tk$[ebp+eax*4], edx
	jmp	SHORT $LN15@rijndaelKe
$LN14@rijndaelKe:
	jmp	$LN13@rijndaelKe
$LN17@rijndaelKe:

; 176  : 		else {
; 177  : 			for(j = 1; j < KC/2; j++)

	mov	DWORD PTR _j$[ebp], 1
	jmp	SHORT $LN12@rijndaelKe
$LN11@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@rijndaelKe:
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN10@rijndaelKe

; 178  : 				*((word32*)tk[j]) ^= *((word32*)tk[j-1]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _tk$[ebp+eax*4]
	xor	edx, DWORD PTR _tk$[ebp+ecx*4-4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _tk$[ebp+eax*4], edx
	jmp	SHORT $LN11@rijndaelKe
$LN10@rijndaelKe:

; 179  : 			tk[KC/2][0] ^= S[tk[KC/2 - 1][0]];

	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	ecx, DWORD PTR _tk$[ebp+eax*4]
	mov	edx, 1
	imul	esi, edx, 0
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR _tk$[ebp+eax*4-4]
	mov	edx, 1
	imul	edx, edx, 0
	movzx	eax, BYTE PTR [eax+edx]
	movzx	edx, BYTE PTR ?S@@3PAEA[eax]
	movzx	ecx, BYTE PTR [ecx+esi]
	xor	ecx, edx
	mov	edx, 1
	imul	esi, edx, 0
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR _tk$[ebp+eax*4]
	mov	BYTE PTR [eax+esi], cl

; 180  : 			tk[KC/2][1] ^= S[tk[KC/2 - 1][1]];

	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	ecx, DWORD PTR _tk$[ebp+eax*4]
	mov	esi, 1
	shl	esi, 0
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	edx, DWORD PTR _tk$[ebp+eax*4-4]
	mov	eax, 1
	shl	eax, 0
	movzx	edx, BYTE PTR [edx+eax]
	movzx	eax, BYTE PTR ?S@@3PAEA[edx]
	movzx	ecx, BYTE PTR [ecx+esi]
	xor	ecx, eax
	mov	esi, 1
	shl	esi, 0
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	edx, DWORD PTR _tk$[ebp+eax*4]
	mov	BYTE PTR [edx+esi], cl

; 181  : 			tk[KC/2][2] ^= S[tk[KC/2 - 1][2]];

	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	ecx, DWORD PTR _tk$[ebp+eax*4]
	mov	esi, 1
	shl	esi, 1
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	edx, DWORD PTR _tk$[ebp+eax*4-4]
	mov	eax, 1
	shl	eax, 1
	movzx	edx, BYTE PTR [edx+eax]
	movzx	eax, BYTE PTR ?S@@3PAEA[edx]
	movzx	ecx, BYTE PTR [ecx+esi]
	xor	ecx, eax
	mov	esi, 1
	shl	esi, 1
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	edx, DWORD PTR _tk$[ebp+eax*4]
	mov	BYTE PTR [edx+esi], cl

; 182  : 			tk[KC/2][3] ^= S[tk[KC/2 - 1][3]];

	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	ecx, DWORD PTR _tk$[ebp+eax*4]
	mov	edx, 1
	imul	esi, edx, 3
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR _tk$[ebp+eax*4-4]
	mov	edx, 1
	imul	edx, edx, 3
	movzx	eax, BYTE PTR [eax+edx]
	movzx	edx, BYTE PTR ?S@@3PAEA[eax]
	movzx	ecx, BYTE PTR [ecx+esi]
	xor	ecx, edx
	mov	edx, 1
	imul	esi, edx, 3
	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	eax, DWORD PTR _tk$[ebp+eax*4]
	mov	BYTE PTR [eax+esi], cl

; 183  : 			for(j = KC/2 + 1; j < KC; j++)

	mov	eax, DWORD PTR _KC$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN9@rijndaelKe
$LN8@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _KC$[ebp]
	jge	SHORT $LN13@rijndaelKe

; 184  : 				*((word32*)tk[j]) ^= *((word32*)tk[j-1]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _tk$[ebp+eax*4]
	xor	edx, DWORD PTR _tk$[ebp+ecx*4-4]
	mov	eax, DWORD PTR _j$[ebp]
	mov	DWORD PTR _tk$[ebp+eax*4], edx
	jmp	SHORT $LN8@rijndaelKe
$LN13@rijndaelKe:

; 185  : 		}
; 186  : 		// copy values into round key array
; 187  : 		for(j = 0; (j < KC) && (r < (ROUNDS+1)); ) {

	mov	DWORD PTR _j$[ebp], 0
$LN6@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _KC$[ebp]
	jge	SHORT $LN5@rijndaelKe
	mov	eax, DWORD PTR ?ROUNDS@@3HA		; ROUNDS
	add	eax, 1
	cmp	DWORD PTR _r$[ebp], eax
	jge	SHORT $LN5@rijndaelKe

; 188  : 			for (; (j < KC) && (t < 4); j++, t++)

	jmp	SHORT $LN4@rijndaelKe
$LN3@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 1
	mov	DWORD PTR _t$[ebp], ecx
$LN4@rijndaelKe:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _KC$[ebp]
	jge	SHORT $LN2@rijndaelKe
	cmp	DWORD PTR _t$[ebp], 4
	jge	SHORT $LN2@rijndaelKe

; 189  : 				*((word32*)W[r][t]) = *((word32*)tk[j]);

	mov	eax, DWORD PTR _r$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _W$[ebp]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _tk$[ebp+edx*4]
	mov	DWORD PTR [eax+ecx*4], edx
	jmp	SHORT $LN3@rijndaelKe
$LN2@rijndaelKe:

; 190  : 			if (t == 4) {

	cmp	DWORD PTR _t$[ebp], 4
	jne	SHORT $LN1@rijndaelKe

; 191  : 				r++;

	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	mov	DWORD PTR _r$[ebp], eax

; 192  : 				t = 0;

	mov	DWORD PTR _t$[ebp], 0
$LN1@rijndaelKe:

; 193  : 			}
; 194  : 		}

	jmp	SHORT $LN6@rijndaelKe
$LN5@rijndaelKe:

; 195  : 	}		

	jmp	$LN19@rijndaelKe
$LN18@rijndaelKe:

; 196  : 
; 197  : 	return 0;

	xor	eax, eax

; 198  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@rijndaelKe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@rijndaelKe:
	DD	1
	DD	$LN32@rijndaelKe
$LN32@rijndaelKe:
	DD	-88					; ffffffa8H
	DD	32					; 00000020H
	DD	$LN31@rijndaelKe
$LN31@rijndaelKe:
	DB	116					; 00000074H
	DB	107					; 0000006bH
	DB	0
?rijndaelKeySched@@YAHQAY03EHQAY133E@Z ENDP		; rijndaelKeySched
_TEXT	ENDS
END
