; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\game\hooks.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?pGcsKeys@@3PAU_GTA_CONTROLSET@@A		; pGcsKeys
PUBLIC	?dwFarClipHookAddr@@3KA				; dwFarClipHookAddr
PUBLIC	?dwFarClipReturnAddr@@3KA			; dwFarClipReturnAddr
PUBLIC	?_pPlayer@@3PAU_PED_TYPE@@A			; _pPlayer
PUBLIC	?_pVehicle@@3PAU_VEHICLE_TYPE@@A		; _pVehicle
PUBLIC	?TaskPtr@@3KA					; TaskPtr
PUBLIC	?VehicleID@@3GA					; VehicleID
PUBLIC	?bUsePassenger@@3HA				; bUsePassenger
PUBLIC	?pLocalPlayer@@3PAVCLocalPlayer@@A		; pLocalPlayer
PUBLIC	?pVehiclePool@@3PAVCVehiclePool@@A		; pVehiclePool
PUBLIC	?pVehicleClass@@3PAVCVehicle@@A			; pVehicleClass
PUBLIC	?bIgnoreNextEntry@@3HA				; bIgnoreNextEntry
PUBLIC	?bIgnoreNextExit@@3HA				; bIgnoreNextExit
PUBLIC	?opt1@@3HA					; opt1
PUBLIC	?opt2@@3HA					; opt2
PUBLIC	?opt3@@3HA					; opt3
PUBLIC	?opt4@@3HA					; opt4
PUBLIC	?byteInternalPlayer@@3EA			; byteInternalPlayer
PUBLIC	?dwCurPlayerActor@@3KA				; dwCurPlayerActor
PUBLIC	?byteCurPlayer@@3EA				; byteCurPlayer
PUBLIC	?byteSavedCameraMode@@3EA			; byteSavedCameraMode
PUBLIC	?wSavedCameraMode2@@3GA				; wSavedCameraMode2
PUBLIC	?pbyteCameraMode@@3PAEA				; pbyteCameraMode
PUBLIC	?pbyteCurrentPlayer@@3PAEA			; pbyteCurrentPlayer
PUBLIC	?wCameraMode2@@3PAGA				; wCameraMode2
PUBLIC	?dwRGBARadar@@3KA				; dwRGBARadar
PUBLIC	?dwStackFrame@@3KA				; dwStackFrame
PUBLIC	?dwSavedEcx@@3KA				; dwSavedEcx
PUBLIC	?dwRetAddr@@3KA					; dwRetAddr
PUBLIC	?iRadarColor1@@3HA				; iRadarColor1
PUBLIC	?dwSavedCheatFn@@3KA				; dwSavedCheatFn
PUBLIC	?fHealth@@3MA					; fHealth
PUBLIC	?bAllowVehicleCreation@@3HA			; bAllowVehicleCreation
PUBLIC	?bVehicleProcessControlLocal@@3HA		; bVehicleProcessControlLocal
PUBLIC	?vtbl@@3KA					; vtbl
PUBLIC	?call_addr@@3KA					; call_addr
PUBLIC	?s@@3PADA					; s
PUBLIC	?dwPedDamagePed@@3KA				; dwPedDamagePed
PUBLIC	?dwPedDamage1@@3KA				; dwPedDamage1
PUBLIC	?dwIgnoreDamage@@3KA				; dwIgnoreDamage
PUBLIC	?fFarClip@@3MA					; fFarClip
PUBLIC	?fBakUnk@@3MA					; fBakUnk
PUBLIC	?vt@@3PADA					; vt
PUBLIC	?dwParam1@@3KA					; dwParam1
PUBLIC	?dwParam2@@3KA					; dwParam2
PUBLIC	?dwParamThis@@3KA				; dwParamThis
PUBLIC	?GameProcess_HookJmpCode@@3PAEA			; GameProcess_HookJmpCode
PUBLIC	?TaskEnterVehicleDriver_HookJmpCode@@3PAEA	; TaskEnterVehicleDriver_HookJmpCode
PUBLIC	?TaskExitVehicle_HookJmpCode@@3PAEA		; TaskExitVehicle_HookJmpCode
PUBLIC	?RadarTranslateColor_HookJmpCode@@3PAEA		; RadarTranslateColor_HookJmpCode
PUBLIC	?CheatProcessHook_JmpCode@@3PAEA		; CheatProcessHook_JmpCode
PUBLIC	?AddVehicleHook_HookJmpCode@@3PAEA		; AddVehicleHook_HookJmpCode
PUBLIC	?SetFarClip_HookJmpCode@@3PAEA			; SetFarClip_HookJmpCode
PUBLIC	?CGameShutdown_HookJmpCode@@3PAEA		; CGameShutdown_HookJmpCode
PUBLIC	?PedDamage_HookJmpCode@@3PAEA			; PedDamage_HookJmpCode
PUBLIC	?VehicleAudio_HookJmpCode@@3PAEA		; VehicleAudio_HookJmpCode
PUBLIC	?GenTaskAlloc_HookJmpCode@@3PAEA		; GenTaskAlloc_HookJmpCode
PUBLIC	?GetText_HookJmpCode@@3PAEA			; GetText_HookJmpCode
PUBLIC	?PedSay_HookJmpCode@@3PAEA			; PedSay_HookJmpCode
PUBLIC	?bytePatchPedRot@@3PAEA				; bytePatchPedRot
PUBLIC	?bytePatchRadioForPlayer@@3PAEA			; bytePatchRadioForPlayer
PUBLIC	?byteSaveControlFlags@@3EA			; byteSaveControlFlags
PUBLIC	?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A		; _pHornVehicle
PUBLIC	?_iHasSetHornHookFix@@3HA			; _iHasSetHornHookFix
PUBLIC	?_byteSavedControlFlags@@3EA			; _byteSavedControlFlags
PUBLIC	?_dwVehicleParams@@3KA				; _dwVehicleParams
PUBLIC	?_dwAudioClass@@3KA				; _dwAudioClass
PUBLIC	?dwShutDownTick@@3KA				; dwShutDownTick
PUBLIC	?szGotText@@3PADA				; szGotText
PUBLIC	?dwSayParam1@@3KA				; dwSayParam1
PUBLIC	?dwSayParam2@@3KA				; dwSayParam2
PUBLIC	?fSayParam3@@3MA				; fSayParam3
PUBLIC	?dwSayParam4@@3KA				; dwSayParam4
PUBLIC	?dwSayParam5@@3KA				; dwSayParam5
PUBLIC	?dwSayParam6@@3KA				; dwSayParam6
_BSS	SEGMENT
?pGcsKeys@@3PAU_GTA_CONTROLSET@@A DD 01H DUP (?)	; pGcsKeys
?dwFarClipHookAddr@@3KA DD 01H DUP (?)			; dwFarClipHookAddr
?dwFarClipReturnAddr@@3KA DD 01H DUP (?)		; dwFarClipReturnAddr
?_pPlayer@@3PAU_PED_TYPE@@A DD 01H DUP (?)		; _pPlayer
?_pVehicle@@3PAU_VEHICLE_TYPE@@A DD 01H DUP (?)		; _pVehicle
?TaskPtr@@3KA DD 01H DUP (?)				; TaskPtr
?VehicleID@@3GA DW 01H DUP (?)				; VehicleID
	ALIGN	4

?bUsePassenger@@3HA DD 01H DUP (?)			; bUsePassenger
?pLocalPlayer@@3PAVCLocalPlayer@@A DD 01H DUP (?)	; pLocalPlayer
?pVehiclePool@@3PAVCVehiclePool@@A DD 01H DUP (?)	; pVehiclePool
?pVehicleClass@@3PAVCVehicle@@A DD 01H DUP (?)		; pVehicleClass
?bIgnoreNextEntry@@3HA DD 01H DUP (?)			; bIgnoreNextEntry
?bIgnoreNextExit@@3HA DD 01H DUP (?)			; bIgnoreNextExit
?opt1@@3HA DD	01H DUP (?)				; opt1
?opt2@@3HA DD	01H DUP (?)				; opt2
?opt3@@3HA DD	01H DUP (?)				; opt3
?opt4@@3HA DD	01H DUP (?)				; opt4
?byteInternalPlayer@@3EA DB 01H DUP (?)			; byteInternalPlayer
	ALIGN	4

?dwCurPlayerActor@@3KA DD 01H DUP (?)			; dwCurPlayerActor
?byteCurPlayer@@3EA DB 01H DUP (?)			; byteCurPlayer
	ALIGN	4

?byteSavedCameraMode@@3EA DB 01H DUP (?)		; byteSavedCameraMode
	ALIGN	4

?wSavedCameraMode2@@3GA DW 01H DUP (?)			; wSavedCameraMode2
	ALIGN	4

?dwRGBARadar@@3KA DD 01H DUP (?)			; dwRGBARadar
?dwStackFrame@@3KA DD 01H DUP (?)			; dwStackFrame
?dwSavedEcx@@3KA DD 01H DUP (?)				; dwSavedEcx
?dwRetAddr@@3KA DD 01H DUP (?)				; dwRetAddr
?iRadarColor1@@3HA DD 01H DUP (?)			; iRadarColor1
?dwSavedCheatFn@@3KA DD 01H DUP (?)			; dwSavedCheatFn
?fHealth@@3MA DD 01H DUP (?)				; fHealth
?bAllowVehicleCreation@@3HA DD 01H DUP (?)		; bAllowVehicleCreation
?bVehicleProcessControlLocal@@3HA DD 01H DUP (?)	; bVehicleProcessControlLocal
?vtbl@@3KA DD	01H DUP (?)				; vtbl
?call_addr@@3KA DD 01H DUP (?)				; call_addr
?s@@3PADA DB	0100H DUP (?)				; s
?dwPedDamagePed@@3KA DD 01H DUP (?)			; dwPedDamagePed
?dwPedDamage1@@3KA DD 01H DUP (?)			; dwPedDamage1
?dwIgnoreDamage@@3KA DD 01H DUP (?)			; dwIgnoreDamage
?fBakUnk@@3MA DD 01H DUP (?)				; fBakUnk
?vt@@3PADA DD	01H DUP (?)				; vt
?dwParam1@@3KA DD 01H DUP (?)				; dwParam1
?dwParam2@@3KA DD 01H DUP (?)				; dwParam2
?dwParamThis@@3KA DD 01H DUP (?)			; dwParamThis
?byteSaveControlFlags@@3EA DB 01H DUP (?)		; byteSaveControlFlags
	ALIGN	4

?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A DD 01H DUP (?)	; _pHornVehicle
?_iHasSetHornHookFix@@3HA DD 01H DUP (?)		; _iHasSetHornHookFix
?_byteSavedControlFlags@@3EA DB 01H DUP (?)		; _byteSavedControlFlags
	ALIGN	4

?_dwVehicleParams@@3KA DD 01H DUP (?)			; _dwVehicleParams
?_dwAudioClass@@3KA DD 01H DUP (?)			; _dwAudioClass
?dwShutDownTick@@3KA DD 01H DUP (?)			; dwShutDownTick
?szGotText@@3PADA DD 01H DUP (?)			; szGotText
?dwSayParam1@@3KA DD 01H DUP (?)			; dwSayParam1
?dwSayParam2@@3KA DD 01H DUP (?)			; dwSayParam2
?fSayParam3@@3MA DD 01H DUP (?)				; fSayParam3
?dwSayParam4@@3KA DD 01H DUP (?)			; dwSayParam4
?dwSayParam5@@3KA DD 01H DUP (?)			; dwSayParam5
?dwSayParam6@@3KA DD 01H DUP (?)			; dwSayParam6
_BSS	ENDS
_DATA	SEGMENT
?pbyteCameraMode@@3PAEA DD 0b6f1a8H			; pbyteCameraMode
?pbyteCurrentPlayer@@3PAEA DD 0b7cd74H			; pbyteCurrentPlayer
?wCameraMode2@@3PAGA DD 0b6f858H			; wCameraMode2
?fFarClip@@3MA DD 044af0000r			; 1400	; fFarClip
?GameProcess_HookJmpCode@@3PAEA DB 0ffH			; GameProcess_HookJmpCode
	DB	025H
	DB	0d1H
	DB	0beH
	DB	053H
	DB	00H
	ORG $+2
?TaskEnterVehicleDriver_HookJmpCode@@3PAEA DB 0ffH	; TaskEnterVehicleDriver_HookJmpCode
	DB	025H
	DB	0bbH
	DB	019H
	DB	069H
	DB	00H
	DB	090H
	ORG $+1
?TaskExitVehicle_HookJmpCode@@3PAEA DB 0ffH		; TaskExitVehicle_HookJmpCode
	DB	025H
	DB	0baH
	DB	0b8H
	DB	063H
	DB	00H
	DB	090H
	ORG $+1
?RadarTranslateColor_HookJmpCode@@3PAEA DB 0ffH		; RadarTranslateColor_HookJmpCode
	DB	025H
	DB	079H
	DB	04aH
	DB	058H
	DB	00H
	DB	090H
	ORG $+1
?CheatProcessHook_JmpCode@@3PAEA DB 0ffH		; CheatProcessHook_JmpCode
	DB	025H
	DB	0aaH
	DB	085H
	DB	043H
	DB	00H
	DB	090H
	ORG $+1
?AddVehicleHook_HookJmpCode@@3PAEA DB 0ffH		; AddVehicleHook_HookJmpCode
	DB	025H
	DB	033H
	DB	014H
	DB	042H
	DB	00H
	ORG $+2
?SetFarClip_HookJmpCode@@3PAEA DB 0ffH			; SetFarClip_HookJmpCode
	DB	025H
	DB	061H
	DB	036H
	DB	053H
	DB	00H
	DB	090H
	DB	090H
	DB	090H
	ORG $+3
?CGameShutdown_HookJmpCode@@3PAEA DB 0ffH		; CGameShutdown_HookJmpCode
	DB	025H
	DB	0f1H
	DB	0c8H
	DB	053H
	DB	00H
	DB	090H
	ORG $+1
?PedDamage_HookJmpCode@@3PAEA DB 0ffH			; PedDamage_HookJmpCode
	DB	025H
	DB	0bcH
	DB	05aH
	DB	04bH
	DB	00H
	ORG $+2
?VehicleAudio_HookJmpCode@@3PAEA DB 0ffH		; VehicleAudio_HookJmpCode
	DB	025H
	DB	074H
	DB	022H
	DB	050H
	DB	00H
	DB	090H
	DB	090H
	DB	090H
	DB	090H
	ORG $+2
?GenTaskAlloc_HookJmpCode@@3PAEA DB 0ffH		; GenTaskAlloc_HookJmpCode
	DB	025H
	DB	061H
	DB	038H
	DB	04cH
	DB	00H
	ORG $+2
?GetText_HookJmpCode@@3PAEA DB 0ffH			; GetText_HookJmpCode
	DB	025H
	DB	043H
	DB	00H
	DB	06aH
	DB	00H
	DB	090H
	DB	090H
	DB	090H
	ORG $+3
?PedSay_HookJmpCode@@3PAEA DB 0ffH			; PedSay_HookJmpCode
	DB	025H
	DB	0d8H
	DB	0ffH
	DB	05eH
	DB	00H
	DB	090H
	ORG $+1
?bytePatchPedRot@@3PAEA DB 0d9H				; bytePatchPedRot
	DB	096H
	DB	05cH
	DB	05H
	DB	00H
	DB	00H
	ORG $+2
?bytePatchRadioForPlayer@@3PAEA DB 0e8H			; bytePatchRadioForPlayer
	DB	09fH
	DB	037H
	DB	0ffH
	DB	0ffH
_DATA	ENDS
PUBLIC	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
PUBLIC	?GetTeam@CLocalPlayer@@QAEEXZ			; CLocalPlayer::GetTeam
PUBLIC	?GetTeam@CRemotePlayer@@QAEEXZ			; CRemotePlayer::GetTeam
PUBLIC	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
PUBLIC	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z	; CPlayerPool::GetAt
PUBLIC	?GetSlotState@CPlayerPool@@QAEHE@Z		; CPlayerPool::GetSlotState
PUBLIC	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z	; CVehiclePool::GetAt
PUBLIC	?GetSlotState@CVehiclePool@@QAEHG@Z		; CVehiclePool::GetSlotState
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
PUBLIC	?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ	; CNetGame::GetPickupPool
PUBLIC	?GetMenuPool@CNetGame@@QAEPAVCMenuPool@@XZ	; CNetGame::GetMenuPool
PUBLIC	?GetTextDrawPool@CNetGame@@QAEPAVCTextDrawPool@@XZ ; CNetGame::GetTextDrawPool
PUBLIC	?GetGangZonePool@CNetGame@@QAEPAVCGangZonePool@@XZ ; CNetGame::GetGangZonePool
PUBLIC	?GetWalkStyle@CNetGame@@QAEHXZ			; CNetGame::GetWalkStyle
PUBLIC	?GameProcessHook@@YAXXZ				; GameProcessHook
PUBLIC	?TheScripts_Process_Hook@@YAXXZ			; TheScripts_Process_Hook
PUBLIC	?CPlayerPed_ProcessControl_Hook@@YAXXZ		; CPlayerPed_ProcessControl_Hook
PUBLIC	?TaskUseGun_Hook@@YAXXZ				; TaskUseGun_Hook
PUBLIC	?TaskOnFoot1_Hook@@YAXXZ			; TaskOnFoot1_Hook
PUBLIC	?TaskOnFoot2_Hook@@YAXXZ			; TaskOnFoot2_Hook
PUBLIC	?AllVehicles_ProcessControl_TankTurret_Hook@@YAXXZ ; AllVehicles_ProcessControl_TankTurret_Hook
PUBLIC	?AllVehicles_ProcessControl_WaterTurret_Hook@@YAXXZ ; AllVehicles_ProcessControl_WaterTurret_Hook
PUBLIC	?AllVehicles_ProcessControl_Hook@@YAXXZ		; AllVehicles_ProcessControl_Hook
PUBLIC	?VehicleHorn_Hook@@YAXXZ			; VehicleHorn_Hook
PUBLIC	?NotifyEnterVehicle@@YAHXZ			; NotifyEnterVehicle
PUBLIC	?TaskEnterVehicleDriver_Hook@@YAXXZ		; TaskEnterVehicleDriver_Hook
PUBLIC	?TaskExitVehicle@@YAXXZ				; TaskExitVehicle
PUBLIC	?AddVehicleHook@@YAXXZ				; AddVehicleHook
PUBLIC	?RadarTranslateColor@@YAXXZ			; RadarTranslateColor
PUBLIC	?CheatProcessorHook@@YAXXZ			; CheatProcessorHook
PUBLIC	?SetFarClipHook@@YAXXZ				; SetFarClipHook
PUBLIC	?CGameShutdownHook@@YAXXZ			; CGameShutdownHook
PUBLIC	?IsFriendlyFire@@YGHPAU_PED_TYPE@@0@Z		; IsFriendlyFire
PUBLIC	?ProcessInstagib@@YGXPAU_PED_TYPE@@0@Z		; ProcessInstagib
PUBLIC	?PedDamage_Hook@@YAXXZ				; PedDamage_Hook
PUBLIC	?IsLocalPlayerFiring@@YGHXZ			; IsLocalPlayerFiring
PUBLIC	?CCameraCamShake_Sniper_Hook@@YAXXZ		; CCameraCamShake_Sniper_Hook
PUBLIC	?CTrain_ProcessControl_Derailment@@YAXXZ	; CTrain_ProcessControl_Derailment
PUBLIC	?AnimCrashFixHook@@YAXXZ			; AnimCrashFixHook
PUBLIC	?SetForegroundWindowCrashFixHook@@YAXXZ		; SetForegroundWindowCrashFixHook
PUBLIC	?SetCarColorCrashFix@@YAXXZ			; SetCarColorCrashFix
PUBLIC	?GenTaskAlloc_Hook@@YAXXZ			; GenTaskAlloc_Hook
PUBLIC	?CPed_Render_Hook@@YAXXZ			; CPed_Render_Hook
PUBLIC	?GetText_Hook@@YAXXZ				; GetText_Hook
PUBLIC	?CPlayerPed_ProcessCollision_Hook@@YAXXZ	; CPlayerPed_ProcessCollision_Hook
PUBLIC	?CPed_Say_Hook@@YAXXZ				; CPed_Say_Hook
PUBLIC	?ZoneOverlay_Hook@@YAXXZ			; ZoneOverlay_Hook
PUBLIC	?PlayerWalk_Hook@@YAXXZ				; PlayerWalk_Hook
PUBLIC	?PickUpPickup_Hook@@YAXXZ			; PickUpPickup_Hook
PUBLIC	?InstallMethodHook@@YAXKK@Z			; InstallMethodHook
PUBLIC	?InstallHook@@YAXKKKPAEH@Z			; InstallHook
PUBLIC	?InstallCallHook@@YAXKKE@Z			; InstallCallHook
PUBLIC	?InstallGameAndGraphicsLoopHooks@@YAXXZ		; InstallGameAndGraphicsLoopHooks
PUBLIC	?GameInstallHooks@@YAXXZ			; GameInstallHooks
PUBLIC	??_C@_0BM@HJJCKNE@TaskAlloc?3?50x?$CFX?0?50x?$CFX?0?50x?$CFX?$AA@ ; `string'
PUBLIC	??_C@_0BN@OHHGNFLA@CPed?3?3Say?$CI?$CFu?0?$CFu?0?$CFf?0?$CFu?0?$CFu?0?$CFu?$CJ?$AA@ ; `string'
PUBLIC	__real@3dcccccd
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__VirtualProtect@16:PROC
EXTRN	?GameStoreLocalPlayerAim@@YGXXZ:PROC		; GameStoreLocalPlayerAim
EXTRN	?GameSetLocalPlayerAim@@YGXXZ:PROC		; GameSetLocalPlayerAim
EXTRN	?GameSetRemotePlayerAim@@YGXH@Z:PROC		; GameSetRemotePlayerAim
EXTRN	?GameGetPlayerCameraMode@@YGEE@Z:PROC		; GameGetPlayerCameraMode
EXTRN	?GameStoreLocalPlayerCameraExtZoom@@YGXXZ:PROC	; GameStoreLocalPlayerCameraExtZoom
EXTRN	?GameSetLocalPlayerCameraExtZoom@@YGXXZ:PROC	; GameSetLocalPlayerCameraExtZoom
EXTRN	?GameSetRemotePlayerCameraExtZoom@@YGXE@Z:PROC	; GameSetRemotePlayerCameraExtZoom
EXTRN	?GetKeys@CPlayerPed@@QAEGPAG0@Z:PROC		; CPlayerPed::GetKeys
EXTRN	?GetCurrentWeapon@CPlayerPed@@QAEEXZ:PROC	; CPlayerPed::GetCurrentWeapon
EXTRN	?SetArmedWeapon@CPlayerPed@@QAEXH@Z:PROC	; CPlayerPed::SetArmedWeapon
EXTRN	?IsMenuActive@CGame@@QAEHXZ:PROC		; CGame::IsMenuActive
EXTRN	?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z:PROC ; CLocalPlayer::SendExitVehicleNotification
EXTRN	?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z:PROC ; CLocalPlayer::SendEnterVehicleNotification
EXTRN	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z:PROC ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
EXTRN	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z:PROC ; CVehiclePool::FindIDFromGtaPtr
EXTRN	?PickedUp@CPickupPool@@QAEXH@Z:PROC		; CPickupPool::PickedUp
EXTRN	?Draw@CGangZonePool@@QAEXXZ:PROC		; CGangZonePool::Draw
EXTRN	?GetTextPointer@CMenuPool@@QAEPADPAD@Z:PROC	; CMenuPool::GetTextPointer
EXTRN	?Draw@CTextDrawPool@@QAEXXZ:PROC		; CTextDrawPool::Draw
EXTRN	?AddDebugMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddDebugMessage
EXTRN	?QuitGame@@YAXXZ:PROC				; QuitGame
EXTRN	?UnFuck@@YAXKH@Z:PROC				; UnFuck
EXTRN	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ:PROC ; GamePool_FindPlayerPed
EXTRN	?TranslateColorCodeToRGBA@@YGKH@Z:PROC		; TranslateColorCodeToRGBA
EXTRN	?FindPlayerNumFromPedPtr@@YGEK@Z:PROC		; FindPlayerNumFromPedPtr
EXTRN	?GameStoreLocalPlayerKeys@@YAXXZ:PROC		; GameStoreLocalPlayerKeys
EXTRN	?GameSetLocalPlayerKeys@@YAXXZ:PROC		; GameSetLocalPlayerKeys
EXTRN	?GameSetRemotePlayerKeys@@YAXH@Z:PROC		; GameSetRemotePlayerKeys
EXTRN	?SetupD3DFog@@YAXH@Z:PROC			; SetupD3DFog
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pChatWindow@@3PAVCChatWindow@@A:DWORD		; pChatWindow
EXTRN	?dwGraphicsLoop@@3KA:DWORD			; dwGraphicsLoop
EXTRN	?dwFogEnabled@@3KA:DWORD			; dwFogEnabled
EXTRN	__fltused:DWORD
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BN@OHHGNFLA@CPed?3?3Say?$CI?$CFu?0?$CFu?0?$CFf?0?$CFu?0?$CFu?0?$CFu?$CJ?$AA@
CONST	SEGMENT
??_C@_0BN@OHHGNFLA@CPed?3?3Say?$CI?$CFu?0?$CFu?0?$CFf?0?$CFu?0?$CFu?0?$CFu?$CJ?$AA@ DB 'C'
	DB	'Ped::Say(%u,%u,%f,%u,%u,%u)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HJJCKNE@TaskAlloc?3?50x?$CFX?0?50x?$CFX?0?50x?$CFX?$AA@
CONST	SEGMENT
??_C@_0BM@HJJCKNE@TaskAlloc?3?50x?$CFX?0?50x?$CFX?0?50x?$CFX?$AA@ DB 'Tas'
	DB	'kAlloc: 0x%X, 0x%X, 0x%X', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?GameInstallHooks@@YAXXZ
_TEXT	SEGMENT
?GameInstallHooks@@YAXXZ PROC				; GameInstallHooks, COMDAT

; 1261 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1262 : 	//InstallHook(ADDR_RENDER2DSTUFF,(DWORD)GraphicsLoopHook,
; 1263 : 		//ADDR_RENDER2DSTUFF_STORAGE,GraphicsLoop_HookJmpCode,
; 1264 : 		//sizeof(GraphicsLoop_HookJmpCode));
; 1265 : 	// Above code replaced by a new method which should avoid
; 1266 : 	// stack corruption of the return value
; 1267 : 	
; 1268 : 	InstallGameAndGraphicsLoopHooks();

	call	?InstallGameAndGraphicsLoopHooks@@YAXXZ	; InstallGameAndGraphicsLoopHooks

; 1269 : 
; 1270 : 	InstallMethodHook(0x86D190,(DWORD)CPlayerPed_ProcessControl_Hook);

	push	OFFSET ?CPlayerPed_ProcessControl_Hook@@YAXXZ ; CPlayerPed_ProcessControl_Hook
	push	8835472					; 0086d190H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1271 : 	InstallMethodHook(0x86D744,(DWORD)TaskUseGun_Hook);

	push	OFFSET ?TaskUseGun_Hook@@YAXXZ		; TaskUseGun_Hook
	push	8836932					; 0086d744H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1272 : 	InstallMethodHook(0x86D194,(DWORD)CPlayerPed_ProcessCollision_Hook);

	push	OFFSET ?CPlayerPed_ProcessCollision_Hook@@YAXXZ ; CPlayerPed_ProcessCollision_Hook
	push	8835476					; 0086d194H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1273 : 
; 1274 : 	//InstallMethodHook(0x870904,(DWORD)TaskOnFoot1_Hook);
; 1275 : 	//InstallMethodHook(0x870908,(DWORD)TaskOnFoot2_Hook);
; 1276 : 
; 1277 : 	InstallMethodHook(0x871148,(DWORD)AllVehicles_ProcessControl_Hook); // Automobile

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8851784					; 00871148H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1278 : 	InstallMethodHook(0x8721C8,(DWORD)AllVehicles_ProcessControl_Hook); // boat

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8856008					; 008721c8H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1279 : 	InstallMethodHook(0x871388,(DWORD)AllVehicles_ProcessControl_Hook); // motorbike1

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8852360					; 00871388H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1280 : 	InstallMethodHook(0x871970,(DWORD)AllVehicles_ProcessControl_Hook); // plane

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8853872					; 00871970H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1281 : 	InstallMethodHook(0x8716A8,(DWORD)AllVehicles_ProcessControl_Hook); // heli

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8853160					; 008716a8H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1282 : 	InstallMethodHook(0x871550,(DWORD)AllVehicles_ProcessControl_Hook); // pushbike

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8852816					; 00871550H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1283 : 	InstallMethodHook(0x871800,(DWORD)AllVehicles_ProcessControl_Hook); // truck

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8853504					; 00871800H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1284 : 	InstallMethodHook(0x871B10,(DWORD)AllVehicles_ProcessControl_Hook); // quad

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8854288					; 00871b10H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1285 : 	InstallMethodHook(0x872398,(DWORD)AllVehicles_ProcessControl_Hook); // train

	push	OFFSET ?AllVehicles_ProcessControl_Hook@@YAXXZ ; AllVehicles_ProcessControl_Hook
	push	8856472					; 00872398H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1286 : 
; 1287 : 	// Radar and map hooks for gang zones
; 1288 : 	InstallCallHook(0x5869BF,(DWORD)ZoneOverlay_Hook);

	push	232					; 000000e8H
	push	OFFSET ?ZoneOverlay_Hook@@YAXXZ		; ZoneOverlay_Hook
	push	5794239					; 005869bfH
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1289 : 	InstallCallHook(0x5759E4,(DWORD)ZoneOverlay_Hook);

	push	232					; 000000e8H
	push	OFFSET ?ZoneOverlay_Hook@@YAXXZ		; ZoneOverlay_Hook
	push	5724644					; 005759e4H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1290 : 	
; 1291 : 	InstallCallHook(0x609A4E,(DWORD)PlayerWalk_Hook);

	push	232					; 000000e8H
	push	OFFSET ?PlayerWalk_Hook@@YAXXZ		; PlayerWalk_Hook
	push	6330958					; 00609a4eH
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1292 : 	InstallCallHook(0x4579C6,(DWORD)PickUpPickup_Hook, 0xE9);

	push	233					; 000000e9H
	push	OFFSET ?PickUpPickup_Hook@@YAXXZ	; PickUpPickup_Hook
	push	4553158					; 004579c6H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1293 : 
; 1294 : 	// This is for disabling the CRunningScript::ProcessOneCommand outside CGame::Process and ScriptCommand
; 1295 : 	InstallCallHook(0x53BFC7,(DWORD)TheScripts_Process_Hook);

	push	232					; 000000e8H
	push	OFFSET ?TheScripts_Process_Hook@@YAXXZ	; TheScripts_Process_Hook
	push	5488583					; 0053bfc7H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1296 :     
; 1297 : 	//InstallCallHook(0x6B2028,(DWORD)AllVehicles_ProcessControl_TankTurret_Hook);
; 1298 : 	//InstallCallHook(0x6B1F5E,(DWORD)AllVehicles_ProcessControl_WaterTurret_Hook);
; 1299 : 
; 1300 : 	// Hook the call to CCamera::CamShake when called for sniper fire
; 1301 : 	InstallCallHook(0x73ACE2,(DWORD)CCameraCamShake_Sniper_Hook);

	push	232					; 000000e8H
	push	OFFSET ?CCameraCamShake_Sniper_Hook@@YAXXZ ; CCameraCamShake_Sniper_Hook
	push	7580898					; 0073ace2H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1302 : 
; 1303 : 	// Hook the train derailment code
; 1304 : 	InstallCallHook(0x6F8CF8,(DWORD)CTrain_ProcessControl_Derailment);

	push	232					; 000000e8H
	push	OFFSET ?CTrain_ProcessControl_Derailment@@YAXXZ ; CTrain_ProcessControl_Derailment
	push	7310584					; 006f8cf8H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1305 : 
; 1306 : 	InstallHook(0x6402F0,(DWORD)TaskEnterVehicleDriver_Hook,
; 1307 : 		0x6919BB,TaskEnterVehicleDriver_HookJmpCode,sizeof(TaskEnterVehicleDriver_HookJmpCode));

	push	7
	push	OFFSET ?TaskEnterVehicleDriver_HookJmpCode@@3PAEA ; TaskEnterVehicleDriver_HookJmpCode
	push	6887867					; 006919bbH
	push	OFFSET ?TaskEnterVehicleDriver_Hook@@YAXXZ ; TaskEnterVehicleDriver_Hook
	push	6554352					; 006402f0H
	call	?InstallHook@@YAXKKKPAEH@Z		; InstallHook
	add	esp, 20					; 00000014H

; 1308 : 
; 1309 : 	InstallHook(0x63B8C0,(DWORD)TaskExitVehicle,
; 1310 : 		0x63B8BA,TaskExitVehicle_HookJmpCode,sizeof(TaskExitVehicle_HookJmpCode));

	push	7
	push	OFFSET ?TaskExitVehicle_HookJmpCode@@3PAEA ; TaskExitVehicle_HookJmpCode
	push	6535354					; 0063b8baH
	push	OFFSET ?TaskExitVehicle@@YAXXZ		; TaskExitVehicle
	push	6535360					; 0063b8c0H
	call	?InstallHook@@YAXKKKPAEH@Z		; InstallHook
	add	esp, 20					; 00000014H

; 1311 : 	/*
; 1312 : 	InstallHook(0x421440,(DWORD)AddVehicleHook,
; 1313 : 		0x421433,AddVehicleHook_HookJmpCode,sizeof(AddVehicleHook_HookJmpCode));*/
; 1314 : 
; 1315 : 	InstallHook(0x438576,(DWORD)CheatProcessorHook,
; 1316 : 		0x4385AA,CheatProcessHook_JmpCode,sizeof(CheatProcessHook_JmpCode));

	push	7
	push	OFFSET ?CheatProcessHook_JmpCode@@3PAEA	; CheatProcessHook_JmpCode
	push	4425130					; 004385aaH
	push	OFFSET ?CheatProcessorHook@@YAXXZ	; CheatProcessorHook
	push	4425078					; 00438576H
	call	?InstallHook@@YAXKKKPAEH@Z		; InstallHook
	add	esp, 20					; 00000014H

; 1317 : 
; 1318 : 	InstallHook(0x584770,(DWORD)RadarTranslateColor,0x584A79,
; 1319 : 		RadarTranslateColor_HookJmpCode,sizeof(RadarTranslateColor_HookJmpCode));

	push	7
	push	OFFSET ?RadarTranslateColor_HookJmpCode@@3PAEA ; RadarTranslateColor_HookJmpCode
	push	5786233					; 00584a79H
	push	OFFSET ?RadarTranslateColor@@YAXXZ	; RadarTranslateColor
	push	5785456					; 00584770H
	call	?InstallHook@@YAXKKKPAEH@Z		; InstallHook
	add	esp, 20					; 00000014H

; 1320 : 
; 1321 : 	//InstallHook(dwFarClipHookAddr,(DWORD)SetFarClipHook,0x533661,
; 1322 : 		//SetFarClip_HookJmpCode,sizeof(SetFarClip_HookJmpCode));
; 1323 : 
; 1324 : 	InstallHook(0x53C900,(DWORD)CGameShutdownHook,0x53C8F1,
; 1325 : 		CGameShutdown_HookJmpCode,sizeof(CGameShutdown_HookJmpCode));

	push	7
	push	OFFSET ?CGameShutdown_HookJmpCode@@3PAEA ; CGameShutdown_HookJmpCode
	push	5490929					; 0053c8f1H
	push	OFFSET ?CGameShutdownHook@@YAXXZ	; CGameShutdownHook
	push	5490944					; 0053c900H
	call	?InstallHook@@YAXKKKPAEH@Z		; InstallHook
	add	esp, 20					; 00000014H

; 1326 : 
; 1327 : 	InstallHook(0x4B5AC0,(DWORD)PedDamage_Hook,0x4B5ABC,
; 1328 : 		PedDamage_HookJmpCode,sizeof(PedDamage_HookJmpCode));

	push	6
	push	OFFSET ?PedDamage_HookJmpCode@@3PAEA	; PedDamage_HookJmpCode
	push	4938428					; 004b5abcH
	push	OFFSET ?PedDamage_Hook@@YAXXZ		; PedDamage_Hook
	push	4938432					; 004b5ac0H
	call	?InstallHook@@YAXKKKPAEH@Z		; InstallHook
	add	esp, 20					; 00000014H

; 1329 : 
; 1330 : 	// Fix for 0x004D41C5 crash
; 1331 : 	InstallCallHook(0x4D41C0, (DWORD)AnimCrashFixHook, 0xE9);

	push	233					; 000000e9H
	push	OFFSET ?AnimCrashFixHook@@YAXXZ		; AnimCrashFixHook
	push	5063104					; 004d41c0H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1332 : 
; 1333 : 	// Vehicle Horn Fix for PlayerPeds.
; 1334 : 	InstallCallHook(0x501B1D, (DWORD)VehicleHorn_Hook);

	push	232					; 000000e8H
	push	OFFSET ?VehicleHorn_Hook@@YAXXZ		; VehicleHorn_Hook
	push	5249821					; 00501b1dH
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1335 : 	InstallCallHook(0x501B42, (DWORD)VehicleHorn_Hook);

	push	232					; 000000e8H
	push	OFFSET ?VehicleHorn_Hook@@YAXXZ		; VehicleHorn_Hook
	push	5249858					; 00501b42H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1336 : 	InstallCallHook(0x501FC2, (DWORD)VehicleHorn_Hook);

	push	232					; 000000e8H
	push	OFFSET ?VehicleHorn_Hook@@YAXXZ		; VehicleHorn_Hook
	push	5251010					; 00501fc2H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1337 : 	InstallCallHook(0x502067, (DWORD)VehicleHorn_Hook);

	push	232					; 000000e8H
	push	OFFSET ?VehicleHorn_Hook@@YAXXZ		; VehicleHorn_Hook
	push	5251175					; 00502067H
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1338 : 	InstallCallHook(0x5021AE, (DWORD)VehicleHorn_Hook);

	push	232					; 000000e8H
	push	OFFSET ?VehicleHorn_Hook@@YAXXZ		; VehicleHorn_Hook
	push	5251502					; 005021aeH
	call	?InstallCallHook@@YAXKKE@Z		; InstallCallHook
	add	esp, 12					; 0000000cH

; 1339 :     
; 1340 : 	InstallHook(0x6A0050, (DWORD)GetText_Hook, 0x6A0043, GetText_HookJmpCode, sizeof (GetText_HookJmpCode));

	push	9
	push	OFFSET ?GetText_HookJmpCode@@3PAEA	; GetText_HookJmpCode
	push	6946883					; 006a0043H
	push	OFFSET ?GetText_Hook@@YAXXZ		; GetText_Hook
	push	6946896					; 006a0050H
	call	?InstallHook@@YAXKKKPAEH@Z		; InstallHook
	add	esp, 20					; 00000014H

; 1341 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GameInstallHooks@@YAXXZ ENDP				; GameInstallHooks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?InstallGameAndGraphicsLoopHooks@@YAXXZ
_TEXT	SEGMENT
?InstallGameAndGraphicsLoopHooks@@YAXXZ PROC		; InstallGameAndGraphicsLoopHooks, COMDAT

; 1238 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1239 : 	UnFuck(0x53EB13,4);

	push	4
	push	5499667					; 0053eb13H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 1240 : 	*(int *)0x53EB13 = dwGraphicsLoop - 0x53EB12 - 5; // relative addr

	mov	eax, DWORD PTR ?dwGraphicsLoop@@3KA	; dwGraphicsLoop
	sub	eax, 5499671				; 0053eb17H
	mov	DWORD PTR ds:5499667, eax

; 1241 : 
; 1242 : 	InstallHook(0x58C246, (DWORD)GameProcessHook, 0x53BED1, GameProcess_HookJmpCode, sizeof(GameProcess_HookJmpCode));

	push	6
	push	OFFSET ?GameProcess_HookJmpCode@@3PAEA	; GameProcess_HookJmpCode
	push	5488337					; 0053bed1H
	push	OFFSET ?GameProcessHook@@YAXXZ		; GameProcessHook
	push	5816902					; 0058c246H
	call	?InstallHook@@YAXKKKPAEH@Z		; InstallHook
	add	esp, 20					; 00000014H

; 1243 : 
; 1244 : 	//----------------------------------------------------------
; 1245 : 
; 1246 : 	// For fixing fogging issues (needed for both debug and net)
; 1247 : 	InstallMethodHook(0x86D1B0,(DWORD)CPed_Render_Hook); // This is PlayerPed

	push	OFFSET ?CPed_Render_Hook@@YAXXZ		; CPed_Render_Hook
	push	8835504					; 0086d1b0H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1248 : 	InstallMethodHook(0x86C0F0,(DWORD)CPed_Render_Hook);

	push	OFFSET ?CPed_Render_Hook@@YAXXZ		; CPed_Render_Hook
	push	8831216					; 0086c0f0H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1249 : 	InstallMethodHook(0x86C168,(DWORD)CPed_Render_Hook);

	push	OFFSET ?CPed_Render_Hook@@YAXXZ		; CPed_Render_Hook
	push	8831336					; 0086c168H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1250 : 	InstallMethodHook(0x86C248,(DWORD)CPed_Render_Hook);

	push	OFFSET ?CPed_Render_Hook@@YAXXZ		; CPed_Render_Hook
	push	8831560					; 0086c248H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1251 : 	InstallMethodHook(0x86C3A0,(DWORD)CPed_Render_Hook);

	push	OFFSET ?CPed_Render_Hook@@YAXXZ		; CPed_Render_Hook
	push	8831904					; 0086c3a0H
	call	?InstallMethodHook@@YAXKK@Z		; InstallMethodHook
	add	esp, 8

; 1252 : 
; 1253 : 	/*
; 1254 : 	InstallHook(0x5EFFE0,(DWORD)CPed_Say_Hook,
; 1255 : 		0x5EFFD8,PedSay_HookJmpCode,sizeof(PedSay_HookJmpCode));*/
; 1256 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InstallGameAndGraphicsLoopHooks@@YAXXZ ENDP		; InstallGameAndGraphicsLoopHooks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?InstallCallHook@@YAXKKE@Z
_TEXT	SEGMENT
_disp$ = -32						; size = 4
_oldProt2$ = -20					; size = 4
_oldProt$ = -8						; size = 4
_dwInstallAddress$ = 8					; size = 4
_dwHookFunction$ = 12					; size = 4
_byteJumpCode$ = 16					; size = 1
?InstallCallHook@@YAXKKE@Z PROC				; InstallCallHook, COMDAT

; 1225 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1226 : 	DWORD oldProt, oldProt2;
; 1227 : 	DWORD disp = dwHookFunction - (dwInstallAddress + 5);

	mov	eax, DWORD PTR _dwInstallAddress$[ebp]
	add	eax, 5
	mov	ecx, DWORD PTR _dwHookFunction$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _disp$[ebp], ecx

; 1228 : 
; 1229 : 	VirtualProtect((LPVOID)dwInstallAddress,5,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	5
	mov	ecx, DWORD PTR _dwInstallAddress$[ebp]
	push	ecx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1230 : 	*(PBYTE)(dwInstallAddress) = byteJumpCode;

	mov	eax, DWORD PTR _dwInstallAddress$[ebp]
	mov	cl, BYTE PTR _byteJumpCode$[ebp]
	mov	BYTE PTR [eax], cl

; 1231 : 	*(PDWORD)(dwInstallAddress+1) = (DWORD)disp;

	mov	eax, DWORD PTR _dwInstallAddress$[ebp]
	mov	ecx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [eax+1], ecx

; 1232 : 	VirtualProtect((LPVOID)dwInstallAddress,5,oldProt,&oldProt2);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldProt$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _dwInstallAddress$[ebp]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1233 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@InstallCal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@InstallCal:
	DD	2
	DD	$LN5@InstallCal
$LN5@InstallCal:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@InstallCal
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@InstallCal
$LN4@InstallCal:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN3@InstallCal:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
?InstallCallHook@@YAXKKE@Z ENDP				; InstallCallHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?InstallHook@@YAXKKKPAEH@Z
_TEXT	SEGMENT
_oldProt2$ = -20					; size = 4
_oldProt$ = -8						; size = 4
_dwInstallAddress$ = 8					; size = 4
_dwHookFunction$ = 12					; size = 4
_dwHookStorage$ = 16					; size = 4
_pbyteJmpCode$ = 20					; size = 4
_iJmpCodeSize$ = 24					; size = 4
?InstallHook@@YAXKKKPAEH@Z PROC				; InstallHook, COMDAT

; 1208 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1209 : 	DWORD oldProt, oldProt2;
; 1210 : 
; 1211 : 	// Install the pointer to procaddr.
; 1212 : 	VirtualProtect((PVOID)dwHookStorage,4,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	4
	mov	ecx, DWORD PTR _dwHookStorage$[ebp]
	push	ecx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1213 : 	*(PDWORD)dwHookStorage = (DWORD)dwHookFunction;

	mov	eax, DWORD PTR _dwHookStorage$[ebp]
	mov	ecx, DWORD PTR _dwHookFunction$[ebp]
	mov	DWORD PTR [eax], ecx

; 1214 : 	VirtualProtect((PVOID)dwHookStorage,4,oldProt,&oldProt2);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldProt$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _dwHookStorage$[ebp]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1215 : 
; 1216 : 	// Install the Jmp code.
; 1217 : 	VirtualProtect((PVOID)dwInstallAddress,iJmpCodeSize,PAGE_EXECUTE_READWRITE,&oldProt);		

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _iJmpCodeSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwInstallAddress$[ebp]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1218 : 	memcpy((PVOID)dwInstallAddress,pbyteJmpCode,iJmpCodeSize);

	mov	eax, DWORD PTR _iJmpCodeSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbyteJmpCode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwInstallAddress$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1219 : 	VirtualProtect((PVOID)dwInstallAddress,iJmpCodeSize,oldProt,&oldProt2);	

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldProt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iJmpCodeSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwInstallAddress$[ebp]
	push	eax
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1220 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@InstallHoo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@InstallHoo:
	DD	2
	DD	$LN5@InstallHoo
$LN5@InstallHoo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@InstallHoo
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@InstallHoo
$LN4@InstallHoo:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN3@InstallHoo:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
?InstallHook@@YAXKKKPAEH@Z ENDP				; InstallHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?InstallMethodHook@@YAXKK@Z
_TEXT	SEGMENT
_oldProt2$ = -20					; size = 4
_oldProt$ = -8						; size = 4
_dwInstallAddress$ = 8					; size = 4
_dwHookFunction$ = 12					; size = 4
?InstallMethodHook@@YAXKK@Z PROC			; InstallMethodHook, COMDAT

; 1194 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1195 : 	DWORD oldProt, oldProt2;
; 1196 : 	VirtualProtect((LPVOID)dwInstallAddress,4,PAGE_EXECUTE_READWRITE,&oldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt$[ebp]
	push	eax
	push	64					; 00000040H
	push	4
	mov	ecx, DWORD PTR _dwInstallAddress$[ebp]
	push	ecx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1197 : 	*(PDWORD)dwInstallAddress = (DWORD)dwHookFunction;

	mov	eax, DWORD PTR _dwInstallAddress$[ebp]
	mov	ecx, DWORD PTR _dwHookFunction$[ebp]
	mov	DWORD PTR [eax], ecx

; 1198 : 	VirtualProtect((LPVOID)dwInstallAddress,4,oldProt,&oldProt2);

	mov	esi, esp
	lea	eax, DWORD PTR _oldProt2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldProt$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _dwInstallAddress$[ebp]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1199 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@InstallMet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@InstallMet:
	DD	2
	DD	$LN5@InstallMet
$LN5@InstallMet:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@InstallMet
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@InstallMet
$LN4@InstallMet:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN3@InstallMet:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
?InstallMethodHook@@YAXKK@Z ENDP			; InstallMethodHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?PickUpPickup_Hook@@YAXXZ
_TEXT	SEGMENT
_pPickups$1 = -8					; size = 4
?PickUpPickup_Hook@@YAXXZ PROC				; PickUpPickup_Hook, COMDAT

; 1175 : 	_asm mov dwParam1, esi

	mov	DWORD PTR ?dwParam1@@3KA, esi		; dwParam1

; 1176 : 	_asm pushad;

	pushad

; 1177 : 
; 1178 : 	if (pNetGame && pNetGame->GetPickupPool()) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN1@PickUpPick
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ ; CNetGame::GetPickupPool
	test	eax, eax
	je	SHORT $LN1@PickUpPick

; 1179 : 		CPickupPool* pPickups = pNetGame->GetPickupPool( );

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ ; CNetGame::GetPickupPool
	mov	DWORD PTR _pPickups$1[ebp], eax

; 1180 : 		pPickups->PickedUp( ((dwParam1-0x9788C0) / 0x20) );

	mov	eax, DWORD PTR ?dwParam1@@3KA		; dwParam1
	sub	eax, 9930944				; 009788c0H
	shr	eax, 5
	push	eax
	mov	ecx, DWORD PTR _pPickups$1[ebp]
	call	?PickedUp@CPickupPool@@QAEXH@Z		; CPickupPool::PickedUp
$LN1@PickUpPick:

; 1181 : 	}
; 1182 : 
; 1183 : 	_asm popad;

	popad

; 1184 : 	_asm mov al, [esi+0x1C]

	mov	al, BYTE PTR [esi+28]

; 1185 : 	_asm cmp al, 6

	cmp	al, 6

; 1186 : 	_asm push 0x4579CB

	push	4553163					; 004579cbH

; 1187 : 	_asm ret

	ret	0
?PickUpPickup_Hook@@YAXXZ ENDP				; PickUpPickup_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?PlayerWalk_Hook@@YAXXZ
_TEXT	SEGMENT
?PlayerWalk_Hook@@YAXXZ PROC				; PlayerWalk_Hook, COMDAT

; 1158 : 	_asm pushad;

	pushad

; 1159 : 	if (pNetGame && pNetGame->GetWalkStyle()) // m_bUseCJWalk

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN2@PlayerWalk
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetWalkStyle@CNetGame@@QAEHXZ		; CNetGame::GetWalkStyle
	test	eax, eax
	je	SHORT $LN2@PlayerWalk

; 1160 : 	{
; 1161 : 		_asm popad;

	popad

; 1162 : 		_asm mov [esi + 0x4D4], eax;

	mov	DWORD PTR [esi+1236], eax

; 1163 : 	}
; 1164 : 	else

	jmp	SHORT $LN1@PlayerWalk
$LN2@PlayerWalk:

; 1165 : 	{
; 1166 : 		_asm popad;

	popad
$LN1@PlayerWalk:

; 1167 : 	}
; 1168 : 	_asm ret;

	ret	0
?PlayerWalk_Hook@@YAXXZ ENDP				; PlayerWalk_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?ZoneOverlay_Hook@@YAXXZ
_TEXT	SEGMENT
?ZoneOverlay_Hook@@YAXXZ PROC				; ZoneOverlay_Hook, COMDAT

; 1148 : 	_asm pushad;

	pushad

; 1149 : 	if (pNetGame && pNetGame->GetGangZonePool()) pNetGame->GetGangZonePool()->Draw();

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN1@ZoneOverla
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetGangZonePool@CNetGame@@QAEPAVCGangZonePool@@XZ ; CNetGame::GetGangZonePool
	test	eax, eax
	je	SHORT $LN1@ZoneOverla
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetGangZonePool@CNetGame@@QAEPAVCGangZonePool@@XZ ; CNetGame::GetGangZonePool
	mov	ecx, eax
	call	?Draw@CGangZonePool@@QAEXXZ		; CGangZonePool::Draw
$LN1@ZoneOverla:

; 1150 : 	_asm popad;

	popad

; 1151 : 	_asm ret;

	ret	0
?ZoneOverlay_Hook@@YAXXZ ENDP				; ZoneOverlay_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?CPed_Say_Hook@@YAXXZ
_TEXT	SEGMENT
?CPed_Say_Hook@@YAXXZ PROC				; CPed_Say_Hook, COMDAT

; 1116 :     _asm mov eax, [esp+4]

	mov	eax, DWORD PTR [esp+4]

; 1117 : 	_asm mov dwSayParam1, eax

	mov	DWORD PTR ?dwSayParam1@@3KA, eax	; dwSayParam1

; 1118 : 	_asm mov eax, [esp+8]

	mov	eax, DWORD PTR [esp+8]

; 1119 : 	_asm mov dwSayParam2, eax

	mov	DWORD PTR ?dwSayParam2@@3KA, eax	; dwSayParam2

; 1120 : 	_asm mov eax, [esp+12]

	mov	eax, DWORD PTR [esp+12]

; 1121 : 	_asm mov fSayParam3, eax

	mov	DWORD PTR ?fSayParam3@@3MA, eax

; 1122 : 	_asm mov eax, [esp+16]

	mov	eax, DWORD PTR [esp+16]

; 1123 : 	_asm mov dwSayParam4, eax

	mov	DWORD PTR ?dwSayParam4@@3KA, eax	; dwSayParam4

; 1124 : 	_asm mov eax, [esp+20]

	mov	eax, DWORD PTR [esp+20]

; 1125 : 	_asm mov dwSayParam5, eax

	mov	DWORD PTR ?dwSayParam5@@3KA, eax	; dwSayParam5

; 1126 : 	_asm mov eax, [esp+24]

	mov	eax, DWORD PTR [esp+24]

; 1127 : 	_asm mov dwSayParam6, eax

	mov	DWORD PTR ?dwSayParam6@@3KA, eax	; dwSayParam6

; 1128 : 
; 1129 : 	_asm pushad

	pushad

; 1130 : 
; 1131 : 	if(dwSayParam1 != 45) {

	cmp	DWORD PTR ?dwSayParam1@@3KA, 45		; dwSayParam1, 0000002dH
	je	SHORT $LN1@CPed_Say_H

; 1132 : 		if(pChatWindow) pChatWindow->AddDebugMessage("CPed::Say(%u,%u,%f,%u,%u,%u)",

	cmp	DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A, 0 ; pChatWindow
	je	SHORT $LN1@CPed_Say_H

; 1133 : 			dwSayParam1,dwSayParam2,fSayParam3,dwSayParam4,dwSayParam5,dwSayParam6);

	mov	eax, DWORD PTR ?dwSayParam6@@3KA	; dwSayParam6
	push	eax
	mov	ecx, DWORD PTR ?dwSayParam5@@3KA	; dwSayParam5
	push	ecx
	mov	edx, DWORD PTR ?dwSayParam4@@3KA	; dwSayParam4
	push	edx
	cvtss2sd xmm0, DWORD PTR ?fSayParam3@@3MA
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?dwSayParam2@@3KA	; dwSayParam2
	push	eax
	mov	ecx, DWORD PTR ?dwSayParam1@@3KA	; dwSayParam1
	push	ecx
	push	OFFSET ??_C@_0BN@OHHGNFLA@CPed?3?3Say?$CI?$CFu?0?$CFu?0?$CFf?0?$CFu?0?$CFu?0?$CFu?$CJ?$AA@
	mov	edx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	edx
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 36					; 00000024H
$LN1@CPed_Say_H:

; 1134 : 	}
; 1135 : 
; 1136 : 	_asm popad

	popad

; 1137 : 
; 1138 :     _asm mov eax, [esp+4]

	mov	eax, DWORD PTR [esp+4]

; 1139 :     _asm test ax, ax

	test	ax, ax

; 1140 : 	_asm mov edx, 0x5EFFE7

	mov	edx, 6225895				; 005effe7H

; 1141 : 	_asm jmp edx

	jmp	edx
?CPed_Say_Hook@@YAXXZ ENDP				; CPed_Say_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?CPlayerPed_ProcessCollision_Hook@@YAXXZ
_TEXT	SEGMENT
?CPlayerPed_ProcessCollision_Hook@@YAXXZ PROC		; CPlayerPed_ProcessCollision_Hook, COMDAT

; 1091 : 	_asm test ecx, ecx

	test	ecx, ecx

; 1092 : 	_asm jnz ptr_is_ok

	jne	SHORT $ptr_is_ok$3

; 1093 : 	_asm ret

	ret	0
$ptr_is_ok$3:

; 1094 : ptr_is_ok:
; 1095 : 	_asm mov eax, [ecx+28]

	mov	eax, DWORD PTR [ecx+28]

; 1096 : 	_asm shr eax, 31

	shr	eax, 31					; 0000001fH

; 1097 : 	_asm cmp eax, 1

	cmp	eax, 1

; 1098 : 	_asm jne do_process_cols

	jne	SHORT $do_process_cols$4

; 1099 : 	_asm ret // we set top bit so don't process this

	ret	0
$do_process_cols$4:

; 1100 : do_process_cols:
; 1101 :     _asm mov edx, 0x54DFB0

	mov	edx, 5562288				; 0054dfb0H

; 1102 : 	_asm jmp edx

	jmp	edx
?CPlayerPed_ProcessCollision_Hook@@YAXXZ ENDP		; CPlayerPed_ProcessCollision_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?GetText_Hook@@YAXXZ
_TEXT	SEGMENT
?GetText_Hook@@YAXXZ PROC				; GetText_Hook, COMDAT

; 1057 : 	_asm sub esp, 0x20

	sub	esp, 32					; 00000020H

; 1058 : 	_asm push esi

	push	esi

; 1059 : 	_asm push edi

	push	edi

; 1060 : 	_asm mov edi, [esp + 0x2C]

	mov	edi, DWORD PTR [esp+44]

; 1061 : 	_asm pushad

	pushad

; 1062 : 	_asm mov dwSavedEcx, edi

	mov	DWORD PTR ?dwSavedEcx@@3KA, edi		; dwSavedEcx

; 1063 : 	
; 1064 : 	szGotText = NULL;

	mov	DWORD PTR ?szGotText@@3PADA, 0		; szGotText

; 1065 : 	// Faster than doing strncmp
; 1066 : 	if (pNetGame && *(PCHAR)(dwSavedEcx) == 'S' && *(PCHAR)(dwSavedEcx + 1) == 'A' && *(PCHAR)(dwSavedEcx + 2) == 'M' && *(PCHAR)(dwSavedEcx + 3) == 'P')

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN3@GetText_Ho
	mov	eax, DWORD PTR ?dwSavedEcx@@3KA		; dwSavedEcx
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 83					; 00000053H
	jne	SHORT $LN3@GetText_Ho
	mov	eax, DWORD PTR ?dwSavedEcx@@3KA		; dwSavedEcx
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 65					; 00000041H
	jne	SHORT $LN3@GetText_Ho
	mov	eax, DWORD PTR ?dwSavedEcx@@3KA		; dwSavedEcx
	movsx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 77					; 0000004dH
	jne	SHORT $LN3@GetText_Ho
	mov	eax, DWORD PTR ?dwSavedEcx@@3KA		; dwSavedEcx
	movsx	ecx, BYTE PTR [eax+3]
	cmp	ecx, 80					; 00000050H
	jne	SHORT $LN3@GetText_Ho

; 1067 : 	{
; 1068 : 		if (pNetGame->GetMenuPool()) szGotText = pNetGame->GetMenuPool()->GetTextPointer((PCHAR)(dwSavedEcx + 4));

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetMenuPool@CNetGame@@QAEPAVCMenuPool@@XZ ; CNetGame::GetMenuPool
	test	eax, eax
	je	SHORT $LN3@GetText_Ho
	mov	eax, DWORD PTR ?dwSavedEcx@@3KA		; dwSavedEcx
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetMenuPool@CNetGame@@QAEPAVCMenuPool@@XZ ; CNetGame::GetMenuPool
	mov	ecx, eax
	call	?GetTextPointer@CMenuPool@@QAEPADPAD@Z	; CMenuPool::GetTextPointer
	mov	DWORD PTR ?szGotText@@3PADA, eax	; szGotText
$LN3@GetText_Ho:

; 1069 : 	}
; 1070 : 
; 1071 : 	_asm popad

	popad

; 1072 : 	
; 1073 : 	if (szGotText) {

	cmp	DWORD PTR ?szGotText@@3PADA, 0		; szGotText
	je	SHORT $LN1@GetText_Ho

; 1074 : 		_asm mov eax, szGotText

	mov	eax, DWORD PTR ?szGotText@@3PADA	; szGotText

; 1075 : 		_asm pop edi

	pop	edi

; 1076 : 		_asm pop esi

	pop	esi

; 1077 : 		_asm add esp, 0x20

	add	esp, 32					; 00000020H

; 1078 : 		_asm retn 4

	ret	4
$LN1@GetText_Ho:

; 1079 : 	}
; 1080 : 
; 1081 : 	_asm mov eax, 0x6A0059

	mov	eax, 6946905				; 006a0059H

; 1082 : 	_asm jmp eax

	jmp	eax
?GetText_Hook@@YAXXZ ENDP				; GetText_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?CPed_Render_Hook@@YAXXZ
_TEXT	SEGMENT
?CPed_Render_Hook@@YAXXZ PROC				; CPed_Render_Hook, COMDAT

; 1032 : 	_asm pushad

	pushad

; 1033 : 	SetupD3DFog(FALSE);

	push	0
	call	?SetupD3DFog@@YAXH@Z			; SetupD3DFog
	add	esp, 4

; 1034 : 	_asm popad

	popad

; 1035 : 
; 1036 : 	_asm mov edx, 0x5E7680

	mov	edx, 6190720				; 005e7680H

; 1037 : 	_asm call edx

	call	edx

; 1038 : 
; 1039 : 	_asm pushad

	pushad

; 1040 : 
; 1041 : 	if(dwFogEnabled) {

	cmp	DWORD PTR ?dwFogEnabled@@3KA, 0		; dwFogEnabled
	je	SHORT $LN2@CPed_Rende

; 1042 : 		SetupD3DFog(TRUE);

	push	1
	call	?SetupD3DFog@@YAXH@Z			; SetupD3DFog
	add	esp, 4

; 1043 : 	} else {

	jmp	SHORT $LN1@CPed_Rende
$LN2@CPed_Rende:

; 1044 : 		SetupD3DFog(FALSE);

	push	0
	call	?SetupD3DFog@@YAXH@Z			; SetupD3DFog
	add	esp, 4
$LN1@CPed_Rende:

; 1045 : 	}
; 1046 : 
; 1047 : 	_asm popad

	popad

; 1048 : 	_asm ret

	ret	0
?CPed_Render_Hook@@YAXXZ ENDP				; CPed_Render_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?GenTaskAlloc_Hook@@YAXXZ
_TEXT	SEGMENT
?GenTaskAlloc_Hook@@YAXXZ PROC				; GenTaskAlloc_Hook, COMDAT

; 1006 : 	_asm mov edi, [esp+4]

	mov	edi, DWORD PTR [esp+4]

; 1007 : 	_asm mov dwParam1, edi

	mov	DWORD PTR ?dwParam1@@3KA, edi		; dwParam1

; 1008 : 	//_asm mov edx, [esp+8]
; 1009 : 	//_asm mov dwParam2, edx
; 1010 : 	_asm mov dwParamThis, ecx

	mov	DWORD PTR ?dwParamThis@@3KA, ecx	; dwParamThis

; 1011 : 
; 1012 : 	_asm pushad

	pushad

; 1013 : 		_asm mov edx, [edi]

	mov	edx, DWORD PTR [edi]

; 1014 : 		_asm mov ecx, edi

	mov	ecx, edi

; 1015 : 		_asm call dword ptr [edx+4]

	call	DWORD PTR [edx+4]

; 1016 : 		_asm mov dwParam2, eax

	mov	DWORD PTR ?dwParam2@@3KA, eax		; dwParam2

; 1017 : 	
; 1018 : 		pChatWindow->AddDebugMessage("TaskAlloc: 0x%X, 0x%X, 0x%X",dwParamThis,dwParam1,dwParam2);

	mov	eax, DWORD PTR ?dwParam2@@3KA		; dwParam2
	push	eax
	mov	ecx, DWORD PTR ?dwParam1@@3KA		; dwParam1
	push	ecx
	mov	edx, DWORD PTR ?dwParamThis@@3KA	; dwParamThis
	push	edx
	push	OFFSET ??_C@_0BM@HJJCKNE@TaskAlloc?3?50x?$CFX?0?50x?$CFX?0?50x?$CFX?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 20					; 00000014H

; 1019 : 	_asm popad

	popad

; 1020 : 
; 1021 : 	_asm mov eax, fs:0

	mov	eax, DWORD PTR fs:0

; 1022 : 	_asm mov edx, 0x4C3876

	mov	edx, 4995190				; 004c3876H

; 1023 : 	_asm jmp edx

	jmp	edx
?GenTaskAlloc_Hook@@YAXXZ ENDP				; GenTaskAlloc_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?SetCarColorCrashFix@@YAXXZ
_TEXT	SEGMENT
?SetCarColorCrashFix@@YAXXZ PROC			; SetCarColorCrashFix, COMDAT

; 988  : 	__asm
; 989  : 	{
; 990  : 		test eax, eax;

	test	eax, eax

; 991  : 		jz exitFn;						// CPool_CVehicle_GetAt(scmParam1) == NULL

	je	SHORT $exitFn$3

; 992  : 		mov ecx, 0x47eab8;				

	mov	ecx, 4713144				; 0047eab8H

; 993  : 		mov cl,byte ptr ds:[0xA43C7C];	// get color1 (was replaced by jmpcode)

	mov	cl, BYTE PTR ds:10763388

; 994  : 		jmp ecx;						// continue function

	jmp	ecx
$exitFn$3:

; 995  : 
; 996  : exitFn:
; 997  : 		mov esi, 0x47eaca;

	mov	esi, 4713162				; 0047eacaH

; 998  : 		jmp esi;

	jmp	esi
?SetCarColorCrashFix@@YAXXZ ENDP			; SetCarColorCrashFix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?SetForegroundWindowCrashFixHook@@YAXXZ
_TEXT	SEGMENT
?SetForegroundWindowCrashFixHook@@YAXXZ PROC		; SetForegroundWindowCrashFixHook, COMDAT

; 971  : 	__asm
; 972  : 	{
; 973  : 		mov eax, ds:0xC17054;

	mov	eax, DWORD PTR ds:12677204

; 974  : 		test eax, eax;

	test	eax, eax

; 975  : 		jz exitFn;

	je	SHORT $exitFn$3

; 976  : 		push 0x746929;	// return address;

	push	7629097					; 00746929H

; 977  : 		ret;

	ret	0
$exitFn$3:

; 978  : exitFn:
; 979  : 		xor eax, eax;

	xor	eax, eax

; 980  : 		ret;

	ret	0
?SetForegroundWindowCrashFixHook@@YAXXZ ENDP		; SetForegroundWindowCrashFixHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?AnimCrashFixHook@@YAXXZ
_TEXT	SEGMENT
?AnimCrashFixHook@@YAXXZ PROC				; AnimCrashFixHook, COMDAT

; 953  : 	__asm
; 954  : 	{
; 955  : 		push edi;

	push	edi

; 956  : 		mov edi, [esp+8];	// arg0

	mov	edi, DWORD PTR [esp+8]

; 957  : 		test edi, edi;

	test	edi, edi

; 958  : 		jz exitFn

	je	SHORT $exitFn$3

; 959  : 		mov eax, 0x4D41C5;	// continuation for function

	mov	eax, 5063109				; 004d41c5H

; 960  : 		jmp eax;

	jmp	eax
$exitFn$3:

; 961  : exitFn:
; 962  : 		pop edi;

	pop	edi

; 963  : 		ret;

	ret	0
?AnimCrashFixHook@@YAXXZ ENDP				; AnimCrashFixHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?CTrain_ProcessControl_Derailment@@YAXXZ
_TEXT	SEGMENT
?CTrain_ProcessControl_Derailment@@YAXXZ PROC		; CTrain_ProcessControl_Derailment, COMDAT

; 940  : 	_asm {
; 941  : 		mov eax, [esi+1444];	// get the speed

	mov	eax, DWORD PTR [esi+1444]

; 942  : 		and eax, 0x80000000;	// get the upper bit

	and	eax, -2147483648			; 80000000H

; 943  : 		or eax, 0x3F800000;		// or it with 1.0f (it'll be -ve if bit is set)

	or	eax, 1065353216				; 3f800000H

; 944  : 		mov [esi+1444], eax;	// set the new speed

	mov	DWORD PTR [esi+1444], eax

; 945  : 		ret;

	ret	0
?CTrain_ProcessControl_Derailment@@YAXXZ ENDP		; CTrain_ProcessControl_Derailment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?CCameraCamShake_Sniper_Hook@@YAXXZ
_TEXT	SEGMENT
?CCameraCamShake_Sniper_Hook@@YAXXZ PROC		; CCameraCamShake_Sniper_Hook, COMDAT

; 928  : 	//_asm mov dwCurPlayerActor, esi
; 929  : 	//if (dwCurPlayerActor == (DWORD)GamePool_FindPlayerPed()) {
; 930  : 	//	_asm mov eax, 0x50A970
; 931  : 	//	_asm jmp eax
; 932  : 	//}
; 933  : 	_asm ret

	ret	0
?CCameraCamShake_Sniper_Hook@@YAXXZ ENDP		; CCameraCamShake_Sniper_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?IsLocalPlayerFiring@@YGHXZ
_TEXT	SEGMENT
_wKeys$1 = -32						; size = 2
_udAnalog$2 = -20					; size = 2
_lrAnalog$3 = -8					; size = 2
?IsLocalPlayerFiring@@YGHXZ PROC			; IsLocalPlayerFiring, COMDAT

; 915  : BOOL _stdcall IsLocalPlayerFiring() {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 916  : 	if (pNetGame) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN3@IsLocalPla

; 917  : 		WORD lrAnalog,udAnalog;
; 918  : 		WORD wKeys = pNetGame->GetPlayerPool()->GetLocalPlayer()->GetPlayerPed()->GetKeys(&lrAnalog,&udAnalog);

	lea	eax, DWORD PTR _udAnalog$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _lrAnalog$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, eax
	call	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
	mov	ecx, eax
	call	?GetKeys@CPlayerPed@@QAEGPAG0@Z		; CPlayerPed::GetKeys
	mov	WORD PTR _wKeys$1[ebp], ax

; 919  : 		if (wKeys & 4) {

	movzx	eax, WORD PTR _wKeys$1[ebp]
	and	eax, 4
	je	SHORT $LN2@IsLocalPla

; 920  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@IsLocalPla
$LN2@IsLocalPla:

; 921  : 		}

	jmp	SHORT $LN1@IsLocalPla
$LN3@IsLocalPla:

; 922  : 	} else return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@IsLocalPla
$LN1@IsLocalPla:

; 923  : 	return FALSE;

	xor	eax, eax
$LN4@IsLocalPla:

; 924  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@IsLocalPla
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@IsLocalPla:
	DD	2
	DD	$LN8@IsLocalPla
$LN8@IsLocalPla:
	DD	-8					; fffffff8H
	DD	2
	DD	$LN6@IsLocalPla
	DD	-20					; ffffffecH
	DD	2
	DD	$LN7@IsLocalPla
$LN7@IsLocalPla:
	DB	117					; 00000075H
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN6@IsLocalPla:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
?IsLocalPlayerFiring@@YGHXZ ENDP			; IsLocalPlayerFiring
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?PedDamage_Hook@@YAXXZ
_TEXT	SEGMENT
?PedDamage_Hook@@YAXXZ PROC				; PedDamage_Hook, COMDAT

; 873  : 	_asm mov eax, fs:0

	mov	eax, DWORD PTR fs:0

; 874  : 	_asm test ecx, ecx

	test	ecx, ecx

; 875  : 	_asm jz borked

	je	SHORT $borked$4

; 876  : 	_asm mov dwPedDamagePed, ecx

	mov	DWORD PTR ?dwPedDamagePed@@3KA, ecx	; dwPedDamagePed

; 877  : 	_asm test esp, esp

	test	esp, esp

; 878  : 	_asm jz borked

	je	SHORT $borked$4

; 879  : 	_asm mov ebx, [esp+4]

	mov	ebx, DWORD PTR [esp+4]

; 880  : 	_asm test ebx, ebx

	test	ebx, ebx

; 881  : 	_asm jz borked

	je	SHORT $borked$4

; 882  : 	_asm mov dwPedDamage1, ebx

	mov	DWORD PTR ?dwPedDamage1@@3KA, ebx	; dwPedDamage1

; 883  : 	//_asm mov dwStackFrame, esp
; 884  : 	_asm pushad

	pushad

; 885  : 	
; 886  : 	if(IsFriendlyFire((PED_TYPE *)*(DWORD*)dwPedDamagePed,(PED_TYPE *)dwPedDamage1)) {

	mov	eax, DWORD PTR ?dwPedDamage1@@3KA	; dwPedDamage1
	push	eax
	mov	ecx, DWORD PTR ?dwPedDamagePed@@3KA	; dwPedDamagePed
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?IsFriendlyFire@@YGHPAU_PED_TYPE@@0@Z	; IsFriendlyFire
	test	eax, eax
	je	SHORT $LN1@PedDamage_

; 887  : 		_asm popad

	popad

; 888  : 		_asm retn 12

	ret	12					; 0000000cH
$LN1@PedDamage_:

; 889  : 	}
; 890  : 	ProcessInstagib((PED_TYPE *)*(DWORD*)dwPedDamagePed,(PED_TYPE *)dwPedDamage1);

	mov	eax, DWORD PTR ?dwPedDamage1@@3KA	; dwPedDamage1
	push	eax
	mov	ecx, DWORD PTR ?dwPedDamagePed@@3KA	; dwPedDamagePed
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?ProcessInstagib@@YGXPAU_PED_TYPE@@0@Z	; ProcessInstagib

; 891  : 	
; 892  : 	_asm  popad

	popad
$borked$4:

; 893  : borked:
; 894  : 	_asm  mov edx, 0x4B5AC6

	mov	edx, 4938438				; 004b5ac6H

; 895  : 	_asm  jmp edx

	jmp	edx
?PedDamage_Hook@@YAXXZ ENDP				; PedDamage_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?ProcessInstagib@@YGXPAU_PED_TYPE@@0@Z
_TEXT	SEGMENT
_pPedPlayer$ = -8					; size = 4
_pIssuer$ = 8						; size = 4
_pPlayer$ = 12						; size = 4
?ProcessInstagib@@YGXPAU_PED_TYPE@@0@Z PROC		; ProcessInstagib, COMDAT

; 856  : void _stdcall ProcessInstagib(PED_TYPE *pIssuer,PED_TYPE *pPlayer) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 857  : 	PED_TYPE * pPedPlayer = GamePool_FindPlayerPed();

	call	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ; GamePool_FindPlayerPed
	mov	DWORD PTR _pPedPlayer$[ebp], eax

; 858  : 	if (pNetGame) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN1@ProcessIns

; 859  : 		if (pNetGame->m_bInstagib) {

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	movzx	ecx, BYTE PTR [eax+41]
	test	ecx, ecx
	je	SHORT $LN1@ProcessIns

; 860  : 			if (pIssuer && (pPedPlayer == pPlayer)) {

	cmp	DWORD PTR _pIssuer$[ebp], 0
	je	SHORT $LN1@ProcessIns
	mov	eax, DWORD PTR _pPedPlayer$[ebp]
	cmp	eax, DWORD PTR _pPlayer$[ebp]
	jne	SHORT $LN1@ProcessIns

; 861  : 				if (pNetGame->GetPlayerPool()->FindRemotePlayerIDFromGtaPtr((PED_TYPE *)pIssuer) != INVALID_PLAYER_ID) {

	mov	eax, DWORD PTR _pIssuer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
	movzx	ecx, al
	cmp	ecx, 255				; 000000ffH
	je	SHORT $LN1@ProcessIns

; 862  : 					pPedPlayer->fHealth = 0.1f;

	mov	eax, DWORD PTR _pPedPlayer$[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [eax+1344], xmm0
$LN1@ProcessIns:

; 863  : 				}
; 864  : 			}
; 865  : 		}
; 866  : 	}
; 867  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ProcessInstagib@@YGXPAU_PED_TYPE@@0@Z ENDP		; ProcessInstagib
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?IsFriendlyFire@@YGHPAU_PED_TYPE@@0@Z
_TEXT	SEGMENT
_i$1 = -80						; size = 4
_pPlayerPool$2 = -68					; size = 4
_byteRemotePlayerID$ = -53				; size = 1
_pPedPlayer$ = -44					; size = 4
_RemoteVehicleID$ = -32					; size = 2
_byteRemoteTeam$ = -17					; size = 1
_byteLocalTeam$ = -5					; size = 1
_pIssuer$ = 8						; size = 4
_pPlayer$ = 12						; size = 4
?IsFriendlyFire@@YGHPAU_PED_TYPE@@0@Z PROC		; IsFriendlyFire, COMDAT

; 810  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 811  : 	BYTE byteLocalTeam=0, byteRemoteTeam=0;

	mov	BYTE PTR _byteLocalTeam$[ebp], 0
	mov	BYTE PTR _byteRemoteTeam$[ebp], 0

; 812  : 	VEHICLEID RemoteVehicleID=-1;

	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _RemoteVehicleID$[ebp], ax

; 813  : 	PED_TYPE * pPedPlayer = GamePool_FindPlayerPed();

	call	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ; GamePool_FindPlayerPed
	mov	DWORD PTR _pPedPlayer$[ebp], eax

; 814  : 	BYTE byteRemotePlayerID=0;

	mov	BYTE PTR _byteRemotePlayerID$[ebp], 0

; 815  : #ifdef DEBUG
; 816  : 	sprintf(s,"IsFriendlyFire(0x%X,0x%X)\n",pIssuer,pPlayer);
; 817  : 	OutputDebugString(s);
; 818  : #endif
; 819  : 
; 820  : 	if(pIssuer && (pPlayer == pPedPlayer)) {

	cmp	DWORD PTR _pIssuer$[ebp], 0
	je	$LN13@IsFriendly
	mov	eax, DWORD PTR _pPlayer$[ebp]
	cmp	eax, DWORD PTR _pPedPlayer$[ebp]
	jne	$LN13@IsFriendly

; 821  : 		if(pNetGame && pNetGame->m_byteFriendlyFire) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	$LN13@IsFriendly
	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	movzx	ecx, BYTE PTR [eax+80]
	test	ecx, ecx
	je	$LN13@IsFriendly

; 822  : 			CPlayerPool *pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$2[ebp], eax

; 823  : 			byteLocalTeam = pPlayerPool->GetLocalPlayer()->GetTeam();

	mov	ecx, DWORD PTR _pPlayerPool$2[ebp]
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, eax
	call	?GetTeam@CLocalPlayer@@QAEEXZ		; CLocalPlayer::GetTeam
	mov	BYTE PTR _byteLocalTeam$[ebp], al

; 824  : 
; 825  : 			if((byteLocalTeam == NO_TEAM)) return FALSE;

	movzx	eax, BYTE PTR _byteLocalTeam$[ebp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN11@IsFriendly
	xor	eax, eax
	jmp	$LN14@IsFriendly
$LN11@IsFriendly:

; 826  : 
; 827  : 			byteRemotePlayerID = pPlayerPool->FindRemotePlayerIDFromGtaPtr((PED_TYPE *)pIssuer);

	mov	eax, DWORD PTR _pIssuer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$2[ebp]
	call	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
	mov	BYTE PTR _byteRemotePlayerID$[ebp], al

; 828  : 			if (byteRemotePlayerID == INVALID_PLAYER_ID) {

	movzx	eax, BYTE PTR _byteRemotePlayerID$[ebp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN10@IsFriendly

; 829  : 				RemoteVehicleID = pNetGame->GetVehiclePool()->FindIDFromGtaPtr((VEHICLE_TYPE *)pIssuer);

	mov	eax, DWORD PTR _pIssuer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	ecx, eax
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _RemoteVehicleID$[ebp], ax

; 830  : 				if (RemoteVehicleID != INVALID_VEHICLE_ID) {

	movzx	eax, WORD PTR _RemoteVehicleID$[ebp]
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN10@IsFriendly

; 831  : 					for (int i=0; i<MAX_PLAYERS; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN8@IsFriendly
$LN7@IsFriendly:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN8@IsFriendly:
	cmp	DWORD PTR _i$1[ebp], 204		; 000000ccH
	jge	SHORT $LN10@IsFriendly

; 832  : 						if (pPlayerPool->GetSlotState(i)) {

	movzx	eax, BYTE PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$2[ebp]
	call	?GetSlotState@CPlayerPool@@QAEHE@Z	; CPlayerPool::GetSlotState
	test	eax, eax
	je	SHORT $LN5@IsFriendly

; 833  : 							if (pPlayerPool->GetAt(i)->m_VehicleID == RemoteVehicleID) {

	movzx	eax, BYTE PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerPool$2[ebp]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	movzx	ecx, WORD PTR [eax+316]
	movzx	edx, WORD PTR _RemoteVehicleID$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN5@IsFriendly

; 834  : 								byteRemotePlayerID = i;

	mov	al, BYTE PTR _i$1[ebp]
	mov	BYTE PTR _byteRemotePlayerID$[ebp], al

; 835  : 								break;

	jmp	SHORT $LN10@IsFriendly
$LN5@IsFriendly:

; 836  : 							}
; 837  : 						}
; 838  : 					}

	jmp	SHORT $LN7@IsFriendly
$LN10@IsFriendly:

; 839  : 				}
; 840  : 			}
; 841  : 			if(byteRemotePlayerID != INVALID_PLAYER_ID) {

	movzx	eax, BYTE PTR _byteRemotePlayerID$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN13@IsFriendly

; 842  : 				byteRemoteTeam = pNetGame->GetPlayerPool()->GetAt(byteRemotePlayerID)->GetTeam();

	movzx	eax, BYTE PTR _byteRemotePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	ecx, eax
	call	?GetTeam@CRemotePlayer@@QAEEXZ		; CRemotePlayer::GetTeam
	mov	BYTE PTR _byteRemoteTeam$[ebp], al

; 843  : 				//pChatWindow->AddDebugMessage("Teams: me%d you%d", byteLocalTeam, byteRemoteTeam);
; 844  : 				if(byteRemoteTeam == byteLocalTeam) {

	movzx	eax, BYTE PTR _byteRemoteTeam$[ebp]
	movzx	ecx, BYTE PTR _byteLocalTeam$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@IsFriendly

; 845  : 					return TRUE;

	mov	eax, 1
	jmp	SHORT $LN14@IsFriendly

; 846  : 				} else {

	jmp	SHORT $LN13@IsFriendly
$LN2@IsFriendly:

; 847  : 					return FALSE;

	xor	eax, eax
	jmp	SHORT $LN14@IsFriendly
$LN13@IsFriendly:

; 848  : 				}
; 849  : 			}
; 850  : 		}
; 851  : 	}
; 852  : 
; 853  : 	return FALSE;

	xor	eax, eax
$LN14@IsFriendly:

; 854  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?IsFriendlyFire@@YGHPAU_PED_TYPE@@0@Z ENDP		; IsFriendlyFire
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?CGameShutdownHook@@YAXXZ
_TEXT	SEGMENT
?CGameShutdownHook@@YAXXZ PROC				; CGameShutdownHook, COMDAT

; 796  : 	dwShutDownTick = GetTickCount() + 2000;

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 2000				; 000007d0H
	mov	DWORD PTR ?dwShutDownTick@@3KA, eax	; dwShutDownTick

; 797  : 	QuitGame();

	call	?QuitGame@@YAXXZ			; QuitGame
$LN2@CGameShutd:

; 798  : 
; 799  : 	while(GetTickCount() < dwShutDownTick) {

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, DWORD PTR ?dwShutDownTick@@3KA	; dwShutDownTick
	jae	SHORT $LN1@CGameShutd

; 800  : 		Sleep(100);

	mov	esi, esp
	push	100					; 00000064H
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 801  : 	}

	jmp	SHORT $LN2@CGameShutd
$LN1@CGameShutd:

; 802  : 
; 803  : 	ExitProcess(0);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__ExitProcess@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CGameShutd:
	int	3
?CGameShutdownHook@@YAXXZ ENDP				; CGameShutdownHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?SetFarClipHook@@YAXXZ
_TEXT	SEGMENT
?SetFarClipHook@@YAXXZ PROC				; SetFarClipHook, COMDAT

; 781  : 	_asm fld fFarClip

	fld	DWORD PTR ?fFarClip@@3MA		; fFarClip

; 782  : 	_asm push esi

	push	esi

; 783  : 	_asm mov esi, [esp+8]

	mov	esi, DWORD PTR [esp+8]

; 784  : 	_asm mov edx, dwFarClipReturnAddr

	mov	edx, DWORD PTR ?dwFarClipReturnAddr@@3KA ; dwFarClipReturnAddr

; 785  : 	_asm jmp edx	

	jmp	edx
?SetFarClipHook@@YAXXZ ENDP				; SetFarClipHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?CheatProcessorHook@@YAXXZ
_TEXT	SEGMENT
?CheatProcessorHook@@YAXXZ PROC				; CheatProcessorHook, COMDAT

; 762  : 	_asm mov dwSavedCheatFn, eax

	mov	DWORD PTR ?dwSavedCheatFn@@3KA, eax	; dwSavedCheatFn

; 763  : 	_asm pushad

	pushad

; 764  : 
; 765  : 	//sprintf(s,"CheatFn: 0x%X\n",dwSavedCheatFn);
; 766  : 	//OutputDebugString(s);
; 767  : 
; 768  : 	_asm mov edx, 0x96918C

	mov	edx, 9867660				; 0096918cH

; 769  : 	_asm mov byte ptr [edx], 1

	mov	BYTE PTR [edx], 1

; 770  : 	_asm popad

	popad

; 771  : 	//_asm mov edx, 0x43857D ;(process cheat)
; 772  : 	_asm mov edx, 0x438581 ;(don't process cheat)

	mov	edx, 4425089				; 00438581H

; 773  : 	_asm cmp eax, 0

	cmp	eax, 0

; 774  : 	_asm jmp edx

	jmp	edx
?CheatProcessorHook@@YAXXZ ENDP				; CheatProcessorHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?RadarTranslateColor@@YAXXZ
_TEXT	SEGMENT
?RadarTranslateColor@@YAXXZ PROC			; RadarTranslateColor, COMDAT

; 752  : 	_asm mov eax, [esp+4]

	mov	eax, DWORD PTR [esp+4]

; 753  : 	_asm mov iRadarColor1, eax

	mov	DWORD PTR ?iRadarColor1@@3HA, eax	; iRadarColor1

; 754  : 	TranslateColorCodeToRGBA(iRadarColor1); // return will still be in eax.

	mov	eax, DWORD PTR ?iRadarColor1@@3HA	; iRadarColor1
	push	eax
	call	?TranslateColorCodeToRGBA@@YGKH@Z	; TranslateColorCodeToRGBA

; 755  : 	_asm ret

	ret	0
?RadarTranslateColor@@YAXXZ ENDP			; RadarTranslateColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?AddVehicleHook@@YAXXZ
_TEXT	SEGMENT
?AddVehicleHook@@YAXXZ PROC				; AddVehicleHook, COMDAT

; 735  : 	_asm pushad

	pushad

; 736  : 
; 737  : 	if(!bAllowVehicleCreation) {

	cmp	DWORD PTR ?bAllowVehicleCreation@@3HA, 0 ; bAllowVehicleCreation
	jne	SHORT $LN1@AddVehicle

; 738  : 		_asm popad

	popad

; 739  : 		_asm xor eax, eax

	xor	eax, eax

; 740  : 		_asm ret

	ret	0
$LN1@AddVehicle:

; 741  : 	}
; 742  : 
; 743  : 	_asm popad

	popad

; 744  : 	_asm mov eax, 0x421446

	mov	eax, 4330566				; 00421446H

; 745  : 	_asm jmp eax

	jmp	eax
?AddVehicleHook@@YAXXZ ENDP				; AddVehicleHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?TaskExitVehicle@@YAXXZ
_TEXT	SEGMENT
?TaskExitVehicle@@YAXXZ PROC				; TaskExitVehicle, COMDAT

; 702  : 	_asm mov ebp, esp

	mov	ebp, esp

; 703  : 
; 704  : 	_asm mov TaskPtr, ecx

	mov	DWORD PTR ?TaskPtr@@3KA, ecx		; TaskPtr

; 705  : 	_asm mov eax, [ebp]

	mov	eax, DWORD PTR [ebp]

; 706  : 	_asm mov dwRetAddr, eax

	mov	DWORD PTR ?dwRetAddr@@3KA, eax		; dwRetAddr

; 707  : 	_asm mov eax, [ebp+4]

	mov	eax, DWORD PTR [ebp+4]

; 708  : 	_asm mov _pVehicle, eax

	mov	DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A, eax ; _pVehicle

; 709  : 
; 710  : 	if(!bIgnoreNextExit && (dwRetAddr == 0x5704A1 || dwRetAddr == 0x5703FC)) {

	cmp	DWORD PTR ?bIgnoreNextExit@@3HA, 0	; bIgnoreNextExit
	jne	$LN5@TaskExitVe
	cmp	DWORD PTR ?dwRetAddr@@3KA, 5702817	; dwRetAddr, 005704a1H
	je	SHORT $LN4@TaskExitVe
	cmp	DWORD PTR ?dwRetAddr@@3KA, 5702652	; dwRetAddr, 005703fcH
	jne	SHORT $LN5@TaskExitVe
$LN4@TaskExitVe:

; 711  : 		if(pNetGame) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN3@TaskExitVe

; 712  : 			if(GamePool_FindPlayerPed()->pVehicle == (DWORD)_pVehicle) {

	call	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ; GamePool_FindPlayerPed
	mov	eax, DWORD PTR [eax+1420]
	cmp	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	jne	SHORT $LN3@TaskExitVe

; 713  : 				pVehiclePool=pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR ?pVehiclePool@@3PAVCVehiclePool@@A, eax ; pVehiclePool

; 714  : 				VehicleID=pVehiclePool->FindIDFromGtaPtr((VEHICLE_TYPE *)GamePool_FindPlayerPed()->pVehicle);

	call	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ; GamePool_FindPlayerPed
	mov	eax, DWORD PTR [eax+1420]
	push	eax
	mov	ecx, DWORD PTR ?pVehiclePool@@3PAVCVehiclePool@@A ; pVehiclePool
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR ?VehicleID@@3GA, ax		; VehicleID

; 715  : 				pLocalPlayer = pNetGame->GetPlayerPool()->GetLocalPlayer();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	DWORD PTR ?pLocalPlayer@@3PAVCLocalPlayer@@A, eax ; pLocalPlayer

; 716  : 				pLocalPlayer->SendExitVehicleNotification(VehicleID);

	movzx	eax, WORD PTR ?VehicleID@@3GA		; VehicleID
	push	eax
	mov	ecx, DWORD PTR ?pLocalPlayer@@3PAVCLocalPlayer@@A ; pLocalPlayer
	call	?SendExitVehicleNotification@CLocalPlayer@@QAEXG@Z ; CLocalPlayer::SendExitVehicleNotification
$LN3@TaskExitVe:

; 717  : 			}
; 718  : 		}
; 719  : 	} else {

	jmp	SHORT $LN1@TaskExitVe
$LN5@TaskExitVe:

; 720  : 		bIgnoreNextExit = FALSE;

	mov	DWORD PTR ?bIgnoreNextExit@@3HA, 0	; bIgnoreNextExit
$LN1@TaskExitVe:

; 721  : 	}
; 722  : 
; 723  : 	_asm push 0xFFFFFFFF

	push	-1

; 724  : 	_asm push 0x841618

	push	8656408					; 00841618H

; 725  : 	_asm mov ecx, TaskPtr

	mov	ecx, DWORD PTR ?TaskPtr@@3KA		; TaskPtr

; 726  : 	_asm mov edx, 0x63B8C0

	mov	edx, 6535360				; 0063b8c0H

; 727  : 	_asm add edx, 7

	add	edx, 7

; 728  : 	_asm jmp edx

	jmp	edx
?TaskExitVehicle@@YAXXZ ENDP				; TaskExitVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?TaskEnterVehicleDriver_Hook@@YAXXZ
_TEXT	SEGMENT
?TaskEnterVehicleDriver_Hook@@YAXXZ PROC		; TaskEnterVehicleDriver_Hook, COMDAT

; 665  : 	_asm mov eax, [esp]

	mov	eax, DWORD PTR [esp]

; 666  : 	_asm mov dwRetAddr, eax

	mov	DWORD PTR ?dwRetAddr@@3KA, eax		; dwRetAddr

; 667  : 	_asm mov eax, [esp+4]

	mov	eax, DWORD PTR [esp+4]

; 668  : 	_asm mov _pVehicle, eax

	mov	DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A, eax ; _pVehicle

; 669  : 
; 670  : 	_asm pushad

	pushad

; 671  : 
; 672  : 	if(dwRetAddr == 0x570A20 || dwRetAddr == 0x570A99) {

	cmp	DWORD PTR ?dwRetAddr@@3KA, 5704224	; dwRetAddr, 00570a20H
	je	SHORT $LN2@TaskEnterV
	cmp	DWORD PTR ?dwRetAddr@@3KA, 5704345	; dwRetAddr, 00570a99H
	jne	SHORT $LN3@TaskEnterV
$LN2@TaskEnterV:

; 673  : 		// It's coming from CPlayerInfo::Process, so do some upcalls
; 674  : 		if(!NotifyEnterVehicle()) {

	call	?NotifyEnterVehicle@@YAHXZ		; NotifyEnterVehicle
	test	eax, eax
	jne	SHORT $LN3@TaskEnterV

; 675  : 			_asm popad

	popad

; 676  : 			_asm mov ebx, [ecx]

	mov	ebx, DWORD PTR [ecx]

; 677  : 			_asm test ebx, ebx

	test	ebx, ebx

; 678  : 			_asm jz no_destruct

	je	SHORT $no_destruct$6

; 679  : 			_asm push 1

	push	1

; 680  : 			_asm call [ebx] ; destroy the task

	call	DWORD PTR [ebx]
$no_destruct$6:

; 681  : no_destruct:
; 682  : 			_asm pop eax ; param thiscall

	pop	eax

; 683  : 			_asm pop eax ; param thiscall

	pop	eax

; 684  : 			_asm mov eax, 0x570A9E ; after vehicle entering

	mov	eax, 5704350				; 00570a9eH

; 685  : 			_asm jmp eax ; bye now

	jmp	eax
$LN3@TaskEnterV:

; 686  : 		}
; 687  : 	}
; 688  : 
; 689  : 	_asm popad

	popad

; 690  : 
; 691  : 	_asm mov eax, [esp+4]

	mov	eax, DWORD PTR [esp+4]

; 692  : 	_asm push esi

	push	esi

; 693  : 	_asm push 0

	push	0

; 694  : 	_asm mov ebx, 0x6402F7

	mov	ebx, 6554359				; 006402f7H

; 695  : 	_asm jmp ebx

	jmp	ebx
?TaskEnterVehicleDriver_Hook@@YAXXZ ENDP		; TaskEnterVehicleDriver_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?NotifyEnterVehicle@@YAHXZ
_TEXT	SEGMENT
?NotifyEnterVehicle@@YAHXZ PROC				; NotifyEnterVehicle, COMDAT

; 638  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 639  : 	if(pNetGame) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	$LN5@NotifyEnte

; 640  : 		pVehiclePool=pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR ?pVehiclePool@@3PAVCVehiclePool@@A, eax ; pVehiclePool

; 641  : 		VehicleID=pVehiclePool->FindIDFromGtaPtr(_pVehicle);

	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	push	eax
	mov	ecx, DWORD PTR ?pVehiclePool@@3PAVCVehiclePool@@A ; pVehiclePool
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR ?VehicleID@@3GA, ax		; VehicleID

; 642  : 
; 643  : 		if(VehicleID == INVALID_VEHICLE_ID) return FALSE;

	movzx	eax, WORD PTR ?VehicleID@@3GA		; VehicleID
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN4@NotifyEnte
	xor	eax, eax
	jmp	$LN6@NotifyEnte
$LN4@NotifyEnte:

; 644  : 		if(!pVehiclePool->GetSlotState(VehicleID)) return FALSE;

	movzx	eax, WORD PTR ?VehicleID@@3GA		; VehicleID
	push	eax
	mov	ecx, DWORD PTR ?pVehiclePool@@3PAVCVehiclePool@@A ; pVehiclePool
	call	?GetSlotState@CVehiclePool@@QAEHG@Z	; CVehiclePool::GetSlotState
	test	eax, eax
	jne	SHORT $LN3@NotifyEnte
	xor	eax, eax
	jmp	$LN6@NotifyEnte
$LN3@NotifyEnte:

; 645  : 		if(pVehiclePool->GetAt(VehicleID)->m_bDoorsLocked) return FALSE;

	movzx	eax, WORD PTR ?VehicleID@@3GA		; VehicleID
	push	eax
	mov	ecx, DWORD PTR ?pVehiclePool@@3PAVCVehiclePool@@A ; pVehiclePool
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@NotifyEnte
	xor	eax, eax
	jmp	SHORT $LN6@NotifyEnte
$LN2@NotifyEnte:

; 646  : 
; 647  : 		pLocalPlayer = pNetGame->GetPlayerPool()->GetLocalPlayer();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	DWORD PTR ?pLocalPlayer@@3PAVCLocalPlayer@@A, eax ; pLocalPlayer

; 648  : 
; 649  : 		if(pLocalPlayer->GetPlayerPed() && pLocalPlayer->GetPlayerPed()->GetCurrentWeapon() == WEAPON_PARACHUTE) {

	mov	ecx, DWORD PTR ?pLocalPlayer@@3PAVCLocalPlayer@@A ; pLocalPlayer
	call	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
	test	eax, eax
	je	SHORT $LN1@NotifyEnte
	mov	ecx, DWORD PTR ?pLocalPlayer@@3PAVCLocalPlayer@@A ; pLocalPlayer
	call	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
	mov	ecx, eax
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	movzx	eax, al
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN1@NotifyEnte

; 650  : 			pLocalPlayer->GetPlayerPed()->SetArmedWeapon(0);

	push	0
	mov	ecx, DWORD PTR ?pLocalPlayer@@3PAVCLocalPlayer@@A ; pLocalPlayer
	call	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
	mov	ecx, eax
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon
$LN1@NotifyEnte:

; 651  : 		}
; 652  : 
; 653  : 		pLocalPlayer->SendEnterVehicleNotification(VehicleID,FALSE);

	push	0
	movzx	eax, WORD PTR ?VehicleID@@3GA		; VehicleID
	push	eax
	mov	ecx, DWORD PTR ?pLocalPlayer@@3PAVCLocalPlayer@@A ; pLocalPlayer
	call	?SendEnterVehicleNotification@CLocalPlayer@@QAEXGH@Z ; CLocalPlayer::SendEnterVehicleNotification
$LN5@NotifyEnte:

; 654  : 	}
; 655  : 
; 656  : 	return TRUE;

	mov	eax, 1
$LN6@NotifyEnte:

; 657  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?NotifyEnterVehicle@@YAHXZ ENDP				; NotifyEnterVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?VehicleHorn_Hook@@YAXXZ
_TEXT	SEGMENT
?VehicleHorn_Hook@@YAXXZ PROC				; VehicleHorn_Hook, COMDAT

; 603  : 	_asm mov _dwAudioClass, ecx

	mov	DWORD PTR ?_dwAudioClass@@3KA, ecx	; _dwAudioClass

; 604  : 
; 605  : 	_asm mov edx, [esp+4]

	mov	edx, DWORD PTR [esp+4]

; 606  : 	_asm mov _dwVehicleParams, edx

	mov	DWORD PTR ?_dwVehicleParams@@3KA, edx	; _dwVehicleParams

; 607  : 
; 608  : 	_asm mov eax, [edx+16]	

	mov	eax, DWORD PTR [edx+16]

; 609  : 	_asm mov _pHornVehicle, eax

	mov	DWORD PTR ?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A, eax ; _pHornVehicle

; 610  : 
; 611  : 	if( _pHornVehicle && _pHornVehicle->pDriver && 
; 612  : 		IN_VEHICLE(_pHornVehicle->pDriver) &&
; 613  : 		_pHornVehicle->pDriver->dwPedType == 4 ) 

	cmp	DWORD PTR ?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A, 0 ; _pHornVehicle
	je	SHORT $LN3@VehicleHor
	mov	eax, DWORD PTR ?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A ; _pHornVehicle
	cmp	DWORD PTR [eax+1120], 0
	je	SHORT $LN3@VehicleHor
	mov	eax, DWORD PTR ?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A ; _pHornVehicle
	mov	ecx, DWORD PTR [eax+1120]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN3@VehicleHor
	mov	eax, DWORD PTR ?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A ; _pHornVehicle
	mov	ecx, DWORD PTR [eax+1120]
	cmp	DWORD PTR [ecx+1432], 4
	jne	SHORT $LN3@VehicleHor

; 614  : 	{
; 615  : 		_byteSavedControlFlags = _pHornVehicle->entity.nControlFlags;

	mov	eax, DWORD PTR ?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A ; _pHornVehicle
	mov	cl, BYTE PTR [eax+54]
	mov	BYTE PTR ?_byteSavedControlFlags@@3EA, cl ; _byteSavedControlFlags

; 616  : 		_pHornVehicle->entity.nControlFlags = 0x02;

	mov	eax, DWORD PTR ?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A ; _pHornVehicle
	mov	BYTE PTR [eax+54], 2

; 617  : 		_iHasSetHornHookFix = 1;

	mov	DWORD PTR ?_iHasSetHornHookFix@@3HA, 1	; _iHasSetHornHookFix

; 618  : 	} else {

	jmp	SHORT $LN2@VehicleHor
$LN3@VehicleHor:

; 619  : 		_iHasSetHornHookFix = 0;

	mov	DWORD PTR ?_iHasSetHornHookFix@@3HA, 0	; _iHasSetHornHookFix
$LN2@VehicleHor:

; 620  : 	}
; 621  : 
; 622  : 	_asm push _dwVehicleParams

	push	DWORD PTR ?_dwVehicleParams@@3KA	; _dwVehicleParams

; 623  : 	_asm mov ecx, _dwAudioClass

	mov	ecx, DWORD PTR ?_dwAudioClass@@3KA	; _dwAudioClass

; 624  : 	_asm mov edx, 0x5002C0

	mov	edx, 5243584				; 005002c0H

; 625  : 	_asm call edx

	call	edx

; 626  : 	
; 627  : 	if(_iHasSetHornHookFix) {

	cmp	DWORD PTR ?_iHasSetHornHookFix@@3HA, 0	; _iHasSetHornHookFix
	je	SHORT $LN1@VehicleHor

; 628  : 		_pHornVehicle->entity.nControlFlags = _byteSavedControlFlags;

	mov	eax, DWORD PTR ?_pHornVehicle@@3PAU_VEHICLE_TYPE@@A ; _pHornVehicle
	mov	cl, BYTE PTR ?_byteSavedControlFlags@@3EA ; _byteSavedControlFlags
	mov	BYTE PTR [eax+54], cl
$LN1@VehicleHor:

; 629  : 	}
; 630  :     
; 631  : 	_asm retn 4

	ret	4
?VehicleHorn_Hook@@YAXXZ ENDP				; VehicleHorn_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?AllVehicles_ProcessControl_Hook@@YAXXZ
_TEXT	SEGMENT
?AllVehicles_ProcessControl_Hook@@YAXXZ PROC		; AllVehicles_ProcessControl_Hook, COMDAT

; 476  : 	_asm mov _pVehicle, ecx

	mov	DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A, ecx ; _pVehicle

; 477  : 	_asm mov eax, [ecx]

	mov	eax, DWORD PTR [ecx]

; 478  : 	_asm mov vtbl, eax

	mov	DWORD PTR ?vtbl@@3KA, eax		; vtbl

; 479  : 
; 480  : 	if(vtbl == 0x871120) { // AUTOMOBILE

	cmp	DWORD PTR ?vtbl@@3KA, 8851744		; vtbl, 00871120H
	jne	SHORT $LN20@AllVehicle

; 481  : 		call_addr = 0x6B1880;

	mov	DWORD PTR ?call_addr@@3KA, 7018624	; call_addr, 006b1880H
	jmp	$LN19@AllVehicle
$LN20@AllVehicle:

; 482  : 	}
; 483  : 	else if(vtbl == 0x8721A0) { // BOAT

	cmp	DWORD PTR ?vtbl@@3KA, 8855968		; vtbl, 008721a0H
	jne	SHORT $LN18@AllVehicle

; 484  : 		call_addr = 0x6F1770;

	mov	DWORD PTR ?call_addr@@3KA, 7280496	; call_addr, 006f1770H
	jmp	$LN19@AllVehicle
$LN18@AllVehicle:

; 485  : 	}
; 486  : 	else if(vtbl == 0x871360) {	// MOTORBIKE

	cmp	DWORD PTR ?vtbl@@3KA, 8852320		; vtbl, 00871360H
	jne	SHORT $LN16@AllVehicle

; 487  : 		call_addr = 0x6B9250;

	mov	DWORD PTR ?call_addr@@3KA, 7049808	; call_addr, 006b9250H
	jmp	$LN19@AllVehicle
$LN16@AllVehicle:

; 488  : 	}
; 489  : 	else if(vtbl == 0x871948) { // PLANE

	cmp	DWORD PTR ?vtbl@@3KA, 8853832		; vtbl, 00871948H
	jne	SHORT $LN14@AllVehicle

; 490  : 		call_addr = 0x6C9260;

	mov	DWORD PTR ?call_addr@@3KA, 7115360	; call_addr, 006c9260H
	jmp	SHORT $LN19@AllVehicle
$LN14@AllVehicle:

; 491  : 	}
; 492  : 	else if(vtbl == 0x871680) { // HELI

	cmp	DWORD PTR ?vtbl@@3KA, 8853120		; vtbl, 00871680H
	jne	SHORT $LN12@AllVehicle

; 493  : 		call_addr = 0x6C7050;

	mov	DWORD PTR ?call_addr@@3KA, 7106640	; call_addr, 006c7050H
	jmp	SHORT $LN19@AllVehicle
$LN12@AllVehicle:

; 494  : 	}
; 495  : 	else if(vtbl == 0x871528) { // PUSHBIKE (BMX?)

	cmp	DWORD PTR ?vtbl@@3KA, 8852776		; vtbl, 00871528H
	jne	SHORT $LN10@AllVehicle

; 496  : 		call_addr = 0x6BFA30;

	mov	DWORD PTR ?call_addr@@3KA, 7076400	; call_addr, 006bfa30H
	jmp	SHORT $LN19@AllVehicle
$LN10@AllVehicle:

; 497  : 	}
; 498  : 	else if(vtbl == 0x8717d8) { // UNKNOWN2

	cmp	DWORD PTR ?vtbl@@3KA, 8853464		; vtbl, 008717d8H
	jne	SHORT $LN8@AllVehicle

; 499  : 		call_addr = 0x6C8250;

	mov	DWORD PTR ?call_addr@@3KA, 7111248	; call_addr, 006c8250H
	jmp	SHORT $LN19@AllVehicle
$LN8@AllVehicle:

; 500  : 	}
; 501  : 	else if(vtbl == 0x871AE8) { // UNKNOWN1

	cmp	DWORD PTR ?vtbl@@3KA, 8854248		; vtbl, 00871ae8H
	jne	SHORT $LN6@AllVehicle

; 502  : 		call_addr = 0x6CDCC0;

	mov	DWORD PTR ?call_addr@@3KA, 7134400	; call_addr, 006cdcc0H
	jmp	SHORT $LN19@AllVehicle
$LN6@AllVehicle:

; 503  : 	}
; 504  : 	else if(vtbl == 0x872370) { // TRAIN

	cmp	DWORD PTR ?vtbl@@3KA, 8856432		; vtbl, 00872370H
	jne	SHORT $LN19@AllVehicle

; 505  : 		call_addr = 0x6F86A0;

	mov	DWORD PTR ?call_addr@@3KA, 7308960	; call_addr, 006f86a0H
$LN19@AllVehicle:

; 506  : 	}
; 507  : 
; 508  : 	byteInternalPlayer = *(BYTE *)0xB7CD74;

	mov	al, BYTE PTR ds:12045684
	mov	BYTE PTR ?byteInternalPlayer@@3EA, al	; byteInternalPlayer

; 509  : 	
; 510  : 	if( (_pVehicle->pDriver) && (_pVehicle->pDriver->dwPedType == 0) &&
; 511  : 		(_pVehicle->pDriver != GamePool_FindPlayerPed()) &&
; 512  : 		(byteInternalPlayer==0) ) // not player's car

	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	cmp	DWORD PTR [eax+1120], 0
	je	$LN3@AllVehicle
	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	mov	ecx, DWORD PTR [eax+1120]
	cmp	DWORD PTR [ecx+1432], 0
	jne	$LN3@AllVehicle
	call	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ; GamePool_FindPlayerPed
	mov	ecx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	cmp	DWORD PTR [ecx+1120], eax
	je	$LN3@AllVehicle
	movzx	eax, BYTE PTR ?byteInternalPlayer@@3EA	; byteInternalPlayer
	test	eax, eax
	jne	$LN3@AllVehicle

; 513  : 	{	
; 514  : 		byteCurPlayer = FindPlayerNumFromPedPtr((DWORD)_pVehicle->pDriver);

	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	mov	ecx, DWORD PTR [eax+1120]
	push	ecx
	call	?FindPlayerNumFromPedPtr@@YGEK@Z	; FindPlayerNumFromPedPtr
	mov	BYTE PTR ?byteCurPlayer@@3EA, al	; byteCurPlayer

; 515  : 
; 516  : 		GameStoreLocalPlayerKeys(); // save local player keys

	call	?GameStoreLocalPlayerKeys@@YAXXZ	; GameStoreLocalPlayerKeys

; 517  : 		GameSetRemotePlayerKeys(byteCurPlayer); // set remote player keys.

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerKeys@@YAXH@Z	; GameSetRemotePlayerKeys
	add	esp, 4

; 518  : 	
; 519  : 		// save the internal cammode, apply the context.
; 520  : 		byteSavedCameraMode = *pbyteCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteSavedCameraMode@@3EA, cl	; byteSavedCameraMode

; 521  : 		*pbyteCameraMode = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	mov	ecx, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	BYTE PTR [ecx], al

; 522  : 
; 523  : 		// save the second internal cammode, apply the context
; 524  : 		wSavedCameraMode2 = *wCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR [eax]
	mov	WORD PTR ?wSavedCameraMode2@@3GA, cx	; wSavedCameraMode2

; 525  : 		*wCameraMode2 = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	movzx	cx, al
	mov	edx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [edx], cx

; 526  : 		if(*wCameraMode2 == 4) *wCameraMode2 = 0;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 4
	jne	SHORT $LN2@AllVehicle
	xor	eax, eax
	mov	ecx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [ecx], ax
$LN2@AllVehicle:

; 527  : 		
; 528  : 		// aim switching
; 529  : 		GameStoreLocalPlayerAim();

	call	?GameStoreLocalPlayerAim@@YGXXZ		; GameStoreLocalPlayerAim

; 530  : 		GameSetRemotePlayerAim(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerAim@@YGXH@Z		; GameSetRemotePlayerAim

; 531  : 
; 532  : 		// VEHICLE ENGINE AUDIO/RADIO
; 533  : 		*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0

; 534  : 		_pVehicle->pDriver->dwPedType = 4; // So CPed::IsPlayer returns FALSE

	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	mov	ecx, DWORD PTR [eax+1120]
	mov	DWORD PTR [ecx+1432], 4

; 535  : 		byteSaveControlFlags = _pVehicle->entity.nControlFlags;

	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	mov	cl, BYTE PTR [eax+54]
	mov	BYTE PTR ?byteSaveControlFlags@@3EA, cl	; byteSaveControlFlags

; 536  : 		_pVehicle->entity.nControlFlags = 0x1A;

	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	mov	BYTE PTR [eax+54], 26			; 0000001aH

; 537  : 		
; 538  : 		_asm mov edx, _pVehicle

	mov	edx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle

; 539  : 		_asm lea ecx, [edx+312]

	lea	ecx, DWORD PTR [edx+312]

; 540  : 		_asm mov edx, 0x502280 // ProcessVehicleAudio

	mov	edx, 5251712				; 00502280H

; 541  : 		_asm call edx

	call	edx

; 542  : 
; 543  : 		_pVehicle->entity.nControlFlags = byteSaveControlFlags;

	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	mov	cl, BYTE PTR ?byteSaveControlFlags@@3EA	; byteSaveControlFlags
	mov	BYTE PTR [eax+54], cl

; 544  : 		_pVehicle->pDriver->dwPedType = 0;

	mov	eax, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle
	mov	ecx, DWORD PTR [eax+1120]
	mov	DWORD PTR [ecx+1432], 0

; 545  : 	
; 546  : 		*pbyteCurrentPlayer = byteCurPlayer;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	cl, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	mov	BYTE PTR [eax], cl

; 547  : 
; 548  : 		// CVehicle*::ProcessControl
; 549  : 		_asm mov ecx, _pVehicle

	mov	ecx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle

; 550  : 		_asm mov eax, call_addr

	mov	eax, DWORD PTR ?call_addr@@3KA		; call_addr

; 551  : 		_asm call eax

	call	eax

; 552  : 
; 553  : 		*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0

; 554  : 		GameSetLocalPlayerKeys();

	call	?GameSetLocalPlayerKeys@@YAXXZ		; GameSetLocalPlayerKeys

; 555  : 
; 556  : 		// restore the camera modes, internal id and local player's aim
; 557  : 		*pbyteCameraMode = byteSavedCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR ?byteSavedCameraMode@@3EA	; byteSavedCameraMode
	mov	BYTE PTR [eax], cl

; 558  : 		*wCameraMode2 = wSavedCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR ?wSavedCameraMode2@@3GA	; wSavedCameraMode2
	mov	WORD PTR [eax], cx

; 559  : 
; 560  : 		GameSetLocalPlayerAim();

	call	?GameSetLocalPlayerAim@@YGXXZ		; GameSetLocalPlayerAim

; 561  : 
; 562  : 		_asm ret

	ret	0

; 563  : 	}
; 564  : 	else

	jmp	SHORT $LN21@AllVehicle
$LN3@AllVehicle:

; 565  : 	{	
; 566  : 		/* Was testing..
; 567  : 		if(_pVehicle->pDriver) {
; 568  : 			byteSaveControlFlags = _pVehicle->entity.nControlFlags;
; 569  : 			_pVehicle->entity.nControlFlags = 0x1A;
; 570  : 			_pVehicle->pDriver->dwPedType = 4; // So CPed::IsPlayer returns FALSE
; 571  : 		}*/
; 572  : 
; 573  : 		// VEHICLE ENGINE AUDIO/RADIO
; 574  : 		_asm mov edx, _pVehicle

	mov	edx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle

; 575  : 		_asm lea ecx, [edx+312]

	lea	ecx, DWORD PTR [edx+312]

; 576  : 		_asm mov edx, 0x502280

	mov	edx, 5251712				; 00502280H

; 577  : 		_asm call edx

	call	edx

; 578  : 
; 579  : 		/* Part of test code.
; 580  : 		if(_pVehicle->pDriver) {
; 581  : 			_pVehicle->entity.nControlFlags = byteSaveControlFlags;
; 582  : 			_pVehicle->pDriver->dwPedType = 0;
; 583  : 		}*/
; 584  :         
; 585  : 		// CVehicle*::ProcessControl
; 586  : 		_asm mov ecx, _pVehicle

	mov	ecx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle

; 587  : 		_asm mov eax, call_addr

	mov	eax, DWORD PTR ?call_addr@@3KA		; call_addr

; 588  : 		_asm call eax

	call	eax

; 589  : 		_asm ret

	ret	0
$LN21@AllVehicle:
?AllVehicles_ProcessControl_Hook@@YAXXZ ENDP		; AllVehicles_ProcessControl_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?AllVehicles_ProcessControl_WaterTurret_Hook@@YAXXZ
_TEXT	SEGMENT
?AllVehicles_ProcessControl_WaterTurret_Hook@@YAXXZ PROC ; AllVehicles_ProcessControl_WaterTurret_Hook, COMDAT

; 418  : 	_asm mov _pVehicle, ecx

	mov	DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A, ecx ; _pVehicle

; 419  : 	_asm mov eax, [ecx]

	mov	eax, DWORD PTR [ecx]

; 420  : 	_asm mov vtbl, eax

	mov	DWORD PTR ?vtbl@@3KA, eax		; vtbl

; 421  : 
; 422  : 	if(!bVehicleProcessControlLocal) // not player's car

	cmp	DWORD PTR ?bVehicleProcessControlLocal@@3HA, 0 ; bVehicleProcessControlLocal
	jne	$LN3@AllVehicle

; 423  : 	{
; 424  : 
; 425  : 		// The player keys are already context switched since
; 426  : 		// this function called from CAutomobile_ProcessControl
; 427  : 		// DON'T CONTEXT SWITCH THE KEYS AGAIN BECAUSE THE CURRENT KEYS WOULD
; 428  : 		// BE THE REMOTE PLAYERS KEYS AND NOT THE LOCAL PLAYERS!!
; 429  : 
; 430  : 		// save the internal cammode, apply the context.
; 431  : 		byteSavedCameraMode = *pbyteCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteSavedCameraMode@@3EA, cl	; byteSavedCameraMode

; 432  : 		*pbyteCameraMode = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	mov	ecx, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	BYTE PTR [ecx], al

; 433  : 
; 434  : 		// save the second internal cammode, apply the context
; 435  : 		wSavedCameraMode2 = *wCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR [eax]
	mov	WORD PTR ?wSavedCameraMode2@@3GA, cx	; wSavedCameraMode2

; 436  : 		*wCameraMode2 = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	movzx	cx, al
	mov	edx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [edx], cx

; 437  : 		if(*wCameraMode2 == 4) *wCameraMode2 = 0;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 4
	jne	SHORT $LN2@AllVehicle
	xor	eax, eax
	mov	ecx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [ecx], ax
$LN2@AllVehicle:

; 438  : 		
; 439  : 		// aim switching
; 440  : 		GameStoreLocalPlayerAim();

	call	?GameStoreLocalPlayerAim@@YGXXZ		; GameStoreLocalPlayerAim

; 441  : 		GameSetRemotePlayerAim(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerAim@@YGXH@Z		; GameSetRemotePlayerAim

; 442  : 
; 443  : 		// call internal function
; 444  : 		_asm push 0

	push	0

; 445  : 		_asm mov ecx, _pVehicle

	mov	ecx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle

; 446  : 		_asm mov eax, 0x729B60 // CAutomobile_ProcessControl_WaterTurret

	mov	eax, 7510880				; 00729b60H

; 447  : 		_asm call eax

	call	eax

; 448  : 		
; 449  : 		// restore the camera modes, internal id and local player's aim
; 450  : 		*pbyteCameraMode = byteSavedCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR ?byteSavedCameraMode@@3EA	; byteSavedCameraMode
	mov	BYTE PTR [eax], cl

; 451  : 		*wCameraMode2 = wSavedCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR ?wSavedCameraMode2@@3GA	; wSavedCameraMode2
	mov	WORD PTR [eax], cx

; 452  : 
; 453  : 		GameSetLocalPlayerAim();

	call	?GameSetLocalPlayerAim@@YGXXZ		; GameSetLocalPlayerAim

; 454  : 	}
; 455  : 	else

	jmp	SHORT $LN1@AllVehicle
$LN3@AllVehicle:

; 456  : 	{	
; 457  : 		_asm push 0

	push	0

; 458  : 		_asm mov ecx, _pVehicle

	mov	ecx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle

; 459  : 		_asm mov eax, 0x729B60 // CAutomobile_ProcessControl_WaterTurret

	mov	eax, 7510880				; 00729b60H

; 460  : 		_asm call eax

	call	eax
$LN1@AllVehicle:

; 461  : 	}
; 462  : 
; 463  : 	_asm retn 4

	ret	4
?AllVehicles_ProcessControl_WaterTurret_Hook@@YAXXZ ENDP ; AllVehicles_ProcessControl_WaterTurret_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?AllVehicles_ProcessControl_TankTurret_Hook@@YAXXZ
_TEXT	SEGMENT
?AllVehicles_ProcessControl_TankTurret_Hook@@YAXXZ PROC	; AllVehicles_ProcessControl_TankTurret_Hook, COMDAT

; 366  : 	_asm mov _pVehicle, ecx

	mov	DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A, ecx ; _pVehicle

; 367  : 	_asm mov eax, [ecx]

	mov	eax, DWORD PTR [ecx]

; 368  : 	_asm mov vtbl, eax

	mov	DWORD PTR ?vtbl@@3KA, eax		; vtbl

; 369  : 
; 370  : 	if(!bVehicleProcessControlLocal) // not player's car

	cmp	DWORD PTR ?bVehicleProcessControlLocal@@3HA, 0 ; bVehicleProcessControlLocal
	jne	$LN3@AllVehicle

; 371  : 	{
; 372  : 		// The player keys are already context switched since
; 373  : 		// this function called from CAutomobile_ProcessControl
; 374  : 		// DON'T CONTEXT SWITCH THE KEYS AGAIN BECAUSE THE CURRENT KEYS WOULD
; 375  : 		// BE THE REMOTE PLAYERS KEYS AND NOT THE LOCAL PLAYERS!!
; 376  : 
; 377  : 		// save the internal cammode, apply the context.
; 378  : 		byteSavedCameraMode = *pbyteCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteSavedCameraMode@@3EA, cl	; byteSavedCameraMode

; 379  : 		*pbyteCameraMode = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	mov	ecx, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	BYTE PTR [ecx], al

; 380  : 
; 381  : 		// save the second internal cammode, apply the context
; 382  : 		wSavedCameraMode2 = *wCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR [eax]
	mov	WORD PTR ?wSavedCameraMode2@@3GA, cx	; wSavedCameraMode2

; 383  : 		*wCameraMode2 = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	movzx	cx, al
	mov	edx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [edx], cx

; 384  : 		if(*wCameraMode2 == 4) *wCameraMode2 = 0;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 4
	jne	SHORT $LN2@AllVehicle
	xor	eax, eax
	mov	ecx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [ecx], ax
$LN2@AllVehicle:

; 385  : 		
; 386  : 		// aim switching
; 387  : 		GameStoreLocalPlayerAim();

	call	?GameStoreLocalPlayerAim@@YGXXZ		; GameStoreLocalPlayerAim

; 388  : 		GameSetRemotePlayerAim(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerAim@@YGXH@Z		; GameSetRemotePlayerAim

; 389  : 
; 390  : 		// call internal function
; 391  : 		_asm mov ecx, _pVehicle

	mov	ecx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle

; 392  : 		_asm mov eax, 0x6AE850 // CAutomobile_ProcessControl_Tank

	mov	eax, 7006288				; 006ae850H

; 393  : 		_asm call eax

	call	eax

; 394  : 		
; 395  : 		// restore the camera modes, internal id and local player's aim
; 396  : 		*pbyteCameraMode = byteSavedCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR ?byteSavedCameraMode@@3EA	; byteSavedCameraMode
	mov	BYTE PTR [eax], cl

; 397  : 		*wCameraMode2 = wSavedCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR ?wSavedCameraMode2@@3GA	; wSavedCameraMode2
	mov	WORD PTR [eax], cx

; 398  : 
; 399  : 		GameSetLocalPlayerAim();

	call	?GameSetLocalPlayerAim@@YGXXZ		; GameSetLocalPlayerAim

; 400  : 
; 401  : 	}
; 402  : 	else

	jmp	SHORT $LN1@AllVehicle
$LN3@AllVehicle:

; 403  : 	{	
; 404  : 		_asm mov ecx, _pVehicle

	mov	ecx, DWORD PTR ?_pVehicle@@3PAU_VEHICLE_TYPE@@A ; _pVehicle

; 405  : 		_asm mov eax, 0x6AE850 // CAutomobile_ProcessControl_Tank

	mov	eax, 7006288				; 006ae850H

; 406  : 		_asm call eax

	call	eax
$LN1@AllVehicle:

; 407  : 	}
; 408  : 
; 409  : 	_asm ret

	ret	0
?AllVehicles_ProcessControl_TankTurret_Hook@@YAXXZ ENDP	; AllVehicles_ProcessControl_TankTurret_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?TaskOnFoot2_Hook@@YAXXZ
_TEXT	SEGMENT
?TaskOnFoot2_Hook@@YAXXZ PROC				; TaskOnFoot2_Hook, COMDAT

; 339  :     _asm mov eax, [esp+4]

	mov	eax, DWORD PTR [esp+4]

; 340  : 	_asm pushad

	pushad

; 341  : 	_asm mov dwCurPlayerActor, eax // store the passed actor

	mov	DWORD PTR ?dwCurPlayerActor@@3KA, eax	; dwCurPlayerActor

; 342  : 
; 343  : 	byteInternalPlayer = *pbyteCurrentPlayer; // get the current internal player number

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteInternalPlayer@@3EA, cl	; byteInternalPlayer

; 344  : 	byteCurPlayer = FindPlayerNumFromPedPtr(dwCurPlayerActor); // get the ordinal of the passed actor

	mov	eax, DWORD PTR ?dwCurPlayerActor@@3KA	; dwCurPlayerActor
	push	eax
	call	?FindPlayerNumFromPedPtr@@YGEK@Z	; FindPlayerNumFromPedPtr
	mov	BYTE PTR ?byteCurPlayer@@3EA, al	; byteCurPlayer

; 345  : 
; 346  : 	if( dwCurPlayerActor && 
; 347  : 		(byteCurPlayer != 0) &&
; 348  : 		(byteInternalPlayer == 0) )

	cmp	DWORD PTR ?dwCurPlayerActor@@3KA, 0	; dwCurPlayerActor
	je	SHORT $LN2@TaskOnFoot
	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	test	eax, eax
	je	SHORT $LN2@TaskOnFoot
	movzx	eax, BYTE PTR ?byteInternalPlayer@@3EA	; byteInternalPlayer
	test	eax, eax
	jne	SHORT $LN2@TaskOnFoot

; 349  : 	{
; 350  : 		_asm popad

	popad

; 351  : 		_asm retn 4

	ret	4

; 352  : 	}
; 353  : 	else // it's the local player or keys have already been set.

	jmp	SHORT $LN3@TaskOnFoot
$LN2@TaskOnFoot:

; 354  : 	{
; 355  : 		_asm popad

	popad

; 356  : 		_asm mov edx, 0x688810

	mov	edx, 6850576				; 00688810H

; 357  : 		_asm call edx

	call	edx

; 358  : 		_asm ret

	ret	0
$LN3@TaskOnFoot:
?TaskOnFoot2_Hook@@YAXXZ ENDP				; TaskOnFoot2_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?TaskOnFoot1_Hook@@YAXXZ
_TEXT	SEGMENT
?TaskOnFoot1_Hook@@YAXXZ PROC				; TaskOnFoot1_Hook, COMDAT

; 312  : 	_asm mov eax, [esp+4]

	mov	eax, DWORD PTR [esp+4]

; 313  : 	_asm pushad

	pushad

; 314  : 	_asm mov dwCurPlayerActor, eax // store the passed actor

	mov	DWORD PTR ?dwCurPlayerActor@@3KA, eax	; dwCurPlayerActor

; 315  : 
; 316  : 	byteInternalPlayer = *pbyteCurrentPlayer; // get the current internal player number

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteInternalPlayer@@3EA, cl	; byteInternalPlayer

; 317  : 	byteCurPlayer = FindPlayerNumFromPedPtr(dwCurPlayerActor); // get the ordinal of the passed actor

	mov	eax, DWORD PTR ?dwCurPlayerActor@@3KA	; dwCurPlayerActor
	push	eax
	call	?FindPlayerNumFromPedPtr@@YGEK@Z	; FindPlayerNumFromPedPtr
	mov	BYTE PTR ?byteCurPlayer@@3EA, al	; byteCurPlayer

; 318  : 
; 319  : 	if( dwCurPlayerActor && 
; 320  : 		(byteCurPlayer != 0) &&
; 321  : 		(byteInternalPlayer == 0) )

	cmp	DWORD PTR ?dwCurPlayerActor@@3KA, 0	; dwCurPlayerActor
	je	SHORT $LN2@TaskOnFoot
	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	test	eax, eax
	je	SHORT $LN2@TaskOnFoot
	movzx	eax, BYTE PTR ?byteInternalPlayer@@3EA	; byteInternalPlayer
	test	eax, eax
	jne	SHORT $LN2@TaskOnFoot

; 322  : 	{
; 323  : 		_asm popad

	popad

; 324  : 		_asm retn 12

	ret	12					; 0000000cH

; 325  : 	}
; 326  : 	else // it's the local player or keys have already been set.

	jmp	SHORT $LN3@TaskOnFoot
$LN2@TaskOnFoot:

; 327  : 	{
; 328  : 		_asm popad

	popad

; 329  : 		_asm mov edx, 0x6857E0

	mov	edx, 6838240				; 006857e0H

; 330  : 		_asm call edx

	call	edx

; 331  : 		_asm ret

	ret	0
$LN3@TaskOnFoot:
?TaskOnFoot1_Hook@@YAXXZ ENDP				; TaskOnFoot1_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?TaskUseGun_Hook@@YAXXZ
_TEXT	SEGMENT
?TaskUseGun_Hook@@YAXXZ PROC				; TaskUseGun_Hook, COMDAT

; 244  : 	//_asm mov dwStackFrame, esp
; 245  : 	_asm mov dwSavedEcx, ecx

	mov	DWORD PTR ?dwSavedEcx@@3KA, ecx		; dwSavedEcx

; 246  : 	_asm mov eax, [esp+4]

	mov	eax, DWORD PTR [esp+4]

; 247  : 	_asm mov dwCurPlayerActor, eax // store the passed actor

	mov	DWORD PTR ?dwCurPlayerActor@@3KA, eax	; dwCurPlayerActor

; 248  : 
; 249  : 	byteInternalPlayer = *pbyteCurrentPlayer; // get the current internal player number

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteInternalPlayer@@3EA, cl	; byteInternalPlayer

; 250  : 	byteCurPlayer = FindPlayerNumFromPedPtr(dwCurPlayerActor); // get the ordinal of the passed actor

	mov	eax, DWORD PTR ?dwCurPlayerActor@@3KA	; dwCurPlayerActor
	push	eax
	call	?FindPlayerNumFromPedPtr@@YGEK@Z	; FindPlayerNumFromPedPtr
	mov	BYTE PTR ?byteCurPlayer@@3EA, al	; byteCurPlayer

; 251  : 
; 252  : 	//OutputDebugString("TaskUseGun");
; 253  : 
; 254  : 	if( dwCurPlayerActor && 
; 255  : 		(byteCurPlayer != 0) &&
; 256  : 		(byteInternalPlayer == 0) ) // not local player and local player's keys set.

	cmp	DWORD PTR ?dwCurPlayerActor@@3KA, 0	; dwCurPlayerActor
	je	$LN3@TaskUseGun
	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	test	eax, eax
	je	$LN3@TaskUseGun
	movzx	eax, BYTE PTR ?byteInternalPlayer@@3EA	; byteInternalPlayer
	test	eax, eax
	jne	$LN3@TaskUseGun

; 257  : 	{	
; 258  : 		// key switching
; 259  : 		GameStoreLocalPlayerKeys(); // remember local player's keys

	call	?GameStoreLocalPlayerKeys@@YAXXZ	; GameStoreLocalPlayerKeys

; 260  : 		GameSetRemotePlayerKeys(byteCurPlayer); // set remote player's keys

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerKeys@@YAXH@Z	; GameSetRemotePlayerKeys
	add	esp, 4

; 261  : 
; 262  : 		// save the internal cammode, apply the context.
; 263  : 		byteSavedCameraMode = *pbyteCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteSavedCameraMode@@3EA, cl	; byteSavedCameraMode

; 264  : 		*pbyteCameraMode = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	mov	ecx, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	BYTE PTR [ecx], al

; 265  : 
; 266  : 		// save the second internal cammode, apply the context
; 267  : 		wSavedCameraMode2 = *wCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR [eax]
	mov	WORD PTR ?wSavedCameraMode2@@3GA, cx	; wSavedCameraMode2

; 268  : 		*wCameraMode2 = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	movzx	cx, al
	mov	edx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [edx], cx

; 269  : 		if(*wCameraMode2 == 4) *wCameraMode2 = 0;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 4
	jne	SHORT $LN2@TaskUseGun
	xor	eax, eax
	mov	ecx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [ecx], ax
$LN2@TaskUseGun:

; 270  : 
; 271  : 		// save the camera zoom factor, apply the context
; 272  : 		GameStoreLocalPlayerCameraExtZoom();

	call	?GameStoreLocalPlayerCameraExtZoom@@YGXXZ ; GameStoreLocalPlayerCameraExtZoom

; 273  : 		GameSetRemotePlayerCameraExtZoom(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerCameraExtZoom@@YGXE@Z ; GameSetRemotePlayerCameraExtZoom

; 274  : 
; 275  : 		// aim switching
; 276  : 		GameStoreLocalPlayerAim();

	call	?GameStoreLocalPlayerAim@@YGXXZ		; GameStoreLocalPlayerAim

; 277  : 		GameSetRemotePlayerAim(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerAim@@YGXH@Z		; GameSetRemotePlayerAim

; 278  : 		*pbyteCurrentPlayer = byteCurPlayer; // Set the internal player to the passed actor

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	cl, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	mov	BYTE PTR [eax], cl

; 279  : 
; 280  : 		// call the internal TaskUseGun
; 281  : 		_asm mov ecx, dwSavedEcx

	mov	ecx, DWORD PTR ?dwSavedEcx@@3KA		; dwSavedEcx

; 282  : 		_asm push dwCurPlayerActor

	push	DWORD PTR ?dwCurPlayerActor@@3KA	; dwCurPlayerActor

; 283  : 		_asm mov eax, 0x624ED0

	mov	eax, 6442704				; 00624ed0H

; 284  : 		_asm call eax

	call	eax

; 285  : 
; 286  : 		// restore the camera modes, internal id and local player's aim
; 287  : 		*pbyteCameraMode = byteSavedCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR ?byteSavedCameraMode@@3EA	; byteSavedCameraMode
	mov	BYTE PTR [eax], cl

; 288  : 		*wCameraMode2 = wSavedCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR ?wSavedCameraMode2@@3GA	; wSavedCameraMode2
	mov	WORD PTR [eax], cx

; 289  : 
; 290  : 		// remote the local player's camera zoom factor
; 291  : 		GameSetLocalPlayerCameraExtZoom();

	call	?GameSetLocalPlayerCameraExtZoom@@YGXXZ	; GameSetLocalPlayerCameraExtZoom

; 292  : 
; 293  : 		*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0

; 294  : 		GameSetLocalPlayerAim();

	call	?GameSetLocalPlayerAim@@YGXXZ		; GameSetLocalPlayerAim

; 295  : 		GameSetLocalPlayerKeys();

	call	?GameSetLocalPlayerKeys@@YAXXZ		; GameSetLocalPlayerKeys

; 296  : 	}
; 297  : 	else // it's the local player or keys have already been set.

	jmp	SHORT $LN1@TaskUseGun
$LN3@TaskUseGun:

; 298  : 	{
; 299  : 		_asm mov ecx, dwSavedEcx

	mov	ecx, DWORD PTR ?dwSavedEcx@@3KA		; dwSavedEcx

; 300  : 		_asm push dwCurPlayerActor

	push	DWORD PTR ?dwCurPlayerActor@@3KA	; dwCurPlayerActor

; 301  : 		_asm mov eax, 0x624ED0

	mov	eax, 6442704				; 00624ed0H

; 302  : 		_asm call eax

	call	eax
$LN1@TaskUseGun:

; 303  : 	}
; 304  : 
; 305  : 	_asm retn 4

	ret	4
?TaskUseGun_Hook@@YAXXZ ENDP				; TaskUseGun_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?CPlayerPed_ProcessControl_Hook@@YAXXZ
_TEXT	SEGMENT
?CPlayerPed_ProcessControl_Hook@@YAXXZ PROC		; CPlayerPed_ProcessControl_Hook, COMDAT

; 145  : 	_asm mov dwCurPlayerActor, ecx // store the passed actor

	mov	DWORD PTR ?dwCurPlayerActor@@3KA, ecx	; dwCurPlayerActor

; 146  : 	_asm pushad

	pushad

; 147  : 
; 148  : 	_pPlayer = (PED_TYPE *)dwCurPlayerActor;

	mov	eax, DWORD PTR ?dwCurPlayerActor@@3KA	; dwCurPlayerActor
	mov	DWORD PTR ?_pPlayer@@3PAU_PED_TYPE@@A, eax ; _pPlayer

; 149  : 	byteInternalPlayer = *pbyteCurrentPlayer; // get the current internal player number

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteInternalPlayer@@3EA, cl	; byteInternalPlayer

; 150  : 	byteCurPlayer = FindPlayerNumFromPedPtr(dwCurPlayerActor); // get the ordinal of the passed actor

	mov	eax, DWORD PTR ?dwCurPlayerActor@@3KA	; dwCurPlayerActor
	push	eax
	call	?FindPlayerNumFromPedPtr@@YGEK@Z	; FindPlayerNumFromPedPtr
	mov	BYTE PTR ?byteCurPlayer@@3EA, al	; byteCurPlayer

; 151  : 
; 152  : 	if( dwCurPlayerActor && 
; 153  : 		(byteCurPlayer != 0) &&
; 154  : 		(byteInternalPlayer == 0) ) // not local player and local player's keys set.

	cmp	DWORD PTR ?dwCurPlayerActor@@3KA, 0	; dwCurPlayerActor
	je	$LN3@CPlayerPed
	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	test	eax, eax
	je	$LN3@CPlayerPed
	movzx	eax, BYTE PTR ?byteInternalPlayer@@3EA	; byteInternalPlayer
	test	eax, eax
	jne	$LN3@CPlayerPed

; 155  : 	{	
; 156  : 		// key switching
; 157  : 		GameStoreLocalPlayerKeys(); // remember local player's keys

	call	?GameStoreLocalPlayerKeys@@YAXXZ	; GameStoreLocalPlayerKeys

; 158  : 		GameSetRemotePlayerKeys(byteCurPlayer); // set remote player's keys

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerKeys@@YAXH@Z	; GameSetRemotePlayerKeys
	add	esp, 4

; 159  : 
; 160  : 		// save the internal cammode, apply the context.
; 161  : 		byteSavedCameraMode = *pbyteCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR ?byteSavedCameraMode@@3EA, cl	; byteSavedCameraMode

; 162  : 		*pbyteCameraMode = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	mov	ecx, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	BYTE PTR [ecx], al

; 163  : 
; 164  : 		// save the second internal cammode, apply the context
; 165  : 		wSavedCameraMode2 = *wCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR [eax]
	mov	WORD PTR ?wSavedCameraMode2@@3GA, cx	; wSavedCameraMode2

; 166  : 		*wCameraMode2 = GameGetPlayerCameraMode(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameGetPlayerCameraMode@@YGEE@Z	; GameGetPlayerCameraMode
	movzx	cx, al
	mov	edx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [edx], cx

; 167  : 		if(*wCameraMode2 == 4) *wCameraMode2 = 0;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 4
	jne	SHORT $LN2@CPlayerPed
	xor	eax, eax
	mov	ecx, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	WORD PTR [ecx], ax
$LN2@CPlayerPed:

; 168  : 
; 169  : 		// save the camera zoom factor, apply the context
; 170  : 		GameStoreLocalPlayerCameraExtZoom();

	call	?GameStoreLocalPlayerCameraExtZoom@@YGXXZ ; GameStoreLocalPlayerCameraExtZoom

; 171  : 		GameSetRemotePlayerCameraExtZoom(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerCameraExtZoom@@YGXE@Z ; GameSetRemotePlayerCameraExtZoom

; 172  : 
; 173  : 		// aim switching
; 174  : 		GameStoreLocalPlayerAim();

	call	?GameStoreLocalPlayerAim@@YGXXZ		; GameStoreLocalPlayerAim

; 175  : 		GameSetRemotePlayerAim(byteCurPlayer);

	movzx	eax, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	push	eax
	call	?GameSetRemotePlayerAim@@YGXH@Z		; GameSetRemotePlayerAim

; 176  : 
; 177  : 		*pbyteCurrentPlayer = byteCurPlayer; // Set the internal player to the passed actor

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	cl, BYTE PTR ?byteCurPlayer@@3EA	; byteCurPlayer
	mov	BYTE PTR [eax], cl

; 178  : 
; 179  : 		fHealth = _pPlayer->fHealth;

	mov	eax, DWORD PTR ?_pPlayer@@3PAU_PED_TYPE@@A ; _pPlayer
	movss	xmm0, DWORD PTR [eax+1344]
	movss	DWORD PTR ?fHealth@@3MA, xmm0

; 180  :        
; 181  : 		// call the internal CPlayerPed:ProcessControl
; 182  : 		_asm popad

	popad

; 183  : 		_asm mov edx, 0x60EA90

	mov	edx, 6351504				; 0060ea90H

; 184  : 		_asm call edx

	call	edx

; 185  : 		_asm pushad

	pushad

; 186  : 
; 187  : 		// restore the camera modes.
; 188  : 		*pbyteCameraMode = byteSavedCameraMode;

	mov	eax, DWORD PTR ?pbyteCameraMode@@3PAEA	; pbyteCameraMode
	mov	cl, BYTE PTR ?byteSavedCameraMode@@3EA	; byteSavedCameraMode
	mov	BYTE PTR [eax], cl

; 189  : 		*wCameraMode2 = wSavedCameraMode2;

	mov	eax, DWORD PTR ?wCameraMode2@@3PAGA	; wCameraMode2
	mov	cx, WORD PTR ?wSavedCameraMode2@@3GA	; wSavedCameraMode2
	mov	WORD PTR [eax], cx

; 190  : 		
; 191  : 		// remote the local player's camera zoom factor
; 192  : 		GameSetLocalPlayerCameraExtZoom();

	call	?GameSetLocalPlayerCameraExtZoom@@YGXXZ	; GameSetLocalPlayerCameraExtZoom

; 193  : 
; 194  : 		// restore the local player's keys and the internal ID.
; 195  : 		*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0

; 196  : 		GameSetLocalPlayerKeys();

	call	?GameSetLocalPlayerKeys@@YAXXZ		; GameSetLocalPlayerKeys

; 197  : 		GameSetLocalPlayerAim();

	call	?GameSetLocalPlayerAim@@YGXXZ		; GameSetLocalPlayerAim

; 198  : 	}
; 199  : 	else // it's the local player or keys have already been set.

	jmp	SHORT $LN1@CPlayerPed
$LN3@CPlayerPed:

; 200  : 	{
; 201  : /*
; 202  : 		if ( pNetGame && pNetGame->GetPlayerPool()->GetLocalPlayer()->IsActive() ) 
; 203  : 		{
; 204  : 
; 205  : //			if (pGame->FindPlayerPed()->HasExceededWorldBoundries(pNetGame->m_WorldBounds[0], pNetGame->m_WorldBounds[1], pNetGame->m_WorldBounds[2], pNetGame->m_WorldBounds[3]) )
; 206  : //			{
; 207  : 				if (pGame->GetActiveInterior() == 0)
; 208  : 				{
; 209  : 
; 210  : 					// Make them jump so they're effected by movespeed
; 211  : 					if (!IN_VEHICLE(_pPlayer) && (_pPlayer->dwStateFlags & 3)) 
; 212  : 					{
; 213  : 						pGcsKeys = GameGetInternalKeys();
; 214  : 						pGcsKeys->wKeys1[14] = 0xFF;
; 215  : 						pGcsKeys->wKeys2[14] = 0;
; 216  : 					}
; 217  : 
; 218  : 				}
; 219  : //			}
; 220  : 
; 221  : 		}
; 222  : */
; 223  : 		// Apply the original code to set ped rot from Cam
; 224  : 		memcpy((PVOID)0x6884C4,bytePatchPedRot,6);

	push	6
	push	OFFSET ?bytePatchPedRot@@3PAEA		; bytePatchPedRot
	push	6849732					; 006884c4H
	call	_memcpy
	add	esp, 12					; 0000000cH

; 225  : 
; 226  : 		_asm popad

	popad

; 227  : 		_asm mov edx, 0x60EA90

	mov	edx, 6351504				; 0060ea90H

; 228  : 		_asm call edx

	call	edx

; 229  : 		_asm pushad

	pushad

; 230  : 
; 231  : 		// Reapply the no ped rots from Cam patch
; 232  : 		memset((PVOID)0x6884C4,0x90,6);

	push	6
	push	144					; 00000090H
	push	6849732					; 006884c4H
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@CPlayerPed:

; 233  : 	}
; 234  : 	
; 235  : 	_asm popad

	popad

; 236  : 	_asm ret

	ret	0
?CPlayerPed_ProcessControl_Hook@@YAXXZ ENDP		; CPlayerPed_ProcessControl_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?TheScripts_Process_Hook@@YAXXZ
_TEXT	SEGMENT
?TheScripts_Process_Hook@@YAXXZ PROC			; TheScripts_Process_Hook, COMDAT

; 123  : 	// Enable CRunningScript::ProcessOneCommand
; 124  : 	*(PBYTE)0x469EF5 = 0xFF;

	mov	BYTE PTR ds:4628213, 255		; 000000ffH

; 125  : 	*(PBYTE)0x469EF6 = 0xD2;

	mov	BYTE PTR ds:4628214, 210		; 000000d2H

; 126  : 
; 127  :     _asm mov edx, 0x46A000

	mov	edx, 4628480				; 0046a000H

; 128  : 	_asm call edx

	call	edx

; 129  : 
; 130  : 	// Disable CRunningScript::ProcessOneCommand
; 131  :     *(PBYTE)0x469EF5 = 0x8B;

	mov	BYTE PTR ds:4628213, 139		; 0000008bH

; 132  : 	*(PBYTE)0x469EF6 = 0xD0;

	mov	BYTE PTR ds:4628214, 208		; 000000d0H

; 133  : 
; 134  : 	_asm ret

	ret	0
?TheScripts_Process_Hook@@YAXXZ ENDP			; TheScripts_Process_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\hooks.cpp
;	COMDAT ?GameProcessHook@@YAXXZ
_TEXT	SEGMENT
?GameProcessHook@@YAXXZ PROC				; GameProcessHook, COMDAT

; 112  : 	if(pGame && !pGame->IsMenuActive()) {

	cmp	DWORD PTR ?pGame@@3PAVCGame@@A, 0	; pGame
	je	SHORT $LN2@GameProces
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsMenuActive@CGame@@QAEHXZ		; CGame::IsMenuActive
	test	eax, eax
	jne	SHORT $LN2@GameProces

; 113  : 		if(pNetGame && pNetGame->GetTextDrawPool())	pNetGame->GetTextDrawPool()->Draw();

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN2@GameProces
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetTextDrawPool@CNetGame@@QAEPAVCTextDrawPool@@XZ ; CNetGame::GetTextDrawPool
	test	eax, eax
	je	SHORT $LN2@GameProces
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetTextDrawPool@CNetGame@@QAEPAVCTextDrawPool@@XZ ; CNetGame::GetTextDrawPool
	mov	ecx, eax
	call	?Draw@CTextDrawPool@@QAEXXZ		; CTextDrawPool::Draw
$LN2@GameProces:

; 114  : 	}
; 115  : 	_asm add esp, 190h

	add	esp, 400				; 00000190H

; 116  : 	_asm ret	

	ret	0
?GameProcessHook@@YAXXZ ENDP				; GameProcessHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetWalkStyle@CNetGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetWalkStyle@CNetGame@@QAEHXZ PROC			; CNetGame::GetWalkStyle, COMDAT
; _this$ = ecx

; 108  : 	BOOL GetWalkStyle() { return m_bUseCJWalk; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+44]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWalkStyle@CNetGame@@QAEHXZ ENDP			; CNetGame::GetWalkStyle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetGangZonePool@CNetGame@@QAEPAVCGangZonePool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGangZonePool@CNetGame@@QAEPAVCGangZonePool@@XZ PROC	; CNetGame::GetGangZonePool, COMDAT
; _this$ = ecx

; 102  : 	CGangZonePool * GetGangZonePool() { return m_pGangZonePool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGangZonePool@CNetGame@@QAEPAVCGangZonePool@@XZ ENDP	; CNetGame::GetGangZonePool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetTextDrawPool@CNetGame@@QAEPAVCTextDrawPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTextDrawPool@CNetGame@@QAEPAVCTextDrawPool@@XZ PROC	; CNetGame::GetTextDrawPool, COMDAT
; _this$ = ecx

; 101  : 	CTextDrawPool * GetTextDrawPool() { return m_pTextDrawPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextDrawPool@CNetGame@@QAEPAVCTextDrawPool@@XZ ENDP	; CNetGame::GetTextDrawPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetMenuPool@CNetGame@@QAEPAVCMenuPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetMenuPool@CNetGame@@QAEPAVCMenuPool@@XZ PROC		; CNetGame::GetMenuPool, COMDAT
; _this$ = ecx

; 100  : 	CMenuPool * GetMenuPool() { return m_pMenuPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMenuPool@CNetGame@@QAEPAVCMenuPool@@XZ ENDP		; CNetGame::GetMenuPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ PROC	; CNetGame::GetPickupPool, COMDAT
; _this$ = ecx

; 98   : 	CPickupPool * GetPickupPool() { return m_pPickupPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPickupPool@CNetGame@@QAEPAVCPickupPool@@XZ ENDP	; CNetGame::GetPickupPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ PROC	; CNetGame::GetVehiclePool, COMDAT
; _this$ = ecx

; 97   : 	CVehiclePool * GetVehiclePool() { return m_pVehiclePool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ENDP	; CNetGame::GetVehiclePool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\vehiclepool.h
;	COMDAT ?GetSlotState@CVehiclePool@@QAEHG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_VehicleID$ = 8						; size = 2
?GetSlotState@CVehiclePool@@QAEHG@Z PROC		; CVehiclePool::GetSlotState, COMDAT
; _this$ = ecx

; 64   : 	BOOL GetSlotState(VEHICLEID VehicleID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 		if(VehicleID >= MAX_VEHICLES) { return FALSE; }

	movzx	eax, WORD PTR _VehicleID$[ebp]
	cmp	eax, 702				; 000002beH
	jl	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 66   : 		return m_bVehicleSlotState[VehicleID];

	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
$LN2@GetSlotSta:

; 67   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CVehiclePool@@QAEHG@Z ENDP		; CVehiclePool::GetSlotState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\vehiclepool.h
;	COMDAT ?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_VehicleID$ = 8						; size = 2
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z PROC		; CVehiclePool::GetAt, COMDAT
; _this$ = ecx

; 58   : 	CVehicle* GetAt(VEHICLEID VehicleID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(VehicleID >= MAX_VEHICLES || !m_bVehicleSlotState[VehicleID]) { return NULL; }

	movzx	eax, WORD PTR _VehicleID$[ebp]
	cmp	eax, 702				; 000002beH
	jge	SHORT $LN1@GetAt
	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN2@GetAt
$LN1@GetAt:
	xor	eax, eax
	jmp	SHORT $LN3@GetAt
$LN2@GetAt:

; 60   : 		return m_pVehicles[VehicleID];

	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+2808]
$LN3@GetAt:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ENDP		; CVehiclePool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetSlotState@CPlayerPool@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetSlotState@CPlayerPool@@QAEHE@Z PROC			; CPlayerPool::GetSlotState, COMDAT
; _this$ = ecx

; 58   : 	BOOL GetSlotState(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(bytePlayerID > MAX_PLAYERS) { return FALSE; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 60   : 		return m_bPlayerSlotState[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+13]
$LN2@GetSlotSta:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CPlayerPool@@QAEHE@Z ENDP			; CPlayerPool::GetSlotState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerPool::GetAt, COMDAT
; _this$ = ecx

; 52   : 	CRemotePlayer* GetAt(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if(bytePlayerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 54   : 		return m_pPlayers[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+829]
$LN2@GetAt:

; 55   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerPool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ PROC ; CPlayerPool::GetLocalPlayer, COMDAT
; _this$ = ecx

; 46   : 	CLocalPlayer * GetLocalPlayer() { return m_pLocalPlayer; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ENDP ; CPlayerPool::GetLocalPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?GetTeam@CRemotePlayer@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTeam@CRemotePlayer@@QAEEXZ PROC			; CRemotePlayer::GetTeam, COMDAT
; _this$ = ecx

; 149  : 	BYTE GetTeam() { return m_byteTeam; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+319]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CRemotePlayer@@QAEEXZ ENDP			; CRemotePlayer::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?GetTeam@CLocalPlayer@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTeam@CLocalPlayer@@QAEEXZ PROC			; CLocalPlayer::GetTeam, COMDAT
; _this$ = ecx

; 257  : 	BYTE GetTeam() { return m_byteTeam; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+190]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeam@CLocalPlayer@@QAEEXZ ENDP			; CLocalPlayer::GetTeam
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ PROC	; CLocalPlayer::GetPlayerPed, COMDAT
; _this$ = ecx

; 223  : 	CPlayerPed * GetPlayerPed() { return m_pPlayerPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ENDP	; CLocalPlayer::GetPlayerPed
_TEXT	ENDS
END
