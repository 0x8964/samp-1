; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\events.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?dwParams@@3PAKA				; dwParams
PUBLIC	?dwStack@@3KA					; dwStack
PUBLIC	?IsDriving@@3HA					; IsDriving
PUBLIC	?ScmInst@@3KA					; ScmInst
PUBLIC	?pDriverPed@@3PAVCPlayerPed@@A			; pDriverPed
_BSS	SEGMENT
?dwParams@@3PAKA DD 04H DUP (?)				; dwParams
?dwStack@@3KA DD 01H DUP (?)				; dwStack
?IsDriving@@3HA DD 01H DUP (?)				; IsDriving
?ScmInst@@3KA DD 01H DUP (?)				; ScmInst
?pDriverPed@@3PAVCPlayerPed@@A DD 01H DUP (?)		; pDriverPed
_BSS	ENDS
CONST	SEGMENT
_change_car_skin DW 06edH
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_add_car_component DW 06e7H
	DB	'iiv', 00H
	ORG $+12
	ORG $+2
_is_component_available DW 06eaH
	DB	'i', 00H
	ORG $+14
	ORG $+2
_request_car_component DW 06e9H
	DB	'i', 00H
	ORG $+14
CONST	ENDS
PUBLIC	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ	; CGame::FindPlayerPed
PUBLIC	??$Write@K@BitStream@RakNet@@QAEXK@Z		; RakNet::BitStream::Write<unsigned long>
PUBLIC	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z	; CPlayerPool::GetAt
PUBLIC	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z	; CVehiclePool::GetAt
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
PUBLIC	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
PUBLIC	?SendScmEvent@@YAXHKKK@Z			; SendScmEvent
PUBLIC	?ProcessIncommingEvent@@YAXEHKKK@Z		; ProcessIncommingEvent
PUBLIC	?ProcessOutgoingEvent@@YAXHKKK@Z		; ProcessOutgoingEvent
PUBLIC	?SetEventCustomOpcode@@YAXXZ			; SetEventCustomOpcode
PUBLIC	?PlayerDriverCustomOpcode@@YAXXZ		; PlayerDriverCustomOpcode
PUBLIC	??$Write@H@BitStream@RakNet@@QAEXH@Z		; RakNet::BitStream::Write<int>
PUBLIC	?InstallSCMEventsProcessor@@YAXXZ		; InstallSCMEventsProcessor
PUBLIC	??_C@_02DHALGDEF@ba?$AA@			; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__Sleep@4:PROC
EXTRN	?SetColor@CVehicle@@QAEXHH@Z:PROC		; CVehicle::SetColor
EXTRN	?IsInVehicle@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsInVehicle
EXTRN	?IsAPassenger@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsAPassenger
EXTRN	??0CPlayerPed@@QAE@XZ:PROC			; CPlayerPed::CPlayerPed
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	?RequestModel@CGame@@QAEXH@Z:PROC		; CGame::RequestModel
EXTRN	?LoadRequestedModels@CGame@@QAEXXZ:PROC		; CGame::LoadRequestedModels
EXTRN	??0BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::BitStream
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z:PROC	; RakNet::BitStream::WriteBits
EXTRN	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z:PROC ; CVehiclePool::FindIDFromGtaPtr
EXTRN	?FindGtaIDFromID@CVehiclePool@@QAEHH@Z:PROC	; CVehiclePool::FindGtaIDFromID
EXTRN	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z:PROC ; GamePool_Vehicle_GetAt
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?bFirstSpawn@@3HA:DWORD				; bFirstSpawn
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_02DHALGDEF@ba?$AA@
CONST	SEGMENT
??_C@_02DHALGDEF@ba?$AA@ DB 'ba', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SendScmEvent@@YAXHKKK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SendScmEvent@@YAXHKKK@Z$0
__ehfuncinfo$?SendScmEvent@@YAXHKKK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SendScmEvent@@YAXHKKK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0
__ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\events.cpp
;	COMDAT ?InstallSCMEventsProcessor@@YAXXZ
_TEXT	SEGMENT
?InstallSCMEventsProcessor@@YAXXZ PROC			; InstallSCMEventsProcessor, COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 213  : 	*(DWORD *)0x47BF54 = (DWORD)SetEventCustomOpcode; // opcode 09C6 - 2502

	mov	DWORD PTR ds:4702036, OFFSET ?SetEventCustomOpcode@@YAXXZ ; SetEventCustomOpcode

; 214  : 	*(DWORD *)0x47BF88 = (DWORD)PlayerDriverCustomOpcode; // opcode 09D3 - 2515

	mov	DWORD PTR ds:4702088, OFFSET ?PlayerDriverCustomOpcode@@YAXXZ ; PlayerDriverCustomOpcode

; 215  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InstallSCMEventsProcessor@@YAXXZ ENDP			; InstallSCMEventsProcessor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@H@BitStream@RakNet@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@H@BitStream@RakNet@@QAEXH@Z PROC		; RakNet::BitStream::Write<int>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@H@BitStream@RakNet@@QAEXH@Z ENDP		; RakNet::BitStream::Write<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\events.cpp
;	COMDAT ?PlayerDriverCustomOpcode@@YAXXZ
_TEXT	SEGMENT
?PlayerDriverCustomOpcode@@YAXXZ PROC			; PlayerDriverCustomOpcode, COMDAT

; 174  : 	_asm pushad

	pushad

; 175  : 	_asm mov ScmInst, esi 

	mov	DWORD PTR ?ScmInst@@3KA, esi		; ScmInst

; 176  : 
; 177  : 	IsDriving = 1;

	mov	DWORD PTR ?IsDriving@@3HA, 1		; IsDriving

; 178  : 
; 179  : 	if(pGame) {

	cmp	DWORD PTR ?pGame@@3PAVCGame@@A, 0	; pGame
	je	SHORT $LN2@PlayerDriv

; 180  : 		pDriverPed = pGame->FindPlayerPed();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	DWORD PTR ?pDriverPed@@3PAVCPlayerPed@@A, eax ; pDriverPed

; 181  : 		if(pDriverPed->IsInVehicle() && !pDriverPed->IsAPassenger()) {

	mov	ecx, DWORD PTR ?pDriverPed@@3PAVCPlayerPed@@A ; pDriverPed
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN2@PlayerDriv
	mov	ecx, DWORD PTR ?pDriverPed@@3PAVCPlayerPed@@A ; pDriverPed
	call	?IsAPassenger@CPlayerPed@@QAEHXZ	; CPlayerPed::IsAPassenger
	test	eax, eax
	jne	SHORT $LN2@PlayerDriv

; 182  : 			IsDriving = 0;

	mov	DWORD PTR ?IsDriving@@3HA, 0		; IsDriving
$LN2@PlayerDriv:

; 183  : 		}
; 184  : 	}
; 185  : 
; 186  : 	_asm push IsDriving

	push	DWORD PTR ?IsDriving@@3HA		; IsDriving

; 187  : 	_asm mov ecx, ScmInst

	mov	ecx, DWORD PTR ?ScmInst@@3KA		; ScmInst

; 188  : 	_asm mov ebx, 0x4859D0 // CRunningScript::UpdateCompareFlag

	mov	ebx, 4741584				; 004859d0H

; 189  : 	_asm call ebx

	call	ebx

; 190  : 
; 191  : 	_asm popad

	popad

; 192  : 
; 193  : 	_asm mov ebx, 0x47BF2B // return to ProcessCommands2500To2600

	mov	ebx, 4701995				; 0047bf2bH

; 194  : 	_asm jmp ebx

	jmp	ebx
?PlayerDriverCustomOpcode@@YAXXZ ENDP			; PlayerDriverCustomOpcode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\events.cpp
;	COMDAT ?SetEventCustomOpcode@@YAXXZ
_TEXT	SEGMENT
?SetEventCustomOpcode@@YAXXZ PROC			; SetEventCustomOpcode, COMDAT

; 146  : 	_asm pushad

	pushad

; 147  : 
; 148  : 	_asm push 4

	push	4

; 149  : 	_asm mov ecx, esi

	mov	ecx, esi

; 150  : 	_asm mov ebx, 0x464080 // CRunningScript::CollectParamaters()

	mov	ebx, 4604032				; 00464080H

; 151  : 	_asm call ebx

	call	ebx

; 152  : 
; 153  : 	dwParams[0] = *(PDWORD)0xA43C78;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ds:10763384
	mov	DWORD PTR ?dwParams@@3PAKA[ecx], edx

; 154  : 	dwParams[1] = *(PDWORD)0xA43C7C;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ds:10763388
	mov	DWORD PTR ?dwParams@@3PAKA[eax], ecx

; 155  : 	dwParams[2] = *(PDWORD)0xA43C80;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ds:10763392
	mov	DWORD PTR ?dwParams@@3PAKA[eax], ecx

; 156  : 	dwParams[3] = *(PDWORD)0xA43C84;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ds:10763396
	mov	DWORD PTR ?dwParams@@3PAKA[ecx], edx

; 157  : 
; 158  : 	ProcessOutgoingEvent(dwParams[0],dwParams[1],dwParams[2],dwParams[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ?dwParams@@3PAKA[ecx]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ?dwParams@@3PAKA[eax]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ?dwParams@@3PAKA[edx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR ?dwParams@@3PAKA[edx]
	push	eax
	call	?ProcessOutgoingEvent@@YAXHKKK@Z	; ProcessOutgoingEvent
	add	esp, 16					; 00000010H

; 159  : 		
; 160  : 	_asm popad

	popad

; 161  : 
; 162  : 	_asm mov ebx, 0x47BF2B // return to ProcessCommands2500To2600

	mov	ebx, 4701995				; 0047bf2bH

; 163  : 	_asm jmp ebx

	jmp	ebx
?SetEventCustomOpcode@@YAXXZ ENDP			; SetEventCustomOpcode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\events.cpp
;	COMDAT ?ProcessOutgoingEvent@@YAXHKKK@Z
_TEXT	SEGMENT
tv67 = -220						; size = 4
_pVehiclePool$ = -20					; size = 4
_iVehicleID$ = -8					; size = 4
_iEventType$ = 8					; size = 4
_dwParam1$ = 12						; size = 4
_dwParam2$ = 16						; size = 4
_dwParam3$ = 20						; size = 4
?ProcessOutgoingEvent@@YAXHKKK@Z PROC			; ProcessOutgoingEvent, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 102  : 	if(!pNetGame) return;

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	jne	SHORT $LN11@ProcessOut
	jmp	$LN12@ProcessOut
$LN11@ProcessOut:

; 103  : 
; 104  : 	int iVehicleID;
; 105  : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 106  : 
; 107  : 	//pChatWindow->AddDebugMessage("set_event(%u,%u,%u,%u)",iEventType,dwParam1,dwParam2,dwParam3);
; 108  : 
; 109  : 	switch(iEventType) {

	mov	eax, DWORD PTR _iEventType$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 3
	ja	$LN12@ProcessOut
	mov	edx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN14@ProcessOut[edx*4]
$LN8@ProcessOut:

; 110  : 
; 111  : 		case EVENT_TYPE_PAINTJOB:
; 112  : 			iVehicleID = pVehiclePool->FindIDFromGtaPtr(GamePool_Vehicle_GetAt(dwParam1));

	mov	eax, DWORD PTR _dwParam1$[ebp]
	push	eax
	call	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ; GamePool_Vehicle_GetAt
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	movzx	ecx, ax
	mov	DWORD PTR _iVehicleID$[ebp], ecx

; 113  : 			if(iVehicleID != INVALID_VEHICLE_ID) {

	cmp	DWORD PTR _iVehicleID$[ebp], 65535	; 0000ffffH
	je	SHORT $LN7@ProcessOut

; 114  : 				SendScmEvent(EVENT_TYPE_PAINTJOB,iVehicleID,dwParam2,0);		

	push	0
	mov	eax, DWORD PTR _dwParam2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iVehicleID$[ebp]
	push	ecx
	push	1
	call	?SendScmEvent@@YAXHKKK@Z		; SendScmEvent
	add	esp, 16					; 00000010H
$LN7@ProcessOut:

; 115  : 			}
; 116  : 			break;

	jmp	$LN12@ProcessOut
$LN6@ProcessOut:

; 117  : 
; 118  : 		case EVENT_TYPE_CARCOMPONENT:
; 119  : 			iVehicleID = pVehiclePool->FindIDFromGtaPtr(GamePool_Vehicle_GetAt(dwParam1));

	mov	eax, DWORD PTR _dwParam1$[ebp]
	push	eax
	call	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ; GamePool_Vehicle_GetAt
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	movzx	ecx, ax
	mov	DWORD PTR _iVehicleID$[ebp], ecx

; 120  : 			if(iVehicleID != INVALID_VEHICLE_ID) {

	cmp	DWORD PTR _iVehicleID$[ebp], 65535	; 0000ffffH
	je	SHORT $LN5@ProcessOut

; 121  : 				SendScmEvent(EVENT_TYPE_CARCOMPONENT,iVehicleID,dwParam2,0);

	push	0
	mov	eax, DWORD PTR _dwParam2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iVehicleID$[ebp]
	push	ecx
	push	2
	call	?SendScmEvent@@YAXHKKK@Z		; SendScmEvent
	add	esp, 16					; 00000010H
$LN5@ProcessOut:

; 122  : 			}
; 123  : 			break;

	jmp	SHORT $LN12@ProcessOut
$LN4@ProcessOut:

; 124  : 
; 125  : 		case EVENT_TYPE_CARCOLOR:
; 126  : 			iVehicleID = pVehiclePool->FindIDFromGtaPtr(GamePool_Vehicle_GetAt(dwParam1));

	mov	eax, DWORD PTR _dwParam1$[ebp]
	push	eax
	call	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ; GamePool_Vehicle_GetAt
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	movzx	ecx, ax
	mov	DWORD PTR _iVehicleID$[ebp], ecx

; 127  : 			if(iVehicleID != INVALID_VEHICLE_ID) {

	cmp	DWORD PTR _iVehicleID$[ebp], 65535	; 0000ffffH
	je	SHORT $LN3@ProcessOut

; 128  : 				SendScmEvent(EVENT_TYPE_CARCOLOR,iVehicleID,dwParam2,dwParam3);

	mov	eax, DWORD PTR _dwParam3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwParam2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iVehicleID$[ebp]
	push	edx
	push	3
	call	?SendScmEvent@@YAXHKKK@Z		; SendScmEvent
	add	esp, 16					; 00000010H
$LN3@ProcessOut:

; 129  : 			}
; 130  : 			break;

	jmp	SHORT $LN12@ProcessOut
$LN2@ProcessOut:

; 131  : 
; 132  : 		case EVENT_ENTEREXIT_MODSHOP:
; 133  : 			iVehicleID = pVehiclePool->FindIDFromGtaPtr(GamePool_Vehicle_GetAt(dwParam1));

	mov	eax, DWORD PTR _dwParam1$[ebp]
	push	eax
	call	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ; GamePool_Vehicle_GetAt
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	movzx	ecx, ax
	mov	DWORD PTR _iVehicleID$[ebp], ecx

; 134  : 			if(iVehicleID != INVALID_VEHICLE_ID) {

	cmp	DWORD PTR _iVehicleID$[ebp], 65535	; 0000ffffH
	je	SHORT $LN12@ProcessOut

; 135  : 				SendScmEvent(EVENT_ENTEREXIT_MODSHOP,iVehicleID,dwParam2,0);

	push	0
	mov	eax, DWORD PTR _dwParam2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iVehicleID$[ebp]
	push	ecx
	push	4
	call	?SendScmEvent@@YAXHKKK@Z		; SendScmEvent
	add	esp, 16					; 00000010H
$LN12@ProcessOut:

; 136  : 			}
; 137  : 			break;
; 138  : 
; 139  : 	}
; 140  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@ProcessOut:
	DD	$LN8@ProcessOut
	DD	$LN6@ProcessOut
	DD	$LN4@ProcessOut
	DD	$LN2@ProcessOut
?ProcessOutgoingEvent@@YAXHKKK@Z ENDP			; ProcessOutgoingEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\events.cpp
;	COMDAT ?ProcessIncommingEvent@@YAXEHKKK@Z
_TEXT	SEGMENT
tv68 = -292						; size = 4
_pVehiclePool$ = -92					; size = 4
_pRemote$ = -80						; size = 4
_pVehicle$ = -68					; size = 4
_iWait$ = -56						; size = 4
_iComponent$ = -44					; size = 4
_iPaintJob$ = -32					; size = 4
_iVehicleID$ = -20					; size = 4
_v$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
_iEventType$ = 12					; size = 4
_dwParam1$ = 16						; size = 4
_dwParam2$ = 20						; size = 4
_dwParam3$ = 24						; size = 4
?ProcessIncommingEvent@@YAXEHKKK@Z PROC			; ProcessIncommingEvent, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 36   : 	DWORD v;
; 37   : 	int iVehicleID;
; 38   : 	int iPaintJob;
; 39   : 	int iComponent;
; 40   : 	int iWait;
; 41   : 	CVehicle *pVehicle;
; 42   : 	CRemotePlayer *pRemote;
; 43   : 
; 44   : 	if(!pNetGame) return;

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	jne	SHORT $LN15@ProcessInc
	jmp	$LN16@ProcessInc
$LN15@ProcessInc:

; 45   : 	if(bFirstSpawn) return; // Local player has never spawned.

	cmp	DWORD PTR ?bFirstSpawn@@3HA, 0		; bFirstSpawn
	je	SHORT $LN14@ProcessInc
	jmp	$LN16@ProcessInc
$LN14@ProcessInc:

; 46   : 
; 47   : 	CVehiclePool *pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 48   : 	
; 49   : #ifdef _DEBUG
; 50   : 	//pChatWindow->AddDebugMessage("get_event(%u,%u,%u,%u,%u)",bytePlayerID,iEventType,dwParam1,dwParam2,dwParam3);
; 51   : #endif
; 52   : 
; 53   : 	switch(iEventType) {

	mov	eax, DWORD PTR _iEventType$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 3
	ja	$LN16@ProcessInc
	mov	edx, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN21@ProcessInc[edx*4]
$LN11@ProcessInc:

; 54   : 
; 55   : 		case EVENT_TYPE_PAINTJOB:
; 56   : 			iVehicleID = pVehiclePool->FindGtaIDFromID(dwParam1);

	mov	eax, DWORD PTR _dwParam1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindGtaIDFromID@CVehiclePool@@QAEHH@Z	; CVehiclePool::FindGtaIDFromID
	mov	DWORD PTR _iVehicleID$[ebp], eax

; 57   : 			iPaintJob = (int)dwParam2;

	mov	eax, DWORD PTR _dwParam2$[ebp]
	mov	DWORD PTR _iPaintJob$[ebp], eax

; 58   : 			if(iVehicleID) ScriptCommand(&change_car_skin,iVehicleID,dwParam2);

	cmp	DWORD PTR _iVehicleID$[ebp], 0
	je	SHORT $LN10@ProcessInc
	mov	eax, DWORD PTR _dwParam2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iVehicleID$[ebp]
	push	ecx
	push	OFFSET _change_car_skin
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN10@ProcessInc:

; 59   : 			break;

	jmp	$LN16@ProcessInc
$LN9@ProcessInc:

; 60   : 
; 61   : 		case EVENT_TYPE_CARCOMPONENT:
; 62   : 			iVehicleID = pVehiclePool->FindGtaIDFromID(dwParam1);

	mov	eax, DWORD PTR _dwParam1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindGtaIDFromID@CVehiclePool@@QAEHH@Z	; CVehiclePool::FindGtaIDFromID
	mov	DWORD PTR _iVehicleID$[ebp], eax

; 63   : 			iComponent = (int)dwParam2;

	mov	eax, DWORD PTR _dwParam2$[ebp]
	mov	DWORD PTR _iComponent$[ebp], eax

; 64   : 			pGame->RequestModel(iComponent);

	mov	eax, DWORD PTR _iComponent$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel

; 65   : 			pGame->LoadRequestedModels();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?LoadRequestedModels@CGame@@QAEXXZ	; CGame::LoadRequestedModels

; 66   : 			ScriptCommand(&request_car_component,iComponent);

	mov	eax, DWORD PTR _iComponent$[ebp]
	push	eax
	push	OFFSET _request_car_component
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 67   : 
; 68   : 			iWait = 10;

	mov	DWORD PTR _iWait$[ebp], 10		; 0000000aH
$LN8@ProcessInc:

; 69   : 			while(!ScriptCommand(&is_component_available,iComponent) && iWait) {

	mov	eax, DWORD PTR _iComponent$[ebp]
	push	eax
	push	OFFSET _is_component_available
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@ProcessInc
	cmp	DWORD PTR _iWait$[ebp], 0
	je	SHORT $LN7@ProcessInc

; 70   : 				Sleep(5);

	mov	esi, esp
	push	5
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 71   : 				iWait--;

	mov	eax, DWORD PTR _iWait$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iWait$[ebp], eax

; 72   : 			}

	jmp	SHORT $LN8@ProcessInc
$LN7@ProcessInc:

; 73   : 			if(!iWait) {

	cmp	DWORD PTR _iWait$[ebp], 0
	jne	SHORT $LN6@ProcessInc

; 74   : 				//pChatWindow->AddDebugMessage("Timeout on car component.");
; 75   : 				break;

	jmp	$LN16@ProcessInc
$LN6@ProcessInc:

; 76   : 			}
; 77   : 			ScriptCommand(&add_car_component,iVehicleID,iComponent,&v);

	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iComponent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iVehicleID$[ebp]
	push	edx
	push	OFFSET _add_car_component
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H

; 78   : 			//pChatWindow->AddDebugMessage("Added car component: %d",iComponent);
; 79   : 			break;

	jmp	SHORT $LN16@ProcessInc
$LN5@ProcessInc:

; 80   : 
; 81   : 		case EVENT_TYPE_CARCOLOR:
; 82   : 			pVehicle = pVehiclePool->GetAt((VEHICLEID)dwParam1);

	movzx	eax, WORD PTR _dwParam1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$[ebp], eax

; 83   : 			if(pVehicle) pVehicle->SetColor((int)dwParam2,(int)dwParam3);

	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	SHORT $LN4@ProcessInc
	mov	eax, DWORD PTR _dwParam3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwParam2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?SetColor@CVehicle@@QAEXHH@Z		; CVehicle::SetColor
$LN4@ProcessInc:

; 84   : 			break;

	jmp	SHORT $LN16@ProcessInc
$LN3@ProcessInc:

; 85   : 
; 86   : 		case EVENT_ENTEREXIT_MODSHOP:
; 87   : 			if(bytePlayerID > MAX_PLAYERS) return;

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN2@ProcessInc
	jmp	SHORT $LN16@ProcessInc
$LN2@ProcessInc:

; 88   : 			pVehicle = pVehiclePool->GetAt((BYTE)dwParam1);

	movzx	ax, BYTE PTR _dwParam1$[ebp]
	movzx	ecx, ax
	push	ecx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pVehicle$[ebp], eax

; 89   : 			pRemote = pNetGame->GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pRemote$[ebp], eax

; 90   : 			if(pRemote && pVehicle) {

	cmp	DWORD PTR _pRemote$[ebp], 0
	je	SHORT $LN16@ProcessInc
	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	SHORT $LN16@ProcessInc

; 91   : 				//pVehicle->SetLockedState((int)dwParam2); // Results in a crash at 0x48CFC9 under certain conditions.
; 92   : 				pRemote->m_iIsInAModShop = (int)dwParam2;

	mov	eax, DWORD PTR _pRemote$[ebp]
	mov	ecx, DWORD PTR _dwParam2$[ebp]
	mov	DWORD PTR [eax+352], ecx
$LN16@ProcessInc:

; 93   : 			}
; 94   : 			break;
; 95   : 	}
; 96   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@ProcessInc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@ProcessInc:
	DD	1
	DD	$LN19@ProcessInc
$LN19@ProcessInc:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN18@ProcessInc
$LN18@ProcessInc:
	DB	118					; 00000076H
	DB	0
	npad	2
$LN21@ProcessInc:
	DD	$LN11@ProcessInc
	DD	$LN9@ProcessInc
	DD	$LN5@ProcessInc
	DD	$LN3@ProcessInc
?ProcessIncommingEvent@@YAXEHKKK@Z ENDP			; ProcessIncommingEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\events.cpp
;	COMDAT ?SendScmEvent@@YAXHKKK@Z
_TEXT	SEGMENT
tv78 = -496						; size = 4
_bsSend$ = -296						; size = 273
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iEventType$ = 8					; size = 4
_dwParam1$ = 12						; size = 4
_dwParam2$ = 16						; size = 4
_dwParam3$ = 20						; size = 4
?SendScmEvent@@YAXHKKK@Z PROC				; SendScmEvent, COMDAT

; 200  : { 

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SendScmEvent@@YAXHKKK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 484				; 000001e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-496]
	mov	ecx, 121				; 00000079H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 201  : 	RakNet::BitStream bsSend;

	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 202  : 	bsSend.Write(iEventType);

	mov	eax, DWORD PTR _iEventType$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@H@BitStream@RakNet@@QAEXH@Z	; RakNet::BitStream::Write<int>

; 203  : 	bsSend.Write(dwParam1);

	mov	eax, DWORD PTR _dwParam1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@K@BitStream@RakNet@@QAEXK@Z	; RakNet::BitStream::Write<unsigned long>

; 204  : 	bsSend.Write(dwParam2);

	mov	eax, DWORD PTR _dwParam2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@K@BitStream@RakNet@@QAEXK@Z	; RakNet::BitStream::Write<unsigned long>

; 205  : 	bsSend.Write(dwParam3);

	mov	eax, DWORD PTR _dwParam3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@K@BitStream@RakNet@@QAEXK@Z	; RakNet::BitStream::Write<unsigned long>

; 206  : 	pNetGame->GetRakClient()->RPC(RPC_ScmEvent,&bsSend,HIGH_PRIORITY,RELIABLE_SEQUENCED,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv78[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	4
	push	1
	lea	eax, DWORD PTR _bsSend$[ebp]
	push	eax
	push	OFFSET ??_C@_02DHALGDEF@ba?$AA@
	mov	ecx, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 207  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SendScmEve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 496				; 000001f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@SendScmEve:
	DD	1
	DD	$LN6@SendScmEve
$LN6@SendScmEve:
	DD	-296					; fffffed8H
	DD	273					; 00000111H
	DD	$LN4@SendScmEve
$LN4@SendScmEve:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SendScmEvent@@YAXHKKK@Z$0:
	lea	ecx, DWORD PTR _bsSend$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?SendScmEvent@@YAXHKKK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-500]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SendScmEvent@@YAXHKKK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SendScmEvent@@YAXHKKK@Z ENDP				; SendScmEvent
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ PROC ; CNetGame::GetRakClient, COMDAT
; _this$ = ecx

; 103  : 	RakClientInterface * GetRakClient() { return m_pRakClient; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ENDP ; CNetGame::GetRakClient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ PROC	; CNetGame::GetVehiclePool, COMDAT
; _this$ = ecx

; 97   : 	CVehiclePool * GetVehiclePool() { return m_pVehiclePool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ENDP	; CNetGame::GetVehiclePool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\vehiclepool.h
;	COMDAT ?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_VehicleID$ = 8						; size = 2
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z PROC		; CVehiclePool::GetAt, COMDAT
; _this$ = ecx

; 58   : 	CVehicle* GetAt(VEHICLEID VehicleID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(VehicleID >= MAX_VEHICLES || !m_bVehicleSlotState[VehicleID]) { return NULL; }

	movzx	eax, WORD PTR _VehicleID$[ebp]
	cmp	eax, 702				; 000002beH
	jge	SHORT $LN1@GetAt
	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN2@GetAt
$LN1@GetAt:
	xor	eax, eax
	jmp	SHORT $LN3@GetAt
$LN2@GetAt:

; 60   : 		return m_pVehicles[VehicleID];

	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+2808]
$LN3@GetAt:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ENDP		; CVehiclePool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerPool::GetAt, COMDAT
; _this$ = ecx

; 52   : 	CRemotePlayer* GetAt(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if(bytePlayerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 54   : 		return m_pPlayers[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+829]
$LN2@GetAt:

; 55   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerPool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@K@BitStream@RakNet@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@K@BitStream@RakNet@@QAEXK@Z PROC		; RakNet::BitStream::Write<unsigned long>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@K@BitStream@RakNet@@QAEXK@Z ENDP		; RakNet::BitStream::Write<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ PROC		; CGame::FindPlayerPed, COMDAT
; _this$ = ecx

; 142  : 	CPlayerPed  *FindPlayerPed() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		if(m_pGamePlayer==NULL)	m_pGamePlayer = new CPlayerPed();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@FindPlayer
	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@FindPlayer
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPlayerPed@@QAE@XZ			; CPlayerPed::CPlayerPed
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@FindPlayer
$LN4@FindPlayer:
	mov	DWORD PTR tv74[ebp], 0
$LN5@FindPlayer:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@FindPlayer:

; 144  : 		return m_pGamePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 145  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ENDP		; CGame::FindPlayerPed
END
