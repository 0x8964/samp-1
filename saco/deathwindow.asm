; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\deathwindow.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?GetScreenWidth@CGame@@QAEHXZ			; CGame::GetScreenWidth
PUBLIC	?GetScreenHeight@CGame@@QAEHXZ			; CGame::GetScreenHeight
PUBLIC	?PushBack@CDeathWindow@@AAEXXZ			; CDeathWindow::PushBack
PUBLIC	?AddToDeathWindowBuffer@CDeathWindow@@AAEXPAD0KKE@Z ; CDeathWindow::AddToDeathWindowBuffer
PUBLIC	?Draw@CDeathWindow@@QAEXXZ			; CDeathWindow::Draw
PUBLIC	?AddMessage@CDeathWindow@@QAEXPAD0KKE@Z		; CDeathWindow::AddMessage
PUBLIC	?RenderText@CDeathWindow@@QAEXPADUtagRECT@@KK@Z	; CDeathWindow::RenderText
PUBLIC	?RenderWeaponSprite@CDeathWindow@@QAEXPADUtagRECT@@K@Z ; CDeathWindow::RenderWeaponSprite
PUBLIC	?SpriteIDForWeapon@CDeathWindow@@QAEPADE@Z	; CDeathWindow::SpriteIDForWeapon
PUBLIC	??0CDeathWindow@@QAE@PAUIDirect3DDevice9@@@Z	; CDeathWindow::CDeathWindow
PUBLIC	??1CDeathWindow@@QAE@XZ				; CDeathWindow::~CDeathWindow
PUBLIC	?CreateFonts@CDeathWindow@@QAEXXZ		; CDeathWindow::CreateFonts
PUBLIC	??_C@_05MPFIAJAP@Arial?$AA@			; `string'
PUBLIC	??_C@_0BB@OLAIJMCG@LONGESTNICKNICKK?$AA@	; `string'
PUBLIC	??_C@_0L@OKMCEIJL@GTAWEAPON3?$AA@		; `string'
PUBLIC	??_C@_01FGNFDNOH@?$CF?$AA@			; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI?$AA@			; `string'
PUBLIC	??_C@_01GFHCPBMG@C?$AA@				; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_01HNPIGOCE@?$CG?$AA@			; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_01DCLJPIOD@?$CB?$AA@			; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	??_C@_01EPMOAMKG@$?$AA@				; `string'
PUBLIC	??_C@_01IPJKGB@?$CD?$AA@			; `string'
PUBLIC	??_C@_01EOFPKCAF@?$EA?$AA@			; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_01JPJNBJEM@I?$AA@				; `string'
PUBLIC	??_C@_01KJLJFBPL@8?$AA@				; `string'
PUBLIC	??_C@_01IGIGCIAN@H?$AA@				; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01FHEEJDEE@A?$AA@				; `string'
PUBLIC	??_C@_01FAMBOPH@4?$AA@				; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_01EJNLAFE@P?$AA@				; `string'
PUBLIC	??_C@_01BIAFAFID@F?$AA@				; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM?$AA@			; `string'
PUBLIC	??_C@_01ICJEACDI@?$DL?$AA@			; `string'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_01OCOKONAJ@L?$AA@				; `string'
PUBLIC	??_C@_01LELAEKIP@J?$AA@				; `string'
PUBLIC	??_C@_01DGKLNCNG@R?$AA@				; `string'
PUBLIC	??_C@_01BNIGIBBF@Q?$AA@				; `string'
PUBLIC	??_C@_01KNKLHLMO@K?$AA@				; `string'
PUBLIC	??_C@_01NANMIPIL@N?$AA@				; `string'
PUBLIC	__real@3e99999a
PUBLIC	__real@3f266666
PUBLIC	__real@3f400000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_D3DXCreateSprite@8:PROC
EXTRN	_D3DXCreateFontA@48:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01NANMIPIL@N?$AA@
CONST	SEGMENT
??_C@_01NANMIPIL@N?$AA@ DB 'N', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KNKLHLMO@K?$AA@
CONST	SEGMENT
??_C@_01KNKLHLMO@K?$AA@ DB 'K', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BNIGIBBF@Q?$AA@
CONST	SEGMENT
??_C@_01BNIGIBBF@Q?$AA@ DB 'Q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R?$AA@
CONST	SEGMENT
??_C@_01DGKLNCNG@R?$AA@ DB 'R', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LELAEKIP@J?$AA@
CONST	SEGMENT
??_C@_01LELAEKIP@J?$AA@ DB 'J', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L?$AA@
CONST	SEGMENT
??_C@_01OCOKONAJ@L?$AA@ DB 'L', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL?$AA@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL?$AA@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM?$AA@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM?$AA@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F?$AA@
CONST	SEGMENT
??_C@_01BIAFAFID@F?$AA@ DB 'F', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EJNLAFE@P?$AA@
CONST	SEGMENT
??_C@_01EJNLAFE@P?$AA@ DB 'P', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4?$AA@
CONST	SEGMENT
??_C@_01FAMBOPH@4?$AA@ DB '4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A?$AA@
CONST	SEGMENT
??_C@_01FHEEJDEE@A?$AA@ DB 'A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IGIGCIAN@H?$AA@
CONST	SEGMENT
??_C@_01IGIGCIAN@H?$AA@ DB 'H', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8?$AA@
CONST	SEGMENT
??_C@_01KJLJFBPL@8?$AA@ DB '8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I?$AA@
CONST	SEGMENT
??_C@_01JPJNBJEM@I?$AA@ DB 'I', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EOFPKCAF@?$EA?$AA@
CONST	SEGMENT
??_C@_01EOFPKCAF@?$EA?$AA@ DB '@', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IPJKGB@?$CD?$AA@
CONST	SEGMENT
??_C@_01IPJKGB@?$CD?$AA@ DB '#', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EPMOAMKG@$?$AA@
CONST	SEGMENT
??_C@_01EPMOAMKG@$?$AA@ DB '$', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DCLJPIOD@?$CB?$AA@
CONST	SEGMENT
??_C@_01DCLJPIOD@?$CB?$AA@ DB '!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HNPIGOCE@?$CG?$AA@
CONST	SEGMENT
??_C@_01HNPIGOCE@?$CG?$AA@ DB '&', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT
??_C@_01GFHCPBMG@C?$AA@ DB 'C', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI?$AA@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI?$AA@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FGNFDNOH@?$CF?$AA@
CONST	SEGMENT
??_C@_01FGNFDNOH@?$CF?$AA@ DB '%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OKMCEIJL@GTAWEAPON3?$AA@
CONST	SEGMENT
??_C@_0L@OKMCEIJL@GTAWEAPON3?$AA@ DB 'GTAWEAPON3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OLAIJMCG@LONGESTNICKNICKK?$AA@
CONST	SEGMENT
??_C@_0BB@OLAIJMCG@LONGESTNICKNICKK?$AA@ DB 'LONGESTNICKNICKK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPFIAJAP@Arial?$AA@
CONST	SEGMENT
??_C@_05MPFIAJAP@Arial?$AA@ DB 'Arial', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ?CreateFonts@CDeathWindow@@QAEXXZ
_TEXT	SEGMENT
$T1 = -276						; size = 4
$T2 = -264						; size = 4
$T3 = -252						; size = 4
_iFontSize$ = -48					; size = 4
_rectLongestNick$ = -36					; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?CreateFonts@CDeathWindow@@QAEXXZ PROC			; CDeathWindow::CreateFonts, COMDAT
; _this$ = ecx

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 47   : 	if(!m_pD3DDevice) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+315], 0
	jne	SHORT $LN10@CreateFont
	jmp	$LN11@CreateFont
$LN10@CreateFont:

; 48   : 	
; 49   : 	RECT rectLongestNick = {0,0,0,0};

	mov	DWORD PTR _rectLongestNick$[ebp], 0
	mov	DWORD PTR _rectLongestNick$[ebp+4], 0
	mov	DWORD PTR _rectLongestNick$[ebp+8], 0
	mov	DWORD PTR _rectLongestNick$[ebp+12], 0

; 50   : 	int	iFontSize;
; 51   : 
; 52   : 	if(m_pD3DFont) SAFE_DELETE(m_pD3DFont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+303], 0
	je	SHORT $LN9@CreateFont
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+303], 0
	je	SHORT $LN9@CreateFont
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+303], 0
$LN9@CreateFont:

; 53   : 	if(m_pWeaponFont) SAFE_DELETE(m_pWeaponFont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+307], 0
	je	SHORT $LN7@CreateFont
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+307], 0
	je	SHORT $LN7@CreateFont
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+307]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+307], 0
$LN7@CreateFont:

; 54   : 	if(m_pSprite) SAFE_DELETE(m_pSprite);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+311], 0
	je	SHORT $LN5@CreateFont
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+311], 0
	je	SHORT $LN5@CreateFont
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+311], 0
$LN5@CreateFont:

; 55   : 
; 56   : 	// Create a sprite to use when drawing text
; 57   : 	D3DXCreateSprite(m_pD3DDevice,&m_pSprite);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 311				; 00000137H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+315]
	push	edx
	call	_D3DXCreateSprite@8

; 58   : 		
; 59   : 	if(pGame->GetScreenWidth() <= 1024) {

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetScreenWidth@CGame@@QAEHXZ		; CGame::GetScreenWidth
	cmp	eax, 1024				; 00000400H
	jg	SHORT $LN3@CreateFont

; 60   : 		iFontSize = 12;

	mov	DWORD PTR _iFontSize$[ebp], 12		; 0000000cH

; 61   : 	} else {

	jmp	SHORT $LN2@CreateFont
$LN3@CreateFont:

; 62   : 		iFontSize = 14;

	mov	DWORD PTR _iFontSize$[ebp], 14		; 0000000eH
$LN2@CreateFont:

; 63   : 	}
; 64   : 
; 65   : 	D3DXCreateFont(m_pD3DDevice, iFontSize, 0, FW_BOLD, 1, FALSE,
; 66   : 		DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, ANTIALIASED_QUALITY, DEFAULT_PITCH, "Arial", &m_pD3DFont);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 303				; 0000012fH
	push	eax
	push	OFFSET ??_C@_05MPFIAJAP@Arial?$AA@
	push	0
	push	4
	push	0
	push	1
	push	0
	push	1
	push	700					; 000002bcH
	push	0
	mov	ecx, DWORD PTR _iFontSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+315]
	push	eax
	call	_D3DXCreateFontA@48

; 67   : 
; 68   : 	// Store the rect for right aligned name (DT_RIGHT fucks the text)
; 69   : 	if(m_pD3DFont) m_pD3DFont->DrawText(0,"LONGESTNICKNICKK",-1,&rectLongestNick,DT_CALCRECT|DT_LEFT,0xFF000000);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+303], 0
	je	SHORT $LN1@CreateFont
	mov	esi, esp
	push	-16777216				; ff000000H
	push	1024					; 00000400H
	lea	eax, DWORD PTR _rectLongestNick$[ebp]
	push	eax
	push	-1
	push	OFFSET ??_C@_0BB@OLAIJMCG@LONGESTNICKNICKK?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+303]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@CreateFont:

; 70   : 		
; 71   : 	m_iLongestNickLength = rectLongestNick.right - rectLongestNick.left;

	mov	eax, DWORD PTR _rectLongestNick$[ebp+8]
	sub	eax, DWORD PTR _rectLongestNick$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+299], eax

; 72   : 	
; 73   : 	D3DXCreateFont(m_pD3DDevice, 20, 0, FW_NORMAL, 1, FALSE,
; 74   : 		SYMBOL_CHARSET, OUT_DEFAULT_PRECIS, ANTIALIASED_QUALITY, DEFAULT_PITCH, "GTAWEAPON3", &m_pWeaponFont);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 307				; 00000133H
	push	eax
	push	OFFSET ??_C@_0L@OKMCEIJL@GTAWEAPON3?$AA@
	push	0
	push	4
	push	0
	push	2
	push	0
	push	1
	push	400					; 00000190H
	push	0
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+315]
	push	edx
	call	_D3DXCreateFontA@48
$LN11@CreateFont:

; 75   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@CreateFont
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@CreateFont:
	DD	1
	DD	$LN14@CreateFont
$LN14@CreateFont:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN13@CreateFont
$LN13@CreateFont:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	78					; 0000004eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?CreateFonts@CDeathWindow@@QAEXXZ ENDP			; CDeathWindow::CreateFonts
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ??1CDeathWindow@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1CDeathWindow@@QAE@XZ PROC				; CDeathWindow::~CDeathWindow, COMDAT
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 	if(m_pD3DFont) delete m_pD3DFont;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+303], 0
	je	SHORT $LN2@CDeathWind
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@CDeathWind:

; 41   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDeathWindow@@QAE@XZ ENDP				; CDeathWindow::~CDeathWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ??0CDeathWindow@@QAE@PAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_x$ = -20						; size = 4
_this$ = -8						; size = 4
_pD3DDevice$ = 8					; size = 4
??0CDeathWindow@@QAE@PAUIDirect3DDevice9@@@Z PROC	; CDeathWindow::CDeathWindow, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0

; 20   : 	m_bEnabled			= TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1

; 21   : 	m_pD3DFont			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+303], 0

; 22   : 	m_pWeaponFont		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+307], 0

; 23   : 	m_pSprite			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+311], 0

; 24   : 
; 25   : 	m_pD3DDevice = pD3DDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pD3DDevice$[ebp]
	mov	DWORD PTR [eax+315], ecx

; 26   : 	
; 27   : 	CreateFonts();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateFonts@CDeathWindow@@QAEXXZ	; CDeathWindow::CreateFonts
$LN2@CDeathWind:

; 28   : 
; 29   : 	// Init the chat window lines to 0
; 30   : 	while(x!=MAX_DISP_DEATH_MESSAGES) {

	cmp	DWORD PTR _x$[ebp], 5
	je	SHORT $LN3@CDeathWind

; 31   : 		memset(&m_DeathWindowEntries[x],0,sizeof(DEATH_WINDOW_ENTRY));

	push	59					; 0000003bH
	push	0
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 32   : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 33   : 	}

	jmp	SHORT $LN2@CDeathWind
$LN3@CDeathWind:

; 34   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CDeathWindow@@QAE@PAUIDirect3DDevice9@@@Z ENDP	; CDeathWindow::CDeathWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ?SpriteIDForWeapon@CDeathWindow@@QAEPADE@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
_this$ = -8						; size = 4
_byteWeaponID$ = 8					; size = 1
?SpriteIDForWeapon@CDeathWindow@@QAEPADE@Z PROC		; CDeathWindow::SpriteIDForWeapon, COMDAT
; _this$ = ecx

; 246  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 	switch(byteWeaponID) {

	movzx	eax, BYTE PTR _byteWeaponID$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 201		; 000000c9H
	ja	$LN48@SpriteIDFo
	mov	ecx, DWORD PTR tv65[ebp]
	movzx	edx, BYTE PTR $LN52@SpriteIDFo[ecx]
	jmp	DWORD PTR $LN53@SpriteIDFo[edx*4]
$LN47@SpriteIDFo:

; 248  : 		case 0:
; 249  : 			return "%";

	mov	eax, OFFSET ??_C@_01FGNFDNOH@?$CF?$AA@
	jmp	$LN50@SpriteIDFo
$LN46@SpriteIDFo:

; 250  : 		case WEAPON_BRASSKNUCKLE: 
; 251  : 			return "B"; 

	mov	eax, OFFSET ??_C@_01HMGJMAIH@B?$AA@
	jmp	$LN50@SpriteIDFo
$LN45@SpriteIDFo:

; 252  : 		case WEAPON_GOLFCLUB: 
; 253  : 			return ">"; 

	mov	eax, OFFSET ??_C@_01PPODPGHN@?$DO?$AA@
	jmp	$LN50@SpriteIDFo
$LN44@SpriteIDFo:

; 254  : 		case WEAPON_NITESTICK: 
; 255  : 			return "("; 

	mov	eax, OFFSET ??_C@_01ODHLEDKK@?$CI?$AA@
	jmp	$LN50@SpriteIDFo
$LN43@SpriteIDFo:

; 256  : 		case WEAPON_KNIFE: 
; 257  : 			return "C";

	mov	eax, OFFSET ??_C@_01GFHCPBMG@C?$AA@
	jmp	$LN50@SpriteIDFo
$LN42@SpriteIDFo:

; 258  : 		case WEAPON_BAT: 
; 259  : 			return "?"; 

	mov	eax, OFFSET ??_C@_01OGPIMHDM@?$DP?$AA@
	jmp	$LN50@SpriteIDFo
$LN41@SpriteIDFo:

; 260  : 		case WEAPON_SHOVEL: 
; 261  : 			return "&"; 

	mov	eax, OFFSET ??_C@_01HNPIGOCE@?$CG?$AA@
	jmp	$LN50@SpriteIDFo
$LN40@SpriteIDFo:

; 262  : 		case WEAPON_POOLSTICK: 
; 263  : 			return "\""; 

	mov	eax, OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	jmp	$LN50@SpriteIDFo
$LN39@SpriteIDFo:

; 264  : 		case WEAPON_KATANA: 
; 265  : 			return "!"; 

	mov	eax, OFFSET ??_C@_01DCLJPIOD@?$CB?$AA@
	jmp	$LN50@SpriteIDFo
$LN38@SpriteIDFo:

; 266  : 		case WEAPON_CHAINSAW: 
; 267  : 			return "1"; 

	mov	eax, OFFSET ??_C@_01HIHLOKLC@1?$AA@
	jmp	$LN50@SpriteIDFo
$LN37@SpriteIDFo:

; 268  : 		case WEAPON_DILDO: 
; 269  : 			return "E"; 

	mov	eax, OFFSET ??_C@_01DDCIFGEA@E?$AA@
	jmp	$LN50@SpriteIDFo
$LN36@SpriteIDFo:

; 270  : 		case WEAPON_DILDO2: 
; 271  : 			return "E"; 

	mov	eax, OFFSET ??_C@_01DDCIFGEA@E?$AA@
	jmp	$LN50@SpriteIDFo
$LN35@SpriteIDFo:

; 272  : 		case WEAPON_VIBRATOR: 
; 273  : 			return "E"; 

	mov	eax, OFFSET ??_C@_01DDCIFGEA@E?$AA@
	jmp	$LN50@SpriteIDFo
$LN34@SpriteIDFo:

; 274  : 		case WEAPON_VIBRATOR2: 
; 275  : 			return "E"; 

	mov	eax, OFFSET ??_C@_01DDCIFGEA@E?$AA@
	jmp	$LN50@SpriteIDFo
$LN33@SpriteIDFo:

; 276  : 		case WEAPON_FLOWER: 
; 277  : 			return "$"; 

	mov	eax, OFFSET ??_C@_01EPMOAMKG@$?$AA@
	jmp	$LN50@SpriteIDFo
$LN32@SpriteIDFo:

; 278  : 		case WEAPON_CANE: 
; 279  : 			return "#"; 

	mov	eax, OFFSET ??_C@_01IPJKGB@?$CD?$AA@
	jmp	$LN50@SpriteIDFo
$LN31@SpriteIDFo:

; 280  : 		case WEAPON_GRENADE: 
; 281  : 			return "@"; 

	mov	eax, OFFSET ??_C@_01EOFPKCAF@?$EA?$AA@
	jmp	$LN50@SpriteIDFo
$LN30@SpriteIDFo:

; 282  : 		case WEAPON_TEARGAS: 
; 283  : 			return "D"; 

	mov	eax, OFFSET ??_C@_01CKDDGHAB@D?$AA@
	jmp	$LN50@SpriteIDFo
$LN29@SpriteIDFo:

; 284  : 		case WEAPON_COLT45: 
; 285  : 			return "6"; 

	mov	eax, OFFSET ??_C@_01DHDKHMHF@6?$AA@
	jmp	$LN50@SpriteIDFo
$LN28@SpriteIDFo:

; 286  : 		case WEAPON_SILENCED: 
; 287  : 			return "2"; 

	mov	eax, OFFSET ??_C@_01FDFGLJHB@2?$AA@
	jmp	$LN50@SpriteIDFo
$LN27@SpriteIDFo:

; 288  : 		case WEAPON_DEAGLE: 
; 289  : 			return "3"; 

	mov	eax, OFFSET ??_C@_01EKENIIDA@3?$AA@
	jmp	$LN50@SpriteIDFo
$LN26@SpriteIDFo:

; 290  : 		case WEAPON_SHOTGUN: 
; 291  : 			return "="; 

	mov	eax, OFFSET ??_C@_01NEMOKFLO@?$DN?$AA@
	jmp	$LN50@SpriteIDFo
$LN25@SpriteIDFo:

; 292  : 		case WEAPON_SAWEDOFF: 
; 293  : 			return "0"; 

	mov	eax, OFFSET ??_C@_01GBGANLPD@0?$AA@
	jmp	$LN50@SpriteIDFo
$LN24@SpriteIDFo:

; 294  : 		case WEAPON_SHOTGSPA:
; 295  : 			return "+"; 

	mov	eax, OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
	jmp	$LN50@SpriteIDFo
$LN23@SpriteIDFo:

; 296  : 		case WEAPON_UZI: 
; 297  : 			return "I"; 

	mov	eax, OFFSET ??_C@_01JPJNBJEM@I?$AA@
	jmp	$LN50@SpriteIDFo
$LN22@SpriteIDFo:

; 298  : 		case WEAPON_MP5: 
; 299  : 			return "8"; 

	mov	eax, OFFSET ??_C@_01KJLJFBPL@8?$AA@
	jmp	$LN50@SpriteIDFo
$LN21@SpriteIDFo:

; 300  : 		case WEAPON_AK47: 
; 301  : 			return "H"; 

	mov	eax, OFFSET ??_C@_01IGIGCIAN@H?$AA@
	jmp	$LN50@SpriteIDFo
$LN20@SpriteIDFo:

; 302  : 		case WEAPON_M4: 
; 303  : 			return "5";

	mov	eax, OFFSET ??_C@_01BMBHCPLG@5?$AA@
	jmp	$LN50@SpriteIDFo
$LN19@SpriteIDFo:

; 304  : 		case WEAPON_TEC9: 
; 305  : 			return "7";

	mov	eax, OFFSET ??_C@_01COCBENDE@7?$AA@
	jmp	$LN50@SpriteIDFo
$LN18@SpriteIDFo:

; 306  : 		case WEAPON_RIFLE: 
; 307  : 			return "."; 

	mov	eax, OFFSET ??_C@_01LFCBOECM@?4?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN17@SpriteIDFo:

; 308  : 		case WEAPON_SNIPER: 
; 309  : 			return "A"; 

	mov	eax, OFFSET ??_C@_01FHEEJDEE@A?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN16@SpriteIDFo:

; 310  : 		case WEAPON_ROCKETLAUNCHER: 
; 311  : 			return "4"; 

	mov	eax, OFFSET ??_C@_01FAMBOPH@4?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN15@SpriteIDFo:

; 312  : 		case WEAPON_HEATSEEKER: 
; 313  : 			return ")"; 

	mov	eax, OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN14@SpriteIDFo:

; 314  : 		case WEAPON_FLAMETHROWER: 
; 315  : 			return "P"; 

	mov	eax, OFFSET ??_C@_01EJNLAFE@P?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN13@SpriteIDFo:

; 316  : 		case WEAPON_MINIGUN: 
; 317  : 			return "F"; 

	mov	eax, OFFSET ??_C@_01BIAFAFID@F?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN12@SpriteIDFo:

; 318  : 		case WEAPON_SATCHEL: 
; 319  : 			return "<"; 

	mov	eax, OFFSET ??_C@_01MNNFJEPP@?$DM?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN11@SpriteIDFo:

; 320  : 		case WEAPON_BOMB: 
; 321  : 			return ";"; 

	mov	eax, OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN10@SpriteIDFo:

; 322  : 		case WEAPON_SPRAYCAN: 
; 323  : 			return "/"; 

	mov	eax, OFFSET ??_C@_01KMDKNFGN@?1?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN9@SpriteIDFo:

; 324  : 		case WEAPON_FIREEXTINGUISHER: 
; 325  : 			return ","; 

	mov	eax, OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN8@SpriteIDFo:

; 326  : 		case WEAPON_PARACHUTE: 
; 327  : 			return ":";

	mov	eax, OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN7@SpriteIDFo:

; 328  : 		case WEAPON_VEHICLE: 
; 329  : 			return "L";

	mov	eax, OFFSET ??_C@_01OCOKONAJ@L?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN6@SpriteIDFo:

; 330  : 		case WEAPON_DROWN: 
; 331  : 			return "J";

	mov	eax, OFFSET ??_C@_01LELAEKIP@J?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN5@SpriteIDFo:

; 332  : 		case WEAPON_HELIBLADES:
; 333  : 			return "R";

	mov	eax, OFFSET ??_C@_01DGKLNCNG@R?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN4@SpriteIDFo:

; 334  : 		case WEAPON_EXPLOSION:
; 335  : 			return "Q";

	mov	eax, OFFSET ??_C@_01BNIGIBBF@Q?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN3@SpriteIDFo:

; 336  : 		case WEAPON_COLLISION: 
; 337  : 			return "K";

	mov	eax, OFFSET ??_C@_01KNKLHLMO@K?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN2@SpriteIDFo:

; 338  : 		case SPECIAL_ENTRY_CONNECT:
; 339  : 			return "N";

	mov	eax, OFFSET ??_C@_01NANMIPIL@N?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN1@SpriteIDFo:

; 340  : 		case SPECIAL_ENTRY_DISCONNECT:
; 341  : 			return "N";

	mov	eax, OFFSET ??_C@_01NANMIPIL@N?$AA@
	jmp	SHORT $LN50@SpriteIDFo
$LN48@SpriteIDFo:

; 342  : 	}
; 343  : 	return "J";

	mov	eax, OFFSET ??_C@_01LELAEKIP@J?$AA@
$LN50@SpriteIDFo:

; 344  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN53@SpriteIDFo:
	DD	$LN47@SpriteIDFo
	DD	$LN46@SpriteIDFo
	DD	$LN45@SpriteIDFo
	DD	$LN44@SpriteIDFo
	DD	$LN43@SpriteIDFo
	DD	$LN42@SpriteIDFo
	DD	$LN41@SpriteIDFo
	DD	$LN40@SpriteIDFo
	DD	$LN39@SpriteIDFo
	DD	$LN38@SpriteIDFo
	DD	$LN37@SpriteIDFo
	DD	$LN36@SpriteIDFo
	DD	$LN35@SpriteIDFo
	DD	$LN34@SpriteIDFo
	DD	$LN33@SpriteIDFo
	DD	$LN32@SpriteIDFo
	DD	$LN31@SpriteIDFo
	DD	$LN30@SpriteIDFo
	DD	$LN29@SpriteIDFo
	DD	$LN28@SpriteIDFo
	DD	$LN27@SpriteIDFo
	DD	$LN26@SpriteIDFo
	DD	$LN25@SpriteIDFo
	DD	$LN24@SpriteIDFo
	DD	$LN23@SpriteIDFo
	DD	$LN22@SpriteIDFo
	DD	$LN21@SpriteIDFo
	DD	$LN20@SpriteIDFo
	DD	$LN19@SpriteIDFo
	DD	$LN18@SpriteIDFo
	DD	$LN17@SpriteIDFo
	DD	$LN16@SpriteIDFo
	DD	$LN15@SpriteIDFo
	DD	$LN14@SpriteIDFo
	DD	$LN13@SpriteIDFo
	DD	$LN12@SpriteIDFo
	DD	$LN11@SpriteIDFo
	DD	$LN10@SpriteIDFo
	DD	$LN9@SpriteIDFo
	DD	$LN8@SpriteIDFo
	DD	$LN7@SpriteIDFo
	DD	$LN5@SpriteIDFo
	DD	$LN4@SpriteIDFo
	DD	$LN6@SpriteIDFo
	DD	$LN3@SpriteIDFo
	DD	$LN2@SpriteIDFo
	DD	$LN1@SpriteIDFo
	DD	$LN48@SpriteIDFo
$LN52@SpriteIDFo:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	30					; 0000001eH
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	39					; 00000027H
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	40					; 00000028H
	DB	41					; 00000029H
	DB	42					; 0000002aH
	DB	47					; 0000002fH
	DB	43					; 0000002bH
	DB	44					; 0000002cH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	47					; 0000002fH
	DB	45					; 0000002dH
	DB	46					; 0000002eH
?SpriteIDForWeapon@CDeathWindow@@QAEPADE@Z ENDP		; CDeathWindow::SpriteIDForWeapon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ?RenderWeaponSprite@CDeathWindow@@QAEXPADUtagRECT@@K@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_WeaponChar$ = 8					; size = 4
_rect$ = 12						; size = 16
_dwColor$ = 28						; size = 4
?RenderWeaponSprite@CDeathWindow@@QAEXPADUtagRECT@@K@Z PROC ; CDeathWindow::RenderWeaponSprite, COMDAT
; _this$ = ecx

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 	/*
; 234  : 	rect.top += 1;
; 235  : 	rect.left -= 1;
; 236  : 	m_pWeaponFont->DrawText(m_pSprite,"G",-1,&rect,DT_NOCLIP|DT_LEFT,dwBackColor);
; 237  : 	rect.top -= 1;
; 238  : 	rect.left += 1;*/
; 239  : 
; 240  : 	m_pWeaponFont->DrawText(m_pSprite,WeaponChar,-1,&rect,DT_NOCLIP|DT_LEFT,dwColor);	

	mov	esi, esp
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _rect$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _WeaponChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+307]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+307]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 241  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?RenderWeaponSprite@CDeathWindow@@QAEXPADUtagRECT@@K@Z ENDP ; CDeathWindow::RenderWeaponSprite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ?RenderText@CDeathWindow@@QAEXPADUtagRECT@@KK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
_rect$ = 12						; size = 16
_dwColor$ = 28						; size = 4
_dwParams$ = 32						; size = 4
?RenderText@CDeathWindow@@QAEXPADUtagRECT@@KK@Z PROC	; CDeathWindow::RenderText, COMDAT
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  : 	// bottom right shadow
; 220  :     rect.left += 1;

	mov	eax, DWORD PTR _rect$[ebp]
	add	eax, 1
	mov	DWORD PTR _rect$[ebp], eax

; 221  : 	rect.top  += 1;

	mov	eax, DWORD PTR _rect$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _rect$[ebp+4], eax

; 222  : 	m_pD3DFont->DrawText(m_pSprite,sz,-1,&rect,DT_NOCLIP|dwParams,0xFF000000);

	mov	esi, esp
	push	-16777216				; ff000000H
	mov	eax, DWORD PTR _dwParams$[ebp]
	or	eax, 256				; 00000100H
	push	eax
	lea	ecx, DWORD PTR _rect$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _sz$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+303]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+303]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 223  : 	rect.left -= 1;

	mov	eax, DWORD PTR _rect$[ebp]
	sub	eax, 1
	mov	DWORD PTR _rect$[ebp], eax

; 224  : 	rect.top -= 1;

	mov	eax, DWORD PTR _rect$[ebp+4]
	sub	eax, 1
	mov	DWORD PTR _rect$[ebp+4], eax

; 225  : 
; 226  : 	m_pD3DFont->DrawText(m_pSprite,sz,-1,&rect,DT_NOCLIP|dwParams,dwColor);	

	mov	esi, esp
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwParams$[ebp]
	or	ecx, 256				; 00000100H
	push	ecx
	lea	edx, DWORD PTR _rect$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+311]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+303]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 227  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?RenderText@CDeathWindow@@QAEXPADUtagRECT@@KK@Z ENDP	; CDeathWindow::RenderText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ?AddMessage@CDeathWindow@@QAEXPAD0KKE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szKiller$ = 8						; size = 4
_szKillee$ = 12						; size = 4
_dwKillerColor$ = 16					; size = 4
_dwKilleeColor$ = 20					; size = 4
_byteWeaponID$ = 24					; size = 1
?AddMessage@CDeathWindow@@QAEXPAD0KKE@Z PROC		; CDeathWindow::AddMessage, COMDAT
; _this$ = ecx

; 176  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 	//pChatWindow->AddDebugMessage("0x%X %u 0x%X\n",szKiller,byteWeaponID,szKillee);
; 178  : 	AddToDeathWindowBuffer(szKiller,szKillee,dwKillerColor,dwKilleeColor,byteWeaponID);

	movzx	eax, BYTE PTR _byteWeaponID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwKilleeColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwKillerColor$[ebp]
	push	edx
	mov	eax, DWORD PTR _szKillee$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szKiller$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToDeathWindowBuffer@CDeathWindow@@AAEXPAD0KKE@Z ; CDeathWindow::AddToDeathWindowBuffer

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?AddMessage@CDeathWindow@@QAEXPAD0KKE@Z ENDP		; CDeathWindow::AddMessage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ?Draw@CDeathWindow@@QAEXXZ
_TEXT	SEGMENT
_dwColor$1 = -108					; size = 4
_x$ = -96						; size = 4
_iHorizontalBase$ = -84					; size = 4
_iVerticalBase$ = -72					; size = 4
_rectNickSize$ = -60					; size = 16
_rect$ = -36						; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Draw@CDeathWindow@@QAEXXZ PROC				; CDeathWindow::Draw, COMDAT
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	RECT rect;
; 82   : 	RECT rectNickSize;
; 83   : 	int iVerticalBase = (int)(pGame->GetScreenHeight() * 0.3f);

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetScreenHeight@CGame@@QAEHXZ		; CGame::GetScreenHeight
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3e99999a
	cvttss2si eax, xmm0
	mov	DWORD PTR _iVerticalBase$[ebp], eax

; 84   : 	int iHorizontalBase = (int)(pGame->GetScreenWidth() * 0.75f);

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetScreenWidth@CGame@@QAEHXZ		; CGame::GetScreenWidth
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f400000
	cvttss2si eax, xmm0
	mov	DWORD PTR _iHorizontalBase$[ebp], eax

; 85   : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0

; 86   : 	
; 87   : 	// shift a bit for 640x480
; 88   : 	if(pGame->GetScreenWidth() <= 800) {

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetScreenWidth@CGame@@QAEHXZ		; CGame::GetScreenWidth
	cmp	eax, 800				; 00000320H
	jg	SHORT $LN10@Draw

; 89   : 		iHorizontalBase = (int)(pGame->GetScreenWidth() * 0.65f);

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetScreenWidth@CGame@@QAEHXZ		; CGame::GetScreenWidth
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f266666
	cvttss2si eax, xmm0
	mov	DWORD PTR _iHorizontalBase$[ebp], eax
$LN10@Draw:

; 90   : 	}
; 91   : 		
; 92   : 	rect.top		= iVerticalBase;

	mov	eax, DWORD PTR _iVerticalBase$[ebp]
	mov	DWORD PTR _rect$[ebp+4], eax

; 93   : 	rect.left		= iHorizontalBase;

	mov	eax, DWORD PTR _iHorizontalBase$[ebp]
	mov	DWORD PTR _rect$[ebp], eax

; 94   : 	rect.bottom		= rect.top + 30;

	mov	eax, DWORD PTR _rect$[ebp+4]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _rect$[ebp+12], eax

; 95   : 	rect.right		= rect.left + 60;

	mov	eax, DWORD PTR _rect$[ebp]
	add	eax, 60					; 0000003cH
	mov	DWORD PTR _rect$[ebp+8], eax

; 96   : 
; 97   : 	if(m_pD3DFont && m_pWeaponFont && m_bEnabled)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+303], 0
	je	$LN9@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+307], 0
	je	$LN9@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN9@Draw

; 98   : 	{
; 99   : 		m_pSprite->Begin(D3DXSPRITE_ALPHABLEND | D3DXSPRITE_SORT_TEXTURE);

	mov	esi, esp
	push	48					; 00000030H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+311]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@Draw:

; 100  : 
; 101  : 		while(x!=(MAX_DISP_DEATH_MESSAGES)) {

	cmp	DWORD PTR _x$[ebp], 5
	je	$LN7@Draw

; 102  : 
; 103  : 			if(strlen(m_DeathWindowEntries[x].szKiller) && strlen(m_DeathWindowEntries[x].szKillee))

	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_strlen
	add	esp, 4
	test	eax, eax
	je	$LN6@Draw
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+29]
	push	edx
	call	_strlen
	add	esp, 4
	test	eax, eax
	je	$LN6@Draw

; 104  : 			{
; 105  : 				// Get the rect length of the killee's nick so we can right justify.
; 106  : 				m_pD3DFont->DrawText(0,m_DeathWindowEntries[x].szKiller,-1,
; 107  : 					&rectNickSize,DT_CALCRECT|DT_LEFT,0xFFFFFFFF);

	mov	esi, esp
	push	-1
	push	1024					; 00000400H
	lea	eax, DWORD PTR _rectNickSize$[ebp]
	push	eax
	push	-1
	imul	ecx, DWORD PTR _x$[ebp], 59
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+303]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 108  : 
; 109  : 				// Move in so it's right justified. (DT_RIGHT fucks the text)
; 110  : 				rect.left += m_iLongestNickLength - (rectNickSize.right - rectNickSize.left);

	mov	eax, DWORD PTR _rectNickSize$[ebp+8]
	sub	eax, DWORD PTR _rectNickSize$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+299]
	sub	edx, eax
	add	edx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR _rect$[ebp], edx

; 111  : 				
; 112  : 				RenderText(m_DeathWindowEntries[x].szKiller,rect,
; 113  : 					m_DeathWindowEntries[x].dwKillerColor,DT_LEFT);

	push	0
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+54]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderText@CDeathWindow@@QAEXPADUtagRECT@@KK@Z ; CDeathWindow::RenderText

; 114  : 
; 115  : 				rect.left = iHorizontalBase + m_iLongestNickLength + 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+299]
	mov	edx, DWORD PTR _iHorizontalBase$[ebp]
	lea	eax, DWORD PTR [edx+ecx+5]
	mov	DWORD PTR _rect$[ebp], eax

; 116  : 				rect.right = rect.left + 30;

	mov	eax, DWORD PTR _rect$[ebp]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _rect$[ebp+8], eax

; 117  : 
; 118  : 				rect.top -= 3;

	mov	eax, DWORD PTR _rect$[ebp+4]
	sub	eax, 3
	mov	DWORD PTR _rect$[ebp+4], eax

; 119  : 				RenderWeaponSprite(SpriteIDForWeapon(m_DeathWindowEntries[x].byteWeaponType),
; 120  : 					rect,0xFFFFFFFF);

	push	-1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+62]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SpriteIDForWeapon@CDeathWindow@@QAEPADE@Z ; CDeathWindow::SpriteIDForWeapon
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderWeaponSprite@CDeathWindow@@QAEXPADUtagRECT@@K@Z ; CDeathWindow::RenderWeaponSprite

; 121  : 				rect.top += 3;

	mov	eax, DWORD PTR _rect$[ebp+4]
	add	eax, 3
	mov	DWORD PTR _rect$[ebp+4], eax

; 122  : 				
; 123  : 				rect.left += 30;

	mov	eax, DWORD PTR _rect$[ebp]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _rect$[ebp], eax

; 124  : 				rect.right += 30;

	mov	eax, DWORD PTR _rect$[ebp+8]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _rect$[ebp+8], eax

; 125  : 
; 126  : 				RenderText(m_DeathWindowEntries[x].szKillee,rect,m_DeathWindowEntries[x].dwKilleeColor,DT_LEFT);

	push	0
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+58]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+29]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderText@CDeathWindow@@QAEXPADUtagRECT@@KK@Z ; CDeathWindow::RenderText
	jmp	$LN4@Draw
$LN6@Draw:

; 127  : 			}
; 128  : 			else if(!strlen(m_DeathWindowEntries[x].szKiller) && strlen(m_DeathWindowEntries[x].szKillee))

	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_strlen
	add	esp, 4
	test	eax, eax
	jne	$LN4@Draw
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+29]
	push	edx
	call	_strlen
	add	esp, 4
	test	eax, eax
	je	$LN4@Draw

; 129  : 			{
; 130  : 				DWORD dwColor = 0xFFFFFFFF;

	mov	DWORD PTR _dwColor$1[ebp], -1

; 131  : 
; 132  : 				// Get the rect length of the killee's nick so we can right justify.
; 133  : 				m_pD3DFont->DrawText(0,m_DeathWindowEntries[x].szKillee,-1,
; 134  : 					&rectNickSize,DT_CALCRECT|DT_LEFT,0xFF000000);

	mov	esi, esp
	push	-16777216				; ff000000H
	push	1024					; 00000400H
	lea	eax, DWORD PTR _rectNickSize$[ebp]
	push	eax
	push	-1
	imul	ecx, DWORD PTR _x$[ebp], 59
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+29]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+303]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+303]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 135  : 
; 136  : 				// Move in so it's right justified. (DT_RIGHT fucks the text)
; 137  : 				rect.left += m_iLongestNickLength - (rectNickSize.right - rectNickSize.left);

	mov	eax, DWORD PTR _rectNickSize$[ebp+8]
	sub	eax, DWORD PTR _rectNickSize$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+299]
	sub	edx, eax
	add	edx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR _rect$[ebp], edx

; 138  : 				
; 139  : 				RenderText(m_DeathWindowEntries[x].szKillee,rect,
; 140  : 					m_DeathWindowEntries[x].dwKilleeColor,DT_LEFT);

	push	0
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax+58]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+29]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderText@CDeathWindow@@QAEXPADUtagRECT@@KK@Z ; CDeathWindow::RenderText

; 141  : 
; 142  : 				rect.left = iHorizontalBase + m_iLongestNickLength + 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+299]
	mov	edx, DWORD PTR _iHorizontalBase$[ebp]
	lea	eax, DWORD PTR [edx+ecx+5]
	mov	DWORD PTR _rect$[ebp], eax

; 143  : 				rect.right = rect.left + 30;

	mov	eax, DWORD PTR _rect$[ebp]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _rect$[ebp+8], eax

; 144  : 
; 145  : 				if(m_DeathWindowEntries[x].byteWeaponType == SPECIAL_ENTRY_CONNECT) {

	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+62]
	cmp	edx, 200				; 000000c8H
	jne	SHORT $LN3@Draw

; 146  : 					dwColor = 0xFF000044;

	mov	DWORD PTR _dwColor$1[ebp], -16777148	; ff000044H
	jmp	SHORT $LN1@Draw
$LN3@Draw:

; 147  : 				}				
; 148  : 				else if(m_DeathWindowEntries[x].byteWeaponType == SPECIAL_ENTRY_DISCONNECT) {

	imul	eax, DWORD PTR _x$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+62]
	cmp	edx, 201				; 000000c9H
	jne	SHORT $LN1@Draw

; 149  : 					dwColor = 0xFF440000;

	mov	DWORD PTR _dwColor$1[ebp], -12320768	; ff440000H
$LN1@Draw:

; 150  : 				}
; 151  : 
; 152  : 				rect.top -= 3;

	mov	eax, DWORD PTR _rect$[ebp+4]
	sub	eax, 3
	mov	DWORD PTR _rect$[ebp+4], eax

; 153  : 				RenderWeaponSprite(SpriteIDForWeapon(m_DeathWindowEntries[x].byteWeaponType),rect,dwColor);

	mov	eax, DWORD PTR _dwColor$1[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	imul	ecx, DWORD PTR _x$[ebp], 59
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+62]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SpriteIDForWeapon@CDeathWindow@@QAEPADE@Z ; CDeathWindow::SpriteIDForWeapon
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderWeaponSprite@CDeathWindow@@QAEXPADUtagRECT@@K@Z ; CDeathWindow::RenderWeaponSprite

; 154  : 				rect.top += 3;

	mov	eax, DWORD PTR _rect$[ebp+4]
	add	eax, 3
	mov	DWORD PTR _rect$[ebp+4], eax
$LN4@Draw:

; 155  : 			}
; 156  : 			
; 157  : 			rect.top += 30;

	mov	eax, DWORD PTR _rect$[ebp+4]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _rect$[ebp+4], eax

; 158  : 			rect.bottom += 30;	

	mov	eax, DWORD PTR _rect$[ebp+12]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _rect$[ebp+12], eax

; 159  : 			rect.left = iHorizontalBase;

	mov	eax, DWORD PTR _iHorizontalBase$[ebp]
	mov	DWORD PTR _rect$[ebp], eax

; 160  : 			rect.right = rect.left + 60;

	mov	eax, DWORD PTR _rect$[ebp]
	add	eax, 60					; 0000003cH
	mov	DWORD PTR _rect$[ebp+8], eax

; 161  : 
; 162  : 			x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 163  : 		}

	jmp	$LN8@Draw
$LN7@Draw:

; 164  : 
; 165  : 		m_pSprite->End();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+311]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+311]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@Draw:

; 166  : 	}
; 167  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@Draw:
	DD	2
	DD	$LN15@Draw
$LN15@Draw:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN13@Draw
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN14@Draw
$LN14@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	78					; 0000004eH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN13@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
?Draw@CDeathWindow@@QAEXXZ ENDP				; CDeathWindow::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ?AddToDeathWindowBuffer@CDeathWindow@@AAEXPAD0KKE@Z
_TEXT	SEGMENT
_n$ = -20						; size = 4
_this$ = -8						; size = 4
_szKiller$ = 8						; size = 4
_szKillee$ = 12						; size = 4
_dwKillerColor$ = 16					; size = 4
_dwKilleeColor$ = 20					; size = 4
_byteWeaponID$ = 24					; size = 1
?AddToDeathWindowBuffer@CDeathWindow@@AAEXPAD0KKE@Z PROC ; CDeathWindow::AddToDeathWindowBuffer, COMDAT
; _this$ = ecx

; 188  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 189  : 	int n = MAX_DISP_DEATH_MESSAGES-1;

	mov	DWORD PTR _n$[ebp], 4

; 190  : 
; 191  : 	PushBack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushBack@CDeathWindow@@AAEXXZ		; CDeathWindow::PushBack

; 192  : 
; 193  : 	m_DeathWindowEntries[n].byteWeaponType = byteWeaponID;

	imul	eax, DWORD PTR _n$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _byteWeaponID$[ebp]
	mov	BYTE PTR [ecx+eax+62], dl

; 194  : 	m_DeathWindowEntries[n].dwKilleeColor = dwKilleeColor;

	imul	eax, DWORD PTR _n$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwKilleeColor$[ebp]
	mov	DWORD PTR [ecx+eax+58], edx

; 195  : 	m_DeathWindowEntries[n].dwKillerColor = dwKillerColor;

	imul	eax, DWORD PTR _n$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dwKillerColor$[ebp]
	mov	DWORD PTR [ecx+eax+54], edx

; 196  : 
; 197  : 	if(szKiller) strcpy(m_DeathWindowEntries[n].szKiller,szKiller);

	cmp	DWORD PTR _szKiller$[ebp], 0
	je	SHORT $LN4@AddToDeath
	mov	eax, DWORD PTR _szKiller$[ebp]
	push	eax
	imul	ecx, DWORD PTR _n$[ebp], 59
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	call	_strcpy
	add	esp, 8
	jmp	SHORT $LN3@AddToDeath
$LN4@AddToDeath:

; 198  : 	else m_DeathWindowEntries[n].szKiller[0] = '\0';

	imul	eax, DWORD PTR _n$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR [edx+ecx], 0
$LN3@AddToDeath:

; 199  : 
; 200  : 	if(szKillee) strcpy(m_DeathWindowEntries[n].szKillee,szKillee);	

	cmp	DWORD PTR _szKillee$[ebp], 0
	je	SHORT $LN2@AddToDeath
	mov	eax, DWORD PTR _szKillee$[ebp]
	push	eax
	imul	ecx, DWORD PTR _n$[ebp], 59
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+29]
	push	eax
	call	_strcpy
	add	esp, 8
	jmp	SHORT $LN5@AddToDeath
$LN2@AddToDeath:

; 201  : 	else m_DeathWindowEntries[n].szKillee[0] = '\0';

	imul	eax, DWORD PTR _n$[ebp], 59
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR [edx+ecx+25], 0
$LN5@AddToDeath:

; 202  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?AddToDeathWindowBuffer@CDeathWindow@@AAEXPAD0KKE@Z ENDP ; CDeathWindow::AddToDeathWindowBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\deathwindow.cpp
;	COMDAT ?PushBack@CDeathWindow@@AAEXXZ
_TEXT	SEGMENT
_x$ = -20						; size = 4
_this$ = -8						; size = 4
?PushBack@CDeathWindow@@AAEXXZ PROC			; CDeathWindow::PushBack, COMDAT
; _this$ = ecx

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN2@PushBack:

; 209  : 	while(x!=(MAX_DISP_DEATH_MESSAGES - 1)) {

	cmp	DWORD PTR _x$[ebp], 4
	je	SHORT $LN3@PushBack

; 210  : 		memcpy(&m_DeathWindowEntries[x],&m_DeathWindowEntries[x+1],sizeof(DEATH_WINDOW_ENTRY));

	push	59					; 0000003bH
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	imul	ecx, eax, 59
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	imul	ecx, DWORD PTR _x$[ebp], 59
	mov	edx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 211  : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 212  : 	}

	jmp	SHORT $LN2@PushBack
$LN3@PushBack:

; 213  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PushBack@CDeathWindow@@AAEXXZ ENDP			; CDeathWindow::PushBack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetScreenHeight@CGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetScreenHeight@CGame@@QAEHXZ PROC			; CGame::GetScreenHeight, COMDAT
; _this$ = ecx

; 153  : 	int GetScreenHeight() { return *(int*)0xC17048; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ds:12677192
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetScreenHeight@CGame@@QAEHXZ ENDP			; CGame::GetScreenHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetScreenWidth@CGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetScreenWidth@CGame@@QAEHXZ PROC			; CGame::GetScreenWidth, COMDAT
; _this$ = ecx

; 152  : 	int GetScreenWidth() { return *(int*)0xC17044; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ds:12677188
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetScreenWidth@CGame@@QAEHXZ ENDP			; CGame::GetScreenWidth
_TEXT	ENDS
END
