; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\archive\ArchiveFS.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?ms_dwHashInit@CArchiveFS@@0KA			; CArchiveFS::ms_dwHashInit
_DATA	SEGMENT
?ms_dwHashInit@CArchiveFS@@0KA DD 0ccf225cH		; CArchiveFS::ms_dwHashInit
_DATA	ENDS
CONST	SEGMENT
_RSA_PUB_KEY DB	0acH
	DB	0a8H
	DB	0aaH
	DB	0aaH
	DB	0aaH
	DB	08eH
	DB	0aaH
	DB	0aaH
	DB	0f8H
	DB	0f9H
	DB	0ebH
	DB	09bH
	DB	0aaH
	DB	0aeH
	DB	0aaH
	DB	0aaH
	DB	0abH
	DB	0aaH
	DB	0abH
	DB	0aaH
	DB	065H
	DB	0ccH
	DB	02aH
	DB	0c9H
	DB	03eH
	DB	04eH
	DB	07aH
	DB	051H
	DB	0edH
	DB	0c9H
	DB	029H
	DB	0f7H
	DB	09cH
	DB	0b2H
	DB	0b0H
	DB	063H
	DB	0fdH
	DB	043H
	DB	06cH
	DB	0aeH
	DB	099H
	DB	0d7H
	DB	099H
	DB	041H
	DB	01H
	DB	09aH
	DB	0e9H
	DB	049H
	DB	056H
	DB	097H
	DB	072H
	DB	082H
	DB	079H
	DB	0d5H
	DB	04fH
	DB	0bcH
	DB	06bH
	DB	0b0H
	DB	05cH
	DB	09cH
	DB	0f0H
	DB	0c9H
	DB	01fH
	DB	017H
	DB	03bH
	DB	0beH
	DB	021H
	DB	05dH
	DB	074H
	DB	0b8H
	DB	029H
	DB	08dH
	DB	0b0H
	DB	07bH
	DB	02dH
	DB	0e2H
	DB	083H
	DB	025H
	DB	0bH
	DB	06eH
	DB	028H
	DB	04eH
	DB	04eH
	DB	099H
	DB	066H
	DB	0e0H
	DB	09fH
	DB	058H
	DB	09H
	DB	0d6H
	DB	0daH
	DB	0e3H
	DB	07bH
	DB	086H
	DB	041H
	DB	0cdH
	DB	0ffH
	DB	0bcH
	DB	037H
	DB	05bH
	DB	0d8H
	DB	049H
	DB	010H
	DB	01aH
	DB	0dH
	DB	0c2H
	DB	064H
	DB	035H
	DB	071H
	DB	09aH
	DB	07cH
	DB	032H
	DB	0a9H
	DB	059H
	DB	045H
	DB	07eH
	DB	051H
	DB	038H
	DB	0e4H
	DB	0bH
	DB	053H
	DB	04dH
	DB	0afH
	DB	087H
	DB	0a0H
	DB	048H
	DB	0d5H
	DB	054H
	DB	04cH
	DB	06cH
	DB	08eH
	DB	0a4H
	DB	0d7H
	DB	05bH
	DB	0e1H
	DB	0e0H
	DB	020H
	DB	076H
	DB	010H
	DB	04cH
	DB	075H
	DB	089H
	DB	06aH
	DB	02aH
	DB	044H
	DB	0f5H
	DB	0abH
	DB	01dH
_TEA_KEY DB	058H
	DB	047H
	DB	01fH
	DB	02bH
	DB	051H
	DB	04cH
	DB	0b6H
	DB	02aH
	DB	0a1H
	DB	09fH
	DB	099H
	DB	024H
	DB	078H
	DB	0b1H
	DB	032H
	DB	02dH
CONST	ENDS
PUBLIC	??0CAbstractStream@@QAE@XZ			; CAbstractStream::CAbstractStream
PUBLIC	??1CAbstractStream@@UAE@XZ			; CAbstractStream::~CAbstractStream
PUBLIC	?Read@CAbstractStream@@UAEIPAXHH@Z		; CAbstractStream::Read
PUBLIC	?Write@CAbstractStream@@UAEIPBXHH@Z		; CAbstractStream::Write
PUBLIC	?Seek@CAbstractStream@@UAEXH@Z			; CAbstractStream::Seek
PUBLIC	??_GCAbstractStream@@UAEPAXI@Z			; CAbstractStream::`scalar deleting destructor'
PUBLIC	??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z	; CFileStream::CFileStream
PUBLIC	??1CFileStream@@UAE@XZ				; CFileStream::~CFileStream
PUBLIC	?Open@CFileStream@@UAE_NPBDW4eType@1@W4eMode@1@@Z ; CFileStream::Open
PUBLIC	?IsOpen@CFileStream@@UAE_NXZ			; CFileStream::IsOpen
PUBLIC	?Close@CFileStream@@UAEXXZ			; CFileStream::Close
PUBLIC	?Read@CFileStream@@UAEIPAXH@Z			; CFileStream::Read
PUBLIC	?Read@CFileStream@@UAEIPAXHH@Z			; CFileStream::Read
PUBLIC	?Write@CFileStream@@UAEIPBXH@Z			; CFileStream::Write
PUBLIC	?Write@CFileStream@@UAEIPBXHH@Z			; CFileStream::Write
PUBLIC	?Seek@CFileStream@@UAEXHW4eSeek@CAbstractStream@@@Z ; CFileStream::Seek
PUBLIC	?Tell@CFileStream@@UAEIXZ			; CFileStream::Tell
PUBLIC	??_GCFileStream@@UAEPAXI@Z			; CFileStream::`scalar deleting destructor'
PUBLIC	??0CMemoryStream@@QAE@PAEI_N@Z			; CMemoryStream::CMemoryStream
PUBLIC	??1CMemoryStream@@UAE@XZ			; CMemoryStream::~CMemoryStream
PUBLIC	?Read@CMemoryStream@@UAEIPAXH@Z			; CMemoryStream::Read
PUBLIC	?Write@CMemoryStream@@UAEIPBXH@Z		; CMemoryStream::Write
PUBLIC	?Seek@CMemoryStream@@UAEXHW4eSeek@CAbstractStream@@@Z ; CMemoryStream::Seek
PUBLIC	?Tell@CMemoryStream@@UAEIXZ			; CMemoryStream::Tell
PUBLIC	??_GCMemoryStream@@UAEPAXI@Z			; CMemoryStream::`scalar deleting destructor'
PUBLIC	??0_SAA_FILE_HEADER@@QAE@XZ			; _SAA_FILE_HEADER::_SAA_FILE_HEADER
PUBLIC	?SizeOf@_SAA_FILE_HEADER@@QAEKXZ		; _SAA_FILE_HEADER::SizeOf
PUBLIC	?VerifyIdentifier@_SAA_FILE_HEADER@@QAE_NXZ	; _SAA_FILE_HEADER::VerifyIdentifier
PUBLIC	?XorV2Identifier@_SAA_FILE_HEADER@@QAEXXZ	; _SAA_FILE_HEADER::XorV2Identifier
PUBLIC	?Read@_SAA_FILE_HEADER@@QAEXPAVCAbstractStream@@@Z ; _SAA_FILE_HEADER::Read
PUBLIC	??0_AFS_ENTRYBT_NODE@@QAE@XZ			; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE
PUBLIC	??0_AFS_ENTRYBT_NODE@@QAE@PAU_SAA_ENTRY@@@Z	; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE
PUBLIC	?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z ; _AFS_ENTRYBT_NODE::AddEntry
PUBLIC	?FindEntry@_AFS_ENTRYBT_NODE@@QAEPAU1@K@Z	; _AFS_ENTRYBT_NODE::FindEntry
PUBLIC	??1_AFS_ENTRYBT_NODE@@QAE@XZ			; _AFS_ENTRYBT_NODE::~_AFS_ENTRYBT_NODE
PUBLIC	??_G_AFS_ENTRYBT_NODE@@QAEPAXI@Z		; _AFS_ENTRYBT_NODE::`scalar deleting destructor'
PUBLIC	?LoadEntries@CArchiveFS@@AAEXXZ			; CArchiveFS::LoadEntries
PUBLIC	?HashString@CArchiveFS@@AAEKPAD@Z		; CArchiveFS::HashString
PUBLIC	??0CArchiveFS@@QAE@XZ				; CArchiveFS::CArchiveFS
PUBLIC	??0CArchiveFS@@QAE@KK@Z				; CArchiveFS::CArchiveFS
PUBLIC	??1CArchiveFS@@UAE@XZ				; CArchiveFS::~CArchiveFS
PUBLIC	?Load@CArchiveFS@@UAE_NPAD@Z			; CArchiveFS::Load
PUBLIC	?Load@CArchiveFS@@UAE_NPAEK@Z			; CArchiveFS::Load
PUBLIC	?Unload@CArchiveFS@@UAEXXZ			; CArchiveFS::Unload
PUBLIC	?GetFileIndex@CArchiveFS@@UAEKK@Z		; CArchiveFS::GetFileIndex
PUBLIC	?GetFileIndex@CArchiveFS@@UAEKPAD@Z		; CArchiveFS::GetFileIndex
PUBLIC	?GetFileSize@CArchiveFS@@UAEKK@Z		; CArchiveFS::GetFileSize
PUBLIC	?GetFileData@CArchiveFS@@UAEPAEK@Z		; CArchiveFS::GetFileData
PUBLIC	?UnloadData@CArchiveFS@@UAEXK@Z			; CArchiveFS::UnloadData
PUBLIC	??_GCArchiveFS@@UAEPAXI@Z			; CArchiveFS::`scalar deleting destructor'
PUBLIC	??_7CAbstractStream@@6B@			; CAbstractStream::`vftable'
PUBLIC	??_7CFileStream@@6B@				; CFileStream::`vftable'
PUBLIC	??_7CMemoryStream@@6B@				; CMemoryStream::`vftable'
PUBLIC	??_7CArchiveFS@@6B@				; CArchiveFS::`vftable'
PUBLIC	??_C@_0CC@IAJGLJEL@ArchiveFS?3?5Requested?5file?3?5?$CFs?4?4?4@ ; `string'
PUBLIC	??_R4CAbstractStream@@6B@			; CAbstractStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAbstractStream@@@8			; CAbstractStream `RTTI Type Descriptor'
PUBLIC	??_R3CAbstractStream@@8				; CAbstractStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAbstractStream@@8				; CAbstractStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAbstractStream@@8		; CAbstractStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFileStream@@6B@				; CFileStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFileStream@@@8				; CFileStream `RTTI Type Descriptor'
PUBLIC	??_R3CFileStream@@8				; CFileStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFileStream@@8				; CFileStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFileStream@@8			; CFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CMemoryStream@@6B@				; CMemoryStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMemoryStream@@@8			; CMemoryStream `RTTI Type Descriptor'
PUBLIC	??_R3CMemoryStream@@8				; CMemoryStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMemoryStream@@8				; CMemoryStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMemoryStream@@8			; CMemoryStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CArchiveFS@@6B@				; CArchiveFS::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCArchiveFS@@@8				; CArchiveFS `RTTI Type Descriptor'
PUBLIC	??_R3CArchiveFS@@8				; CArchiveFS::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CArchiveFS@@8				; CArchiveFS::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CArchiveFS@@8			; CArchiveFS::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CFileSystem@@8			; CFileSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCFileSystem@@@8				; CFileSystem `RTTI Type Descriptor'
PUBLIC	??_R3CFileSystem@@8				; CFileSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFileSystem@@8				; CFileSystem::`RTTI Base Class Array'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__strlwr:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_fwrite:PROC
EXTRN	_sprintf:PROC
EXTRN	??_ECAbstractStream@@UAEPAXI@Z:PROC		; CAbstractStream::`vector deleting destructor'
EXTRN	??_ECFileStream@@UAEPAXI@Z:PROC			; CFileStream::`vector deleting destructor'
EXTRN	??_ECMemoryStream@@UAEPAXI@Z:PROC		; CMemoryStream::`vector deleting destructor'
EXTRN	??0CFileSystem@@QAE@XZ:PROC			; CFileSystem::CFileSystem
EXTRN	??1CFileSystem@@UAE@XZ:PROC			; CFileSystem::~CFileSystem
EXTRN	??_ECArchiveFS@@UAEPAXI@Z:PROC			; CArchiveFS::`vector deleting destructor'
EXTRN	??0CCryptoContext@@QAE@XZ:PROC			; CCryptoContext::CCryptoContext
EXTRN	??1CCryptoContext@@QAE@XZ:PROC			; CCryptoContext::~CCryptoContext
EXTRN	??0CKeyPair@@QAE@PAVCCryptoContext@@@Z:PROC	; CKeyPair::CKeyPair
EXTRN	??1CKeyPair@@QAE@XZ:PROC			; CKeyPair::~CKeyPair
EXTRN	?LoadFromMemory@CKeyPair@@QAEXKPAEE@Z:PROC	; CKeyPair::LoadFromMemory
EXTRN	??0CHasher@@QAE@PAVCCryptoContext@@@Z:PROC	; CHasher::CHasher
EXTRN	??1CHasher@@QAE@XZ:PROC				; CHasher::~CHasher
EXTRN	?AddData@CHasher@@QAEXKPAE@Z:PROC		; CHasher::AddData
EXTRN	??0CSigner@@QAE@XZ:PROC				; CSigner::CSigner
EXTRN	??1CSigner@@QAE@XZ:PROC				; CSigner::~CSigner
EXTRN	?SetSignature@CSigner@@QAEXKPAE@Z:PROC		; CSigner::SetSignature
EXTRN	?VerifySignature@CSigner@@QAEHPAVCHasher@@PAVCKeyPair@@@Z:PROC ; CSigner::VerifySignature
EXTRN	??0CTinyEncrypt@@QAE@XZ:PROC			; CTinyEncrypt::CTinyEncrypt
EXTRN	??1CTinyEncrypt@@QAE@XZ:PROC			; CTinyEncrypt::~CTinyEncrypt
EXTRN	?SetKey@CTinyEncrypt@@QAEXPAEE@Z:PROC		; CTinyEncrypt::SetKey
EXTRN	?DecryptData@CTinyEncrypt@@QAEXKPAE@Z:PROC	; CTinyEncrypt::DecryptData
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R2CFileSystem@@8
rdata$r	SEGMENT
??_R2CFileSystem@@8 DD FLAT:??_R1A@?0A@EA@CFileSystem@@8 ; CFileSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFileSystem@@8
rdata$r	SEGMENT
??_R3CFileSystem@@8 DD 00H				; CFileSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFileSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFileSystem@@@8
data$r	SEGMENT
??_R0?AVCFileSystem@@@8 DD FLAT:??_7type_info@@6B@	; CFileSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFileSystem@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFileSystem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFileSystem@@8 DD FLAT:??_R0?AVCFileSystem@@@8 ; CFileSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFileSystem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CArchiveFS@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CArchiveFS@@8 DD FLAT:??_R0?AVCArchiveFS@@@8 ; CArchiveFS::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CArchiveFS@@8
rdata$r	ENDS
;	COMDAT ??_R2CArchiveFS@@8
rdata$r	SEGMENT
??_R2CArchiveFS@@8 DD FLAT:??_R1A@?0A@EA@CArchiveFS@@8	; CArchiveFS::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CFileSystem@@8
rdata$r	ENDS
;	COMDAT ??_R3CArchiveFS@@8
rdata$r	SEGMENT
??_R3CArchiveFS@@8 DD 00H				; CArchiveFS::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CArchiveFS@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCArchiveFS@@@8
data$r	SEGMENT
??_R0?AVCArchiveFS@@@8 DD FLAT:??_7type_info@@6B@	; CArchiveFS `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCArchiveFS@@', 00H
data$r	ENDS
;	COMDAT ??_R4CArchiveFS@@6B@
rdata$r	SEGMENT
??_R4CArchiveFS@@6B@ DD 00H				; CArchiveFS::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCArchiveFS@@@8
	DD	FLAT:??_R3CArchiveFS@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMemoryStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMemoryStream@@8 DD FLAT:??_R0?AVCMemoryStream@@@8 ; CMemoryStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMemoryStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CMemoryStream@@8
rdata$r	SEGMENT
??_R2CMemoryStream@@8 DD FLAT:??_R1A@?0A@EA@CMemoryStream@@8 ; CMemoryStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CAbstractStream@@8
rdata$r	ENDS
;	COMDAT ??_R3CMemoryStream@@8
rdata$r	SEGMENT
??_R3CMemoryStream@@8 DD 00H				; CMemoryStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CMemoryStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMemoryStream@@@8
data$r	SEGMENT
??_R0?AVCMemoryStream@@@8 DD FLAT:??_7type_info@@6B@	; CMemoryStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMemoryStream@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMemoryStream@@6B@
rdata$r	SEGMENT
??_R4CMemoryStream@@6B@ DD 00H				; CMemoryStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMemoryStream@@@8
	DD	FLAT:??_R3CMemoryStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFileStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFileStream@@8 DD FLAT:??_R0?AVCFileStream@@@8 ; CFileStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CFileStream@@8
rdata$r	SEGMENT
??_R2CFileStream@@8 DD FLAT:??_R1A@?0A@EA@CFileStream@@8 ; CFileStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CAbstractStream@@8
rdata$r	ENDS
;	COMDAT ??_R3CFileStream@@8
rdata$r	SEGMENT
??_R3CFileStream@@8 DD 00H				; CFileStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFileStream@@@8
data$r	SEGMENT
??_R0?AVCFileStream@@@8 DD FLAT:??_7type_info@@6B@	; CFileStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFileStream@@', 00H
data$r	ENDS
;	COMDAT ??_R4CFileStream@@6B@
rdata$r	SEGMENT
??_R4CFileStream@@6B@ DD 00H				; CFileStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFileStream@@@8
	DD	FLAT:??_R3CFileStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAbstractStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAbstractStream@@8 DD FLAT:??_R0?AVCAbstractStream@@@8 ; CAbstractStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAbstractStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CAbstractStream@@8
rdata$r	SEGMENT
??_R2CAbstractStream@@8 DD FLAT:??_R1A@?0A@EA@CAbstractStream@@8 ; CAbstractStream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CAbstractStream@@8
rdata$r	SEGMENT
??_R3CAbstractStream@@8 DD 00H				; CAbstractStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CAbstractStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAbstractStream@@@8
data$r	SEGMENT
??_R0?AVCAbstractStream@@@8 DD FLAT:??_7type_info@@6B@	; CAbstractStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAbstractStream@@', 00H
data$r	ENDS
;	COMDAT ??_R4CAbstractStream@@6B@
rdata$r	SEGMENT
??_R4CAbstractStream@@6B@ DD 00H			; CAbstractStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAbstractStream@@@8
	DD	FLAT:??_R3CAbstractStream@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CC@IAJGLJEL@ArchiveFS?3?5Requested?5file?3?5?$CFs?4?4?4@
CONST	SEGMENT
??_C@_0CC@IAJGLJEL@ArchiveFS?3?5Requested?5file?3?5?$CFs?4?4?4@ DB 'Archi'
	DB	'veFS: Requested file: %s...', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CArchiveFS@@6B@
CONST	SEGMENT
??_7CArchiveFS@@6B@ DD FLAT:??_R4CArchiveFS@@6B@	; CArchiveFS::`vftable'
	DD	FLAT:??_ECArchiveFS@@UAEPAXI@Z
	DD	FLAT:?Load@CArchiveFS@@UAE_NPAD@Z
	DD	FLAT:?Unload@CArchiveFS@@UAEXXZ
	DD	FLAT:?GetFileIndex@CArchiveFS@@UAEKPAD@Z
	DD	FLAT:?GetFileSize@CArchiveFS@@UAEKK@Z
	DD	FLAT:?GetFileData@CArchiveFS@@UAEPAEK@Z
	DD	FLAT:?Load@CArchiveFS@@UAE_NPAEK@Z
	DD	FLAT:?GetFileIndex@CArchiveFS@@UAEKK@Z
	DD	FLAT:?UnloadData@CArchiveFS@@UAEXK@Z
CONST	ENDS
;	COMDAT ??_7CMemoryStream@@6B@
CONST	SEGMENT
??_7CMemoryStream@@6B@ DD FLAT:??_R4CMemoryStream@@6B@	; CMemoryStream::`vftable'
	DD	FLAT:??_ECMemoryStream@@UAEPAXI@Z
	DD	FLAT:?Read@CAbstractStream@@UAEIPAXHH@Z
	DD	FLAT:?Read@CMemoryStream@@UAEIPAXH@Z
	DD	FLAT:?Write@CAbstractStream@@UAEIPBXHH@Z
	DD	FLAT:?Write@CMemoryStream@@UAEIPBXH@Z
	DD	FLAT:?Seek@CAbstractStream@@UAEXH@Z
	DD	FLAT:?Seek@CMemoryStream@@UAEXHW4eSeek@CAbstractStream@@@Z
	DD	FLAT:?Tell@CMemoryStream@@UAEIXZ
CONST	ENDS
;	COMDAT ??_7CFileStream@@6B@
CONST	SEGMENT
??_7CFileStream@@6B@ DD FLAT:??_R4CFileStream@@6B@	; CFileStream::`vftable'
	DD	FLAT:??_ECFileStream@@UAEPAXI@Z
	DD	FLAT:?Read@CFileStream@@UAEIPAXHH@Z
	DD	FLAT:?Read@CFileStream@@UAEIPAXH@Z
	DD	FLAT:?Write@CFileStream@@UAEIPBXHH@Z
	DD	FLAT:?Write@CFileStream@@UAEIPBXH@Z
	DD	FLAT:?Seek@CAbstractStream@@UAEXH@Z
	DD	FLAT:?Seek@CFileStream@@UAEXHW4eSeek@CAbstractStream@@@Z
	DD	FLAT:?Tell@CFileStream@@UAEIXZ
	DD	FLAT:?Open@CFileStream@@UAE_NPBDW4eType@1@W4eMode@1@@Z
	DD	FLAT:?IsOpen@CFileStream@@UAE_NXZ
	DD	FLAT:?Close@CFileStream@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CAbstractStream@@6B@
CONST	SEGMENT
??_7CAbstractStream@@6B@ DD FLAT:??_R4CAbstractStream@@6B@ ; CAbstractStream::`vftable'
	DD	FLAT:??_ECAbstractStream@@UAEPAXI@Z
	DD	FLAT:?Read@CAbstractStream@@UAEIPAXHH@Z
	DD	FLAT:__purecall
	DD	FLAT:?Write@CAbstractStream@@UAEIPBXHH@Z
	DD	FLAT:__purecall
	DD	FLAT:?Seek@CAbstractStream@@UAEXH@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetFileData@CArchiveFS@@UAEPAEK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFileData@CArchiveFS@@UAEPAEK@Z$0
__ehfuncinfo$?GetFileData@CArchiveFS@@UAEPAEK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetFileData@CArchiveFS@@UAEPAEK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CArchiveFS@@UAE_NPAEK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CArchiveFS@@UAE_NPAEK@Z$0
__ehfuncinfo$?Load@CArchiveFS@@UAE_NPAEK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CArchiveFS@@UAE_NPAEK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CArchiveFS@@UAE_NPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CArchiveFS@@UAE_NPAD@Z$0
__ehfuncinfo$?Load@CArchiveFS@@UAE_NPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CArchiveFS@@UAE_NPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CArchiveFS@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CArchiveFS@@UAE@XZ$0
__ehfuncinfo$??1CArchiveFS@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CArchiveFS@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArchiveFS@@QAE@KK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchiveFS@@QAE@KK@Z$0
__ehfuncinfo$??0CArchiveFS@@QAE@KK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CArchiveFS@@QAE@KK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CArchiveFS@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CArchiveFS@@QAE@XZ$0
__ehfuncinfo$??0CArchiveFS@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CArchiveFS@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadEntries@CArchiveFS@@AAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?LoadEntries@CArchiveFS@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadEntries@CArchiveFS@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z$1
__ehfuncinfo$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFileStream@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFileStream@@UAE@XZ$0
__ehfuncinfo$??1CFileStream@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CFileStream@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z$0
__ehfuncinfo$??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCArchiveFS@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCArchiveFS@@UAEPAXI@Z PROC				; CArchiveFS::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CArchiveFS@@UAE@XZ			; CArchiveFS::~CArchiveFS
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCArchiveFS@@UAEPAXI@Z ENDP				; CArchiveFS::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?UnloadData@CArchiveFS@@UAEXK@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_node$ = -20						; size = 4
_this$ = -8						; size = 4
_dwFileIndex$ = 8					; size = 4
?UnloadData@CArchiveFS@@UAEXK@Z PROC			; CArchiveFS::UnloadData, COMDAT
; _this$ = ecx

; 390  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 391  : 	AFS_ENTRYBT_NODE* node = *(reinterpret_cast<AFS_ENTRYBT_NODE**>(&dwFileIndex));

	mov	eax, DWORD PTR _dwFileIndex$[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 392  : 	
; 393  : 	if (node->pbData != NULL) 

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@UnloadData

; 394  : 	{
; 395  : 		delete[] node->pbData;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 396  : 		node->pbData = NULL;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN2@UnloadData:

; 397  : 	}
; 398  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?UnloadData@CArchiveFS@@UAEXK@Z ENDP			; CArchiveFS::UnloadData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?GetFileData@CArchiveFS@@UAEPAEK@Z
_TEXT	SEGMENT
$T2 = -368						; size = 4
$T3 = -356						; size = 4
$T4 = -344						; size = 4
_i$5 = -140						; size = 4
_pbTEAKey$6 = -128					; size = 4
_dwDataOffset$7 = -116					; size = 4
_prevEntry$8 = -104					; size = 8
_dwFileSize$ = -88					; size = 4
_saaEntry$ = -76					; size = 8
_node$ = -60						; size = 4
_tinyEnc$ = -48						; size = 16
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwFileIndex$ = 8					; size = 4
?GetFileData@CArchiveFS@@UAEPAEK@Z PROC			; CArchiveFS::GetFileData, COMDAT
; _this$ = ecx

; 333  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetFileData@CArchiveFS@@UAEPAEK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-372]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 334  : 	CTinyEncrypt tinyEnc;

	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	??0CTinyEncrypt@@QAE@XZ			; CTinyEncrypt::CTinyEncrypt
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 335  : 
; 336  : 	AFS_ENTRYBT_NODE* node = *(reinterpret_cast<AFS_ENTRYBT_NODE**>(&dwFileIndex));

	mov	eax, DWORD PTR _dwFileIndex$[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 337  : 	
; 338  : 	SAA_ENTRY saaEntry = *(node->pEntry);	// Make a copy!

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _saaEntry$[ebp], edx
	mov	DWORD PTR _saaEntry$[ebp+4], eax

; 339  : 	saaEntry.dwDataBlock = UNOBFUSCATE_DATA(saaEntry.dwDataBlock) ^ (saaEntry.dwFileNameHash & this->m_dwObfsMask);

	mov	eax, DWORD PTR _saaEntry$[ebp+4]
	xor	eax, -1056713753			; c103d3e7H
	shr	eax, 19					; 00000013H
	mov	ecx, DWORD PTR _saaEntry$[ebp+4]
	xor	ecx, -1056713753			; c103d3e7H
	shl	ecx, 13					; 0000000dH
	or	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _saaEntry$[ebp]
	and	ecx, DWORD PTR [edx+2349]
	xor	eax, ecx
	mov	DWORD PTR _saaEntry$[ebp+4], eax

; 340  : 
; 341  : 	DWORD dwFileSize;
; 342  : 
; 343  : 	if (node->pbData != NULL) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN11@GetFileDat

; 344  : 		return node->pbData;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	??1CTinyEncrypt@@QAE@XZ			; CTinyEncrypt::~CTinyEncrypt
	mov	eax, DWORD PTR $T2[ebp]
	jmp	$LN12@GetFileDat

; 345  : 	} else {

	jmp	$LN10@GetFileDat
$LN11@GetFileDat:

; 346  : 		// Alloc memory (in blocks!)
; 347  : 		dwFileSize = saaEntry.dwFileSize;

	mov	eax, DWORD PTR _saaEntry$[ebp+4]
	shr	eax, 8
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _dwFileSize$[ebp], eax

; 348  : 		if (dwFileSize % SAA_BLOCK_SIZE != 0)

	mov	eax, DWORD PTR _dwFileSize$[ebp]
	xor	edx, edx
	mov	ecx, 2048				; 00000800H
	div	ecx
	test	edx, edx
	je	SHORT $LN9@GetFileDat

; 349  : 			dwFileSize += (SAA_BLOCK_SIZE - (dwFileSize % SAA_BLOCK_SIZE));

	mov	eax, DWORD PTR _dwFileSize$[ebp]
	xor	edx, edx
	mov	ecx, 2048				; 00000800H
	div	ecx
	mov	eax, 2048				; 00000800H
	sub	eax, edx
	add	eax, DWORD PTR _dwFileSize$[ebp]
	mov	DWORD PTR _dwFileSize$[ebp], eax
$LN9@GetFileDat:

; 350  : 		
; 351  : 		node->pbData = new BYTE[dwFileSize];

	mov	eax, DWORD PTR _dwFileSize$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+12], edx

; 352  : 
; 353  : 		// Determine offset to data
; 354  : 		SAA_ENTRY prevEntry;
; 355  : 		DWORD dwDataOffset = m_Header.SizeOf();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?SizeOf@_SAA_FILE_HEADER@@QAEKXZ	; _SAA_FILE_HEADER::SizeOf
	mov	DWORD PTR _dwDataOffset$7[ebp], eax

; 356  : 
; 357  : 		if (saaEntry.dwPrevEntry != m_Header.headerV2.dwInvalidIndex) {

	mov	eax, DWORD PTR _saaEntry$[ebp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+277]
	shr	edx, 5
	and	edx, 255				; 000000ffH
	cmp	eax, edx
	je	$LN8@GetFileDat

; 358  : 			prevEntry = saaEntry;

	mov	eax, DWORD PTR _saaEntry$[ebp]
	mov	DWORD PTR _prevEntry$8[ebp], eax
	mov	ecx, DWORD PTR _saaEntry$[ebp+4]
	mov	DWORD PTR _prevEntry$8[ebp+4], ecx
$LN7@GetFileDat:

; 359  : 			do {
; 360  : 				prevEntry = m_pEntries[prevEntry.dwPrevEntry];

	mov	eax, DWORD PTR _prevEntry$8[ebp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+285]
	mov	eax, DWORD PTR [ecx+eax*8+289]
	mov	DWORD PTR _prevEntry$8[ebp], edx
	mov	DWORD PTR _prevEntry$8[ebp+4], eax

; 361  : 				prevEntry.dwDataBlock = UNOBFUSCATE_DATA(prevEntry.dwDataBlock) ^ (prevEntry.dwFileNameHash & this->m_dwObfsMask);

	mov	eax, DWORD PTR _prevEntry$8[ebp+4]
	xor	eax, -1056713753			; c103d3e7H
	shr	eax, 19					; 00000013H
	mov	ecx, DWORD PTR _prevEntry$8[ebp+4]
	xor	ecx, -1056713753			; c103d3e7H
	shl	ecx, 13					; 0000000dH
	or	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _prevEntry$8[ebp]
	and	ecx, DWORD PTR [edx+2349]
	xor	eax, ecx
	mov	DWORD PTR _prevEntry$8[ebp+4], eax

; 362  : 
; 363  : 				dwFileSize = prevEntry.dwFileSize;

	mov	eax, DWORD PTR _prevEntry$8[ebp+4]
	shr	eax, 8
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _dwFileSize$[ebp], eax

; 364  : 				if (dwFileSize % SAA_BLOCK_SIZE != 0)

	mov	eax, DWORD PTR _dwFileSize$[ebp]
	xor	edx, edx
	mov	ecx, 2048				; 00000800H
	div	ecx
	test	edx, edx
	je	SHORT $LN4@GetFileDat

; 365  : 					dwFileSize += (SAA_BLOCK_SIZE - (dwFileSize % SAA_BLOCK_SIZE));

	mov	eax, DWORD PTR _dwFileSize$[ebp]
	xor	edx, edx
	mov	ecx, 2048				; 00000800H
	div	ecx
	mov	eax, 2048				; 00000800H
	sub	eax, edx
	add	eax, DWORD PTR _dwFileSize$[ebp]
	mov	DWORD PTR _dwFileSize$[ebp], eax
$LN4@GetFileDat:

; 366  : 				dwDataOffset += dwFileSize;

	mov	eax, DWORD PTR _dwDataOffset$7[ebp]
	add	eax, DWORD PTR _dwFileSize$[ebp]
	mov	DWORD PTR _dwDataOffset$7[ebp], eax

; 367  : 				
; 368  : 			} while(prevEntry.dwPrevEntry != m_Header.headerV2.dwInvalidIndex);

	mov	eax, DWORD PTR _prevEntry$8[ebp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+277]
	shr	edx, 5
	and	edx, 255				; 000000ffH
	cmp	eax, edx
	jne	$LN7@GetFileDat
$LN8@GetFileDat:

; 369  : 		}
; 370  : 
; 371  : 		m_pStream->Seek(dwDataOffset);

	mov	esi, esp
	mov	eax, DWORD PTR _dwDataOffset$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 372  : 
; 373  : 		// Load the data in blocks and decrypt it
; 374  : 		BYTE* pbTEAKey = reinterpret_cast<BYTE*>(this->m_pEntries) + 
; 375  : 								(saaEntry.dwFileNameHash % (sizeof(SAA_ENTRY)*m_dwNumEntries-TEA_KEY_SIZE));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2353]
	lea	ecx, DWORD PTR [ecx*8-16]
	mov	eax, DWORD PTR _saaEntry$[ebp]
	xor	edx, edx
	div	ecx
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+285]
	mov	DWORD PTR _pbTEAKey$6[ebp], ecx

; 376  : 
; 377  : 		tinyEnc.SetKey(pbTEAKey, 0);

	push	0
	mov	eax, DWORD PTR _pbTEAKey$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	?SetKey@CTinyEncrypt@@QAEXPAEE@Z	; CTinyEncrypt::SetKey

; 378  : 
; 379  : 		for(DWORD i=0; i<saaEntry.dwFileSize; i+=SAA_BLOCK_SIZE) {

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN3@GetFileDat
$LN2@GetFileDat:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 2048				; 00000800H
	mov	DWORD PTR _i$5[ebp], eax
$LN3@GetFileDat:
	mov	eax, DWORD PTR _saaEntry$[ebp+4]
	shr	eax, 8
	and	eax, 16777215				; 00ffffffH
	cmp	DWORD PTR _i$5[ebp], eax
	jae	SHORT $LN1@GetFileDat

; 380  : 			m_pStream->Read(node->pbData+i, SAA_BLOCK_SIZE);

	mov	esi, esp
	push	2048					; 00000800H
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _i$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 381  : 			tinyEnc.DecryptData(SAA_BLOCK_SIZE, node->pbData+i);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _i$5[ebp]
	push	ecx
	push	2048					; 00000800H
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	?DecryptData@CTinyEncrypt@@QAEXKPAE@Z	; CTinyEncrypt::DecryptData

; 382  : 		}

	jmp	SHORT $LN2@GetFileDat
$LN1@GetFileDat:

; 383  : 
; 384  : 		return node->pbData;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	??1CTinyEncrypt@@QAE@XZ			; CTinyEncrypt::~CTinyEncrypt
	mov	eax, DWORD PTR $T4[ebp]
	jmp	SHORT $LN12@GetFileDat
$LN10@GetFileDat:

; 385  : 
; 386  : 	}
; 387  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	??1CTinyEncrypt@@QAE@XZ			; CTinyEncrypt::~CTinyEncrypt
$LN12@GetFileDat:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@GetFileDat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN20@GetFileDat:
	DD	3
	DD	$LN19@GetFileDat
$LN19@GetFileDat:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN15@GetFileDat
	DD	-76					; ffffffb4H
	DD	8
	DD	$LN16@GetFileDat
	DD	-104					; ffffff98H
	DD	8
	DD	$LN17@GetFileDat
$LN17@GetFileDat:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN16@GetFileDat:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN15@GetFileDat:
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	121					; 00000079H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFileData@CArchiveFS@@UAEPAEK@Z$0:
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	jmp	??1CTinyEncrypt@@QAE@XZ			; CTinyEncrypt::~CTinyEncrypt
__ehhandler$?GetFileData@CArchiveFS@@UAEPAEK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-376]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetFileData@CArchiveFS@@UAEPAEK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetFileData@CArchiveFS@@UAEPAEK@Z ENDP			; CArchiveFS::GetFileData
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?GetFileSize@CArchiveFS@@UAEKK@Z
_TEXT	SEGMENT
_saaEntry$ = -36					; size = 8
_node$ = -20						; size = 4
_this$ = -8						; size = 4
_dwFileIndex$ = 8					; size = 4
?GetFileSize@CArchiveFS@@UAEKK@Z PROC			; CArchiveFS::GetFileSize, COMDAT
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	AFS_ENTRYBT_NODE* node = *(reinterpret_cast<AFS_ENTRYBT_NODE**>(&dwFileIndex));

	mov	eax, DWORD PTR _dwFileIndex$[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 324  : 	
; 325  : 	SAA_ENTRY saaEntry = *(node->pEntry);	// Make a copy!

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _saaEntry$[ebp], edx
	mov	DWORD PTR _saaEntry$[ebp+4], eax

; 326  : 	saaEntry.dwDataBlock = UNOBFUSCATE_DATA(saaEntry.dwDataBlock) ^ (saaEntry.dwFileNameHash & this->m_dwObfsMask);

	mov	eax, DWORD PTR _saaEntry$[ebp+4]
	xor	eax, -1056713753			; c103d3e7H
	shr	eax, 19					; 00000013H
	mov	ecx, DWORD PTR _saaEntry$[ebp+4]
	xor	ecx, -1056713753			; c103d3e7H
	shl	ecx, 13					; 0000000dH
	or	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _saaEntry$[ebp]
	and	ecx, DWORD PTR [edx+2349]
	xor	eax, ecx
	mov	DWORD PTR _saaEntry$[ebp+4], eax

; 327  : 	return saaEntry.dwFileSize;

	mov	eax, DWORD PTR _saaEntry$[ebp+4]
	shr	eax, 8
	and	eax, 16777215				; 00ffffffH

; 328  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetFileSiz
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@GetFileSiz:
	DD	1
	DD	$LN4@GetFileSiz
$LN4@GetFileSiz:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN3@GetFileSiz
$LN3@GetFileSiz:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?GetFileSize@CArchiveFS@@UAEKK@Z ENDP			; CArchiveFS::GetFileSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?GetFileIndex@CArchiveFS@@UAEKPAD@Z
_TEXT	SEGMENT
_szDebugMsg$1 = -1336					; size = 1024
_dwIndex$ = -304					; size = 4
_dwHash$ = -292						; size = 4
_szFileNameLC$ = -280					; size = 260
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
?GetFileIndex@CArchiveFS@@UAEKPAD@Z PROC		; CArchiveFS::GetFileIndex, COMDAT
; _this$ = ecx

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1532				; 000005fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1532]
	mov	ecx, 383				; 0000017fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 	// PRE: szFileName must be the filename only (no paths!)
; 293  : 
; 294  : 	if (!m_bEntriesLoaded)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN2@GetFileInd

; 295  : 		LoadEntries();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadEntries@CArchiveFS@@AAEXXZ		; CArchiveFS::LoadEntries
$LN2@GetFileInd:

; 296  : 
; 297  : 	CHAR szFileNameLC[MAX_PATH];
; 298  : 	strcpy(szFileNameLC, szFileName);

	mov	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _szFileNameLC$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 299  : 	_strlwr(szFileNameLC);

	lea	eax, DWORD PTR _szFileNameLC$[ebp]
	push	eax
	call	__strlwr
	add	esp, 4

; 300  : 
; 301  : 	DWORD dwHash = this->HashString(szFileNameLC);

	lea	eax, DWORD PTR _szFileNameLC$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HashString@CArchiveFS@@AAEKPAD@Z	; CArchiveFS::HashString
	mov	DWORD PTR _dwHash$[ebp], eax

; 302  : 
; 303  : 	DWORD dwIndex = GetFileIndex(dwHash);

	mov	esi, esp
	mov	eax, DWORD PTR _dwHash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwIndex$[ebp], eax

; 304  : 
; 305  : #ifdef _DEBUG
; 306  : 	if (dwIndex != FS_INVALID_FILE)

	cmp	DWORD PTR _dwIndex$[ebp], -1
	je	SHORT $LN1@GetFileInd

; 307  : 	{
; 308  : 		CHAR szDebugMsg[1024];
; 309  : 		sprintf(szDebugMsg, "ArchiveFS: Requested file: %s...\n", szFileNameLC);

	lea	eax, DWORD PTR _szFileNameLC$[ebp]
	push	eax
	push	OFFSET ??_C@_0CC@IAJGLJEL@ArchiveFS?3?5Requested?5file?3?5?$CFs?4?4?4@
	lea	ecx, DWORD PTR _szDebugMsg$1[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 310  : 		OutputDebugString(szDebugMsg);

	mov	esi, esp
	lea	eax, DWORD PTR _szDebugMsg$1[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetFileInd:

; 311  : 	}
; 312  : #endif
; 313  : 
; 314  : 	return dwIndex;

	mov	eax, DWORD PTR _dwIndex$[ebp]

; 315  : 
; 316  : 
; 317  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetFileInd
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1532				; 000005fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN8@GetFileInd:
	DD	2
	DD	$LN7@GetFileInd
$LN7@GetFileInd:
	DD	-280					; fffffee8H
	DD	260					; 00000104H
	DD	$LN5@GetFileInd
	DD	-1336					; fffffac8H
	DD	1024					; 00000400H
	DD	$LN6@GetFileInd
$LN6@GetFileInd:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	103					; 00000067H
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN5@GetFileInd:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	67					; 00000043H
	DB	0
?GetFileIndex@CArchiveFS@@UAEKPAD@Z ENDP		; CArchiveFS::GetFileIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?GetFileIndex@CArchiveFS@@UAEKK@Z
_TEXT	SEGMENT
_ppEntry$ = -48						; size = 4
_saaEntry$ = -36					; size = 8
_node$ = -20						; size = 4
_this$ = -8						; size = 4
_dwFileHash$ = 8					; size = 4
?GetFileIndex@CArchiveFS@@UAEKK@Z PROC			; CArchiveFS::GetFileIndex, COMDAT
; _this$ = ecx

; 260  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 261  : 
; 262  : 	if (!m_bEntriesLoaded)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN3@GetFileInd

; 263  : 		LoadEntries();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadEntries@CArchiveFS@@AAEXXZ		; CArchiveFS::LoadEntries
$LN3@GetFileInd:

; 264  : 
; 265  : 	AFS_ENTRYBT_NODE* node = m_EntryBTreeRoot.FindEntry(dwFileHash);

	mov	eax, DWORD PTR _dwFileHash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2333				; 0000091dH
	call	?FindEntry@_AFS_ENTRYBT_NODE@@QAEPAU1@K@Z ; _AFS_ENTRYBT_NODE::FindEntry
	mov	DWORD PTR _node$[ebp], eax

; 266  : 	
; 267  : 	if (node == NULL) {

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN2@GetFileInd

; 268  : 		return FS_INVALID_FILE;

	or	eax, -1
	jmp	SHORT $LN4@GetFileInd
$LN2@GetFileInd:

; 269  : 	}
; 270  : 
; 271  : 	SAA_ENTRY saaEntry = *(node->pEntry);	// Always make a copy of saaEntry before decrypting it

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _saaEntry$[ebp], edx
	mov	DWORD PTR _saaEntry$[ebp+4], eax

; 272  : 											// Otherwise, the data decryption will get messed up
; 273  : 	
; 274  : 	saaEntry.dwDataBlock = UNOBFUSCATE_DATA(saaEntry.dwDataBlock) ^ (saaEntry.dwFileNameHash & this->m_dwObfsMask);

	mov	eax, DWORD PTR _saaEntry$[ebp+4]
	xor	eax, -1056713753			; c103d3e7H
	shr	eax, 19					; 00000013H
	mov	ecx, DWORD PTR _saaEntry$[ebp+4]
	xor	ecx, -1056713753			; c103d3e7H
	shl	ecx, 13					; 0000000dH
	or	eax, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _saaEntry$[ebp]
	and	ecx, DWORD PTR [edx+2349]
	xor	eax, ecx
	mov	DWORD PTR _saaEntry$[ebp+4], eax

; 275  : 	if (node->pEntry == &(m_pEntries[saaEntry.dwPrevEntry]))

	mov	eax, DWORD PTR _saaEntry$[ebp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+285]
	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN1@GetFileInd

; 276  : 		return FS_INVALID_FILE;

	or	eax, -1
	jmp	SHORT $LN4@GetFileInd
$LN1@GetFileInd:

; 277  : 
; 278  : 	// Okay, we got a file. 
; 279  : 	// TODO: It might be wise at this point to start a thread to decrypt the data
; 280  : 	// Chances are if the index was requested, data for it will be requested.
; 281  : 
; 282  : 	// Painfully evil conversion from SAA_ENTRY* to DWORD
; 283  : 	DWORD* ppEntry = reinterpret_cast<DWORD*>(&node);

	lea	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _ppEntry$[ebp], eax

; 284  : 	return *ppEntry;

	mov	eax, DWORD PTR _ppEntry$[ebp]
	mov	eax, DWORD PTR [eax]
$LN4@GetFileInd:

; 285  : 
; 286  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GetFileInd
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN9@GetFileInd:
	DD	2
	DD	$LN8@GetFileInd
$LN8@GetFileInd:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@GetFileInd
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN7@GetFileInd
$LN7@GetFileInd:
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
$LN6@GetFileInd:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?GetFileIndex@CArchiveFS@@UAEKK@Z ENDP			; CArchiveFS::GetFileIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?Unload@CArchiveFS@@UAEXXZ
_TEXT	SEGMENT
tv74 = -232						; size = 4
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?Unload@CArchiveFS@@UAEXXZ PROC				; CArchiveFS::Unload, COMDAT
; _this$ = ecx

; 246  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 	if (!m_bLoaded)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+19]
	test	ecx, ecx
	jne	SHORT $LN1@Unload

; 248  : 		return;

	jmp	SHORT $LN2@Unload
$LN1@Unload:

; 249  : 
; 250  : 	delete m_pStream;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Unload
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@Unload
$LN4@Unload:
	mov	DWORD PTR tv74[ebp], 0
$LN5@Unload:

; 251  : 	m_pStream = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 252  : 
; 253  : 	m_bLoaded = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 0

; 254  : 	m_bEntriesLoaded = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
$LN2@Unload:

; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unload@CArchiveFS@@UAEXXZ ENDP				; CArchiveFS::Unload
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?Load@CArchiveFS@@UAE_NPAEK@Z
_TEXT	SEGMENT
tv88 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pbData$ = 8						; size = 4
_nLength$ = 12						; size = 4
?Load@CArchiveFS@@UAE_NPAEK@Z PROC			; CArchiveFS::Load, COMDAT
; _this$ = ecx

; 223  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Load@CArchiveFS@@UAE_NPAEK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 	if (m_bLoaded)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+19]
	test	ecx, ecx
	je	SHORT $LN2@Load

; 225  : 		Unload();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Load:

; 226  : 
; 227  : 	m_pStream = new CMemoryStream(pbData, nLength);

	push	17					; 00000011H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@Load
	push	1
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbData$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CMemoryStream@@QAE@PAEI_N@Z		; CMemoryStream::CMemoryStream
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN6@Load
$LN5@Load:
	mov	DWORD PTR tv88[ebp], 0
$LN6@Load:
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+20], ecx

; 228  : 
; 229  : 	m_Header.Read(m_pStream);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?Read@_SAA_FILE_HEADER@@QAEXPAVCAbstractStream@@@Z ; _SAA_FILE_HEADER::Read

; 230  : 
; 231  : 	m_Header.XorV2Identifier();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?XorV2Identifier@_SAA_FILE_HEADER@@QAEXXZ ; _SAA_FILE_HEADER::XorV2Identifier

; 232  : 
; 233  : 	m_bLoaded = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 1

; 234  : 
; 235  : 	if (!m_Header.VerifyIdentifier()) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?VerifyIdentifier@_SAA_FILE_HEADER@@QAE_NXZ ; _SAA_FILE_HEADER::VerifyIdentifier
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Load

; 236  : 		Unload();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 237  : 		return false;

	xor	al, al
	jmp	SHORT $LN3@Load
$LN1@Load:

; 238  : 	}
; 239  : 
; 240  : 	return true;

	mov	al, 1
$LN3@Load:

; 241  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CArchiveFS@@UAE_NPAEK@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Load@CArchiveFS@@UAE_NPAEK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Load@CArchiveFS@@UAE_NPAEK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Load@CArchiveFS@@UAE_NPAEK@Z ENDP			; CArchiveFS::Load
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?Load@CArchiveFS@@UAE_NPAD@Z
_TEXT	SEGMENT
tv88 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_szFileName$ = 8					; size = 4
?Load@CArchiveFS@@UAE_NPAD@Z PROC			; CArchiveFS::Load, COMDAT
; _this$ = ecx

; 200  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Load@CArchiveFS@@UAE_NPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 201  : 	if (m_bLoaded)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+19]
	test	ecx, ecx
	je	SHORT $LN2@Load

; 202  : 		Unload();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Load:

; 203  : 
; 204  : 	m_pStream = new CFileStream(szFileName, CFileStream::TypeBinary, CFileStream::ModeRead);

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@Load
	push	0
	push	1
	mov	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z ; CFileStream::CFileStream
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN6@Load
$LN5@Load:
	mov	DWORD PTR tv88[ebp], 0
$LN6@Load:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+20], eax

; 205  : 
; 206  : 	m_Header.Read(m_pStream);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?Read@_SAA_FILE_HEADER@@QAEXPAVCAbstractStream@@@Z ; _SAA_FILE_HEADER::Read

; 207  : 
; 208  : 	m_Header.XorV2Identifier();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?XorV2Identifier@_SAA_FILE_HEADER@@QAEXXZ ; _SAA_FILE_HEADER::XorV2Identifier

; 209  : 
; 210  : 	m_bLoaded = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 1

; 211  : 
; 212  : 	if (!m_Header.VerifyIdentifier()) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?VerifyIdentifier@_SAA_FILE_HEADER@@QAE_NXZ ; _SAA_FILE_HEADER::VerifyIdentifier
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Load

; 213  : 		Unload();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 214  : 		return false;

	xor	al, al
	jmp	SHORT $LN3@Load
$LN1@Load:

; 215  : 	}
; 216  : 
; 217  : 	return true;

	mov	al, 1
$LN3@Load:

; 218  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CArchiveFS@@UAE_NPAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Load@CArchiveFS@@UAE_NPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Load@CArchiveFS@@UAE_NPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Load@CArchiveFS@@UAE_NPAD@Z ENDP			; CArchiveFS::Load
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ??1CArchiveFS@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CArchiveFS@@UAE@XZ PROC				; CArchiveFS::~CArchiveFS, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CArchiveFS@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CArchiveFS@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 54   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2333				; 0000091dH
	call	??1_AFS_ENTRYBT_NODE@@QAE@XZ		; _AFS_ENTRYBT_NODE::~_AFS_ENTRYBT_NODE
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileSystem@@UAE@XZ			; CFileSystem::~CFileSystem
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CArchiveFS@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CFileSystem@@UAE@XZ			; CFileSystem::~CFileSystem
__ehhandler$??1CArchiveFS@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CArchiveFS@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CArchiveFS@@UAE@XZ ENDP				; CArchiveFS::~CArchiveFS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ??0CArchiveFS@@QAE@KK@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_dwNumEntries$ = 8					; size = 4
_dwFDSize$ = 12						; size = 4
??0CArchiveFS@@QAE@KK@Z PROC				; CArchiveFS::CArchiveFS, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchiveFS@@QAE@KK@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileSystem@@QAE@XZ			; CFileSystem::CFileSystem
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CArchiveFS@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	??0_SAA_FILE_HEADER@@QAE@XZ		; _SAA_FILE_HEADER::_SAA_FILE_HEADER
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2333				; 0000091dH
	call	??0_AFS_ENTRYBT_NODE@@QAE@XZ		; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE

; 43   : 	m_dwNumEntries = dwNumEntries;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwNumEntries$[ebp]
	mov	DWORD PTR [eax+2353], ecx

; 44   : 	m_bLoaded = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 0

; 45   : 	m_bEntriesLoaded = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0

; 46   : 
; 47   : 	m_Header.dwFakeDataSize = dwFDSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwFDSize$[ebp]
	mov	DWORD PTR [eax+281], ecx

; 48   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchiveFS@@QAE@KK@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CFileSystem@@UAE@XZ			; CFileSystem::~CFileSystem
__ehhandler$??0CArchiveFS@@QAE@KK@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchiveFS@@QAE@KK@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchiveFS@@QAE@KK@Z ENDP				; CArchiveFS::CArchiveFS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ??0CArchiveFS@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CArchiveFS@@QAE@XZ PROC				; CArchiveFS::CArchiveFS, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CArchiveFS@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CFileSystem@@QAE@XZ			; CFileSystem::CFileSystem
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CArchiveFS@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	??0_SAA_FILE_HEADER@@QAE@XZ		; _SAA_FILE_HEADER::_SAA_FILE_HEADER
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2333				; 0000091dH
	call	??0_AFS_ENTRYBT_NODE@@QAE@XZ		; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE

; 34   : 	m_dwNumEntries = SAA_MAX_ENTRIES;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+2353], 256		; 00000100H

; 35   : 	m_bLoaded = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 0

; 36   : 	m_bEntriesLoaded = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0

; 37   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CArchiveFS@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CFileSystem@@UAE@XZ			; CFileSystem::~CFileSystem
__ehhandler$??0CArchiveFS@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CArchiveFS@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CArchiveFS@@QAE@XZ ENDP				; CArchiveFS::CArchiveFS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?HashString@CArchiveFS@@AAEKPAD@Z
_TEXT	SEGMENT
tv200 = -292						; size = 4
_len$ = -92						; size = 4
_c$ = -80						; size = 4
_b$ = -68						; size = 4
_a$ = -56						; size = 4
_length$ = -44						; size = 4
_initval$ = -32						; size = 4
_k$ = -20						; size = 4
_this$ = -8						; size = 4
_szString$ = 8						; size = 4
?HashString@CArchiveFS@@AAEKPAD@Z PROC			; CArchiveFS::HashString, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	// This is an implementation of the Jenkins hash
; 61   : 
; 62   : #	define mix(a,b,c) \
; 63   : 	{ \
; 64   : 		a -= b; a -= c; a ^= (c>>13); \
; 65   : 		b -= c; b -= a; b ^= (a<<8); \
; 66   : 		c -= a; c -= b; c ^= (b>>13); \
; 67   : 		a -= b; a -= c; a ^= (c>>12);  \
; 68   : 		b -= c; b -= a; b ^= (a<<16); \
; 69   : 		c -= a; c -= b; c ^= (b>>5); \
; 70   : 		a -= b; a -= c; a ^= (c>>3);  \
; 71   : 		b -= c; b -= a; b ^= (a<<10); \
; 72   : 		c -= a; c -= b; c ^= (b>>15); \
; 73   : 	}
; 74   : 	
; 75   : 	register BYTE* k = (BYTE*)szString;

	mov	eax, DWORD PTR _szString$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 76   : 	register DWORD initval = 0x12345678;

	mov	DWORD PTR _initval$[ebp], 305419896	; 12345678H

; 77   : 	register DWORD length;
; 78   : 
; 79   : 	length = (DWORD)strlen(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax

; 80   : 	
; 81   : 	register DWORD a,b,c,len;
; 82   : 
; 83   : 	/* Set up the internal state */
; 84   : 	len = length;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 85   : 	a = b = UNOBFUSCATE_DATA(ms_dwHashInit); /* the golden ratio; an arbitrary value */

	mov	eax, DWORD PTR ?ms_dwHashInit@CArchiveFS@@0KA ; CArchiveFS::ms_dwHashInit
	xor	eax, -1056713753			; c103d3e7H
	shr	eax, 19					; 00000013H
	mov	ecx, DWORD PTR ?ms_dwHashInit@CArchiveFS@@0KA ; CArchiveFS::ms_dwHashInit
	xor	ecx, -1056713753			; c103d3e7H
	shl	ecx, 13					; 0000000dH
	or	eax, ecx
	mov	DWORD PTR _b$[ebp], eax
	mov	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], edx

; 86   : 	c = initval;         /* the previous hash value */

	mov	eax, DWORD PTR _initval$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN15@HashString:

; 87   : 
; 88   : 	/*---------------------------------------- handle most of the key */
; 89   : 	while (len >= 12)

	cmp	DWORD PTR _len$[ebp], 12		; 0000000cH
	jb	$LN14@HashString

; 90   : 	{
; 91   : 	a += (k[0] +((DWORD)k[1]<<8) +((DWORD)k[2]<<16) +((DWORD)k[3]<<24));

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	add	eax, ecx
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 16					; 00000010H
	add	eax, edx
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 24					; 00000018H
	add	edx, DWORD PTR _a$[ebp]
	add	edx, eax
	mov	DWORD PTR _a$[ebp], edx

; 92   : 	b += (k[4] +((DWORD)k[5]<<8) +((DWORD)k[6]<<16) +((DWORD)k[7]<<24));

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	add	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	add	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 7
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 24					; 00000018H
	add	ecx, DWORD PTR _b$[ebp]
	add	ecx, edx
	mov	DWORD PTR _b$[ebp], ecx

; 93   : 	c += (k[8] +((DWORD)k[9]<<8) +((DWORD)k[10]<<16)+((DWORD)k[11]<<24));

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	mov	eax, 1
	imul	ecx, eax, 9
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 8
	add	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 10
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 16					; 00000010H
	add	edx, ecx
	mov	eax, 1
	imul	ecx, eax, 11
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	shl	ecx, 24					; 00000018H
	add	ecx, DWORD PTR _c$[ebp]
	add	ecx, edx
	mov	DWORD PTR _c$[ebp], ecx

; 94   : 	mix(a,b,c);

	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 8
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 12					; 0000000cH
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 16					; 00000010H
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 5
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 3
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 10					; 0000000aH
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 15					; 0000000fH
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 95   : 	k += 12; len -= 12;

	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR _len$[ebp], eax

; 96   : 	}

	jmp	$LN15@HashString
$LN14@HashString:

; 97   : 
; 98   : 	/*------------------------------------- handle the last 11 bytes */
; 99   : 	c += length;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 100  : 	switch(len)              /* all the case statements fall through */

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR tv200[ebp], eax
	mov	ecx, DWORD PTR tv200[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv200[ebp], ecx
	cmp	DWORD PTR tv200[ebp], 10		; 0000000aH
	ja	$LN12@HashString
	mov	edx, DWORD PTR tv200[ebp]
	jmp	DWORD PTR $LN18@HashString[edx*4]
$LN11@HashString:

; 101  : 	{
; 102  : 		case 11: c+=((DWORD)k[10]<<24);

	mov	eax, 1
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN10@HashString:

; 103  : 		case 10: c+=((DWORD)k[9]<<16);

	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN9@HashString:

; 104  : 		case 9 : c+=((DWORD)k[8]<<8);

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], edx
$LN8@HashString:

; 105  : 		  /* the first byte of c is reserved for the length */
; 106  : 		case 8 : b+=((DWORD)k[7]<<24);

	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN7@HashString:

; 107  : 		case 7 : b+=((DWORD)k[6]<<16);

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN6@HashString:

; 108  : 		case 6 : b+=((DWORD)k[5]<<8);

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN5@HashString:

; 109  : 		case 5 : b+=k[4];

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
$LN4@HashString:

; 110  : 		case 4 : a+=((DWORD)k[3]<<24);

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN3@HashString:

; 111  : 		case 3 : a+=((DWORD)k[2]<<16);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], edx
$LN2@HashString:

; 112  : 		case 2 : a+=((DWORD)k[1]<<8);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], edx
$LN1@HashString:

; 113  : 		case 1 : a+=k[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _k$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN12@HashString:

; 114  : 		 /* case 0: nothing left to add */
; 115  : 	}
; 116  : 	mix(a,b,c);

	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 8
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 12					; 0000000cH
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 16					; 00000010H
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 5
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 3
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 10					; 0000000aH
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 15					; 0000000fH
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 117  : 	/*-------------------------------------------- report the result */
; 118  : 	return c;

	mov	eax, DWORD PTR _c$[ebp]

; 119  : 
; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN18@HashString:
	DD	$LN1@HashString
	DD	$LN2@HashString
	DD	$LN3@HashString
	DD	$LN4@HashString
	DD	$LN5@HashString
	DD	$LN6@HashString
	DD	$LN7@HashString
	DD	$LN8@HashString
	DD	$LN9@HashString
	DD	$LN10@HashString
	DD	$LN11@HashString
?HashString@CArchiveFS@@AAEKPAD@Z ENDP			; CArchiveFS::HashString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.cpp
;	COMDAT ?LoadEntries@CArchiveFS@@AAEXXZ
_TEXT	SEGMENT
$T2 = -456						; size = 4
$T3 = -444						; size = 4
$T4 = -432						; size = 4
$T5 = -420						; size = 4
_dwFilePos$ = -216					; size = 4
_bVerified$ = -204					; size = 4
_dwReadBlockSize$ = -192				; size = 4
_dwReadSize$ = -180					; size = 4
_pbReadData$ = -168					; size = 4
_dwSignDataEnd$ = -156					; size = 4
_pbSignature$ = -144					; size = 4
_dwSignSize$ = -132					; size = 4
_i$ = -120						; size = 4
_tinyEnc$ = -108					; size = 16
_signer$ = -84						; size = 8
_hasher$ = -68						; size = 8
_keyPair$ = -52						; size = 8
_context$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?LoadEntries@CArchiveFS@@AAEXXZ PROC			; CArchiveFS::LoadEntries, COMDAT
; _this$ = ecx

; 125  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadEntries@CArchiveFS@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 448				; 000001c0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 	// Get the file signature, verify it... use the result to decode the entries table
; 127  : 
; 128  : 	// Verify the Archive Signature, and decode the Entry block
; 129  : 	CCryptoContext context;

	lea	ecx, DWORD PTR _context$[ebp]
	call	??0CCryptoContext@@QAE@XZ		; CCryptoContext::CCryptoContext
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 130  : 	CKeyPair keyPair(&context);

	lea	eax, DWORD PTR _context$[ebp]
	push	eax
	lea	ecx, DWORD PTR _keyPair$[ebp]
	call	??0CKeyPair@@QAE@PAVCCryptoContext@@@Z	; CKeyPair::CKeyPair
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 131  : 	CHasher hasher(&context);

	lea	eax, DWORD PTR _context$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hasher$[ebp]
	call	??0CHasher@@QAE@PAVCCryptoContext@@@Z	; CHasher::CHasher
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 132  : 	CSigner signer;

	lea	ecx, DWORD PTR _signer$[ebp]
	call	??0CSigner@@QAE@XZ			; CSigner::CSigner
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 133  : 	CTinyEncrypt tinyEnc;

	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	??0CTinyEncrypt@@QAE@XZ			; CTinyEncrypt::CTinyEncrypt
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 134  : 	DWORD i;
; 135  : 
; 136  : 	// 1. Load the signature from the file
; 137  : 	DWORD dwSignSize = 128;		//m_Header.headerV2.dwSignSize;

	mov	DWORD PTR _dwSignSize$[ebp], 128	; 00000080H

; 138  : 	BYTE *pbSignature;
; 139  : 	DWORD dwSignDataEnd;
; 140  : 
; 141  : 	pbSignature = new BYTE[dwSignSize];

	mov	eax, DWORD PTR _dwSignSize$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pbSignature$[ebp], ecx

; 142  : 	m_pStream->Seek(-(INT)dwSignSize, CAbstractStream::SeekEnd);

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _dwSignSize$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 	dwSignDataEnd = m_pStream->Tell();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwSignDataEnd$[ebp], eax

; 144  : 	m_pStream->Read(pbSignature, dwSignSize);

	mov	esi, esp
	mov	eax, DWORD PTR _dwSignSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbSignature$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 145  : 	
; 146  : 	// 2. Hash the stuff (excluding the header and signature!)
; 147  : 	BYTE *pbReadData;
; 148  : 	DWORD dwReadSize;
; 149  : 	const DWORD dwReadBlockSize = 10 * 1024;	// 10kb

	mov	DWORD PTR _dwReadBlockSize$[ebp], 10240	; 00002800H

; 150  : 
; 151  : 	m_pStream->Seek(m_Header.SizeOf());			// start from the actual data section

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?SizeOf@_SAA_FILE_HEADER@@QAEKXZ	; _SAA_FILE_HEADER::SizeOf
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  : 	pbReadData = new BYTE[dwReadBlockSize];

	push	10240					; 00002800H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _pbReadData$[ebp], eax

; 153  : 	for(i=m_Header.SizeOf(); i<dwSignDataEnd; ) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 25					; 00000019H
	call	?SizeOf@_SAA_FILE_HEADER@@QAEKXZ	; _SAA_FILE_HEADER::SizeOf
	mov	DWORD PTR _i$[ebp], eax
$LN7@LoadEntrie:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _dwSignDataEnd$[ebp]
	jae	$LN6@LoadEntrie

; 154  : 		dwReadSize = m_pStream->Read(pbReadData, dwReadBlockSize);

	mov	esi, esp
	push	10240					; 00002800H
	mov	eax, DWORD PTR _pbReadData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwReadSize$[ebp], eax

; 155  : 		if (i+dwReadSize > dwSignDataEnd)

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _dwReadSize$[ebp]
	cmp	eax, DWORD PTR _dwSignDataEnd$[ebp]
	jbe	SHORT $LN5@LoadEntrie

; 156  : 			hasher.AddData(dwSignDataEnd - i, pbReadData);

	mov	eax, DWORD PTR _pbReadData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwSignDataEnd$[ebp]
	sub	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _hasher$[ebp]
	call	?AddData@CHasher@@QAEXKPAE@Z		; CHasher::AddData

; 157  : 		else

	jmp	SHORT $LN4@LoadEntrie
$LN5@LoadEntrie:

; 158  : 			hasher.AddData(dwReadSize, pbReadData);

	mov	eax, DWORD PTR _pbReadData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwReadSize$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _hasher$[ebp]
	call	?AddData@CHasher@@QAEXKPAE@Z		; CHasher::AddData
$LN4@LoadEntrie:

; 159  : 		i += dwReadSize;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _dwReadSize$[ebp]
	mov	DWORD PTR _i$[ebp], eax

; 160  : 	}

	jmp	$LN7@LoadEntrie
$LN6@LoadEntrie:

; 161  : 	delete[] pbReadData;

	mov	eax, DWORD PTR _pbReadData$[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 162  : 
; 163  : 	// 3. Load the key and verify the signature
; 164  : 	BOOL bVerified;
; 165  : 
; 166  : 	keyPair.LoadFromMemory(RSA_PUB_KEY_SIZE, (BYTE*)RSA_PUB_KEY, RSA_XOR_KEY);

	push	170					; 000000aaH
	push	OFFSET _RSA_PUB_KEY
	push	148					; 00000094H
	lea	ecx, DWORD PTR _keyPair$[ebp]
	call	?LoadFromMemory@CKeyPair@@QAEXKPAEE@Z	; CKeyPair::LoadFromMemory

; 167  : 	signer.SetSignature(dwSignSize, pbSignature);

	mov	eax, DWORD PTR _pbSignature$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwSignSize$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _signer$[ebp]
	call	?SetSignature@CSigner@@QAEXKPAE@Z	; CSigner::SetSignature

; 168  : 	bVerified = signer.VerifySignature(&hasher, &keyPair);

	lea	eax, DWORD PTR _keyPair$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hasher$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _signer$[ebp]
	call	?VerifySignature@CSigner@@QAEHPAVCHasher@@PAVCKeyPair@@@Z ; CSigner::VerifySignature
	mov	DWORD PTR _bVerified$[ebp], eax

; 169  : 
; 170  : 	delete[] pbSignature;

	mov	eax, DWORD PTR _pbSignature$[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 171  : 
; 172  : 	// Set the obfuscation decoding mask based on the bVerified value
; 173  : 	m_dwObfsMask = -((INT)bVerified);		// if its 1 (true), then 0xffffffff, else 0.

	mov	eax, DWORD PTR _bVerified$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+2349], eax

; 174  : 
; 175  : 	// 4. Decode the TEA encrypted archive entry
; 176  : 
; 177  : 	m_pStream->Seek((dwSignDataEnd - m_dwNumEntries*sizeof(SAA_ENTRY)));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2353]
	shl	ecx, 3
	mov	edx, DWORD PTR _dwSignDataEnd$[ebp]
	sub	edx, ecx
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 178  : 	DWORD dwFilePos = m_pStream->Tell();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwFilePos$[ebp], eax

; 179  : 	m_pStream->Read(m_pEntries, sizeof(SAA_ENTRY), m_dwNumEntries);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+2353]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 285				; 0000011dH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 180  : 	dwFilePos = m_pStream->Tell();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwFilePos$[ebp], eax

; 181  : 
; 182  : 	tinyEnc.SetKey((BYTE*)TEA_KEY, TEA_XOR_KEY);

	push	170					; 000000aaH
	push	OFFSET _TEA_KEY
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	?SetKey@CTinyEncrypt@@QAEXPAEE@Z	; CTinyEncrypt::SetKey

; 183  : 	tinyEnc.DecryptData(sizeof(SAA_ENTRY)*m_dwNumEntries, reinterpret_cast<BYTE*>(m_pEntries));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 285				; 0000011dH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+2353]
	shl	edx, 3
	push	edx
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	?DecryptData@CTinyEncrypt@@QAEXKPAE@Z	; CTinyEncrypt::DecryptData

; 184  : 
; 185  : 	// 5. Build a binary tree of the entries.. it makes searching for files faster (since we have a 
; 186  : 	//    huge index with fake entries)
; 187  : 	for(i=0; i<m_dwNumEntries; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@LoadEntrie
$LN2@LoadEntrie:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@LoadEntrie:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+2353]
	jae	SHORT $LN1@LoadEntrie

; 188  : 		m_EntryBTreeRoot.AddEntry(&m_pEntries[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+285]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 2333				; 0000091dH
	call	?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z ; _AFS_ENTRYBT_NODE::AddEntry

; 189  : 	}

	jmp	SHORT $LN2@LoadEntrie
$LN1@LoadEntrie:

; 190  : 
; 191  : 	// Done.
; 192  : 
; 193  : 	m_bEntriesLoaded = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1

; 194  : 
; 195  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	call	??1CTinyEncrypt@@QAE@XZ			; CTinyEncrypt::~CTinyEncrypt
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _signer$[ebp]
	call	??1CSigner@@QAE@XZ			; CSigner::~CSigner
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _hasher$[ebp]
	call	??1CHasher@@QAE@XZ			; CHasher::~CHasher
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _keyPair$[ebp]
	call	??1CKeyPair@@QAE@XZ			; CKeyPair::~CKeyPair
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _context$[ebp]
	call	??1CCryptoContext@@QAE@XZ		; CCryptoContext::~CCryptoContext
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@LoadEntrie
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@LoadEntrie:
	DD	5
	DD	$LN21@LoadEntrie
$LN21@LoadEntrie:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN15@LoadEntrie
	DD	-52					; ffffffccH
	DD	8
	DD	$LN16@LoadEntrie
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN17@LoadEntrie
	DD	-84					; ffffffacH
	DD	8
	DD	$LN18@LoadEntrie
	DD	-108					; ffffff94H
	DD	16					; 00000010H
	DD	$LN19@LoadEntrie
$LN19@LoadEntrie:
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	121					; 00000079H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN18@LoadEntrie:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN17@LoadEntrie:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN16@LoadEntrie:
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN15@LoadEntrie:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$0:
	lea	ecx, DWORD PTR _context$[ebp]
	jmp	??1CCryptoContext@@QAE@XZ		; CCryptoContext::~CCryptoContext
__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$1:
	lea	ecx, DWORD PTR _keyPair$[ebp]
	jmp	??1CKeyPair@@QAE@XZ			; CKeyPair::~CKeyPair
__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$2:
	lea	ecx, DWORD PTR _hasher$[ebp]
	jmp	??1CHasher@@QAE@XZ			; CHasher::~CHasher
__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$3:
	lea	ecx, DWORD PTR _signer$[ebp]
	jmp	??1CSigner@@QAE@XZ			; CSigner::~CSigner
__unwindfunclet$?LoadEntries@CArchiveFS@@AAEXXZ$4:
	lea	ecx, DWORD PTR _tinyEnc$[ebp]
	jmp	??1CTinyEncrypt@@QAE@XZ			; CTinyEncrypt::~CTinyEncrypt
__ehhandler$?LoadEntries@CArchiveFS@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-464]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadEntries@CArchiveFS@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadEntries@CArchiveFS@@AAEXXZ ENDP			; CArchiveFS::LoadEntries
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_AFS_ENTRYBT_NODE@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_AFS_ENTRYBT_NODE@@QAEPAXI@Z PROC			; _AFS_ENTRYBT_NODE::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_AFS_ENTRYBT_NODE@@QAE@XZ		; _AFS_ENTRYBT_NODE::~_AFS_ENTRYBT_NODE
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_AFS_ENTRYBT_NODE@@QAEPAXI@Z ENDP			; _AFS_ENTRYBT_NODE::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.h
;	COMDAT ??1_AFS_ENTRYBT_NODE@@QAE@XZ
_TEXT	SEGMENT
tv79 = -268						; size = 4
tv71 = -268						; size = 4
$T1 = -260						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
$T4 = -224						; size = 4
$T5 = -212						; size = 4
_this$ = -8						; size = 4
??1_AFS_ENTRYBT_NODE@@QAE@XZ PROC			; _AFS_ENTRYBT_NODE::~_AFS_ENTRYBT_NODE, COMDAT
; _this$ = ecx

; 91   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 		if (this->pLNode != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@AFS_ENTRYB

; 93   : 			delete this->pLNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@AFS_ENTRYB
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_G_AFS_ENTRYBT_NODE@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN3@AFS_ENTRYB
$LN6@AFS_ENTRYB:
	mov	DWORD PTR tv71[ebp], 0
$LN3@AFS_ENTRYB:

; 94   : 		if (this->pRNode != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@AFS_ENTRYB

; 95   : 			delete this->pRNode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN8@AFS_ENTRYB
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_G_AFS_ENTRYBT_NODE@@QAEPAXI@Z
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN2@AFS_ENTRYB
$LN8@AFS_ENTRYB:
	mov	DWORD PTR tv79[ebp], 0
$LN2@AFS_ENTRYB:

; 96   : 		if (this->pbData != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@AFS_ENTRYB

; 97   : 			delete[] this->pbData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@AFS_ENTRYB:

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_AFS_ENTRYBT_NODE@@QAE@XZ ENDP			; _AFS_ENTRYBT_NODE::~_AFS_ENTRYBT_NODE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.h
;	COMDAT ?FindEntry@_AFS_ENTRYBT_NODE@@QAEPAU1@K@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwHash$ = 8						; size = 4
?FindEntry@_AFS_ENTRYBT_NODE@@QAEPAU1@K@Z PROC		; _AFS_ENTRYBT_NODE::FindEntry, COMDAT
; _this$ = ecx

; 72   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 		if (this->pEntry->dwFileNameHash == dwHash) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _dwHash$[ebp]
	jne	SHORT $LN8@FindEntry

; 74   : 			return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN9@FindEntry

; 75   : 		} else {

	jmp	SHORT $LN9@FindEntry
$LN8@FindEntry:

; 76   : 			if (dwHash < this->pEntry->dwFileNameHash) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _dwHash$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN6@FindEntry

; 77   : 				if (this->pLNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@FindEntry

; 78   : 					return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@FindEntry

; 79   : 				else

	jmp	SHORT $LN4@FindEntry
$LN5@FindEntry:

; 80   : 					return this->pLNode->FindEntry(dwHash);

	mov	eax, DWORD PTR _dwHash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?FindEntry@_AFS_ENTRYBT_NODE@@QAEPAU1@K@Z ; _AFS_ENTRYBT_NODE::FindEntry
	jmp	SHORT $LN9@FindEntry
$LN4@FindEntry:

; 81   : 			} else {

	jmp	SHORT $LN9@FindEntry
$LN6@FindEntry:

; 82   : 				if (this->pRNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@FindEntry

; 83   : 					return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@FindEntry

; 84   : 				else

	jmp	SHORT $LN9@FindEntry
$LN2@FindEntry:

; 85   : 					return this->pRNode->FindEntry(dwHash);

	mov	eax, DWORD PTR _dwHash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?FindEntry@_AFS_ENTRYBT_NODE@@QAEPAU1@K@Z ; _AFS_ENTRYBT_NODE::FindEntry
$LN9@FindEntry:

; 86   : 			}	
; 87   : 		}
; 88   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindEntry@_AFS_ENTRYBT_NODE@@QAEPAU1@K@Z ENDP		; _AFS_ENTRYBT_NODE::FindEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.h
;	COMDAT ?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z
_TEXT	SEGMENT
tv128 = -268						; size = 4
tv82 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pSAAEntry$ = 8						; size = 4
?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z PROC	; _AFS_ENTRYBT_NODE::AddEntry, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 		if (this->pEntry == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@AddEntry

; 55   : 			this->pEntry = pSAAEntry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSAAEntry$[ebp]
	mov	DWORD PTR [eax], ecx

; 56   : 		} else {

	jmp	$LN9@AddEntry
$LN8@AddEntry:

; 57   : 			if (pSAAEntry->dwFileNameHash < this->pEntry->dwFileNameHash) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pSAAEntry$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	jae	SHORT $LN6@AddEntry

; 58   : 				if (this->pLNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@AddEntry

; 59   : 					this->pLNode = new _AFS_ENTRYBT_NODE(pSAAEntry);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN11@AddEntry
	mov	eax, DWORD PTR _pSAAEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0_AFS_ENTRYBT_NODE@@QAE@PAU_SAA_ENTRY@@@Z ; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN12@AddEntry
$LN11@AddEntry:
	mov	DWORD PTR tv82[ebp], 0
$LN12@AddEntry:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+4], eax

; 60   : 				else

	jmp	SHORT $LN4@AddEntry
$LN5@AddEntry:

; 61   : 					this->pLNode->AddEntry(pSAAEntry);

	mov	eax, DWORD PTR _pSAAEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z ; _AFS_ENTRYBT_NODE::AddEntry
$LN4@AddEntry:

; 62   : 			} else {

	jmp	SHORT $LN9@AddEntry
$LN6@AddEntry:

; 63   : 				if (this->pRNode == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@AddEntry

; 64   : 					this->pRNode = new _AFS_ENTRYBT_NODE(pSAAEntry);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN13@AddEntry
	mov	eax, DWORD PTR _pSAAEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0_AFS_ENTRYBT_NODE@@QAE@PAU_SAA_ENTRY@@@Z ; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN14@AddEntry
$LN13@AddEntry:
	mov	DWORD PTR tv128[ebp], 0
$LN14@AddEntry:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR [edx+8], eax

; 65   : 				else

	jmp	SHORT $LN9@AddEntry
$LN2@AddEntry:

; 66   : 					this->pRNode->AddEntry(pSAAEntry);

	mov	eax, DWORD PTR _pSAAEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z ; _AFS_ENTRYBT_NODE::AddEntry
$LN9@AddEntry:

; 67   : 			}
; 68   : 		}
; 69   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddEntry@_AFS_ENTRYBT_NODE@@QAEXPAU_SAA_ENTRY@@@Z ENDP	; _AFS_ENTRYBT_NODE::AddEntry
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.h
;	COMDAT ??0_AFS_ENTRYBT_NODE@@QAE@PAU_SAA_ENTRY@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pSAAEntry$ = 8						; size = 4
??0_AFS_ENTRYBT_NODE@@QAE@PAU_SAA_ENTRY@@@Z PROC	; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE, COMDAT
; _this$ = ecx

; 44   : 	_AFS_ENTRYBT_NODE(SAA_ENTRY* pSAAEntry)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	{
; 46   : 		this->pEntry = pSAAEntry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSAAEntry$[ebp]
	mov	DWORD PTR [eax], ecx

; 47   : 		this->pLNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 48   : 		this->pRNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 49   : 		this->pbData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 50   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0_AFS_ENTRYBT_NODE@@QAE@PAU_SAA_ENTRY@@@Z ENDP	; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivefs.h
;	COMDAT ??0_AFS_ENTRYBT_NODE@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_AFS_ENTRYBT_NODE@@QAE@XZ PROC			; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE, COMDAT
; _this$ = ecx

; 36   : 	_AFS_ENTRYBT_NODE()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 	{
; 38   : 		this->pEntry = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 39   : 		this->pLNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 40   : 		this->pRNode = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 41   : 		this->pbData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 42   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_AFS_ENTRYBT_NODE@@QAE@XZ ENDP			; _AFS_ENTRYBT_NODE::_AFS_ENTRYBT_NODE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivecommon.h
;	COMDAT ?Read@_SAA_FILE_HEADER@@QAEXPAVCAbstractStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pStream$ = 8						; size = 4
?Read@_SAA_FILE_HEADER@@QAEXPAVCAbstractStream@@@Z PROC	; _SAA_FILE_HEADER::Read, COMDAT
; _this$ = ecx

; 125  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  : 		pStream->Read(&headerV1, sizeof(DWORD)*2 + sizeof(WORD)*dwFakeDataSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	lea	edx, DWORD PTR [ecx+ecx+8]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pStream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 127  : 		pStream->Read(&headerV2, sizeof(VER2_HEADER));

	mov	esi, esp
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 248				; 000000f8H
	push	eax
	mov	ecx, DWORD PTR _pStream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pStream$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 128  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Read@_SAA_FILE_HEADER@@QAEXPAVCAbstractStream@@@Z ENDP	; _SAA_FILE_HEADER::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivecommon.h
;	COMDAT ?XorV2Identifier@_SAA_FILE_HEADER@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?XorV2Identifier@_SAA_FILE_HEADER@@QAEXXZ PROC		; _SAA_FILE_HEADER::XorV2Identifier, COMDAT
; _this$ = ecx

; 114  : 	void XorV2Identifier() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 		this->headerV2.dwCompleteID ^= this->headerV2.dwXORKey;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+248]
	xor	edx, DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], edx

; 116  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?XorV2Identifier@_SAA_FILE_HEADER@@QAEXXZ ENDP		; _SAA_FILE_HEADER::XorV2Identifier
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivecommon.h
;	COMDAT ?VerifyIdentifier@_SAA_FILE_HEADER@@QAE_NXZ
_TEXT	SEGMENT
tv73 = -208						; size = 4
_this$ = -8						; size = 4
?VerifyIdentifier@_SAA_FILE_HEADER@@QAE_NXZ PROC	; _SAA_FILE_HEADER::VerifyIdentifier, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		return ((headerV2.dwSAMPID == SAA_FILE_ID) && 
; 111  : 				(headerV2.dwVersion == SAA_FILE_VERSION));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	and	ecx, 1048575				; 000fffffH
	cmp	ecx, 537651				; 00083433H
	jne	SHORT $LN3@VerifyIden
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+248]
	shr	eax, 20					; 00000014H
	and	eax, 7
	cmp	eax, 2
	jne	SHORT $LN3@VerifyIden
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@VerifyIden
$LN3@VerifyIden:
	mov	DWORD PTR tv73[ebp], 0
$LN4@VerifyIden:
	mov	al, BYTE PTR tv73[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?VerifyIdentifier@_SAA_FILE_HEADER@@QAE_NXZ ENDP	; _SAA_FILE_HEADER::VerifyIdentifier
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivecommon.h
;	COMDAT ?SizeOf@_SAA_FILE_HEADER@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SizeOf@_SAA_FILE_HEADER@@QAEKXZ PROC			; _SAA_FILE_HEADER::SizeOf, COMDAT
; _this$ = ecx

; 81   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 		return(sizeof(DWORD)*2 + sizeof(WORD)*dwFakeDataSize + sizeof(VER2_HEADER));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	lea	eax, DWORD PTR [ecx+ecx+16]

; 83   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SizeOf@_SAA_FILE_HEADER@@QAEKXZ ENDP			; _SAA_FILE_HEADER::SizeOf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\archivecommon.h
;	COMDAT ??0_SAA_FILE_HEADER@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_SAA_FILE_HEADER@@QAE@XZ PROC			; _SAA_FILE_HEADER::_SAA_FILE_HEADER, COMDAT
; _this$ = ecx

; 75   : 	_SAA_FILE_HEADER()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 	{
; 77   : 		dwFakeDataSize = SAA_MAX_FAKEDATA;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+256], 120		; 00000078H

; 78   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_SAA_FILE_HEADER@@QAE@XZ ENDP			; _SAA_FILE_HEADER::_SAA_FILE_HEADER
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCMemoryStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCMemoryStream@@UAEPAXI@Z PROC			; CMemoryStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMemoryStream@@UAE@XZ		; CMemoryStream::~CMemoryStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMemoryStream@@UAEPAXI@Z ENDP			; CMemoryStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Tell@CMemoryStream@@UAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Tell@CMemoryStream@@UAEIXZ PROC			; CMemoryStream::Tell, COMDAT
; _this$ = ecx

; 260  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 261  : 		return m_nOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 262  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Tell@CMemoryStream@@UAEIXZ ENDP			; CMemoryStream::Tell
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Seek@CMemoryStream@@UAEXHW4eSeek@CAbstractStream@@@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_nOffset$ = 8						; size = 4
_seekMode$ = 12						; size = 4
?Seek@CMemoryStream@@UAEXHW4eSeek@CAbstractStream@@@Z PROC ; CMemoryStream::Seek, COMDAT
; _this$ = ecx

; 244  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  : 		switch(seekMode)

	mov	eax, DWORD PTR _seekMode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@Seek
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@Seek
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN2@Seek
	jmp	SHORT $LN5@Seek
$LN4@Seek:

; 246  : 		{
; 247  : 			case SeekStart:
; 248  : 				m_nOffset = nOffset; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nOffset$[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@Seek
$LN3@Seek:

; 249  : 			case SeekCurrent:
; 250  : 				m_nOffset += nOffset; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nOffset$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
	jmp	SHORT $LN5@Seek
$LN2@Seek:

; 251  : 			case SeekEnd:
; 252  : 				m_nOffset = m_nLength + nOffset; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _nOffset$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@Seek:

; 253  : 		}
; 254  : 
; 255  : 		if (m_nOffset > m_nLength)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN7@Seek

; 256  : 			m_nOffset = m_nLength;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+8], edx
$LN7@Seek:

; 257  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Seek@CMemoryStream@@UAEXHW4eSeek@CAbstractStream@@@Z ENDP ; CMemoryStream::Seek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Write@CMemoryStream@@UAEIPBXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nNumberOfBytes$ = 12					; size = 4
?Write@CMemoryStream@@UAEIPBXH@Z PROC			; CMemoryStream::Write, COMDAT
; _this$ = ecx

; 233  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		if (m_nOffset + nNumberOfBytes > m_nLength)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nNumberOfBytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN1@Write

; 235  : 			nNumberOfBytes = m_nLength - m_nOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _nNumberOfBytes$[ebp], edx
$LN1@Write:

; 236  : 
; 237  : 		memcpy(m_pbBuffer + m_nOffset, pbBuffer, nNumberOfBytes);

	mov	eax, DWORD PTR _nNumberOfBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 238  : 		m_nOffset += nNumberOfBytes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nNumberOfBytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 239  : 
; 240  : 		return nNumberOfBytes;

	mov	eax, DWORD PTR _nNumberOfBytes$[ebp]

; 241  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Write@CMemoryStream@@UAEIPBXH@Z ENDP			; CMemoryStream::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Read@CMemoryStream@@UAEIPAXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nNumberOfBytes$ = 12					; size = 4
?Read@CMemoryStream@@UAEIPAXH@Z PROC			; CMemoryStream::Read, COMDAT
; _this$ = ecx

; 222  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 		if (m_nOffset + nNumberOfBytes > m_nLength)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nNumberOfBytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jbe	SHORT $LN1@Read

; 224  : 			nNumberOfBytes = m_nLength - m_nOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _nNumberOfBytes$[ebp], edx
$LN1@Read:

; 225  : 
; 226  : 		memcpy(pbBuffer, m_pbBuffer + m_nOffset, nNumberOfBytes);

	mov	eax, DWORD PTR _nNumberOfBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _pbBuffer$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 227  : 		m_nOffset += nNumberOfBytes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _nNumberOfBytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 228  : 
; 229  : 		return nNumberOfBytes;

	mov	eax, DWORD PTR _nNumberOfBytes$[ebp]

; 230  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Read@CMemoryStream@@UAEIPAXH@Z ENDP			; CMemoryStream::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ??1CMemoryStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CMemoryStream@@UAE@XZ PROC				; CMemoryStream::~CMemoryStream, COMDAT
; _this$ = ecx

; 214  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMemoryStream@@6B@

; 215  : 		if (m_bCopy && m_pbBuffer)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN2@CMemoryStr
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@CMemoryStr

; 216  : 		{
; 217  : 			free(m_pbBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_free
	add	esp, 4
$LN2@CMemoryStr:

; 218  : 		}
; 219  : 	}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CAbstractStream@@UAE@XZ		; CAbstractStream::~CAbstractStream
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMemoryStream@@UAE@XZ ENDP				; CMemoryStream::~CMemoryStream
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ??0CMemoryStream@@QAE@PAEI_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nLength$ = 12						; size = 4
_bCopy$ = 16						; size = 1
??0CMemoryStream@@QAE@PAEI_N@Z PROC			; CMemoryStream::CMemoryStream, COMDAT
; _this$ = ecx

; 196  : 	CMemoryStream(unsigned char *pbBuffer, unsigned int nLength, bool bCopy = true)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CAbstractStream@@QAE@XZ		; CAbstractStream::CAbstractStream
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMemoryStream@@6B@

; 197  : 	{
; 198  : 		m_bCopy = bCopy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bCopy$[ebp]
	mov	BYTE PTR [eax+16], cl

; 199  : 		m_nOffset = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 200  : 		m_nLength = nLength;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nLength$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 201  : 
; 202  : 		if (bCopy)

	movzx	eax, BYTE PTR _bCopy$[ebp]
	test	eax, eax
	je	SHORT $LN2@CMemoryStr

; 203  : 		{
; 204  : 			m_pbBuffer = (unsigned char *)malloc(nLength);

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 205  : 			memcpy(m_pbBuffer, pbBuffer, nLength);

	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 206  : 		}
; 207  : 		else

	jmp	SHORT $LN3@CMemoryStr
$LN2@CMemoryStr:

; 208  : 		{
; 209  : 			m_pbBuffer = pbBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pbBuffer$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN3@CMemoryStr:

; 210  : 		}
; 211  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CMemoryStream@@QAE@PAEI_N@Z ENDP			; CMemoryStream::CMemoryStream
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCFileStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCFileStream@@UAEPAXI@Z PROC				; CFileStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFileStream@@UAE@XZ			; CFileStream::~CFileStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFileStream@@UAEPAXI@Z ENDP				; CFileStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Tell@CFileStream@@UAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Tell@CFileStream@@UAEIXZ PROC				; CFileStream::Tell, COMDAT
; _this$ = ecx

; 180  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 		return (unsigned int)ftell(m_fiFile);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_ftell
	add	esp, 4

; 182  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Tell@CFileStream@@UAEIXZ ENDP				; CFileStream::Tell
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Seek@CFileStream@@UAEXHW4eSeek@CAbstractStream@@@Z
_TEXT	SEGMENT
tv64 = -220						; size = 4
_mode$ = -20						; size = 4
_this$ = -8						; size = 4
_nOffset$ = 8						; size = 4
_seekMode$ = 12						; size = 4
?Seek@CFileStream@@UAEXHW4eSeek@CAbstractStream@@@Z PROC ; CFileStream::Seek, COMDAT
; _this$ = ecx

; 164  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  : 		int mode = 0;

	mov	DWORD PTR _mode$[ebp], 0

; 166  : 		switch (seekMode)

	mov	eax, DWORD PTR _seekMode$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN2@Seek
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN3@Seek
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN1@Seek
	jmp	SHORT $LN4@Seek
$LN3@Seek:

; 167  : 		{
; 168  : 			case SeekCurrent:
; 169  : 				mode = SEEK_CUR; break;

	mov	DWORD PTR _mode$[ebp], 1
	jmp	SHORT $LN4@Seek
$LN2@Seek:

; 170  : 			case SeekStart:
; 171  : 				mode = SEEK_SET; break;

	mov	DWORD PTR _mode$[ebp], 0
	jmp	SHORT $LN4@Seek
$LN1@Seek:

; 172  : 			case SeekEnd:
; 173  : 				mode = SEEK_END; break;

	mov	DWORD PTR _mode$[ebp], 2
$LN4@Seek:

; 174  : 		}
; 175  : 
; 176  : 		fseek(m_fiFile, nOffset, seekMode);

	mov	eax, DWORD PTR _seekMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nOffset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 177  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Seek@CFileStream@@UAEXHW4eSeek@CAbstractStream@@@Z ENDP ; CFileStream::Seek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Write@CFileStream@@UAEIPBXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nElementSize$ = 12					; size = 4
_nNumberOfElements$ = 16				; size = 4
?Write@CFileStream@@UAEIPBXHH@Z PROC			; CFileStream::Write, COMDAT
; _this$ = ecx

; 159  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  : 		return (unsigned int)fwrite(pbBuffer, nElementSize, nNumberOfElements, m_fiFile);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _nNumberOfElements$[ebp]
	push	edx
	mov	eax, DWORD PTR _nElementSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbBuffer$[ebp]
	push	ecx
	call	_fwrite
	add	esp, 16					; 00000010H

; 161  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Write@CFileStream@@UAEIPBXHH@Z ENDP			; CFileStream::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Write@CFileStream@@UAEIPBXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nNumberOfBytes$ = 12					; size = 4
?Write@CFileStream@@UAEIPBXH@Z PROC			; CFileStream::Write, COMDAT
; _this$ = ecx

; 154  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		return (unsigned int)fwrite(pbBuffer, 1, nNumberOfBytes, m_fiFile);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _nNumberOfBytes$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _pbBuffer$[ebp]
	push	eax
	call	_fwrite
	add	esp, 16					; 00000010H

; 156  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Write@CFileStream@@UAEIPBXH@Z ENDP			; CFileStream::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Read@CFileStream@@UAEIPAXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nElementSize$ = 12					; size = 4
_nNumberOfElements$ = 16				; size = 4
?Read@CFileStream@@UAEIPAXHH@Z PROC			; CFileStream::Read, COMDAT
; _this$ = ecx

; 149  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 150  : 		return (unsigned int)fread(pbBuffer, nElementSize, nNumberOfElements, m_fiFile);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _nNumberOfElements$[ebp]
	push	edx
	mov	eax, DWORD PTR _nElementSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbBuffer$[ebp]
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 151  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Read@CFileStream@@UAEIPAXHH@Z ENDP			; CFileStream::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Read@CFileStream@@UAEIPAXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nNumberOfBytes$ = 12					; size = 4
?Read@CFileStream@@UAEIPAXH@Z PROC			; CFileStream::Read, COMDAT
; _this$ = ecx

; 144  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (unsigned int)fread(pbBuffer, 1, nNumberOfBytes, m_fiFile);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _nNumberOfBytes$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _pbBuffer$[ebp]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H

; 146  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Read@CFileStream@@UAEIPAXH@Z ENDP			; CFileStream::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Close@CFileStream@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Close@CFileStream@@UAEXXZ PROC				; CFileStream::Close, COMDAT
; _this$ = ecx

; 135  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 136  : 		if (m_fiFile)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Close

; 137  : 		{
; 138  : 			fclose(m_fiFile);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_fclose
	add	esp, 4

; 139  : 			m_fiFile = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@Close:

; 140  : 		}
; 141  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CFileStream@@UAEXXZ ENDP				; CFileStream::Close
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?IsOpen@CFileStream@@UAE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?IsOpen@CFileStream@@UAE_NXZ PROC			; CFileStream::IsOpen, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 		return (m_fiFile != NULL);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@IsOpen
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsOpen
$LN3@IsOpen:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsOpen:
	mov	al, BYTE PTR tv66[ebp]

; 132  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOpen@CFileStream@@UAE_NXZ ENDP			; CFileStream::IsOpen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Open@CFileStream@@UAE_NPBDW4eType@1@W4eMode@1@@Z
_TEXT	SEGMENT
tv95 = -244						; size = 4
tv78 = -244						; size = 4
$T1 = -236						; size = 4
_nPos$ = -32						; size = 4
_szMode$ = -20						; size = 4
_this$ = -8						; size = 4
_szFilename$ = 8					; size = 4
_type$ = 12						; size = 4
_mode$ = 16						; size = 4
?Open@CFileStream@@UAE_NPBDW4eType@1@W4eMode@1@@Z PROC	; CFileStream::Open, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		if (m_fiFile)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN12@Open

; 96   : 			Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@Open:

; 97   : 
; 98   : 		char szMode[4];
; 99   : 		int nPos = 0;

	mov	DWORD PTR _nPos$[ebp], 0

; 100  : 		szMode[0] = szMode[1] = szMode[2] = szMode[3] = 0;

	mov	eax, 1
	imul	ecx, eax, 3
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 4
	jae	SHORT $LN15@Open
	jmp	SHORT $LN16@Open
$LN15@Open:
	call	___report_rangecheckfailure
$LN16@Open:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _szMode$[ebp+edx], 0
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _szMode$[ebp+eax], 0
	mov	ecx, 1
	shl	ecx, 0
	mov	BYTE PTR _szMode$[ebp+ecx], 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	BYTE PTR _szMode$[ebp+eax], 0

; 101  : 		
; 102  : 		switch(mode)

	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 3
	ja	SHORT $LN10@Open
	mov	ecx, DWORD PTR tv78[ebp]
	jmp	DWORD PTR $LN20@Open[ecx*4]
$LN9@Open:

; 103  : 		{
; 104  : 			case ModeRead:
; 105  : 				szMode[nPos++] = 'r'; break;

	mov	eax, DWORD PTR _nPos$[ebp]
	mov	BYTE PTR _szMode$[ebp+eax], 114		; 00000072H
	mov	ecx, DWORD PTR _nPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nPos$[ebp], ecx
	jmp	SHORT $LN10@Open
$LN8@Open:

; 106  : 			case ModeWrite:
; 107  : 				szMode[nPos++] = 'w'; break;

	mov	eax, DWORD PTR _nPos$[ebp]
	mov	BYTE PTR _szMode$[ebp+eax], 119		; 00000077H
	mov	ecx, DWORD PTR _nPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nPos$[ebp], ecx
	jmp	SHORT $LN10@Open
$LN7@Open:

; 108  : 			case ModeReadWrite:
; 109  : 				szMode[nPos++] = 'r'; szMode[nPos++] = '+'; break;

	mov	eax, DWORD PTR _nPos$[ebp]
	mov	BYTE PTR _szMode$[ebp+eax], 114		; 00000072H
	mov	ecx, DWORD PTR _nPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nPos$[ebp], ecx
	mov	eax, DWORD PTR _nPos$[ebp]
	mov	BYTE PTR _szMode$[ebp+eax], 43		; 0000002bH
	mov	ecx, DWORD PTR _nPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nPos$[ebp], ecx
	jmp	SHORT $LN10@Open
$LN6@Open:

; 110  : 			case ModeAppend:
; 111  : 				szMode[nPos++] = 'a'; break;

	mov	eax, DWORD PTR _nPos$[ebp]
	mov	BYTE PTR _szMode$[ebp+eax], 97		; 00000061H
	mov	ecx, DWORD PTR _nPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nPos$[ebp], ecx
$LN10@Open:

; 112  : 		}
; 113  : 		
; 114  : 		switch(type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv95[ebp], eax
	cmp	DWORD PTR tv95[ebp], 0
	je	SHORT $LN3@Open
	cmp	DWORD PTR tv95[ebp], 1
	je	SHORT $LN2@Open
	jmp	SHORT $LN4@Open
$LN3@Open:

; 115  : 		{
; 116  : 			case TypeText:
; 117  : 				szMode[nPos++] = 't'; break;

	mov	eax, DWORD PTR _nPos$[ebp]
	mov	BYTE PTR _szMode$[ebp+eax], 116		; 00000074H
	mov	ecx, DWORD PTR _nPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nPos$[ebp], ecx
	jmp	SHORT $LN4@Open
$LN2@Open:

; 118  : 			case TypeBinary:
; 119  : 				szMode[nPos++] = 'b'; break;

	mov	eax, DWORD PTR _nPos$[ebp]
	mov	BYTE PTR _szMode$[ebp+eax], 98		; 00000062H
	mov	ecx, DWORD PTR _nPos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nPos$[ebp], ecx
$LN4@Open:

; 120  : 		}
; 121  : 
; 122  : 		m_fiFile = fopen(szFilename, szMode);

	lea	eax, DWORD PTR _szMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szFilename$[ebp]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 123  : 		if (!m_fiFile)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@Open

; 124  : 			return false;

	xor	al, al
	jmp	SHORT $LN14@Open
$LN1@Open:

; 125  : 
; 126  : 		return true;

	mov	al, 1
$LN14@Open:

; 127  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@Open
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN19@Open:
	DD	1
	DD	$LN18@Open
$LN18@Open:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN17@Open
$LN17@Open:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
	npad	1
$LN20@Open:
	DD	$LN9@Open
	DD	$LN7@Open
	DD	$LN6@Open
	DD	$LN8@Open
?Open@CFileStream@@UAE_NPBDW4eType@1@W4eMode@1@@Z ENDP	; CFileStream::Open
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ??1CFileStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CFileStream@@UAE@XZ PROC				; CFileStream::~CFileStream, COMDAT
; _this$ = ecx

; 88   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFileStream@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFileStream@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 89   : 		if (m_fiFile)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@CFileStrea

; 90   : 			Close();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CFileStream@@UAEXXZ		; CFileStream::Close
$LN2@CFileStrea:

; 91   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CAbstractStream@@UAE@XZ		; CAbstractStream::~CAbstractStream
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFileStream@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CAbstractStream@@UAE@XZ		; CAbstractStream::~CAbstractStream
__ehhandler$??1CFileStream@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFileStream@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFileStream@@UAE@XZ ENDP				; CFileStream::~CFileStream
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_szFilename$ = 8					; size = 4
_type$ = 12						; size = 4
_mode$ = 16						; size = 4
??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z PROC	; CFileStream::CFileStream, COMDAT
; _this$ = ecx

; 81   : 	CFileStream(const char *szFilename, eType type, eMode mode)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CAbstractStream@@QAE@XZ		; CAbstractStream::CAbstractStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFileStream@@6B@

; 82   : 	{
; 83   : 		m_fiFile = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 84   : 		Open(szFilename, type, mode);

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szFilename$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Open@CFileStream@@UAE_NPBDW4eType@1@W4eMode@1@@Z ; CFileStream::Open

; 85   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CAbstractStream@@UAE@XZ		; CAbstractStream::~CAbstractStream
__ehhandler$??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFileStream@@QAE@PBDW4eType@0@W4eMode@0@@Z ENDP	; CFileStream::CFileStream
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCAbstractStream@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCAbstractStream@@UAEPAXI@Z PROC			; CAbstractStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CAbstractStream@@UAE@XZ		; CAbstractStream::~CAbstractStream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCAbstractStream@@UAEPAXI@Z ENDP			; CAbstractStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Seek@CAbstractStream@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nOffset$ = 8						; size = 4
?Seek@CAbstractStream@@UAEXH@Z PROC			; CAbstractStream::Seek, COMDAT
; _this$ = ecx

; 48   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 		Seek(nOffset, SeekStart);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _nOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 50   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Seek@CAbstractStream@@UAEXH@Z ENDP			; CAbstractStream::Seek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Write@CAbstractStream@@UAEIPBXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nElementSize$ = 12					; size = 4
_nNumberOfElements$ = 16				; size = 4
?Write@CAbstractStream@@UAEIPBXHH@Z PROC		; CAbstractStream::Write, COMDAT
; _this$ = ecx

; 41   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 		return Write(pbBuffer, nNumberOfElements * nElementSize);

	mov	eax, DWORD PTR _nNumberOfElements$[ebp]
	imul	eax, DWORD PTR _nElementSize$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pbBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Write@CAbstractStream@@UAEIPBXHH@Z ENDP		; CAbstractStream::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ?Read@CAbstractStream@@UAEIPAXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pbBuffer$ = 8						; size = 4
_nElementSize$ = 12					; size = 4
_nNumberOfElements$ = 16				; size = 4
?Read@CAbstractStream@@UAEIPAXHH@Z PROC			; CAbstractStream::Read, COMDAT
; _this$ = ecx

; 34   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return Read(pbBuffer, nNumberOfElements * nElementSize);

	mov	eax, DWORD PTR _nNumberOfElements$[ebp]
	imul	eax, DWORD PTR _nElementSize$[ebp]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pbBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Read@CAbstractStream@@UAEIPAXHH@Z ENDP			; CAbstractStream::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ??1CAbstractStream@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CAbstractStream@@UAE@XZ PROC				; CAbstractStream::~CAbstractStream, COMDAT
; _this$ = ecx

; 29   : 	virtual ~CAbstractStream() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CAbstractStream@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CAbstractStream@@UAE@XZ ENDP				; CAbstractStream::~CAbstractStream
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\stream.h
;	COMDAT ??0CAbstractStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CAbstractStream@@QAE@XZ PROC				; CAbstractStream::CAbstractStream, COMDAT
; _this$ = ecx

; 27   : 	CAbstractStream() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CAbstractStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAbstractStream@@QAE@XZ ENDP				; CAbstractStream::CAbstractStream
_TEXT	ENDS
END
