; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\game\util.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?dwPlayerPedPtrs@@3PAKA				; dwPlayerPedPtrs
PUBLIC	?dwHudColors@@3PAKA				; dwHudColors
PUBLIC	?dwUseHudColors@@3PAKA				; dwUseHudColors
_BSS	SEGMENT
?dwPlayerPedPtrs@@3PAKA DD 0ccH DUP (?)			; dwPlayerPedPtrs
?dwUseHudColors@@3PAKA DD 0c8H DUP (?)			; dwUseHudColors
_BSS	ENDS
_DATA	SEGMENT
?dwHudColors@@3PAKA DD 0ff8c13ffH			; dwHudColors
	DD	0c715ffffH
	DD	020b2aaffH
	DD	0dc143cffH
	DD	06495edffH
	DD	0f0e68cffH
	DD	0778899ffH
	DD	0ff1493ffH
	DD	0f4a460ffH
	DD	0ee82eeffH
	DD	0ffd720ffH
	DD	08b4513ffH
	DD	04949a0ffH
	DD	0148b8bffH
	DD	014ff7fffH
	DD	0556b2fffH
	DD	0fd9faffH
	DD	010dc29ffH
	DD	0534081ffH
	DD	0495cdffH
	DD	0ef6ce8ffH
	DD	0bd34daffH
	DD	0247c1bffH
	DD	0c8e5dffH
	DD	0635b03ffH
	DD	0cb7ed3ffH
	DD	065adebffH
	DD	05c1accffH
	DD	0f2f853ffH
	DD	011f891ffH
	DD	07b39aaffH
	DD	053eb10ffH
	DD	054137dffH
	DD	0275222ffH
	DD	0f09f5bffH
	DD	03d0a4fffH
	DD	022f767ffH
	DD	0d63034ffH
	DD	09a6980ffH
	DD	0dfb935ffH
	DD	03793faffH
	DD	090239dffH
	DD	0e9ab2fffH
	DD	0af2ff3ffH
	DD	057f94ffH
	DD	0b98519ffH
	DD	0388eeaffH
	DD	028151ffH
	DD	0a55043ffH
	DD	0de018ffH
	DD	093ab1cffH
	DD	095baf0ffH
	DD	0369976ffH
	DD	018f71fffH
	DD	04b8987ffH
	DD	0491b9effH
	DD	0829dc7ffH
	DD	0bce635ffH
	DD	0cea6dfffH
	DD	020d4adffH
	DD	02d74fdffH
	DD	03c1c0dffH
	DD	012d6d4ffH
	DD	048c000ffH
	DD	02a51e2ffH
	DD	0e3ac12ffH
	DD	0fc42a8ffH
	DD	02fc827ffH
	DD	01a30bfffH
	DD	0b740c2ffH
	DD	042acf5ffH
	DD	02fd9deffH
	DD	0fafb71ffH
	DD	05d1cdffH
	DD	0c471bdffH
	DD	094436effH
	DD	0c1f7ecffH
	DD	0ce79eeffH
	DD	0bd1ef2ffH
	DD	093b7e4ffH
	DD	03214aaffH
	DD	0184d3bffH
	DD	0ae4b99ffH
	DD	07e49d7ffH
	DD	04c436effH
	DD	0fa24ccffH
	DD	0ce76beffH
	DD	0a04e0affH
	DD	09f945cffH
	DD	0dcde3dffH
	DD	010c9c5ffH
	DD	070524dffH
	DD	0be472ffH
	DD	08a2cd7ffH
	DD	06152c2ffH
	DD	0cf72a9ffH
	DD	0e59338ffH
	DD	0eedc2dffH
	DD	0d8c762ffH
	DD	03fe65cffH
	DD	0ff8c13ffH
	DD	0c715ffffH
	DD	020b2aaffH
	DD	0dc143cffH
	DD	06495edffH
	DD	0f0e68cffH
	DD	0778899ffH
	DD	0ff1493ffH
	DD	0f4a460ffH
	DD	0ee82eeffH
	DD	0ffd720ffH
	DD	08b4513ffH
	DD	04949a0ffH
	DD	0148b8bffH
	DD	014ff7fffH
	DD	0556b2fffH
	DD	0fd9faffH
	DD	010dc29ffH
	DD	0534081ffH
	DD	0495cdffH
	DD	0ef6ce8ffH
	DD	0bd34daffH
	DD	0247c1bffH
	DD	0c8e5dffH
	DD	0635b03ffH
	DD	0cb7ed3ffH
	DD	065adebffH
	DD	05c1accffH
	DD	0f2f853ffH
	DD	011f891ffH
	DD	07b39aaffH
	DD	053eb10ffH
	DD	054137dffH
	DD	0275222ffH
	DD	0f09f5bffH
	DD	03d0a4fffH
	DD	022f767ffH
	DD	0d63034ffH
	DD	09a6980ffH
	DD	0dfb935ffH
	DD	03793faffH
	DD	090239dffH
	DD	0e9ab2fffH
	DD	0af2ff3ffH
	DD	057f94ffH
	DD	0b98519ffH
	DD	0388eeaffH
	DD	028151ffH
	DD	0a55043ffH
	DD	0de018ffH
	DD	093ab1cffH
	DD	095baf0ffH
	DD	0369976ffH
	DD	018f71fffH
	DD	04b8987ffH
	DD	0491b9effH
	DD	0829dc7ffH
	DD	0bce635ffH
	DD	0cea6dfffH
	DD	020d4adffH
	DD	02d74fdffH
	DD	03c1c0dffH
	DD	012d6d4ffH
	DD	048c000ffH
	DD	02a51e2ffH
	DD	0e3ac12ffH
	DD	0fc42a8ffH
	DD	02fc827ffH
	DD	01a30bfffH
	DD	0b740c2ffH
	DD	042acf5ffH
	DD	02fd9deffH
	DD	0fafb71ffH
	DD	05d1cdffH
	DD	0c471bdffH
	DD	094436effH
	DD	0c1f7ecffH
	DD	0ce79eeffH
	DD	0bd1ef2ffH
	DD	093b7e4ffH
	DD	03214aaffH
	DD	0184d3bffH
	DD	0ae4b99ffH
	DD	07e49d7ffH
	DD	04c436effH
	DD	0fa24ccffH
	DD	0ce76beffH
	DD	0a04e0affH
	DD	09f945cffH
	DD	0dcde3dffH
	DD	010c9c5ffH
	DD	070524dffH
	DD	0be472ffH
	DD	08a2cd7ffH
	DD	06152c2ffH
	DD	0cf72a9ffH
	DD	0e59338ffH
	DD	0eedc2dffH
	DD	0d8c762ffH
	DD	03fe65cffH
_DATA	ENDS
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?ProcessLineOfSight@@YAXPAU_VECTOR@@00PAKHHHHHHHH@Z ; ProcessLineOfSight
PUBLIC	?WorldAddEntity@@YGXPAK@Z			; WorldAddEntity
PUBLIC	?WorldRemoveEntity@@YGXPAK@Z			; WorldRemoveEntity
PUBLIC	?GameDisableCheatCodes@@YGXXZ			; GameDisableCheatCodes
PUBLIC	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z	; GamePool_Ped_GetAt
PUBLIC	?GamePool_Ped_GetIndex@@YGHPAU_PED_TYPE@@@Z	; GamePool_Ped_GetIndex
PUBLIC	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ; GamePool_Vehicle_GetAt
PUBLIC	?GamePool_Vehicle_GetIndex@@YGKPAU_VEHICLE_TYPE@@@Z ; GamePool_Vehicle_GetIndex
PUBLIC	?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z	; GamePool_Object_GetAt
PUBLIC	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ	; GamePool_FindPlayerPed
PUBLIC	?GameGetWeaponModelIDFromWeaponID@@YGHH@Z	; GameGetWeaponModelIDFromWeaponID
PUBLIC	?SetRadarColor@@YGXEK@Z				; SetRadarColor
PUBLIC	?TranslateColorCodeToRGBA@@YGKH@Z		; TranslateColorCodeToRGBA
PUBLIC	?Game_PedStatPrim@@YAHH@Z			; Game_PedStatPrim
PUBLIC	?Game_PedStat@@YAHH@Z				; Game_PedStat
PUBLIC	?GameResetRadarColors@@YAXXZ			; GameResetRadarColors
PUBLIC	?GameIsEntityOnScreen@@YGHPAK@Z			; GameIsEntityOnScreen
PUBLIC	?GamePrepareTrain@@YGXPAU_VEHICLE_TYPE@@@Z	; GamePrepareTrain
PUBLIC	?InitPlayerPedPtrRecords@@YGXXZ			; InitPlayerPedPtrRecords
PUBLIC	?SetPlayerPedPtrRecord@@YGXEK@Z			; SetPlayerPedPtrRecord
PUBLIC	?FindPlayerNumFromPedPtr@@YGEK@Z		; FindPlayerNumFromPedPtr
PUBLIC	?FloatDifference@@YAMMM@Z			; FloatDifference
PUBLIC	?FloatOffset@@YAMMM@Z				; FloatOffset
PUBLIC	?DistanceBetweenHorizontalPoints@@YAMMMMM@Z	; DistanceBetweenHorizontalPoints
PUBLIC	?DistanceBetweenPoints@@YAMMMMMMM@Z		; DistanceBetweenPoints
PUBLIC	?VectorNormalise@@YAXPAU_VECTOR@@@Z		; VectorNormalise
PUBLIC	?GetNormalisation@@YAMPAU_VECTOR@@@Z		; GetNormalisation
PUBLIC	?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z ; CompressNormalVector
PUBLIC	?DecompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z ; DecompressNormalVector
PUBLIC	?RwStateSetCall@@YAXKPAM@Z			; RwStateSetCall
PUBLIC	?DegToRad@@YAMM@Z				; DegToRad
PUBLIC	?IsNumeric@@YA_NPAD@Z				; IsNumeric
PUBLIC	?IsValidModel@@YGHH@Z				; IsValidModel
PUBLIC	?GameForcedExitHelper@@YAXXZ			; GameForcedExitHelper
PUBLIC	?GameForcedExit@@YAXH@Z				; GameForcedExit
PUBLIC	??_C@_0P@HHCMLKFL@GameForcedExit?$AA@		; `string'
PUBLIC	__real@00000000
PUBLIC	__real@400921fb53c8d4f1
PUBLIC	__real@4066800000000000
PUBLIC	__real@43340000
PUBLIC	__real@43b40000
PUBLIC	__real@4affffff
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	_rand:PROC
EXTRN	_srand:PROC
EXTRN	_itoa:PROC
EXTRN	__time64:PROC
EXTRN	_sqrt:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4affffff
CONST	SEGMENT
__real@4affffff DD 04affffffr			; 8.38861e+006
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@400921fb53c8d4f1
CONST	SEGMENT
__real@400921fb53c8d4f1 DQ 0400921fb53c8d4f1r	; 3.14159
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0P@HHCMLKFL@GameForcedExit?$AA@
CONST	SEGMENT
??_C@_0P@HHCMLKFL@GameForcedExit?$AA@ DB 'GameForcedExit', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GameForcedExit@@YAXH@Z
_TEXT	SEGMENT
_pOffs$ = -44						; size = 4
_pfForward$ = -32					; size = 4
_spBack$ = -20						; size = 4
_nonse$ = -8						; size = 4
_iReasonCode$ = 8					; size = 4
?GameForcedExit@@YAXH@Z PROC				; GameForcedExit, COMDAT

; 770  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 771  : #ifdef _DEBUG
; 772  : 	OutputDebugString("GameForcedExit");

	mov	esi, esp
	push	OFFSET ??_C@_0P@HHCMLKFL@GameForcedExit?$AA@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 773  : 	ExitProcess(iReasonCode);

	mov	esi, esp
	mov	eax, DWORD PTR _iReasonCode$[ebp]
	push	eax
	call	DWORD PTR __imp__ExitProcess@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 774  : #endif
; 775  : 
; 776  : 	// This function will forcefully exit the game with a obfuscated exit code, 
; 777  : 	// and pretty much corrupt the application's stack.
; 778  : 
; 779  : 	srand((unsigned int)time(NULL));

	push	0
	call	_time
	add	esp, 4
	push	eax
	call	_srand
	add	esp, 4

; 780  : 	int nonse = rand() ^ (rand() << 8);

	call	_rand
	mov	esi, eax
	call	_rand
	shl	eax, 8
	xor	esi, eax
	mov	DWORD PTR _nonse$[ebp], esi

; 781  : 	// xxxxxxxxxx0xxx0xxxxx0x0xx0xxx = 32 max
; 782  : 	// 11111111110111011111010110111 = 
; 783  : 	//                          1000 
; 784  : 	//                       1000000
; 785  : 	//                     100000000
; 786  : 	//               100000000000000
; 787  : 	//            100000000000000000
; 788  : 
; 789  : 	nonse &= 0xFFFBBEB7;

	mov	eax, DWORD PTR _nonse$[ebp]
	and	eax, -278857				; fffbbeb7H
	mov	DWORD PTR _nonse$[ebp], eax

; 790  : 	nonse |= ((iReasonCode & 0x1) << 3);

	mov	eax, DWORD PTR _iReasonCode$[ebp]
	and	eax, 1
	shl	eax, 3
	or	eax, DWORD PTR _nonse$[ebp]
	mov	DWORD PTR _nonse$[ebp], eax

; 791  : 	nonse |= ((iReasonCode & 0x2) << 5);

	mov	eax, DWORD PTR _iReasonCode$[ebp]
	and	eax, 2
	shl	eax, 5
	or	eax, DWORD PTR _nonse$[ebp]
	mov	DWORD PTR _nonse$[ebp], eax

; 792  : 	nonse |= ((iReasonCode & 0x4) << 6);

	mov	eax, DWORD PTR _iReasonCode$[ebp]
	and	eax, 4
	shl	eax, 6
	or	eax, DWORD PTR _nonse$[ebp]
	mov	DWORD PTR _nonse$[ebp], eax

; 793  : 	nonse |= ((iReasonCode & 0x8) << 11);

	mov	eax, DWORD PTR _iReasonCode$[ebp]
	and	eax, 8
	shl	eax, 11					; 0000000bH
	or	eax, DWORD PTR _nonse$[ebp]
	mov	DWORD PTR _nonse$[ebp], eax

; 794  : 	nonse |= ((iReasonCode & 0x16) << 14);

	mov	eax, DWORD PTR _iReasonCode$[ebp]
	and	eax, 22					; 00000016H
	shl	eax, 14					; 0000000eH
	or	eax, DWORD PTR _nonse$[ebp]
	mov	DWORD PTR _nonse$[ebp], eax

; 795  : 
; 796  : 	// Go back a certain amount of sp
; 797  : 	int spBack = ((rand() ^ (rand() << 5)) >> 3) % 0x3F;

	call	_rand
	mov	esi, eax
	call	_rand
	shl	eax, 5
	xor	esi, eax
	sar	esi, 3
	mov	eax, esi
	cdq
	mov	ecx, 63					; 0000003fH
	idiv	ecx
	mov	DWORD PTR _spBack$[ebp], edx

; 798  : 	if ((spBack % 4) != 0)

	mov	eax, DWORD PTR _spBack$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN4@GameForced
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN4@GameForced:
	test	eax, eax
	je	SHORT $LN1@GameForced

; 799  : 		spBack += 4-(spBack%4);

	mov	eax, DWORD PTR _spBack$[ebp]
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN5@GameForced
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN5@GameForced:
	mov	ecx, 4
	sub	ecx, eax
	add	ecx, DWORD PTR _spBack$[ebp]
	mov	DWORD PTR _spBack$[ebp], ecx
$LN1@GameForced:

; 800  : 
; 801  : 	// Go foward a certain amount from our scanlist data (+4) which is essentially replaced with PlayerInfos
; 802  : 	int pfForward = (rand() ^ (rand() << 7)) % 0xFFF;

	call	_rand
	mov	esi, eax
	call	_rand
	shl	eax, 7
	xor	eax, esi
	cdq
	mov	ecx, 4095				; 00000fffH
	idiv	ecx
	mov	DWORD PTR _pfForward$[ebp], edx

; 803  : 	
; 804  : 	// Write the reason code as an octal number
; 805  : 	char *pOffs = (char*)(pfForward+0xB7D0BC);

	mov	eax, DWORD PTR _pfForward$[ebp]
	add	eax, 12046524				; 00b7d0bcH
	mov	DWORD PTR _pOffs$[ebp], eax

; 806  : 	/*
; 807  : 	// "Internal check failed "
; 808  : 	memcpy(pOffs, (char*)0x86A5B0, 5);	pOffs+=5;
; 809  : 	memcpy(pOffs, (char*)0x8689B6, 3);	pOffs+=3;
; 810  : 	memcpy(pOffs, (char*)0x8749B6, 7); 	pOffs+=7;
; 811  : 	memcpy(pOffs, (char*)0x858AA5, 7); 	pOffs+=7;
; 812  : 	*/
; 813  : 
; 814  : 	// "Internal error: "
; 815  : 	memcpy(pOffs, (char*)0x86A5BB, 5);	pOffs+=5;

	push	5
	push	8824251					; 0086a5bbH
	mov	eax, DWORD PTR _pOffs$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _pOffs$[ebp]
	add	eax, 5
	mov	DWORD PTR _pOffs$[ebp], eax

; 816  : 	memcpy(pOffs, (char*)0x8689B6, 3);	pOffs+=3;

	push	3
	push	8817078					; 008689b6H
	mov	eax, DWORD PTR _pOffs$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _pOffs$[ebp]
	add	eax, 3
	mov	DWORD PTR _pOffs$[ebp], eax

; 817  : 	memcpy(pOffs, (char*)0x86B97C, 8); 	pOffs+=8;

	push	8
	push	8829308					; 0086b97cH
	mov	eax, DWORD PTR _pOffs$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _pOffs$[ebp]
	add	eax, 8
	mov	DWORD PTR _pOffs$[ebp], eax

; 818  : 
; 819  : 	itoa(nonse, (char*)(pOffs), 8);

	push	8
	mov	eax, DWORD PTR _pOffs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nonse$[ebp]
	push	ecx
	call	_itoa
	add	esp, 12					; 0000000cH

; 820  : 
; 821  : 	// Pass over the dirty work to GameForcedExitHelper
; 822  : 	__asm
; 823  : 	{
; 824  : 		push spBack;

	push	DWORD PTR _spBack$[ebp]

; 825  : 		push pfForward;

	push	DWORD PTR _pfForward$[ebp]

; 826  : 		call GameForcedExitHelper;

	call	?GameForcedExitHelper@@YAXXZ		; GameForcedExitHelper
$LN3@GameForced:

; 827  : 	}
; 828  : 
; 829  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GameForcedExit@@YAXH@Z ENDP				; GameForcedExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GameForcedExitHelper@@YAXXZ
_TEXT	SEGMENT
?GameForcedExitHelper@@YAXXZ PROC			; GameForcedExitHelper, COMDAT

; 744  : 	__asm
; 745  : 	{
; 746  : 		// [esp] = return
; 747  : 		// [esp+4] = pfFoward
; 748  : 		// [esp+8] = spBack;
; 749  : 		mov eax, 0xD0BC00B7;

	mov	eax, -792985417				; d0bc00b7H

; 750  : 		ror eax, 16;

	ror	eax, 16					; 00000010H

; 751  : 		mov ebx, [esp+8];

	mov	ebx, DWORD PTR [esp+8]

; 752  : 		add eax, [esp+4];

	add	eax, DWORD PTR [esp+4]

; 753  : 		mov [esp], 0;

	mov	BYTE PTR [esp], 0

; 754  : 		mov [esp+4], 0;

	mov	BYTE PTR [esp+4], 0

; 755  : 		mov [esp+8], 0;

	mov	BYTE PTR [esp+8], 0

; 756  : 		add esp, ebx;			// corrupt the god damn stack!

	add	esp, ebx

; 757  : 		push eax;

	push	eax

; 758  : 		push 0;

	push	0

; 759  : 		mov eax, 0x2A0D99E8;	// obfuscate and determine the FatalAppExitA call

	mov	eax, 705534440				; 2a0d99e8H

; 760  : 		shl eax, 8;

	shl	eax, 8

; 761  : 		xor eax, 0x8F34C54A;

	xor	eax, -1892367030			; 8f34c54aH

; 762  : 		shr eax, 8;

	shr	eax, 8

; 763  : 		push eax;

	push	eax

; 764  : 		ret;

	ret	0
?GameForcedExitHelper@@YAXXZ ENDP			; GameForcedExitHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?IsValidModel@@YGHH@Z
_TEXT	SEGMENT
_dwModelArray$ = -8					; size = 4
_iModelID$ = 8						; size = 4
?IsValidModel@@YGHH@Z PROC				; IsValidModel, COMDAT

; 730  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 731  : 	if (iModelID < 0 || iModelID > 20000) return FALSE;

	cmp	DWORD PTR _iModelID$[ebp], 0
	jl	SHORT $LN2@IsValidMod
	cmp	DWORD PTR _iModelID$[ebp], 20000	; 00004e20H
	jle	SHORT $LN3@IsValidMod
$LN2@IsValidMod:
	xor	eax, eax
	jmp	SHORT $LN4@IsValidMod
$LN3@IsValidMod:

; 732  : 	DWORD* dwModelArray = (DWORD*)0xA9B0C8;

	mov	DWORD PTR _dwModelArray$[ebp], 11120840	; 00a9b0c8H

; 733  : 
; 734  : 	if (dwModelArray[ iModelID ] == 0)

	mov	eax, DWORD PTR _iModelID$[ebp]
	mov	ecx, DWORD PTR _dwModelArray$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN1@IsValidMod

; 735  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@IsValidMod
$LN1@IsValidMod:

; 736  : 
; 737  : 	return TRUE;

	mov	eax, 1
$LN4@IsValidMod:

; 738  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsValidModel@@YGHH@Z ENDP				; IsValidModel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?IsNumeric@@YA_NPAD@Z
_TEXT	SEGMENT
_szString$ = 8						; size = 4
?IsNumeric@@YA_NPAD@Z PROC				; IsNumeric, COMDAT

; 716  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@IsNumeric:

; 717  : 	while(*szString) {

	mov	eax, DWORD PTR _szString$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@IsNumeric

; 718  : 		if(*szString < '0' || *szString > '9') {

	mov	eax, DWORD PTR _szString$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN1@IsNumeric
	mov	eax, DWORD PTR _szString$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN2@IsNumeric
$LN1@IsNumeric:

; 719  : 			return false;

	xor	al, al
	jmp	SHORT $LN5@IsNumeric
$LN2@IsNumeric:

; 720  : 		}
; 721  : 		szString++;

	mov	eax, DWORD PTR _szString$[ebp]
	add	eax, 1
	mov	DWORD PTR _szString$[ebp], eax

; 722  : 	}

	jmp	SHORT $LN4@IsNumeric
$LN3@IsNumeric:

; 723  : 	return true;

	mov	al, 1
$LN5@IsNumeric:

; 724  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNumeric@@YA_NPAD@Z ENDP				; IsNumeric
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?DegToRad@@YAMM@Z
_TEXT	SEGMENT
tv128 = -196						; size = 4
tv93 = -196						; size = 4
_fDegrees$ = 8						; size = 4
?DegToRad@@YAMM@Z PROC					; DegToRad, COMDAT

; 704  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 705  : 	if (fDegrees > 360.0f || fDegrees < 0.0f) return 0.0f;

	movss	xmm0, DWORD PTR _fDegrees$[ebp]
	comiss	xmm0, DWORD PTR __real@43b40000
	ja	SHORT $LN3@DegToRad
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _fDegrees$[ebp]
	jbe	SHORT $LN4@DegToRad
$LN3@DegToRad:
	fldz
	jmp	$LN1@DegToRad
$LN4@DegToRad:

; 706  : 	if (fDegrees > 180.0f) {

	movss	xmm0, DWORD PTR _fDegrees$[ebp]
	comiss	xmm0, DWORD PTR __real@43340000
	jbe	SHORT $LN2@DegToRad

; 707  : 		return (float)(-(PI - (((fDegrees - 180.0f) * PI) / 180.0f)));

	movss	xmm0, DWORD PTR _fDegrees$[ebp]
	subss	xmm0, DWORD PTR __real@43340000
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@400921fb53c8d4f1
	divsd	xmm0, QWORD PTR __real@4066800000000000
	movsd	xmm1, QWORD PTR __real@400921fb53c8d4f1
	subsd	xmm1, xmm0
	xorpd	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	cvtsd2ss xmm0, xmm1
	movss	DWORD PTR tv93[ebp], xmm0
	fld	DWORD PTR tv93[ebp]
	jmp	SHORT $LN1@DegToRad

; 708  : 	} else {

	jmp	SHORT $LN1@DegToRad
$LN2@DegToRad:

; 709  : 		return (float)((fDegrees * PI) / 180.0f);

	cvtss2sd xmm0, DWORD PTR _fDegrees$[ebp]
	mulsd	xmm0, QWORD PTR __real@400921fb53c8d4f1
	divsd	xmm0, QWORD PTR __real@4066800000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv128[ebp], xmm0
	fld	DWORD PTR tv128[ebp]
$LN1@DegToRad:

; 710  : 	}
; 711  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DegToRad@@YAMM@Z ENDP					; DegToRad
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?RwStateSetCall@@YAXKPAM@Z
_TEXT	SEGMENT
_opt$ = 8						; size = 4
_param$ = 12						; size = 4
?RwStateSetCall@@YAXKPAM@Z PROC				; RwStateSetCall, COMDAT

; 691  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 692  : 	_asm mov edx, 0xC97B24

	mov	edx, 13204260				; 00c97b24H

; 693  : 	_asm mov eax, [edx]

	mov	eax, DWORD PTR [edx]

; 694  : 	_asm push param

	push	DWORD PTR _param$[ebp]

; 695  : 	_asm push opt

	push	DWORD PTR _opt$[ebp]

; 696  : 	_asm call [eax+32]

	call	DWORD PTR [eax+32]

; 697  : 	_asm pop eax

	pop	eax

; 698  : 	_asm pop eax

	pop	eax

; 699  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RwStateSetCall@@YAXKPAM@Z ENDP				; RwStateSetCall
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?DecompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z
_TEXT	SEGMENT
_Z$ = -32						; size = 4
_Y$ = -20						; size = 4
_X$ = -8						; size = 4
_vec$ = 8						; size = 4
_c1$ = 12						; size = 4
?DecompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z PROC ; DecompressNormalVector, COMDAT

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 671  : 	int X = 0, Y = 0, Z = 0;

	mov	DWORD PTR _X$[ebp], 0
	mov	DWORD PTR _Y$[ebp], 0
	mov	DWORD PTR _Z$[ebp], 0

; 672  : 
; 673  : 	memcpy(&X, c1->data+0, 3);

	push	3
	mov	eax, DWORD PTR _c1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _X$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 674  : 	if (c1->data[2+0] < 0) 

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _c1$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jge	SHORT $LN3@Decompress

; 675  : 		X |= 0xFF000000;

	mov	eax, DWORD PTR _X$[ebp]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _X$[ebp], eax
$LN3@Decompress:

; 676  : 	memcpy(&Y, c1->data+3, 3);

	push	3
	mov	eax, DWORD PTR _c1$[ebp]
	add	eax, 3
	push	eax
	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 677  : 	if (c1->data[2+3] < 0) 

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _c1$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jge	SHORT $LN2@Decompress

; 678  : 		Y |= 0xFF000000;

	mov	eax, DWORD PTR _Y$[ebp]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _Y$[ebp], eax
$LN2@Decompress:

; 679  : 	memcpy(&Z, c1->data+6, 3);

	push	3
	mov	eax, DWORD PTR _c1$[ebp]
	add	eax, 6
	push	eax
	lea	ecx, DWORD PTR _Z$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 680  : 	if (c1->data[2+6] < 0) 

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _c1$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jge	SHORT $LN1@Decompress

; 681  : 		Z |= 0xFF000000;

	mov	eax, DWORD PTR _Z$[ebp]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _Z$[ebp], eax
$LN1@Decompress:

; 682  : 
; 683  : 	vec->X = ((float)X / 8388607.5f);

	cvtsi2ss xmm0, DWORD PTR _X$[ebp]
	divss	xmm0, DWORD PTR __real@4affffff
	mov	eax, DWORD PTR _vec$[ebp]
	movss	DWORD PTR [eax], xmm0

; 684  : 	vec->Y = ((float)Y / 8388607.5f);

	cvtsi2ss xmm0, DWORD PTR _Y$[ebp]
	divss	xmm0, DWORD PTR __real@4affffff
	mov	eax, DWORD PTR _vec$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 685  : 	vec->Z = ((float)Z / 8388607.5f);

	cvtsi2ss xmm0, DWORD PTR _Z$[ebp]
	divss	xmm0, DWORD PTR __real@4affffff
	mov	eax, DWORD PTR _vec$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 686  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Decompress
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Decompress:
	DD	3
	DD	$LN9@Decompress
$LN9@Decompress:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@Decompress
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@Decompress
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@Decompress
$LN8@Decompress:
	DB	90					; 0000005aH
	DB	0
$LN7@Decompress:
	DB	89					; 00000059H
	DB	0
$LN6@Decompress:
	DB	88					; 00000058H
	DB	0
?DecompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z ENDP ; DecompressNormalVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z
_TEXT	SEGMENT
_Z$ = -32						; size = 4
_Y$ = -20						; size = 4
_X$ = -8						; size = 4
_vec$ = 8						; size = 4
_c1$ = 12						; size = 4
?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z PROC ; CompressNormalVector, COMDAT

; 657  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 658  : 	int X = (int)(vec->X * 8388607.5f);

	mov	eax, DWORD PTR _vec$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR __real@4affffff
	cvttss2si ecx, xmm0
	mov	DWORD PTR _X$[ebp], ecx

; 659  : 	int Y = (int)(vec->Y * 8388607.5f);

	mov	eax, DWORD PTR _vec$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR __real@4affffff
	cvttss2si ecx, xmm0
	mov	DWORD PTR _Y$[ebp], ecx

; 660  : 	int Z = (int)(vec->Z * 8388607.5f);

	mov	eax, DWORD PTR _vec$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR __real@4affffff
	cvttss2si ecx, xmm0
	mov	DWORD PTR _Z$[ebp], ecx

; 661  : 
; 662  : 	memcpy(c1->data+0, &X, 3);

	push	3
	lea	eax, DWORD PTR _X$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c1$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 663  : 	memcpy(c1->data+3, &Y, 3);

	push	3
	lea	eax, DWORD PTR _Y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c1$[ebp]
	add	ecx, 3
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 664  : 	memcpy(c1->data+6, &Z, 3);

	push	3
	lea	eax, DWORD PTR _Z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c1$[ebp]
	add	ecx, 6
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 665  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CompressNo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@CompressNo:
	DD	3
	DD	$LN6@CompressNo
$LN6@CompressNo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@CompressNo
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@CompressNo
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@CompressNo
$LN5@CompressNo:
	DB	90					; 0000005aH
	DB	0
$LN4@CompressNo:
	DB	89					; 00000059H
	DB	0
$LN3@CompressNo:
	DB	88					; 00000058H
	DB	0
?CompressNormalVector@@YAXPAU_VECTOR@@PAU_C_VECTOR1@@@Z ENDP ; CompressNormalVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GetNormalisation@@YAMPAU_VECTOR@@@Z
_TEXT	SEGMENT
tv89 = -196						; size = 4
_vec$ = 8						; size = 4
?GetNormalisation@@YAMPAU_VECTOR@@@Z PROC		; GetNormalisation, COMDAT

; 650  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 651  : 	return ((vec->X * vec->X) + (vec->Y * vec->Y) + (vec->Z * vec->Z));

	mov	eax, DWORD PTR _vec$[ebp]
	mov	ecx, DWORD PTR _vec$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _vec$[ebp]
	mov	eax, DWORD PTR _vec$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _vec$[ebp]
	mov	edx, DWORD PTR _vec$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv89[ebp], xmm0
	fld	DWORD PTR tv89[ebp]

; 652  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNormalisation@@YAMPAU_VECTOR@@@Z ENDP		; GetNormalisation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?VectorNormalise@@YAXPAU_VECTOR@@@Z
_TEXT	SEGMENT
_vec$ = 8						; size = 4
?VectorNormalise@@YAXPAU_VECTOR@@@Z PROC		; VectorNormalise, COMDAT

; 639  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 640  : 	_asm push vec

	push	DWORD PTR _vec$[ebp]

; 641  : 	_asm push vec

	push	DWORD PTR _vec$[ebp]

; 642  : 	_asm mov edx, 0x7ED9B0 ; RwV3dNormalize

	mov	edx, 8313264				; 007ed9b0H

; 643  : 	_asm call edx

	call	edx

; 644  : 	_asm add esp, 8

	add	esp, 8

; 645  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?VectorNormalise@@YAXPAU_VECTOR@@@Z ENDP		; VectorNormalise
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?DistanceBetweenPoints@@YAMMMMMMM@Z
_TEXT	SEGMENT
_fSZ$ = -32						; size = 4
_fSY$ = -20						; size = 4
_fSX$ = -8						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_z1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
_z2$ = 28						; size = 4
?DistanceBetweenPoints@@YAMMMMMMM@Z PROC		; DistanceBetweenPoints, COMDAT

; 626  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 627  : 	float fSX,fSY,fSZ;
; 628  : 
; 629  : 	fSX = (x1 - x2) * (x1 - x2);

	movss	xmm0, DWORD PTR _x1$[ebp]
	subss	xmm0, DWORD PTR _x2$[ebp]
	movss	xmm1, DWORD PTR _x1$[ebp]
	subss	xmm1, DWORD PTR _x2$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSX$[ebp], xmm0

; 630  : 	fSY = (y1 - y2) * (y1 - y2);

	movss	xmm0, DWORD PTR _y1$[ebp]
	subss	xmm0, DWORD PTR _y2$[ebp]
	movss	xmm1, DWORD PTR _y1$[ebp]
	subss	xmm1, DWORD PTR _y2$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSY$[ebp], xmm0

; 631  : 	fSZ = (z1 - z2) * (z1 - z2);

	movss	xmm0, DWORD PTR _z1$[ebp]
	subss	xmm0, DWORD PTR _z2$[ebp]
	movss	xmm1, DWORD PTR _z1$[ebp]
	subss	xmm1, DWORD PTR _z2$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSZ$[ebp], xmm0

; 632  : 	
; 633  : 	return (float)sqrt(fSX + fSY + fSZ);

	movss	xmm0, DWORD PTR _fSX$[ebp]
	addss	xmm0, DWORD PTR _fSY$[ebp]
	addss	xmm0, DWORD PTR _fSZ$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 634  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DistanceBetweenPoints@@YAMMMMMMM@Z ENDP		; DistanceBetweenPoints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?DistanceBetweenHorizontalPoints@@YAMMMMM@Z
_TEXT	SEGMENT
_fSY$ = -20						; size = 4
_fSX$ = -8						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?DistanceBetweenHorizontalPoints@@YAMMMMM@Z PROC	; DistanceBetweenHorizontalPoints, COMDAT

; 614  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 615  : 	float fSX,fSY;
; 616  : 
; 617  : 	fSX = (x1 - x2) * (x1 - x2);

	movss	xmm0, DWORD PTR _x1$[ebp]
	subss	xmm0, DWORD PTR _x2$[ebp]
	movss	xmm1, DWORD PTR _x1$[ebp]
	subss	xmm1, DWORD PTR _x2$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSX$[ebp], xmm0

; 618  : 	fSY = (y1 - y2) * (y1 - y2);

	movss	xmm0, DWORD PTR _y1$[ebp]
	subss	xmm0, DWORD PTR _y2$[ebp]
	movss	xmm1, DWORD PTR _y1$[ebp]
	subss	xmm1, DWORD PTR _y2$[ebp]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSY$[ebp], xmm0

; 619  : 	
; 620  : 	return (float)sqrt(fSX + fSY);

	movss	xmm0, DWORD PTR _fSX$[ebp]
	addss	xmm0, DWORD PTR _fSY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 621  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DistanceBetweenHorizontalPoints@@YAMMMMM@Z ENDP	; DistanceBetweenHorizontalPoints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?FloatOffset@@YAMMM@Z
_TEXT	SEGMENT
tv76 = -196						; size = 4
tv72 = -196						; size = 4
_f1$ = 8						; size = 4
_f2$ = 12						; size = 4
?FloatOffset@@YAMMM@Z PROC				; FloatOffset, COMDAT

; 606  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 607  : 	if(f1 >= f2) return f1 - f2;

	movss	xmm0, DWORD PTR _f1$[ebp]
	comiss	xmm0, DWORD PTR _f2$[ebp]
	jb	SHORT $LN2@FloatOffse
	movss	xmm0, DWORD PTR _f1$[ebp]
	subss	xmm0, DWORD PTR _f2$[ebp]
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]
	jmp	SHORT $LN1@FloatOffse
	jmp	SHORT $LN1@FloatOffse
$LN2@FloatOffse:

; 608  : 	else return (f2 - f1);

	movss	xmm0, DWORD PTR _f2$[ebp]
	subss	xmm0, DWORD PTR _f1$[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
$LN1@FloatOffse:

; 609  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FloatOffset@@YAMMM@Z ENDP				; FloatOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?FloatDifference@@YAMMM@Z
_TEXT	SEGMENT
tv67 = -196						; size = 4
_f1$ = 8						; size = 4
_f2$ = 12						; size = 4
?FloatDifference@@YAMMM@Z PROC				; FloatDifference, COMDAT

; 599  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 600  : 	return f1 - f2;

	movss	xmm0, DWORD PTR _f1$[ebp]
	subss	xmm0, DWORD PTR _f2$[ebp]
	movss	DWORD PTR tv67[ebp], xmm0
	fld	DWORD PTR tv67[ebp]

; 601  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FloatDifference@@YAMMM@Z ENDP				; FloatDifference
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?FindPlayerNumFromPedPtr@@YGEK@Z
_TEXT	SEGMENT
_x$ = -5						; size = 1
_dwPedPtr$ = 8						; size = 4
?FindPlayerNumFromPedPtr@@YGEK@Z PROC			; FindPlayerNumFromPedPtr, COMDAT

; 586  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 587  : 	BYTE x = 0;

	mov	BYTE PTR _x$[ebp], 0
$LN3@FindPlayer:

; 588  : 	while(x != MAX_PLAYERS)

	movzx	eax, BYTE PTR _x$[ebp]
	cmp	eax, 204				; 000000ccH
	je	SHORT $LN2@FindPlayer

; 589  : 	{
; 590  : 		if(dwPlayerPedPtrs[x] == dwPedPtr) return x;

	movzx	eax, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR ?dwPlayerPedPtrs@@3PAKA[eax*4]
	cmp	ecx, DWORD PTR _dwPedPtr$[ebp]
	jne	SHORT $LN1@FindPlayer
	mov	al, BYTE PTR _x$[ebp]
	jmp	SHORT $LN4@FindPlayer
$LN1@FindPlayer:

; 591  : 		x++;

	mov	al, BYTE PTR _x$[ebp]
	add	al, 1
	mov	BYTE PTR _x$[ebp], al

; 592  : 	}

	jmp	SHORT $LN3@FindPlayer
$LN2@FindPlayer:

; 593  : 	return 0;

	xor	al, al
$LN4@FindPlayer:

; 594  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?FindPlayerNumFromPedPtr@@YGEK@Z ENDP			; FindPlayerNumFromPedPtr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?SetPlayerPedPtrRecord@@YGXEK@Z
_TEXT	SEGMENT
_bytePlayer$ = 8					; size = 1
_dwPedPtr$ = 12						; size = 4
?SetPlayerPedPtrRecord@@YGXEK@Z PROC			; SetPlayerPedPtrRecord, COMDAT

; 579  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 580  : 	dwPlayerPedPtrs[bytePlayer] = dwPedPtr;

	movzx	eax, BYTE PTR _bytePlayer$[ebp]
	mov	ecx, DWORD PTR _dwPedPtr$[ebp]
	mov	DWORD PTR ?dwPlayerPedPtrs@@3PAKA[eax*4], ecx

; 581  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetPlayerPedPtrRecord@@YGXEK@Z ENDP			; SetPlayerPedPtrRecord
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?InitPlayerPedPtrRecords@@YGXXZ
_TEXT	SEGMENT
?InitPlayerPedPtrRecords@@YGXXZ PROC			; InitPlayerPedPtrRecords, COMDAT

; 572  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 573  : 	memset(&dwPlayerPedPtrs[0],0,sizeof(DWORD) * MAX_PLAYERS);

	push	816					; 00000330H
	push	0
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, OFFSET ?dwPlayerPedPtrs@@3PAKA	; dwPlayerPedPtrs
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 574  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitPlayerPedPtrRecords@@YGXXZ ENDP			; InitPlayerPedPtrRecords
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GamePrepareTrain@@YGXPAU_VEHICLE_TYPE@@@Z
_TEXT	SEGMENT
_dwPedPtr$1 = -20					; size = 4
_pDriver$ = -8						; size = 4
_pVehicle$ = 8						; size = 4
?GamePrepareTrain@@YGXPAU_VEHICLE_TYPE@@@Z PROC		; GamePrepareTrain, COMDAT

; 553  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 554  : 	PED_TYPE *pDriver = pVehicle->pDriver;

	mov	eax, DWORD PTR _pVehicle$[ebp]
	mov	ecx, DWORD PTR [eax+1120]
	mov	DWORD PTR _pDriver$[ebp], ecx

; 555  : 
; 556  : 	// GET RID OF THE PED DRIVER CREATED
; 557  : 	if(pDriver) {

	cmp	DWORD PTR _pDriver$[ebp], 0
	je	SHORT $LN3@GamePrepar

; 558  : 		if (pDriver->dwPedType != 0 && pDriver->dwPedType != 1) {	// Make sure its not a CPlayerPed

	mov	eax, DWORD PTR _pDriver$[ebp]
	cmp	DWORD PTR [eax+1432], 0
	je	SHORT $LN3@GamePrepar
	mov	eax, DWORD PTR _pDriver$[ebp]
	cmp	DWORD PTR [eax+1432], 1
	je	SHORT $LN3@GamePrepar

; 559  : 			DWORD dwPedPtr = (DWORD)pDriver;

	mov	eax, DWORD PTR _pDriver$[ebp]
	mov	DWORD PTR _dwPedPtr$1[ebp], eax

; 560  : 			_asm mov ecx, dwPedPtr

	mov	ecx, DWORD PTR _dwPedPtr$1[ebp]

; 561  : 			_asm mov ebx, [ecx] ; vtable

	mov	ebx, DWORD PTR [ecx]

; 562  : 			_asm push 1

	push	1

; 563  : 			_asm call [ebx] ; destroy

	call	DWORD PTR [ebx]

; 564  : 			pVehicle->pDriver = 0;

	mov	eax, DWORD PTR _pVehicle$[ebp]
	mov	DWORD PTR [eax+1120], 0
$LN3@GamePrepar:

; 565  : 		}
; 566  : 	}
; 567  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GamePrepareTrain@@YGXPAU_VEHICLE_TYPE@@@Z ENDP		; GamePrepareTrain
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GameIsEntityOnScreen@@YGHPAK@Z
_TEXT	SEGMENT
_pdwEnt$ = 8						; size = 4
?GameIsEntityOnScreen@@YGHPAK@Z PROC			; GameIsEntityOnScreen, COMDAT

; 546  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 547  : 	return TRUE;

	mov	eax, 1

; 548  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GameIsEntityOnScreen@@YGHPAK@Z ENDP			; GameIsEntityOnScreen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GameResetRadarColors@@YAXXZ
_TEXT	SEGMENT
?GameResetRadarColors@@YAXXZ PROC			; GameResetRadarColors, COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 541  : 	memcpy(&dwUseHudColors[0],&dwHudColors[0],sizeof(DWORD)*NUM_RADAR_COLORS);

	push	800					; 00000320H
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, OFFSET ?dwHudColors@@3PAKA		; dwHudColors
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, OFFSET ?dwUseHudColors@@3PAKA	; dwUseHudColors
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 542  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GameResetRadarColors@@YAXXZ ENDP			; GameResetRadarColors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?Game_PedStat@@YAHH@Z
_TEXT	SEGMENT
_d$ = -20						; size = 4
_pStat$ = -8						; size = 4
_model_id$ = 8						; size = 4
?Game_PedStat@@YAHH@Z PROC				; Game_PedStat, COMDAT

; 530  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 531  : 	int *pStat;
; 532  : 	DWORD *d = (DWORD *)(0xA9B0C8 + (model_id*4));

	mov	eax, DWORD PTR _model_id$[ebp]
	lea	ecx, DWORD PTR [eax*4+11120840]
	mov	DWORD PTR _d$[ebp], ecx

; 533  : 	pStat = (int *)((*d) + 44);

	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _pStat$[ebp], ecx

; 534  : 	return *pStat;

	mov	eax, DWORD PTR _pStat$[ebp]
	mov	eax, DWORD PTR [eax]

; 535  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Game_PedStat@@YAHH@Z ENDP				; Game_PedStat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?Game_PedStatPrim@@YAHH@Z
_TEXT	SEGMENT
_d$ = -20						; size = 4
_pStat$ = -8						; size = 4
_model_id$ = 8						; size = 4
?Game_PedStatPrim@@YAHH@Z PROC				; Game_PedStatPrim, COMDAT

; 520  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 521  : 	int *pStat;
; 522  : 	DWORD *d = (DWORD *)(0xA9B0C8 + (model_id*4));

	mov	eax, DWORD PTR _model_id$[ebp]
	lea	ecx, DWORD PTR [eax*4+11120840]
	mov	DWORD PTR _d$[ebp], ecx

; 523  : 	pStat = (int *)((*d) + 40);

	mov	eax, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 40					; 00000028H
	mov	DWORD PTR _pStat$[ebp], ecx

; 524  : 	return *pStat;	

	mov	eax, DWORD PTR _pStat$[ebp]
	mov	eax, DWORD PTR [eax]

; 525  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Game_PedStatPrim@@YAHH@Z ENDP				; Game_PedStatPrim
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?TranslateColorCodeToRGBA@@YGKH@Z
_TEXT	SEGMENT
_iCode$ = 8						; size = 4
?TranslateColorCodeToRGBA@@YGKH@Z PROC			; TranslateColorCodeToRGBA, COMDAT

; 504  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 505  : 	// Special internal colors
; 506  : 	if(iCode == 200) return 0x888888FF;

	cmp	DWORD PTR _iCode$[ebp], 200		; 000000c8H
	jne	SHORT $LN5@TranslateC
	mov	eax, -2004317953			; 888888ffH
	jmp	SHORT $LN6@TranslateC
$LN5@TranslateC:

; 507  : 	if(iCode == 201) return 0xAA0000FF;

	cmp	DWORD PTR _iCode$[ebp], 201		; 000000c9H
	jne	SHORT $LN4@TranslateC
	mov	eax, -1442840321			; aa0000ffH
	jmp	SHORT $LN6@TranslateC
$LN4@TranslateC:

; 508  : 	if(iCode == 202) return 0xE2C063FF;

	cmp	DWORD PTR _iCode$[ebp], 202		; 000000caH
	jne	SHORT $LN3@TranslateC
	mov	eax, -490707969				; e2c063ffH
	jmp	SHORT $LN6@TranslateC
$LN3@TranslateC:

; 509  : 
; 510  : 	if(iCode < sizeof(dwUseHudColors)) {

	cmp	DWORD PTR _iCode$[ebp], 800		; 00000320H
	jae	SHORT $LN2@TranslateC

; 511  : 		return dwUseHudColors[iCode];

	mov	eax, DWORD PTR _iCode$[ebp]
	mov	eax, DWORD PTR ?dwUseHudColors@@3PAKA[eax*4]
	jmp	SHORT $LN6@TranslateC

; 512  : 	} else {

	jmp	SHORT $LN6@TranslateC
$LN2@TranslateC:

; 513  : 		return 0x999999FF;

	mov	eax, -1717986817			; 999999ffH
$LN6@TranslateC:

; 514  : 	}
; 515  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?TranslateColorCodeToRGBA@@YGKH@Z ENDP			; TranslateColorCodeToRGBA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?SetRadarColor@@YGXEK@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 1
_dwColor$ = 12						; size = 4
?SetRadarColor@@YGXEK@Z PROC				; SetRadarColor, COMDAT

; 495  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 496  : 	if(nIndex < sizeof(dwUseHudColors)) {

	movzx	eax, BYTE PTR _nIndex$[ebp]
	cmp	eax, 800				; 00000320H
	jae	SHORT $LN2@SetRadarCo

; 497  : 		dwUseHudColors[nIndex] = dwColor;

	movzx	eax, BYTE PTR _nIndex$[ebp]
	mov	ecx, DWORD PTR _dwColor$[ebp]
	mov	DWORD PTR ?dwUseHudColors@@3PAKA[eax*4], ecx
$LN2@SetRadarCo:

; 498  : 	}
; 499  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRadarColor@@YGXEK@Z ENDP				; SetRadarColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GameGetWeaponModelIDFromWeaponID@@YGHH@Z
_TEXT	SEGMENT
tv64 = -196						; size = 4
_iWeaponID$ = 8						; size = 4
?GameGetWeaponModelIDFromWeaponID@@YGHH@Z PROC		; GameGetWeaponModelIDFromWeaponID, COMDAT

; 355  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 356  : 	switch(iWeaponID)

	mov	eax, DWORD PTR _iWeaponID$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 45			; 0000002dH
	ja	$LN44@GameGetWea
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN48@GameGetWea[edx*4]
$LN43@GameGetWea:

; 357  : 	{
; 358  : 	case WEAPON_BRASSKNUCKLE:
; 359  : 		return WEAPON_MODEL_BRASSKNUCKLE;

	mov	eax, 331				; 0000014bH
	jmp	$LN46@GameGetWea
$LN42@GameGetWea:

; 360  : 
; 361  : 	case WEAPON_GOLFCLUB:
; 362  : 		return WEAPON_MODEL_GOLFCLUB;

	mov	eax, 333				; 0000014dH
	jmp	$LN46@GameGetWea
$LN41@GameGetWea:

; 363  : 
; 364  : 	case WEAPON_NITESTICK:
; 365  : 		return WEAPON_MODEL_NITESTICK;

	mov	eax, 334				; 0000014eH
	jmp	$LN46@GameGetWea
$LN40@GameGetWea:

; 366  : 
; 367  : 	case WEAPON_KNIFE:
; 368  : 		return WEAPON_MODEL_KNIFE;

	mov	eax, 335				; 0000014fH
	jmp	$LN46@GameGetWea
$LN39@GameGetWea:

; 369  : 
; 370  : 	case WEAPON_BAT:
; 371  : 		return WEAPON_MODEL_BAT;

	mov	eax, 336				; 00000150H
	jmp	$LN46@GameGetWea
$LN38@GameGetWea:

; 372  : 
; 373  : 	case WEAPON_SHOVEL:
; 374  : 		return WEAPON_MODEL_SHOVEL;

	mov	eax, 337				; 00000151H
	jmp	$LN46@GameGetWea
$LN37@GameGetWea:

; 375  : 
; 376  : 	case WEAPON_POOLSTICK:
; 377  : 		return WEAPON_MODEL_POOLSTICK;

	mov	eax, 338				; 00000152H
	jmp	$LN46@GameGetWea
$LN36@GameGetWea:

; 378  : 
; 379  : 	case WEAPON_KATANA:
; 380  : 		return WEAPON_MODEL_KATANA;

	mov	eax, 339				; 00000153H
	jmp	$LN46@GameGetWea
$LN35@GameGetWea:

; 381  : 
; 382  : 	case WEAPON_CHAINSAW:
; 383  : 		return WEAPON_MODEL_CHAINSAW;

	mov	eax, 341				; 00000155H
	jmp	$LN46@GameGetWea
$LN34@GameGetWea:

; 384  : 
; 385  : 	case WEAPON_DILDO:
; 386  : 		return WEAPON_MODEL_DILDO;

	mov	eax, 321				; 00000141H
	jmp	$LN46@GameGetWea
$LN33@GameGetWea:

; 387  : 
; 388  : 	case WEAPON_DILDO2:
; 389  : 		return WEAPON_MODEL_DILDO2;

	mov	eax, 322				; 00000142H
	jmp	$LN46@GameGetWea
$LN32@GameGetWea:

; 390  : 
; 391  : 	case WEAPON_VIBRATOR:
; 392  : 		return WEAPON_MODEL_VIBRATOR;

	mov	eax, 323				; 00000143H
	jmp	$LN46@GameGetWea
$LN31@GameGetWea:

; 393  : 
; 394  : 	case WEAPON_VIBRATOR2:
; 395  : 		return WEAPON_MODEL_VIBRATOR2;

	mov	eax, 324				; 00000144H
	jmp	$LN46@GameGetWea
$LN30@GameGetWea:

; 396  : 
; 397  : 	case WEAPON_FLOWER:
; 398  : 		return WEAPON_MODEL_FLOWER;

	mov	eax, 325				; 00000145H
	jmp	$LN46@GameGetWea
$LN29@GameGetWea:

; 399  : 
; 400  : 	case WEAPON_CANE:
; 401  : 		return WEAPON_MODEL_CANE;

	mov	eax, 326				; 00000146H
	jmp	$LN46@GameGetWea
$LN28@GameGetWea:

; 402  : 
; 403  : 	case WEAPON_GRENADE:
; 404  : 		return WEAPON_MODEL_GRENADE;

	mov	eax, 342				; 00000156H
	jmp	$LN46@GameGetWea
$LN27@GameGetWea:

; 405  : 
; 406  : 	case WEAPON_TEARGAS:
; 407  : 		return WEAPON_MODEL_TEARGAS;

	mov	eax, 343				; 00000157H
	jmp	$LN46@GameGetWea
$LN26@GameGetWea:

; 408  : 
; 409  : 	case WEAPON_MOLTOV:
; 410  : 		return WEAPON_MODEL_MOLTOV;

	mov	eax, 344				; 00000158H
	jmp	$LN46@GameGetWea
$LN25@GameGetWea:

; 411  : 
; 412  : 	case WEAPON_COLT45:
; 413  : 		return WEAPON_MODEL_COLT45;

	mov	eax, 346				; 0000015aH
	jmp	$LN46@GameGetWea
$LN24@GameGetWea:

; 414  : 
; 415  : 	case WEAPON_SILENCED:
; 416  : 		return WEAPON_MODEL_SILENCED;

	mov	eax, 347				; 0000015bH
	jmp	$LN46@GameGetWea
$LN23@GameGetWea:

; 417  : 
; 418  : 	case WEAPON_DEAGLE:
; 419  : 		return WEAPON_MODEL_DEAGLE;

	mov	eax, 348				; 0000015cH
	jmp	$LN46@GameGetWea
$LN22@GameGetWea:

; 420  : 
; 421  : 	case WEAPON_SHOTGUN:
; 422  : 		return WEAPON_MODEL_SHOTGUN;

	mov	eax, 349				; 0000015dH
	jmp	$LN46@GameGetWea
$LN21@GameGetWea:

; 423  : 
; 424  : 	case WEAPON_SAWEDOFF:
; 425  : 		return WEAPON_MODEL_SAWEDOFF;

	mov	eax, 350				; 0000015eH
	jmp	$LN46@GameGetWea
$LN20@GameGetWea:

; 426  : 
; 427  : 	case WEAPON_SHOTGSPA:
; 428  : 		return WEAPON_MODEL_SHOTGSPA;

	mov	eax, 351				; 0000015fH
	jmp	$LN46@GameGetWea
$LN19@GameGetWea:

; 429  : 
; 430  : 	case WEAPON_UZI:
; 431  : 		return WEAPON_MODEL_UZI;

	mov	eax, 352				; 00000160H
	jmp	$LN46@GameGetWea
$LN18@GameGetWea:

; 432  : 
; 433  : 	case WEAPON_MP5:
; 434  : 		return WEAPON_MODEL_MP5;

	mov	eax, 353				; 00000161H
	jmp	SHORT $LN46@GameGetWea
$LN17@GameGetWea:

; 435  : 
; 436  : 	case WEAPON_AK47:
; 437  : 		return WEAPON_MODEL_AK47;

	mov	eax, 355				; 00000163H
	jmp	SHORT $LN46@GameGetWea
$LN16@GameGetWea:

; 438  : 
; 439  : 	case WEAPON_M4:
; 440  : 		return WEAPON_MODEL_M4;

	mov	eax, 356				; 00000164H
	jmp	SHORT $LN46@GameGetWea
$LN15@GameGetWea:

; 441  : 
; 442  : 	case WEAPON_TEC9:
; 443  : 		return WEAPON_MODEL_TEC9;

	mov	eax, 372				; 00000174H
	jmp	SHORT $LN46@GameGetWea
$LN14@GameGetWea:

; 444  : 
; 445  : 	case WEAPON_RIFLE:
; 446  : 		return WEAPON_MODEL_RIFLE;

	mov	eax, 357				; 00000165H
	jmp	SHORT $LN46@GameGetWea
$LN13@GameGetWea:

; 447  : 
; 448  : 	case WEAPON_SNIPER:
; 449  : 		return WEAPON_MODEL_SNIPER;

	mov	eax, 358				; 00000166H
	jmp	SHORT $LN46@GameGetWea
$LN12@GameGetWea:

; 450  : 
; 451  : 	case WEAPON_ROCKETLAUNCHER:
; 452  : 		return WEAPON_MODEL_ROCKETLAUNCHER;

	mov	eax, 359				; 00000167H
	jmp	SHORT $LN46@GameGetWea
$LN11@GameGetWea:

; 453  : 
; 454  : 	case WEAPON_HEATSEEKER:
; 455  : 		return WEAPON_MODEL_HEATSEEKER;

	mov	eax, 360				; 00000168H
	jmp	SHORT $LN46@GameGetWea
$LN10@GameGetWea:

; 456  : 
; 457  : 	case WEAPON_FLAMETHROWER:
; 458  : 		return WEAPON_MODEL_FLAMETHROWER;

	mov	eax, 361				; 00000169H
	jmp	SHORT $LN46@GameGetWea
$LN9@GameGetWea:

; 459  : 
; 460  : 	case WEAPON_MINIGUN:
; 461  : 		return WEAPON_MODEL_MINIGUN;

	mov	eax, 362				; 0000016aH
	jmp	SHORT $LN46@GameGetWea
$LN8@GameGetWea:

; 462  : 
; 463  : 	case WEAPON_SATCHEL:
; 464  : 		return WEAPON_MODEL_SATCHEL;

	mov	eax, 363				; 0000016bH
	jmp	SHORT $LN46@GameGetWea
$LN7@GameGetWea:

; 465  : 
; 466  : 	case WEAPON_BOMB:
; 467  : 		return WEAPON_MODEL_BOMB;

	mov	eax, 364				; 0000016cH
	jmp	SHORT $LN46@GameGetWea
$LN6@GameGetWea:

; 468  : 
; 469  : 	case WEAPON_SPRAYCAN:
; 470  : 		return WEAPON_MODEL_SPRAYCAN;

	mov	eax, 365				; 0000016dH
	jmp	SHORT $LN46@GameGetWea
$LN5@GameGetWea:

; 471  : 
; 472  : 	case WEAPON_FIREEXTINGUISHER:
; 473  : 		return WEAPON_MODEL_FIREEXTINGUISHER;

	mov	eax, 366				; 0000016eH
	jmp	SHORT $LN46@GameGetWea
$LN4@GameGetWea:

; 474  : 
; 475  : 	case WEAPON_CAMERA:
; 476  : 		return WEAPON_MODEL_CAMERA;

	mov	eax, 367				; 0000016fH
	jmp	SHORT $LN46@GameGetWea
$LN3@GameGetWea:

; 477  : 
; 478  : 	case WEAPON_NIGHTVISION:
; 479  : 		return WEAPON_MODEL_NIGHTVISION;

	mov	eax, 368				; 00000170H
	jmp	SHORT $LN46@GameGetWea
$LN2@GameGetWea:

; 480  : 
; 481  : 	case WEAPON_INFRARED:
; 482  : 		return WEAPON_MODEL_INFRARED;

	mov	eax, 369				; 00000171H
	jmp	SHORT $LN46@GameGetWea
$LN1@GameGetWea:

; 483  : 
; 484  : 	case WEAPON_PARACHUTE:
; 485  : 		return WEAPON_MODEL_PARACHUTE;

	mov	eax, 371				; 00000173H
	jmp	SHORT $LN46@GameGetWea
$LN44@GameGetWea:

; 486  : 
; 487  : 	}
; 488  : 
; 489  : 	return -1;

	or	eax, -1
$LN46@GameGetWea:

; 490  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN48@GameGetWea:
	DD	$LN43@GameGetWea
	DD	$LN42@GameGetWea
	DD	$LN41@GameGetWea
	DD	$LN40@GameGetWea
	DD	$LN39@GameGetWea
	DD	$LN38@GameGetWea
	DD	$LN37@GameGetWea
	DD	$LN36@GameGetWea
	DD	$LN35@GameGetWea
	DD	$LN34@GameGetWea
	DD	$LN33@GameGetWea
	DD	$LN32@GameGetWea
	DD	$LN31@GameGetWea
	DD	$LN30@GameGetWea
	DD	$LN29@GameGetWea
	DD	$LN28@GameGetWea
	DD	$LN27@GameGetWea
	DD	$LN26@GameGetWea
	DD	$LN44@GameGetWea
	DD	$LN44@GameGetWea
	DD	$LN44@GameGetWea
	DD	$LN25@GameGetWea
	DD	$LN24@GameGetWea
	DD	$LN23@GameGetWea
	DD	$LN22@GameGetWea
	DD	$LN21@GameGetWea
	DD	$LN20@GameGetWea
	DD	$LN19@GameGetWea
	DD	$LN18@GameGetWea
	DD	$LN17@GameGetWea
	DD	$LN16@GameGetWea
	DD	$LN15@GameGetWea
	DD	$LN14@GameGetWea
	DD	$LN13@GameGetWea
	DD	$LN12@GameGetWea
	DD	$LN11@GameGetWea
	DD	$LN10@GameGetWea
	DD	$LN9@GameGetWea
	DD	$LN8@GameGetWea
	DD	$LN7@GameGetWea
	DD	$LN6@GameGetWea
	DD	$LN5@GameGetWea
	DD	$LN4@GameGetWea
	DD	$LN3@GameGetWea
	DD	$LN2@GameGetWea
	DD	$LN1@GameGetWea
?GameGetWeaponModelIDFromWeaponID@@YGHH@Z ENDP		; GameGetWeaponModelIDFromWeaponID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ
_TEXT	SEGMENT
?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ PROC	; GamePool_FindPlayerPed, COMDAT

; 347  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 348  : 	return *(PED_TYPE **)(0xB7CD98);

	mov	eax, DWORD PTR ds:12045720

; 349  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ENDP	; GamePool_FindPlayerPed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z
_TEXT	SEGMENT
_pObjectRet$ = -8					; size = 4
_iID$ = 8						; size = 4
?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z PROC	; GamePool_Object_GetAt, COMDAT

; 330  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 331  : 	ENTITY_TYPE *pObjectRet;
; 332  : 
; 333  : 	_asm mov ebx, 0xB7449C

	mov	ebx, 12010652				; 00b7449cH

; 334  : 	_asm mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 335  : 	_asm push iID

	push	DWORD PTR _iID$[ebp]

; 336  : 	_asm mov ebx, 0x465040

	mov	ebx, 4608064				; 00465040H

; 337  : 	_asm call ebx

	call	ebx

; 338  : 	_asm mov pObjectRet, eax

	mov	DWORD PTR _pObjectRet$[ebp], eax

; 339  : 
; 340  : 	return pObjectRet;

	mov	eax, DWORD PTR _pObjectRet$[ebp]

; 341  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z ENDP	; GamePool_Object_GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GamePool_Vehicle_GetIndex@@YGKPAU_VEHICLE_TYPE@@@Z
_TEXT	SEGMENT
_dwID$ = -8						; size = 4
_pVehicle$ = 8						; size = 4
?GamePool_Vehicle_GetIndex@@YGKPAU_VEHICLE_TYPE@@@Z PROC ; GamePool_Vehicle_GetIndex, COMDAT

; 314  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 315  : 	DWORD dwID=0;

	mov	DWORD PTR _dwID$[ebp], 0

; 316  : 
; 317  : 	_asm mov eax, ADDR_VEHICLE_TABLE

	mov	eax, 12010644				; 00b74494H

; 318  : 	_asm mov ecx, [eax]

	mov	ecx, DWORD PTR [eax]

; 319  : 	_asm push pVehicle

	push	DWORD PTR _pVehicle$[ebp]

; 320  : 	_asm mov edx, 0x424160

	mov	edx, 4342112				; 00424160H

; 321  : 	_asm call edx

	call	edx

; 322  : 	_asm mov dwID, eax

	mov	DWORD PTR _dwID$[ebp], eax

; 323  : 
; 324  : 	return dwID;

	mov	eax, DWORD PTR _dwID$[ebp]

; 325  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GamePool_Vehicle_GetIndex@@YGKPAU_VEHICLE_TYPE@@@Z ENDP ; GamePool_Vehicle_GetIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z
_TEXT	SEGMENT
_pVehicleRet$ = -8					; size = 4
_iID$ = 8						; size = 4
?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z PROC	; GamePool_Vehicle_GetAt, COMDAT

; 298  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 299  : 	VEHICLE_TYPE *pVehicleRet;
; 300  : 
; 301  : 	_asm mov ebx, ADDR_VEHICLE_TABLE

	mov	ebx, 12010644				; 00b74494H

; 302  : 	_asm mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 303  : 	_asm push iID

	push	DWORD PTR _iID$[ebp]

; 304  : 	_asm mov ebx, ADDR_VEHICLE_FROM_ID

	mov	ebx, 4212960				; 004048e0H

; 305  : 	_asm call ebx

	call	ebx

; 306  : 	_asm mov pVehicleRet, eax

	mov	DWORD PTR _pVehicleRet$[ebp], eax

; 307  : 
; 308  : 	return pVehicleRet;

	mov	eax, DWORD PTR _pVehicleRet$[ebp]

; 309  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ENDP	; GamePool_Vehicle_GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GamePool_Ped_GetIndex@@YGHPAU_PED_TYPE@@@Z
_TEXT	SEGMENT
_iRetVal$ = -8						; size = 4
_pActor$ = 8						; size = 4
?GamePool_Ped_GetIndex@@YGHPAU_PED_TYPE@@@Z PROC	; GamePool_Ped_GetIndex, COMDAT

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 283  : 	int iRetVal;
; 284  : 
; 285  : 	_asm mov ebx, ADDR_PED_TABLE

	mov	ebx, 12010640				; 00b74490H

; 286  : 	_asm mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 287  : 	_asm push pActor

	push	DWORD PTR _pActor$[ebp]

; 288  : 	_asm mov ebx, ADDR_ID_FROM_ACTOR

	mov	ebx, 4473552				; 004442d0H

; 289  : 	_asm call ebx

	call	ebx

; 290  : 	_asm mov iRetVal, eax

	mov	DWORD PTR _iRetVal$[ebp], eax

; 291  : 
; 292  : 	return iRetVal;

	mov	eax, DWORD PTR _iRetVal$[ebp]

; 293  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GamePool_Ped_GetIndex@@YGHPAU_PED_TYPE@@@Z ENDP	; GamePool_Ped_GetIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z
_TEXT	SEGMENT
_pActorRet$ = -8					; size = 4
_iID$ = 8						; size = 4
?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z PROC		; GamePool_Ped_GetAt, COMDAT

; 266  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 267  : 	PED_TYPE *pActorRet;
; 268  : 
; 269  : 	_asm mov ebx, ADDR_PED_TABLE

	mov	ebx, 12010640				; 00b74490H

; 270  : 	_asm mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 271  : 	_asm push iID

	push	DWORD PTR _iID$[ebp]

; 272  : 	_asm mov ebx, ADDR_ACTOR_FROM_ID

	mov	ebx, 4213008				; 00404910H

; 273  : 	_asm call ebx

	call	ebx

; 274  : 	_asm mov pActorRet, eax

	mov	DWORD PTR _pActorRet$[ebp], eax

; 275  : 
; 276  : 	return pActorRet;	

	mov	eax, DWORD PTR _pActorRet$[ebp]

; 277  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ENDP		; GamePool_Ped_GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?GameDisableCheatCodes@@YGXXZ
_TEXT	SEGMENT
?GameDisableCheatCodes@@YGXXZ PROC			; GameDisableCheatCodes, COMDAT

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 260  : 
; 261  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GameDisableCheatCodes@@YGXXZ ENDP			; GameDisableCheatCodes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?WorldRemoveEntity@@YGXPAK@Z
_TEXT	SEGMENT
_dwEnt$ = 8						; size = 4
?WorldRemoveEntity@@YGXPAK@Z PROC			; WorldRemoveEntity, COMDAT

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 250  : 	_asm push dwEnt

	push	DWORD PTR _dwEnt$[ebp]

; 251  : 	_asm mov ebx, 0x563280

	mov	ebx, 5649024				; 00563280H

; 252  : 	_asm call ebx

	call	ebx

; 253  : 	_asm pop ebx

	pop	ebx

; 254  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WorldRemoveEntity@@YGXPAK@Z ENDP			; WorldRemoveEntity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?WorldAddEntity@@YGXPAK@Z
_TEXT	SEGMENT
_dwEnt$ = 8						; size = 4
?WorldAddEntity@@YGXPAK@Z PROC				; WorldAddEntity, COMDAT

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 240  : 	_asm push dwEnt

	push	DWORD PTR _dwEnt$[ebp]

; 241  : 	_asm mov ebx, 0x563220

	mov	ebx, 5648928				; 00563220H

; 242  : 	_asm call ebx

	call	ebx

; 243  : 	_asm pop ebx

	pop	ebx

; 244  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WorldAddEntity@@YGXPAK@Z ENDP				; WorldAddEntity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\util.cpp
;	COMDAT ?ProcessLineOfSight@@YAXPAU_VECTOR@@00PAKHHHHHHHH@Z
_TEXT	SEGMENT
_vecOrigin$ = 8						; size = 4
_vecLine$ = 12						; size = 4
_colPoint$ = 16						; size = 4
_pHitEntity$ = 20					; size = 4
_bCheckBuildings$ = 24					; size = 4
_bCheckVehicles$ = 28					; size = 4
_bCheckPeds$ = 32					; size = 4
_bCheckObjects$ = 36					; size = 4
_bCheckDummies$ = 40					; size = 4
_bSeeThroughStuff$ = 44					; size = 4
_bIgnoreSomeObjectsForCamera$ = 48			; size = 4
_bUnk1$ = 52						; size = 4
?ProcessLineOfSight@@YAXPAU_VECTOR@@00PAKHHHHHHHH@Z PROC ; ProcessLineOfSight, COMDAT

; 233  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessLineOfSight@@YAXPAU_VECTOR@@00PAKHHHHHHHH@Z ENDP ; ProcessLineOfSight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 1136 :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 775  :     return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 776  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 133  :     return _time64(_Time);

	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__time64
	add	esp, 4

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
END
