; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\d3d9\d3dutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?strNull@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA DB 02H DUP (?) ; `D3DUtil_GetDXSDKMediaPath'::`2'::strNull
_BSS	ENDS
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??0_D3DVECTOR@@QAE@XZ				; _D3DVECTOR::_D3DVECTOR
PUBLIC	??0_D3DVECTOR@@QAE@MMM@Z			; _D3DVECTOR::_D3DVECTOR
PUBLIC	??A_D3DVECTOR@@QBEABMH@Z			; _D3DVECTOR::operator[]
PUBLIC	??A_D3DVECTOR@@QAEAAMH@Z			; _D3DVECTOR::operator[]
PUBLIC	??_0_D3DVECTOR@@QAEAAU0@M@Z			; _D3DVECTOR::operator/=
PUBLIC	??G@YA?AU_D3DVECTOR@@ABU0@0@Z			; operator-
PUBLIC	??D@YA?AU_D3DVECTOR@@MABU0@@Z			; operator*
PUBLIC	??K@YA?AU_D3DVECTOR@@ABU0@M@Z			; operator/
PUBLIC	?SquareMagnitude@@YAMABU_D3DVECTOR@@@Z		; SquareMagnitude
PUBLIC	?Magnitude@@YAMABU_D3DVECTOR@@@Z		; Magnitude
PUBLIC	?Normalize@@YA?AU_D3DVECTOR@@ABU1@@Z		; Normalize
PUBLIC	?DotProduct@@YAMABU_D3DVECTOR@@0@Z		; DotProduct
PUBLIC	?CrossProduct@@YA?AU_D3DVECTOR@@ABU1@0@Z	; CrossProduct
PUBLIC	?D3DUtil_GetDXSDKMediaPath@@YAPBDXZ		; D3DUtil_GetDXSDKMediaPath
PUBLIC	?D3DUtil_InitSurfaceDesc@@YAXAAU_DDSURFACEDESC2@@KK@Z ; D3DUtil_InitSurfaceDesc
PUBLIC	?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL7@@MMMM@Z ; D3DUtil_InitMaterial
PUBLIC	?D3DUtil_InitLight@@YAXAAU_D3DLIGHT7@@W4_D3DLIGHTTYPE@@MMM@Z ; D3DUtil_InitLight
PUBLIC	?D3DUtil_SetViewMatrix@@YAJAAU_D3DMATRIX@@AAU_D3DVECTOR@@11@Z ; D3DUtil_SetViewMatrix
PUBLIC	?D3DUtil_SetProjectionMatrix@@YAJAAU_D3DMATRIX@@MMMM@Z ; D3DUtil_SetProjectionMatrix
PUBLIC	?D3DUtil_SetIdentityMatrix@@YAXAAU_D3DMATRIX@@@Z ; D3DUtil_SetIdentityMatrix
PUBLIC	?D3DUtil_SetRotateXMatrix@@YAXAAU_D3DMATRIX@@M@Z ; D3DUtil_SetRotateXMatrix
PUBLIC	?D3DUtil_SetRotateYMatrix@@YAXAAU_D3DMATRIX@@M@Z ; D3DUtil_SetRotateYMatrix
PUBLIC	?D3DUtil_SetRotateZMatrix@@YAXAAU_D3DMATRIX@@M@Z ; D3DUtil_SetRotateZMatrix
PUBLIC	?D3DUtil_SetRotationMatrix@@YAXAAU_D3DMATRIX@@AAU_D3DVECTOR@@M@Z ; D3DUtil_SetRotationMatrix
PUBLIC	?_DbgOut@@YAJPADKJ0@Z				; _DbgOut
PUBLIC	??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@ ; `string'
PUBLIC	??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@	; `string'
PUBLIC	??_C@_0BF@FNOEFMNI@DX81SDK?5Samples?5Path?$AA@	; `string'
PUBLIC	??_C@_0BE@FFFCFPIL@DX8SDK?5Samples?5Path?$AA@	; `string'
PUBLIC	??_C@_0O@BMDBNHIE@?2D3DIM?2Media?2?$AA@		; `string'
PUBLIC	??_C@_0L@KNHNADDG@?$CFhs?$CI?$CFld?$CJ?3?5?$AA@	; `string'
PUBLIC	??_C@_0M@JDCEFKLB@?$CIhr?$DN?$CF08lx?$CJ?6?$AA@	; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@358637bd
PUBLIC	__real@3c23d70a
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@7f7fffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_memset:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__lstrcatA@8:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

?strPath@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA DB 0118H DUP (?) ; `D3DUtil_GetDXSDKMediaPath'::`2'::strPath
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-006
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JDCEFKLB@?$CIhr?$DN?$CF08lx?$CJ?6?$AA@
CONST	SEGMENT
??_C@_0M@JDCEFKLB@?$CIhr?$DN?$CF08lx?$CJ?6?$AA@ DB '(hr=%08lx)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KNHNADDG@?$CFhs?$CI?$CFld?$CJ?3?5?$AA@
CONST	SEGMENT
??_C@_0L@KNHNADDG@?$CFhs?$CI?$CFld?$CJ?3?5?$AA@ DB '%hs(%ld): ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BMDBNHIE@?2D3DIM?2Media?2?$AA@
CONST	SEGMENT
??_C@_0O@BMDBNHIE@?2D3DIM?2Media?2?$AA@ DB '\D3DIM\Media\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FFFCFPIL@DX8SDK?5Samples?5Path?$AA@
CONST	SEGMENT
??_C@_0BE@FFFCFPIL@DX8SDK?5Samples?5Path?$AA@ DB 'DX8SDK Samples Path', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FNOEFMNI@DX81SDK?5Samples?5Path?$AA@
CONST	SEGMENT
??_C@_0BF@FNOEFMNI@DX81SDK?5Samples?5Path?$AA@ DB 'DX81SDK Samples Path', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@
CONST	SEGMENT
??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@ DB 'DX9S4SDK Samples Path'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
CONST	SEGMENT
??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@ DB 'Software\Mi'
	DB	'crosoft\DirectX SDK', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?_DbgOut@@YAJPADKJ0@Z
_TEXT	SEGMENT
_buffer$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_strFile$ = 8						; size = 4
_dwLine$ = 12						; size = 4
_hr$ = 16						; size = 4
_strMsg$ = 20						; size = 4
?_DbgOut@@YAJPADKJ0@Z PROC				; _DbgOut, COMDAT

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 287  :     TCHAR buffer[256];
; 288  :     wsprintf( buffer, _T("%hs(%ld): "), strFile, dwLine );

	mov	esi, esp
	mov	eax, DWORD PTR _dwLine$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strFile$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@KNHNADDG@?$CFhs?$CI?$CFld?$CJ?3?5?$AA@
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 289  :     OutputDebugString( buffer );

	mov	esi, esp
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 290  :     OutputDebugString( strMsg );

	mov	esi, esp
	mov	eax, DWORD PTR _strMsg$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 291  : 
; 292  :     if( hr != (HRESULT) S_OK )

	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN1@DbgOut

; 293  :     {
; 294  :         wsprintf( buffer, _T("(hr=%08lx)\n"), hr );

	mov	esi, esp
	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@JDCEFKLB@?$CIhr?$DN?$CF08lx?$CJ?6?$AA@
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 295  :         OutputDebugString( buffer );

	mov	esi, esp
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DbgOut:

; 296  :     }
; 297  : 
; 298  :     OutputDebugString( _T("\n") );

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 299  : 
; 300  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 301  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@DbgOut
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 460				; 000001ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@DbgOut:
	DD	1
	DD	$LN5@DbgOut
$LN5@DbgOut:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN4@DbgOut
$LN4@DbgOut:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?_DbgOut@@YAJPADKJ0@Z ENDP				; _DbgOut
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_SetRotationMatrix@@YAXAAU_D3DMATRIX@@AAU_D3DVECTOR@@M@Z
_TEXT	SEGMENT
_v$ = -40						; size = 12
_fSin$ = -20						; size = 4
_fCos$ = -8						; size = 4
_mat$ = 8						; size = 4
_vDir$ = 12						; size = 4
_fRads$ = 16						; size = 4
?D3DUtil_SetRotationMatrix@@YAXAAU_D3DMATRIX@@AAU_D3DVECTOR@@M@Z PROC ; D3DUtil_SetRotationMatrix, COMDAT

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 259  :     FLOAT     fCos = cosf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR _fCos$[ebp]

; 260  :     FLOAT     fSin = sinf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR _fSin$[ebp]

; 261  :     D3DVECTOR v    = Normalize( vDir );

	mov	eax, DWORD PTR _vDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?Normalize@@YA?AU_D3DVECTOR@@ABU1@@Z	; Normalize
	add	esp, 8

; 262  : 
; 263  :     mat._11 = ( v.x * v.x ) * ( 1.0f - fCos ) + fCos;

	movss	xmm0, DWORD PTR _v$[ebp]
	mulss	xmm0, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _fCos$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax], xmm0

; 264  :     mat._12 = ( v.x * v.y ) * ( 1.0f - fCos ) - (v.z * fSin);

	movss	xmm0, DWORD PTR _v$[ebp]
	mulss	xmm0, DWORD PTR _v$[ebp+4]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _v$[ebp+8]
	mulss	xmm1, DWORD PTR _fSin$[ebp]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 265  :     mat._13 = ( v.x * v.z ) * ( 1.0f - fCos ) + (v.y * fSin);

	movss	xmm0, DWORD PTR _v$[ebp]
	mulss	xmm0, DWORD PTR _v$[ebp+8]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _v$[ebp+4]
	mulss	xmm1, DWORD PTR _fSin$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 266  : 
; 267  :     mat._21 = ( v.y * v.x ) * ( 1.0f - fCos ) + (v.z * fSin);

	movss	xmm0, DWORD PTR _v$[ebp+4]
	mulss	xmm0, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _v$[ebp+8]
	mulss	xmm1, DWORD PTR _fSin$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 268  :     mat._22 = ( v.y * v.y ) * ( 1.0f - fCos ) + fCos ;

	movss	xmm0, DWORD PTR _v$[ebp+4]
	mulss	xmm0, DWORD PTR _v$[ebp+4]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _fCos$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 269  :     mat._23 = ( v.y * v.z ) * ( 1.0f - fCos ) - (v.x * fSin);

	movss	xmm0, DWORD PTR _v$[ebp+4]
	mulss	xmm0, DWORD PTR _v$[ebp+8]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _v$[ebp]
	mulss	xmm1, DWORD PTR _fSin$[ebp]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 270  : 
; 271  :     mat._31 = ( v.z * v.x ) * ( 1.0f - fCos ) - (v.y * fSin);

	movss	xmm0, DWORD PTR _v$[ebp+8]
	mulss	xmm0, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _v$[ebp+4]
	mulss	xmm1, DWORD PTR _fSin$[ebp]
	subss	xmm0, xmm1
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 272  :     mat._32 = ( v.z * v.y ) * ( 1.0f - fCos ) + (v.x * fSin);

	movss	xmm0, DWORD PTR _v$[ebp+8]
	mulss	xmm0, DWORD PTR _v$[ebp+4]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR _v$[ebp]
	mulss	xmm1, DWORD PTR _fSin$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 273  :     mat._33 = ( v.z * v.z ) * ( 1.0f - fCos ) + fCos;

	movss	xmm0, DWORD PTR _v$[ebp+8]
	mulss	xmm0, DWORD PTR _v$[ebp+8]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR _fCos$[ebp]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR _fCos$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 274  : 
; 275  :     mat._14 = mat._24 = mat._34 = 0.0f;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+44], xmm0
	mov	ecx, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+28], xmm0
	mov	edx, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+12], xmm0

; 276  :     mat._41 = mat._42 = mat._43 = 0.0f;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+56], xmm0
	mov	ecx, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+52], xmm0
	mov	edx, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+48], xmm0

; 277  :     mat._44 = 1.0f;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0

; 278  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@D3DUtil_Se
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@D3DUtil_Se:
	DD	1
	DD	$LN4@D3DUtil_Se
$LN4@D3DUtil_Se:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN3@D3DUtil_Se
$LN3@D3DUtil_Se:
	DB	118					; 00000076H
	DB	0
?D3DUtil_SetRotationMatrix@@YAXAAU_D3DMATRIX@@AAU_D3DVECTOR@@M@Z ENDP ; D3DUtil_SetRotationMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_SetRotateZMatrix@@YAXAAU_D3DMATRIX@@M@Z
_TEXT	SEGMENT
tv94 = -196						; size = 4
_mat$ = 8						; size = 4
_fRads$ = 12						; size = 4
?D3DUtil_SetRotateZMatrix@@YAXAAU_D3DMATRIX@@M@Z PROC	; D3DUtil_SetRotateZMatrix, COMDAT

; 244  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 245  :     D3DUtil_SetIdentityMatrix( mat );

	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?D3DUtil_SetIdentityMatrix@@YAXAAU_D3DMATRIX@@@Z ; D3DUtil_SetIdentityMatrix
	add	esp, 4

; 246  :     mat._11  =  cosf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax]

; 247  :     mat._12  =  sinf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax+4]

; 248  :     mat._21  = -sinf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR tv94[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 249  :     mat._22  =  cosf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax+20]

; 250  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_SetRotateZMatrix@@YAXAAU_D3DMATRIX@@M@Z ENDP	; D3DUtil_SetRotateZMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_SetRotateYMatrix@@YAXAAU_D3DMATRIX@@M@Z
_TEXT	SEGMENT
tv89 = -196						; size = 4
_mat$ = 8						; size = 4
_fRads$ = 12						; size = 4
?D3DUtil_SetRotateYMatrix@@YAXAAU_D3DMATRIX@@M@Z PROC	; D3DUtil_SetRotateYMatrix, COMDAT

; 230  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 231  :     D3DUtil_SetIdentityMatrix( mat );

	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?D3DUtil_SetIdentityMatrix@@YAXAAU_D3DMATRIX@@@Z ; D3DUtil_SetIdentityMatrix
	add	esp, 4

; 232  :     mat._11 =  cosf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax]

; 233  :     mat._13 = -sinf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR tv89[ebp]
	movss	xmm0, DWORD PTR tv89[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 234  :     mat._31 =  sinf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax+32]

; 235  :     mat._33 =  cosf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax+40]

; 236  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_SetRotateYMatrix@@YAXAAU_D3DMATRIX@@M@Z ENDP	; D3DUtil_SetRotateYMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_SetRotateXMatrix@@YAXAAU_D3DMATRIX@@M@Z
_TEXT	SEGMENT
tv94 = -196						; size = 4
_mat$ = 8						; size = 4
_fRads$ = 12						; size = 4
?D3DUtil_SetRotateXMatrix@@YAXAAU_D3DMATRIX@@M@Z PROC	; D3DUtil_SetRotateXMatrix, COMDAT

; 216  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 217  :     D3DUtil_SetIdentityMatrix( mat );

	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?D3DUtil_SetIdentityMatrix@@YAXAAU_D3DMATRIX@@@Z ; D3DUtil_SetIdentityMatrix
	add	esp, 4

; 218  :     mat._22 =  cosf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax+20]

; 219  :     mat._23 =  sinf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax+24]

; 220  :     mat._32 = -sinf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR tv94[ebp]
	movss	xmm0, DWORD PTR tv94[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+36], xmm0

; 221  :     mat._33 =  cosf( fRads );

	push	ecx
	movss	xmm0, DWORD PTR _fRads$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	mov	eax, DWORD PTR _mat$[ebp]
	fstp	DWORD PTR [eax+40]

; 222  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_SetRotateXMatrix@@YAXAAU_D3DMATRIX@@M@Z ENDP	; D3DUtil_SetRotateXMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dutil.h
;	COMDAT ?D3DUtil_SetIdentityMatrix@@YAXAAU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
?D3DUtil_SetIdentityMatrix@@YAXAAU_D3DMATRIX@@@Z PROC	; D3DUtil_SetIdentityMatrix, COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 54   :     m._12 = m._13 = m._14 = m._21 = m._23 = m._24 = 0.0f;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+24], xmm0
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+16], xmm0
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+4], xmm0

; 55   :     m._31 = m._32 = m._34 = m._41 = m._42 = m._43 = 0.0f;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+56], xmm0
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+52], xmm0
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+48], xmm0
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+44], xmm0
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+36], xmm0
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+32], xmm0

; 56   :     m._11 = m._22 = m._33 = m._44 = 1.0f;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+60], xmm0
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+40], xmm0
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+20], xmm0
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0

; 57   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_SetIdentityMatrix@@YAXAAU_D3DMATRIX@@@Z ENDP	; D3DUtil_SetIdentityMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_SetProjectionMatrix@@YAJAAU_D3DMATRIX@@MMMM@Z
_TEXT	SEGMENT
tv186 = -240						; size = 4
tv173 = -240						; size = 4
tv205 = -236						; size = 4
tv203 = -236						; size = 4
tv180 = -232						; size = 4
tv167 = -232						; size = 4
tv159 = -232						; size = 4
tv147 = -232						; size = 4
_Q$ = -32						; size = 4
_h$ = -20						; size = 4
_w$ = -8						; size = 4
_mat$ = 8						; size = 4
_fFOV$ = 12						; size = 4
_fAspect$ = 16						; size = 4
_fNearPlane$ = 20					; size = 4
_fFarPlane$ = 24					; size = 4
?D3DUtil_SetProjectionMatrix@@YAJAAU_D3DMATRIX@@MMMM@Z PROC ; D3DUtil_SetProjectionMatrix, COMDAT

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 191  :     if( fabs(fFarPlane-fNearPlane) < 0.01f )

	movss	xmm0, DWORD PTR _fFarPlane$[ebp]
	subss	xmm0, DWORD PTR _fNearPlane$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv147[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR tv147[ebp]
	jbe	SHORT $LN2@D3DUtil_Se

; 192  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN3@D3DUtil_Se
$LN2@D3DUtil_Se:

; 193  :     if( fabs(sin(fFOV/2)) < 0.01f )

	movss	xmm0, DWORD PTR _fFOV$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv159[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR tv159[ebp]
	jbe	SHORT $LN1@D3DUtil_Se

; 194  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN3@D3DUtil_Se
$LN1@D3DUtil_Se:

; 195  : 
; 196  :     FLOAT w = fAspect * ( cosf(fFOV/2)/sinf(fFOV/2) );

	movss	xmm0, DWORD PTR _fFOV$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR tv167[ebp]
	movss	xmm0, DWORD PTR tv167[ebp]
	movss	xmm1, DWORD PTR _fFOV$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv203[ebp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR tv173[ebp]
	movss	xmm0, DWORD PTR tv203[ebp]
	divss	xmm0, DWORD PTR tv173[ebp]
	mulss	xmm0, DWORD PTR _fAspect$[ebp]
	movss	DWORD PTR _w$[ebp], xmm0

; 197  :     FLOAT h =   1.0f  * ( cosf(fFOV/2)/sinf(fFOV/2) );

	movss	xmm0, DWORD PTR _fFOV$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	fstp	DWORD PTR tv180[ebp]
	movss	xmm0, DWORD PTR tv180[ebp]
	movss	xmm1, DWORD PTR _fFOV$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv205[ebp], xmm0
	call	_sinf
	add	esp, 4
	fstp	DWORD PTR tv186[ebp]
	movss	xmm0, DWORD PTR tv205[ebp]
	divss	xmm0, DWORD PTR tv186[ebp]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _h$[ebp], xmm0

; 198  :     FLOAT Q = fFarPlane / ( fFarPlane - fNearPlane );

	movss	xmm0, DWORD PTR _fFarPlane$[ebp]
	subss	xmm0, DWORD PTR _fNearPlane$[ebp]
	movss	xmm1, DWORD PTR _fFarPlane$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _Q$[ebp], xmm1

; 199  : 
; 200  :     ZeroMemory( &mat, sizeof(D3DMATRIX) );

	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 201  :     mat._11 = w;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _w$[ebp]
	movss	DWORD PTR [eax], xmm0

; 202  :     mat._22 = h;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _h$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 203  :     mat._33 = Q;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _Q$[ebp]
	movss	DWORD PTR [eax+40], xmm0

; 204  :     mat._34 = 1.0f;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+44], xmm0

; 205  :     mat._43 = -Q*fNearPlane;

	movss	xmm0, DWORD PTR _Q$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _fNearPlane$[ebp]
	mov	eax, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [eax+56], xmm0

; 206  : 
; 207  :     return S_OK;

	xor	eax, eax
$LN3@D3DUtil_Se:

; 208  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_SetProjectionMatrix@@YAJAAU_D3DMATRIX@@MMMM@Z ENDP ; D3DUtil_SetProjectionMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_SetViewMatrix@@YAJAAU_D3DMATRIX@@AAU_D3DVECTOR@@11@Z
_TEXT	SEGMENT
tv339 = -420						; size = 4
tv332 = -420						; size = 4
tv325 = -420						; size = 4
$T1 = -412						; size = 12
$T2 = -392						; size = 12
$T3 = -372						; size = 12
$T4 = -352						; size = 12
$T5 = -332						; size = 12
$T6 = -312						; size = 12
$T7 = -292						; size = 12
_vRight$ = -80						; size = 12
_vUp$ = -60						; size = 12
_fDotProduct$ = -40					; size = 4
_fLength$ = -28						; size = 4
_vView$ = -16						; size = 12
_mat$ = 8						; size = 4
_vFrom$ = 12						; size = 4
_vAt$ = 16						; size = 4
_vWorldUp$ = 20						; size = 4
?D3DUtil_SetViewMatrix@@YAJAAU_D3DMATRIX@@AAU_D3DVECTOR@@11@Z PROC ; D3DUtil_SetViewMatrix, COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 124  :     // Get the z basis vector, which points straight ahead. This is the
; 125  :     // difference from the eyepoint to the lookat point.
; 126  :     D3DVECTOR vView = vAt - vFrom;

	mov	eax, DWORD PTR _vFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vAt$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vView$[ebp]
	push	edx
	call	??G@YA?AU_D3DVECTOR@@ABU0@0@Z		; operator-
	add	esp, 12					; 0000000cH

; 127  : 
; 128  :     FLOAT fLength = Magnitude( vView );

	lea	eax, DWORD PTR _vView$[ebp]
	push	eax
	call	?Magnitude@@YAMABU_D3DVECTOR@@@Z	; Magnitude
	add	esp, 4
	fstp	DWORD PTR _fLength$[ebp]

; 129  :     if( fLength < 1e-6f )

	movss	xmm0, DWORD PTR __real@358637bd
	comiss	xmm0, DWORD PTR _fLength$[ebp]
	jbe	SHORT $LN4@D3DUtil_Se

; 130  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN5@D3DUtil_Se
$LN4@D3DUtil_Se:

; 131  : 
; 132  :     // Normalize the z basis vector
; 133  :     vView /= fLength;

	push	ecx
	movss	xmm0, DWORD PTR _fLength$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vView$[ebp]
	call	??_0_D3DVECTOR@@QAEAAU0@M@Z		; _D3DVECTOR::operator/=

; 134  : 
; 135  :     // Get the dot product, and calculate the projection of the z basis
; 136  :     // vector onto the up vector. The projection is the y basis vector.
; 137  :     FLOAT fDotProduct = DotProduct( vWorldUp, vView );

	lea	eax, DWORD PTR _vView$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vWorldUp$[ebp]
	push	ecx
	call	?DotProduct@@YAMABU_D3DVECTOR@@0@Z	; DotProduct
	add	esp, 8
	fstp	DWORD PTR _fDotProduct$[ebp]

; 138  : 
; 139  :     D3DVECTOR vUp = vWorldUp - fDotProduct * vView;

	lea	eax, DWORD PTR _vView$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _fDotProduct$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??D@YA?AU_D3DVECTOR@@MABU0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _vWorldUp$[ebp]
	push	edx
	lea	eax, DWORD PTR _vUp$[ebp]
	push	eax
	call	??G@YA?AU_D3DVECTOR@@ABU0@0@Z		; operator-
	add	esp, 12					; 0000000cH

; 140  : 
; 141  :     // If this vector has near-zero length because the input specified a
; 142  :     // bogus up vector, let's try a default up vector
; 143  :     if( 1e-6f > ( fLength = Magnitude( vUp ) ) )

	lea	eax, DWORD PTR _vUp$[ebp]
	push	eax
	call	?Magnitude@@YAMABU_D3DVECTOR@@@Z	; Magnitude
	add	esp, 4
	fstp	DWORD PTR _fLength$[ebp]
	movss	xmm0, DWORD PTR __real@358637bd
	comiss	xmm0, DWORD PTR _fLength$[ebp]
	jbe	$LN1@D3DUtil_Se

; 144  :     {
; 145  :         vUp = D3DVECTOR( 0.0f, 1.0f, 0.0f ) - vView.y * vView;

	lea	eax, DWORD PTR _vView$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _vView$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??D@YA?AU_D3DVECTOR@@MABU0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0_D3DVECTOR@@QAE@MMM@Z		; _D3DVECTOR::_D3DVECTOR
	push	eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??G@YA?AU_D3DVECTOR@@ABU0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUp$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUp$[ebp+8], eax

; 146  : 
; 147  :         // If we still have near-zero length, resort to a different axis.
; 148  :         if( 1e-6f > ( fLength = Magnitude( vUp ) ) )

	lea	eax, DWORD PTR _vUp$[ebp]
	push	eax
	call	?Magnitude@@YAMABU_D3DVECTOR@@@Z	; Magnitude
	add	esp, 4
	fstp	DWORD PTR _fLength$[ebp]
	movss	xmm0, DWORD PTR __real@358637bd
	comiss	xmm0, DWORD PTR _fLength$[ebp]
	jbe	$LN1@D3DUtil_Se

; 149  :         {
; 150  :             vUp = D3DVECTOR( 0.0f, 0.0f, 1.0f ) - vView.z * vView;

	lea	eax, DWORD PTR _vView$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _vView$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??D@YA?AU_D3DVECTOR@@MABU0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0_D3DVECTOR@@QAE@MMM@Z		; _D3DVECTOR::_D3DVECTOR
	push	eax
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	call	??G@YA?AU_D3DVECTOR@@ABU0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUp$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUp$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUp$[ebp+8], eax

; 151  : 
; 152  :             if( 1e-6f > ( fLength = Magnitude( vUp ) ) )

	lea	eax, DWORD PTR _vUp$[ebp]
	push	eax
	call	?Magnitude@@YAMABU_D3DVECTOR@@@Z	; Magnitude
	add	esp, 4
	fstp	DWORD PTR _fLength$[ebp]
	movss	xmm0, DWORD PTR __real@358637bd
	comiss	xmm0, DWORD PTR _fLength$[ebp]
	jbe	SHORT $LN1@D3DUtil_Se

; 153  :                 return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN5@D3DUtil_Se
$LN1@D3DUtil_Se:

; 154  :         }
; 155  :     }
; 156  : 
; 157  :     // Normalize the y basis vector
; 158  :     vUp /= fLength;

	push	ecx
	movss	xmm0, DWORD PTR _fLength$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vUp$[ebp]
	call	??_0_D3DVECTOR@@QAEAAU0@M@Z		; _D3DVECTOR::operator/=

; 159  : 
; 160  :     // The x basis vector is found simply with the cross product of the y
; 161  :     // and z basis vectors
; 162  :     D3DVECTOR vRight = CrossProduct( vUp, vView );

	lea	eax, DWORD PTR _vView$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vUp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vRight$[ebp]
	push	edx
	call	?CrossProduct@@YA?AU_D3DVECTOR@@ABU1@0@Z ; CrossProduct
	add	esp, 12					; 0000000cH

; 163  : 
; 164  :     // Start building the matrix. The first three rows contains the basis
; 165  :     // vectors used to rotate the view to point at the lookat point
; 166  :     D3DUtil_SetIdentityMatrix( mat );

	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	call	?D3DUtil_SetIdentityMatrix@@YAXAAU_D3DMATRIX@@@Z ; D3DUtil_SetIdentityMatrix
	add	esp, 4

; 167  :     mat._11 = vRight.x;    mat._12 = vUp.x;    mat._13 = vView.x;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vRight$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vUp$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vView$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 168  :     mat._21 = vRight.y;    mat._22 = vUp.y;    mat._23 = vView.y;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vRight$[ebp+4]
	movss	DWORD PTR [eax+16], xmm0
	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vUp$[ebp+4]
	movss	DWORD PTR [eax+20], xmm0
	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vView$[ebp+4]
	movss	DWORD PTR [eax+24], xmm0

; 169  :     mat._31 = vRight.z;    mat._32 = vUp.z;    mat._33 = vView.z;

	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vRight$[ebp+8]
	movss	DWORD PTR [eax+32], xmm0
	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vUp$[ebp+8]
	movss	DWORD PTR [eax+36], xmm0
	mov	eax, DWORD PTR _mat$[ebp]
	movss	xmm0, DWORD PTR _vView$[ebp+8]
	movss	DWORD PTR [eax+40], xmm0

; 170  : 
; 171  :     // Do the translation values (rotations are still about the eyepoint)
; 172  :     mat._41 = - DotProduct( vFrom, vRight );

	lea	eax, DWORD PTR _vRight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vFrom$[ebp]
	push	ecx
	call	?DotProduct@@YAMABU_D3DVECTOR@@0@Z	; DotProduct
	add	esp, 8
	fstp	DWORD PTR tv325[ebp]
	movss	xmm0, DWORD PTR tv325[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [edx+48], xmm0

; 173  :     mat._42 = - DotProduct( vFrom, vUp );

	lea	eax, DWORD PTR _vUp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vFrom$[ebp]
	push	ecx
	call	?DotProduct@@YAMABU_D3DVECTOR@@0@Z	; DotProduct
	add	esp, 8
	fstp	DWORD PTR tv332[ebp]
	movss	xmm0, DWORD PTR tv332[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [edx+52], xmm0

; 174  :     mat._43 = - DotProduct( vFrom, vView );

	lea	eax, DWORD PTR _vView$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vFrom$[ebp]
	push	ecx
	call	?DotProduct@@YAMABU_D3DVECTOR@@0@Z	; DotProduct
	add	esp, 8
	fstp	DWORD PTR tv339[ebp]
	movss	xmm0, DWORD PTR tv339[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _mat$[ebp]
	movss	DWORD PTR [edx+56], xmm0

; 175  : 
; 176  :     return S_OK;

	xor	eax, eax
$LN5@D3DUtil_Se:

; 177  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@D3DUtil_Se
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@D3DUtil_Se:
	DD	3
	DD	$LN10@D3DUtil_Se
$LN10@D3DUtil_Se:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN7@D3DUtil_Se
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN8@D3DUtil_Se
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN9@D3DUtil_Se
$LN9@D3DUtil_Se:
	DB	118					; 00000076H
	DB	82					; 00000052H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
$LN8@D3DUtil_Se:
	DB	118					; 00000076H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	0
$LN7@D3DUtil_Se:
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
?D3DUtil_SetViewMatrix@@YAJAAU_D3DMATRIX@@AAU_D3DVECTOR@@11@Z ENDP ; D3DUtil_SetViewMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_InitLight@@YAXAAU_D3DLIGHT7@@W4_D3DLIGHTTYPE@@MMM@Z
_TEXT	SEGMENT
_light$ = 8						; size = 4
_ltType$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_z$ = 24						; size = 4
?D3DUtil_InitLight@@YAXAAU_D3DLIGHT7@@W4_D3DLIGHTTYPE@@MMM@Z PROC ; D3DUtil_InitLight, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 102  :     ZeroMemory( &light, sizeof(D3DLIGHT7) );

	push	104					; 00000068H
	push	0
	mov	eax, DWORD PTR _light$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 103  :     light.dltType        = ltType;

	mov	eax, DWORD PTR _light$[ebp]
	mov	ecx, DWORD PTR _ltType$[ebp]
	mov	DWORD PTR [eax], ecx

; 104  :     light.dcvDiffuse.r   = 1.0f;

	mov	eax, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+4], xmm0

; 105  :     light.dcvDiffuse.g   = 1.0f;

	mov	eax, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+8], xmm0

; 106  :     light.dcvDiffuse.b   = 1.0f;

	mov	eax, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 107  :     light.dcvSpecular    = light.dcvDiffuse;

	mov	eax, DWORD PTR _light$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _light$[ebp]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 108  :     light.dvPosition.x   = light.dvDirection.x = x;

	mov	eax, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax+64], xmm0
	mov	ecx, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [ecx+52], xmm0

; 109  :     light.dvPosition.y   = light.dvDirection.y = y;

	mov	eax, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [eax+68], xmm0
	mov	ecx, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+56], xmm0

; 110  :     light.dvPosition.z   = light.dvDirection.z = z;

	mov	eax, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [eax+72], xmm0
	mov	ecx, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [ecx+60], xmm0

; 111  :     light.dvAttenuation0 = 1.0f;

	mov	eax, DWORD PTR _light$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+84], xmm0

; 112  :     light.dvRange        = D3DLIGHT_RANGE_MAX;

	push	ecx
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	mov	eax, DWORD PTR _light$[ebp]
	fstp	DWORD PTR [eax+76]

; 113  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_InitLight@@YAXAAU_D3DLIGHT7@@W4_D3DLIGHTTYPE@@MMM@Z ENDP ; D3DUtil_InitLight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL7@@MMMM@Z
_TEXT	SEGMENT
_mtrl$ = 8						; size = 4
_r$ = 12						; size = 4
_g$ = 16						; size = 4
_b$ = 20						; size = 4
_a$ = 24						; size = 4
?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL7@@MMMM@Z PROC	; D3DUtil_InitMaterial, COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 87   :     ZeroMemory( &mtrl, sizeof(D3DMATERIAL7) );

	push	68					; 00000044H
	push	0
	mov	eax, DWORD PTR _mtrl$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 88   :     mtrl.dcvDiffuse.r = mtrl.dcvAmbient.r = r;

	mov	eax, DWORD PTR _mtrl$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [eax+16], xmm0
	mov	ecx, DWORD PTR _mtrl$[ebp]
	movss	xmm0, DWORD PTR _r$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 89   :     mtrl.dcvDiffuse.g = mtrl.dcvAmbient.g = g;

	mov	eax, DWORD PTR _mtrl$[ebp]
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [eax+20], xmm0
	mov	ecx, DWORD PTR _mtrl$[ebp]
	movss	xmm0, DWORD PTR _g$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 90   :     mtrl.dcvDiffuse.b = mtrl.dcvAmbient.b = b;

	mov	eax, DWORD PTR _mtrl$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+24], xmm0
	mov	ecx, DWORD PTR _mtrl$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 91   :     mtrl.dcvDiffuse.a = mtrl.dcvAmbient.a = a;

	mov	eax, DWORD PTR _mtrl$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [eax+28], xmm0
	mov	ecx, DWORD PTR _mtrl$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 92   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL7@@MMMM@Z ENDP	; D3DUtil_InitMaterial
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_InitSurfaceDesc@@YAXAAU_DDSURFACEDESC2@@KK@Z
_TEXT	SEGMENT
_ddsd$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_dwCaps$ = 16						; size = 4
?D3DUtil_InitSurfaceDesc@@YAXAAU_DDSURFACEDESC2@@KK@Z PROC ; D3DUtil_InitSurfaceDesc, COMDAT

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 72   :     ZeroMemory( &ddsd, sizeof(ddsd) );

	push	124					; 0000007cH
	push	0
	mov	eax, DWORD PTR _ddsd$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 73   :     ddsd.dwSize                 = sizeof(ddsd);

	mov	eax, DWORD PTR _ddsd$[ebp]
	mov	DWORD PTR [eax], 124			; 0000007cH

; 74   :     ddsd.dwFlags                = dwFlags;

	mov	eax, DWORD PTR _ddsd$[ebp]
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 75   :     ddsd.ddsCaps.dwCaps         = dwCaps;

	mov	eax, DWORD PTR _ddsd$[ebp]
	mov	ecx, DWORD PTR _dwCaps$[ebp]
	mov	DWORD PTR [eax+104], ecx

; 76   :     ddsd.ddpfPixelFormat.dwSize = sizeof(DDPIXELFORMAT);

	mov	eax, DWORD PTR _ddsd$[ebp]
	mov	DWORD PTR [eax+72], 32			; 00000020H

; 77   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_InitSurfaceDesc@@YAXAAU_DDSURFACEDESC2@@KK@Z ENDP ; D3DUtil_InitSurfaceDesc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\d3dutil.cpp
;	COMDAT ?D3DUtil_GetDXSDKMediaPath@@YAPBDXZ
_TEXT	SEGMENT
_result$ = -44						; size = 4
_size$ = -32						; size = 4
_type$ = -20						; size = 4
_hKey$ = -8						; size = 4
?D3DUtil_GetDXSDKMediaPath@@YAPBDXZ PROC		; D3DUtil_GetDXSDKMediaPath, COMDAT

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 24   :     static TCHAR strNull[2] = _T("");
; 25   :     static TCHAR strPath[MAX_PATH + 20];
; 26   :     HKEY  hKey;
; 27   :     DWORD type, size=MAX_PATH;

	mov	DWORD PTR _size$[ebp], 260		; 00000104H

; 28   : 
; 29   :     // Open the appropriate registry key
; 30   :     LONG result = RegOpenKeyEx( HKEY_LOCAL_MACHINE,
; 31   :                                 _T("Software\\Microsoft\\DirectX SDK"),
; 32   :                                 0, KEY_READ, &hKey );

	mov	esi, esp
	lea	eax, DWORD PTR _hKey$[ebp]
	push	eax
	push	131097					; 00020019H
	push	0
	push	OFFSET ??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax

; 33   :     if( ERROR_SUCCESS != result )

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@D3DUtil_Ge

; 34   :         return strNull;

	mov	eax, OFFSET ?strNull@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA
	jmp	$LN5@D3DUtil_Ge
$LN4@D3DUtil_Ge:

; 35   : 
; 36   :     result = RegQueryValueEx( hKey, _T("DX9S4SDK Samples Path"), NULL,
; 37   :                               &type, (BYTE*)strPath, &size );

	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	push	OFFSET ?strPath@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA
	lea	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	push	OFFSET ??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@
	mov	edx, DWORD PTR _hKey$[ebp]
	push	edx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax

; 38   : 
; 39   :     if( ERROR_SUCCESS != result )

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@D3DUtil_Ge

; 40   :     {
; 41   :         result = RegQueryValueEx( hKey, _T("DX81SDK Samples Path"), NULL,
; 42   :                                   &type, (BYTE*)strPath, &size );

	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	push	OFFSET ?strPath@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA
	lea	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	push	OFFSET ??_C@_0BF@FNOEFMNI@DX81SDK?5Samples?5Path?$AA@
	mov	edx, DWORD PTR _hKey$[ebp]
	push	edx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax

; 43   : 
; 44   :         if( ERROR_SUCCESS != result )

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@D3DUtil_Ge

; 45   :         {
; 46   :             result = RegQueryValueEx( hKey, _T("DX8SDK Samples Path"), NULL,
; 47   :                                       &type, (BYTE*)strPath, &size );

	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	push	OFFSET ?strPath@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA
	lea	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	push	OFFSET ??_C@_0BE@FFFCFPIL@DX8SDK?5Samples?5Path?$AA@
	mov	edx, DWORD PTR _hKey$[ebp]
	push	edx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax

; 48   : 
; 49   :             if( ERROR_SUCCESS != result )

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@D3DUtil_Ge

; 50   :             {
; 51   :                 RegCloseKey( hKey );

	mov	esi, esp
	mov	eax, DWORD PTR _hKey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   :                 return strNull;

	mov	eax, OFFSET ?strNull@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA
	jmp	SHORT $LN5@D3DUtil_Ge
$LN3@D3DUtil_Ge:

; 53   :             }
; 54   :         }
; 55   :     }
; 56   : 
; 57   :     RegCloseKey( hKey );

	mov	esi, esp
	mov	eax, DWORD PTR _hKey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 58   :     lstrcat( strPath, _T("\\D3DIM\\Media\\") );

	mov	esi, esp
	push	OFFSET ??_C@_0O@BMDBNHIE@?2D3DIM?2Media?2?$AA@
	push	OFFSET ?strPath@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   : 
; 60   :     return strPath;

	mov	eax, OFFSET ?strPath@?1??D3DUtil_GetDXSDKMediaPath@@YAPBDXZ@4PADA
$LN5@D3DUtil_Ge:

; 61   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@D3DUtil_Ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@D3DUtil_Ge:
	DD	3
	DD	$LN10@D3DUtil_Ge
$LN10@D3DUtil_Ge:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN7@D3DUtil_Ge
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@D3DUtil_Ge
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@D3DUtil_Ge
$LN9@D3DUtil_Ge:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN8@D3DUtil_Ge:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN7@D3DUtil_Ge:
	DB	104					; 00000068H
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
?D3DUtil_GetDXSDKMediaPath@@YAPBDXZ ENDP		; D3DUtil_GetDXSDKMediaPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ?CrossProduct@@YA?AU_D3DVECTOR@@ABU1@0@Z
_TEXT	SEGMENT
tv191 = -220						; size = 4
tv187 = -220						; size = 4
tv183 = -220						; size = 4
tv189 = -216						; size = 4
tv185 = -216						; size = 4
tv181 = -216						; size = 4
_result$ = -16						; size = 12
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?CrossProduct@@YA?AU_D3DVECTOR@@ABU1@0@Z PROC		; CrossProduct, COMDAT

; 231  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 232  : 	_D3DVECTOR result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	??0_D3DVECTOR@@QAE@XZ			; _D3DVECTOR::_D3DVECTOR

; 233  : 
; 234  : 	result[0] = v1[1] * v2[2] - v1[2] * v2[1];

	push	1
	mov	ecx, DWORD PTR _v1$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v2$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	2
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	DWORD PTR tv181[ebp], xmm0
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v2$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv181[ebp]
	subss	xmm1, xmm0
	push	0
	lea	ecx, DWORD PTR _result$[ebp]
	movss	DWORD PTR tv183[ebp], xmm1
	call	??A_D3DVECTOR@@QAEAAMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR tv183[ebp]
	movss	DWORD PTR [eax], xmm0

; 235  : 	result[1] = v1[2] * v2[0] - v1[0] * v2[2];

	push	2
	mov	ecx, DWORD PTR _v1$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v2$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	DWORD PTR tv185[ebp], xmm0
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _v2$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv185[ebp]
	subss	xmm1, xmm0
	push	1
	lea	ecx, DWORD PTR _result$[ebp]
	movss	DWORD PTR tv187[ebp], xmm1
	call	??A_D3DVECTOR@@QAEAAMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR [eax], xmm0

; 236  : 	result[2] = v1[0] * v2[1] - v1[1] * v2[0];

	push	0
	mov	ecx, DWORD PTR _v1$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _v2$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	push	1
	mov	ecx, DWORD PTR _v1$[ebp]
	movss	DWORD PTR tv189[ebp], xmm0
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _v2$[ebp]
	call	??A_D3DVECTOR@@QBEABMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv189[ebp]
	subss	xmm1, xmm0
	push	2
	lea	ecx, DWORD PTR _result$[ebp]
	movss	DWORD PTR tv191[ebp], xmm1
	call	??A_D3DVECTOR@@QAEAAMH@Z		; _D3DVECTOR::operator[]
	movss	xmm0, DWORD PTR tv191[ebp]
	movss	DWORD PTR [eax], xmm0

; 237  : 
; 238  : 	return result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _result$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _result$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 239  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@CrossProdu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@CrossProdu:
	DD	1
	DD	$LN4@CrossProdu
$LN4@CrossProdu:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@CrossProdu
$LN3@CrossProdu:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?CrossProduct@@YA?AU_D3DVECTOR@@ABU1@0@Z ENDP		; CrossProduct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ?DotProduct@@YAMABU_D3DVECTOR@@0@Z
_TEXT	SEGMENT
tv85 = -196						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?DotProduct@@YAMABU_D3DVECTOR@@0@Z PROC			; DotProduct, COMDAT

; 225  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 226  :    return v1.x*v2.x + v1.y * v2.y + v1.z*v2.z;

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]

; 227  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DotProduct@@YAMABU_D3DVECTOR@@0@Z ENDP			; DotProduct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ?Normalize@@YA?AU_D3DVECTOR@@ABU1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?Normalize@@YA?AU_D3DVECTOR@@ABU1@@Z PROC		; Normalize, COMDAT

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 186  :    return v / Magnitude(v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	?Magnitude@@YAMABU_D3DVECTOR@@@Z	; Magnitude
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??K@YA?AU_D3DVECTOR@@ABU0@M@Z		; operator/
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 187  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@@YA?AU_D3DVECTOR@@ABU1@@Z ENDP		; Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ?Magnitude@@YAMABU_D3DVECTOR@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?Magnitude@@YAMABU_D3DVECTOR@@@Z PROC			; Magnitude, COMDAT

; 173  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 174  :    return (D3DVALUE) sqrt(SquareMagnitude(v));

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	?SquareMagnitude@@YAMABU_D3DVECTOR@@@Z	; SquareMagnitude
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 175  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Magnitude@@YAMABU_D3DVECTOR@@@Z ENDP			; Magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ?SquareMagnitude@@YAMABU_D3DVECTOR@@@Z
_TEXT	SEGMENT
tv85 = -196						; size = 4
_v$ = 8							; size = 4
?SquareMagnitude@@YAMABU_D3DVECTOR@@@Z PROC		; SquareMagnitude, COMDAT

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 180  :    return v.x*v.x + v.y*v.y + v.z*v.z;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR tv85[ebp], xmm0
	fld	DWORD PTR tv85[ebp]

; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SquareMagnitude@@YAMABU_D3DVECTOR@@@Z ENDP		; SquareMagnitude
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ??K@YA?AU_D3DVECTOR@@ABU0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_s$ = 16						; size = 4
??K@YA?AU_D3DVECTOR@@ABU0@M@Z PROC			; operator/, COMDAT

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 162  :    return _D3DVECTOR(v.x/s, v.y/s, v.z/s);

	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _s$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	divss	xmm0, DWORD PTR _s$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx]
	divss	xmm0, DWORD PTR _s$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0_D3DVECTOR@@QAE@MMM@Z		; _D3DVECTOR::_D3DVECTOR
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??K@YA?AU_D3DVECTOR@@ABU0@M@Z ENDP			; operator/
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ??D@YA?AU_D3DVECTOR@@MABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AU_D3DVECTOR@@MABU0@@Z PROC			; operator*, COMDAT

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 156  :    return _D3DVECTOR(s*v.x, s*v.y, s*v.z);

	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [ecx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0_D3DVECTOR@@QAE@MMM@Z		; _D3DVECTOR::_D3DVECTOR
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 157  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AU_D3DVECTOR@@MABU0@@Z ENDP			; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ??G@YA?AU_D3DVECTOR@@ABU0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??G@YA?AU_D3DVECTOR@@ABU0@0@Z PROC			; operator-, COMDAT

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 120  :    return _D3DVECTOR(v1.x-v2.x, v1.y-v2.y, v1.z-v2.z);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0_D3DVECTOR@@QAE@MMM@Z		; _D3DVECTOR::_D3DVECTOR
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AU_D3DVECTOR@@ABU0@0@Z ENDP			; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ??_0_D3DVECTOR@@QAEAAU0@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = 8							; size = 4
??_0_D3DVECTOR@@QAEAAU0@M@Z PROC			; _D3DVECTOR::operator/=, COMDAT
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   :    x /= s;   y /= s;   z /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 96   :    return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0_D3DVECTOR@@QAEAAU0@M@Z ENDP			; _D3DVECTOR::operator/=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ??A_D3DVECTOR@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A_D3DVECTOR@@QAEAAMH@Z PROC				; _D3DVECTOR::operator[], COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   :     return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A_D3DVECTOR@@QAEAAMH@Z ENDP				; _D3DVECTOR::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ??A_D3DVECTOR@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A_D3DVECTOR@@QBEABMH@Z PROC				; _D3DVECTOR::operator[], COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 43   :     return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 44   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??A_D3DVECTOR@@QBEABMH@Z ENDP				; _D3DVECTOR::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dvec.inl
;	COMDAT ??0_D3DVECTOR@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0_D3DVECTOR@@QAE@MMM@Z PROC				; _D3DVECTOR::_D3DVECTOR, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 27   :     x = _x; y = _y; z = _z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 28   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0_D3DVECTOR@@QAE@MMM@Z ENDP				; _D3DVECTOR::_D3DVECTOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dtypes.h
;	COMDAT ??0_D3DVECTOR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_D3DVECTOR@@QAE@XZ PROC				; _D3DVECTOR::_D3DVECTOR, COMDAT
; _this$ = ecx

; 226  :     _D3DVECTOR() { }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_D3DVECTOR@@QAE@XZ ENDP				; _D3DVECTOR::_D3DVECTOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 1136 :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 1132 :         {return (sinf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 1066 :         {return (fabsf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 775  :     return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 776  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 765  :     return (float)sin(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 766  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 687  :     return (float)fabs(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 688  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 663  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 664  :     return (float)cos(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 665  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
END
