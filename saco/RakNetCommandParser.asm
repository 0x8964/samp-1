; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\RakNetCommandParser.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_UNASSIGNED_PLAYER_ID DD 0ffffffffH
	DW	0ffffH
CONST	ENDS
PUBLIC	??0RakNetCommandParser@@QAE@XZ			; RakNetCommandParser::RakNetCommandParser
PUBLIC	??1RakNetCommandParser@@UAE@XZ			; RakNetCommandParser::~RakNetCommandParser
PUBLIC	?OnCommand@RakNetCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z ; RakNetCommandParser::OnCommand
PUBLIC	?GetName@RakNetCommandParser@@UBEPADXZ		; RakNetCommandParser::GetName
PUBLIC	?SendHelp@RakNetCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z ; RakNetCommandParser::SendHelp
PUBLIC	?SetRakPeerInterface@RakNetCommandParser@@QAEXPAVRakPeerInterface@@@Z ; RakNetCommandParser::SetRakPeerInterface
PUBLIC	??_GRakNetCommandParser@@UAEPAXI@Z		; RakNetCommandParser::`scalar deleting destructor'
PUBLIC	??_7RakNetCommandParser@@6B@			; RakNetCommandParser::`vftable'
PUBLIC	??_C@_0HC@CHNGBBNI@?$CI?5unsigned?5short?5maxConnections?0@ ; `string'
PUBLIC	??_C@_0L@KIAPHAEH@Initialize?$AA@		; `string'
PUBLIC	??_C@_03LABDDFGF@?$CI?$CJ?$DL?$AA@		; `string'
PUBLIC	??_C@_0BD@CEGNGNCO@InitializeSecurity?$AA@	; `string'
PUBLIC	??_C@_09DNJKEAGD@?$CI?5void?5?$CJ?$DL?$AA@	; `string'
PUBLIC	??_C@_0BA@GLBJOADB@DisableSecurity?$AA@		; `string'
PUBLIC	??_C@_0CC@NFNIDBGI@?$CI?5unsigned?5short?5numberAllowed?5?$CJ@ ; `string'
PUBLIC	??_C@_0BO@KHLAAKGH@SetMaximumIncomingConnections?$AA@ ; `string'
PUBLIC	??_C@_0BA@HKDCHNNO@?$CI?5void?5?$CJ?5const?$DL?$AA@ ; `string'
PUBLIC	??_C@_0BO@CGNPLKEF@GetMaximumIncomingConnections?$AA@ ; `string'
PUBLIC	??_C@_0FN@GFIEFHJA@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@ ; `string'
PUBLIC	??_C@_07FJPHLACI@Connect?$AA@			; `string'
PUBLIC	??_C@_0EB@PCFINJNC@?$CI?5unsigned?5int?5blockDuration?0?5un@ ; `string'
PUBLIC	??_C@_0L@CMGJAGDM@Disconnect?$AA@		; `string'
PUBLIC	??_C@_08CHIOLOMB@IsActive?$AA@			; `string'
PUBLIC	??_C@_09OEOFIABO@?$CI?$CJ?5const?$DL?$AA@	; `string'
PUBLIC	??_C@_0BC@ILJDNENF@GetConnectionList?$AA@	; `string'
PUBLIC	??_C@_0GA@KACHFANE@?$CI?5const?5PlayerID?5target?0?5bool?5se@ ; `string'
PUBLIC	??_C@_0BA@OFFOMIIA@CloseConnection?$AA@		; `string'
PUBLIC	??_C@_0BN@LKNIHIDH@?$CI?5const?5PlayerID?5playerId?5?$CJ?$DL?$AA@ ; `string'
PUBLIC	??_C@_0BF@DOAJNCJI@GetIndexFromPlayerID?$AA@	; `string'
PUBLIC	??_C@_0P@JLHINONG@?$CI?5int?5index?5?$CJ?$DL?$AA@ ; `string'
PUBLIC	??_C@_0BF@IHDMHLBB@GetPlayerIDFromIndex?$AA@	; `string'
PUBLIC	??_C@_0CP@LDLKKGIO@?$CI?5const?5char?5?$CKIP?0?5RakNetTime?5mil@ ; `string'
PUBLIC	??_C@_0N@NKKCKAAI@AddToBanList?$AA@		; `string'
PUBLIC	??_C@_0BE@NLLELJHO@?$CI?5const?5char?5?$CKIP?5?$CJ?$DL?$AA@ ; `string'
PUBLIC	??_C@_0BC@OPAHFPCI@RemoveFromBanList?$AA@	; `string'
PUBLIC	??_C@_0N@KOCJFACH@ClearBanList?$AA@		; `string'
PUBLIC	??_C@_08OLFCJOKF@IsBanned?$AA@			; `string'
PUBLIC	??_C@_0BL@EENGEPEM@?$CI?5const?5PlayerID?5target?5?$CJ?$DL?$AA@ ; `string'
PUBLIC	??_C@_05IGKNBJLA@Ping1?$AA@			; `string'
PUBLIC	??_C@_0FH@LBEFBABP@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@ ; `string'
PUBLIC	??_C@_05KNIAEKHD@Ping2?$AA@			; `string'
PUBLIC	??_C@_0P@EDIOBIMO@GetAveragePing?$AA@		; `string'
PUBLIC	??_C@_0CD@KJBLFJML@?$CI?5const?5PlayerID?5playerId?5?$CJ?5cons@ ; `string'
PUBLIC	??_C@_0M@GBOMMBCI@GetLastPing?$AA@		; `string'
PUBLIC	??_C@_0O@JFCMDFLA@GetLowestPing?$AA@		; `string'
PUBLIC	??_C@_0BB@PJAEIOFC@?$CI?5bool?5doPing?5?$CJ?$DL?$AA@ ; `string'
PUBLIC	??_C@_0BC@EMOHACJN@SetOccasionalPing?$AA@	; `string'
PUBLIC	??_C@_0DB@DCEMLAGG@?$CI?5const?5char?5?$CKdata?0?5const?5unsign@ ; `string'
PUBLIC	??_C@_0BH@COFJJKJJ@SetOfflinePingResponse?$AA@	; `string'
PUBLIC	??_C@_0O@BODKKCEA@GetInternalID?$AA@		; `string'
PUBLIC	??_C@_0CB@IEHKOJLG@?$CI?5const?5PlayerID?5target?5?$CJ?5const?$DL@ ; `string'
PUBLIC	??_C@_0O@DOJAMBCI@GetExternalID?$AA@		; `string'
PUBLIC	??_C@_0CO@HEMFMHDA@?$CI?5RakNetTime?5timeMS?0?5const?5Playe@ ; `string'
PUBLIC	??_C@_0P@BHOCBDLP@SetTimeoutTime?$AA@		; `string'
PUBLIC	??_C@_0O@MFILJDHD@?$CI?5int?5size?5?$CJ?$DL?$AA@ ; `string'
PUBLIC	??_C@_0L@KOJFFEPB@SetMTUSize?$AA@		; `string'
PUBLIC	??_C@_0L@LALKODLI@GetMTUSize?$AA@		; `string'
PUBLIC	??_C@_0BF@PNPCKBMP@GetNumberOfAddresses?$AA@	; `string'
PUBLIC	??_C@_0BD@MPNIDDPE@PlayerIDToDottedIP?$AA@	; `string'
PUBLIC	??_C@_0DB@OOHEDHIF@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@ ; `string'
PUBLIC	??_C@_0N@JBCDMKNH@IPToPlayerID?$AA@		; `string'
PUBLIC	??_C@_0BI@PMILEPOG@?$CI?5unsigned?5int?5index?5?$CJ?$DL?$AA@ ; `string'
PUBLIC	??_C@_0L@GMHEHEJF@GetLocalIP?$AA@		; `string'
PUBLIC	??_C@_0BA@GNMOGEAE@?$CI?5bool?5allow?5?$CJ?$DL?$AA@ ; `string'
PUBLIC	??_C@_0CD@KAMMBDPJ@AllowConnectionResponseIPMigrati@ ; `string'
PUBLIC	??_C@_0FD@OEMJOMAP@?$CI?5const?5char?5?$CKhost?0?5unsigned?5sho@ ; `string'
PUBLIC	??_C@_0BA@FKEMDMEG@AdvertiseSystem?$AA@		; `string'
PUBLIC	??_C@_0DG@OPDKKEOB@?$CI?5const?5char?$CK?5passwordData?0?5int?5@ ; `string'
PUBLIC	??_C@_0BE@DMIJCLBA@SetIncomingPassword?$AA@	; `string'
PUBLIC	??_C@_0BE@JCKCGLGM@GetIncomingPassword?$AA@	; `string'
PUBLIC	??_C@_0FF@NHEKHBGP@?$CI?5double?5maxSendBPS?0?5unsigned?5sh@ ; `string'
PUBLIC	??_C@_0BG@CPIIDFPC@ApplyNetworkSimulator?$AA@	; `string'
PUBLIC	??_C@_0BJ@FMJBLPB@IsNetworkSimulatorActive?$AA@	; `string'
PUBLIC	??_C@_0DF@CCBLEPAE@GetConnectionList?$CI?$CJ?5returned?5no?5@ ; `string'
PUBLIC	??_C@_0CA@FBLBOFOF@GetConnectionList?$CI?$CJ?5returned?3?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0O@CJPBCGIF@?$CFi?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@CPJOBPEE@GetConnectionList?$CI?$CJ?5returned?5fal@ ; `string'
PUBLIC	??_C@_0CI@CKHCAGCF@IPToPlayerID?$CI?$CJ?3?5UNASSIGNED_PLAYE@ ; `string'
PUBLIC	??_C@_0BL@EPHHODIP@IPToPlayerID?$CI?$CJ?3?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_06IFBHNIIL@RakNet?$AA@			; `string'
PUBLIC	??_C@_0DJ@IKKKFOCF@The?5RakNet?5parser?5provides?5mirro@ ; `string'
PUBLIC	??_C@_0DO@EIJLHEFL@PlayerIDs?5take?5two?5parameters?3?5s@ ; `string'
PUBLIC	??_C@_0BJ@BAHHPHPK@For?5bool?0?5send?51?5or?50?4?$AN?6?$AA@ ; `string'
PUBLIC	??_C@_0DA@LBMNAFLL@Parser?5not?5active?4?5?5Call?5SetRakP@ ; `string'
PUBLIC	??_R4RakNetCommandParser@@6B@			; RakNetCommandParser::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRakNetCommandParser@@@8			; RakNetCommandParser `RTTI Type Descriptor'
PUBLIC	??_R3RakNetCommandParser@@8			; RakNetCommandParser::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RakNetCommandParser@@8			; RakNetCommandParser::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RakNetCommandParser@@8		; RakNetCommandParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CommandParserInterface@@8		; CommandParserInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCommandParserInterface@@@8		; CommandParserInterface `RTTI Type Descriptor'
PUBLIC	??_R3CommandParserInterface@@8			; CommandParserInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CommandParserInterface@@8			; CommandParserInterface::`RTTI Base Class Array'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??8PlayerID@@QBE_NABU0@@Z:PROC			; PlayerID::operator==
EXTRN	_strcmp:PROC
EXTRN	??0CommandParserInterface@@QAE@XZ:PROC		; CommandParserInterface::CommandParserInterface
EXTRN	??1CommandParserInterface@@UAE@XZ:PROC		; CommandParserInterface::~CommandParserInterface
EXTRN	?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z:PROC ; CommandParserInterface::OnNewIncomingConnection
EXTRN	?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z:PROC ; CommandParserInterface::OnConnectionLost
EXTRN	?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z:PROC ; CommandParserInterface::OnTransportChange
EXTRN	?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z:PROC ; CommandParserInterface::GetRegisteredCommand
EXTRN	?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::SendCommandList
EXTRN	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z:PROC ; CommandParserInterface::RegisterCommand
EXTRN	?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z:PROC ; CommandParserInterface::ReturnResult
EXTRN	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z:PROC ; CommandParserInterface::IntegersToPlayerID
EXTRN	??_ERakNetCommandParser@@UAEPAXI@Z:PROC		; RakNetCommandParser::`vector deleting destructor'
EXTRN	_atof:PROC
EXTRN	_atoi:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R2CommandParserInterface@@8
rdata$r	SEGMENT
??_R2CommandParserInterface@@8 DD FLAT:??_R1A@?0A@EA@CommandParserInterface@@8 ; CommandParserInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CommandParserInterface@@8
rdata$r	SEGMENT
??_R3CommandParserInterface@@8 DD 00H			; CommandParserInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCommandParserInterface@@@8
data$r	SEGMENT
??_R0?AVCommandParserInterface@@@8 DD FLAT:??_7type_info@@6B@ ; CommandParserInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCommandParserInterface@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CommandParserInterface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CommandParserInterface@@8 DD FLAT:??_R0?AVCommandParserInterface@@@8 ; CommandParserInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RakNetCommandParser@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RakNetCommandParser@@8 DD FLAT:??_R0?AVRakNetCommandParser@@@8 ; RakNetCommandParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RakNetCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_R2RakNetCommandParser@@8
rdata$r	SEGMENT
??_R2RakNetCommandParser@@8 DD FLAT:??_R1A@?0A@EA@RakNetCommandParser@@8 ; RakNetCommandParser::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CommandParserInterface@@8
rdata$r	ENDS
;	COMDAT ??_R3RakNetCommandParser@@8
rdata$r	SEGMENT
??_R3RakNetCommandParser@@8 DD 00H			; RakNetCommandParser::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2RakNetCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRakNetCommandParser@@@8
data$r	SEGMENT
??_R0?AVRakNetCommandParser@@@8 DD FLAT:??_7type_info@@6B@ ; RakNetCommandParser `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRakNetCommandParser@@', 00H
data$r	ENDS
;	COMDAT ??_R4RakNetCommandParser@@6B@
rdata$r	SEGMENT
??_R4RakNetCommandParser@@6B@ DD 00H			; RakNetCommandParser::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRakNetCommandParser@@@8
	DD	FLAT:??_R3RakNetCommandParser@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DA@LBMNAFLL@Parser?5not?5active?4?5?5Call?5SetRakP@
CONST	SEGMENT
??_C@_0DA@LBMNAFLL@Parser?5not?5active?4?5?5Call?5SetRakP@ DB 'Parser not'
	DB	' active.  Call SetRakPeerInterface.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BAHHPHPK@For?5bool?0?5send?51?5or?50?4?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BJ@BAHHPHPK@For?5bool?0?5send?51?5or?50?4?$AN?6?$AA@ DB 'For bool,'
	DB	' send 1 or 0.', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@EIJLHEFL@PlayerIDs?5take?5two?5parameters?3?5s@
CONST	SEGMENT
??_C@_0DO@EIJLHEFL@PlayerIDs?5take?5two?5parameters?3?5s@ DB 'PlayerIDs t'
	DB	'ake two parameters: send <BinaryAddress> <Port>.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@IKKKFOCF@The?5RakNet?5parser?5provides?5mirro@
CONST	SEGMENT
??_C@_0DJ@IKKKFOCF@The?5RakNet?5parser?5provides?5mirro@ DB 'The RakNet p'
	DB	'arser provides mirror functions to RakPeer', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFBHNIIL@RakNet?$AA@
CONST	SEGMENT
??_C@_06IFBHNIIL@RakNet?$AA@ DB 'RakNet', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EPHHODIP@IPToPlayerID?$CI?$CJ?3?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@
CONST	SEGMENT
??_C@_0BL@EPHHODIP@IPToPlayerID?$CI?$CJ?3?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@ DB 'I'
	DB	'PToPlayerID(): %s %i:%i', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CKHCAGCF@IPToPlayerID?$CI?$CJ?3?5UNASSIGNED_PLAYE@
CONST	SEGMENT
??_C@_0CI@CKHCAGCF@IPToPlayerID?$CI?$CJ?3?5UNASSIGNED_PLAYE@ DB 'IPToPlay'
	DB	'erID(): UNASSIGNED_PLAYER_ID.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CPJOBPEE@GetConnectionList?$CI?$CJ?5returned?5fal@
CONST	SEGMENT
??_C@_0CG@CPJOBPEE@GetConnectionList?$CI?$CJ?5returned?5fal@ DB 'GetConne'
	DB	'ctionList() returned false.', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CJPBCGIF@?$CFi?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@
CONST	SEGMENT
??_C@_0O@CJPBCGIF@?$CFi?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@ DB '%i %s %i:%i', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FBLBOFOF@GetConnectionList?$CI?$CJ?5returned?3?$AN?6?$AA@
CONST	SEGMENT
??_C@_0CA@FBLBOFOF@GetConnectionList?$CI?$CJ?5returned?3?$AN?6?$AA@ DB 'G'
	DB	'etConnectionList() returned:', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CCBLEPAE@GetConnectionList?$CI?$CJ?5returned?5no?5@
CONST	SEGMENT
??_C@_0DF@CCBLEPAE@GetConnectionList?$CI?$CJ?5returned?5no?5@ DB 'GetConn'
	DB	'ectionList() returned no systems connected.', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FMJBLPB@IsNetworkSimulatorActive?$AA@
CONST	SEGMENT
??_C@_0BJ@FMJBLPB@IsNetworkSimulatorActive?$AA@ DB 'IsNetworkSimulatorAct'
	DB	'ive', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CPIIDFPC@ApplyNetworkSimulator?$AA@
CONST	SEGMENT
??_C@_0BG@CPIIDFPC@ApplyNetworkSimulator?$AA@ DB 'ApplyNetworkSimulator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@NHEKHBGP@?$CI?5double?5maxSendBPS?0?5unsigned?5sh@
CONST	SEGMENT
??_C@_0FF@NHEKHBGP@?$CI?5double?5maxSendBPS?0?5unsigned?5sh@ DB '( double'
	DB	' maxSendBPS, unsigned short minExtraPing, unsigned short extr'
	DB	'aPingVariance);', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JCKCGLGM@GetIncomingPassword?$AA@
CONST	SEGMENT
??_C@_0BE@JCKCGLGM@GetIncomingPassword?$AA@ DB 'GetIncomingPassword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMIJCLBA@SetIncomingPassword?$AA@
CONST	SEGMENT
??_C@_0BE@DMIJCLBA@SetIncomingPassword?$AA@ DB 'SetIncomingPassword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@OPDKKEOB@?$CI?5const?5char?$CK?5passwordData?0?5int?5@
CONST	SEGMENT
??_C@_0DG@OPDKKEOB@?$CI?5const?5char?$CK?5passwordData?0?5int?5@ DB '( co'
	DB	'nst char* passwordData, int passwordDataLength );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FKEMDMEG@AdvertiseSystem?$AA@
CONST	SEGMENT
??_C@_0BA@FKEMDMEG@AdvertiseSystem?$AA@ DB 'AdvertiseSystem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@OEMJOMAP@?$CI?5const?5char?5?$CKhost?0?5unsigned?5sho@
CONST	SEGMENT
??_C@_0FD@OEMJOMAP@?$CI?5const?5char?5?$CKhost?0?5unsigned?5sho@ DB '( co'
	DB	'nst char *host, unsigned short remotePort, const char *data, '
	DB	'int dataLength );', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KAMMBDPJ@AllowConnectionResponseIPMigrati@
CONST	SEGMENT
??_C@_0CD@KAMMBDPJ@AllowConnectionResponseIPMigrati@ DB 'AllowConnectionR'
	DB	'esponseIPMigration', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNMOGEAE@?$CI?5bool?5allow?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_0BA@GNMOGEAE@?$CI?5bool?5allow?5?$CJ?$DL?$AA@ DB '( bool allow );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GMHEHEJF@GetLocalIP?$AA@
CONST	SEGMENT
??_C@_0L@GMHEHEJF@GetLocalIP?$AA@ DB 'GetLocalIP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PMILEPOG@?$CI?5unsigned?5int?5index?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_0BI@PMILEPOG@?$CI?5unsigned?5int?5index?5?$CJ?$DL?$AA@ DB '( unsign'
	DB	'ed int index );', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBCDMKNH@IPToPlayerID?$AA@
CONST	SEGMENT
??_C@_0N@JBCDMKNH@IPToPlayerID?$AA@ DB 'IPToPlayerID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OOHEDHIF@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@
CONST	SEGMENT
??_C@_0DB@OOHEDHIF@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@ DB '( co'
	DB	'nst char* host, unsigned short remotePort );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MPNIDDPE@PlayerIDToDottedIP?$AA@
CONST	SEGMENT
??_C@_0BD@MPNIDDPE@PlayerIDToDottedIP?$AA@ DB 'PlayerIDToDottedIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PNPCKBMP@GetNumberOfAddresses?$AA@
CONST	SEGMENT
??_C@_0BF@PNPCKBMP@GetNumberOfAddresses?$AA@ DB 'GetNumberOfAddresses', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LALKODLI@GetMTUSize?$AA@
CONST	SEGMENT
??_C@_0L@LALKODLI@GetMTUSize?$AA@ DB 'GetMTUSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOJFFEPB@SetMTUSize?$AA@
CONST	SEGMENT
??_C@_0L@KOJFFEPB@SetMTUSize?$AA@ DB 'SetMTUSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MFILJDHD@?$CI?5int?5size?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_0O@MFILJDHD@?$CI?5int?5size?5?$CJ?$DL?$AA@ DB '( int size );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BHOCBDLP@SetTimeoutTime?$AA@
CONST	SEGMENT
??_C@_0P@BHOCBDLP@SetTimeoutTime?$AA@ DB 'SetTimeoutTime', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HEMFMHDA@?$CI?5RakNetTime?5timeMS?0?5const?5Playe@
CONST	SEGMENT
??_C@_0CO@HEMFMHDA@?$CI?5RakNetTime?5timeMS?0?5const?5Playe@ DB '( RakNet'
	DB	'Time timeMS, const PlayerID target );', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOJAMBCI@GetExternalID?$AA@
CONST	SEGMENT
??_C@_0O@DOJAMBCI@GetExternalID?$AA@ DB 'GetExternalID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IEHKOJLG@?$CI?5const?5PlayerID?5target?5?$CJ?5const?$DL@
CONST	SEGMENT
??_C@_0CB@IEHKOJLG@?$CI?5const?5PlayerID?5target?5?$CJ?5const?$DL@ DB '( '
	DB	'const PlayerID target ) const;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BODKKCEA@GetInternalID?$AA@
CONST	SEGMENT
??_C@_0O@BODKKCEA@GetInternalID?$AA@ DB 'GetInternalID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@COFJJKJJ@SetOfflinePingResponse?$AA@
CONST	SEGMENT
??_C@_0BH@COFJJKJJ@SetOfflinePingResponse?$AA@ DB 'SetOfflinePingResponse'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DCEMLAGG@?$CI?5const?5char?5?$CKdata?0?5const?5unsign@
CONST	SEGMENT
??_C@_0DB@DCEMLAGG@?$CI?5const?5char?5?$CKdata?0?5const?5unsign@ DB '( co'
	DB	'nst char *data, const unsigned int length );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EMOHACJN@SetOccasionalPing?$AA@
CONST	SEGMENT
??_C@_0BC@EMOHACJN@SetOccasionalPing?$AA@ DB 'SetOccasionalPing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PJAEIOFC@?$CI?5bool?5doPing?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_0BB@PJAEIOFC@?$CI?5bool?5doPing?5?$CJ?$DL?$AA@ DB '( bool doPing );'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JFCMDFLA@GetLowestPing?$AA@
CONST	SEGMENT
??_C@_0O@JFCMDFLA@GetLowestPing?$AA@ DB 'GetLowestPing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GBOMMBCI@GetLastPing?$AA@
CONST	SEGMENT
??_C@_0M@GBOMMBCI@GetLastPing?$AA@ DB 'GetLastPing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KJBLFJML@?$CI?5const?5PlayerID?5playerId?5?$CJ?5cons@
CONST	SEGMENT
??_C@_0CD@KJBLFJML@?$CI?5const?5PlayerID?5playerId?5?$CJ?5cons@ DB '( con'
	DB	'st PlayerID playerId ) const;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EDIOBIMO@GetAveragePing?$AA@
CONST	SEGMENT
??_C@_0P@EDIOBIMO@GetAveragePing?$AA@ DB 'GetAveragePing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNIAEKHD@Ping2?$AA@
CONST	SEGMENT
??_C@_05KNIAEKHD@Ping2?$AA@ DB 'Ping2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@LBEFBABP@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@
CONST	SEGMENT
??_C@_0FH@LBEFBABP@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@ DB '( co'
	DB	'nst char* host, unsigned short remotePort, bool onlyReplyOnAc'
	DB	'ceptingConnections );', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGKNBJLA@Ping1?$AA@
CONST	SEGMENT
??_C@_05IGKNBJLA@Ping1?$AA@ DB 'Ping1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EENGEPEM@?$CI?5const?5PlayerID?5target?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_0BL@EENGEPEM@?$CI?5const?5PlayerID?5target?5?$CJ?$DL?$AA@ DB '( con'
	DB	'st PlayerID target );', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OLFCJOKF@IsBanned?$AA@
CONST	SEGMENT
??_C@_08OLFCJOKF@IsBanned?$AA@ DB 'IsBanned', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KOCJFACH@ClearBanList?$AA@
CONST	SEGMENT
??_C@_0N@KOCJFACH@ClearBanList?$AA@ DB 'ClearBanList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OPAHFPCI@RemoveFromBanList?$AA@
CONST	SEGMENT
??_C@_0BC@OPAHFPCI@RemoveFromBanList?$AA@ DB 'RemoveFromBanList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLLELJHO@?$CI?5const?5char?5?$CKIP?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_0BE@NLLELJHO@?$CI?5const?5char?5?$CKIP?5?$CJ?$DL?$AA@ DB '( const c'
	DB	'har *IP );', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NKKCKAAI@AddToBanList?$AA@
CONST	SEGMENT
??_C@_0N@NKKCKAAI@AddToBanList?$AA@ DB 'AddToBanList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LDLKKGIO@?$CI?5const?5char?5?$CKIP?0?5RakNetTime?5mil@
CONST	SEGMENT
??_C@_0CP@LDLKKGIO@?$CI?5const?5char?5?$CKIP?0?5RakNetTime?5mil@ DB '( co'
	DB	'nst char *IP, RakNetTime milliseconds=0 );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IHDMHLBB@GetPlayerIDFromIndex?$AA@
CONST	SEGMENT
??_C@_0BF@IHDMHLBB@GetPlayerIDFromIndex?$AA@ DB 'GetPlayerIDFromIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JLHINONG@?$CI?5int?5index?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_0P@JLHINONG@?$CI?5int?5index?5?$CJ?$DL?$AA@ DB '( int index );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DOAJNCJI@GetIndexFromPlayerID?$AA@
CONST	SEGMENT
??_C@_0BF@DOAJNCJI@GetIndexFromPlayerID?$AA@ DB 'GetIndexFromPlayerID', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LKNIHIDH@?$CI?5const?5PlayerID?5playerId?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_0BN@LKNIHIDH@?$CI?5const?5PlayerID?5playerId?5?$CJ?$DL?$AA@ DB '( c'
	DB	'onst PlayerID playerId );', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OFFOMIIA@CloseConnection?$AA@
CONST	SEGMENT
??_C@_0BA@OFFOMIIA@CloseConnection?$AA@ DB 'CloseConnection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@KACHFANE@?$CI?5const?5PlayerID?5target?0?5bool?5se@
CONST	SEGMENT
??_C@_0GA@KACHFANE@?$CI?5const?5PlayerID?5target?0?5bool?5se@ DB '( const'
	DB	' PlayerID target, bool sendDisconnectionNotification, unsigne'
	DB	'd char orderingChannel=0 );', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ILJDNENF@GetConnectionList?$AA@
CONST	SEGMENT
??_C@_0BC@ILJDNENF@GetConnectionList?$AA@ DB 'GetConnectionList', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OEOFIABO@?$CI?$CJ?5const?$DL?$AA@
CONST	SEGMENT
??_C@_09OEOFIABO@?$CI?$CJ?5const?$DL?$AA@ DB '() const;', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CHIOLOMB@IsActive?$AA@
CONST	SEGMENT
??_C@_08CHIOLOMB@IsActive?$AA@ DB 'IsActive', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CMGJAGDM@Disconnect?$AA@
CONST	SEGMENT
??_C@_0L@CMGJAGDM@Disconnect?$AA@ DB 'Disconnect', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@PCFINJNC@?$CI?5unsigned?5int?5blockDuration?0?5un@
CONST	SEGMENT
??_C@_0EB@PCFINJNC@?$CI?5unsigned?5int?5blockDuration?0?5un@ DB '( unsign'
	DB	'ed int blockDuration, unsigned char orderingChannel=0 );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FJPHLACI@Connect?$AA@
CONST	SEGMENT
??_C@_07FJPHLACI@Connect?$AA@ DB 'Connect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@GFIEFHJA@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@
CONST	SEGMENT
??_C@_0FN@GFIEFHJA@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@ DB '( co'
	DB	'nst char* host, unsigned short remotePort, char* passwordData'
	DB	', int passwordDataLength );', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CGNPLKEF@GetMaximumIncomingConnections?$AA@
CONST	SEGMENT
??_C@_0BO@CGNPLKEF@GetMaximumIncomingConnections?$AA@ DB 'GetMaximumIncom'
	DB	'ingConnections', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HKDCHNNO@?$CI?5void?5?$CJ?5const?$DL?$AA@
CONST	SEGMENT
??_C@_0BA@HKDCHNNO@?$CI?5void?5?$CJ?5const?$DL?$AA@ DB '( void ) const;', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KHLAAKGH@SetMaximumIncomingConnections?$AA@
CONST	SEGMENT
??_C@_0BO@KHLAAKGH@SetMaximumIncomingConnections?$AA@ DB 'SetMaximumIncom'
	DB	'ingConnections', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NFNIDBGI@?$CI?5unsigned?5short?5numberAllowed?5?$CJ@
CONST	SEGMENT
??_C@_0CC@NFNIDBGI@?$CI?5unsigned?5short?5numberAllowed?5?$CJ@ DB '( unsi'
	DB	'gned short numberAllowed );', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GLBJOADB@DisableSecurity?$AA@
CONST	SEGMENT
??_C@_0BA@GLBJOADB@DisableSecurity?$AA@ DB 'DisableSecurity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DNJKEAGD@?$CI?5void?5?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_09DNJKEAGD@?$CI?5void?5?$CJ?$DL?$AA@ DB '( void );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CEGNGNCO@InitializeSecurity?$AA@
CONST	SEGMENT
??_C@_0BD@CEGNGNCO@InitializeSecurity?$AA@ DB 'InitializeSecurity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LABDDFGF@?$CI?$CJ?$DL?$AA@
CONST	SEGMENT
??_C@_03LABDDFGF@?$CI?$CJ?$DL?$AA@ DB '();', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KIAPHAEH@Initialize?$AA@
CONST	SEGMENT
??_C@_0L@KIAPHAEH@Initialize?$AA@ DB 'Initialize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@CHNGBBNI@?$CI?5unsigned?5short?5maxConnections?0@
CONST	SEGMENT
??_C@_0HC@CHNGBBNI@?$CI?5unsigned?5short?5maxConnections?0@ DB '( unsigne'
	DB	'd short maxConnections, unsigned short localPort, int _thread'
	DB	'SleepTimer, const char *forceHostAddress );', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7RakNetCommandParser@@6B@
CONST	SEGMENT
??_7RakNetCommandParser@@6B@ DD FLAT:??_R4RakNetCommandParser@@6B@ ; RakNetCommandParser::`vftable'
	DD	FLAT:??_ERakNetCommandParser@@UAEPAXI@Z
	DD	FLAT:?GetName@RakNetCommandParser@@UBEPADXZ
	DD	FLAT:?OnNewIncomingConnection@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z
	DD	FLAT:?OnConnectionLost@CommandParserInterface@@UAEXUPlayerID@@PAVTransportInterface@@@Z
	DD	FLAT:?SendHelp@RakNetCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?OnCommand@RakNetCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z
	DD	FLAT:?OnTransportChange@CommandParserInterface@@UAEXPAVTransportInterface@@@Z
	DD	FLAT:?GetRegisteredCommand@CommandParserInterface@@UAE_NPBDPAURegisteredCommand@@@Z
	DD	FLAT:?SendCommandList@CommandParserInterface@@UAEXPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXHPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXUPlayerID@@PBDPAVTransportInterface@@0@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEXPADPBDPAVTransportInterface@@UPlayerID@@@Z
	DD	FLAT:?ReturnResult@CommandParserInterface@@MAEX_NPBDPAVTransportInterface@@UPlayerID@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0RakNetCommandParser@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0RakNetCommandParser@@QAE@XZ$0
__ehfuncinfo$??0RakNetCommandParser@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0RakNetCommandParser@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GRakNetCommandParser@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GRakNetCommandParser@@UAEPAXI@Z PROC			; RakNetCommandParser::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RakNetCommandParser@@UAE@XZ		; RakNetCommandParser::~RakNetCommandParser
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRakNetCommandParser@@UAEPAXI@Z ENDP			; RakNetCommandParser::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknetcommandparser.cpp
;	COMDAT ?SetRakPeerInterface@RakNetCommandParser@@QAEXPAVRakPeerInterface@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rakPeer$ = 8						; size = 4
?SetRakPeerInterface@RakNetCommandParser@@QAEXPAVRakPeerInterface@@@Z PROC ; RakNetCommandParser::SetRakPeerInterface, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	peer=rakPeer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rakPeer$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 61   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRakPeerInterface@RakNetCommandParser@@QAEXPAVRakPeerInterface@@@Z ENDP ; RakNetCommandParser::SetRakPeerInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknetcommandparser.cpp
;	COMDAT ?SendHelp@RakNetCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_transport$ = 8						; size = 4
_playerId$ = 12						; size = 6
?SendHelp@RakNetCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z PROC ; RakNetCommandParser::SendHelp, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 	if (peer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN2@SendHelp

; 281  : 	{
; 282  : 		transport->Send(playerId, "The RakNet parser provides mirror functions to RakPeer\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DJ@IKKKFOCF@The?5RakNet?5parser?5provides?5mirro@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 283  : 		transport->Send(playerId, "PlayerIDs take two parameters: send <BinaryAddress> <Port>.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DO@EIJLHEFL@PlayerIDs?5take?5two?5parameters?3?5s@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 284  : 		transport->Send(playerId, "For bool, send 1 or 0.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BJ@BAHHPHPK@For?5bool?0?5send?51?5or?50?4?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 285  : 	}
; 286  : 	else

	jmp	SHORT $LN3@SendHelp
$LN2@SendHelp:

; 287  : 	{
; 288  : 		transport->Send(playerId, "Parser not active.  Call SetRakPeerInterface.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DA@LBMNAFLL@Parser?5not?5active?4?5?5Call?5SetRakP@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@SendHelp:

; 289  : 	}
; 290  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SendHelp@RakNetCommandParser@@UAEXPAVTransportInterface@@UPlayerID@@@Z ENDP ; RakNetCommandParser::SendHelp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknetcommandparser.cpp
;	COMDAT ?GetName@RakNetCommandParser@@UBEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetName@RakNetCommandParser@@UBEPADXZ PROC		; RakNetCommandParser::GetName, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 	return "RakNet";

	mov	eax, OFFSET ??_C@_06IFBHNIIL@RakNet?$AA@

; 277  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetName@RakNetCommandParser@@UBEPADXZ ENDP		; RakNetCommandParser::GetName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknetcommandparser.cpp
;	COMDAT ?OnCommand@RakNetCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z
_TEXT	SEGMENT
tv1224 = -917						; size = 1
tv833 = -917						; size = 1
tv673 = -917						; size = 1
tv418 = -917						; size = 1
$T1 = -910						; size = 6
$T2 = -894						; size = 6
$T3 = -878						; size = 6
$T4 = -862						; size = 6
$T5 = -846						; size = 6
$T6 = -830						; size = 6
$T7 = -814						; size = 6
$T8 = -798						; size = 6
$T9 = -782						; size = 6
$T10 = -766						; size = 6
$T11 = -750						; size = 6
$T12 = -734						; size = 6
_passwordLength$13 = -528				; size = 4
_password$14 = -516					; size = 256
_output$15 = -252					; size = 6
_i$16 = -236						; size = 4
_count$17 = -224					; size = 2
_remoteSystems$18 = -212				; size = 192
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_command$ = 8						; size = 4
_numParameters$ = 12					; size = 4
_parameterList$ = 16					; size = 4
_transport$ = 20					; size = 4
_playerId$ = 24						; size = 6
_originalString$ = 32					; size = 4
?OnCommand@RakNetCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z PROC ; RakNetCommandParser::OnCommand, COMDAT
; _this$ = ecx

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 920				; 00000398H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-920]
	mov	ecx, 230				; 000000e6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 	if (peer==0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN87@OnCommand

; 68   : 		return false;

	xor	al, al
	jmp	$LN88@OnCommand
$LN87@OnCommand:

; 69   : 
; 70   : 	if (strcmp(command, "Initialize")==0)

	push	OFFSET ??_C@_0L@KIAPHAEH@Initialize?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN86@OnCommand

; 71   : 	{
; 72   : 		ReturnResult(peer->Initialize((unsigned short)atoi(parameterList[0]), (unsigned short)atoi(parameterList[1]),atoi(parameterList[2]),parameterList[3]), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	edi, esp
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN86@OnCommand:

; 73   : 	}
; 74   : 	else if (strcmp(command, "InitializeSecurity")==0)

	push	OFFSET ??_C@_0BD@CEGNGNCO@InitializeSecurity?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN84@OnCommand

; 75   : 	{
; 76   : 		peer->InitializeSecurity(0,0,0,0);

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 77   : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN84@OnCommand:

; 78   : 	}
; 79   : 	else if (strcmp(command, "DisableSecurity")==0)

	push	OFFSET ??_C@_0BA@GLBJOADB@DisableSecurity?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN82@OnCommand

; 80   : 	{
; 81   : 		peer->DisableSecurity();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 82   : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN82@OnCommand:

; 83   : 	}
; 84   : 	else if (strcmp(command, "SetMaximumIncomingConnections")==0)

	push	OFFSET ??_C@_0BO@KHLAAKGH@SetMaximumIncomingConnections?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN80@OnCommand

; 85   : 	{
; 86   : 		peer->SetMaximumIncomingConnections((unsigned short)atoi(parameterList[0]));

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 87   : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN80@OnCommand:

; 88   : 	}
; 89   : 	else if (strcmp(command, "GetMaximumIncomingConnections")==0)

	push	OFFSET ??_C@_0BO@CGNPLKEF@GetMaximumIncomingConnections?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN78@OnCommand

; 90   : 	{
; 91   : 		ReturnResult(peer->GetMaximumIncomingConnections(), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edi, esp
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	ecx, ax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN78@OnCommand:

; 92   : 	}
; 93   : 	else if (strcmp(command, "Connect")==0)

	push	OFFSET ??_C@_07FJPHLACI@Connect?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN76@OnCommand

; 94   : 	{
; 95   : 		ReturnResult(peer->Connect(parameterList[0], (unsigned short)atoi(parameterList[1]),parameterList[2],atoi(parameterList[3])), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	edi, esp
	push	eax
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN76@OnCommand:

; 96   : 	}
; 97   : 	else if (strcmp(command, "Disconnect")==0)

	push	OFFSET ??_C@_0L@CMGJAGDM@Disconnect?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN74@OnCommand

; 98   : 	{
; 99   : 		peer->Disconnect(atoi(parameterList[0]), (unsigned char)atoi(parameterList[1]));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 100  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN74@OnCommand:

; 101  : 	}
; 102  : 	else if (strcmp(command, "IsActive")==0)

	push	OFFSET ??_C@_08CHIOLOMB@IsActive?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN72@OnCommand

; 103  : 	{
; 104  : 		ReturnResult(peer->IsActive(), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edi, esp
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN72@OnCommand:

; 105  : 	}
; 106  : 	else if (strcmp(command, "GetConnectionList")==0)

	push	OFFSET ??_C@_0BC@ILJDNENF@GetConnectionList?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN70@OnCommand

; 107  : 	{
; 108  : 		PlayerID remoteSystems[32];
; 109  : 		unsigned short count=32;

	mov	eax, 32					; 00000020H
	mov	WORD PTR _count$17[ebp], ax

; 110  : 		unsigned i;
; 111  : 		if (peer->GetConnectionList(remoteSystems, &count))

	mov	esi, esp
	lea	eax, DWORD PTR _count$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _remoteSystems$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	$LN69@OnCommand

; 112  : 		{
; 113  : 			if (count==0)

	movzx	eax, WORD PTR _count$17[ebp]
	test	eax, eax
	jne	SHORT $LN68@OnCommand

; 114  : 			{
; 115  : 				transport->Send(playerId, "GetConnectionList() returned no systems connected.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DF@CCBLEPAE@GetConnectionList?$CI?$CJ?5returned?5no?5@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 116  : 			}
; 117  : 			else

	jmp	$LN64@OnCommand
$LN68@OnCommand:

; 118  : 			{
; 119  : 				transport->Send(playerId, "GetConnectionList() returned:\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CA@FBLBOFOF@GetConnectionList?$CI?$CJ?5returned?3?$AN?6?$AA@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 120  : 				for (i=0; i < count; i++)

	mov	DWORD PTR _i$16[ebp], 0
	jmp	SHORT $LN66@OnCommand
$LN65@OnCommand:
	mov	eax, DWORD PTR _i$16[ebp]
	add	eax, 1
	mov	DWORD PTR _i$16[ebp], eax
$LN66@OnCommand:
	movzx	eax, WORD PTR _count$17[ebp]
	cmp	DWORD PTR _i$16[ebp], eax
	jae	$LN64@OnCommand

; 121  : 					transport->Send(playerId, "%i %s %i:%i\r\n", i, peer->PlayerIDToDottedIP(remoteSystems[i]), remoteSystems[i].binaryAddress, remoteSystems[i].port);

	imul	eax, DWORD PTR _i$16[ebp], 6
	movzx	ecx, WORD PTR _remoteSystems$18[ebp+eax+4]
	mov	esi, esp
	push	ecx
	imul	edx, DWORD PTR _i$16[ebp], 6
	mov	eax, DWORD PTR _remoteSystems$18[ebp+edx]
	push	eax
	imul	ecx, DWORD PTR _i$16[ebp], 6
	lea	edx, DWORD PTR _remoteSystems$18[ebp+ecx]
	mov	edi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR [edx+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+184]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _i$16[ebp]
	push	eax
	push	OFFSET ??_C@_0O@CJPBCGIF@?$CFi?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 32					; 00000020H
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN65@OnCommand
$LN64@OnCommand:

; 122  : 			}
; 123  : 		}
; 124  : 		else

	jmp	SHORT $LN63@OnCommand
$LN69@OnCommand:

; 125  : 			transport->Send(playerId, "GetConnectionList() returned false.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CG@CPJOBPEE@GetConnectionList?$CI?$CJ?5returned?5fal@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN63@OnCommand:
	jmp	$LN1@OnCommand
$LN70@OnCommand:

; 126  : 	}
; 127  : 	else if (strcmp(command, "CloseConnection")==0)

	push	OFFSET ??_C@_0BA@OFFOMIIA@CloseConnection?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN61@OnCommand

; 128  : 	{
; 129  : 		peer->CloseConnection(IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1])),atoi(parameterList[2])!=0,(unsigned char)atoi(parameterList[3]));

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN90@OnCommand
	mov	BYTE PTR tv418[ebp], 1
	jmp	SHORT $LN91@OnCommand
$LN90@OnCommand:
	mov	BYTE PTR tv418[ebp], 0
$LN91@OnCommand:
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	mov	esi, esp
	push	eax
	movzx	ecx, BYTE PTR tv418[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 130  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN61@OnCommand:

; 131  : 	}
; 132  : 	else if (strcmp(command, "GetIndexFromPlayerID")==0)

	push	OFFSET ??_C@_0BF@DOAJNCJI@GetIndexFromPlayerID?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN59@OnCommand

; 133  : 	{
; 134  : 		ReturnResult(peer->GetIndexFromPlayerID(IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1]))), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	mov	edi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN59@OnCommand:

; 135  : 	}
; 136  : 	else if (strcmp(command, "GetPlayerIDFromIndex")==0)

	push	OFFSET ??_C@_0BF@IHDMHLBB@GetPlayerIDFromIndex?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN57@OnCommand

; 137  : 	{
; 138  : 		ReturnResult(peer->GetPlayerIDFromIndex(atoi(parameterList[0])), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	edi, esp
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN57@OnCommand:

; 139  : 	}
; 140  : 	else if (strcmp(command, "AddToBanList")==0)

	push	OFFSET ??_C@_0N@NKKCKAAI@AddToBanList?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN55@OnCommand

; 141  : 	{
; 142  : 		peer->AddToBanList(parameterList[0], atoi(parameterList[1]));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN55@OnCommand:

; 144  : 	}
; 145  : 	else if (strcmp(command, "RemoveFromBanList")==0)

	push	OFFSET ??_C@_0BC@OPAHFPCI@RemoveFromBanList?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN53@OnCommand

; 146  : 	{
; 147  : 		peer->RemoveFromBanList(parameterList[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	esi, esp
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+104]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 148  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN53@OnCommand:

; 149  : 	}
; 150  : 	else if (strcmp(command, "ClearBanList")==0)

	push	OFFSET ??_C@_0N@KOCJFACH@ClearBanList?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN51@OnCommand

; 151  : 	{
; 152  : 		peer->ClearBanList();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+108]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 153  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN51@OnCommand:

; 154  : 	}
; 155  : 	else if (strcmp(command, "IsBanned")==0)

	push	OFFSET ??_C@_08OLFCJOKF@IsBanned?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN49@OnCommand

; 156  : 	{
; 157  : 		ReturnResult(peer->IsBanned(parameterList[0]), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	edi, esp
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+112]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN49@OnCommand:

; 158  : 	}
; 159  : 	else if (strcmp(command, "Ping1")==0)

	push	OFFSET ??_C@_05IGKNBJLA@Ping1?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN47@OnCommand

; 160  : 	{
; 161  : 		peer->Ping(IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1])));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	mov	esi, esp
	sub	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [edx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 162  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN47@OnCommand:

; 163  : 	}
; 164  : 	else if (strcmp(command, "Ping2")==0)

	push	OFFSET ??_C@_05KNIAEKHD@Ping2?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN45@OnCommand

; 165  : 	{
; 166  : 		peer->Ping(parameterList[0], (unsigned short) atoi(parameterList[1]), atoi(parameterList[2])!=0);

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN92@OnCommand
	mov	BYTE PTR tv673[ebp], 1
	jmp	SHORT $LN93@OnCommand
$LN92@OnCommand:
	mov	BYTE PTR tv673[ebp], 0
$LN93@OnCommand:
	mov	esi, esp
	movzx	eax, BYTE PTR tv673[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 167  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN45@OnCommand:

; 168  : 	}
; 169  : 	else if (strcmp(command, "GetAveragePing")==0)

	push	OFFSET ??_C@_0P@EDIOBIMO@GetAveragePing?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN43@OnCommand

; 170  : 	{
; 171  : 		ReturnResult(peer->GetAveragePing(IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1]))), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	mov	edi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+124]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN43@OnCommand:

; 172  : 	}
; 173  : 	else if (strcmp(command, "GetLastPing")==0)

	push	OFFSET ??_C@_0M@GBOMMBCI@GetLastPing?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN41@OnCommand

; 174  : 	{
; 175  : 		ReturnResult(peer->GetLastPing(IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1]))), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	mov	edi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+128]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN41@OnCommand:

; 176  : 	}
; 177  : 	else if (strcmp(command, "GetLowestPing")==0)

	push	OFFSET ??_C@_0O@JFCMDFLA@GetLowestPing?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN39@OnCommand

; 178  : 	{
; 179  : 		ReturnResult(peer->GetLowestPing(IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1]))), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	mov	edi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+132]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN39@OnCommand:

; 180  : 	}
; 181  : 	else if (strcmp(command, "SetOccasionalPing")==0)

	push	OFFSET ??_C@_0BC@EMOHACJN@SetOccasionalPing?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN37@OnCommand

; 182  : 	{
; 183  : 		peer->SetOccasionalPing(atoi(parameterList[0])!=0);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN94@OnCommand
	mov	BYTE PTR tv833[ebp], 1
	jmp	SHORT $LN95@OnCommand
$LN94@OnCommand:
	mov	BYTE PTR tv833[ebp], 0
$LN95@OnCommand:
	mov	esi, esp
	movzx	ecx, BYTE PTR tv833[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+136]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 184  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN37@OnCommand:

; 185  : 	}
; 186  : 	else if (strcmp(command, "SetOfflinePingResponse")==0)

	push	OFFSET ??_C@_0BH@COFJJKJJ@SetOfflinePingResponse?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@OnCommand

; 187  : 	{
; 188  : 		peer->SetOfflinePingResponse(parameterList[0], atoi(parameterList[1]));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+152]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 189  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN35@OnCommand:

; 190  : 	}
; 191  : 	else if (strcmp(command, "GetInternalID")==0)

	push	OFFSET ??_C@_0O@BODKKCEA@GetInternalID?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN33@OnCommand

; 192  : 	{
; 193  : 		ReturnResult(peer->GetInternalID(), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edi, esp
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+156]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN33@OnCommand:

; 194  : 	}
; 195  : 	else if (strcmp(command, "GetExternalID")==0)

	push	OFFSET ??_C@_0O@DOJAMBCI@GetExternalID?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN31@OnCommand

; 196  : 	{
; 197  : 		ReturnResult(peer->GetExternalID(IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1]))), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	mov	edi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+160]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN31@OnCommand:

; 198  : 	}
; 199  : 	else if (strcmp(command, "SetTimeoutTime")==0)

	push	OFFSET ??_C@_0P@BHOCBDLP@SetTimeoutTime?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN29@OnCommand

; 200  : 	{
; 201  : 		peer->SetTimeoutTime(atoi(parameterList[0]), IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1])));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	mov	esi, esp
	sub	esp, 8
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [edx+4], ax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 202  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN29@OnCommand:

; 203  : 	}
; 204  : 	else if (strcmp(command, "SetMTUSize")==0)

	push	OFFSET ??_C@_0L@KOJFFEPB@SetMTUSize?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@OnCommand

; 205  : 	{
; 206  : 		ReturnResult(peer->SetMTUSize(atoi(parameterList[0])), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	edi, esp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+168]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN27@OnCommand:

; 207  : 	}
; 208  : 	else if (strcmp(command, "GetMTUSize")==0)

	push	OFFSET ??_C@_0L@LALKODLI@GetMTUSize?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@OnCommand

; 209  : 	{
; 210  : 		ReturnResult(peer->GetMTUSize(), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edi, esp
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+172]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN25@OnCommand:

; 211  : 	}
; 212  : 	else if (strcmp(command, "GetNumberOfAddresses")==0)

	push	OFFSET ??_C@_0BF@PNPCKBMP@GetNumberOfAddresses?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@OnCommand

; 213  : 	{
; 214  : 		ReturnResult((int)peer->GetNumberOfAddresses(), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edi, esp
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+176]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN23@OnCommand:

; 215  : 	}
; 216  : 	else if (strcmp(command, "PlayerIDToDottedIP")==0)

	push	OFFSET ??_C@_0BD@MPNIDDPE@PlayerIDToDottedIP?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN21@OnCommand

; 217  : 	{
; 218  : 		ReturnResult((char*)peer->PlayerIDToDottedIP(IntegersToPlayerID(atoi(parameterList[0]), atoi(parameterList[1]))), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_atoi
	add	esp, 4
	push	eax
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR $T12[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IntegersToPlayerID@CommandParserInterface@@IAE?AUPlayerID@@HH@Z ; CommandParserInterface::IntegersToPlayerID
	mov	edi, esp
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR [eax+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN21@OnCommand:

; 219  : 	}
; 220  : 	else if (strcmp(command, "IPToPlayerID")==0)

	push	OFFSET ??_C@_0N@JBCDMKNH@IPToPlayerID?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN19@OnCommand

; 221  : 	{
; 222  : 		PlayerID output;
; 223  : 		peer->IPToPlayerID(parameterList[0],(unsigned short) atoi(parameterList[1]),&output);

	mov	esi, esp
	lea	eax, DWORD PTR _output$15[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+188]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 224  : 		if (output==UNASSIGNED_PLAYER_ID)

	push	OFFSET _UNASSIGNED_PLAYER_ID
	lea	ecx, DWORD PTR _output$15[ebp]
	call	??8PlayerID@@QBE_NABU0@@Z		; PlayerID::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@OnCommand

; 225  : 		{
; 226  : 			transport->Send(playerId, "IPToPlayerID(): UNASSIGNED_PLAYER_ID.\r\n");

	mov	esi, esp
	push	OFFSET ??_C@_0CI@CKHCAGCF@IPToPlayerID?$CI?$CJ?3?5UNASSIGNED_PLAYE@
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _transport$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 227  : 		}
; 228  : 		else

	jmp	SHORT $LN17@OnCommand
$LN18@OnCommand:

; 229  : 		{
; 230  : 			transport->Send(playerId, "IPToPlayerID(): %s %i:%i\r\n", peer->PlayerIDToDottedIP(output), output.binaryAddress, output.port);

	movzx	eax, WORD PTR _output$15[ebp+4]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _output$15[ebp]
	push	ecx
	mov	edi, esp
	sub	esp, 8
	mov	edx, esp
	mov	eax, DWORD PTR _output$15[ebp]
	mov	DWORD PTR [edx], eax
	mov	cx, WORD PTR _output$15[ebp+4]
	mov	WORD PTR [edx+4], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+184]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET ??_C@_0BL@EPHHODIP@IPToPlayerID?$CI?$CJ?3?5?$CFs?5?$CFi?3?$CFi?$AN?6?$AA@
	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	ax, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [ecx+4], ax
	mov	ecx, DWORD PTR _transport$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@OnCommand:

; 231  : 		}

	jmp	$LN1@OnCommand
$LN19@OnCommand:

; 232  : 	}
; 233  : 	else if (strcmp(command, "GetLocalIP")==0)

	push	OFFSET ??_C@_0L@GMHEHEJF@GetLocalIP?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@OnCommand

; 234  : 	{
; 235  : 		ReturnResult((char*) peer->GetLocalIP(atoi(parameterList[0])), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	edi, esp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+180]
	call	edx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN15@OnCommand:

; 236  : 	}
; 237  : 	else if (strcmp(command, "AllowConnectionResponseIPMigration")==0)

	push	OFFSET ??_C@_0CD@KAMMBDPJ@AllowConnectionResponseIPMigrati@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN13@OnCommand

; 238  : 	{
; 239  : 		peer->AllowConnectionResponseIPMigration(atoi(parameterList[0])!=0);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	test	eax, eax
	je	SHORT $LN96@OnCommand
	mov	BYTE PTR tv1224[ebp], 1
	jmp	SHORT $LN97@OnCommand
$LN96@OnCommand:
	mov	BYTE PTR tv1224[ebp], 0
$LN97@OnCommand:
	mov	esi, esp
	movzx	ecx, BYTE PTR tv1224[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 240  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN13@OnCommand:

; 241  : 	}
; 242  : 	else if (strcmp(command, "AdvertiseSystem")==0)

	push	OFFSET ??_C@_0BA@FKEMDMEG@AdvertiseSystem?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN11@OnCommand

; 243  : 	{
; 244  : 		peer->AdvertiseSystem(parameterList[0], (unsigned short) atoi(parameterList[1]),parameterList[2],atoi(parameterList[3]));

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atoi
	add	esp, 4
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _parameterList$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+196]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 245  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN11@OnCommand:

; 246  : 	}
; 247  : 	else if (strcmp(command, "ApplyNetworkSimulator")==0)

	push	OFFSET ??_C@_0BG@CPIIDFPC@ApplyNetworkSimulator?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN9@OnCommand

; 248  : 	{
; 249  : 		peer->ApplyNetworkSimulator(atof(parameterList[0]), (unsigned short) atoi(parameterList[1]),(unsigned short) atoi(parameterList[2]));

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	call	_atof
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+252]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 250  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN9@OnCommand:

; 251  : 	}
; 252  : 	else if (strcmp(command, "IsNetworkSimulatorActive")==0)

	push	OFFSET ??_C@_0BJ@FMJBLPB@IsNetworkSimulatorActive?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@OnCommand

; 253  : 	{
; 254  : 		ReturnResult(peer->IsNetworkSimulatorActive(), command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	edi, esp
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+256]
	call	eax
	cmp	edi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN7@OnCommand:

; 255  : 	}
; 256  : 	else if (strcmp(command, "SetIncomingPassword")==0)

	push	OFFSET ??_C@_0BE@DMIJCLBA@SetIncomingPassword?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@OnCommand

; 257  : 	{
; 258  : 		peer->SetIncomingPassword(parameterList[0], atoi(parameterList[1]));

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _parameterList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	call	_atoi
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _parameterList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 259  : 		ReturnResult(command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@OnCommand
$LN5@OnCommand:

; 260  : 	}
; 261  : 	else if (strcmp(command, "GetIncomingPassword")==0)

	push	OFFSET ??_C@_0BE@JCKCGLGM@GetIncomingPassword?$AA@
	mov	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN1@OnCommand

; 262  : 	{
; 263  : 		char password[256];
; 264  : 		int passwordLength;
; 265  : 		peer->GetIncomingPassword(password, &passwordLength);

	mov	esi, esp
	lea	eax, DWORD PTR _passwordLength$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _password$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 266  : 		if (passwordLength)

	cmp	DWORD PTR _passwordLength$13[ebp], 0
	je	SHORT $LN2@OnCommand

; 267  : 			ReturnResult((char*)password, command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	lea	edx, DWORD PTR _password$14[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 268  : 		else

	jmp	SHORT $LN1@OnCommand
$LN2@OnCommand:

; 269  : 			ReturnResult(0, command, transport, playerId);

	mov	esi, esp
	sub	esp, 8
	mov	eax, esp
	mov	ecx, DWORD PTR _playerId$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	dx, WORD PTR _playerId$[ebp+4]
	mov	WORD PTR [eax+4], dx
	mov	eax, DWORD PTR _transport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _command$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@OnCommand:

; 270  : 	}
; 271  : 
; 272  : 	return true;

	mov	al, 1
$LN88@OnCommand:

; 273  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN104@OnCommand
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 920				; 00000398H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN104@OnCommand:
	DD	5
	DD	$LN103@OnCommand
$LN103@OnCommand:
	DD	-212					; ffffff2cH
	DD	192					; 000000c0H
	DD	$LN98@OnCommand
	DD	-224					; ffffff20H
	DD	2
	DD	$LN99@OnCommand
	DD	-252					; ffffff04H
	DD	6
	DD	$LN100@OnCommand
	DD	-516					; fffffdfcH
	DD	256					; 00000100H
	DD	$LN101@OnCommand
	DD	-528					; fffffdf0H
	DD	4
	DD	$LN102@OnCommand
$LN102@OnCommand:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN101@OnCommand:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN100@OnCommand:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN99@OnCommand:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN98@OnCommand:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
?OnCommand@RakNetCommandParser@@UAE_NPBDIPAPADPAVTransportInterface@@UPlayerID@@0@Z ENDP ; RakNetCommandParser::OnCommand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknetcommandparser.cpp
;	COMDAT ??1RakNetCommandParser@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1RakNetCommandParser@@UAE@XZ PROC			; RakNetCommandParser::~RakNetCommandParser, COMDAT
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RakNetCommandParser@@6B@

; 57   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CommandParserInterface@@UAE@XZ	; CommandParserInterface::~CommandParserInterface
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1RakNetCommandParser@@UAE@XZ ENDP			; RakNetCommandParser::~RakNetCommandParser
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\raknetcommandparser.cpp
;	COMDAT ??0RakNetCommandParser@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0RakNetCommandParser@@QAE@XZ PROC			; RakNetCommandParser::RakNetCommandParser, COMDAT
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0RakNetCommandParser@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CommandParserInterface@@QAE@XZ	; CommandParserInterface::CommandParserInterface
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7RakNetCommandParser@@6B@

; 16   : 	RegisterCommand(4, "Initialize","( unsigned short maxConnections, unsigned short localPort, int _threadSleepTimer, const char *forceHostAddress );");

	push	OFFSET ??_C@_0HC@CHNGBBNI@?$CI?5unsigned?5short?5maxConnections?0@
	push	OFFSET ??_C@_0L@KIAPHAEH@Initialize?$AA@
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 17   : 	RegisterCommand(0,"InitializeSecurity","();");

	push	OFFSET ??_C@_03LABDDFGF@?$CI?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BD@CEGNGNCO@InitializeSecurity?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 18   : 	RegisterCommand(0,"DisableSecurity","( void );");

	push	OFFSET ??_C@_09DNJKEAGD@?$CI?5void?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BA@GLBJOADB@DisableSecurity?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 19   : 	RegisterCommand(1,"SetMaximumIncomingConnections","( unsigned short numberAllowed );");

	push	OFFSET ??_C@_0CC@NFNIDBGI@?$CI?5unsigned?5short?5numberAllowed?5?$CJ@
	push	OFFSET ??_C@_0BO@KHLAAKGH@SetMaximumIncomingConnections?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 20   : 	RegisterCommand(0,"GetMaximumIncomingConnections","( void ) const;");

	push	OFFSET ??_C@_0BA@HKDCHNNO@?$CI?5void?5?$CJ?5const?$DL?$AA@
	push	OFFSET ??_C@_0BO@CGNPLKEF@GetMaximumIncomingConnections?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 21   : 	RegisterCommand(4,"Connect","( const char* host, unsigned short remotePort, char* passwordData, int passwordDataLength );");

	push	OFFSET ??_C@_0FN@GFIEFHJA@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@
	push	OFFSET ??_C@_07FJPHLACI@Connect?$AA@
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 22   : 	RegisterCommand(2,"Disconnect","( unsigned int blockDuration, unsigned char orderingChannel=0 );");

	push	OFFSET ??_C@_0EB@PCFINJNC@?$CI?5unsigned?5int?5blockDuration?0?5un@
	push	OFFSET ??_C@_0L@CMGJAGDM@Disconnect?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 23   : 	RegisterCommand(0,"IsActive","( void ) const;");

	push	OFFSET ??_C@_0BA@HKDCHNNO@?$CI?5void?5?$CJ?5const?$DL?$AA@
	push	OFFSET ??_C@_08CHIOLOMB@IsActive?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 24   : 	RegisterCommand(0,"GetConnectionList","() const;");

	push	OFFSET ??_C@_09OEOFIABO@?$CI?$CJ?5const?$DL?$AA@
	push	OFFSET ??_C@_0BC@ILJDNENF@GetConnectionList?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 25   : 	RegisterCommand(4,"CloseConnection","( const PlayerID target, bool sendDisconnectionNotification, unsigned char orderingChannel=0 );");

	push	OFFSET ??_C@_0GA@KACHFANE@?$CI?5const?5PlayerID?5target?0?5bool?5se@
	push	OFFSET ??_C@_0BA@OFFOMIIA@CloseConnection?$AA@
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 26   : 	RegisterCommand(2,"GetIndexFromPlayerID","( const PlayerID playerId );");

	push	OFFSET ??_C@_0BN@LKNIHIDH@?$CI?5const?5PlayerID?5playerId?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BF@DOAJNCJI@GetIndexFromPlayerID?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 27   : 	RegisterCommand(1,"GetPlayerIDFromIndex","( int index );");

	push	OFFSET ??_C@_0P@JLHINONG@?$CI?5int?5index?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BF@IHDMHLBB@GetPlayerIDFromIndex?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 28   : 	RegisterCommand(2,"AddToBanList","( const char *IP, RakNetTime milliseconds=0 );");

	push	OFFSET ??_C@_0CP@LDLKKGIO@?$CI?5const?5char?5?$CKIP?0?5RakNetTime?5mil@
	push	OFFSET ??_C@_0N@NKKCKAAI@AddToBanList?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 29   : 	RegisterCommand(1,"RemoveFromBanList","( const char *IP );");

	push	OFFSET ??_C@_0BE@NLLELJHO@?$CI?5const?5char?5?$CKIP?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BC@OPAHFPCI@RemoveFromBanList?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 30   : 	RegisterCommand(0,"ClearBanList","( void );");

	push	OFFSET ??_C@_09DNJKEAGD@?$CI?5void?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0N@KOCJFACH@ClearBanList?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 31   : 	RegisterCommand(1,"IsBanned","( const char *IP );");

	push	OFFSET ??_C@_0BE@NLLELJHO@?$CI?5const?5char?5?$CKIP?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_08OLFCJOKF@IsBanned?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 32   : 	RegisterCommand(2,"Ping1","( const PlayerID target );");

	push	OFFSET ??_C@_0BL@EENGEPEM@?$CI?5const?5PlayerID?5target?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_05IGKNBJLA@Ping1?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 33   : 	RegisterCommand(3,"Ping2","( const char* host, unsigned short remotePort, bool onlyReplyOnAcceptingConnections );");

	push	OFFSET ??_C@_0FH@LBEFBABP@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@
	push	OFFSET ??_C@_05KNIAEKHD@Ping2?$AA@
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 34   : 	RegisterCommand(2,"GetAveragePing","( const PlayerID playerId );");

	push	OFFSET ??_C@_0BN@LKNIHIDH@?$CI?5const?5PlayerID?5playerId?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0P@EDIOBIMO@GetAveragePing?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 35   : 	RegisterCommand(2,"GetLastPing","( const PlayerID playerId ) const;");

	push	OFFSET ??_C@_0CD@KJBLFJML@?$CI?5const?5PlayerID?5playerId?5?$CJ?5cons@
	push	OFFSET ??_C@_0M@GBOMMBCI@GetLastPing?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 36   : 	RegisterCommand(2,"GetLowestPing","( const PlayerID playerId ) const;");

	push	OFFSET ??_C@_0CD@KJBLFJML@?$CI?5const?5PlayerID?5playerId?5?$CJ?5cons@
	push	OFFSET ??_C@_0O@JFCMDFLA@GetLowestPing?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 37   : 	RegisterCommand(1,"SetOccasionalPing","( bool doPing );");

	push	OFFSET ??_C@_0BB@PJAEIOFC@?$CI?5bool?5doPing?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BC@EMOHACJN@SetOccasionalPing?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 38   : 	RegisterCommand(2,"SetOfflinePingResponse","( const char *data, const unsigned int length );");

	push	OFFSET ??_C@_0DB@DCEMLAGG@?$CI?5const?5char?5?$CKdata?0?5const?5unsign@
	push	OFFSET ??_C@_0BH@COFJJKJJ@SetOfflinePingResponse?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 39   : 	RegisterCommand(0,"GetInternalID","( void ) const;");

	push	OFFSET ??_C@_0BA@HKDCHNNO@?$CI?5void?5?$CJ?5const?$DL?$AA@
	push	OFFSET ??_C@_0O@BODKKCEA@GetInternalID?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 40   : 	RegisterCommand(2,"GetExternalID","( const PlayerID target ) const;");

	push	OFFSET ??_C@_0CB@IEHKOJLG@?$CI?5const?5PlayerID?5target?5?$CJ?5const?$DL@
	push	OFFSET ??_C@_0O@DOJAMBCI@GetExternalID?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 41   : 	RegisterCommand(3,"SetTimeoutTime","( RakNetTime timeMS, const PlayerID target );");

	push	OFFSET ??_C@_0CO@HEMFMHDA@?$CI?5RakNetTime?5timeMS?0?5const?5Playe@
	push	OFFSET ??_C@_0P@BHOCBDLP@SetTimeoutTime?$AA@
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 42   : 	RegisterCommand(1,"SetMTUSize","( int size );");

	push	OFFSET ??_C@_0O@MFILJDHD@?$CI?5int?5size?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0L@KOJFFEPB@SetMTUSize?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 43   : 	RegisterCommand(0,"GetMTUSize","( void ) const;");

	push	OFFSET ??_C@_0BA@HKDCHNNO@?$CI?5void?5?$CJ?5const?$DL?$AA@
	push	OFFSET ??_C@_0L@LALKODLI@GetMTUSize?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 44   : 	RegisterCommand(0,"GetNumberOfAddresses","( void );");

	push	OFFSET ??_C@_09DNJKEAGD@?$CI?5void?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BF@PNPCKBMP@GetNumberOfAddresses?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 45   : 	RegisterCommand(2,"PlayerIDToDottedIP","( const PlayerID playerId ) const;");

	push	OFFSET ??_C@_0CD@KJBLFJML@?$CI?5const?5PlayerID?5playerId?5?$CJ?5cons@
	push	OFFSET ??_C@_0BD@MPNIDDPE@PlayerIDToDottedIP?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 46   : 	RegisterCommand(2,"IPToPlayerID","( const char* host, unsigned short remotePort );");

	push	OFFSET ??_C@_0DB@OOHEDHIF@?$CI?5const?5char?$CK?5host?0?5unsigned?5sho@
	push	OFFSET ??_C@_0N@JBCDMKNH@IPToPlayerID?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 47   : 	RegisterCommand(1,"GetLocalIP","( unsigned int index );");

	push	OFFSET ??_C@_0BI@PMILEPOG@?$CI?5unsigned?5int?5index?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0L@GMHEHEJF@GetLocalIP?$AA@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 48   : 	RegisterCommand(1,"AllowConnectionResponseIPMigration","( bool allow );");

	push	OFFSET ??_C@_0BA@GNMOGEAE@?$CI?5bool?5allow?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0CD@KAMMBDPJ@AllowConnectionResponseIPMigrati@
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 49   : 	RegisterCommand(4,"AdvertiseSystem","( const char *host, unsigned short remotePort, const char *data, int dataLength );");

	push	OFFSET ??_C@_0FD@OEMJOMAP@?$CI?5const?5char?5?$CKhost?0?5unsigned?5sho@
	push	OFFSET ??_C@_0BA@FKEMDMEG@AdvertiseSystem?$AA@
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 50   : 	RegisterCommand(2,"SetIncomingPassword","( const char* passwordData, int passwordDataLength );");

	push	OFFSET ??_C@_0DG@OPDKKEOB@?$CI?5const?5char?$CK?5passwordData?0?5int?5@
	push	OFFSET ??_C@_0BE@DMIJCLBA@SetIncomingPassword?$AA@
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 51   : 	RegisterCommand(0,"GetIncomingPassword","( void );");

	push	OFFSET ??_C@_09DNJKEAGD@?$CI?5void?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BE@JCKCGLGM@GetIncomingPassword?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 52   : 	RegisterCommand(3,"ApplyNetworkSimulator","( double maxSendBPS, unsigned short minExtraPing, unsigned short extraPingVariance);");

	push	OFFSET ??_C@_0FF@NHEKHBGP@?$CI?5double?5maxSendBPS?0?5unsigned?5sh@
	push	OFFSET ??_C@_0BG@CPIIDFPC@ApplyNetworkSimulator?$AA@
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 53   : 	RegisterCommand(0,"IsNetworkSimulatorActive","( void );");

	push	OFFSET ??_C@_09DNJKEAGD@?$CI?5void?5?$CJ?$DL?$AA@
	push	OFFSET ??_C@_0BJ@FMJBLPB@IsNetworkSimulatorActive?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RegisterCommand@CommandParserInterface@@MAEXEPBD0@Z ; CommandParserInterface::RegisterCommand

; 54   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0RakNetCommandParser@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CommandParserInterface@@UAE@XZ	; CommandParserInterface::~CommandParserInterface
__ehhandler$??0RakNetCommandParser@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0RakNetCommandParser@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0RakNetCommandParser@@QAE@XZ ENDP			; RakNetCommandParser::RakNetCommandParser
END
