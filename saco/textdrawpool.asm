; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\net\textdrawpool.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??1CTextDraw@@QAE@XZ				; CTextDraw::~CTextDraw
PUBLIC	??_GCTextDraw@@QAEPAXI@Z			; CTextDraw::`scalar deleting destructor'
PUBLIC	??0CTextDrawPool@@QAE@XZ			; CTextDrawPool::CTextDrawPool
PUBLIC	??1CTextDrawPool@@QAE@XZ			; CTextDrawPool::~CTextDrawPool
PUBLIC	?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z ; CTextDrawPool::New
PUBLIC	?Delete@CTextDrawPool@@QAEXG@Z			; CTextDrawPool::Delete
PUBLIC	?Draw@CTextDrawPool@@QAEXXZ			; CTextDrawPool::Draw
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	??0CTextDraw@@QAE@PAU_TEXT_DRAW_TRANSMIT@@PAD@Z:PROC ; CTextDraw::CTextDraw
EXTRN	?Draw@CTextDraw@@QAEXXZ:PROC			; CTextDraw::Draw
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z$0
__ehfuncinfo$?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\textdrawpool.cpp
;	COMDAT ?Draw@CTextDrawPool@@QAEXXZ
_TEXT	SEGMENT
_x$ = -20						; size = 4
_this$ = -8						; size = 4
?Draw@CTextDrawPool@@QAEXXZ PROC			; CTextDrawPool::Draw, COMDAT
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   :     int x=0;

	mov	DWORD PTR _x$[ebp], 0

; 77   : 
; 78   : 	if(GetAsyncKeyState(VK_TAB)) return;

	mov	esi, esp
	push	9
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	je	SHORT $LN3@Draw
	jmp	SHORT $LN5@Draw
$LN3@Draw:

; 79   : 
; 80   : 	while(x != MAX_TEXT_DRAWS) {

	cmp	DWORD PTR _x$[ebp], 1024		; 00000400H
	je	SHORT $LN5@Draw

; 81   : 		if(m_bSlotState[x]) m_pTextDraw[x]->Draw();

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+4096], 0
	je	SHORT $LN1@Draw
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	call	?Draw@CTextDraw@@QAEXXZ			; CTextDraw::Draw
$LN1@Draw:

; 82   : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 83   : 	}

	jmp	SHORT $LN3@Draw
$LN5@Draw:

; 84   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Draw@CTextDrawPool@@QAEXXZ ENDP			; CTextDrawPool::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\textdrawpool.cpp
;	COMDAT ?Delete@CTextDrawPool@@QAEXG@Z
_TEXT	SEGMENT
tv77 = -232						; size = 4
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
_wText$ = 8						; size = 2
?Delete@CTextDrawPool@@QAEXG@Z PROC			; CTextDrawPool::Delete, COMDAT
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 	if(m_pTextDraw[wText]) {

	movzx	eax, WORD PTR _wText$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN2@Delete

; 66   : 		delete m_pTextDraw[wText];

	movzx	eax, WORD PTR _wText$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Delete
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GCTextDraw@@QAEPAXI@Z
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@Delete
$LN4@Delete:
	mov	DWORD PTR tv77[ebp], 0
$LN5@Delete:

; 67   : 		m_pTextDraw[wText] = NULL;

	movzx	eax, WORD PTR _wText$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 68   : 		m_bSlotState[wText] = FALSE;

	movzx	eax, WORD PTR _wText$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+4096], 0
$LN2@Delete:

; 69   : 	}	
; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@CTextDrawPool@@QAEXG@Z ENDP			; CTextDrawPool::Delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\textdrawpool.cpp
;	COMDAT ?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z
_TEXT	SEGMENT
tv80 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_pTextDraw$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_wText$ = 8						; size = 2
_TextDrawTransmit$ = 12					; size = 4
_szText$ = 16						; size = 4
?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z PROC ; CTextDrawPool::New, COMDAT
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 	//pChatWindow->AddDebugMessage("TextDraw(%u,%.64s)",wText,szText);
; 47   : 
; 48   : 	if(m_pTextDraw[wText]) Delete(wText);

	movzx	eax, WORD PTR _wText$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN2@New
	movzx	eax, WORD PTR _wText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@CTextDrawPool@@QAEXG@Z		; CTextDrawPool::Delete
$LN2@New:

; 49   : 
; 50   : 	CTextDraw* pTextDraw = new CTextDraw(TextDrawTransmit, szText);

	push	1348					; 00000544H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@New
	mov	eax, DWORD PTR _szText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _TextDrawTransmit$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CTextDraw@@QAE@PAU_TEXT_DRAW_TRANSMIT@@PAD@Z ; CTextDraw::CTextDraw
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN6@New
$LN5@New:
	mov	DWORD PTR tv80[ebp], 0
$LN6@New:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _pTextDraw$[ebp], eax

; 51   : 
; 52   : 	if(pTextDraw)

	cmp	DWORD PTR _pTextDraw$[ebp], 0
	je	SHORT $LN1@New

; 53   : 	{
; 54   : 		m_pTextDraw[wText] = pTextDraw;

	movzx	eax, WORD PTR _wText$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pTextDraw$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 55   : 		m_bSlotState[wText] = TRUE;

	movzx	eax, WORD PTR _wText$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+4096], 1

; 56   : 		return pTextDraw;

	mov	eax, DWORD PTR _pTextDraw$[ebp]
	jmp	SHORT $LN3@New
$LN1@New:

; 57   : 	}
; 58   : 	return NULL;

	xor	eax, eax
$LN3@New:

; 59   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?New@CTextDrawPool@@QAEPAVCTextDraw@@GPAU_TEXT_DRAW_TRANSMIT@@PAD@Z ENDP ; CTextDrawPool::New
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\textdrawpool.cpp
;	COMDAT ??1CTextDrawPool@@QAE@XZ
_TEXT	SEGMENT
tv76 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_x$ = -20						; size = 4
_this$ = -8						; size = 4
??1CTextDrawPool@@QAE@XZ PROC				; CTextDrawPool::~CTextDrawPool, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN3@CTextDrawP:

; 32   : 	while(x != MAX_TEXT_DRAWS) {

	cmp	DWORD PTR _x$[ebp], 1024		; 00000400H
	je	SHORT $LN4@CTextDrawP

; 33   : 		if(m_pTextDraw[x]) {

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN1@CTextDrawP

; 34   : 			delete m_pTextDraw[x];

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@CTextDrawP
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GCTextDraw@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@CTextDrawP
$LN6@CTextDrawP:
	mov	DWORD PTR tv76[ebp], 0
$LN7@CTextDrawP:

; 35   : 			m_pTextDraw[x] = NULL;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 36   : 			m_bSlotState[x] = FALSE;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+4096], 0
$LN1@CTextDrawP:

; 37   : 		}
; 38   : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 39   : 	}

	jmp	$LN3@CTextDrawP
$LN4@CTextDrawP:

; 40   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTextDrawPool@@QAE@XZ ENDP				; CTextDrawPool::~CTextDrawPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\textdrawpool.cpp
;	COMDAT ??0CTextDrawPool@@QAE@XZ
_TEXT	SEGMENT
_x$ = -20						; size = 4
_this$ = -8						; size = 4
??0CTextDrawPool@@QAE@XZ PROC				; CTextDrawPool::CTextDrawPool, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN2@CTextDrawP:

; 20   : 	while(x!=MAX_TEXT_DRAWS) {

	cmp	DWORD PTR _x$[ebp], 1024		; 00000400H
	je	SHORT $LN3@CTextDrawP

; 21   : 		m_pTextDraw[x] = NULL;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 22   : 		m_bSlotState[x] = FALSE;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+4096], 0

; 23   : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 24   : 	}

	jmp	SHORT $LN2@CTextDrawP
$LN3@CTextDrawP:

; 25   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTextDrawPool@@QAE@XZ ENDP				; CTextDrawPool::CTextDrawPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCTextDraw@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCTextDraw@@QAEPAXI@Z PROC				; CTextDraw::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTextDraw@@QAE@XZ			; CTextDraw::~CTextDraw
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTextDraw@@QAEPAXI@Z ENDP				; CTextDraw::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\textdraw.h
;	COMDAT ??1CTextDraw@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CTextDraw@@QAE@XZ PROC				; CTextDraw::~CTextDraw, COMDAT
; _this$ = ecx

; 91   : 	~CTextDraw(){};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTextDraw@@QAE@XZ ENDP				; CTextDraw::~CTextDraw
_TEXT	ENDS
END
