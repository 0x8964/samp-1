; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\newplayertags.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarBDRVertices1
PUBLIC	?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarBGVertices1
PUBLIC	?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarVertices1
_DATA	SEGMENT
?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A DD 000000000r ; 0 ; HealthBarBDRVertices1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ff000000H
	DD	000000000r			; 0
	DD	041200000r			; 10
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ff000000H
	DD	042480000r			; 50
	DD	041200000r			; 10
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ff000000H
	DD	042480000r			; 50
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ff000000H
?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A DD 03f800000r ; 1 ; HealthBarBGVertices1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ff4b0b14H
	DD	03f800000r			; 1
	DD	041100000r			; 9
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ff4b0b14H
	DD	042440000r			; 49
	DD	041100000r			; 9
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ff4b0b14H
	DD	042440000r			; 49
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ff4b0b14H
?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A DD 03f800000r ; 1 ; HealthBarVertices1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffb92228H
	DD	03f800000r			; 1
	DD	041100000r			; 9
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffb92228H
	DD	042440000r			; 49
	DD	041100000r			; 9
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffb92228H
	DD	042440000r			; 49
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0ffb92228H
_DATA	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	??0CNewPlayerTags@@QAE@PAUIDirect3DDevice9@@@Z	; CNewPlayerTags::CNewPlayerTags
PUBLIC	??1CNewPlayerTags@@QAE@XZ			; CNewPlayerTags::~CNewPlayerTags
PUBLIC	?Begin@CNewPlayerTags@@QAEXXZ			; CNewPlayerTags::Begin
PUBLIC	?End@CNewPlayerTags@@QAEXXZ			; CNewPlayerTags::End
PUBLIC	?Draw@CNewPlayerTags@@QAEXPAUD3DXVECTOR3@@PADKMMM@Z ; CNewPlayerTags::Draw
PUBLIC	?DeleteDeviceObjects@CNewPlayerTags@@QAEXXZ	; CNewPlayerTags::DeleteDeviceObjects
PUBLIC	?RestoreDeviceObjects@CNewPlayerTags@@QAEXXZ	; CNewPlayerTags::RestoreDeviceObjects
PUBLIC	__real@00000000
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@40266666
PUBLIC	__real@41000000
PUBLIC	__real@41900000
PUBLIC	__real@41980000
PUBLIC	__real@41a00000
PUBLIC	__real@41a80000
PUBLIC	__real@41b80000
PUBLIC	__real@41c00000
PUBLIC	__real@42c80000
EXTRN	_D3DXVec3Project@24:PROC
EXTRN	?MeasureText@CFontRender@@QAE?AUtagSIZE@@PAD@Z:PROC ; CFontRender::MeasureText
EXTRN	?RenderText@CFontRender@@QAEXPADUtagRECT@@K@Z:PROC ; CFontRender::RenderText
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?pDefaultFont@@3PAVCFontRender@@A:DWORD		; pDefaultFont
EXTRN	?matView@@3UD3DXMATRIX@@A:BYTE			; matView
EXTRN	?matProj@@3UD3DXMATRIX@@A:BYTE			; matProj
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41c00000
CONST	SEGMENT
__real@41c00000 DD 041c00000r			; 24
CONST	ENDS
;	COMDAT __real@41b80000
CONST	SEGMENT
__real@41b80000 DD 041b80000r			; 23
CONST	ENDS
;	COMDAT __real@41a80000
CONST	SEGMENT
__real@41a80000 DD 041a80000r			; 21
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41980000
CONST	SEGMENT
__real@41980000 DD 041980000r			; 19
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40266666
CONST	SEGMENT
__real@40266666 DD 040266666r			; 2.6
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\newplayertags.cpp
;	COMDAT ?RestoreDeviceObjects@CNewPlayerTags@@QAEXXZ
_TEXT	SEGMENT
_matTemp$1 = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?RestoreDeviceObjects@CNewPlayerTags@@QAEXXZ PROC	; CNewPlayerTags::RestoreDeviceObjects, COMDAT
; _this$ = ecx

; 195  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 196  : 	if (!m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN2@RestoreDev

; 197  : 	{
; 198  : 		D3DXMATRIX matTemp;

	lea	ecx, DWORD PTR _matTemp$1[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 199  : 		D3DXMatrixIdentity(&matTemp);

	lea	eax, DWORD PTR _matTemp$1[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 200  : 
; 201  : 		m_pDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 202  : 		m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 203  : 		m_pDevice->SetRenderState(D3DRS_FOGENABLE, FALSE);

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 204  : 		m_pDevice->SetRenderState(D3DRS_ZENABLE, 1);

	mov	esi, esp
	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 205  : 		m_pDevice->SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 206  : 		m_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 207  : 		m_pDevice->SetRenderState(D3DRS_CLIPPING, 1);

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 208  : 		m_pDevice->SetRenderState(D3DRS_VERTEXBLEND, FALSE);

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 209  : 		m_pDevice->SetRenderState(D3DRS_CLIPPLANEENABLE, 1);

	mov	esi, esp
	push	1
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 210  : 		m_pDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 211  : 		m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 212  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 213  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 214  : 		m_pDevice->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 215  : 		m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, 0xFFFFFFFF);

	mov	esi, esp
	push	-1
	push	60					; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 216  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 217  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 218  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TFACTOR);

	mov	esi, esp
	push	3
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 219  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 220  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TFACTOR);

	mov	esi, esp
	push	3
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 221  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : 		m_pDevice->SetTransform(D3DTS_WORLD, &matTemp);

	mov	esi, esp
	lea	eax, DWORD PTR _matTemp$1[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+176]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 223  : 		m_pDevice->SetStreamSource(0, NULL, 0, 0);

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+400]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 224  : 		m_pDevice->SetTexture(0, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+260]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 225  : 		m_pDevice->SetFVF(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 226  : 		m_pDevice->EndStateBlock(&m_pOldStates);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+244]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@RestoreDev:

; 227  : 	}
; 228  : 
; 229  : 	if (!m_pNewStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	$LN3@RestoreDev

; 230  : 	{
; 231  : 		m_pDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 232  : 
; 233  : 		// This is the original one
; 234  : 
; 235  : 		/*
; 236  : 		m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
; 237  : 		m_pDevice->SetRenderState(D3DRS_FOGENABLE, FALSE);
; 238  : 		m_pDevice->SetRenderState(D3DRS_ZENABLE, 1);
; 239  : 		m_pDevice->SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);
; 240  : 		m_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
; 241  : 		m_pDevice->SetRenderState(D3DRS_CLIPPING, 1);
; 242  : 		m_pDevice->SetRenderState(D3DRS_VERTEXBLEND, FALSE);
; 243  : 		m_pDevice->SetRenderState(D3DRS_CLIPPLANEENABLE, 1);
; 244  : 		m_pDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);
; 245  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
; 246  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);
; 247  : 		m_pDevice->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);
; 248  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
; 249  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
; 250  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TFACTOR);
; 251  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);
; 252  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TFACTOR);
; 253  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
; 254  : 		*/
; 255  : 
; 256  : 		// End of original one
; 257  : 
; 258  : 		// This was taken and modified from public domain code for healthbar fix
; 259  : 		// Not sure what the root cause of the problem is, but this fixes it.
; 260  : 
; 261  : 		m_pDevice->SetVertexShader(NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+368]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 262  : 		m_pDevice->SetPixelShader(NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+428]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 263  : 
; 264  : 		m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 265  : 		m_pDevice->SetRenderState(D3DRS_FOGENABLE, FALSE);

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 266  : 		m_pDevice->SetRenderState(D3DRS_ZENABLE, 0);

	mov	esi, esp
	push	0
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 267  : 		m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE,           TRUE);

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 268  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND,                   D3DBLEND_SRCALPHA);

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 269  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND,                  D3DBLEND_INVSRCALPHA);

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 270  : 		m_pDevice->SetRenderState(D3DRS_FILLMODE,                   D3DFILL_SOLID);

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 271  : 		m_pDevice->SetRenderState(D3DRS_CULLMODE,                   D3DCULL_NONE);

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 272  : 		m_pDevice->SetRenderState(D3DRS_STENCILENABLE,              FALSE);

	mov	esi, esp
	push	0
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 273  : 		m_pDevice->SetRenderState(D3DRS_CLIPPING,                   TRUE);

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 274  : 		m_pDevice->SetRenderState(D3DRS_CLIPPLANEENABLE,            FALSE);

	mov	esi, esp
	push	0
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 275  : 		m_pDevice->SetRenderState(D3DRS_VERTEXBLEND,                D3DVBF_DISABLE);

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 276  : 		m_pDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE,   FALSE);

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 277  : 		//m_pDevice->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS,       FALSE);
; 278  : 		//m_pDevice->SetRenderState(D3DRS_COLORWRITEENABLE,           D3DCOLORWRITEENABLE_RED|D3DCOLORWRITEENABLE_GREEN|D3DCOLORWRITEENABLE_BLUE|D3DCOLORWRITEENABLE_ALPHA);
; 279  : 
; 280  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP,                D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 281  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1,              D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 282  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2,              D3DTA_DIFFUSE);

	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 283  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP,                D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 284  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1,              D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 285  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2,              D3DTA_DIFFUSE);

	mov	esi, esp
	push	0
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 286  : 		m_pDevice->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX,          0);

	mov	esi, esp
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 287  : 		m_pDevice->SetTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS,  D3DTTFF_DISABLE);

	mov	esi, esp
	push	0
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 288  : 		m_pDevice->SetTextureStageState(1, D3DTSS_COLOROP,                D3DTOP_DISABLE);

	mov	esi, esp
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 289  : 		m_pDevice->SetTextureStageState(1, D3DTSS_ALPHAOP,                D3DTOP_DISABLE);

	mov	esi, esp
	push	1
	push	4
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 290  : 
; 291  : 		//m_pDevice->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_POINT);
; 292  : 		//m_pDevice->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_POINT);
; 293  : 		//m_pDevice->SetSamplerState(0, D3DSAMP_MIPFILTER, D3DTEXF_NONE);
; 294  : 
; 295  : 		// End modified public domain code
; 296  : 
; 297  : 		m_pDevice->EndStateBlock(&m_pNewStates);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+244]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@RestoreDev:

; 298  : 	}
; 299  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@RestoreDev
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@RestoreDev:
	DD	1
	DD	$LN6@RestoreDev
$LN6@RestoreDev:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN5@RestoreDev
$LN5@RestoreDev:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?RestoreDeviceObjects@CNewPlayerTags@@QAEXXZ ENDP	; CNewPlayerTags::RestoreDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\newplayertags.cpp
;	COMDAT ?DeleteDeviceObjects@CNewPlayerTags@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DeleteDeviceObjects@CNewPlayerTags@@QAEXXZ PROC	; CNewPlayerTags::DeleteDeviceObjects, COMDAT
; _this$ = ecx

; 189  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 190  : 	SAFE_RELEASE(m_pOldStates);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@DeleteDevi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@DeleteDevi:

; 191  : 	SAFE_RELEASE(m_pNewStates);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@DeleteDevi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@DeleteDevi:

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteDeviceObjects@CNewPlayerTags@@QAEXXZ ENDP	; CNewPlayerTags::DeleteDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\newplayertags.cpp
;	COMDAT ?Draw@CNewPlayerTags@@QAEXPAUD3DXVECTOR3@@PADKMMM@Z
_TEXT	SEGMENT
tv356 = -420						; size = 4
tv344 = -420						; size = 4
tv332 = -420						; size = 4
tv320 = -420						; size = 4
tv308 = -420						; size = 4
tv296 = -420						; size = 4
tv284 = -420						; size = 4
tv272 = -420						; size = 4
_i$1 = -220						; size = 4
_i$2 = -208						; size = 4
_size$ = -196						; size = 8
_rect$ = -180						; size = 16
_matIdent$ = -156					; size = 64
_Out$ = -84						; size = 12
_Viewport$ = -64					; size = 24
_TagPos$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pPlayerPos$ = 8					; size = 4
_pNameText$ = 12					; size = 4
_dwColor$ = 16						; size = 4
_fHealth$ = 20						; size = 4
_fArmor$ = 24						; size = 4
_fDistanceFromLocalPlayer$ = 28				; size = 4
?Draw@CNewPlayerTags@@QAEXPAUD3DXVECTOR3@@PADKMMM@Z PROC ; CNewPlayerTags::Draw, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 420				; 000001a4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 105				; 00000069H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 	D3DXVECTOR3 TagPos = *pPlayerPos;

	mov	eax, DWORD PTR _pPlayerPos$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _TagPos$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _TagPos$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _TagPos$[ebp+8], eax

; 79   : 	TagPos.z += 1.0f + (fDistanceFromLocalPlayer * 0.05f);

	movss	xmm0, DWORD PTR _fDistanceFromLocalPlayer$[ebp]
	mulss	xmm0, DWORD PTR __real@3d4ccccd
	addss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR _TagPos$[ebp+8]
	movss	DWORD PTR _TagPos$[ebp+8], xmm0

; 80   : 	
; 81   : 	D3DVIEWPORT9 Viewport;
; 82   : 	m_pDevice->GetViewport(&Viewport);

	mov	esi, esp
	lea	eax, DWORD PTR _Viewport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+192]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 83   : 
; 84   : 	D3DXVECTOR3 Out;

	lea	ecx, DWORD PTR _Out$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 85   : 	D3DXMATRIX matIdent;

	lea	ecx, DWORD PTR _matIdent$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 86   : 	D3DXMatrixIdentity(&matIdent);

	lea	eax, DWORD PTR _matIdent$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 87   : 	D3DXVec3Project(&Out, &TagPos, &Viewport, &matProj, &matView, &matIdent);

	lea	eax, DWORD PTR _matIdent$[ebp]
	push	eax
	push	OFFSET ?matView@@3UD3DXMATRIX@@A	; matView
	push	OFFSET ?matProj@@3UD3DXMATRIX@@A	; matProj
	lea	ecx, DWORD PTR _Viewport$[ebp]
	push	ecx
	lea	edx, DWORD PTR _TagPos$[ebp]
	push	edx
	lea	eax, DWORD PTR _Out$[ebp]
	push	eax
	call	_D3DXVec3Project@24

; 88   : 
; 89   : 	if (Out.z > 1.0f)

	movss	xmm0, DWORD PTR _Out$[ebp+8]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN11@Draw

; 90   : 		return;

	jmp	$LN12@Draw
$LN11@Draw:

; 91   : 
; 92   : 	RECT rect = {(int)Out.x, (int)Out.y, (int)Out.x+1, (int)Out.y+1};

	cvttss2si eax, DWORD PTR _Out$[ebp]
	mov	DWORD PTR _rect$[ebp], eax
	cvttss2si eax, DWORD PTR _Out$[ebp+4]
	mov	DWORD PTR _rect$[ebp+4], eax
	cvttss2si eax, DWORD PTR _Out$[ebp]
	add	eax, 1
	mov	DWORD PTR _rect$[ebp+8], eax
	cvttss2si eax, DWORD PTR _Out$[ebp+4]
	add	eax, 1
	mov	DWORD PTR _rect$[ebp+12], eax

; 93   : 	SIZE size = pDefaultFont->MeasureText(pNameText);

	mov	eax, DWORD PTR _pNameText$[ebp]
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pDefaultFont@@3PAVCFontRender@@A ; pDefaultFont
	call	?MeasureText@CFontRender@@QAE?AUtagSIZE@@PAD@Z ; CFontRender::MeasureText

; 94   : 	rect.left -= size.cx/2;

	mov	eax, DWORD PTR _size$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _rect$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _rect$[ebp], ecx

; 95   : 
; 96   : 	pDefaultFont->RenderText(pNameText,rect,dwColor);

	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _pNameText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pDefaultFont@@3PAVCFontRender@@A ; pDefaultFont
	call	?RenderText@CFontRender@@QAEXPADUtagRECT@@K@Z ; CFontRender::RenderText

; 97   : 
; 98   : 	Out.x = (float)((int)Out.x);

	cvttss2si eax, DWORD PTR _Out$[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _Out$[ebp], xmm0

; 99   : 	Out.y = (float)((int)Out.y);

	cvttss2si eax, DWORD PTR _Out$[ebp+4]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _Out$[ebp+4], xmm0

; 100  : 
; 101  : 	HealthBarBDRVertices1[0].x = Out.x - 20.0f; // Top left

	movss	xmm0, DWORD PTR _Out$[ebp]
	subss	xmm0, DWORD PTR __real@41a00000
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[ecx], xmm0

; 102  : 	HealthBarBDRVertices1[0].y = Out.y + 18.0f;

	movss	xmm0, DWORD PTR _Out$[ebp+4]
	addss	xmm0, DWORD PTR __real@41900000
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 103  : 	HealthBarBDRVertices1[1].x = Out.x - 20.0f; // Bottom left

	movss	xmm0, DWORD PTR _Out$[ebp]
	subss	xmm0, DWORD PTR __real@41a00000
	mov	eax, 20					; 00000014H
	shl	eax, 0
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[eax], xmm0

; 104  : 	HealthBarBDRVertices1[1].y = Out.y + 24.0f;

	movss	xmm0, DWORD PTR _Out$[ebp+4]
	addss	xmm0, DWORD PTR __real@41c00000
	mov	eax, 20					; 00000014H
	shl	eax, 0
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[eax+4], xmm0

; 105  : 	HealthBarBDRVertices1[2].x = Out.x + 21.0f; // Bottom right

	movss	xmm0, DWORD PTR _Out$[ebp]
	addss	xmm0, DWORD PTR __real@41a80000
	mov	eax, 20					; 00000014H
	shl	eax, 1
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[eax], xmm0

; 106  : 	HealthBarBDRVertices1[2].y = Out.y + 24.0f;

	movss	xmm0, DWORD PTR _Out$[ebp+4]
	addss	xmm0, DWORD PTR __real@41c00000
	mov	eax, 20					; 00000014H
	shl	eax, 1
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[eax+4], xmm0

; 107  : 	HealthBarBDRVertices1[3].x = Out.x + 21.0f; // Top Right

	movss	xmm0, DWORD PTR _Out$[ebp]
	addss	xmm0, DWORD PTR __real@41a80000
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[ecx], xmm0

; 108  : 	HealthBarBDRVertices1[3].y = Out.y + 18.0f;

	movss	xmm0, DWORD PTR _Out$[ebp+4]
	addss	xmm0, DWORD PTR __real@41900000
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 109  : 
; 110  : 	HealthBarBGVertices1[0].x = HealthBarVertices1[0].x = Out.x - 19.0f; // Top left

	movss	xmm0, DWORD PTR _Out$[ebp]
	subss	xmm0, DWORD PTR __real@41980000
	movss	DWORD PTR tv272[ebp], xmm0
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR tv272[ebp]
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx], xmm0
	mov	edx, 20					; 00000014H
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR tv272[ebp]
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[eax], xmm0

; 111  : 	HealthBarBGVertices1[0].y = HealthBarVertices1[0].y = Out.y + 19.0f;

	movss	xmm0, DWORD PTR _Out$[ebp+4]
	addss	xmm0, DWORD PTR __real@41980000
	movss	DWORD PTR tv284[ebp], xmm0
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR tv284[ebp]
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0
	mov	edx, 20					; 00000014H
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR tv284[ebp]
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[eax+4], xmm0

; 112  : 	HealthBarBGVertices1[1].x = HealthBarVertices1[1].x = Out.x - 19.0f; // Bottom left

	movss	xmm0, DWORD PTR _Out$[ebp]
	subss	xmm0, DWORD PTR __real@41980000
	movss	DWORD PTR tv296[ebp], xmm0
	mov	eax, 20					; 00000014H
	shl	eax, 0
	movss	xmm0, DWORD PTR tv296[ebp]
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax], xmm0
	mov	ecx, 20					; 00000014H
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv296[ebp]
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[ecx], xmm0

; 113  : 	HealthBarBGVertices1[1].y = HealthBarVertices1[1].y = Out.y + 23.0f;

	movss	xmm0, DWORD PTR _Out$[ebp+4]
	addss	xmm0, DWORD PTR __real@41b80000
	movss	DWORD PTR tv308[ebp], xmm0
	mov	eax, 20					; 00000014H
	shl	eax, 0
	movss	xmm0, DWORD PTR tv308[ebp]
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax+4], xmm0
	mov	ecx, 20					; 00000014H
	shl	ecx, 0
	movss	xmm0, DWORD PTR tv308[ebp]
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 114  : 	HealthBarBGVertices1[2].x = HealthBarVertices1[2].x = Out.x + 19.0f; // Bottom right

	movss	xmm0, DWORD PTR _Out$[ebp]
	addss	xmm0, DWORD PTR __real@41980000
	movss	DWORD PTR tv320[ebp], xmm0
	mov	eax, 20					; 00000014H
	shl	eax, 1
	movss	xmm0, DWORD PTR tv320[ebp]
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax], xmm0
	mov	ecx, 20					; 00000014H
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv320[ebp]
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[ecx], xmm0

; 115  : 	HealthBarBGVertices1[2].y = HealthBarVertices1[2].y = Out.y + 23.0f;

	movss	xmm0, DWORD PTR _Out$[ebp+4]
	addss	xmm0, DWORD PTR __real@41b80000
	movss	DWORD PTR tv332[ebp], xmm0
	mov	eax, 20					; 00000014H
	shl	eax, 1
	movss	xmm0, DWORD PTR tv332[ebp]
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax+4], xmm0
	mov	ecx, 20					; 00000014H
	shl	ecx, 1
	movss	xmm0, DWORD PTR tv332[ebp]
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 116  : 	HealthBarBGVertices1[3].x = HealthBarVertices1[3].x = Out.x + 19.0f; // Top Right

	movss	xmm0, DWORD PTR _Out$[ebp]
	addss	xmm0, DWORD PTR __real@41980000
	movss	DWORD PTR tv344[ebp], xmm0
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	movss	xmm0, DWORD PTR tv344[ebp]
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx], xmm0
	mov	edx, 20					; 00000014H
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR tv344[ebp]
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[eax], xmm0

; 117  : 	HealthBarBGVertices1[3].y = HealthBarVertices1[3].y = Out.y + 19.0f;

	movss	xmm0, DWORD PTR _Out$[ebp+4]
	addss	xmm0, DWORD PTR __real@41980000
	movss	DWORD PTR tv356[ebp], xmm0
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	movss	xmm0, DWORD PTR tv356[ebp]
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0
	mov	edx, 20					; 00000014H
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR tv356[ebp]
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[eax+4], xmm0

; 118  : 	
; 119  : 	if (fHealth > 100.0f)

	movss	xmm0, DWORD PTR _fHealth$[ebp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN10@Draw

; 120  : 		fHealth = 100.0f;

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _fHealth$[ebp], xmm0
$LN10@Draw:

; 121  : 	fHealth /= 2.6f;

	movss	xmm0, DWORD PTR _fHealth$[ebp]
	divss	xmm0, DWORD PTR __real@40266666
	movss	DWORD PTR _fHealth$[ebp], xmm0

; 122  : 	fHealth -= 19.0f;

	movss	xmm0, DWORD PTR _fHealth$[ebp]
	subss	xmm0, DWORD PTR __real@41980000
	movss	DWORD PTR _fHealth$[ebp], xmm0

; 123  : 
; 124  : 	HealthBarVertices1[2].x = Out.x + fHealth; // Bottom right

	movss	xmm0, DWORD PTR _Out$[ebp]
	addss	xmm0, DWORD PTR _fHealth$[ebp]
	mov	eax, 20					; 00000014H
	shl	eax, 1
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax], xmm0

; 125  : 	HealthBarVertices1[3].x = Out.x + fHealth; // Top Right

	movss	xmm0, DWORD PTR _Out$[ebp]
	addss	xmm0, DWORD PTR _fHealth$[ebp]
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx], xmm0

; 126  : 
; 127  : 	m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

	mov	esi, esp
	push	0
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 128  : 	m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, 0xFFFFFFFF);

	mov	esi, esp
	push	-1
	push	60					; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 129  : 	m_pDevice->SetTexture(0, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+260]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 130  : 	m_pDevice->SetFVF(HealthBar1FVF);

	mov	esi, esp
	push	68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 131  : 
; 132  : 	if (fArmor > 0.0f)

	movss	xmm0, DWORD PTR _fArmor$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN6@Draw

; 133  : 	{
; 134  : 		for (int i=0; i<4; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN8@Draw
$LN7@Draw:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN8@Draw:
	cmp	DWORD PTR _i$2[ebp], 4
	jge	SHORT $LN6@Draw

; 135  : 		{
; 136  : 			HealthBarBDRVertices1[i].y += 8.0f;

	imul	eax, DWORD PTR _i$2[ebp], 20
	movss	xmm0, DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[eax+4]
	addss	xmm0, DWORD PTR __real@41000000
	imul	ecx, DWORD PTR _i$2[ebp], 20
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 137  : 			HealthBarBGVertices1[i].y += 8.0f;

	imul	eax, DWORD PTR _i$2[ebp], 20
	movss	xmm0, DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[eax+4]
	addss	xmm0, DWORD PTR __real@41000000
	imul	ecx, DWORD PTR _i$2[ebp], 20
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 138  : 			HealthBarVertices1[i].y += 8.0f;

	imul	eax, DWORD PTR _i$2[ebp], 20
	movss	xmm0, DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax+4]
	addss	xmm0, DWORD PTR __real@41000000
	imul	ecx, DWORD PTR _i$2[ebp], 20
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 139  : 		}

	jmp	$LN7@Draw
$LN6@Draw:

; 140  : 	}
; 141  : 
; 142  : 	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarBDRVertices1, sizeof(HealthBarVertices1_s));

	mov	esi, esp
	push	20					; 00000014H
	push	OFFSET ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarBDRVertices1
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarBGVertices1,  sizeof(HealthBarVertices1_s));

	mov	esi, esp
	push	20					; 00000014H
	push	OFFSET ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarBGVertices1
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 144  : 	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarVertices1,    sizeof(HealthBarVertices1_s));

	mov	esi, esp
	push	20					; 00000014H
	push	OFFSET ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarVertices1
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 145  : 
; 146  : 
; 147  : 	// ARMOUR BAR
; 148  : 	if (fArmor > 0.0f)

	movss	xmm0, DWORD PTR _fArmor$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN5@Draw

; 149  : 	{
; 150  : 		for (int i=0; i<4; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Draw
$LN3@Draw:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Draw:
	cmp	DWORD PTR _i$1[ebp], 4
	jge	SHORT $LN2@Draw

; 151  : 		{
; 152  : 			HealthBarBDRVertices1[i].y -= 8.0f;

	imul	eax, DWORD PTR _i$1[ebp], 20
	movss	xmm0, DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[eax+4]
	subss	xmm0, DWORD PTR __real@41000000
	imul	ecx, DWORD PTR _i$1[ebp], 20
	movss	DWORD PTR ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 153  : 			HealthBarBGVertices1[i].y -= 8.0f;

	imul	eax, DWORD PTR _i$1[ebp], 20
	movss	xmm0, DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[eax+4]
	subss	xmm0, DWORD PTR __real@41000000
	imul	ecx, DWORD PTR _i$1[ebp], 20
	movss	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 154  : 			HealthBarVertices1[i].y -= 8.0f;

	imul	eax, DWORD PTR _i$1[ebp], 20
	movss	xmm0, DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax+4]
	subss	xmm0, DWORD PTR __real@41000000
	imul	ecx, DWORD PTR _i$1[ebp], 20
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx+4], xmm0

; 155  : 		}

	jmp	$LN3@Draw
$LN2@Draw:

; 156  : 
; 157  : 		HealthBarVertices1[0].c = HealthBarVertices1[1].c =
; 158  : 		HealthBarVertices1[2].c = HealthBarVertices1[3].c = D3DCOLOR_XRGB(200, 200, 200);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	mov	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx+16], -3618616 ; ffc8c8c8H
	mov	edx, 20					; 00000014H
	shl	edx, 1
	mov	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[edx+16], -3618616 ; ffc8c8c8H
	mov	eax, 20					; 00000014H
	shl	eax, 0
	mov	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax+16], -3618616 ; ffc8c8c8H
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	mov	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[edx+16], -3618616 ; ffc8c8c8H

; 159  : 
; 160  : 		HealthBarBGVertices1[0].c = HealthBarBGVertices1[1].c =
; 161  : 		HealthBarBGVertices1[2].c = HealthBarBGVertices1[3].c = D3DCOLOR_XRGB(40, 40, 40);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	mov	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[ecx+16], -14145496 ; ff282828H
	mov	edx, 20					; 00000014H
	shl	edx, 1
	mov	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[edx+16], -14145496 ; ff282828H
	mov	eax, 20					; 00000014H
	shl	eax, 0
	mov	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[eax+16], -14145496 ; ff282828H
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	mov	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[edx+16], -14145496 ; ff282828H

; 162  : 
; 163  : 		if (fArmor > 100.0f)

	movss	xmm0, DWORD PTR _fArmor$[ebp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN1@Draw

; 164  : 			fArmor = 100.0f;

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _fArmor$[ebp], xmm0
$LN1@Draw:

; 165  : 		fArmor /= 2.6f;

	movss	xmm0, DWORD PTR _fArmor$[ebp]
	divss	xmm0, DWORD PTR __real@40266666
	movss	DWORD PTR _fArmor$[ebp], xmm0

; 166  : 		fArmor -= 19.0f;

	movss	xmm0, DWORD PTR _fArmor$[ebp]
	subss	xmm0, DWORD PTR __real@41980000
	movss	DWORD PTR _fArmor$[ebp], xmm0

; 167  : 
; 168  : 		HealthBarVertices1[2].x = Out.x + fArmor; // Bottom right

	movss	xmm0, DWORD PTR _Out$[ebp]
	addss	xmm0, DWORD PTR _fArmor$[ebp]
	mov	eax, 20					; 00000014H
	shl	eax, 1
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax], xmm0

; 169  : 		HealthBarVertices1[3].x = Out.x + fArmor; // Top Right

	movss	xmm0, DWORD PTR _Out$[ebp]
	addss	xmm0, DWORD PTR _fArmor$[ebp]
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	movss	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx], xmm0

; 170  : 
; 171  : 		m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

	mov	esi, esp
	push	0
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 172  : 		m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, 0xFFFFFFFF);

	mov	esi, esp
	push	-1
	push	60					; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 173  : 		m_pDevice->SetTexture(0, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+260]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 174  : 		m_pDevice->SetFVF(HealthBar1FVF);

	mov	esi, esp
	push	68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 175  : 
; 176  : 		m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarBDRVertices1, sizeof(HealthBarVertices1_s));

	mov	esi, esp
	push	20					; 00000014H
	push	OFFSET ?HealthBarBDRVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarBDRVertices1
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 177  : 		m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarBGVertices1,  sizeof(HealthBarVertices1_s));

	mov	esi, esp
	push	20					; 00000014H
	push	OFFSET ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarBGVertices1
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 178  : 		m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarVertices1,    sizeof(HealthBarVertices1_s));

	mov	esi, esp
	push	20					; 00000014H
	push	OFFSET ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A ; HealthBarVertices1
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 179  : 
; 180  : 		HealthBarVertices1[0].c = HealthBarVertices1[1].c =
; 181  : 		HealthBarVertices1[2].c = HealthBarVertices1[3].c = D3DCOLOR_XRGB(185, 34, 40);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	mov	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[ecx+16], -4644312 ; ffb92228H
	mov	edx, 20					; 00000014H
	shl	edx, 1
	mov	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[edx+16], -4644312 ; ffb92228H
	mov	eax, 20					; 00000014H
	shl	eax, 0
	mov	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[eax+16], -4644312 ; ffb92228H
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	mov	DWORD PTR ?HealthBarVertices1@@3PAUHealthBarVertices1_s@@A[edx+16], -4644312 ; ffb92228H

; 182  : 
; 183  : 		HealthBarBGVertices1[0].c = HealthBarBGVertices1[1].c =
; 184  : 		HealthBarBGVertices1[2].c = HealthBarBGVertices1[3].c = D3DCOLOR_XRGB(75, 11, 20);

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	mov	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[ecx+16], -11859180 ; ff4b0b14H
	mov	edx, 20					; 00000014H
	shl	edx, 1
	mov	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[edx+16], -11859180 ; ff4b0b14H
	mov	eax, 20					; 00000014H
	shl	eax, 0
	mov	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[eax+16], -11859180 ; ff4b0b14H
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	mov	DWORD PTR ?HealthBarBGVertices1@@3PAUHealthBarVertices1_s@@A[edx+16], -11859180 ; ff4b0b14H
$LN5@Draw:
$LN12@Draw:

; 185  : 	}
; 186  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN21@Draw:
	DD	6
	DD	$LN20@Draw
$LN20@Draw:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN14@Draw
	DD	-64					; ffffffc0H
	DD	24					; 00000018H
	DD	$LN15@Draw
	DD	-84					; ffffffacH
	DD	12					; 0000000cH
	DD	$LN16@Draw
	DD	-156					; ffffff64H
	DD	64					; 00000040H
	DD	$LN17@Draw
	DD	-180					; ffffff4cH
	DD	16					; 00000010H
	DD	$LN18@Draw
	DD	-196					; ffffff3cH
	DD	8
	DD	$LN19@Draw
$LN19@Draw:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN18@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN17@Draw:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN16@Draw:
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN15@Draw:
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN14@Draw:
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?Draw@CNewPlayerTags@@QAEXPAUD3DXVECTOR3@@PADKMMM@Z ENDP ; CNewPlayerTags::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\newplayertags.cpp
;	COMDAT ?End@CNewPlayerTags@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?End@CNewPlayerTags@@QAEXXZ PROC			; CNewPlayerTags::End, COMDAT
; _this$ = ecx

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 	if (!m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@End

; 68   : 	{
; 69   : 		RestoreDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreDeviceObjects@CNewPlayerTags@@QAEXXZ ; CNewPlayerTags::RestoreDeviceObjects

; 70   : 		if (!m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@End

; 71   : 			return;

	jmp	SHORT $LN3@End
$LN2@End:

; 72   : 	}
; 73   : 	m_pOldStates->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@End:

; 74   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?End@CNewPlayerTags@@QAEXXZ ENDP			; CNewPlayerTags::End
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\newplayertags.cpp
;	COMDAT ?Begin@CNewPlayerTags@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Begin@CNewPlayerTags@@QAEXXZ PROC			; CNewPlayerTags::Begin, COMDAT
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	if ((!m_pOldStates) || (!m_pNewStates))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Begin
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Begin
$LN3@Begin:

; 56   : 	{
; 57   : 		RestoreDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreDeviceObjects@CNewPlayerTags@@QAEXXZ ; CNewPlayerTags::RestoreDeviceObjects

; 58   : 		if ((!m_pOldStates) || (!m_pNewStates))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Begin
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@Begin
$LN1@Begin:

; 59   : 			return;

	jmp	SHORT $LN5@Begin
$LN4@Begin:

; 60   : 	}
; 61   : 	m_pOldStates->Capture();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   : 	m_pNewStates->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@Begin:

; 63   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Begin@CNewPlayerTags@@QAEXXZ ENDP			; CNewPlayerTags::Begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\newplayertags.cpp
;	COMDAT ??1CNewPlayerTags@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CNewPlayerTags@@QAE@XZ PROC				; CNewPlayerTags::~CNewPlayerTags, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	if (m_pOldStates) m_pOldStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@CNewPlayer
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CNewPlayer:

; 50   : 	if (m_pNewStates) m_pNewStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@CNewPlayer
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@CNewPlayer:

; 51   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CNewPlayerTags@@QAE@XZ ENDP				; CNewPlayerTags::~CNewPlayerTags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\newplayertags.cpp
;	COMDAT ??0CNewPlayerTags@@QAE@PAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
??0CNewPlayerTags@@QAE@PAUIDirect3DDevice9@@@Z PROC	; CNewPlayerTags::CNewPlayerTags, COMDAT
; _this$ = ecx

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	m_pDevice			= pDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [eax], ecx

; 42   : 	m_pOldStates		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 43   : 	m_pNewStates		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 44   : 	m_DrawPlayerIDs		= FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 45   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CNewPlayerTags@@QAE@PAUIDirect3DDevice9@@@Z ENDP	; CNewPlayerTags::CNewPlayerTags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1981 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1982 : #ifdef D3DX_DEBUG
; 1983 :     if(!pOut)
; 1984 :         return NULL;
; 1985 : #endif
; 1986 : 
; 1987 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1988 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1989 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1990 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 1991 : 
; 1992 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1993 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1994 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
END
