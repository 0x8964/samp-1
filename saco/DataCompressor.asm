; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\DataCompressor.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?GetNumberOfBitsUsed@BitStream@RakNet@@QBEHXZ	; RakNet::BitStream::GetNumberOfBitsUsed
PUBLIC	?GetWriteOffset@BitStream@RakNet@@QBEHXZ	; RakNet::BitStream::GetWriteOffset
PUBLIC	??$Write@I@BitStream@RakNet@@QAEXI@Z		; RakNet::BitStream::Write<unsigned int>
PUBLIC	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z		; RakNet::BitStream::Read<unsigned int>
PUBLIC	?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z ; DataCompressor::Compress
PUBLIC	?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z ; DataCompressor::DecompressAndAllocate
PUBLIC	??$WriteCompressed@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::WriteCompressed<unsigned int>
PUBLIC	??$ReadCompressed@I@BitStream@RakNet@@QAE_NAAI@Z ; RakNet::BitStream::ReadCompressed<unsigned int>
PUBLIC	?__LINE__Var@?1??Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z@4JA@3b3ebbe7 ; `DataCompressor::Compress'::`2'::__LINE__Var
PUBLIC	??_C@_1FG@NPJFBPAM@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAa?$AAt?$AAa?$AAc?$AAo?$AAm?$AAp@ ; `string'
PUBLIC	??_C@_1CG@MPAKJGI@?$AAs?$AAi?$AAz?$AAe?$AAI?$AAn?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DO?$AA?5?$AA2?$AA0?$AA4?$AA8?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z@4JA@3b3ebbe7 ; `DataCompressor::DecompressAndAllocate'::`2'::__LINE__Var
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_1FE@KFPEALKF@?$AAd?$AAe?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?$DN?$AA?$DN?$AAd?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AAS?$AAi@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__wassert:PROC
EXTRN	?SetWriteOffset@BitStream@RakNet@@QAEXH@Z:PROC	; RakNet::BitStream::SetWriteOffset
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z:PROC	; RakNet::BitStream::WriteBits
EXTRN	?AlignWriteToByteBoundary@BitStream@RakNet@@QAEXXZ:PROC ; RakNet::BitStream::AlignWriteToByteBoundary
EXTRN	?AlignReadToByteBoundary@BitStream@RakNet@@QAEXXZ:PROC ; RakNet::BitStream::AlignReadToByteBoundary
EXTRN	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z:PROC	; RakNet::BitStream::ReadBits
EXTRN	?WriteCompressed@BitStream@RakNet@@AAEXPBEH_N@Z:PROC ; RakNet::BitStream::WriteCompressed
EXTRN	?ReadCompressed@BitStream@RakNet@@AAE_NPAEH_N@Z:PROC ; RakNet::BitStream::ReadCompressed
EXTRN	??0HuffmanEncodingTree@@QAE@XZ:PROC		; HuffmanEncodingTree::HuffmanEncodingTree
EXTRN	??1HuffmanEncodingTree@@QAE@XZ:PROC		; HuffmanEncodingTree::~HuffmanEncodingTree
EXTRN	?EncodeArray@HuffmanEncodingTree@@QAEXPAEIPAVBitStream@RakNet@@@Z:PROC ; HuffmanEncodingTree::EncodeArray
EXTRN	?DecodeArray@HuffmanEncodingTree@@QAEIPAVBitStream@RakNet@@IIPAE@Z:PROC ; HuffmanEncodingTree::DecodeArray
EXTRN	?GenerateFromFrequencyTable@HuffmanEncodingTree@@QAEXQAI@Z:PROC ; HuffmanEncodingTree::GenerateFromFrequencyTable
EXTRN	_memset:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1FE@KFPEALKF@?$AAd?$AAe?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?$DN?$AA?$DN?$AAd?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AAS?$AAi@
CONST	SEGMENT
??_C@_1FE@KFPEALKF@?$AAd?$AAe?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?$DN?$AA?$DN?$AAd?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AAS?$AAi@ DB 'd'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 's', 00H, 'e', 00H, 'd', 00H, 'B', 00H, 'y'
	DB	00H, 't', 00H, 'e', 00H, 's', 00H, '=', 00H, '=', 00H, 'd', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 'S', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'I', 00H, 'n', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e'
	DB	00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z@4JA@3b3ebbe7
_DATA	SEGMENT
?__LINE__Var@?1??DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z@4JA@3b3ebbe7 DD 023H ; `DataCompressor::DecompressAndAllocate'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CG@MPAKJGI@?$AAs?$AAi?$AAz?$AAe?$AAI?$AAn?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DO?$AA?5?$AA2?$AA0?$AA4?$AA8?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@MPAKJGI@?$AAs?$AAi?$AAz?$AAe?$AAI?$AAn?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DO?$AA?5?$AA2?$AA0?$AA4?$AA8?$AA?$AA@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'B', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '2', 00H, '0', 00H, '4', 00H, '8', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@NPJFBPAM@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAa?$AAt?$AAa?$AAc?$AAo?$AAm?$AAp@
CONST	SEGMENT
??_C@_1FG@NPJFBPAM@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAa?$AAt?$AAa?$AAc?$AAo?$AAm?$AAp@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'd', 00H, 'a', 00H, 't'
	DB	00H, 'a', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 's', 00H, 'o', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z@4JA@3b3ebbe7
_DATA	SEGMENT
?__LINE__Var@?1??Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z@4JA@3b3ebbe7 DD 07H ; `DataCompressor::Compress'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z$0
__ehfuncinfo$?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z$0
__ehfuncinfo$?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$ReadCompressed@I@BitStream@RakNet@@QAE_NAAI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$ReadCompressed@I@BitStream@RakNet@@QAE_NAAI@Z PROC	; RakNet::BitStream::ReadCompressed<unsigned int>, COMDAT
; _this$ = ecx

; 1080 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1081 : #ifdef _MSC_VER
; 1082 : #pragma warning(disable:4127)   // conditional expression is constant
; 1083 : #endif
; 1084 : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@ReadCompre

; 1085 : 			return ReadCompressed( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadCompressed@BitStream@RakNet@@AAE_NPAEH_N@Z ; RakNet::BitStream::ReadCompressed
	jmp	SHORT $LN3@ReadCompre

; 1086 : 		else

	jmp	SHORT $LN3@ReadCompre
$LN2@ReadCompre:

; 1087 : 		{
; 1088 : #ifndef __BITSTREAM_NATIVE_END
; 1089 : 			if (DoEndianSwap())
; 1090 : 			{
; 1091 : 				unsigned char output[sizeof(templateType)];
; 1092 : 				if (ReadCompressed( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1093 : 				{
; 1094 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1095 : 					return true;
; 1096 : 				}
; 1097 : 				return false;
; 1098 : 			}
; 1099 : 			else
; 1100 : #endif
; 1101 : 				return ReadCompressed( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadCompressed@BitStream@RakNet@@AAE_NPAEH_N@Z ; RakNet::BitStream::ReadCompressed
$LN3@ReadCompre:

; 1102 : 		}
; 1103 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$ReadCompressed@I@BitStream@RakNet@@QAE_NAAI@Z ENDP	; RakNet::BitStream::ReadCompressed<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$WriteCompressed@I@BitStream@RakNet@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$WriteCompressed@I@BitStream@RakNet@@QAEXI@Z PROC	; RakNet::BitStream::WriteCompressed<unsigned int>, COMDAT
; _this$ = ecx

; 865  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 866  : #ifdef _MSC_VER
; 867  : #pragma warning(disable:4127)   // conditional expression is constant
; 868  : #endif
; 869  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@WriteCompr

; 870  : 			WriteCompressed( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteCompressed@BitStream@RakNet@@AAEXPBEH_N@Z ; RakNet::BitStream::WriteCompressed

; 871  : 		else

	jmp	SHORT $LN3@WriteCompr
$LN2@WriteCompr:

; 872  : 		{
; 873  : #ifndef __BITSTREAM_NATIVE_END
; 874  : #ifdef _MSC_VER
; 875  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 876  : #endif
; 877  : 
; 878  : 			if (DoEndianSwap())
; 879  : 			{
; 880  : 				unsigned char output[sizeof(templateType)];
; 881  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 882  : 				WriteCompressed( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 883  : 			}
; 884  : 			else
; 885  : #endif
; 886  : 				WriteCompressed( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteCompressed@BitStream@RakNet@@AAEXPBEH_N@Z ; RakNet::BitStream::WriteCompressed
$LN3@WriteCompr:

; 887  : 		}
; 888  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$WriteCompressed@I@BitStream@RakNet@@QAEXI@Z ENDP	; RakNet::BitStream::WriteCompressed<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\datacompressor.cpp
;	COMDAT ?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z
_TEXT	SEGMENT
$T2 = -2868						; size = 4
$T3 = -2856						; size = 4
$T4 = -2844						; size = 4
_i$ = -2640						; size = 4
_frequencyTable$ = -2628				; size = 1024
_decompressedBytes$ = -1596				; size = 4
_destinationSizeInBytes$ = -1584			; size = 4
_bitsUsed$ = -1572					; size = 4
_tree$ = -1560						; size = 1540
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_input$ = 8						; size = 4
_output$ = 12						; size = 4
?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z PROC ; DataCompressor::DecompressAndAllocate, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2860				; 00000b2cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2872]
	mov	ecx, 715				; 000002cbH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 36   : 	HuffmanEncodingTree tree;

	lea	ecx, DWORD PTR _tree$[ebp]
	call	??0HuffmanEncodingTree@@QAE@XZ		; HuffmanEncodingTree::HuffmanEncodingTree
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 37   : 	unsigned int bitsUsed, destinationSizeInBytes, decompressedBytes;
; 38   : 	unsigned int frequencyTable[ 256 ];
; 39   : 	unsigned i;
; 40   : 	
; 41   : 	input->ReadCompressed(destinationSizeInBytes);

	lea	eax, DWORD PTR _destinationSizeInBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	call	??$ReadCompressed@I@BitStream@RakNet@@QAE_NAAI@Z ; RakNet::BitStream::ReadCompressed<unsigned int>

; 42   : 	for (i=0; i < 256; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Decompress
$LN3@Decompress:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Decompress:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN2@Decompress

; 43   : 		input->ReadCompressed(frequencyTable[i]);

	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _frequencyTable$[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _input$[ebp]
	call	??$ReadCompressed@I@BitStream@RakNet@@QAE_NAAI@Z ; RakNet::BitStream::ReadCompressed<unsigned int>
	jmp	SHORT $LN3@Decompress
$LN2@Decompress:

; 44   : 	input->AlignReadToByteBoundary();

	mov	ecx, DWORD PTR _input$[ebp]
	call	?AlignReadToByteBoundary@BitStream@RakNet@@QAEXXZ ; RakNet::BitStream::AlignReadToByteBoundary

; 45   : 	if (input->Read(bitsUsed)==false)

	lea	eax, DWORD PTR _bitsUsed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	call	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z	; RakNet::BitStream::Read<unsigned int>
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@Decompress

; 46   : 	{
; 47   : 		// Read error
; 48   : #ifdef _DEBUG
; 49   : 		assert(0);

	xor	eax, eax
	jne	SHORT $LN7@Decompress
	mov	ecx, DWORD PTR ?__LINE__Var@?1??DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z@4JA@3b3ebbe7
	add	ecx, 14					; 0000000eH
	push	ecx
	push	OFFSET ??_C@_1FG@NPJFBPAM@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAa?$AAt?$AAa?$AAc?$AAo?$AAm?$AAp@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@Decompress:

; 50   : #endif
; 51   : 		return 0;

	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tree$[ebp]
	call	??1HuffmanEncodingTree@@QAE@XZ		; HuffmanEncodingTree::~HuffmanEncodingTree
	mov	eax, DWORD PTR $T2[ebp]
	jmp	$LN5@Decompress
$LN1@Decompress:

; 52   : 	}
; 53   : 	*output = new unsigned char [destinationSizeInBytes];

	mov	eax, DWORD PTR _destinationSizeInBytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR _output$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx

; 54   : 	tree.GenerateFromFrequencyTable(frequencyTable);

	lea	eax, DWORD PTR _frequencyTable$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tree$[ebp]
	call	?GenerateFromFrequencyTable@HuffmanEncodingTree@@QAEXQAI@Z ; HuffmanEncodingTree::GenerateFromFrequencyTable

; 55   : 	decompressedBytes=tree.DecodeArray(input, bitsUsed, destinationSizeInBytes, *output );

	mov	eax, DWORD PTR _output$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _destinationSizeInBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _bitsUsed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _tree$[ebp]
	call	?DecodeArray@HuffmanEncodingTree@@QAEIPAVBitStream@RakNet@@IIPAE@Z ; HuffmanEncodingTree::DecodeArray
	mov	DWORD PTR _decompressedBytes$[ebp], eax

; 56   : 	assert(decompressedBytes==destinationSizeInBytes);

	mov	eax, DWORD PTR _decompressedBytes$[ebp]
	cmp	eax, DWORD PTR _destinationSizeInBytes$[ebp]
	je	SHORT $LN8@Decompress
	mov	ecx, DWORD PTR ?__LINE__Var@?1??DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z@4JA@3b3ebbe7
	add	ecx, 21					; 00000015H
	push	ecx
	push	OFFSET ??_C@_1FG@NPJFBPAM@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAa?$AAt?$AAa?$AAc?$AAo?$AAm?$AAp@
	push	OFFSET ??_C@_1FE@KFPEALKF@?$AAd?$AAe?$AAc?$AAo?$AAm?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?$DN?$AA?$DN?$AAd?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AAS?$AAi@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@Decompress:

; 57   : 	return destinationSizeInBytes;

	mov	eax, DWORD PTR _destinationSizeInBytes$[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tree$[ebp]
	call	??1HuffmanEncodingTree@@QAE@XZ		; HuffmanEncodingTree::~HuffmanEncodingTree
	mov	eax, DWORD PTR $T4[ebp]
$LN5@Decompress:

; 58   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Decompress
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2872				; 00000b38H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@Decompress:
	DD	4
	DD	$LN15@Decompress
$LN15@Decompress:
	DD	-1560					; fffff9e8H
	DD	1540					; 00000604H
	DD	$LN10@Decompress
	DD	-1572					; fffff9dcH
	DD	4
	DD	$LN11@Decompress
	DD	-1584					; fffff9d0H
	DD	4
	DD	$LN12@Decompress
	DD	-2628					; fffff5bcH
	DD	1024					; 00000400H
	DD	$LN13@Decompress
$LN13@Decompress:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	121					; 00000079H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$LN12@Decompress:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN11@Decompress:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	85					; 00000055H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN10@Decompress:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z$0:
	lea	ecx, DWORD PTR _tree$[ebp]
	jmp	??1HuffmanEncodingTree@@QAE@XZ		; HuffmanEncodingTree::~HuffmanEncodingTree
__ehhandler$?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2876]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DecompressAndAllocate@DataCompressor@@SAIPAVBitStream@RakNet@@PAPAE@Z ENDP ; DataCompressor::DecompressAndAllocate
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\datacompressor.cpp
;	COMDAT ?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z
_TEXT	SEGMENT
_bitsUsed2$ = -2652					; size = 4
_bitsUsed1$ = -2640					; size = 4
_writeOffset2$ = -2628					; size = 4
_writeOffset1$ = -2616					; size = 4
_tree$ = -2604						; size = 1540
_i$ = -1056						; size = 4
_frequencyTable$ = -1044				; size = 1024
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_userData$ = 8						; size = 4
_sizeInBytes$ = 12					; size = 4
_output$ = 16						; size = 4
?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z PROC ; DataCompressor::Compress, COMDAT

; 7    : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2836				; 00000b14H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2848]
	mov	ecx, 709				; 000002c5H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 8    : 	// Don't use this for small files as you will just make them bigger!
; 9    : 	assert(sizeInBytes > 2048);

	cmp	DWORD PTR _sizeInBytes$[ebp], 2048	; 00000800H
	ja	SHORT $LN9@Compress
	mov	eax, DWORD PTR ?__LINE__Var@?1??Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z@4JA@3b3ebbe7
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1FG@NPJFBPAM@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAa?$AAt?$AAa?$AAc?$AAo?$AAm?$AAp@
	push	OFFSET ??_C@_1CG@MPAKJGI@?$AAs?$AAi?$AAz?$AAe?$AAI?$AAn?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DO?$AA?5?$AA2?$AA0?$AA4?$AA8?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@Compress:

; 10   : 
; 11   : 	unsigned int frequencyTable[ 256 ];
; 12   : 	unsigned int i;
; 13   : 	memset(frequencyTable,0,256*sizeof(unsigned int));

	push	1024					; 00000400H
	push	0
	lea	eax, DWORD PTR _frequencyTable$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 14   : 	for (i=0; i < sizeInBytes; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@Compress
$LN5@Compress:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@Compress:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _sizeInBytes$[ebp]
	jae	SHORT $LN4@Compress

; 15   : 		++frequencyTable[userData[i]];

	mov	eax, DWORD PTR _userData$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _frequencyTable$[ebp+ecx*4]
	add	edx, 1
	mov	eax, DWORD PTR _userData$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR _frequencyTable$[ebp+ecx*4], edx
	jmp	SHORT $LN5@Compress
$LN4@Compress:

; 16   : 	HuffmanEncodingTree tree;

	lea	ecx, DWORD PTR _tree$[ebp]
	call	??0HuffmanEncodingTree@@QAE@XZ		; HuffmanEncodingTree::HuffmanEncodingTree
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 17   : 	unsigned int writeOffset1, writeOffset2, bitsUsed1, bitsUsed2;
; 18   : 	tree.GenerateFromFrequencyTable(frequencyTable);

	lea	eax, DWORD PTR _frequencyTable$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tree$[ebp]
	call	?GenerateFromFrequencyTable@HuffmanEncodingTree@@QAEXQAI@Z ; HuffmanEncodingTree::GenerateFromFrequencyTable

; 19   : 	output->WriteCompressed(sizeInBytes);

	mov	eax, DWORD PTR _sizeInBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	call	??$WriteCompressed@I@BitStream@RakNet@@QAEXI@Z ; RakNet::BitStream::WriteCompressed<unsigned int>

; 20   : 	for (i=0; i < 256; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Compress
$LN2@Compress:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Compress:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN1@Compress

; 21   : 		output->WriteCompressed(frequencyTable[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _frequencyTable$[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _output$[ebp]
	call	??$WriteCompressed@I@BitStream@RakNet@@QAEXI@Z ; RakNet::BitStream::WriteCompressed<unsigned int>
	jmp	SHORT $LN2@Compress
$LN1@Compress:

; 22   : 	output->AlignWriteToByteBoundary();

	mov	ecx, DWORD PTR _output$[ebp]
	call	?AlignWriteToByteBoundary@BitStream@RakNet@@QAEXXZ ; RakNet::BitStream::AlignWriteToByteBoundary

; 23   : 	writeOffset1=output->GetWriteOffset();

	mov	ecx, DWORD PTR _output$[ebp]
	call	?GetWriteOffset@BitStream@RakNet@@QBEHXZ ; RakNet::BitStream::GetWriteOffset
	mov	DWORD PTR _writeOffset1$[ebp], eax

; 24   : 	output->Write((unsigned int)0);	// Dummy value

	push	0
	mov	ecx, DWORD PTR _output$[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>

; 25   : 	bitsUsed1=output->GetNumberOfBitsUsed();

	mov	ecx, DWORD PTR _output$[ebp]
	call	?GetNumberOfBitsUsed@BitStream@RakNet@@QBEHXZ ; RakNet::BitStream::GetNumberOfBitsUsed
	mov	DWORD PTR _bitsUsed1$[ebp], eax

; 26   : 	tree.EncodeArray(userData, sizeInBytes, output);

	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sizeInBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _userData$[ebp]
	push	edx
	lea	ecx, DWORD PTR _tree$[ebp]
	call	?EncodeArray@HuffmanEncodingTree@@QAEXPAEIPAVBitStream@RakNet@@@Z ; HuffmanEncodingTree::EncodeArray

; 27   : 	bitsUsed2=output->GetNumberOfBitsUsed();

	mov	ecx, DWORD PTR _output$[ebp]
	call	?GetNumberOfBitsUsed@BitStream@RakNet@@QBEHXZ ; RakNet::BitStream::GetNumberOfBitsUsed
	mov	DWORD PTR _bitsUsed2$[ebp], eax

; 28   : 	writeOffset2=output->GetWriteOffset();

	mov	ecx, DWORD PTR _output$[ebp]
	call	?GetWriteOffset@BitStream@RakNet@@QBEHXZ ; RakNet::BitStream::GetWriteOffset
	mov	DWORD PTR _writeOffset2$[ebp], eax

; 29   : 	output->SetWriteOffset(writeOffset1);

	mov	eax, DWORD PTR _writeOffset1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	call	?SetWriteOffset@BitStream@RakNet@@QAEXH@Z ; RakNet::BitStream::SetWriteOffset

; 30   : 	output->Write(bitsUsed2-bitsUsed1); // Go back and write how many bits were used for the encoding

	mov	eax, DWORD PTR _bitsUsed2$[ebp]
	sub	eax, DWORD PTR _bitsUsed1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>

; 31   : 	output->SetWriteOffset(writeOffset2);

	mov	eax, DWORD PTR _writeOffset2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	call	?SetWriteOffset@BitStream@RakNet@@QAEXH@Z ; RakNet::BitStream::SetWriteOffset

; 32   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _tree$[ebp]
	call	??1HuffmanEncodingTree@@QAE@XZ		; HuffmanEncodingTree::~HuffmanEncodingTree
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Compress
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2848				; 00000b20H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@Compress:
	DD	2
	DD	$LN14@Compress
$LN14@Compress:
	DD	-1044					; fffffbecH
	DD	1024					; 00000400H
	DD	$LN11@Compress
	DD	-2604					; fffff5d4H
	DD	1540					; 00000604H
	DD	$LN12@Compress
$LN12@Compress:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	0
$LN11@Compress:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	121					; 00000079H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z$0:
	lea	ecx, DWORD PTR _tree$[ebp]
	jmp	??1HuffmanEncodingTree@@QAE@XZ		; HuffmanEncodingTree::~HuffmanEncodingTree
__ehhandler$?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2852]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Compress@DataCompressor@@SAXPAEIPAVBitStream@RakNet@@@Z ENDP ; DataCompressor::Compress
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@I@BitStream@RakNet@@QAE_NAAI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@I@BitStream@RakNet@@QAE_NAAI@Z PROC		; RakNet::BitStream::Read<unsigned int>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@I@BitStream@RakNet@@QAE_NAAI@Z ENDP		; RakNet::BitStream::Read<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@I@BitStream@RakNet@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@I@BitStream@RakNet@@QAEXI@Z PROC		; RakNet::BitStream::Write<unsigned int>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@I@BitStream@RakNet@@QAEXI@Z ENDP		; RakNet::BitStream::Write<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ?GetWriteOffset@BitStream@RakNet@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetWriteOffset@BitStream@RakNet@@QBEHXZ PROC		; RakNet::BitStream::GetWriteOffset, COMDAT
; _this$ = ecx

; 370  : 		inline int GetWriteOffset( void ) const {return numberOfBitsUsed;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWriteOffset@BitStream@RakNet@@QBEHXZ ENDP		; RakNet::BitStream::GetWriteOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ?GetNumberOfBitsUsed@BitStream@RakNet@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetNumberOfBitsUsed@BitStream@RakNet@@QBEHXZ PROC	; RakNet::BitStream::GetNumberOfBitsUsed, COMDAT
; _this$ = ecx

; 369  : 		inline int GetNumberOfBitsUsed( void ) const {return GetWriteOffset();}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWriteOffset@BitStream@RakNet@@QBEHXZ ; RakNet::BitStream::GetWriteOffset
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumberOfBitsUsed@BitStream@RakNet@@QBEHXZ ENDP	; RakNet::BitStream::GetNumberOfBitsUsed
_TEXT	ENDS
END
