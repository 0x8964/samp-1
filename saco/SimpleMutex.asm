; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\SimpleMutex.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0SimpleMutex@@QAE@XZ				; SimpleMutex::SimpleMutex
PUBLIC	??1SimpleMutex@@QAE@XZ				; SimpleMutex::~SimpleMutex
PUBLIC	?Lock@SimpleMutex@@QAEXXZ			; SimpleMutex::Lock
PUBLIC	?Unlock@SimpleMutex@@QAEXXZ			; SimpleMutex::Unlock
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\simplemutex.cpp
;	COMDAT ?Unlock@SimpleMutex@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Unlock@SimpleMutex@@QAEXXZ PROC			; SimpleMutex::Unlock, COMDAT
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : #ifdef _WIN32
; 91   : 	//	ReleaseMutex(hMutex);
; 92   : 	LeaveCriticalSection(&criticalSection);

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : #else
; 94   : 	int error = pthread_mutex_unlock(&hMutex);
; 95   : 	assert(error==0);
; 96   : #endif
; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Unlock@SimpleMutex@@QAEXXZ ENDP			; SimpleMutex::Unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\simplemutex.cpp
;	COMDAT ?Lock@SimpleMutex@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Lock@SimpleMutex@@QAEXXZ PROC				; SimpleMutex::Lock, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : #ifdef _WIN32
; 51   : 	/*
; 52   : 	DWORD d = WaitForSingleObject(hMutex, INFINITE);
; 53   : 	#ifdef _DEBUG
; 54   : 	if (d==WAIT_FAILED)
; 55   : 	{
; 56   : 	LPVOID messageBuffer;
; 57   : 	FormatMessage( 
; 58   : 	FORMAT_MESSAGE_ALLOCATE_BUFFER | 
; 59   : 	FORMAT_MESSAGE_FROM_SYSTEM | 
; 60   : 	FORMAT_MESSAGE_IGNORE_INSERTS,
; 61   : 	NULL,
; 62   : 	GetLastError(),
; 63   : 	MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
; 64   : 	(LPTSTR) &messageBuffer,
; 65   : 	0,
; 66   : 	NULL 
; 67   : 	);
; 68   : 	// Process any inserts in messageBuffer.
; 69   : 	// ...
; 70   : 	// Display the string.
; 71   : 	//MessageBox( NULL, (LPCTSTR)messageBuffer, "Error", MB_OK | MB_ICONINFORMATION );
; 72   : 	printf("SimpleMutex error: %s", messageBuffer);
; 73   : 	// Free the buffer.
; 74   : 	LocalFree( messageBuffer );
; 75   : 
; 76   : 	}
; 77   : 
; 78   : 	assert(d==WAIT_OBJECT_0);
; 79   : 	*/
; 80   : 	EnterCriticalSection(&criticalSection);

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 81   : 
; 82   : #else
; 83   : 	int error = pthread_mutex_lock(&hMutex);
; 84   : 	assert(error==0);
; 85   : #endif
; 86   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Lock@SimpleMutex@@QAEXXZ ENDP				; SimpleMutex::Lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\simplemutex.cpp
;	COMDAT ??1SimpleMutex@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1SimpleMutex@@QAE@XZ PROC				; SimpleMutex::~SimpleMutex, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 34   : #ifdef _WIN32
; 35   : 	//	CloseHandle(hMutex);
; 36   : 	DeleteCriticalSection(&criticalSection);

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 37   : #else
; 38   : 	pthread_mutex_destroy(&hMutex);
; 39   : #endif
; 40   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SimpleMutex@@QAE@XZ ENDP				; SimpleMutex::~SimpleMutex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\simplemutex.cpp
;	COMDAT ??0SimpleMutex@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SimpleMutex@@QAE@XZ PROC				; SimpleMutex::SimpleMutex, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 22   : #ifdef _WIN32
; 23   : 	//	hMutex = CreateMutex(NULL, FALSE, 0);
; 24   : 	//	assert(hMutex);
; 25   : 	InitializeCriticalSection(&criticalSection);

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 26   : #else
; 27   : 	int error = pthread_mutex_init(&hMutex, 0);
; 28   : 	assert(error==0);
; 29   : #endif
; 30   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0SimpleMutex@@QAE@XZ ENDP				; SimpleMutex::SimpleMutex
_TEXT	ENDS
END
