; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\archive\Hasher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?ms_dwHashAlgorithm@CHasher@@0KA		; CHasher::ms_dwHashAlgorithm
_DATA	SEGMENT
?ms_dwHashAlgorithm@CHasher@@0KA DD 08004H		; CHasher::ms_dwHashAlgorithm
_DATA	ENDS
PUBLIC	??0CHasher@@QAE@PAVCCryptoContext@@@Z		; CHasher::CHasher
PUBLIC	??1CHasher@@QAE@XZ				; CHasher::~CHasher
PUBLIC	?AddData@CHasher@@QAEXKPAE@Z			; CHasher::AddData
PUBLIC	?GetContainer@CHasher@@QAEKXZ			; CHasher::GetContainer
EXTRN	?GetProvider@CCryptoContext@@QAEKXZ:PROC	; CCryptoContext::GetProvider
EXTRN	?xCryptCallCreateHash@@YGHKIKKPAK@Z:PROC	; xCryptCallCreateHash
EXTRN	?xCryptCallDestroyHash@@YGHK@Z:PROC		; xCryptCallDestroyHash
EXTRN	?xCryptCallHashData@@YGHKPAEKK@Z:PROC		; xCryptCallHashData
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\hasher.cpp
;	COMDAT ?GetContainer@CHasher@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetContainer@CHasher@@QAEKXZ PROC			; CHasher::GetContainer, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	return m_hCryptHash;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetContainer@CHasher@@QAEKXZ ENDP			; CHasher::GetContainer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\hasher.cpp
;	COMDAT ?AddData@CHasher@@QAEXKPAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwDataLength$ = 8					; size = 4
_pbData$ = 12						; size = 4
?AddData@CHasher@@QAEXKPAE@Z PROC			; CHasher::AddData, COMDAT
; _this$ = ecx

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 	// Add the data to be hashed
; 42   : 	CRYPT(HashData)(m_hCryptHash, pbData, dwDataLength, 0);

	push	0
	mov	eax, DWORD PTR _dwDataLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?xCryptCallHashData@@YGHKPAEKK@Z	; xCryptCallHashData

; 43   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddData@CHasher@@QAEXKPAE@Z ENDP			; CHasher::AddData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\hasher.cpp
;	COMDAT ??1CHasher@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CHasher@@QAE@XZ PROC					; CHasher::~CHasher, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 	// Destory the hash container
; 33   : 	CRYPT(DestroyHash)(m_hCryptHash);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?xCryptCallDestroyHash@@YGHK@Z		; xCryptCallDestroyHash

; 34   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CHasher@@QAE@XZ ENDP					; CHasher::~CHasher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\hasher.cpp
;	COMDAT ??0CHasher@@QAE@PAVCCryptoContext@@@Z
_TEXT	SEGMENT
_hCryptProv$ = -20					; size = 4
_this$ = -8						; size = 4
_pContext$ = 8						; size = 4
??0CHasher@@QAE@PAVCCryptoContext@@@Z PROC		; CHasher::CHasher, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 	// Save context for later
; 20   : 	m_pContext = pContext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pContext$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 21   : 
; 22   : 	// Generate a hash container
; 23   : 	HCRYPTPROV hCryptProv = pContext->GetProvider();

	mov	ecx, DWORD PTR _pContext$[ebp]
	call	?GetProvider@CCryptoContext@@QAEKXZ	; CCryptoContext::GetProvider
	mov	DWORD PTR _hCryptProv$[ebp], eax

; 24   : 	CRYPT(CreateHash)(hCryptProv, ms_dwHashAlgorithm, NULL, NULL, &m_hCryptHash);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR ?ms_dwHashAlgorithm@CHasher@@0KA ; CHasher::ms_dwHashAlgorithm
	push	ecx
	mov	edx, DWORD PTR _hCryptProv$[ebp]
	push	edx
	call	?xCryptCallCreateHash@@YGHKIKKPAK@Z	; xCryptCallCreateHash

; 25   : 
; 26   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CHasher@@QAE@PAVCCryptoContext@@@Z ENDP		; CHasher::CHasher
_TEXT	ENDS
END
