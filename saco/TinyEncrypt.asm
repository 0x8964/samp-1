; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\archive\TinyEncrypt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?ms_dwRounds@CTinyEncrypt@@0KA			; CTinyEncrypt::ms_dwRounds
PUBLIC	?ms_dwInitDelta@CTinyEncrypt@@0KA		; CTinyEncrypt::ms_dwInitDelta
PUBLIC	?ms_dwInitSum@CTinyEncrypt@@0KA			; CTinyEncrypt::ms_dwInitSum
PUBLIC	?ms_bInitDone@CTinyEncrypt@@0HA			; CTinyEncrypt::ms_bInitDone
_BSS	SEGMENT
?ms_dwInitSum@CTinyEncrypt@@0KA DD 01H DUP (?)		; CTinyEncrypt::ms_dwInitSum
?ms_bInitDone@CTinyEncrypt@@0HA DD 01H DUP (?)		; CTinyEncrypt::ms_bInitDone
_BSS	ENDS
_DATA	SEGMENT
?ms_dwRounds@CTinyEncrypt@@0KA DD 020H			; CTinyEncrypt::ms_dwRounds
?ms_dwInitDelta@CTinyEncrypt@@0KA DD 0ccf225cH		; CTinyEncrypt::ms_dwInitDelta
_DATA	ENDS
PUBLIC	?DecryptBlock@CTinyEncrypt@@AAEXAAK0@Z		; CTinyEncrypt::DecryptBlock
PUBLIC	??0CTinyEncrypt@@QAE@XZ				; CTinyEncrypt::CTinyEncrypt
PUBLIC	??1CTinyEncrypt@@QAE@XZ				; CTinyEncrypt::~CTinyEncrypt
PUBLIC	?SetKey@CTinyEncrypt@@QAEXPAEE@Z		; CTinyEncrypt::SetKey
PUBLIC	?DecryptData@CTinyEncrypt@@QAEXKPAE@Z		; CTinyEncrypt::DecryptData
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\tinyencrypt.cpp
;	COMDAT ?DecryptData@CTinyEncrypt@@QAEXKPAE@Z
_TEXT	SEGMENT
_i$1 = -44						; size = 4
_pdwData$ = -32						; size = 4
_dwBlocks$ = -20					; size = 4
_this$ = -8						; size = 4
_dwLength$ = 8						; size = 4
_pbData$ = 12						; size = 4
?DecryptData@CTinyEncrypt@@QAEXKPAE@Z PROC		; CTinyEncrypt::DecryptData, COMDAT
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 	DWORD dwBlocks = dwLength / 4;

	mov	eax, DWORD PTR _dwLength$[ebp]
	shr	eax, 2
	mov	DWORD PTR _dwBlocks$[ebp], eax

; 118  : 	DWORD *pdwData = reinterpret_cast<DWORD*>(pbData);

	mov	eax, DWORD PTR _pbData$[ebp]
	mov	DWORD PTR _pdwData$[ebp], eax

; 119  : 	for(DWORD i=0; i<dwBlocks; i+=2) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@DecryptDat
$LN2@DecryptDat:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 2
	mov	DWORD PTR _i$1[ebp], eax
$LN3@DecryptDat:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _dwBlocks$[ebp]
	jae	SHORT $LN4@DecryptDat

; 120  : 		DecryptBlock(pdwData[i+0], pdwData[i+1]);

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _pdwData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _pdwData$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecryptBlock@CTinyEncrypt@@AAEXAAK0@Z	; CTinyEncrypt::DecryptBlock

; 121  : 	}

	jmp	SHORT $LN2@DecryptDat
$LN4@DecryptDat:

; 122  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?DecryptData@CTinyEncrypt@@QAEXKPAE@Z ENDP		; CTinyEncrypt::DecryptData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\tinyencrypt.cpp
;	COMDAT ?SetKey@CTinyEncrypt@@QAEXPAEE@Z
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_pbKeyRef$2 = -20					; size = 4
_this$ = -8						; size = 4
_pbKey$ = 8						; size = 4
_bytXORKey$ = 12					; size = 1
?SetKey@CTinyEncrypt@@QAEXPAEE@Z PROC			; CTinyEncrypt::SetKey, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	memcpy(m_pdwKey, pbKey, TEA_KEY_SIZE);

	push	16					; 00000010H
	mov	eax, DWORD PTR _pbKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 46   : 
; 47   : 	if (bytXORKey != 0) 

	movzx	eax, BYTE PTR _bytXORKey$[ebp]
	test	eax, eax
	je	SHORT $LN5@SetKey

; 48   : 	{
; 49   : 		BYTE *pbKeyRef = reinterpret_cast<BYTE*>(m_pdwKey);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pbKeyRef$2[ebp], eax

; 50   : 		for(DWORD i=0; i<TEA_KEY_SIZE; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@SetKey
$LN2@SetKey:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@SetKey:
	cmp	DWORD PTR _i$1[ebp], 16			; 00000010H
	jae	SHORT $LN5@SetKey

; 51   : 			pbKeyRef[i] ^= bytXORKey;

	movzx	eax, BYTE PTR _bytXORKey$[ebp]
	mov	ecx, DWORD PTR _pbKeyRef$2[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, eax
	mov	eax, DWORD PTR _pbKeyRef$2[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN2@SetKey
$LN5@SetKey:

; 52   : 	}
; 53   : 	
; 54   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetKey@CTinyEncrypt@@QAEXPAEE@Z ENDP			; CTinyEncrypt::SetKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\tinyencrypt.cpp
;	COMDAT ??1CTinyEncrypt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CTinyEncrypt@@QAE@XZ PROC				; CTinyEncrypt::~CTinyEncrypt, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTinyEncrypt@@QAE@XZ ENDP				; CTinyEncrypt::~CTinyEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\tinyencrypt.cpp
;	COMDAT ??0CTinyEncrypt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CTinyEncrypt@@QAE@XZ PROC				; CTinyEncrypt::CTinyEncrypt, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	if (!ms_bInitDone) {

	cmp	DWORD PTR ?ms_bInitDone@CTinyEncrypt@@0HA, 0 ; CTinyEncrypt::ms_bInitDone
	jne	SHORT $LN2@CTinyEncry

; 29   : 		ms_dwInitDelta = UNOBFUSCATE_DATA(ms_dwInitDelta);

	mov	eax, DWORD PTR ?ms_dwInitDelta@CTinyEncrypt@@0KA ; CTinyEncrypt::ms_dwInitDelta
	xor	eax, -1056713753			; c103d3e7H
	shr	eax, 19					; 00000013H
	mov	ecx, DWORD PTR ?ms_dwInitDelta@CTinyEncrypt@@0KA ; CTinyEncrypt::ms_dwInitDelta
	xor	ecx, -1056713753			; c103d3e7H
	shl	ecx, 13					; 0000000dH
	or	eax, ecx
	mov	DWORD PTR ?ms_dwInitDelta@CTinyEncrypt@@0KA, eax ; CTinyEncrypt::ms_dwInitDelta

; 30   : 		ms_dwInitSum = ms_dwInitDelta * ms_dwRounds;

	mov	eax, DWORD PTR ?ms_dwInitDelta@CTinyEncrypt@@0KA ; CTinyEncrypt::ms_dwInitDelta
	imul	eax, DWORD PTR ?ms_dwRounds@CTinyEncrypt@@0KA ; CTinyEncrypt::ms_dwRounds
	mov	DWORD PTR ?ms_dwInitSum@CTinyEncrypt@@0KA, eax ; CTinyEncrypt::ms_dwInitSum

; 31   : 		ms_bInitDone = TRUE;

	mov	DWORD PTR ?ms_bInitDone@CTinyEncrypt@@0HA, 1 ; CTinyEncrypt::ms_bInitDone
$LN2@CTinyEncry:

; 32   : 	}
; 33   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTinyEncrypt@@QAE@XZ ENDP				; CTinyEncrypt::CTinyEncrypt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\archive\tinyencrypt.cpp
;	COMDAT ?DecryptBlock@CTinyEncrypt@@AAEXAAK0@Z
_TEXT	SEGMENT
_i$1 = -56						; size = 4
_dwV1old$ = -44						; size = 4
_dwV0old$ = -32						; size = 4
_dwSum$ = -20						; size = 4
_this$ = -8						; size = 4
_dwV0$ = 8						; size = 4
_dwV1$ = 12						; size = 4
?DecryptBlock@CTinyEncrypt@@AAEXAAK0@Z PROC		; CTinyEncrypt::DecryptBlock, COMDAT
; _this$ = ecx

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 	DWORD dwSum = ms_dwInitSum;

	mov	eax, DWORD PTR ?ms_dwInitSum@CTinyEncrypt@@0KA ; CTinyEncrypt::ms_dwInitSum
	mov	DWORD PTR _dwSum$[ebp], eax

; 83   : 
; 84   : 	DWORD dwV0old = dwV0;

	mov	eax, DWORD PTR _dwV0$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dwV0old$[ebp], ecx

; 85   : 	DWORD dwV1old = dwV1;

	mov	eax, DWORD PTR _dwV1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dwV1old$[ebp], ecx

; 86   : 
; 87   :     for(DWORD i=0; i<ms_dwRounds; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@DecryptBlo
$LN2@DecryptBlo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@DecryptBlo:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR ?ms_dwRounds@CTinyEncrypt@@0KA ; CTinyEncrypt::ms_dwRounds
	jae	SHORT $LN1@DecryptBlo

; 88   :         dwV1 -= ((dwV0 << 4 ^ dwV0 >> 5) + dwV0) ^ (dwSum + m_pdwKey[dwSum>>11 & 3]);

	mov	eax, DWORD PTR _dwV0$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _dwV0$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 5
	xor	ecx, eax
	mov	edx, DWORD PTR _dwV0$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _dwSum$[ebp]
	shr	eax, 11					; 0000000bH
	and	eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _dwSum$[ebp]
	add	esi, DWORD PTR [edx+eax*4]
	xor	ecx, esi
	mov	eax, DWORD PTR _dwV1$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, ecx
	mov	eax, DWORD PTR _dwV1$[ebp]
	mov	DWORD PTR [eax], edx

; 89   :         dwSum -= ms_dwInitDelta;

	mov	eax, DWORD PTR _dwSum$[ebp]
	sub	eax, DWORD PTR ?ms_dwInitDelta@CTinyEncrypt@@0KA ; CTinyEncrypt::ms_dwInitDelta
	mov	DWORD PTR _dwSum$[ebp], eax

; 90   :         dwV0 -= ((dwV1 << 4 ^ dwV1 >> 5) + dwV1) ^ (dwSum + m_pdwKey[dwSum & 3]);

	mov	eax, DWORD PTR _dwV1$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	mov	edx, DWORD PTR _dwV1$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 5
	xor	ecx, eax
	mov	edx, DWORD PTR _dwV1$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _dwSum$[ebp]
	and	eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _dwSum$[ebp]
	add	esi, DWORD PTR [edx+eax*4]
	xor	ecx, esi
	mov	eax, DWORD PTR _dwV0$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, ecx
	mov	eax, DWORD PTR _dwV0$[ebp]
	mov	DWORD PTR [eax], edx

; 91   :     }

	jmp	$LN2@DecryptBlo
$LN1@DecryptBlo:

; 92   : 
; 93   : 	m_pdwKey[0] ^= dwV0old;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	xor	eax, DWORD PTR _dwV0old$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 94   : 	m_pdwKey[1] ^= dwV1old;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	xor	edx, DWORD PTR _dwV1old$[ebp]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 95   : 	m_pdwKey[2] ^= dwV0old;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	xor	edx, DWORD PTR _dwV0old$[ebp]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 96   : 	m_pdwKey[3] ^= dwV1old;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	xor	eax, DWORD PTR _dwV1old$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 97   : 
; 98   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?DecryptBlock@CTinyEncrypt@@AAEXAAK0@Z ENDP		; CTinyEncrypt::DecryptBlock
_TEXT	ENDS
END
