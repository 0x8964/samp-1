; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\game\playerped.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?dwExt4@@3KA					; dwExt4
PUBLIC	?szSpecialActors@@3PAY0CA@DA			; szSpecialActors
PUBLIC	?DanceStyleLibs@@3PAY0BA@DA			; DanceStyleLibs
PUBLIC	?DanceIdleLoops@@3PAY0BA@DA			; DanceIdleLoops
PUBLIC	?szDanceAnimNamesFemale@@3PAY0BA@DA		; szDanceAnimNamesFemale
PUBLIC	?szDanceAnimNamesMale@@3PAY0BA@DA		; szDanceAnimNamesMale
PUBLIC	?szStripAnims@@3PAY0BA@DA			; szStripAnims
_BSS	SEGMENT
?dwExt4@@3KA DD	01H DUP (?)				; dwExt4
_BSS	ENDS
CONST	SEGMENT
_create_arrow_above_actor DW 0187H
	DB	'iv', 00H
	ORG $+13
	ORG $+2
_create_player DW 053H
	DB	'vfffv', 00H
	ORG $+10
	ORG $+2
_create_actor_from_player DW 01f5H
	DB	'vv', 00H
	ORG $+13
	ORG $+2
_select_interior DW 04bbH
	DB	'i', 00H
	ORG $+14
	ORG $+2
_camera_on_vehicle DW 0158H
	DB	'iii', 00H
	ORG $+12
	ORG $+2
_disable_marker DW 0164H
	DB	'i', 00H
	ORG $+14
	ORG $+2
_set_marker_color DW 0165H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_restart_if_wasted_at DW 016cH
	DB	'ffffi', 00H
	ORG $+10
	ORG $+2
_toggle_player_controllable DW 01b4H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_set_actor_armed_weapon DW 01b9H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_get_actor_armed_weapon DW 0470H
	DB	'iv', 00H
	ORG $+13
	ORG $+2
_put_actor_in_car DW 036aH
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_set_actor_immunities DW 02abH
	DB	'iiiiii', 00H
	ORG $+9
	ORG $+2
_set_actor_can_be_decapitated DW 0446H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_create_object DW 0107H
	DB	'ifffv', 00H
	ORG $+10
	ORG $+2
_remove_actor_from_car_and_put_at DW 0362H
	DB	'ifff', 00H
	ORG $+11
	ORG $+2
_send_actor_to_car_driverseat DW 05cbH
	DB	'iii', 00H
	ORG $+12
	ORG $+2
_send_actor_to_car_passenger DW 05caH
	DB	'iiii', 00H
	ORG $+11
	ORG $+2
_make_actor_leave_car DW 05cdH
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_get_actor_z_angle DW 0172H
	DB	'iv', 00H
	ORG $+13
	ORG $+2
_set_actor_z_angle DW 0173H
	DB	'if', 00H
	ORG $+13
	ORG $+2
_enter_passenger_driveby DW 0713H
	DB	'iiiffffiii', 00H
	ORG $+5
	ORG $+2
_lock_actor DW	04d7H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_refresh_streaming_at DW 04e4H
	DB	'ff', 00H
	ORG $+13
	ORG $+2
_put_actor_in_car2 DW 0430H
	DB	'iii', 00H
	ORG $+12
	ORG $+2
_kill_actor DW	0321H
	DB	'i', 00H
	ORG $+14
	ORG $+2
_set_actor_animation_set DW 0245H
	DB	'is', 00H
	ORG $+13
	ORG $+2
_apply_animation DW 0812H
	DB	'issfiiiii', 00H
	ORG $+6
	ORG $+2
_is_actor_performing_anim DW 0611H
	DB	'is', 00H
	ORG $+13
	ORG $+2
_set_actor_weapon_droppable DW 087eH
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_set_actor_money DW 03feH
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_link_actor_to_interior DW 0860H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_apply_object_animation DW 075aH
	DB	'issfii', 00H
	ORG $+9
	ORG $+2
_get_actor_distance_from_ground DW 0819H
	DB	'iv', 00H
	ORG $+13
	ORG $+2
_is_actor_falling_think DW 0818H
	DB	'i', 00H
	ORG $+14
	ORG $+2
_attach_object_to_actor DW 069bH
	DB	'iiffffff', 00H
	ORG $+7
	ORG $+2
_set_object_visible DW 0750H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_destroy_object_with_fade DW 09a2H
	DB	'i', 00H
	ORG $+14
	ORG $+2
_disassociate_object DW 0682H
	DB	'ifffi', 00H
	ORG $+10
	ORG $+2
_set_object_scaling DW 08d2H
	DB	'if', 00H
	ORG $+13
	ORG $+2
_is_actor_in_the_water DW 04adH
	DB	'i', 00H
	ORG $+14
	ORG $+2
_show_on_radar2 DW 018bH
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_toggle_actor_cellphone DW 0729H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_actor_task_handsup DW 05c4H
	DB	'ii', 00H
	ORG $+13
	ORG $+2
_destroy_object DW 0108H
	DB	'i', 00H
	ORG $+14
	ORG $+2
_destroy_particle DW 0650H
	DB	'i', 00H
	ORG $+14
	ORG $+2
_attach_particle_to_actor2 DW 066aH
	DB	'siffffffiv', 00H
	ORG $+5
	ORG $+2
_make_particle_visible DW 064cH
	DB	'i', 00H
	ORG $+14
CONST	ENDS
_DATA	SEGMENT
?szSpecialActors@@3PAY0CA@DA DB 'TENPEN', 00H		; szSpecialActors
	ORG $+25
	DB	'PULASKI', 00H
	ORG $+24
	DB	'HERN', 00H
	ORG $+27
	DB	'SMOKE', 00H
	ORG $+26
	DB	'SWEET', 00H
	ORG $+26
	DB	'RYDER2', 00H
	ORG $+25
	DB	'RYDER3', 00H
	ORG $+25
	DB	'EMMET', 00H
	ORG $+26
	DB	'ANDRE', 00H
	ORG $+26
	DB	'OGLOC', 00H
	ORG $+26
	DB	'CESAR', 00H
	ORG $+26
	DB	'KENDL', 00H
	ORG $+26
	DB	'WUZIMU', 00H
	ORG $+25
	DB	'CAT', 00H
	ORG $+28
	DB	'TRUTH', 00H
	ORG $+26
	DB	'JETHRO', 00H
	ORG $+25
	DB	'DWAYNE', 00H
	ORG $+25
	DB	'ZERO', 00H
	ORG $+27
	DB	'TBONE', 00H
	ORG $+26
	DB	'JIZZY', 00H
	ORG $+26
	DB	'TORINO', 00H
	ORG $+25
	DB	'SINDACO', 00H
	ORG $+24
	DB	'MACCER', 00H
	ORG $+25
	DB	'PAUL', 00H
	ORG $+27
	DB	'ROSE', 00H
	ORG $+27
	DB	'FORELLI', 00H
	ORG $+24
	DB	'MADDOGG', 00H
	ORG $+24
	DB	'CROGRL2', 00H
	ORG $+24
	DB	'JANITOR', 00H
	ORG $+24
	DB	'BBTHIN', 00H
	ORG $+25
	DB	'SMOKEV', 00H
	ORG $+25
	DB	'GANGRL2', 00H
	ORG $+24
	DB	'MECGRL2', 00H
	ORG $+24
	DB	'GUNGRL2', 00H
	ORG $+24
	DB	'COPGRL2', 00H
	ORG $+24
	DB	'NURGRL2', 00H
	ORG $+24
?DanceStyleLibs@@3PAY0BA@DA DB 'WOP', 00H		; DanceStyleLibs
	ORG $+12
	DB	'GFUNK', 00H
	ORG $+10
	DB	'RUNNINGMAN', 00H
	ORG $+5
	DB	'STRIP', 00H
	ORG $+10
?DanceIdleLoops@@3PAY0BA@DA DB 'DANCE_LOOP', 00H	; DanceIdleLoops
	ORG $+5
	DB	'DANCE_LOOP', 00H
	ORG $+5
	DB	'DANCE_LOOP', 00H
	ORG $+5
	DB	'STR_Loop_B', 00H
	ORG $+5
?szDanceAnimNamesFemale@@3PAY0BA@DA DB 'DANCE_G1', 00H	; szDanceAnimNamesFemale
	ORG $+7
	DB	'DANCE_G2', 00H
	ORG $+7
	DB	'DANCE_G3', 00H
	ORG $+7
	DB	'DANCE_G4', 00H
	ORG $+7
	DB	'DANCE_G5', 00H
	ORG $+7
	DB	'DANCE_G6', 00H
	ORG $+7
	DB	'DANCE_G7', 00H
	ORG $+7
	DB	'DANCE_G8', 00H
	ORG $+7
	DB	'DANCE_G9', 00H
	ORG $+7
	DB	'DANCE_G10', 00H
	ORG $+6
	DB	'DANCE_G11', 00H
	ORG $+6
	DB	'DANCE_G12', 00H
	ORG $+6
	DB	'DANCE_G13', 00H
	ORG $+6
	DB	'DANCE_G14', 00H
	ORG $+6
	DB	'DANCE_G15', 00H
	ORG $+6
	DB	'DANCE_G16', 00H
	ORG $+6
?szDanceAnimNamesMale@@3PAY0BA@DA DB 'DANCE_B1', 00H	; szDanceAnimNamesMale
	ORG $+7
	DB	'DANCE_B2', 00H
	ORG $+7
	DB	'DANCE_B3', 00H
	ORG $+7
	DB	'DANCE_B4', 00H
	ORG $+7
	DB	'DANCE_B5', 00H
	ORG $+7
	DB	'DANCE_B6', 00H
	ORG $+7
	DB	'DANCE_B7', 00H
	ORG $+7
	DB	'DANCE_B8', 00H
	ORG $+7
	DB	'DANCE_B9', 00H
	ORG $+7
	DB	'DANCE_B10', 00H
	ORG $+6
	DB	'DANCE_B11', 00H
	ORG $+6
	DB	'DANCE_B12', 00H
	ORG $+6
	DB	'DANCE_B13', 00H
	ORG $+6
	DB	'DANCE_B14', 00H
	ORG $+6
	DB	'DANCE_B15', 00H
	ORG $+6
	DB	'DANCE_B16', 00H
	ORG $+6
?szStripAnims@@3PAY0BA@DA DB 'strip_A', 00H		; szStripAnims
	ORG $+8
	DB	'strip_B', 00H
	ORG $+8
	DB	'strip_C', 00H
	ORG $+8
	DB	'strip_D', 00H
	ORG $+8
	DB	'strip_E', 00H
	ORG $+8
	DB	'strip_F', 00H
	ORG $+8
	DB	'strip_G', 00H
	ORG $+8
	DB	'STR_A2B', 00H
	ORG $+8
	DB	'STR_B2A', 00H
	ORG $+8
	DB	'STR_B2C', 00H
	ORG $+8
	DB	'STR_C1', 00H
	ORG $+9
	DB	'STR_C2', 00H
	ORG $+9
	DB	'STR_C2B', 00H
	ORG $+8
	DB	'STR_A2B', 00H
	ORG $+8
	DB	'STR_B2C', 00H
	ORG $+8
	DB	'STR_C2', 00H
	ORG $+9
_DATA	ENDS
PUBLIC	??0CEntity@@QAE@XZ				; CEntity::CEntity
PUBLIC	??1CEntity@@UAE@XZ				; CEntity::~CEntity
PUBLIC	??_GCEntity@@UAEPAXI@Z				; CEntity::`scalar deleting destructor'
PUBLIC	?ResetForRespawn@CPlayerPed@@QAEXXZ		; CPlayerPed::ResetForRespawn
PUBLIC	?ResetPointers@CPlayerPed@@QAEXXZ		; CPlayerPed::ResetPointers
PUBLIC	?SetInitialState@CPlayerPed@@QAEXXZ		; CPlayerPed::SetInitialState
PUBLIC	?SetKeys@CPlayerPed@@QAEXGGG@Z			; CPlayerPed::SetKeys
PUBLIC	?GetKeys@CPlayerPed@@QAEGPAG0@Z			; CPlayerPed::GetKeys
PUBLIC	?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ ; CPlayerPed::GetCurrentAim
PUBLIC	?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z ; CPlayerPed::SetCurrentAim
PUBLIC	?Destroy@CPlayerPed@@QAEXXZ			; CPlayerPed::Destroy
PUBLIC	?ShowMarker@CPlayerPed@@QAEXXZ			; CPlayerPed::ShowMarker
PUBLIC	?HideMarker@CPlayerPed@@QAEXXZ			; CPlayerPed::HideMarker
PUBLIC	?GetCurrentWeapon@CPlayerPed@@QAEEXZ		; CPlayerPed::GetCurrentWeapon
PUBLIC	?GetCurrentVehicleID@CPlayerPed@@QAEHXZ		; CPlayerPed::GetCurrentVehicleID
PUBLIC	?IsOnScreen@CPlayerPed@@QAEHXZ			; CPlayerPed::IsOnScreen
PUBLIC	?GetHealth@CPlayerPed@@QAEMXZ			; CPlayerPed::GetHealth
PUBLIC	?SetHealth@CPlayerPed@@QAEXM@Z			; CPlayerPed::SetHealth
PUBLIC	?GetArmour@CPlayerPed@@QAEMXZ			; CPlayerPed::GetArmour
PUBLIC	?SetArmour@CPlayerPed@@QAEXM@Z			; CPlayerPed::SetArmour
PUBLIC	?GetStateFlags@CPlayerPed@@QAEKXZ		; CPlayerPed::GetStateFlags
PUBLIC	?SetStateFlags@CPlayerPed@@QAEXK@Z		; CPlayerPed::SetStateFlags
PUBLIC	?IsDead@CPlayerPed@@QAEHXZ			; CPlayerPed::IsDead
PUBLIC	?IsInVehicle@CPlayerPed@@QAEHXZ			; CPlayerPed::IsInVehicle
PUBLIC	?GetActionTrigger@CPlayerPed@@QAEEXZ		; CPlayerPed::GetActionTrigger
PUBLIC	?SetActionTrigger@CPlayerPed@@QAEXE@Z		; CPlayerPed::SetActionTrigger
PUBLIC	?GetAmmo@CPlayerPed@@QAEGXZ			; CPlayerPed::GetAmmo
PUBLIC	?SetAmmo@CPlayerPed@@QAEXEG@Z			; CPlayerPed::SetAmmo
PUBLIC	?GetTargetRotation@CPlayerPed@@QAEMXZ		; CPlayerPed::GetTargetRotation
PUBLIC	?SetTargetRotation@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetTargetRotation
PUBLIC	?ForceTargetRotation@CPlayerPed@@QAEXM@Z	; CPlayerPed::ForceTargetRotation
PUBLIC	?GiveWeapon@CPlayerPed@@QAEXHH@Z		; CPlayerPed::GiveWeapon
PUBLIC	?ClearAllWeapons@CPlayerPed@@QAEXXZ		; CPlayerPed::ClearAllWeapons
PUBLIC	?SetArmedWeapon@CPlayerPed@@QAEXH@Z		; CPlayerPed::SetArmedWeapon
PUBLIC	?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@XZ ; CPlayerPed::GetCurrentWeaponSlot
PUBLIC	?FindWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@K@Z ; CPlayerPed::FindWeaponSlot
PUBLIC	?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ	; CPlayerPed::HasAmmoForCurrentWeapon
PUBLIC	?SetWeaponModelIndex@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetWeaponModelIndex
PUBLIC	?PutDirectlyInVehicle@CPlayerPed@@QAEXHH@Z	; CPlayerPed::PutDirectlyInVehicle
PUBLIC	?EnterVehicle@CPlayerPed@@QAEXHH@Z		; CPlayerPed::EnterVehicle
PUBLIC	?ExitCurrentVehicle@CPlayerPed@@QAEXXZ		; CPlayerPed::ExitCurrentVehicle
PUBLIC	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ; CPlayerPed::RemoveFromVehicleAndPutAt
PUBLIC	?IsAPassenger@CPlayerPed@@QAEHXZ		; CPlayerPed::IsAPassenger
PUBLIC	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
PUBLIC	?GetGtaContactVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaContactVehicle
PUBLIC	?GetGtaContactEntity@CPlayerPed@@QAEPAU_ENTITY_TYPE@@XZ ; CPlayerPed::GetGtaContactEntity
PUBLIC	?GetVehicleSeatID@CPlayerPed@@QAEHXZ		; CPlayerPed::GetVehicleSeatID
PUBLIC	?TogglePlayerControllable@CPlayerPed@@QAEXH@Z	; CPlayerPed::TogglePlayerControllable
PUBLIC	?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z ; CPlayerPed::FindDeathReasonAndResponsiblePlayer
PUBLIC	?RestartIfWastedAt@CPlayerPed@@QAEXPAU_VECTOR@@M@Z ; CPlayerPed::RestartIfWastedAt
PUBLIC	?StartJetpack@CPlayerPed@@QAEXXZ		; CPlayerPed::StartJetpack
PUBLIC	?StopJetpack@CPlayerPed@@QAEXXZ			; CPlayerPed::StopJetpack
PUBLIC	?IsInJetpackMode@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInJetpackMode
PUBLIC	?StartPassengerDriveByMode@CPlayerPed@@QAEHXZ	; CPlayerPed::StartPassengerDriveByMode
PUBLIC	?SetCollisionChecking@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetCollisionChecking
PUBLIC	?SetGravityProcessing@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetGravityProcessing
PUBLIC	?SetModelIndex@CPlayerPed@@QAEXI@Z		; CPlayerPed::SetModelIndex
PUBLIC	?SetDead@CPlayerPed@@QAEXXZ			; CPlayerPed::SetDead
PUBLIC	?ExtinguishFire@CPlayerPed@@QAEXXZ		; CPlayerPed::ExtinguishFire
PUBLIC	?SetAnimationSet@CPlayerPed@@QAEXPAD@Z		; CPlayerPed::SetAnimationSet
PUBLIC	?SetMoney@CPlayerPed@@QAEXH@Z			; CPlayerPed::SetMoney
PUBLIC	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z	; CPlayerPed::ApplyAnimation
PUBLIC	?SetInterior@CPlayerPed@@QAEXE@Z		; CPlayerPed::SetInterior
PUBLIC	?IsOnGround@CPlayerPed@@QAEHXZ			; CPlayerPed::IsOnGround
PUBLIC	?ResetDamageEntity@CPlayerPed@@QAEXXZ		; CPlayerPed::ResetDamageEntity
PUBLIC	?IsPerformingAnimation@CPlayerPed@@QAEHPAD@Z	; CPlayerPed::IsPerformingAnimation
PUBLIC	??0CPlayerPed@@QAE@XZ				; CPlayerPed::CPlayerPed
PUBLIC	??0CPlayerPed@@QAE@HHMMMME@Z			; CPlayerPed::CPlayerPed
PUBLIC	??1CPlayerPed@@UAE@XZ				; CPlayerPed::~CPlayerPed
PUBLIC	?ProcessVehicleHorn@CPlayerPed@@QAEXXZ		; CPlayerPed::ProcessVehicleHorn
PUBLIC	?IsPerformingCustomAnim@CPlayerPed@@QAEHXZ	; CPlayerPed::IsPerformingCustomAnim
PUBLIC	?ProcessParachutes@CPlayerPed@@QAEXXZ		; CPlayerPed::ProcessParachutes
PUBLIC	?ProcessParachuteSkydiving@CPlayerPed@@QAEXXZ	; CPlayerPed::ProcessParachuteSkydiving
PUBLIC	?ProcessParachuting@CPlayerPed@@QAEXXZ		; CPlayerPed::ProcessParachuting
PUBLIC	?CheckVehicleParachute@CPlayerPed@@QAEXXZ	; CPlayerPed::CheckVehicleParachute
PUBLIC	?GetPedStat@CPlayerPed@@QAEHXZ			; CPlayerPed::GetPedStat
PUBLIC	?StartDancing@CPlayerPed@@QAEXH@Z		; CPlayerPed::StartDancing
PUBLIC	?StopDancing@CPlayerPed@@QAEXXZ			; CPlayerPed::StopDancing
PUBLIC	?IsDancing@CPlayerPed@@QAEHXZ			; CPlayerPed::IsDancing
PUBLIC	?ProcessDancing@CPlayerPed@@QAEXXZ		; CPlayerPed::ProcessDancing
PUBLIC	?GetDanceAnimForMove@CPlayerPed@@QAEPADH@Z	; CPlayerPed::GetDanceAnimForMove
PUBLIC	?HandsUp@CPlayerPed@@QAEXXZ			; CPlayerPed::HandsUp
PUBLIC	?HasHandsUp@CPlayerPed@@QAEHXZ			; CPlayerPed::HasHandsUp
PUBLIC	?HoldItem@CPlayerPed@@QAEXH@Z			; CPlayerPed::HoldItem
PUBLIC	?StartPissing@CPlayerPed@@QAEXXZ		; CPlayerPed::StartPissing
PUBLIC	?StopPissing@CPlayerPed@@QAEXXZ			; CPlayerPed::StopPissing
PUBLIC	?IsPissing@CPlayerPed@@QAEHXZ			; CPlayerPed::IsPissing
PUBLIC	?ProcessMarkers@CPlayerPed@@QAEXHMH@Z		; CPlayerPed::ProcessMarkers
PUBLIC	?ApplyCommandTask@CPlayerPed@@QAEXPADHHHPAU_VECTOR@@HMHHH@Z ; CPlayerPed::ApplyCommandTask
PUBLIC	?DestroyFollowPedTask@CPlayerPed@@QAEXXZ	; CPlayerPed::DestroyFollowPedTask
PUBLIC	?ToggleCellphone@CPlayerPed@@QAEXH@Z		; CPlayerPed::ToggleCellphone
PUBLIC	?IsCellphoneEnabled@CPlayerPed@@QAEHXZ		; CPlayerPed::IsCellphoneEnabled
PUBLIC	?GetAimZ@CPlayerPed@@QAEMXZ			; CPlayerPed::GetAimZ
PUBLIC	?SetAimZ@CPlayerPed@@QAEXM@Z			; CPlayerPed::SetAimZ
PUBLIC	??_GCPlayerPed@@UAEPAXI@Z			; CPlayerPed::`scalar deleting destructor'
PUBLIC	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
PUBLIC	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z	; CVehiclePool::GetAt
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CEntity@@6B@				; CEntity::`vftable'
PUBLIC	??_7CPlayerPed@@6B@				; CPlayerPed::`vftable'
PUBLIC	??_C@_03DDABINI@SEX?$AA@			; `string'
PUBLIC	??_C@_09GCNACFAF@PARACHUTE?$AA@			; `string'
PUBLIC	??_C@_0BD@FCOONAEM@FALL_SKYDIVE_ACCEL?$AA@	; `string'
PUBLIC	??_C@_0N@KLGOGCNA@FALL_SKYDIVE?$AA@		; `string'
PUBLIC	??_C@_09GNCKNLEL@PARA_OPEN?$AA@			; `string'
PUBLIC	??_C@_0M@BCINMKPP@PARA_OPEN_O?$AA@		; `string'
PUBLIC	??_C@_0L@FGFGOKMG@PARA_DECEL?$AA@		; `string'
PUBLIC	??_C@_0N@MNHOBHLP@PARA_DECEL_O?$AA@		; `string'
PUBLIC	??_C@_0L@NJEKKGIB@PARA_FLOAT?$AA@		; `string'
PUBLIC	??_C@_0N@NCMEMNK@PARA_FLOAT_O?$AA@		; `string'
PUBLIC	??_C@_08KDFFPJKK@PAULNMAC?$AA@			; `string'
PUBLIC	??_C@_09HMBFHDDK@PISS_LOOP?$AA@			; `string'
PUBLIC	??_C@_09KBEMCNHF@PETROLCAN?$AA@			; `string'
PUBLIC	??_R4CEntity@@6B@				; CEntity::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEntity@@@8				; CEntity `RTTI Type Descriptor'
PUBLIC	??_R3CEntity@@8					; CEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEntity@@8					; CEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEntity@@8			; CEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CPlayerPed@@6B@				; CPlayerPed::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPlayerPed@@@8				; CPlayerPed `RTTI Type Descriptor'
PUBLIC	??_R3CPlayerPed@@8				; CPlayerPed::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPlayerPed@@8				; CPlayerPed::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPlayerPed@@8			; CPlayerPed::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae140000000
PUBLIC	__real@3fe28f5c20000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@40800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@41000000
PUBLIC	__real@41200000
PUBLIC	__real@41800000
PUBLIC	__real@41a00000
PUBLIC	__real@42c80000
PUBLIC	__real@bfb47ae140000000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_stricmp:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	?Add@CEntity@@UAEXXZ:PROC			; CEntity::Add
EXTRN	?Remove@CEntity@@UAEXXZ:PROC			; CEntity::Remove
EXTRN	?IsAdded@CEntity@@QAEHXZ:PROC			; CEntity::IsAdded
EXTRN	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z:PROC	; CEntity::GetMatrix
EXTRN	?SetModelIndex@CEntity@@QAEXI@Z:PROC		; CEntity::SetModelIndex
EXTRN	?TeleportTo@CEntity@@QAEXMMM@Z:PROC		; CEntity::TeleportTo
EXTRN	?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ:PROC ; CEntity::GetDistanceFromLocalPlayerPed
EXTRN	??_ECEntity@@UAEPAXI@Z:PROC			; CEntity::`vector deleting destructor'
EXTRN	?IsATrainPart@CVehicle@@QAEHXZ:PROC		; CVehicle::IsATrainPart
EXTRN	?GameGetInternalAim@@YGPAU_CAMERA_AIM@@XZ:PROC	; GameGetInternalAim
EXTRN	?GameStoreRemotePlayerAim@@YGXHPAU_CAMERA_AIM@@@Z:PROC ; GameStoreRemotePlayerAim
EXTRN	??_ECPlayerPed@@UAEPAXI@Z:PROC			; CPlayerPed::`vector deleting destructor'
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	?RequestModel@CGame@@QAEXH@Z:PROC		; CGame::RequestModel
EXTRN	?LoadRequestedModels@CGame@@QAEXXZ:PROC		; CGame::LoadRequestedModels
EXTRN	?IsModelLoaded@CGame@@QAEHH@Z:PROC		; CGame::IsModelLoaded
EXTRN	?RequestAnimation@CGame@@QAEXPAD@Z:PROC		; CGame::RequestAnimation
EXTRN	?IsAnimationLoaded@CGame@@QAEHPAD@Z:PROC	; CGame::IsAnimationLoaded
EXTRN	?GetWeaponInfo@CGame@@QAEKHH@Z:PROC		; CGame::GetWeaponInfo
EXTRN	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z:PROC ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
EXTRN	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z:PROC ; CVehiclePool::FindIDFromGtaPtr
EXTRN	?UnFuck@@YAXKH@Z:PROC				; UnFuck
EXTRN	?GameGetWeaponModelIDFromWeaponID@@YGHH@Z:PROC	; GameGetWeaponModelIDFromWeaponID
EXTRN	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z:PROC	; GamePool_Ped_GetAt
EXTRN	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z:PROC ; GamePool_Vehicle_GetAt
EXTRN	?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z:PROC ; GamePool_Object_GetAt
EXTRN	?GamePool_Vehicle_GetIndex@@YGKPAU_VEHICLE_TYPE@@@Z:PROC ; GamePool_Vehicle_GetIndex
EXTRN	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ:PROC ; GamePool_FindPlayerPed
EXTRN	?Game_PedStatPrim@@YAHH@Z:PROC			; Game_PedStatPrim
EXTRN	?GameIsEntityOnScreen@@YGHPAK@Z:PROC		; GameIsEntityOnScreen
EXTRN	?SetPlayerPedPtrRecord@@YGXEK@Z:PROC		; SetPlayerPedPtrRecord
EXTRN	?DegToRad@@YAMM@Z:PROC				; DegToRad
EXTRN	?IsValidModel@@YGHH@Z:PROC			; IsValidModel
EXTRN	?GameStoreRemotePlayerKeys@@YAXHPAU_GTA_CONTROLSET@@@Z:PROC ; GameStoreRemotePlayerKeys
EXTRN	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ:PROC ; GameGetInternalKeys
EXTRN	?GameGetPlayerKeys@@YAPAU_GTA_CONTROLSET@@H@Z:PROC ; GameGetPlayerKeys
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	?bIgnoreNextEntry@@3HA:DWORD			; bIgnoreNextEntry
EXTRN	?pbyteCurrentPlayer@@3PAEA:DWORD		; pbyteCurrentPlayer
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@bfb47ae140000000
CONST	SEGMENT
__real@bfb47ae140000000 DQ 0bfb47ae140000000r	; -0.08
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe28f5c20000000
CONST	SEGMENT
__real@3fe28f5c20000000 DQ 03fe28f5c20000000r	; 0.58
CONST	ENDS
;	COMDAT __real@3f847ae140000000
CONST	SEGMENT
__real@3f847ae140000000 DQ 03f847ae140000000r	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CPlayerPed@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPlayerPed@@8 DD FLAT:??_R0?AVCPlayerPed@@@8 ; CPlayerPed::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPlayerPed@@8
rdata$r	ENDS
;	COMDAT ??_R2CPlayerPed@@8
rdata$r	SEGMENT
??_R2CPlayerPed@@8 DD FLAT:??_R1A@?0A@EA@CPlayerPed@@8	; CPlayerPed::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CPlayerPed@@8
rdata$r	SEGMENT
??_R3CPlayerPed@@8 DD 00H				; CPlayerPed::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPlayerPed@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPlayerPed@@@8
data$r	SEGMENT
??_R0?AVCPlayerPed@@@8 DD FLAT:??_7type_info@@6B@	; CPlayerPed `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPlayerPed@@', 00H
data$r	ENDS
;	COMDAT ??_R4CPlayerPed@@6B@
rdata$r	SEGMENT
??_R4CPlayerPed@@6B@ DD 00H				; CPlayerPed::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPlayerPed@@@8
	DD	FLAT:??_R3CPlayerPed@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEntity@@8 DD FLAT:??_R0?AVCEntity@@@8	; CEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CEntity@@8
rdata$r	SEGMENT
??_R2CEntity@@8 DD FLAT:??_R1A@?0A@EA@CEntity@@8	; CEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEntity@@8
rdata$r	SEGMENT
??_R3CEntity@@8 DD 00H					; CEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEntity@@@8
data$r	SEGMENT
??_R0?AVCEntity@@@8 DD FLAT:??_7type_info@@6B@		; CEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEntity@@', 00H
data$r	ENDS
;	COMDAT ??_R4CEntity@@6B@
rdata$r	SEGMENT
??_R4CEntity@@6B@ DD 00H				; CEntity::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEntity@@@8
	DD	FLAT:??_R3CEntity@@8
rdata$r	ENDS
;	COMDAT ??_C@_09KBEMCNHF@PETROLCAN?$AA@
CONST	SEGMENT
??_C@_09KBEMCNHF@PETROLCAN?$AA@ DB 'PETROLCAN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HMBFHDDK@PISS_LOOP?$AA@
CONST	SEGMENT
??_C@_09HMBFHDDK@PISS_LOOP?$AA@ DB 'PISS_LOOP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KDFFPJKK@PAULNMAC?$AA@
CONST	SEGMENT
??_C@_08KDFFPJKK@PAULNMAC?$AA@ DB 'PAULNMAC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCMEMNK@PARA_FLOAT_O?$AA@
CONST	SEGMENT
??_C@_0N@NCMEMNK@PARA_FLOAT_O?$AA@ DB 'PARA_FLOAT_O', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NJEKKGIB@PARA_FLOAT?$AA@
CONST	SEGMENT
??_C@_0L@NJEKKGIB@PARA_FLOAT?$AA@ DB 'PARA_FLOAT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNHOBHLP@PARA_DECEL_O?$AA@
CONST	SEGMENT
??_C@_0N@MNHOBHLP@PARA_DECEL_O?$AA@ DB 'PARA_DECEL_O', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FGFGOKMG@PARA_DECEL?$AA@
CONST	SEGMENT
??_C@_0L@FGFGOKMG@PARA_DECEL?$AA@ DB 'PARA_DECEL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BCINMKPP@PARA_OPEN_O?$AA@
CONST	SEGMENT
??_C@_0M@BCINMKPP@PARA_OPEN_O?$AA@ DB 'PARA_OPEN_O', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GNCKNLEL@PARA_OPEN?$AA@
CONST	SEGMENT
??_C@_09GNCKNLEL@PARA_OPEN?$AA@ DB 'PARA_OPEN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KLGOGCNA@FALL_SKYDIVE?$AA@
CONST	SEGMENT
??_C@_0N@KLGOGCNA@FALL_SKYDIVE?$AA@ DB 'FALL_SKYDIVE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FCOONAEM@FALL_SKYDIVE_ACCEL?$AA@
CONST	SEGMENT
??_C@_0BD@FCOONAEM@FALL_SKYDIVE_ACCEL?$AA@ DB 'FALL_SKYDIVE_ACCEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GCNACFAF@PARACHUTE?$AA@
CONST	SEGMENT
??_C@_09GCNACFAF@PARACHUTE?$AA@ DB 'PARACHUTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDABINI@SEX?$AA@
CONST	SEGMENT
??_C@_03DDABINI@SEX?$AA@ DB 'SEX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CPlayerPed@@6B@
CONST	SEGMENT
??_7CPlayerPed@@6B@ DD FLAT:??_R4CPlayerPed@@6B@	; CPlayerPed::`vftable'
	DD	FLAT:??_ECPlayerPed@@UAEPAXI@Z
	DD	FLAT:?Add@CEntity@@UAEXXZ
	DD	FLAT:?Remove@CEntity@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CEntity@@6B@
CONST	SEGMENT
??_7CEntity@@6B@ DD FLAT:??_R4CEntity@@6B@		; CEntity::`vftable'
	DD	FLAT:??_ECEntity@@UAEPAXI@Z
	DD	FLAT:?Add@CEntity@@UAEXXZ
	DD	FLAT:?Remove@CEntity@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPlayerPed@@QAE@HHMMMME@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPlayerPed@@QAE@HHMMMME@Z$0
__ehfuncinfo$??0CPlayerPed@@QAE@HHMMMME@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CPlayerPed@@QAE@HHMMMME@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPlayerPed@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPlayerPed@@QAE@XZ$0
__ehfuncinfo$??0CPlayerPed@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CPlayerPed@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?SetDead@CPlayerPed@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetDead@CPlayerPed@@QAEXXZ$0
__unwindtable$?SetDead@CPlayerPed@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetDead@CPlayerPed@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?SetDead@CPlayerPed@@QAEXXZ$2
__ehfuncinfo$?SetDead@CPlayerPed@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetDead@CPlayerPed@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?SetDead@CPlayerPed@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ PROC	; CNetGame::GetVehiclePool, COMDAT
; _this$ = ecx

; 97   : 	CVehiclePool * GetVehiclePool() { return m_pVehiclePool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ENDP	; CNetGame::GetVehiclePool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\vehiclepool.h
;	COMDAT ?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_VehicleID$ = 8						; size = 2
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z PROC		; CVehiclePool::GetAt, COMDAT
; _this$ = ecx

; 58   : 	CVehicle* GetAt(VEHICLEID VehicleID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 		if(VehicleID >= MAX_VEHICLES || !m_bVehicleSlotState[VehicleID]) { return NULL; }

	movzx	eax, WORD PTR _VehicleID$[ebp]
	cmp	eax, 702				; 000002beH
	jge	SHORT $LN1@GetAt
	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN2@GetAt
$LN1@GetAt:
	xor	eax, eax
	jmp	SHORT $LN3@GetAt
$LN2@GetAt:

; 60   : 		return m_pVehicles[VehicleID];

	movzx	eax, WORD PTR _VehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+2808]
$LN3@GetAt:

; 61   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ENDP		; CVehiclePool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ PROC ; CPlayerPool::GetLocalPlayer, COMDAT
; _this$ = ecx

; 46   : 	CLocalPlayer * GetLocalPlayer() { return m_pLocalPlayer; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ENDP ; CPlayerPool::GetLocalPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCPlayerPed@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCPlayerPed@@UAEPAXI@Z PROC				; CPlayerPed::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPlayerPed@@UAE@XZ			; CPlayerPed::~CPlayerPed
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPlayerPed@@UAEPAXI@Z ENDP				; CPlayerPed::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetAimZ@CPlayerPed@@QAEXM@Z
_TEXT	SEGMENT
_dwPlayerInfo$1 = -20					; size = 4
_this$ = -8						; size = 4
_fAimZ$ = 8						; size = 4
?SetAimZ@CPlayerPed@@QAEXM@Z PROC			; CPlayerPed::SetAimZ, COMDAT
; _this$ = ecx

; 1629 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1630 : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@SetAimZ

; 1631 : 		DWORD dwPlayerInfo = m_pPed->dwPlayerInfoOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1152]
	mov	DWORD PTR _dwPlayerInfo$1[ebp], edx

; 1632 : 		_asm mov eax, dwPlayerInfo

	mov	eax, DWORD PTR _dwPlayerInfo$1[ebp]

; 1633 : 		_asm mov ebx, fAimZ

	mov	ebx, DWORD PTR _fAimZ$[ebp]

; 1634 : 		_asm mov [eax+84], ebx

	mov	DWORD PTR [eax+84], ebx
$LN2@SetAimZ:

; 1635 : 	}
; 1636 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAimZ@CPlayerPed@@QAEXM@Z ENDP			; CPlayerPed::SetAimZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetAimZ@CPlayerPed@@QAEMXZ
_TEXT	SEGMENT
_fAimZ$1 = -32						; size = 4
_dwPlayerInfo$2 = -20					; size = 4
_this$ = -8						; size = 4
?GetAimZ@CPlayerPed@@QAEMXZ PROC			; CPlayerPed::GetAimZ, COMDAT
; _this$ = ecx

; 1612 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1613 : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@GetAimZ

; 1614 : 		DWORD dwPlayerInfo = m_pPed->dwPlayerInfoOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1152]
	mov	DWORD PTR _dwPlayerInfo$2[ebp], edx

; 1615 : 
; 1616 : 		float fAimZ;
; 1617 : 		_asm mov eax, dwPlayerInfo

	mov	eax, DWORD PTR _dwPlayerInfo$2[ebp]

; 1618 : 		_asm mov ebx, [eax+84]

	mov	ebx, DWORD PTR [eax+84]

; 1619 : 		_asm mov fAimZ, ebx

	mov	DWORD PTR _fAimZ$1[ebp], ebx

; 1620 : 
; 1621 : 		return fAimZ;

	fld	DWORD PTR _fAimZ$1[ebp]
	jmp	SHORT $LN2@GetAimZ
$LN1@GetAimZ:

; 1622 : 	}
; 1623 : 	return 0.0f;

	fldz
$LN2@GetAimZ:

; 1624 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAimZ@CPlayerPed@@QAEMXZ ENDP			; CPlayerPed::GetAimZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsCellphoneEnabled@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsCellphoneEnabled@CPlayerPed@@QAEHXZ PROC		; CPlayerPed::IsCellphoneEnabled, COMDAT
; _this$ = ecx

; 1874 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1875 :     return m_iCellPhoneEnabled;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 1876 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsCellphoneEnabled@CPlayerPed@@QAEHXZ ENDP		; CPlayerPed::IsCellphoneEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ToggleCellphone@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iOn$ = 8						; size = 4
?ToggleCellphone@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::ToggleCellphone, COMDAT
; _this$ = ecx

; 1865 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1866 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@ToggleCell
	jmp	SHORT $LN2@ToggleCell
$LN1@ToggleCell:

; 1867 : 	m_iCellPhoneEnabled = iOn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iOn$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 1868 : 	ScriptCommand(&toggle_actor_cellphone,m_dwGTAId,iOn);

	mov	eax, DWORD PTR _iOn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _toggle_actor_cellphone
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN2@ToggleCell:

; 1869 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleCellphone@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::ToggleCellphone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?DestroyFollowPedTask@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DestroyFollowPedTask@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::DestroyFollowPedTask, COMDAT
; _this$ = ecx

; 1849 : {    

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1850 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@DestroyFol
	jmp	SHORT $LN3@DestroyFol
$LN2@DestroyFol:

; 1851 : 	dwExt4 = (DWORD)m_pPed->Tasks->pdwExtUnk4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR ?dwExt4@@3KA, eax		; dwExt4

; 1852 : 	if(!dwExt4) return;

	cmp	DWORD PTR ?dwExt4@@3KA, 0		; dwExt4
	jne	SHORT $LN1@DestroyFol
	jmp	SHORT $LN3@DestroyFol
$LN1@DestroyFol:

; 1853 : 
; 1854 : 	_asm mov ecx, dwExt4

	mov	ecx, DWORD PTR ?dwExt4@@3KA		; dwExt4

; 1855 : 	_asm mov edx, 0x639330

	mov	edx, 6525744				; 00639330H

; 1856 : 	_asm push 1

	push	1

; 1857 : 	_asm call edx

	call	edx

; 1858 : 
; 1859 : 	m_pPed->Tasks->pdwExtUnk4 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	mov	DWORD PTR [edx+44], 0
$LN3@DestroyFol:

; 1860 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyFollowPedTask@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::DestroyFollowPedTask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ApplyCommandTask@CPlayerPed@@QAEXPADHHHPAU_VECTOR@@HMHHH@Z
_TEXT	SEGMENT
_dwPed$ = -20						; size = 4
_this$ = -8						; size = 4
_szTaskName$ = 8					; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_p3$ = 20						; size = 4
_p4$ = 24						; size = 4
_p5$ = 28						; size = 4
_p6$ = 32						; size = 4
_p7$ = 36						; size = 4
_p8$ = 40						; size = 4
_p9$ = 44						; size = 4
?ApplyCommandTask@CPlayerPed@@QAEXPADHHHPAU_VECTOR@@HMHHH@Z PROC ; CPlayerPed::ApplyCommandTask, COMDAT
; _this$ = ecx

; 1824 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1825 : 	DWORD dwPed = (DWORD)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwPed$[ebp], ecx

; 1826 : 	if(!dwPed) return;

	cmp	DWORD PTR _dwPed$[ebp], 0
	jne	SHORT $LN1@ApplyComma
	jmp	SHORT $LN2@ApplyComma
$LN1@ApplyComma:

; 1827 : 
; 1828 :     _asm push p9

	push	DWORD PTR _p9$[ebp]

; 1829 : 	_asm push p8

	push	DWORD PTR _p8$[ebp]

; 1830 : 	_asm push p7

	push	DWORD PTR _p7$[ebp]

; 1831 : 	_asm push p6

	push	DWORD PTR _p6$[ebp]

; 1832 : 	_asm push p5

	push	DWORD PTR _p5$[ebp]

; 1833 : 	_asm push p4

	push	DWORD PTR _p4$[ebp]

; 1834 : 	_asm push p3

	push	DWORD PTR _p3$[ebp]

; 1835 : 	_asm push p2

	push	DWORD PTR _p2$[ebp]

; 1836 : 	_asm push p1

	push	DWORD PTR _p1$[ebp]

; 1837 : 	_asm push dwPed

	push	DWORD PTR _dwPed$[ebp]

; 1838 : 	_asm push szTaskName

	push	DWORD PTR _szTaskName$[ebp]

; 1839 : 	_asm mov ecx, 0xC15448

	mov	ecx, 12670024				; 00c15448H

; 1840 : 	_asm mov edx, 0x618970

	mov	edx, 6392176				; 00618970H

; 1841 : 	_asm call edx

	call	edx
$LN2@ApplyComma:

; 1842 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?ApplyCommandTask@CPlayerPed@@QAEXPADHHHPAU_VECTOR@@HMHHH@Z ENDP ; CPlayerPed::ApplyCommandTask
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ProcessMarkers@CPlayerPed@@QAEXHMH@Z
_TEXT	SEGMENT
tv88 = -208						; size = 4
_this$ = -8						; size = 4
_bMarkerStreamingEnabled$ = 8				; size = 4
_fMarkerStreamRadius$ = 12				; size = 4
_bVisible$ = 16						; size = 4
?ProcessMarkers@CPlayerPed@@QAEXHMH@Z PROC		; CPlayerPed::ProcessMarkers, COMDAT
; _this$ = ecx

; 1808 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1809 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@ProcessMar
	jmp	SHORT $LN7@ProcessMar
$LN6@ProcessMar:

; 1810 : 
; 1811 : 	// Add or remove player markers.
; 1812 : 	if (bVisible && (!bMarkerStreamingEnabled || GetDistanceFromLocalPlayerPed() < fMarkerStreamRadius)) {

	cmp	DWORD PTR _bVisible$[ebp], 0
	je	SHORT $LN5@ProcessMar
	cmp	DWORD PTR _bMarkerStreamingEnabled$[ebp], 0
	je	SHORT $LN4@ProcessMar
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDistanceFromLocalPlayerPed@CEntity@@QAEMXZ ; CEntity::GetDistanceFromLocalPlayerPed
	fstp	DWORD PTR tv88[ebp]
	movss	xmm0, DWORD PTR _fMarkerStreamRadius$[ebp]
	comiss	xmm0, DWORD PTR tv88[ebp]
	jbe	SHORT $LN5@ProcessMar
$LN4@ProcessMar:

; 1813 : 		if (m_byteCreateMarker && !m_dwArrow) ShowMarker(); 

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+69]
	test	ecx, ecx
	je	SHORT $LN3@ProcessMar
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+65], 0
	jne	SHORT $LN3@ProcessMar
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowMarker@CPlayerPed@@QAEXXZ		; CPlayerPed::ShowMarker
$LN3@ProcessMar:

; 1814 : 	}
; 1815 : 	else {

	jmp	SHORT $LN1@ProcessMar
$LN5@ProcessMar:

; 1816 : 		if (m_dwArrow) HideMarker();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+65], 0
	je	SHORT $LN1@ProcessMar
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HideMarker@CPlayerPed@@QAEXXZ		; CPlayerPed::HideMarker
$LN1@ProcessMar:
$LN7@ProcessMar:

; 1817 : 	}
; 1818 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ProcessMarkers@CPlayerPed@@QAEXHMH@Z ENDP		; CPlayerPed::ProcessMarkers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsPissing@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsPissing@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsPissing, COMDAT
; _this$ = ecx

; 1927 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1928 : 	if(!m_pPed) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@IsPissing
	xor	eax, eax
	jmp	SHORT $LN3@IsPissing
$LN2@IsPissing:

; 1929 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN1@IsPissing
	xor	eax, eax
	jmp	SHORT $LN3@IsPissing
$LN1@IsPissing:

; 1930 : 	return m_iPissingState;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+57]
$LN3@IsPissing:

; 1931 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPissing@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsPissing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?StopPissing@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_mat$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?StopPissing@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::StopPissing, COMDAT
; _this$ = ecx

; 1905 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1906 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@StopPissin
	jmp	$LN5@StopPissin
$LN4@StopPissin:

; 1907 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN3@StopPissin
	jmp	SHORT $LN5@StopPissin
$LN3@StopPissin:

; 1908 : 	if(!m_iPissingState) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+57], 0
	jne	SHORT $LN2@StopPissin
	jmp	SHORT $LN5@StopPissin
$LN2@StopPissin:

; 1909 : 
; 1910 : 	if(m_dwPissParticlesHandle) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+61], 0
	je	SHORT $LN1@StopPissin

; 1911 : 		ScriptCommand(&destroy_particle,m_dwPissParticlesHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+61]
	push	ecx
	push	OFFSET _destroy_particle
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 1912 : 		m_dwPissParticlesHandle = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+61], 0
$LN1@StopPissin:

; 1913 : 	}
; 1914 : 
; 1915 : 	MATRIX4X4 mat;
; 1916 : 	GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 1917 : 	TeleportTo(mat.pos.X,mat.pos.Y,mat.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo

; 1918 : 	
; 1919 : 	//ApplyAnimation("PISS_OUT", "PAULNMAC", 4.0f, 0, 0, 0, 0, -1);
; 1920 : 
; 1921 : 	m_iPissingState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+57], 0
$LN5@StopPissin:

; 1922 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@StopPissin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@StopPissin:
	DD	1
	DD	$LN8@StopPissin
$LN8@StopPissin:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN7@StopPissin
$LN7@StopPissin:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?StopPissing@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::StopPissing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?StartPissing@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?StartPissing@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::StartPissing, COMDAT
; _this$ = ecx

; 1881 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1882 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@StartPissi
	jmp	$LN4@StartPissi
$LN3@StartPissi:

; 1883 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN2@StartPissi
	jmp	$LN4@StartPissi
$LN2@StartPissi:

; 1884 : 
; 1885 : 	if(m_iPissingState != 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+57], 0
	je	SHORT $LN1@StartPissi

; 1886 : 		// already started
; 1887 : 		return;

	jmp	$LN4@StartPissi
$LN1@StartPissi:

; 1888 : 	}
; 1889 : 
; 1890 : 	ApplyAnimation("PISS_LOOP", "PAULNMAC", 4.0f, 1, 0, 0, 0, -1);

	push	-1
	push	0
	push	0
	push	0
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_08KDFFPJKK@PAULNMAC?$AA@
	push	OFFSET ??_C@_09HMBFHDDK@PISS_LOOP?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation

; 1891 : 
; 1892 : 	//opcode_066a('PETROLCAN', lhActor0, 0.0, 0.58, -0.08, 0.0, 0.01, 0.0, 1, l000f);
; 1893 : 
; 1894 : 	ScriptCommand(&attach_particle_to_actor2,"PETROLCAN",m_dwGTAId, 
; 1895 : 		0.0f, 0.58f, -0.08f, 0.0f, 0.01f, 0.0f, 1, &m_dwPissParticlesHandle);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 61					; 0000003dH
	push	eax
	push	1
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3f847ae140000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@bfb47ae140000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fe28f5c20000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_09KBEMCNHF@PETROLCAN?$AA@
	push	OFFSET _attach_particle_to_actor2
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 68					; 00000044H

; 1896 : 
; 1897 : 	ScriptCommand(&make_particle_visible,m_dwPissParticlesHandle);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+61]
	push	ecx
	push	OFFSET _make_particle_visible
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 1898 : 
; 1899 : 	m_iPissingState = 1;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+57], 1
$LN4@StartPissi:

; 1900 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StartPissing@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::StartPissing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?HoldItem@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_dwPed$ = -20						; size = 4
_this$ = -8						; size = 4
_iObject$ = 8						; size = 4
?HoldItem@CPlayerPed@@QAEXH@Z PROC			; CPlayerPed::HoldItem, COMDAT
; _this$ = ecx

; 1084 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1085 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@HoldItem
	jmp	SHORT $LN4@HoldItem
$LN3@HoldItem:

; 1086 : 	if(!IsAdded()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAdded@CEntity@@QAEHXZ		; CEntity::IsAdded
	test	eax, eax
	jne	SHORT $LN2@HoldItem
	jmp	SHORT $LN4@HoldItem
$LN2@HoldItem:

; 1087 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN1@HoldItem
	jmp	SHORT $LN4@HoldItem
$LN1@HoldItem:

; 1088 : 
; 1089 : 	DWORD dwPed = (DWORD)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwPed$[ebp], ecx

; 1090 : 	_asm push 1

	push	1

; 1091 : 	_asm push iObject

	push	DWORD PTR _iObject$[ebp]

; 1092 : 	_asm mov ecx, dwPed

	mov	ecx, DWORD PTR _dwPed$[ebp]

; 1093 : 	_asm mov ebx, 0x5E4390

	mov	ebx, 6177680				; 005e4390H

; 1094 : 	_asm call ebx

	call	ebx
$LN4@HoldItem:

; 1095 : 
; 1096 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?HoldItem@CPlayerPed@@QAEXH@Z ENDP			; CPlayerPed::HoldItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?HasHandsUp@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_dwJmpVtbl$ = -20					; size = 4
_this$ = -8						; size = 4
?HasHandsUp@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::HasHandsUp, COMDAT
; _this$ = ecx

; 1070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1071 : 	if(!m_pPed || IN_VEHICLE(m_pPed)) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@HasHandsUp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN6@HasHandsUp
$LN5@HasHandsUp:
	xor	eax, eax
	jmp	SHORT $LN7@HasHandsUp
$LN6@HasHandsUp:

; 1072 : 	if(!IsAdded()) return FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAdded@CEntity@@QAEHXZ		; CEntity::IsAdded
	test	eax, eax
	jne	SHORT $LN4@HasHandsUp
	xor	eax, eax
	jmp	SHORT $LN7@HasHandsUp
$LN4@HasHandsUp:

; 1073 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN3@HasHandsUp
	xor	eax, eax
	jmp	SHORT $LN7@HasHandsUp
$LN3@HasHandsUp:

; 1074 : 	if(m_pPed->Tasks->pdwJumpJetPack == NULL) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN2@HasHandsUp
	xor	eax, eax
	jmp	SHORT $LN7@HasHandsUp
$LN2@HasHandsUp:

; 1075 : 	DWORD dwJmpVtbl = m_pPed->Tasks->pdwJumpJetPack[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _dwJmpVtbl$[ebp], eax

; 1076 : 	if(dwJmpVtbl == 0x85A29C) return TRUE;

	cmp	DWORD PTR _dwJmpVtbl$[ebp], 8757916	; 0085a29cH
	jne	SHORT $LN1@HasHandsUp
	mov	eax, 1
	jmp	SHORT $LN7@HasHandsUp
$LN1@HasHandsUp:

; 1077 : 	
; 1078 : 	return FALSE;

	xor	eax, eax
$LN7@HasHandsUp:

; 1079 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?HasHandsUp@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::HasHandsUp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?HandsUp@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?HandsUp@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::HandsUp, COMDAT
; _this$ = ecx

; 1060 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1061 : 	if(!m_pPed || IN_VEHICLE(m_pPed)) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@HandsUp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN4@HandsUp
$LN3@HandsUp:
	jmp	SHORT $LN5@HandsUp
$LN4@HandsUp:

; 1062 : 	if(!IsAdded()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAdded@CEntity@@QAEHXZ		; CEntity::IsAdded
	test	eax, eax
	jne	SHORT $LN2@HandsUp
	jmp	SHORT $LN5@HandsUp
$LN2@HandsUp:

; 1063 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN1@HandsUp
	jmp	SHORT $LN5@HandsUp
$LN1@HandsUp:

; 1064 : 	ScriptCommand(&actor_task_handsup,m_dwGTAId,-2);

	push	-2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _actor_task_handsup
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN5@HandsUp:

; 1065 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?HandsUp@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::HandsUp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetDanceAnimForMove@CPlayerPed@@QAEPADH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iMove$ = 8						; size = 4
?GetDanceAnimForMove@CPlayerPed@@QAEPADH@Z PROC		; CPlayerPed::GetDanceAnimForMove, COMDAT
; _this$ = ecx

; 1790 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1791 : 	if(!m_iDanceState) return ""; // shouldn't ever happen but..

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN6@GetDanceAn
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN7@GetDanceAn
$LN6@GetDanceAn:

; 1792 : 
; 1793 : 	// style 0-2 have the same anim names, but M/F versions
; 1794 : 	if(m_iDanceStyle >= 0 && m_iDanceStyle <= 2) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jl	SHORT $LN5@GetDanceAn
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 2
	jg	SHORT $LN5@GetDanceAn

; 1795 : 		if(GetPedStat() == 5 || GetPedStat() == 22) { // female or pro (only female types)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPedStat@CPlayerPed@@QAEHXZ		; CPlayerPed::GetPedStat
	cmp	eax, 5
	je	SHORT $LN3@GetDanceAn
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPedStat@CPlayerPed@@QAEHXZ		; CPlayerPed::GetPedStat
	cmp	eax, 22					; 00000016H
	jne	SHORT $LN4@GetDanceAn
$LN3@GetDanceAn:

; 1796 : 			return szDanceAnimNamesFemale[iMove];

	mov	eax, DWORD PTR _iMove$[ebp]
	shl	eax, 4
	add	eax, OFFSET ?szDanceAnimNamesFemale@@3PAY0BA@DA ; szDanceAnimNamesFemale
	jmp	SHORT $LN7@GetDanceAn
$LN4@GetDanceAn:

; 1797 : 		}
; 1798 : 		return szDanceAnimNamesMale[iMove];

	mov	eax, DWORD PTR _iMove$[ebp]
	shl	eax, 4
	add	eax, OFFSET ?szDanceAnimNamesMale@@3PAY0BA@DA ; szDanceAnimNamesMale
	jmp	SHORT $LN7@GetDanceAn
	jmp	SHORT $LN2@GetDanceAn
$LN5@GetDanceAn:

; 1799 : 	} else if(m_iDanceStyle == 3) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 3
	jne	SHORT $LN2@GetDanceAn

; 1800 : 		return szStripAnims[iMove];

	mov	eax, DWORD PTR _iMove$[ebp]
	shl	eax, 4
	add	eax, OFFSET ?szStripAnims@@3PAY0BA@DA	; szStripAnims
	jmp	SHORT $LN7@GetDanceAn
$LN2@GetDanceAn:

; 1801 : 	}
; 1802 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN7@GetDanceAn:

; 1803 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetDanceAnimForMove@CPlayerPed@@QAEPADH@Z ENDP		; CPlayerPed::GetDanceAnimForMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ProcessDancing@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_szAnimName$ = -80					; size = 4
_iExtra$ = -68						; size = 4
_sLeftRight$ = -56					; size = 2
_sUpDown$ = -44						; size = 2
_iNewMove$ = -32					; size = 4
_pPlayerControls$ = -20					; size = 4
_this$ = -8						; size = 4
?ProcessDancing@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::ProcessDancing, COMDAT
; _this$ = ecx

; 1736 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1737 : 	GTA_CONTROLSET *pPlayerControls;
; 1738 : 	int iNewMove=0;

	mov	DWORD PTR _iNewMove$[ebp], 0

; 1739 : 
; 1740 : 	if(!m_iDanceState) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN40@ProcessDan
	jmp	$LN41@ProcessDan
$LN40@ProcessDan:

; 1741 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN39@ProcessDan
	jmp	$LN41@ProcessDan
$LN39@ProcessDan:

; 1742 : 	if(!IsAdded()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAdded@CEntity@@QAEHXZ		; CEntity::IsAdded
	test	eax, eax
	jne	SHORT $LN38@ProcessDan
	jmp	$LN41@ProcessDan
$LN38@ProcessDan:

; 1743 : 	
; 1744 : 	if(!m_bytePlayerNumber) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN37@ProcessDan

; 1745 : 		pPlayerControls = GameGetInternalKeys();

	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	DWORD PTR _pPlayerControls$[ebp], eax

; 1746 : 	} else {

	jmp	SHORT $LN36@ProcessDan
$LN37@ProcessDan:

; 1747 : 		pPlayerControls = GameGetPlayerKeys(m_bytePlayerNumber);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	call	?GameGetPlayerKeys@@YAPAU_GTA_CONTROLSET@@H@Z ; GameGetPlayerKeys
	add	esp, 4
	mov	DWORD PTR _pPlayerControls$[ebp], eax
$LN36@ProcessDan:

; 1748 : 	}
; 1749 : 
; 1750 : 	short sUpDown = (short)pPlayerControls->wKeys2[1];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pPlayerControls$[ebp]
	mov	dx, WORD PTR [ecx+eax+48]
	mov	WORD PTR _sUpDown$[ebp], dx

; 1751 : 	short sLeftRight = (short)pPlayerControls->wKeys2[0];

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pPlayerControls$[ebp]
	mov	ax, WORD PTR [edx+ecx+48]
	mov	WORD PTR _sLeftRight$[ebp], ax

; 1752 : 
; 1753 : 	if(!IsPerformingCustomAnim()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPerformingCustomAnim@CPlayerPed@@QAEHXZ ; CPlayerPed::IsPerformingCustomAnim
	test	eax, eax
	jne	SHORT $LN35@ProcessDan

; 1754 : 		ApplyAnimation(DanceIdleLoops[m_iDanceStyle],DanceStyleLibs[m_iDanceStyle],4.0,1,0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 4
	add	ecx, OFFSET ?DanceStyleLibs@@3PAY0BA@DA	; DanceStyleLibs
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 4
	add	eax, OFFSET ?DanceIdleLoops@@3PAY0BA@DA	; DanceIdleLoops
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation
$LN35@ProcessDan:

; 1755 : 	}
; 1756 : 
; 1757 : 	int iExtra = pPlayerControls->wKeys1[16];

	mov	eax, 2
	shl	eax, 4
	mov	ecx, DWORD PTR _pPlayerControls$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	mov	DWORD PTR _iExtra$[ebp], edx

; 1758 : 	
; 1759 : 	if(sUpDown > 0 && !sLeftRight && !iExtra) iNewMove = 0; // UP

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jle	SHORT $LN34@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jne	SHORT $LN34@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	jne	SHORT $LN34@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 0
	jmp	$LN3@ProcessDan
$LN34@ProcessDan:

; 1760 : 	else if(sUpDown < 0 && !sLeftRight && !iExtra) iNewMove = 1; // DOWN

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jge	SHORT $LN32@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jne	SHORT $LN32@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	jne	SHORT $LN32@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 1
	jmp	$LN3@ProcessDan
$LN32@ProcessDan:

; 1761 : 	else if(!sUpDown && sLeftRight < 0 && !iExtra) iNewMove = 2; // LEFT

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jne	SHORT $LN30@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jge	SHORT $LN30@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	jne	SHORT $LN30@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 2
	jmp	$LN3@ProcessDan
$LN30@ProcessDan:

; 1762 : 	else if(!sUpDown && sLeftRight > 0 && !iExtra) iNewMove = 3; // RIGHT

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jne	SHORT $LN28@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jle	SHORT $LN28@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	jne	SHORT $LN28@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 3
	jmp	$LN3@ProcessDan
$LN28@ProcessDan:

; 1763 : 	else if(sUpDown > 0 && sLeftRight < 0 && !iExtra) iNewMove = 4; // UP-LEFT

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jle	SHORT $LN26@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jge	SHORT $LN26@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	jne	SHORT $LN26@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 4
	jmp	$LN3@ProcessDan
$LN26@ProcessDan:

; 1764 : 	else if(sUpDown > 0 && sLeftRight > 0 && !iExtra) iNewMove = 5; // UP-RIGHT

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jle	SHORT $LN24@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jle	SHORT $LN24@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	jne	SHORT $LN24@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 5
	jmp	$LN3@ProcessDan
$LN24@ProcessDan:

; 1765 : 	else if(sUpDown < 0 && sLeftRight < 0 && !iExtra) iNewMove = 6; // DOWN-LEFT

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jge	SHORT $LN22@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jge	SHORT $LN22@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	jne	SHORT $LN22@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 6
	jmp	$LN3@ProcessDan
$LN22@ProcessDan:

; 1766 : 	else if(sUpDown < 0 && sLeftRight > 0 && !iExtra) iNewMove = 7; // DOWN-RIGHT

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jge	SHORT $LN20@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jle	SHORT $LN20@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	jne	SHORT $LN20@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 7
	jmp	$LN3@ProcessDan
$LN20@ProcessDan:

; 1767 : 	else if(sUpDown > 0 && !sLeftRight && iExtra) iNewMove = 8; // UP/EX

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jle	SHORT $LN18@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jne	SHORT $LN18@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	je	SHORT $LN18@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 8
	jmp	$LN3@ProcessDan
$LN18@ProcessDan:

; 1768 : 	else if(sUpDown < 0 && !sLeftRight && iExtra) iNewMove = 9; // DOWN/EX

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jge	SHORT $LN16@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jne	SHORT $LN16@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	je	SHORT $LN16@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 9
	jmp	$LN3@ProcessDan
$LN16@ProcessDan:

; 1769 : 	else if(!sUpDown && sLeftRight < 0 && iExtra) iNewMove = 10; // LEFT/EX

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jne	SHORT $LN14@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jge	SHORT $LN14@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	je	SHORT $LN14@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 10		; 0000000aH
	jmp	$LN3@ProcessDan
$LN14@ProcessDan:

; 1770 : 	else if(!sUpDown && sLeftRight > 0 && iExtra) iNewMove = 11; // RIGHT/EX

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jne	SHORT $LN12@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jle	SHORT $LN12@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	je	SHORT $LN12@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 11		; 0000000bH
	jmp	SHORT $LN3@ProcessDan
$LN12@ProcessDan:

; 1771 : 	else if(sUpDown > 0 && sLeftRight < 0 && iExtra) iNewMove = 12; // UP-LEFT/EX

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jle	SHORT $LN10@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jge	SHORT $LN10@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	je	SHORT $LN10@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 12		; 0000000cH
	jmp	SHORT $LN3@ProcessDan
$LN10@ProcessDan:

; 1772 : 	else if(sUpDown > 0 && sLeftRight > 0 && iExtra) iNewMove = 13; // UP-RIGHT/EX

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jle	SHORT $LN8@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jle	SHORT $LN8@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	je	SHORT $LN8@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 13		; 0000000dH
	jmp	SHORT $LN3@ProcessDan
$LN8@ProcessDan:

; 1773 : 	else if(sUpDown < 0 && sLeftRight < 0 && iExtra) iNewMove = 14; // DOWN-LEFT/EX

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jge	SHORT $LN6@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jge	SHORT $LN6@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	je	SHORT $LN6@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 14		; 0000000eH
	jmp	SHORT $LN3@ProcessDan
$LN6@ProcessDan:

; 1774 : 	else if(sUpDown < 0 && sLeftRight > 0 && iExtra) iNewMove = 15; // DOWN-RIGHT/EX

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jge	SHORT $LN4@ProcessDan
	movsx	eax, WORD PTR _sLeftRight$[ebp]
	test	eax, eax
	jle	SHORT $LN4@ProcessDan
	cmp	DWORD PTR _iExtra$[ebp], 0
	je	SHORT $LN4@ProcessDan
	mov	DWORD PTR _iNewMove$[ebp], 15		; 0000000fH

; 1775 : 	else return;

	jmp	SHORT $LN3@ProcessDan
$LN4@ProcessDan:
	jmp	SHORT $LN41@ProcessDan
$LN3@ProcessDan:

; 1776 : 
; 1777 : 	if(iNewMove == m_iLastDanceMove) return; // don't allow the same move twice

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iNewMove$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN2@ProcessDan
	jmp	SHORT $LN41@ProcessDan
$LN2@ProcessDan:

; 1778 : 
; 1779 : 	m_iLastDanceMove = iNewMove;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iNewMove$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 1780 : 
; 1781 : 	char * szAnimName = GetDanceAnimForMove(iNewMove);

	mov	eax, DWORD PTR _iNewMove$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDanceAnimForMove@CPlayerPed@@QAEPADH@Z ; CPlayerPed::GetDanceAnimForMove
	mov	DWORD PTR _szAnimName$[ebp], eax

; 1782 : 	if(!szAnimName) return;

	cmp	DWORD PTR _szAnimName$[ebp], 0
	jne	SHORT $LN1@ProcessDan
	jmp	SHORT $LN41@ProcessDan
$LN1@ProcessDan:

; 1783 : 
; 1784 : 	ApplyAnimation(szAnimName,DanceStyleLibs[m_iDanceStyle],4.0,0,0,0,0,0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 4
	add	ecx, OFFSET ?DanceStyleLibs@@3PAY0BA@DA	; DanceStyleLibs
	push	ecx
	mov	edx, DWORD PTR _szAnimName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation
$LN41@ProcessDan:

; 1785 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessDancing@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::ProcessDancing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsDancing@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsDancing@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsDancing, COMDAT
; _this$ = ecx

; 1728 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1729 : 	if(m_iDanceState) return TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@IsDancing
	mov	eax, 1
	jmp	SHORT $LN2@IsDancing
$LN1@IsDancing:

; 1730 : 	return FALSE;

	xor	eax, eax
$LN2@IsDancing:

; 1731 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDancing@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsDancing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?StopDancing@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_mat$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?StopDancing@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::StopDancing, COMDAT
; _this$ = ecx

; 1718 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1719 : 	m_iDanceState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1720 : 	MATRIX4X4 mat;
; 1721 : 	GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 1722 : 	TeleportTo(mat.pos.X,mat.pos.Y,mat.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo

; 1723 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@StopDancin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@StopDancin:
	DD	1
	DD	$LN4@StopDancin
$LN4@StopDancin:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN3@StopDancin
$LN3@StopDancin:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?StopDancing@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::StopDancing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?StartDancing@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iStyle$ = 8						; size = 4
?StartDancing@CPlayerPed@@QAEXH@Z PROC			; CPlayerPed::StartDancing, COMDAT
; _this$ = ecx

; 1701 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1702 : 	if(iStyle < 0 || iStyle > 3) return;

	cmp	DWORD PTR _iStyle$[ebp], 0
	jl	SHORT $LN1@StartDanci
	cmp	DWORD PTR _iStyle$[ebp], 3
	jle	SHORT $LN2@StartDanci
$LN1@StartDanci:
	jmp	SHORT $LN3@StartDanci
$LN2@StartDanci:

; 1703 : 
; 1704 : 	/* if(iStyle == 3 && GetPedStat() != 5 && GetPedStat() != 22) {
; 1705 : 		// stops male stripping
; 1706 : 		return;
; 1707 : 	}*/
; 1708 : 
; 1709 : 	m_iDanceState = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 1

; 1710 : 	m_iDanceStyle = iStyle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iStyle$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1711 : 	
; 1712 : 	ApplyAnimation(DanceIdleLoops[m_iDanceStyle],DanceStyleLibs[m_iDanceStyle],16.0,1,0,0,0,-1);

	push	-1
	push	0
	push	0
	push	0
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 4
	add	ecx, OFFSET ?DanceStyleLibs@@3PAY0BA@DA	; DanceStyleLibs
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shl	eax, 4
	add	eax, OFFSET ?DanceIdleLoops@@3PAY0BA@DA	; DanceIdleLoops
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation
$LN3@StartDanci:

; 1713 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?StartDancing@CPlayerPed@@QAEXH@Z ENDP			; CPlayerPed::StartDancing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetPedStat@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPedStat@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::GetPedStat, COMDAT
; _this$ = ecx

; 1655 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1656 : 	if(!m_pPed) return -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@GetPedStat
	or	eax, -1
	jmp	SHORT $LN2@GetPedStat
$LN1@GetPedStat:

; 1657 : 	return Game_PedStatPrim(m_pPed->entity.nModelIndex);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movzx	edx, WORD PTR [ecx+34]
	push	edx
	call	?Game_PedStatPrim@@YAHH@Z		; Game_PedStatPrim
	add	esp, 4
$LN2@GetPedStat:

; 1658 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPedStat@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::GetPedStat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?CheckVehicleParachute@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CheckVehicleParachute@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::CheckVehicleParachute, COMDAT
; _this$ = ecx

; 1432 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1433 : 	if(m_dwParachuteObject)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+41], 0
	je	SHORT $LN1@CheckVehic

; 1434 : 	{
; 1435 : 		ScriptCommand(&disassociate_object,m_dwParachuteObject,0.0f,0.0f,0.0f,0);

	push	0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _disassociate_object
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 1436 : 		ScriptCommand(&destroy_object,m_dwParachuteObject);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _destroy_object
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 1437 : 		m_dwParachuteObject = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41], 0
$LN1@CheckVehic:

; 1438 : 	}
; 1439 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckVehicleParachute@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::CheckVehicleParachute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ProcessParachuting@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_sUpDown$ = -32						; size = 2
_pPlayerControls$ = -20					; size = 4
_this$ = -8						; size = 4
?ProcessParachuting@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ProcessParachuting, COMDAT
; _this$ = ecx

; 1551 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1552 : 	GTA_CONTROLSET *pPlayerControls = GameGetPlayerKeys(m_bytePlayerNumber);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	call	?GameGetPlayerKeys@@YAPAU_GTA_CONTROLSET@@H@Z ; GameGetPlayerKeys
	add	esp, 4
	mov	DWORD PTR _pPlayerControls$[ebp], eax

; 1553 : 	short sUpDown = (short)pPlayerControls->wKeys1[1];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pPlayerControls$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _sUpDown$[ebp], dx

; 1554 : 
; 1555 : 	if((sUpDown > 0) && (m_iParachuteAnim != PARA_DECEL)) {

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jle	SHORT $LN3@ProcessPar
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+45], 3
	je	SHORT $LN3@ProcessPar

; 1556 : 		ApplyAnimation("PARA_DECEL","PARACHUTE",1.0f,1,0,0,1,-2);

	push	-2					; fffffffeH
	push	1
	push	0
	push	0
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	push	OFFSET ??_C@_0L@FGFGOKMG@PARA_DECEL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation

; 1557 : 		ScriptCommand(&apply_object_animation,m_dwParachuteObject,"PARA_DECEL_O","PARACHUTE",1.0f,1,1);

	push	1
	push	1
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	push	OFFSET ??_C@_0N@MNHOBHLP@PARA_DECEL_O?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _apply_object_animation
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H

; 1558 : 		m_iParachuteAnim = PARA_DECEL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 3
	jmp	SHORT $LN1@ProcessPar
$LN3@ProcessPar:

; 1559 : 	}
; 1560 : 	else if((sUpDown <= 0) && (m_iParachuteAnim != PARA_FLOAT)) {

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jg	SHORT $LN1@ProcessPar
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+45], 4
	je	SHORT $LN1@ProcessPar

; 1561 : 		ApplyAnimation("PARA_FLOAT","PARACHUTE",1.0f,1,0,0,1,-2);

	push	-2					; fffffffeH
	push	1
	push	0
	push	0
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	push	OFFSET ??_C@_0L@NJEKKGIB@PARA_FLOAT?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation

; 1562 : 		ScriptCommand(&apply_object_animation,m_dwParachuteObject,"PARA_FLOAT_O","PARACHUTE",1.0f,1,1);

	push	1
	push	1
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	push	OFFSET ??_C@_0N@NCMEMNK@PARA_FLOAT_O?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _apply_object_animation
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H

; 1563 : 		m_iParachuteAnim = PARA_FLOAT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 4
$LN1@ProcessPar:

; 1564 : 	}
; 1565 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessParachuting@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ProcessParachuting
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ProcessParachuteSkydiving@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_mat$ = -108						; size = 64
_sUpDown$ = -36						; size = 2
_pPlayerControls$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcessParachuteSkydiving@CPlayerPed@@QAEXXZ PROC	; CPlayerPed::ProcessParachuteSkydiving, COMDAT
; _this$ = ecx

; 1504 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1505 : 	GTA_CONTROLSET *pPlayerControls = GameGetPlayerKeys(m_bytePlayerNumber);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	call	?GameGetPlayerKeys@@YAPAU_GTA_CONTROLSET@@H@Z ; GameGetPlayerKeys
	add	esp, 4
	mov	DWORD PTR _pPlayerControls$[ebp], eax

; 1506 : 	short sUpDown = (short)pPlayerControls->wKeys1[1];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pPlayerControls$[ebp]
	mov	dx, WORD PTR [ecx+eax]
	mov	WORD PTR _sUpDown$[ebp], dx

; 1507 : 	MATRIX4X4 mat;
; 1508 : 
; 1509 : 	if((sUpDown < 0) && (m_iParachuteAnim != FALL_SKYDIVE_ACCEL)) {

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jge	SHORT $LN7@ProcessPar
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+45], 2
	je	SHORT $LN7@ProcessPar

; 1510 : 		ApplyAnimation("FALL_SKYDIVE_ACCEL","PARACHUTE",1.0f,1,0,0,1,-2);

	push	-2					; fffffffeH
	push	1
	push	0
	push	0
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	push	OFFSET ??_C@_0BD@FCOONAEM@FALL_SKYDIVE_ACCEL?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation

; 1511 : 		m_iParachuteAnim = FALL_SKYDIVE_ACCEL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 2
	jmp	SHORT $LN5@ProcessPar
$LN7@ProcessPar:

; 1512 : 	}
; 1513 : 	else if((sUpDown >= 0) && (m_iParachuteAnim != FALL_SKYDIVE)) {

	movsx	eax, WORD PTR _sUpDown$[ebp]
	test	eax, eax
	jl	SHORT $LN5@ProcessPar
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+45], 1
	je	SHORT $LN5@ProcessPar

; 1514 : 		ApplyAnimation("FALL_SKYDIVE","PARACHUTE",1.0f,1,0,0,1,-2);

	push	-2					; fffffffeH
	push	1
	push	0
	push	0
	push	1
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	push	OFFSET ??_C@_0N@KLGOGCNA@FALL_SKYDIVE?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation

; 1515 : 		m_iParachuteAnim = FALL_SKYDIVE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 1
$LN5@ProcessPar:

; 1516 : 	}
; 1517 : 
; 1518 : 	// if the parachute object isn't created, do it now.
; 1519 : 	if(!m_dwParachuteObject) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+41], 0
	jne	$LN4@ProcessPar

; 1520 : 		GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 1521 : 		ScriptCommand(&create_object,OBJECT_PARACHUTE,mat.pos.X,mat.pos.Y,mat.pos.Z,&m_dwParachuteObject);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 41					; 00000029H
	push	eax
	cvtss2sd xmm0, DWORD PTR _mat$[ebp+56]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _mat$[ebp+52]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _mat$[ebp+48]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	3131					; 00000c3bH
	push	OFFSET _create_object
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 1522 : 		
; 1523 : 		if(!GamePool_Object_GetAt(m_dwParachuteObject)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	call	?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z ; GamePool_Object_GetAt
	test	eax, eax
	jne	SHORT $LN3@ProcessPar

; 1524 : 			m_dwParachuteObject = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41], 0

; 1525 : 			return;

	jmp	$LN8@ProcessPar
$LN3@ProcessPar:

; 1526 : 		}
; 1527 : 
; 1528 : 		ScriptCommand(&attach_object_to_actor,m_dwParachuteObject,m_dwGTAId,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+41]
	push	eax
	push	OFFSET _attach_object_to_actor
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 60					; 0000003cH

; 1529 : 		ScriptCommand(&set_object_visible,m_dwParachuteObject,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _set_object_visible
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN4@ProcessPar:

; 1530 : 	}
; 1531 : 
; 1532 : 	if(!GamePool_Object_GetAt(m_dwParachuteObject)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	call	?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z ; GamePool_Object_GetAt
	test	eax, eax
	jne	SHORT $LN2@ProcessPar

; 1533 : 		m_dwParachuteObject = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41], 0

; 1534 : 		return;

	jmp	$LN8@ProcessPar
$LN2@ProcessPar:

; 1535 : 	}
; 1536 : 
; 1537 : 	// process parachute opening event
; 1538 : 	if(pPlayerControls->wKeys1[17]) {

	mov	eax, 2
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _pPlayerControls$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	$LN1@ProcessPar

; 1539 : 		ApplyAnimation("PARA_OPEN","PARACHUTE",8.0f,0,0,0,1,-2);

	push	-2					; fffffffeH
	push	1
	push	0
	push	0
	push	0
	push	ecx
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	push	OFFSET ??_C@_09GNCKNLEL@PARA_OPEN?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ; CPlayerPed::ApplyAnimation

; 1540 : 		ScriptCommand(&apply_object_animation,m_dwParachuteObject,"PARA_OPEN_O","PARACHUTE",1000.0f,0,1);

	push	1
	push	0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	push	OFFSET ??_C@_0M@BCINMKPP@PARA_OPEN_O?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _apply_object_animation
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H

; 1541 : 		ScriptCommand(&set_object_visible,m_dwParachuteObject,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _set_object_visible
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 1542 : 		ScriptCommand(&set_object_scaling,m_dwParachuteObject,1.0f);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _set_object_scaling
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H

; 1543 : 		m_iParachuteState = 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+37], 2

; 1544 : 		m_iParachuteAnim = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 0
$LN1@ProcessPar:
$LN8@ProcessPar:

; 1545 : 	}
; 1546 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ProcessPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@ProcessPar:
	DD	1
	DD	$LN11@ProcessPar
$LN11@ProcessPar:
	DD	-108					; ffffff94H
	DD	64					; 00000040H
	DD	$LN10@ProcessPar
$LN10@ProcessPar:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?ProcessParachuteSkydiving@CPlayerPed@@QAEXXZ ENDP	; CPlayerPed::ProcessParachuteSkydiving
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ProcessParachutes@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_mat$1 = -96						; size = 64
_fDistanceFromGround$2 = -24				; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?ProcessParachutes@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ProcessParachutes, COMDAT
; _this$ = ecx

; 1444 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1445 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN12@ProcessPar
	jmp	$LN13@ProcessPar
$LN12@ProcessPar:

; 1446 : 	if(!IsAdded()) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAdded@CEntity@@QAEHXZ		; CEntity::IsAdded
	test	eax, eax
	jne	SHORT $LN11@ProcessPar
	jmp	$LN13@ProcessPar
$LN11@ProcessPar:

; 1447 : 
; 1448 : 	if(m_iParachuteState == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+37], 0
	jne	$LN10@ProcessPar

; 1449 : 
; 1450 : 		if(m_dwParachuteObject) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+41], 0
	je	SHORT $LN9@ProcessPar

; 1451 : 			ScriptCommand(&disassociate_object,m_dwParachuteObject,0.0f,0.0f,0.0f,0);

	push	0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _disassociate_object
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 1452 : 			ScriptCommand(&destroy_object_with_fade,m_dwParachuteObject);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _destroy_object_with_fade
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 1453 : 			m_dwParachuteObject = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41], 0
$LN9@ProcessPar:

; 1454 : 		}
; 1455 : 
; 1456 : 		// See if we should enter the initial parachuting state.
; 1457 : 		if(GetCurrentWeapon() == WEAPON_PARACHUTE) { // armed with para

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	movzx	eax, al
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN6@ProcessPar

; 1458 : 			if(ScriptCommand(&is_actor_falling_think,m_dwGTAId)) { // is falling

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _is_actor_falling_think
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ProcessPar

; 1459 : 
; 1460 : 				float fDistanceFromGround;
; 1461 : 
; 1462 : 				ScriptCommand(&get_actor_distance_from_ground,m_dwGTAId,&fDistanceFromGround);

	lea	eax, DWORD PTR _fDistanceFromGround$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _get_actor_distance_from_ground
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 1463 : 				if(fDistanceFromGround > 20.0f) {

	movss	xmm0, DWORD PTR _fDistanceFromGround$2[ebp]
	comiss	xmm0, DWORD PTR __real@41a00000
	jbe	SHORT $LN6@ProcessPar

; 1464 : 					//ScriptCommand(&actor_set_collision,m_dwGTAId,0);
; 1465 : 					m_iParachuteState = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+37], 1

; 1466 : 					m_iParachuteAnim = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 0
$LN6@ProcessPar:

; 1467 : 				}
; 1468 : 			}
; 1469 : 		}
; 1470 : 		return;

	jmp	$LN13@ProcessPar
$LN10@ProcessPar:

; 1471 : 	}
; 1472 : 	
; 1473 : 	if( (GetCurrentWeapon() != WEAPON_PARACHUTE) || 
; 1474 : 		ScriptCommand(&is_actor_in_the_water,m_dwGTAId) ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	movzx	eax, al
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN4@ProcessPar
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _is_actor_in_the_water
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8
	test	eax, eax
	je	$LN5@ProcessPar
$LN4@ProcessPar:

; 1475 : 		// A parachuting state is active, but they no longer have the parachute
; 1476 : 		// or they've ended up in the water.
; 1477 : 		if(m_dwParachuteObject) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+41], 0
	je	$LN3@ProcessPar

; 1478 : 			MATRIX4X4 mat;
; 1479 : 			ScriptCommand(&disassociate_object,m_dwParachuteObject,0.0f,0.0f,0.0f,0);

	push	0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _disassociate_object
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 1480 : 			ScriptCommand(&destroy_object_with_fade,m_dwParachuteObject);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _destroy_object_with_fade
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 1481 : 			//ScriptCommand(&actor_set_collision,m_dwGTAId,1);
; 1482 : 			GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 1483 : 			TeleportTo(mat.pos.X,mat.pos.Y,mat.pos.Z);						

	push	ecx
	movss	xmm0, DWORD PTR _mat$1[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$1[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$1[ebp+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo

; 1484 : 			m_dwParachuteObject = 0;			

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41], 0
$LN3@ProcessPar:

; 1485 : 		}
; 1486 : 		m_iParachuteState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+37], 0

; 1487 : 		m_iParachuteAnim = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 0
$LN5@ProcessPar:

; 1488 : 	}		
; 1489 : 
; 1490 : 	if(m_iParachuteState == 1) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+37], 1
	jne	SHORT $LN2@ProcessPar

; 1491 : 		ProcessParachuteSkydiving();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessParachuteSkydiving@CPlayerPed@@QAEXXZ ; CPlayerPed::ProcessParachuteSkydiving

; 1492 : 		return;

	jmp	SHORT $LN13@ProcessPar
$LN2@ProcessPar:

; 1493 : 	}
; 1494 : 	
; 1495 : 	if(m_iParachuteState == 2) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+37], 2
	jne	SHORT $LN1@ProcessPar

; 1496 : 		ProcessParachuting();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessParachuting@CPlayerPed@@QAEXXZ	; CPlayerPed::ProcessParachuting
$LN1@ProcessPar:
$LN13@ProcessPar:

; 1497 : 		return;
; 1498 : 	}	
; 1499 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@ProcessPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@ProcessPar:
	DD	2
	DD	$LN17@ProcessPar
$LN17@ProcessPar:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@ProcessPar
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN16@ProcessPar
$LN16@ProcessPar:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN15@ProcessPar:
	DB	102					; 00000066H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	71					; 00000047H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
?ProcessParachutes@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ProcessParachutes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsPerformingCustomAnim@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsPerformingCustomAnim@CPlayerPed@@QAEHXZ PROC		; CPlayerPed::IsPerformingCustomAnim, COMDAT
; _this$ = ecx

; 1663 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1664 : 	if(!m_pPed) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@IsPerformi
	xor	eax, eax
	jmp	SHORT $LN4@IsPerformi
$LN3@IsPerformi:

; 1665 : 	if(!IsAdded()) return FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsAdded@CEntity@@QAEHXZ		; CEntity::IsAdded
	test	eax, eax
	jne	SHORT $LN2@IsPerformi
	xor	eax, eax
	jmp	SHORT $LN4@IsPerformi
$LN2@IsPerformi:

; 1666 : 
; 1667 : 	if(m_pPed->Tasks->pdwJumpJetPack) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@IsPerformi

; 1668 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@IsPerformi
$LN1@IsPerformi:

; 1669 : 	}
; 1670 : 
; 1671 : 	return FALSE;

	xor	eax, eax
$LN4@IsPerformi:

; 1672 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsPerformingCustomAnim@CPlayerPed@@QAEHXZ ENDP		; CPlayerPed::IsPerformingCustomAnim
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ProcessVehicleHorn@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_pGtaVehicle$ = -32					; size = 4
_pPlayerControls$ = -20					; size = 4
_this$ = -8						; size = 4
?ProcessVehicleHorn@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ProcessVehicleHorn, COMDAT
; _this$ = ecx

; 1936 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN8@ProcessVeh
	jmp	$LN9@ProcessVeh
$LN8@ProcessVeh:

; 1938 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN7@ProcessVeh
	jmp	$LN9@ProcessVeh
$LN7@ProcessVeh:

; 1939 : 
; 1940 : 	GTA_CONTROLSET *pPlayerControls;
; 1941 : 
; 1942 : 	if(!m_bytePlayerNumber) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN6@ProcessVeh

; 1943 : 		pPlayerControls = GameGetInternalKeys();

	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	DWORD PTR _pPlayerControls$[ebp], eax

; 1944 : 	} else {

	jmp	SHORT $LN5@ProcessVeh
$LN6@ProcessVeh:

; 1945 : 		pPlayerControls = GameGetPlayerKeys(m_bytePlayerNumber);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	call	?GameGetPlayerKeys@@YAPAU_GTA_CONTROLSET@@H@Z ; GameGetPlayerKeys
	add	esp, 4
	mov	DWORD PTR _pPlayerControls$[ebp], eax
$LN5@ProcessVeh:

; 1946 : 	}
; 1947 : 
; 1948 : 	VEHICLE_TYPE *pGtaVehicle = (VEHICLE_TYPE *)m_pPed->pVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1420]
	mov	DWORD PTR _pGtaVehicle$[ebp], edx

; 1949 : 
; 1950 : 	if(pGtaVehicle) {

	cmp	DWORD PTR _pGtaVehicle$[ebp], 0
	je	SHORT $LN9@ProcessVeh

; 1951 : 		if(IN_VEHICLE(m_pPed) && (pGtaVehicle->pDriver == m_pPed)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN9@ProcessVeh
	mov	eax, DWORD PTR _pGtaVehicle$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+1120]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN9@ProcessVeh

; 1952 : 			if(pPlayerControls->wKeys1[18]) {

	mov	eax, 2
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _pPlayerControls$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN2@ProcessVeh

; 1953 :                 //pGtaVehicle->byteHorn = 1;
; 1954 : 				pGtaVehicle->byteHorn2 = 1;

	mov	eax, DWORD PTR _pGtaVehicle$[ebp]
	mov	BYTE PTR [eax+1300], 1

; 1955 : 			} else {

	jmp	SHORT $LN9@ProcessVeh
$LN2@ProcessVeh:

; 1956 : 				//pGtaVehicle->byteHorn = 0;
; 1957 : 				pGtaVehicle->byteHorn2 = 0;

	mov	eax, DWORD PTR _pGtaVehicle$[ebp]
	mov	BYTE PTR [eax+1300], 0
$LN9@ProcessVeh:

; 1958 : 			}
; 1959 : 		}
; 1960 : 	}
; 1961 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessVehicleHorn@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ProcessVehicleHorn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ??1CPlayerPed@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CPlayerPed@@UAE@XZ PROC				; CPlayerPed::~CPlayerPed, COMDAT
; _this$ = ecx

; 112  : CPlayerPed::~CPlayerPed(){}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CPlayerPed@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CEntity@@UAE@XZ			; CEntity::~CEntity
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPlayerPed@@UAE@XZ ENDP				; CPlayerPed::~CPlayerPed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ??0CPlayerPed@@QAE@HHMMMME@Z
_TEXT	SEGMENT
_dwPlayerActorID$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_iPlayerNumber$ = 8					; size = 4
_iSkin$ = 12						; size = 4
_fX$ = 16						; size = 4
_fY$ = 20						; size = 4
_fZ$ = 24						; size = 4
_fRotation$ = 28					; size = 4
_byteCreateMarker$ = 32					; size = 1
??0CPlayerPed@@QAE@HHMMMME@Z PROC			; CPlayerPed::CPlayerPed, COMDAT
; _this$ = ecx

; 67   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPlayerPed@@QAE@HHMMMME@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CEntity@@QAE@XZ			; CEntity::CEntity
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CPlayerPed@@6B@

; 68   : 	DWORD dwPlayerActorID=0;

	mov	DWORD PTR _dwPlayerActorID$[ebp], 0

; 69   : 	
; 70   : 	m_pPed=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 71   : 	m_dwGTAId=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 72   : 
; 73   : 	// CREATE PLAYER
; 74   : 	ScriptCommand(&create_player, &iPlayerNumber, fX, fY, fZ, &dwPlayerActorID);

	lea	eax, DWORD PTR _dwPlayerActorID$[ebp]
	push	eax
	cvtss2sd xmm0, DWORD PTR _fZ$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fY$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fX$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _iPlayerNumber$[ebp]
	push	ecx
	push	OFFSET _create_player
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 75   : 	ScriptCommand(&create_actor_from_player,&iPlayerNumber,&dwPlayerActorID);

	lea	eax, DWORD PTR _dwPlayerActorID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iPlayerNumber$[ebp]
	push	ecx
	push	OFFSET _create_actor_from_player
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 76   : 	
; 77   : 	m_dwGTAId = dwPlayerActorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwPlayerActorID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 78   : 	m_pPed = GamePool_Ped_GetAt(m_dwGTAId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax

; 79   : 	m_pEntity = (ENTITY_TYPE *)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+4], edx

; 80   : 
; 81   : 	m_bytePlayerNumber = (BYTE)iPlayerNumber;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _iPlayerNumber$[ebp]
	mov	BYTE PTR [eax+32], cl

; 82   : 	SetPlayerPedPtrRecord(m_bytePlayerNumber,(DWORD)m_pPed);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	push	eax
	call	?SetPlayerPedPtrRecord@@YGXEK@Z		; SetPlayerPedPtrRecord

; 83   : 	ScriptCommand(&set_actor_weapon_droppable,m_dwGTAId,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _set_actor_weapon_droppable
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 84   : 	ScriptCommand(&set_actor_immunities,m_dwGTAId,0,0,1,0,0);

	push	0
	push	0
	push	1
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _set_actor_immunities
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 28					; 0000001cH

; 85   : 
; 86   : 	//ScriptCommand(&set_actor_immunities,m_dwGTAId,0,0,1,1,0); // (0.1b)
; 87   : 	
; 88   : 	SetMoney(pNetGame->m_iDeathDropMoney);

	mov	eax, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoney@CPlayerPed@@QAEXH@Z		; CPlayerPed::SetMoney

; 89   : 
; 90   : 	ResetForRespawn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetForRespawn@CPlayerPed@@QAEXXZ	; CPlayerPed::ResetForRespawn

; 91   : 
; 92   : 	m_dwArrow = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+65], 0

; 93   : 	m_byteCreateMarker = byteCreateMarker;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _byteCreateMarker$[ebp]
	mov	BYTE PTR [eax+69], cl

; 94   : 	if(m_byteCreateMarker) ShowMarker();

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+69]
	test	ecx, ecx
	je	SHORT $LN1@CPlayerPed
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShowMarker@CPlayerPed@@QAEXXZ		; CPlayerPed::ShowMarker
$LN1@CPlayerPed:

; 95   : 
; 96   : 	m_iParachuteAnim = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 0

; 97   : 	m_iParachuteState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+37], 0

; 98   : 	m_dwParachuteObject = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41], 0

; 99   : 	m_iCellPhoneEnabled = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 100  : 
; 101  : 	m_iDanceState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 102  : 
; 103  : 	m_iPissingState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+57], 0

; 104  : 	m_dwPissParticlesHandle = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+61], 0

; 105  : 
; 106  : 	SetModelIndex(iSkin);

	mov	eax, DWORD PTR _iSkin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModelIndex@CPlayerPed@@QAEXI@Z	; CPlayerPed::SetModelIndex

; 107  : 	SetTargetRotation(fRotation);

	push	ecx
	movss	xmm0, DWORD PTR _fRotation$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTargetRotation@CPlayerPed@@QAEXM@Z	; CPlayerPed::SetTargetRotation

; 108  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@CPlayerPed
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	2
$LN8@CPlayerPed:
	DD	1
	DD	$LN7@CPlayerPed
$LN7@CPlayerPed:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@CPlayerPed
$LN5@CPlayerPed:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPlayerPed@@QAE@HHMMMME@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CEntity@@UAE@XZ			; CEntity::~CEntity
__ehhandler$??0CPlayerPed@@QAE@HHMMMME@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPlayerPed@@QAE@HHMMMME@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPlayerPed@@QAE@HHMMMME@Z ENDP			; CPlayerPed::CPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ??0CPlayerPed@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CPlayerPed@@QAE@XZ PROC				; CPlayerPed::CPlayerPed, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CPlayerPed@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CEntity@@QAE@XZ			; CEntity::CEntity
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CPlayerPed@@6B@

; 42   : 	m_dwGTAId = 1; // 0x001

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 43   : 	m_pPed = GamePool_FindPlayerPed();

	call	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ; GamePool_FindPlayerPed
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 44   : 	m_pEntity = (ENTITY_TYPE *)GamePool_FindPlayerPed();

	call	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ; GamePool_FindPlayerPed
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 45   : 	
; 46   : 	m_bytePlayerNumber = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 0

; 47   : 	SetPlayerPedPtrRecord(m_bytePlayerNumber,(DWORD)m_pPed);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+32]
	push	eax
	call	?SetPlayerPedPtrRecord@@YGXEK@Z		; SetPlayerPedPtrRecord

; 48   : 	ScriptCommand(&set_actor_weapon_droppable,m_dwGTAId,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _set_actor_weapon_droppable
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 49   : 
; 50   : 	ResetForRespawn();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetForRespawn@CPlayerPed@@QAEXXZ	; CPlayerPed::ResetForRespawn

; 51   : 
; 52   : 	m_dwArrow = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+65], 0

; 53   : 	m_iParachuteAnim = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+45], 0

; 54   : 	m_iParachuteState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+37], 0

; 55   : 	m_dwParachuteObject = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41], 0

; 56   : 	m_iDanceState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 57   : 	m_iCellPhoneEnabled = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 58   : 
; 59   : 	m_iPissingState = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+57], 0

; 60   : 	m_dwPissParticlesHandle = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+61], 0

; 61   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPlayerPed@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CEntity@@UAE@XZ			; CEntity::~CEntity
__ehhandler$??0CPlayerPed@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CPlayerPed@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CPlayerPed@@QAE@XZ ENDP				; CPlayerPed::CPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsPerformingAnimation@CPlayerPed@@QAEHPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szAnimName$ = 8					; size = 4
?IsPerformingAnimation@CPlayerPed@@QAEHPAD@Z PROC	; CPlayerPed::IsPerformingAnimation, COMDAT
; _this$ = ecx

; 1408 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1409 : 	if(m_pPed && ScriptCommand(&is_actor_performing_anim,m_dwGTAId,szAnimName)) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@IsPerformi
	mov	eax, DWORD PTR _szAnimName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _is_actor_performing_anim
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@IsPerformi

; 1410 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@IsPerformi
$LN1@IsPerformi:

; 1411 : 	}
; 1412 : 	return FALSE;	

	xor	eax, eax
$LN2@IsPerformi:

; 1413 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPerformingAnimation@CPlayerPed@@QAEHPAD@Z ENDP	; CPlayerPed::IsPerformingAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ResetDamageEntity@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ResetDamageEntity@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ResetDamageEntity, COMDAT
; _this$ = ecx

; 1582 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1583 : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@ResetDamag

; 1584 : 		m_pPed->pdwDamageEntity = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+1892], 0

; 1585 : 		m_pPed->dwWeaponUsed = 255;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+1888], 255		; 000000ffH
$LN2@ResetDamag:

; 1586 : 	}
; 1587 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetDamageEntity@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ResetDamageEntity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsOnGround@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsOnGround@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsOnGround, COMDAT
; _this$ = ecx

; 1570 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1571 : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@IsOnGround

; 1572 : 		if(m_pPed->dwStateFlags & 3) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 3
	je	SHORT $LN2@IsOnGround

; 1573 : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@IsOnGround
$LN2@IsOnGround:

; 1574 : 		}
; 1575 : 	}
; 1576 : 	return FALSE;

	xor	eax, eax
$LN3@IsOnGround:

; 1577 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOnGround@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsOnGround
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetInterior@CPlayerPed@@QAEXE@Z
_TEXT	SEGMENT
_mat$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_byteID$ = 8						; size = 1
?SetInterior@CPlayerPed@@QAEXE@Z PROC			; CPlayerPed::SetInterior, COMDAT
; _this$ = ecx

; 1418 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1419 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@SetInterio
	jmp	SHORT $LN2@SetInterio
$LN1@SetInterio:

; 1420 : 
; 1421 : 	ScriptCommand(&select_interior,byteID);

	movzx	eax, BYTE PTR _byteID$[ebp]
	push	eax
	push	OFFSET _select_interior
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 1422 : 	ScriptCommand(&link_actor_to_interior,m_dwGTAId,byteID);

	movzx	eax, BYTE PTR _byteID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _link_actor_to_interior
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 1423 : 
; 1424 : 	MATRIX4X4 mat;
; 1425 : 	GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 1426 : 	ScriptCommand(&refresh_streaming_at,mat.pos.X,mat.pos.Y);

	cvtss2sd xmm0, DWORD PTR _mat$[ebp+52]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _mat$[ebp+48]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET _refresh_streaming_at
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 20					; 00000014H
$LN2@SetInterio:

; 1427 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetInterio
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@SetInterio:
	DD	1
	DD	$LN5@SetInterio
$LN5@SetInterio:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN4@SetInterio
$LN4@SetInterio:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?SetInterior@CPlayerPed@@QAEXE@Z ENDP			; CPlayerPed::SetInterior
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z
_TEXT	SEGMENT
_iWaitAnimLoad$ = -32					; size = 4
_bLoaded$ = -20						; size = 4
_this$ = -8						; size = 4
_szAnimName$ = 8					; size = 4
_szAnimFile$ = 12					; size = 4
_fT$ = 16						; size = 4
_opt1$ = 20						; size = 4
_opt2$ = 24						; size = 4
_opt3$ = 28						; size = 4
_opt4$ = 32						; size = 4
_iUnk$ = 36						; size = 4
?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z PROC	; CPlayerPed::ApplyAnimation, COMDAT
; _this$ = ecx

; 1370 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1371 : 	BOOL bLoaded = FALSE;

	mov	DWORD PTR _bLoaded$[ebp], 0

; 1372 : 	int iWaitAnimLoad=0;

	mov	DWORD PTR _iWaitAnimLoad$[ebp], 0

; 1373 : 
; 1374 : 	
; 1375 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN9@ApplyAnima
	jmp	$LN10@ApplyAnima
$LN9@ApplyAnima:

; 1376 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN8@ApplyAnima
	jmp	$LN10@ApplyAnima
$LN8@ApplyAnima:

; 1377 : 	if(IsPissing()) StopPissing();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsPissing@CPlayerPed@@QAEHXZ		; CPlayerPed::IsPissing
	test	eax, eax
	je	SHORT $LN7@ApplyAnima
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StopPissing@CPlayerPed@@QAEXXZ		; CPlayerPed::StopPissing
$LN7@ApplyAnima:

; 1378 :     
; 1379 : 	// Can't allow 'naughty' anims!
; 1380 : 	if(!stricmp(szAnimFile,"SEX")) return;

	push	OFFSET ??_C@_03DDABINI@SEX?$AA@
	mov	eax, DWORD PTR _szAnimFile$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@ApplyAnima
	jmp	$LN10@ApplyAnima
$LN6@ApplyAnima:

; 1381 : 
; 1382 : #ifdef _DEBUG
; 1383 : 	//if(pChatWindow) pChatWindow->AddDebugMessage("Anim(%s,%s,%f,%d,%d,%d,%d,%d)",
; 1384 : 		//szAnimName,szAnimFile,fT,opt1,opt2,opt3,opt4,iUnk);
; 1385 : #endif
; 1386 : 
; 1387 : 	if (!pGame->IsAnimationLoaded(szAnimFile)) {

	mov	eax, DWORD PTR _szAnimFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN5@ApplyAnima

; 1388 : 		pGame->RequestAnimation(szAnimFile);

	mov	eax, DWORD PTR _szAnimFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestAnimation@CGame@@QAEXPAD@Z	; CGame::RequestAnimation
$LN4@ApplyAnima:

; 1389 : 		while(!pGame->IsAnimationLoaded(szAnimFile)) {

	mov	eax, DWORD PTR _szAnimFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN3@ApplyAnima

; 1390 : 			Sleep(5);

	mov	esi, esp
	push	5
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1391 : 			iWaitAnimLoad++;

	mov	eax, DWORD PTR _iWaitAnimLoad$[ebp]
	add	eax, 1
	mov	DWORD PTR _iWaitAnimLoad$[ebp], eax

; 1392 : 			if(iWaitAnimLoad == 10) return; // we can't wait forever

	cmp	DWORD PTR _iWaitAnimLoad$[ebp], 10	; 0000000aH
	jne	SHORT $LN2@ApplyAnima
	jmp	SHORT $LN10@ApplyAnima
$LN2@ApplyAnima:

; 1393 : 		}		

	jmp	SHORT $LN4@ApplyAnima
$LN3@ApplyAnima:

; 1394 : 		bLoaded = TRUE;

	mov	DWORD PTR _bLoaded$[ebp], 1
$LN5@ApplyAnima:

; 1395 : 	}
; 1396 : 
; 1397 : 	ScriptCommand(&apply_animation,m_dwGTAId,szAnimName,szAnimFile,fT,opt1,opt2,opt3,opt4,iUnk);

	mov	eax, DWORD PTR _iUnk$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opt4$[ebp]
	push	ecx
	mov	edx, DWORD PTR _opt3$[ebp]
	push	edx
	mov	eax, DWORD PTR _opt2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _opt1$[ebp]
	push	ecx
	cvtss2sd xmm0, DWORD PTR _fT$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _szAnimFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _szAnimName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _apply_animation
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 44					; 0000002cH
$LN10@ApplyAnima:

; 1398 : 
; 1399 : 	if (bLoaded) {
; 1400 : 		// not sure about this (how many anim files can we keep loaded?)
; 1401 : 		//pGame->ReleaseAnimation(szAnimFile);
; 1402 : 	}
; 1403 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?ApplyAnimation@CPlayerPed@@QAEXPAD0MHHHHH@Z ENDP	; CPlayerPed::ApplyAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetMoney@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iAmount$ = 8						; size = 4
?SetMoney@CPlayerPed@@QAEXH@Z PROC			; CPlayerPed::SetMoney, COMDAT
; _this$ = ecx

; 1361 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1362 : 	ScriptCommand(&set_actor_money,m_dwGTAId,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _set_actor_money
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 1363 : 	ScriptCommand(&set_actor_money,m_dwGTAId,iAmount);

	mov	eax, DWORD PTR _iAmount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _set_actor_money
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 1364 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMoney@CPlayerPed@@QAEXH@Z ENDP			; CPlayerPed::SetMoney
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetAnimationSet@CPlayerPed@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szAnim$ = 8						; size = 4
?SetAnimationSet@CPlayerPed@@QAEXPAD@Z PROC		; CPlayerPed::SetAnimationSet, COMDAT
; _this$ = ecx

; 1352 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1353 : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@SetAnimati

; 1354 : 		ScriptCommand(&set_actor_animation_set,m_dwGTAId,szAnim);

	mov	eax, DWORD PTR _szAnim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _set_actor_animation_set
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN2@SetAnimati:

; 1355 : 	}
; 1356 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAnimationSet@CPlayerPed@@QAEXPAD@Z ENDP		; CPlayerPed::SetAnimationSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ExtinguishFire@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_pVeh$1 = -32						; size = 4
_pFireObject$2 = -20					; size = 4
_this$ = -8						; size = 4
?ExtinguishFire@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::ExtinguishFire, COMDAT
; _this$ = ecx

; 1266 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1267 : 	if (m_pPed)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@Extinguish

; 1268 : 	{
; 1269 : 		// Remove ped's fire if any
; 1270 : 		DWORD pFireObject = m_pPed->pFireObject;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1840]
	mov	DWORD PTR _pFireObject$2[ebp], edx

; 1271 : 		if (pFireObject != NULL)

	cmp	DWORD PTR _pFireObject$2[ebp], 0
	je	SHORT $LN3@Extinguish

; 1272 : 		{
; 1273 : 			_asm 
; 1274 : 			{
; 1275 : 				mov ecx, pFireObject;

	mov	ecx, DWORD PTR _pFireObject$2[ebp]

; 1276 : 				//and byte ptr [ecx], 253;
; 1277 : 				mov eax, 0x5393F0;                         // CFire__Extinguish

	mov	eax, 5477360				; 005393f0H

; 1278 : 				call eax;

	call	eax
$LN3@Extinguish:

; 1279 : 			}
; 1280 : 		}
; 1281 : 
; 1282 : 		// Remove ped's vehicle's fire if any
; 1283 : 		if (IN_VEHICLE(m_pPed))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN5@Extinguish

; 1284 : 		{
; 1285 : 			VEHICLE_TYPE *pVeh = (VEHICLE_TYPE *)m_pPed->pVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1420]
	mov	DWORD PTR _pVeh$1[ebp], edx

; 1286 : 			pFireObject = pVeh->pFireObject;

	mov	eax, DWORD PTR _pVeh$1[ebp]
	mov	ecx, DWORD PTR [eax+1168]
	mov	DWORD PTR _pFireObject$2[ebp], ecx

; 1287 : 
; 1288 : 			if (pFireObject)

	cmp	DWORD PTR _pFireObject$2[ebp], 0
	je	SHORT $LN5@Extinguish

; 1289 : 			{
; 1290 : 				_asm 
; 1291 : 				{
; 1292 : 					mov ecx, pFireObject;

	mov	ecx, DWORD PTR _pFireObject$2[ebp]

; 1293 : 					//and byte ptr [ecx], 253;
; 1294 : 					mov eax, 0x5393F0;                         // CFire__Extinguish

	mov	eax, 5477360				; 005393f0H

; 1295 : 					call eax;

	call	eax
$LN5@Extinguish:

; 1296 : 				}
; 1297 : 			}
; 1298 : 		}
; 1299 : 	}
; 1300 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ExtinguishFire@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::ExtinguishFire
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetDead@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_mat$2 = -100						; size = 64
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?SetDead@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::SetDead, COMDAT
; _this$ = ecx

; 1243 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetDead@CPlayerPed@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1244 : 	if(m_dwGTAId && m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN3@SetDead
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	$LN3@SetDead

; 1245 : 
; 1246 : 		if(IsInJetpackMode()) StopJetpack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInJetpackMode@CPlayerPed@@QAEHXZ	; CPlayerPed::IsInJetpackMode
	test	eax, eax
	je	SHORT $LN2@SetDead
	mov	ecx, DWORD PTR _this$[ebp]
	call	?StopJetpack@CPlayerPed@@QAEXXZ		; CPlayerPed::StopJetpack
$LN2@SetDead:

; 1247 : 
; 1248 : 		try {

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1249 : 			ExtinguishFire();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExtinguishFire@CPlayerPed@@QAEXXZ	; CPlayerPed::ExtinguishFire
	jmp	SHORT $LN6@SetDead
__catch$?SetDead@CPlayerPed@@QAEXXZ$0:

; 1250 : 		} catch(...) {}

	mov	eax, $LN9@SetDead
	ret	0
$LN6@SetDead:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@SetDead
$LN9@SetDead:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@SetDead:

; 1251 : 
; 1252 : 		MATRIX4X4 mat;
; 1253 : 		GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 1254 : 		// will reset the tasks
; 1255 : 		TeleportTo(mat.pos.X,mat.pos.Y,mat.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _mat$2[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$2[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$2[ebp+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo

; 1256 :         m_pPed->fHealth = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+1344], xmm0

; 1257 : 		*pbyteCurrentPlayer = m_bytePlayerNumber;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax], dl

; 1258 : 		ScriptCommand(&kill_actor,m_dwGTAId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _kill_actor
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 1259 : 		*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0
$LN3@SetDead:

; 1260 : 	}
; 1261 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@SetDead
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@SetDead:
	DD	1
	DD	$LN12@SetDead
$LN12@SetDead:
	DD	-100					; ffffff9cH
	DD	64					; 00000040H
	DD	$LN10@SetDead
$LN10@SetDead:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SetDead@CPlayerPed@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetDead@CPlayerPed@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetDead@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::SetDead
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetModelIndex@CPlayerPed@@QAEXI@Z
_TEXT	SEGMENT
_dwPedPtr$ = -20					; size = 4
_this$ = -8						; size = 4
_uiModel$ = 8						; size = 4
?SetModelIndex@CPlayerPed@@QAEXI@Z PROC			; CPlayerPed::SetModelIndex, COMDAT
; _this$ = ecx

; 1215 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1216 : 	DWORD dwPedPtr = (DWORD)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwPedPtr$[ebp], ecx

; 1217 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN3@SetModelIn
	jmp	SHORT $LN4@SetModelIn
$LN3@SetModelIn:

; 1218 : 
; 1219 : 	if(!IsValidModel(uiModel)) uiModel = 0;

	mov	eax, DWORD PTR _uiModel$[ebp]
	push	eax
	call	?IsValidModel@@YGHH@Z			; IsValidModel
	test	eax, eax
	jne	SHORT $LN2@SetModelIn
	mov	DWORD PTR _uiModel$[ebp], 0
$LN2@SetModelIn:

; 1220 : 
; 1221 : 	if(dwPedPtr) {

	cmp	DWORD PTR _dwPedPtr$[ebp], 0
	je	SHORT $LN4@SetModelIn

; 1222 : 
; 1223 : 		// CPlayerPed_UpdateAfterPhysicalChange nulled
; 1224 : 		UnFuck(0x5A82C0,1);

	push	1
	push	5931712					; 005a82c0H
	call	?UnFuck@@YAXKH@Z			; UnFuck
	add	esp, 8

; 1225 : 		*(BYTE *)0x5A82C0 = 0xC3;

	mov	BYTE PTR ds:5931712, 195		; 000000c3H

; 1226 : 
; 1227 : 		DestroyFollowPedTask();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DestroyFollowPedTask@CPlayerPed@@QAEXXZ ; CPlayerPed::DestroyFollowPedTask

; 1228 : 
; 1229 : 		CEntity::SetModelIndex(uiModel);

	mov	eax, DWORD PTR _uiModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModelIndex@CEntity@@QAEXI@Z		; CEntity::SetModelIndex

; 1230 : 
; 1231 : 		// Need to reset the Ped Audio Attributes.
; 1232 : 		_asm mov eax, dwPedPtr

	mov	eax, DWORD PTR _dwPedPtr$[ebp]

; 1233 : 		_asm lea ecx, [eax+660]

	lea	ecx, DWORD PTR [eax+660]

; 1234 : 		_asm push eax

	push	eax

; 1235 : 		_asm mov ebx, 0x4E68D0

	mov	ebx, 5138640				; 004e68d0H

; 1236 : 		_asm call ebx

	call	ebx
$LN4@SetModelIn:

; 1237 : 	}
; 1238 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetModelIndex@CPlayerPed@@QAEXI@Z ENDP			; CPlayerPed::SetModelIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetGravityProcessing@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iState$ = 8						; size = 4
?SetGravityProcessing@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::SetGravityProcessing, COMDAT
; _this$ = ecx

; 1202 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1203 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN3@SetGravity
	jmp	SHORT $LN4@SetGravity
$LN3@SetGravity:

; 1204 : 
; 1205 : 	if(iState) {

	cmp	DWORD PTR _iState$[ebp], 0
	je	SHORT $LN2@SetGravity

; 1206 : 		m_pPed->entity.dwProcessingFlags &= 0x7FFFFFFD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, 2147483645				; 7ffffffdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+28], edx

; 1207 : 	} else {		

	jmp	SHORT $LN4@SetGravity
$LN2@SetGravity:

; 1208 : 		m_pPed->entity.dwProcessingFlags |= 0x80000002;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+28]
	or	edx, -2147483646			; 80000002H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+28], edx
$LN4@SetGravity:

; 1209 : 	}
; 1210 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGravityProcessing@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::SetGravityProcessing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetCollisionChecking@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iCheck$ = 8						; size = 4
?SetCollisionChecking@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::SetCollisionChecking, COMDAT
; _this$ = ecx

; 1189 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1190 : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN3@SetCollisi
	jmp	SHORT $LN4@SetCollisi
$LN3@SetCollisi:

; 1191 : 
; 1192 : 	if(iCheck) {

	cmp	DWORD PTR _iCheck$[ebp], 0
	je	SHORT $LN2@SetCollisi

; 1193 : 		m_pPed->entity.dwProcessingFlags |= 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+28]
	or	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+28], edx

; 1194 : 	} else {

	jmp	SHORT $LN4@SetCollisi
$LN2@SetCollisi:

; 1195 : 		m_pPed->entity.dwProcessingFlags &= 0xFFFFFFFE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+28], edx
$LN4@SetCollisi:

; 1196 : 	}
; 1197 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCollisionChecking@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::SetCollisionChecking
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?StartPassengerDriveByMode@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_iWeapon$1 = -20					; size = 4
_this$ = -8						; size = 4
?StartPassengerDriveByMode@CPlayerPed@@QAEHXZ PROC	; CPlayerPed::StartPassengerDriveByMode, COMDAT
; _this$ = ecx

; 1149 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1150 : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	$LN5@StartPasse

; 1151 : 
; 1152 : 		if(!IN_VEHICLE(m_pPed) || !m_pPed->pVehicle) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN3@StartPasse
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+1420], 0
	jne	SHORT $LN4@StartPasse
$LN3@StartPasse:
	xor	eax, eax
	jmp	$LN6@StartPasse
$LN4@StartPasse:

; 1153 : 
; 1154 : 		int iWeapon = GetCurrentWeapon();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	movzx	eax, al
	mov	DWORD PTR _iWeapon$1[ebp], eax

; 1155 : 		
; 1156 : 		// Don't allow them to enter driveby with a para
; 1157 : 		if(iWeapon == WEAPON_PARACHUTE) {

	cmp	DWORD PTR _iWeapon$1[ebp], 46		; 0000002eH
	jne	SHORT $LN2@StartPasse

; 1158 : 			SetArmedWeapon(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon

; 1159 : 			return FALSE;

	xor	eax, eax
	jmp	$LN6@StartPasse
$LN2@StartPasse:

; 1160 : 		}
; 1161 : 
; 1162 : 		// Check for an uzi type weapon.
; 1163 : 		if((iWeapon != WEAPON_UZI) && (iWeapon != WEAPON_MP5) && (iWeapon != WEAPON_TEC9)) {

	cmp	DWORD PTR _iWeapon$1[ebp], 28		; 0000001cH
	je	SHORT $LN1@StartPasse
	cmp	DWORD PTR _iWeapon$1[ebp], 29		; 0000001dH
	je	SHORT $LN1@StartPasse
	cmp	DWORD PTR _iWeapon$1[ebp], 32		; 00000020H
	je	SHORT $LN1@StartPasse

; 1164 : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN6@StartPasse
$LN1@StartPasse:

; 1165 : 		}
; 1166 : 
; 1167 : 		SetArmedWeapon(iWeapon);

	mov	eax, DWORD PTR _iWeapon$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon

; 1168 : 	
; 1169 : 		/* We should replace them in their current seat.
; 1170 : 		int iVehicleID = GamePool_Vehicle_GetIndex((VEHICLE_TYPE *)m_pPed->pVehicle);
; 1171 : 		int iSeatID = GetVehicleSeatID();
; 1172 : 		PutDirectlyInVehicle(iVehicleID,iSeatID);*/	
; 1173 : 
; 1174 : //		const SCRIPT_COMMAND enter_passenger_driveby   			= { 0x0713, "iiiffffiii" };
; 1175 : 
; 1176 : 		ScriptCommand(&enter_passenger_driveby,
; 1177 : 			m_dwGTAId,-1,-1,0.0f,0.0f,0.0f,300.0f,8,1,100);

	push	100					; 00000064H
	push	1
	push	8
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4072c00000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	push	-1
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _enter_passenger_driveby
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 60					; 0000003cH

; 1178 : 
; 1179 : 		//SetWeaponModelIndex(iWeapon);
; 1180 : 
; 1181 : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN6@StartPasse
$LN5@StartPasse:

; 1182 : 	}
; 1183 : 	return FALSE;

	xor	eax, eax
$LN6@StartPasse:

; 1184 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StartPassengerDriveByMode@CPlayerPed@@QAEHXZ ENDP	; CPlayerPed::StartPassengerDriveByMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsInJetpackMode@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_dwJmpVtbl$ = -20					; size = 4
_this$ = -8						; size = 4
?IsInJetpackMode@CPlayerPed@@QAEHXZ PROC		; CPlayerPed::IsInJetpackMode, COMDAT
; _this$ = ecx

; 1135 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1136 : 	if(!m_pPed || IN_VEHICLE(m_pPed)) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@IsInJetpac
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN4@IsInJetpac
$LN3@IsInJetpac:
	xor	eax, eax
	jmp	SHORT $LN5@IsInJetpac
$LN4@IsInJetpac:

; 1137 : 	if(m_pPed->Tasks->pdwJumpJetPack == NULL) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN2@IsInJetpac
	xor	eax, eax
	jmp	SHORT $LN5@IsInJetpac
$LN2@IsInJetpac:

; 1138 : 
; 1139 : 	DWORD dwJmpVtbl = m_pPed->Tasks->pdwJumpJetPack[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _dwJmpVtbl$[ebp], eax

; 1140 : 
; 1141 : 	if(dwJmpVtbl == 0x8705C4) return TRUE;

	cmp	DWORD PTR _dwJmpVtbl$[ebp], 8848836	; 008705c4H
	jne	SHORT $LN1@IsInJetpac
	mov	eax, 1
	jmp	SHORT $LN5@IsInJetpac
$LN1@IsInJetpac:

; 1142 : 
; 1143 : 	return FALSE;

	xor	eax, eax
$LN5@IsInJetpac:

; 1144 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsInJetpackMode@CPlayerPed@@QAEHXZ ENDP		; CPlayerPed::IsInJetpackMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?StopJetpack@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_dwJetPackTask$1 = -32					; size = 4
_dwJmpVtbl$ = -20					; size = 4
_this$ = -8						; size = 4
?StopJetpack@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::StopJetpack, COMDAT
; _this$ = ecx

; 1115 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1116 : 	if(!m_pPed || IN_VEHICLE(m_pPed)) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@StopJetpac
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN4@StopJetpac
$LN3@StopJetpac:
	jmp	SHORT $LN5@StopJetpac
$LN4@StopJetpac:

; 1117 : 
; 1118 : 	if(m_pPed->Tasks->pdwJumpJetPack == NULL) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN2@StopJetpac
	jmp	SHORT $LN5@StopJetpac
$LN2@StopJetpac:

; 1119 : 
; 1120 : 	DWORD dwJmpVtbl = m_pPed->Tasks->pdwJumpJetPack[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _dwJmpVtbl$[ebp], eax

; 1121 : 
; 1122 : 	if(dwJmpVtbl == 0x8705C4) {

	cmp	DWORD PTR _dwJmpVtbl$[ebp], 8848836	; 008705c4H
	jne	SHORT $LN5@StopJetpac

; 1123 : 		DWORD dwJetPackTask = (DWORD)m_pPed->Tasks->pdwJumpJetPack;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _dwJetPackTask$1[ebp], eax

; 1124 : 		_asm mov ecx, dwJetPackTask

	mov	ecx, DWORD PTR _dwJetPackTask$1[ebp]

; 1125 : 		_asm mov edx, 0x6801D0

	mov	edx, 6816208				; 006801d0H

; 1126 : 		_asm push 1

	push	1

; 1127 : 		_asm call edx

	call	edx

; 1128 : 		m_pPed->Tasks->pdwJumpJetPack = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1148]
	mov	DWORD PTR [edx+16], 0
$LN5@StopJetpac:

; 1129 : 	}
; 1130 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StopJetpack@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::StopJetpack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?StartJetpack@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?StartJetpack@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::StartJetpack, COMDAT
; _this$ = ecx

; 1101 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1102 : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@StartJetpa
	jmp	SHORT $LN2@StartJetpa
$LN1@StartJetpa:

; 1103 : 
; 1104 : 	*pbyteCurrentPlayer = m_bytePlayerNumber;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax], dl

; 1105 : 
; 1106 : 	_asm mov eax, 0x439600

	mov	eax, 4429312				; 00439600H

; 1107 : 	_asm call eax

	call	eax

; 1108 : 
; 1109 : 	*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0
$LN2@StartJetpa:

; 1110 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StartJetpack@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::StartJetpack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?RestartIfWastedAt@CPlayerPed@@QAEXPAU_VECTOR@@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vecRestart$ = 8					; size = 4
_fRotation$ = 12					; size = 4
?RestartIfWastedAt@CPlayerPed@@QAEXPAU_VECTOR@@M@Z PROC	; CPlayerPed::RestartIfWastedAt, COMDAT
; _this$ = ecx

; 929  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 930  : 	ScriptCommand(&restart_if_wasted_at, vecRestart->X,vecRestart->Y,vecRestart->Z,fRotation,0);

	push	0
	cvtss2sd xmm0, DWORD PTR _fRotation$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _vecRestart$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _vecRestart$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _vecRestart$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET _restart_if_wasted_at
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 40					; 00000028H

; 931  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?RestartIfWastedAt@CPlayerPed@@QAEXPAU_VECTOR@@M@Z ENDP	; CPlayerPed::RestartIfWastedAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z
_TEXT	SEGMENT
_pGtaVehicle$1 = -92					; size = 4
_pGtaVehicle$2 = -80					; size = 4
_pGtaVehicle$3 = -68					; size = 4
_pPlayerPool$ = -56					; size = 4
_pVehiclePool$ = -44					; size = 4
_bytePlayerIDWhoKilled$ = -29				; size = 1
_byteDeathReason$ = -17					; size = 1
_this$ = -8						; size = 4
_nPlayer$ = 8						; size = 4
?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z PROC ; CPlayerPed::FindDeathReasonAndResponsiblePlayer, COMDAT
; _this$ = ecx

; 957  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 958  : 	BYTE byteDeathReason;
; 959  : 	BYTE bytePlayerIDWhoKilled;
; 960  : 	CVehiclePool *pVehiclePool;
; 961  : 	CPlayerPool *pPlayerPool;
; 962  : 
; 963  : 	// grab the vehicle/player pool now anyway, even though we may not need it.
; 964  : 	if(pNetGame) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	SHORT $LN23@FindDeathR

; 965  : 		pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$[ebp], eax

; 966  : 		pPlayerPool = pNetGame->GetPlayerPool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	DWORD PTR _pPlayerPool$[ebp], eax

; 967  : 	}
; 968  : 	else { // just leave if there's no netgame.

	jmp	SHORT $LN22@FindDeathR
$LN23@FindDeathR:

; 969  : 		*nPlayer = INVALID_PLAYER_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 970  : 		return INVALID_PLAYER_ID;

	or	al, 255					; 000000ffH
	jmp	$LN24@FindDeathR
$LN22@FindDeathR:

; 971  : 	}
; 972  : 
; 973  : 	if(m_pPed) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	$LN21@FindDeathR

; 974  : 	{
; 975  : 		byteDeathReason = (BYTE)m_pPed->dwWeaponUsed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	dl, BYTE PTR [ecx+1888]
	mov	BYTE PTR _byteDeathReason$[ebp], dl

; 976  : 		if(byteDeathReason < WEAPON_CAMERA || byteDeathReason == WEAPON_HELIBLADES || byteDeathReason == WEAPON_EXPLOSION) { // It's a weapon of some sort.

	movzx	eax, BYTE PTR _byteDeathReason$[ebp]
	cmp	eax, 43					; 0000002bH
	jl	SHORT $LN19@FindDeathR
	movzx	eax, BYTE PTR _byteDeathReason$[ebp]
	cmp	eax, 50					; 00000032H
	je	SHORT $LN19@FindDeathR
	movzx	eax, BYTE PTR _byteDeathReason$[ebp]
	cmp	eax, 51					; 00000033H
	jne	$LN20@FindDeathR
$LN19@FindDeathR:

; 977  : 
; 978  : 			if(m_pPed->pdwDamageEntity) { // check for a player pointer.

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+1892], 0
	je	$LN18@FindDeathR

; 979  : 				
; 980  : 				bytePlayerIDWhoKilled = pPlayerPool->
; 981  : 					FindRemotePlayerIDFromGtaPtr((PED_TYPE *)m_pPed->pdwDamageEntity);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1892]
	push	edx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
	mov	BYTE PTR _bytePlayerIDWhoKilled$[ebp], al

; 982  : 
; 983  : 				if(bytePlayerIDWhoKilled != INVALID_PLAYER_ID) {

	movzx	eax, BYTE PTR _bytePlayerIDWhoKilled$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN17@FindDeathR

; 984  : 					// killed by another player with a weapon, this is all easy.
; 985  : 					*nPlayer = bytePlayerIDWhoKilled;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	cl, BYTE PTR _bytePlayerIDWhoKilled$[ebp]
	mov	BYTE PTR [eax], cl

; 986  : 					return byteDeathReason;

	mov	al, BYTE PTR _byteDeathReason$[ebp]
	jmp	$LN24@FindDeathR

; 987  : 				} else { // could be a vehicle

	jmp	SHORT $LN18@FindDeathR
$LN17@FindDeathR:

; 988  : 					if(pVehiclePool->FindIDFromGtaPtr((VEHICLE_TYPE *)m_pPed->pdwDamageEntity) != INVALID_VEHICLE_ID) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1892]
	push	edx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	movzx	eax, ax
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN18@FindDeathR

; 989  : 						VEHICLE_TYPE *pGtaVehicle = (VEHICLE_TYPE *)m_pPed->pdwDamageEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1892]
	mov	DWORD PTR _pGtaVehicle$3[ebp], edx

; 990  : 						bytePlayerIDWhoKilled = pPlayerPool->
; 991  : 							FindRemotePlayerIDFromGtaPtr((PED_TYPE *)pGtaVehicle->pDriver);

	mov	eax, DWORD PTR _pGtaVehicle$3[ebp]
	mov	ecx, DWORD PTR [eax+1120]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
	mov	BYTE PTR _bytePlayerIDWhoKilled$[ebp], al

; 992  : 												
; 993  : 						if(bytePlayerIDWhoKilled != INVALID_PLAYER_ID) {

	movzx	eax, BYTE PTR _bytePlayerIDWhoKilled$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN18@FindDeathR

; 994  : 							*nPlayer = bytePlayerIDWhoKilled;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	cl, BYTE PTR _bytePlayerIDWhoKilled$[ebp]
	mov	BYTE PTR [eax], cl

; 995  : 							return byteDeathReason;

	mov	al, BYTE PTR _byteDeathReason$[ebp]
	jmp	$LN24@FindDeathR
$LN18@FindDeathR:

; 996  : 						}
; 997  : 					}
; 998  : 				}
; 999  : 			}
; 1000 : 			//else { // weapon was used but who_killed is 0 (?)
; 1001 : 			*nPlayer = INVALID_PLAYER_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1002 : 			return INVALID_PLAYER_ID;

	or	al, 255					; 000000ffH
	jmp	$LN24@FindDeathR
	jmp	$LN21@FindDeathR
$LN20@FindDeathR:

; 1003 : 			//}
; 1004 : 		}
; 1005 : 		else if(byteDeathReason == WEAPON_DROWN) {

	movzx	eax, BYTE PTR _byteDeathReason$[ebp]
	cmp	eax, 53					; 00000035H
	jne	SHORT $LN12@FindDeathR

; 1006 : 			*nPlayer = INVALID_PLAYER_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1007 : 			return WEAPON_DROWN;

	mov	al, 53					; 00000035H
	jmp	$LN24@FindDeathR
	jmp	$LN21@FindDeathR
$LN12@FindDeathR:

; 1008 : 		}
; 1009 : 		else if(byteDeathReason == WEAPON_VEHICLE) {

	movzx	eax, BYTE PTR _byteDeathReason$[ebp]
	cmp	eax, 49					; 00000031H
	jne	SHORT $LN10@FindDeathR

; 1010 : 
; 1011 : 			if(m_pPed->pdwDamageEntity) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+1892], 0
	je	SHORT $LN9@FindDeathR

; 1012 : 				// now, if we can find the vehicle
; 1013 : 				// we can probably derive the responsible player.
; 1014 : 				// Look in the vehicle pool for this vehicle.
; 1015 : 				if(pVehiclePool->FindIDFromGtaPtr((VEHICLE_TYPE *)m_pPed->pdwDamageEntity) != INVALID_VEHICLE_ID)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1892]
	push	edx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	movzx	eax, ax
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN9@FindDeathR

; 1016 : 				{
; 1017 : 					VEHICLE_TYPE *pGtaVehicle = (VEHICLE_TYPE *)m_pPed->pdwDamageEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1892]
	mov	DWORD PTR _pGtaVehicle$2[ebp], edx

; 1018 : 
; 1019 : 					bytePlayerIDWhoKilled = pPlayerPool->
; 1020 : 						FindRemotePlayerIDFromGtaPtr((PED_TYPE *)pGtaVehicle->pDriver);

	mov	eax, DWORD PTR _pGtaVehicle$2[ebp]
	mov	ecx, DWORD PTR [eax+1120]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
	mov	BYTE PTR _bytePlayerIDWhoKilled$[ebp], al

; 1021 : 											
; 1022 : 					if(bytePlayerIDWhoKilled != INVALID_PLAYER_ID) {

	movzx	eax, BYTE PTR _bytePlayerIDWhoKilled$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN9@FindDeathR

; 1023 : 						*nPlayer = bytePlayerIDWhoKilled;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	cl, BYTE PTR _bytePlayerIDWhoKilled$[ebp]
	mov	BYTE PTR [eax], cl

; 1024 : 						return WEAPON_VEHICLE;

	mov	al, 49					; 00000031H
	jmp	$LN24@FindDeathR
$LN9@FindDeathR:

; 1025 : 					}
; 1026 : 				}									
; 1027 : 			}
; 1028 : 		}

	jmp	SHORT $LN21@FindDeathR
$LN10@FindDeathR:

; 1029 : 		else if(byteDeathReason == WEAPON_COLLISION) {

	movzx	eax, BYTE PTR _byteDeathReason$[ebp]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN21@FindDeathR

; 1030 : 
; 1031 : 			if(m_pPed->pdwDamageEntity) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+1892], 0
	je	SHORT $LN21@FindDeathR

; 1032 : 				if(pVehiclePool->FindIDFromGtaPtr((VEHICLE_TYPE *)m_pPed->pdwDamageEntity) != INVALID_VEHICLE_ID)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1892]
	push	edx
	mov	ecx, DWORD PTR _pVehiclePool$[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	movzx	eax, ax
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN3@FindDeathR

; 1033 : 				{
; 1034 : 					VEHICLE_TYPE *pGtaVehicle = (VEHICLE_TYPE *)m_pPed->pdwDamageEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1892]
	mov	DWORD PTR _pGtaVehicle$1[ebp], edx

; 1035 : 										
; 1036 : 					bytePlayerIDWhoKilled = pPlayerPool->
; 1037 : 						FindRemotePlayerIDFromGtaPtr((PED_TYPE *)pGtaVehicle->pDriver);

	mov	eax, DWORD PTR _pGtaVehicle$1[ebp]
	mov	ecx, DWORD PTR [eax+1120]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerPool$[ebp]
	call	?FindRemotePlayerIDFromGtaPtr@CPlayerPool@@QAEEPAU_PED_TYPE@@@Z ; CPlayerPool::FindRemotePlayerIDFromGtaPtr
	mov	BYTE PTR _bytePlayerIDWhoKilled$[ebp], al

; 1038 : 						
; 1039 : 					if(bytePlayerIDWhoKilled != INVALID_PLAYER_ID) {

	movzx	eax, BYTE PTR _bytePlayerIDWhoKilled$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN2@FindDeathR

; 1040 : 						*nPlayer = bytePlayerIDWhoKilled;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	cl, BYTE PTR _bytePlayerIDWhoKilled$[ebp]
	mov	BYTE PTR [eax], cl

; 1041 : 						return WEAPON_COLLISION;

	mov	al, 54					; 00000036H
	jmp	SHORT $LN24@FindDeathR
$LN2@FindDeathR:

; 1042 : 					}
; 1043 : 				}
; 1044 : 				else {

	jmp	SHORT $LN21@FindDeathR
$LN3@FindDeathR:

; 1045 : 					*nPlayer = INVALID_PLAYER_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1046 : 					return WEAPON_COLLISION;

	mov	al, 54					; 00000036H
	jmp	SHORT $LN24@FindDeathR
$LN21@FindDeathR:

; 1047 : 				}
; 1048 : 			}
; 1049 : 		}
; 1050 : 	}
; 1051 : 
; 1052 : 	// Unhandled death type.
; 1053 : 	*nPlayer = INVALID_PLAYER_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1054 : 	return INVALID_PLAYER_ID;

	or	al, 255					; 000000ffH
$LN24@FindDeathR:

; 1055 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z ENDP ; CPlayerPed::FindDeathReasonAndResponsiblePlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?TogglePlayerControllable@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_mat$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_iControllable$ = 8					; size = 4
?TogglePlayerControllable@CPlayerPed@@QAEXH@Z PROC	; CPlayerPed::TogglePlayerControllable, COMDAT
; _this$ = ecx

; 936  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 937  : 	MATRIX4X4 mat;
; 938  : 
; 939  : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN4@TogglePlay
	jmp	$LN5@TogglePlay
$LN4@TogglePlay:

; 940  : 
; 941  : 	if(!iControllable) {

	cmp	DWORD PTR _iControllable$[ebp], 0
	jne	SHORT $LN3@TogglePlay

; 942  : 		ScriptCommand(&toggle_player_controllable,m_bytePlayerNumber,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	push	OFFSET _toggle_player_controllable
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 943  : 		ScriptCommand(&lock_actor,m_dwGTAId,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _lock_actor
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 944  : 	} else {

	jmp	SHORT $LN1@TogglePlay
$LN3@TogglePlay:

; 945  : 		ScriptCommand(&toggle_player_controllable,m_bytePlayerNumber,1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	push	OFFSET _toggle_player_controllable
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 946  : 		ScriptCommand(&lock_actor,m_dwGTAId,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _lock_actor
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 947  : 		if(!IsInVehicle()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	jne	SHORT $LN1@TogglePlay

; 948  : 			GetMatrix(&mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 949  : 			TeleportTo(mat.pos.X,mat.pos.Y,mat.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _mat$[ebp+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo
$LN1@TogglePlay:
$LN5@TogglePlay:

; 950  : 		}
; 951  : 	}
; 952  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@TogglePlay
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN9@TogglePlay:
	DD	1
	DD	$LN8@TogglePlay
$LN8@TogglePlay:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN7@TogglePlay
$LN7@TogglePlay:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?TogglePlayerControllable@CPlayerPed@@QAEXH@Z ENDP	; CPlayerPed::TogglePlayerControllable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetVehicleSeatID@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_pVehicle$ = -20					; size = 4
_this$ = -8						; size = 4
?GetVehicleSeatID@CPlayerPed@@QAEHXZ PROC		; CPlayerPed::GetVehicleSeatID, COMDAT
; _this$ = ecx

; 818  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 819  : 	VEHICLE_TYPE *pVehicle;
; 820  : 
; 821  : 	if( GetActionTrigger() == ACTION_INCAR && (pVehicle = (VEHICLE_TYPE *)m_pPed->pVehicle) != 0 ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetActionTrigger@CPlayerPed@@QAEEXZ	; CPlayerPed::GetActionTrigger
	movzx	eax, al
	cmp	eax, 50					; 00000032H
	jne	$LN9@GetVehicle
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1420]
	mov	DWORD PTR _pVehicle$[ebp], edx
	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	$LN9@GetVehicle

; 822  : 		if(pVehicle->pDriver == m_pPed) return 0;

	mov	eax, DWORD PTR _pVehicle$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+1120]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN8@GetVehicle
	xor	eax, eax
	jmp	$LN10@GetVehicle
$LN8@GetVehicle:

; 823  : 		if(pVehicle->pPassengers[0] == m_pPed) return 1;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pVehicle$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+1124]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN7@GetVehicle
	mov	eax, 1
	jmp	$LN10@GetVehicle
$LN7@GetVehicle:

; 824  : 		if(pVehicle->pPassengers[1] == m_pPed) return 2;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax+1124]
	cmp	eax, DWORD PTR [edx+28]
	jne	SHORT $LN6@GetVehicle
	mov	eax, 2
	jmp	$LN10@GetVehicle
$LN6@GetVehicle:

; 825  : 		if(pVehicle->pPassengers[2] == m_pPed) return 3;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax+1124]
	cmp	eax, DWORD PTR [edx+28]
	jne	SHORT $LN5@GetVehicle
	mov	eax, 3
	jmp	$LN10@GetVehicle
$LN5@GetVehicle:

; 826  : 		if(pVehicle->pPassengers[3] == m_pPed) return 4;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pVehicle$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+1124]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN4@GetVehicle
	mov	eax, 4
	jmp	SHORT $LN10@GetVehicle
$LN4@GetVehicle:

; 827  : 		if(pVehicle->pPassengers[4] == m_pPed) return 5;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax+1124]
	cmp	eax, DWORD PTR [edx+28]
	jne	SHORT $LN3@GetVehicle
	mov	eax, 5
	jmp	SHORT $LN10@GetVehicle
$LN3@GetVehicle:

; 828  : 		if(pVehicle->pPassengers[5] == m_pPed) return 6;

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pVehicle$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+1124]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN2@GetVehicle
	mov	eax, 6
	jmp	SHORT $LN10@GetVehicle
$LN2@GetVehicle:

; 829  : 		if(pVehicle->pPassengers[6] == m_pPed) return 7;

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pVehicle$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+ecx+1124]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN9@GetVehicle
	mov	eax, 7
	jmp	SHORT $LN10@GetVehicle
$LN9@GetVehicle:

; 830  : 	}
; 831  : 
; 832  : 	return (-1);

	or	eax, -1
$LN10@GetVehicle:

; 833  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehicleSeatID@CPlayerPed@@QAEHXZ ENDP		; CPlayerPed::GetVehicleSeatID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetGtaContactEntity@CPlayerPed@@QAEPAU_ENTITY_TYPE@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGtaContactEntity@CPlayerPed@@QAEPAU_ENTITY_TYPE@@XZ PROC ; CPlayerPed::GetGtaContactEntity, COMDAT
; _this$ = ecx

; 1640 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1641 : 	if (!m_pPed->pContactEntity) return NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+1412], 0
	jne	SHORT $LN1@GetGtaCont
	xor	eax, eax
	jmp	SHORT $LN2@GetGtaCont
$LN1@GetGtaCont:

; 1642 : 	return (ENTITY_TYPE*)m_pPed->pContactEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [ecx+1412]
$LN2@GetGtaCont:

; 1643 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGtaContactEntity@CPlayerPed@@QAEPAU_ENTITY_TYPE@@XZ ENDP ; CPlayerPed::GetGtaContactEntity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetGtaContactVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGtaContactVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ PROC ; CPlayerPed::GetGtaContactVehicle, COMDAT
; _this$ = ecx

; 1648 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1649 : 	return (VEHICLE_TYPE*)m_pPed->pContactVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [ecx+1384]

; 1650 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGtaContactVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ENDP ; CPlayerPed::GetGtaContactVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ PROC	; CPlayerPed::GetGtaVehicle, COMDAT
; _this$ = ecx

; 719  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 720  : 	return (VEHICLE_TYPE *)m_pPed->pVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [ecx+1420]

; 721  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ENDP	; CPlayerPed::GetGtaVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsAPassenger@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_pVehicle$1 = -20					; size = 4
_this$ = -8						; size = 4
?IsAPassenger@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsAPassenger, COMDAT
; _this$ = ecx

; 698  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 699  : 	if( m_pPed->pVehicle && IN_VEHICLE(m_pPed) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+1420], 0
	je	SHORT $LN4@IsAPasseng
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN4@IsAPasseng

; 700  : 	{
; 701  : 		VEHICLE_TYPE * pVehicle = (VEHICLE_TYPE *)m_pPed->pVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1420]
	mov	DWORD PTR _pVehicle$1[ebp], edx

; 702  : 
; 703  : 		if( pVehicle->pDriver != m_pPed || 
; 704  : 			pVehicle->entity.nModelIndex == TRAIN_PASSENGER ||
; 705  : 			pVehicle->entity.nModelIndex == TRAIN_FREIGHT ) {

	mov	eax, DWORD PTR _pVehicle$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+1120]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN2@IsAPasseng
	mov	eax, DWORD PTR _pVehicle$1[ebp]
	movzx	ecx, WORD PTR [eax+34]
	cmp	ecx, 569				; 00000239H
	je	SHORT $LN2@IsAPasseng
	mov	eax, DWORD PTR _pVehicle$1[ebp]
	movzx	ecx, WORD PTR [eax+34]
	cmp	ecx, 570				; 0000023aH
	jne	SHORT $LN3@IsAPasseng
$LN2@IsAPasseng:

; 706  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN5@IsAPasseng

; 707  : 		}
; 708  : 		else {

	jmp	SHORT $LN4@IsAPasseng
$LN3@IsAPasseng:

; 709  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN5@IsAPasseng
$LN4@IsAPasseng:

; 710  : 		}
; 711  : 	}
; 712  : 
; 713  : 	return FALSE;

	xor	eax, eax
$LN5@IsAPasseng:

; 714  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAPassenger@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsAPassenger
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_fZ$ = 16						; size = 4
?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z PROC	; CPlayerPed::RemoveFromVehicleAndPutAt, COMDAT
; _this$ = ecx

; 919  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 920  : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN2@RemoveFrom
	jmp	SHORT $LN3@RemoveFrom
$LN2@RemoveFrom:

; 921  : 	if(m_pPed && IN_VEHICLE(m_pPed)) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@RemoveFrom
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN1@RemoveFrom

; 922  : 		ScriptCommand(&remove_actor_from_car_and_put_at,m_dwGTAId,fX,fY,fZ);

	cvtss2sd xmm0, DWORD PTR _fZ$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fY$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fX$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _remove_actor_from_car_and_put_at
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H
$LN1@RemoveFrom:
$LN3@RemoveFrom:

; 923  : 	}
; 924  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ENDP	; CPlayerPed::RemoveFromVehicleAndPutAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ExitCurrentVehicle@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ExitCurrentVehicle@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ExitCurrentVehicle, COMDAT
; _this$ = ecx

; 907  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@ExitCurren
	jmp	SHORT $LN4@ExitCurren
$LN3@ExitCurren:

; 909  : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN2@ExitCurren
	jmp	SHORT $LN4@ExitCurren
$LN2@ExitCurren:

; 910  : 	if(IN_VEHICLE(m_pPed)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN4@ExitCurren

; 911  : 		ScriptCommand(&make_actor_leave_car,m_dwGTAId,GetCurrentVehicleID());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentVehicleID@CPlayerPed@@QAEHXZ	; CPlayerPed::GetCurrentVehicleID
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _make_actor_leave_car
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN4@ExitCurren:

; 912  : 	}
; 913  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ExitCurrentVehicle@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ExitCurrentVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?EnterVehicle@CPlayerPed@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iVehicleID$ = 8					; size = 4
_bPassenger$ = 12					; size = 4
?EnterVehicle@CPlayerPed@@QAEXHH@Z PROC			; CPlayerPed::EnterVehicle, COMDAT
; _this$ = ecx

; 883  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN6@EnterVehic
	jmp	$LN7@EnterVehic
$LN6@EnterVehic:

; 885  : 	if(!GamePool_Vehicle_GetAt(iVehicleID)) return;

	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	call	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ; GamePool_Vehicle_GetAt
	test	eax, eax
	jne	SHORT $LN5@EnterVehic
	jmp	SHORT $LN7@EnterVehic
$LN5@EnterVehic:

; 886  : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN4@EnterVehic
	jmp	SHORT $LN7@EnterVehic
$LN4@EnterVehic:

; 887  : 
; 888  : 	bIgnoreNextEntry = TRUE;

	mov	DWORD PTR ?bIgnoreNextEntry@@3HA, 1	; bIgnoreNextEntry

; 889  : 
; 890  : 	if(GetCurrentWeapon() == WEAPON_PARACHUTE) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	movzx	eax, al
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN3@EnterVehic

; 891  : 		SetArmedWeapon(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon
$LN3@EnterVehic:

; 892  : 	}
; 893  : 
; 894  : 	if(bPassenger) {

	cmp	DWORD PTR _bPassenger$[ebp], 0
	je	SHORT $LN2@EnterVehic

; 895  : 		//pChatWindow->AddDebugMessage("Passenger: %u 0x%X",m_bytePlayerNumber,iVehicleID);
; 896  : 		ScriptCommand(&send_actor_to_car_passenger,m_dwGTAId,iVehicleID,3000,-1);

	push	-1
	push	3000					; 00000bb8H
	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _send_actor_to_car_passenger
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 20					; 00000014H

; 897  : 	} else {

	jmp	SHORT $LN7@EnterVehic
$LN2@EnterVehic:

; 898  : 		//pChatWindow->AddDebugMessage("Driver: %u 0x%X",m_bytePlayerNumber,iVehicleID);
; 899  : 		ScriptCommand(&send_actor_to_car_driverseat,m_dwGTAId,iVehicleID,3000);

	push	3000					; 00000bb8H
	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _send_actor_to_car_driverseat
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H
$LN7@EnterVehic:

; 900  : 	}				
; 901  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?EnterVehicle@CPlayerPed@@QAEXHH@Z ENDP			; CPlayerPed::EnterVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?PutDirectlyInVehicle@CPlayerPed@@QAEXHH@Z
_TEXT	SEGMENT
_pTrain$1 = -56						; size = 4
_TrainVehicleId$2 = -44					; size = 2
_pVehiclePool$3 = -32					; size = 4
_pVehicle$ = -20					; size = 4
_this$ = -8						; size = 4
_iVehicleID$ = 8					; size = 4
_iSeat$ = 12						; size = 4
?PutDirectlyInVehicle@CPlayerPed@@QAEXHH@Z PROC		; CPlayerPed::PutDirectlyInVehicle, COMDAT
; _this$ = ecx

; 838  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 839  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN13@PutDirectl
	jmp	$LN14@PutDirectl
$LN13@PutDirectl:

; 840  : 	if(!GamePool_Vehicle_GetAt(iVehicleID)) return;

	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	call	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ; GamePool_Vehicle_GetAt
	test	eax, eax
	jne	SHORT $LN12@PutDirectl
	jmp	$LN14@PutDirectl
$LN12@PutDirectl:

; 841  : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN11@PutDirectl
	jmp	$LN14@PutDirectl
$LN11@PutDirectl:

; 842  : 	
; 843  : 	if(GetCurrentWeapon() == WEAPON_PARACHUTE) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeapon@CPlayerPed@@QAEEXZ	; CPlayerPed::GetCurrentWeapon
	movzx	eax, al
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN10@PutDirectl

; 844  : 		SetArmedWeapon(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon
$LN10@PutDirectl:

; 845  : 	}
; 846  : 
; 847  : 	VEHICLE_TYPE *pVehicle = GamePool_Vehicle_GetAt(iVehicleID);

	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	call	?GamePool_Vehicle_GetAt@@YGPAU_VEHICLE_TYPE@@H@Z ; GamePool_Vehicle_GetAt
	mov	DWORD PTR _pVehicle$[ebp], eax

; 848  : 
; 849  : 	if(pVehicle->fHealth == 0.0f) return;

	mov	eax, DWORD PTR _pVehicle$[ebp]
	movss	xmm0, DWORD PTR [eax+1216]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@PutDirectl
	jmp	$LN14@PutDirectl
$LN9@PutDirectl:

; 850  : 
; 851  : 	// Check to make sure internal data structure of the vehicle hasn't been deleted
; 852  : 	// by checking if the vtbl points to CPlaceable_vtbl
; 853  : 	if (pVehicle->entity.vtable == 0x863C40) return;

	mov	eax, DWORD PTR _pVehicle$[ebp]
	cmp	DWORD PTR [eax], 8797248		; 00863c40H
	jne	SHORT $LN8@PutDirectl
	jmp	$LN14@PutDirectl
$LN8@PutDirectl:

; 854  : 
; 855  : 	if(iSeat==0) {

	cmp	DWORD PTR _iSeat$[ebp], 0
	jne	SHORT $LN7@PutDirectl

; 856  : 		if(pVehicle->pDriver && IN_VEHICLE(pVehicle->pDriver))

	mov	eax, DWORD PTR _pVehicle$[ebp]
	cmp	DWORD PTR [eax+1120], 0
	je	SHORT $LN6@PutDirectl
	mov	eax, DWORD PTR _pVehicle$[ebp]
	mov	ecx, DWORD PTR [eax+1120]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN6@PutDirectl

; 857  : 		{
; 858  : 			//pChatWindow->AddDebugMessage("CPlayerPed::PutDirectlyInVehicle: vehicle already has a driver");
; 859  :             return;

	jmp	$LN14@PutDirectl
$LN6@PutDirectl:

; 860  : 		}
; 861  : 		ScriptCommand(&put_actor_in_car,m_dwGTAId,iVehicleID);

	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _put_actor_in_car
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 862  : 	} else {

	jmp	SHORT $LN5@PutDirectl
$LN7@PutDirectl:

; 863  : 		iSeat--;

	mov	eax, DWORD PTR _iSeat$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iSeat$[ebp], eax

; 864  : 		ScriptCommand(&put_actor_in_car2,m_dwGTAId,iVehicleID,iSeat);

	mov	eax, DWORD PTR _iSeat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iVehicleID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET _put_actor_in_car2
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H
$LN5@PutDirectl:

; 865  : 	}
; 866  : 
; 867  : 	if(pNetGame) {

	cmp	DWORD PTR ?pNetGame@@3PAVCNetGame@@A, 0	; pNetGame
	je	$LN1@PutDirectl

; 868  : 		CVehiclePool* pVehiclePool = pNetGame->GetVehiclePool();

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetVehiclePool@CNetGame@@QAEPAVCVehiclePool@@XZ ; CNetGame::GetVehiclePool
	mov	DWORD PTR _pVehiclePool$3[ebp], eax

; 869  : 		VEHICLEID TrainVehicleId = pVehiclePool->FindIDFromGtaPtr(pVehicle);

	mov	eax, DWORD PTR _pVehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$3[ebp]
	call	?FindIDFromGtaPtr@CVehiclePool@@QAEGPAU_VEHICLE_TYPE@@@Z ; CVehiclePool::FindIDFromGtaPtr
	mov	WORD PTR _TrainVehicleId$2[ebp], ax

; 870  : 		if(TrainVehicleId == INVALID_VEHICLE_ID || TrainVehicleId > MAX_VEHICLES) return;

	movzx	eax, WORD PTR _TrainVehicleId$2[ebp]
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN2@PutDirectl
	movzx	eax, WORD PTR _TrainVehicleId$2[ebp]
	cmp	eax, 702				; 000002beH
	jle	SHORT $LN3@PutDirectl
$LN2@PutDirectl:
	jmp	SHORT $LN14@PutDirectl
$LN3@PutDirectl:

; 871  : 
; 872  : 		CVehicle* pTrain = pVehiclePool->GetAt(TrainVehicleId);

	movzx	eax, WORD PTR _TrainVehicleId$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehiclePool$3[ebp]
	call	?GetAt@CVehiclePool@@QAEPAVCVehicle@@G@Z ; CVehiclePool::GetAt
	mov	DWORD PTR _pTrain$1[ebp], eax

; 873  : 
; 874  : 		if ( pTrain && pTrain->IsATrainPart() && this == pNetGame->GetPlayerPool()->GetLocalPlayer()->m_pPlayerPed ) {

	cmp	DWORD PTR _pTrain$1[ebp], 0
	je	SHORT $LN1@PutDirectl
	mov	ecx, DWORD PTR _pTrain$1[ebp]
	call	?IsATrainPart@CVehicle@@QAEHXZ		; CVehicle::IsATrainPart
	test	eax, eax
	je	SHORT $LN1@PutDirectl
	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@PutDirectl

; 875  : 			ScriptCommand(&camera_on_vehicle, pTrain->m_dwGTAId, 3, 2);

	push	2
	push	3
	mov	eax, DWORD PTR _pTrain$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _camera_on_vehicle
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H
$LN1@PutDirectl:
$LN14@PutDirectl:

; 876  : 		}
; 877  : 	}
; 878  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PutDirectlyInVehicle@CPlayerPed@@QAEXHH@Z ENDP		; CPlayerPed::PutDirectlyInVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetWeaponModelIndex@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_dwPed$1 = -32						; size = 4
_dwWeaponInfo$ = -20					; size = 4
_this$ = -8						; size = 4
_iWeapon$ = 8						; size = 4
?SetWeaponModelIndex@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::SetWeaponModelIndex, COMDAT
; _this$ = ecx

; 1592 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1593 : 	DWORD dwWeaponInfo;
; 1594 : 
; 1595 : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@SetWeaponM

; 1596 : 		DWORD dwPed = (DWORD)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwPed$1[ebp], ecx

; 1597 : 		dwWeaponInfo = pGame->GetWeaponInfo(iWeapon,1);

	push	1
	mov	eax, DWORD PTR _iWeapon$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetWeaponInfo@CGame@@QAEKHH@Z		; CGame::GetWeaponInfo
	mov	DWORD PTR _dwWeaponInfo$[ebp], eax

; 1598 : 		
; 1599 : 		_asm mov ebx, dwWeaponInfo

	mov	ebx, DWORD PTR _dwWeaponInfo$[ebp]

; 1600 : 		_asm mov eax, [ebx+12]

	mov	eax, DWORD PTR [ebx+12]

; 1601 : 
; 1602 : 		_asm push eax

	push	eax

; 1603 : 		_asm mov ecx, dwPed

	mov	ecx, DWORD PTR _dwPed$1[ebp]

; 1604 : 		_asm mov edx, 0x5E3990

	mov	edx, 6175120				; 005e3990H

; 1605 : 		_asm call edx

	call	edx
$LN2@SetWeaponM:

; 1606 : 	}
; 1607 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWeaponModelIndex@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::SetWeaponModelIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_WeaponSlot$1 = -20					; size = 4
_this$ = -8						; size = 4
?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ PROC	; CPlayerPed::HasAmmoForCurrentWeapon, COMDAT
; _this$ = ecx

; 800  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 801  : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@HasAmmoFor

; 802  : 		WEAPON_SLOT_TYPE * WeaponSlot = GetCurrentWeaponSlot();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@XZ ; CPlayerPed::GetCurrentWeaponSlot
	mov	DWORD PTR _WeaponSlot$1[ebp], eax

; 803  : 
; 804  : 		if(!WeaponSlot) return TRUE;

	cmp	DWORD PTR _WeaponSlot$1[ebp], 0
	jne	SHORT $LN4@HasAmmoFor
	mov	eax, 1
	jmp	SHORT $LN6@HasAmmoFor
$LN4@HasAmmoFor:

; 805  : 		
; 806  : 		// Melee types always have ammo.
; 807  : 		if( WeaponSlot->dwType <= WEAPON_CANE ||
; 808  : 			WeaponSlot->dwType == WEAPON_PARACHUTE ) return TRUE;

	mov	eax, DWORD PTR _WeaponSlot$1[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jbe	SHORT $LN2@HasAmmoFor
	mov	eax, DWORD PTR _WeaponSlot$1[ebp]
	cmp	DWORD PTR [eax], 46			; 0000002eH
	jne	SHORT $LN3@HasAmmoFor
$LN2@HasAmmoFor:
	mov	eax, 1
	jmp	SHORT $LN6@HasAmmoFor
$LN3@HasAmmoFor:

; 809  : 
; 810  : 		if(!WeaponSlot->dwAmmo) return FALSE;

	mov	eax, DWORD PTR _WeaponSlot$1[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN5@HasAmmoFor
	xor	eax, eax
	jmp	SHORT $LN6@HasAmmoFor
$LN5@HasAmmoFor:

; 811  : 	}
; 812  : 	return TRUE;

	mov	eax, 1
$LN6@HasAmmoFor:

; 813  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ ENDP	; CPlayerPed::HasAmmoForCurrentWeapon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?FindWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@K@Z
_TEXT	SEGMENT
_i$1 = -17						; size = 1
_this$ = -8						; size = 4
_dwWeapon$ = 8						; size = 4
?FindWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@K@Z PROC ; CPlayerPed::FindWeaponSlot, COMDAT
; _this$ = ecx

; 1337 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1338 : 	if (m_pPed)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@FindWeapon

; 1339 : 	{
; 1340 : 		BYTE i;
; 1341 : 		for (i = 0; i < 13; i++)

	mov	BYTE PTR _i$1[ebp], 0
	jmp	SHORT $LN4@FindWeapon
$LN3@FindWeapon:
	mov	al, BYTE PTR _i$1[ebp]
	add	al, 1
	mov	BYTE PTR _i$1[ebp], al
$LN4@FindWeapon:
	movzx	eax, BYTE PTR _i$1[ebp]
	cmp	eax, 13					; 0000000dH
	jge	SHORT $LN5@FindWeapon

; 1342 : 		{
; 1343 : 			if (m_pPed->WeaponSlots[i].dwType == dwWeapon) return &m_pPed->WeaponSlots[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movzx	edx, BYTE PTR _i$1[ebp]
	imul	eax, edx, 28
	mov	ecx, DWORD PTR [ecx+eax+1440]
	cmp	ecx, DWORD PTR _dwWeapon$[ebp]
	jne	SHORT $LN1@FindWeapon
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movzx	edx, BYTE PTR _i$1[ebp]
	imul	eax, edx, 28
	lea	eax, DWORD PTR [ecx+eax+1440]
	jmp	SHORT $LN6@FindWeapon
$LN1@FindWeapon:

; 1344 : 		}

	jmp	SHORT $LN3@FindWeapon
$LN5@FindWeapon:

; 1345 : 	}
; 1346 : 	return NULL;

	xor	eax, eax
$LN6@FindWeapon:

; 1347 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?FindWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@K@Z ENDP ; CPlayerPed::FindWeaponSlot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@XZ PROC ; CPlayerPed::GetCurrentWeaponSlot, COMDAT
; _this$ = ecx

; 790  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 791  : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@GetCurrent

; 792  : 		return &m_pPed->WeaponSlots[m_pPed->byteCurWeaponSlot];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	movzx	edx, BYTE PTR [eax+1816]
	imul	eax, edx, 28
	lea	eax, DWORD PTR [ecx+eax+1440]
	jmp	SHORT $LN2@GetCurrent
$LN1@GetCurrent:

; 793  : 	}
; 794  : 	return NULL;

	xor	eax, eax
$LN2@GetCurrent:

; 795  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@XZ ENDP ; CPlayerPed::GetCurrentWeaponSlot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetArmedWeapon@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iWeaponType$ = 8					; size = 4
?SetArmedWeapon@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::SetArmedWeapon, COMDAT
; _this$ = ecx

; 779  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 780  : 	*pbyteCurrentPlayer = m_bytePlayerNumber;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax], dl

; 781  : 
; 782  : 	ScriptCommand(&set_actor_armed_weapon,this->m_dwGTAId,iWeaponType);

	mov	eax, DWORD PTR _iWeaponType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _set_actor_armed_weapon
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 783  : 
; 784  : 	*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0

; 785  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetArmedWeapon@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::SetArmedWeapon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ClearAllWeapons@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_dwPedPtr$ = -20					; size = 4
_this$ = -8						; size = 4
?ClearAllWeapons@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ClearAllWeapons, COMDAT
; _this$ = ecx

; 762  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 763  : 	DWORD dwPedPtr = (DWORD)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwPedPtr$[ebp], ecx

; 764  : 
; 765  : 	*pbyteCurrentPlayer = m_bytePlayerNumber;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax], dl

; 766  : 
; 767  : 	if(dwPedPtr) {

	cmp	DWORD PTR _dwPedPtr$[ebp], 0
	je	SHORT $LN1@ClearAllWe

; 768  : 		_asm mov ecx, dwPedPtr

	mov	ecx, DWORD PTR _dwPedPtr$[ebp]

; 769  : 		_asm mov eax, 0x5E6320

	mov	eax, 6185760				; 005e6320H

; 770  : 		_asm call eax

	call	eax
$LN1@ClearAllWe:

; 771  : 	}
; 772  : 
; 773  : 	*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0

; 774  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAllWeapons@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ClearAllWeapons
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GiveWeapon@CPlayerPed@@QAEXHH@Z
_TEXT	SEGMENT
_dwPedPtr$ = -32					; size = 4
_iModelID$ = -20					; size = 4
_this$ = -8						; size = 4
_iWeaponID$ = 8						; size = 4
_iAmmo$ = 12						; size = 4
?GiveWeapon@CPlayerPed@@QAEXHH@Z PROC			; CPlayerPed::GiveWeapon, COMDAT
; _this$ = ecx

; 726  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 727  : 	int iModelID = 0;

	mov	DWORD PTR _iModelID$[ebp], 0

; 728  : 	iModelID = GameGetWeaponModelIDFromWeaponID(iWeaponID);

	mov	eax, DWORD PTR _iWeaponID$[ebp]
	push	eax
	call	?GameGetWeaponModelIDFromWeaponID@@YGHH@Z ; GameGetWeaponModelIDFromWeaponID
	mov	DWORD PTR _iModelID$[ebp], eax

; 729  : 
; 730  : 	if(iModelID == -1) return;

	cmp	DWORD PTR _iModelID$[ebp], -1
	jne	SHORT $LN4@GiveWeapon
	jmp	$LN5@GiveWeapon
$LN4@GiveWeapon:

; 731  : 
; 732  : 	if(!pGame->IsModelLoaded(iModelID)) {

	mov	eax, DWORD PTR _iModelID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@GiveWeapon

; 733  : 		pGame->RequestModel(iModelID);

	mov	eax, DWORD PTR _iModelID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel

; 734  : 		pGame->LoadRequestedModels();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?LoadRequestedModels@CGame@@QAEXXZ	; CGame::LoadRequestedModels
$LN2@GiveWeapon:

; 735  : 		while(!pGame->IsModelLoaded(iModelID)) Sleep(1);

	mov	eax, DWORD PTR _iModelID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@GiveWeapon
	mov	esi, esp
	push	1
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@GiveWeapon
$LN3@GiveWeapon:

; 736  : 	}
; 737  : 
; 738  : 	//ScriptCommand(&give_actor_weapon,this->m_dwGTAId,iWeaponID,iAmmo);
; 739  : 
; 740  : 	*pbyteCurrentPlayer = m_bytePlayerNumber;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+32]
	mov	BYTE PTR [eax], dl

; 741  : 
; 742  : 	DWORD dwPedPtr = (DWORD)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwPedPtr$[ebp], ecx

; 743  : 
; 744  : 	_asm mov ecx, dwPedPtr

	mov	ecx, DWORD PTR _dwPedPtr$[ebp]

; 745  : 	_asm push 1

	push	1

; 746  : 	_asm push iAmmo

	push	DWORD PTR _iAmmo$[ebp]

; 747  : 	_asm push iWeaponID

	push	DWORD PTR _iWeaponID$[ebp]

; 748  : 	_asm mov edx, 0x5E6080

	mov	edx, 6185088				; 005e6080H

; 749  : 	_asm call edx

	call	edx

; 750  : 
; 751  : 	SetArmedWeapon(iWeaponID);

	mov	eax, DWORD PTR _iWeaponID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetArmedWeapon@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetArmedWeapon

; 752  : 
; 753  : 	*pbyteCurrentPlayer = 0;

	mov	eax, DWORD PTR ?pbyteCurrentPlayer@@3PAEA ; pbyteCurrentPlayer
	mov	BYTE PTR [eax], 0
$LN5@GiveWeapon:

; 754  : 
; 755  : 	//pGame->RemoveModel(iModelID);
; 756  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GiveWeapon@CPlayerPed@@QAEXHH@Z ENDP			; CPlayerPed::GiveWeapon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ForceTargetRotation@CPlayerPed@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fRotation$ = 8						; size = 4
?ForceTargetRotation@CPlayerPed@@QAEXM@Z PROC		; CPlayerPed::ForceTargetRotation, COMDAT
; _this$ = ecx

; 685  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 686  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@ForceTarge
	jmp	SHORT $LN3@ForceTarge
$LN2@ForceTarge:

; 687  : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN1@ForceTarge
	jmp	SHORT $LN3@ForceTarge
$LN1@ForceTarge:

; 688  : 
; 689  : 	m_pPed->fRotation1 = DegToRad(fRotation);

	push	ecx
	movss	xmm0, DWORD PTR _fRotation$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?DegToRad@@YAMM@Z			; DegToRad
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	fstp	DWORD PTR [ecx+1368]

; 690  : 	m_pPed->fRotation2 = DegToRad(fRotation);

	push	ecx
	movss	xmm0, DWORD PTR _fRotation$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?DegToRad@@YAMM@Z			; DegToRad
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	fstp	DWORD PTR [ecx+1372]

; 691  : 
; 692  : 	ScriptCommand(&set_actor_z_angle,m_dwGTAId,fRotation);    

	cvtss2sd xmm0, DWORD PTR _fRotation$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _set_actor_z_angle
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H
$LN3@ForceTarge:

; 693  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ForceTargetRotation@CPlayerPed@@QAEXM@Z ENDP		; CPlayerPed::ForceTargetRotation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetTargetRotation@CPlayerPed@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fRotation$ = 8						; size = 4
?SetTargetRotation@CPlayerPed@@QAEXM@Z PROC		; CPlayerPed::SetTargetRotation, COMDAT
; _this$ = ecx

; 668  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 669  : 	//pChatWindow->AddDebugMessage("deg: %f rad: %f", fRotation, DegToRad(fRotation));
; 670  : 	
; 671  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@SetTargetR
	jmp	SHORT $LN4@SetTargetR
$LN3@SetTargetR:

; 672  : 	if(!GamePool_Ped_GetAt(m_dwGTAId)) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN2@SetTargetR
	jmp	SHORT $LN4@SetTargetR
$LN2@SetTargetR:

; 673  : 
; 674  : 	m_pPed->fRotation2 = DegToRad(fRotation);

	push	ecx
	movss	xmm0, DWORD PTR _fRotation$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?DegToRad@@YAMM@Z			; DegToRad
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	fstp	DWORD PTR [ecx+1372]

; 675  : 
; 676  : 	if(!IsOnGround()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsOnGround@CPlayerPed@@QAEHXZ		; CPlayerPed::IsOnGround
	test	eax, eax
	jne	SHORT $LN1@SetTargetR

; 677  : 		m_pPed->fRotation1 = DegToRad(fRotation);

	push	ecx
	movss	xmm0, DWORD PTR _fRotation$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?DegToRad@@YAMM@Z			; DegToRad
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	fstp	DWORD PTR [ecx+1368]

; 678  : 		ScriptCommand(&set_actor_z_angle,m_dwGTAId,fRotation);

	cvtss2sd xmm0, DWORD PTR _fRotation$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _set_actor_z_angle
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 16					; 00000010H
$LN1@SetTargetR:
$LN4@SetTargetR:

; 679  : 	}
; 680  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTargetRotation@CPlayerPed@@QAEXM@Z ENDP		; CPlayerPed::SetTargetRotation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetTargetRotation@CPlayerPed@@QAEMXZ
_TEXT	SEGMENT
_fRotation$ = -20					; size = 4
_this$ = -8						; size = 4
?GetTargetRotation@CPlayerPed@@QAEMXZ PROC		; CPlayerPed::GetTargetRotation, COMDAT
; _this$ = ecx

; 657  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 658  : 	float fRotation;
; 659  : 	ScriptCommand(&get_actor_z_angle,m_dwGTAId,&fRotation);

	lea	eax, DWORD PTR _fRotation$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _get_actor_z_angle
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 660  : 	return fRotation;

	fld	DWORD PTR _fRotation$[ebp]

; 661  : 
; 662  : 	//return m_pPed->fRotation2;
; 663  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetTargetR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@GetTargetR:
	DD	1
	DD	$LN4@GetTargetR
$LN4@GetTargetR:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@GetTargetR
$LN3@GetTargetR:
	DB	102					; 00000066H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?GetTargetRotation@CPlayerPed@@QAEMXZ ENDP		; CPlayerPed::GetTargetRotation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetAmmo@CPlayerPed@@QAEXEG@Z
_TEXT	SEGMENT
_WeaponSlot$1 = -20					; size = 4
_this$ = -8						; size = 4
_byteWeapon$ = 8					; size = 1
_wordAmmo$ = 12						; size = 2
?SetAmmo@CPlayerPed@@QAEXEG@Z PROC			; CPlayerPed::SetAmmo, COMDAT
; _this$ = ecx

; 1323 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1324 : 	if(m_pPed)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@SetAmmo

; 1325 : 	{
; 1326 : 		//WEAPON_SLOT_TYPE * WeaponSlot = GetCurrentWeaponSlot();
; 1327 : 		WEAPON_SLOT_TYPE * WeaponSlot = FindWeaponSlot((DWORD)byteWeapon);

	movzx	eax, BYTE PTR _byteWeapon$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@K@Z ; CPlayerPed::FindWeaponSlot
	mov	DWORD PTR _WeaponSlot$1[ebp], eax

; 1328 : 		if(!WeaponSlot) return;

	cmp	DWORD PTR _WeaponSlot$1[ebp], 0
	jne	SHORT $LN1@SetAmmo
	jmp	SHORT $LN3@SetAmmo
$LN1@SetAmmo:

; 1329 : 		WeaponSlot->dwAmmo = (DWORD)wordAmmo;

	movzx	eax, WORD PTR _wordAmmo$[ebp]
	mov	ecx, DWORD PTR _WeaponSlot$1[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN3@SetAmmo:

; 1330 : 		//WeaponSlot->dwAmmoInClip = 0;
; 1331 : 	}
; 1332 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAmmo@CPlayerPed@@QAEXEG@Z ENDP			; CPlayerPed::SetAmmo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetAmmo@CPlayerPed@@QAEGXZ
_TEXT	SEGMENT
_WeaponSlot$1 = -20					; size = 4
_this$ = -8						; size = 4
?GetAmmo@CPlayerPed@@QAEGXZ PROC			; CPlayerPed::GetAmmo, COMDAT
; _this$ = ecx

; 1305 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1306 : 	if(m_pPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN4@GetAmmo

; 1307 : 		WEAPON_SLOT_TYPE * WeaponSlot = GetCurrentWeaponSlot();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT_TYPE@@XZ ; CPlayerPed::GetCurrentWeaponSlot
	mov	DWORD PTR _WeaponSlot$1[ebp], eax

; 1308 : 
; 1309 : 		if(!WeaponSlot) return -1;

	cmp	DWORD PTR _WeaponSlot$1[ebp], 0
	jne	SHORT $LN3@GetAmmo
	mov	eax, 65535				; 0000ffffH
	jmp	SHORT $LN5@GetAmmo
$LN3@GetAmmo:

; 1310 : 		
; 1311 : 		// Melee types always have ammo.
; 1312 : 		if( WeaponSlot->dwType <= WEAPON_CANE ||
; 1313 : 			WeaponSlot->dwType == WEAPON_PARACHUTE ) return -1;

	mov	eax, DWORD PTR _WeaponSlot$1[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	jbe	SHORT $LN1@GetAmmo
	mov	eax, DWORD PTR _WeaponSlot$1[ebp]
	cmp	DWORD PTR [eax], 46			; 0000002eH
	jne	SHORT $LN2@GetAmmo
$LN1@GetAmmo:
	mov	eax, 65535				; 0000ffffH
	jmp	SHORT $LN5@GetAmmo
$LN2@GetAmmo:

; 1314 : 
; 1315 : 		return (WORD)WeaponSlot->dwAmmo;

	mov	eax, DWORD PTR _WeaponSlot$1[ebp]
	mov	ax, WORD PTR [eax+12]
	jmp	SHORT $LN5@GetAmmo
$LN4@GetAmmo:

; 1316 : 	}
; 1317 : 	return 0;

	xor	eax, eax
$LN5@GetAmmo:

; 1318 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAmmo@CPlayerPed@@QAEGXZ ENDP			; CPlayerPed::GetAmmo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetActionTrigger@CPlayerPed@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_byteTrigger$ = 8					; size = 1
?SetActionTrigger@CPlayerPed@@QAEXE@Z PROC		; CPlayerPed::SetActionTrigger, COMDAT
; _this$ = ecx

; 636  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 637  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@SetActionT
	jmp	SHORT $LN2@SetActionT
$LN1@SetActionT:

; 638  : 
; 639  : 	m_pPed->dwAction = byteTrigger;

	movzx	eax, BYTE PTR _byteTrigger$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx+1328], eax
$LN2@SetActionT:

; 640  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetActionTrigger@CPlayerPed@@QAEXE@Z ENDP		; CPlayerPed::SetActionTrigger
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetActionTrigger@CPlayerPed@@QAEEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetActionTrigger@CPlayerPed@@QAEEXZ PROC		; CPlayerPed::GetActionTrigger, COMDAT
; _this$ = ecx

; 629  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 	return (BYTE)m_pPed->dwAction;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	al, BYTE PTR [ecx+1328]

; 631  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetActionTrigger@CPlayerPed@@QAEEXZ ENDP		; CPlayerPed::GetActionTrigger
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsInVehicle@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsInVehicle@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsInVehicle, COMDAT
; _this$ = ecx

; 645  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  : 	if(!m_pPed) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@IsInVehicl
	xor	eax, eax
	jmp	SHORT $LN3@IsInVehicl
$LN2@IsInVehicl:

; 647  : 
; 648  : 	if(IN_VEHICLE(m_pPed)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN1@IsInVehicl

; 649  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@IsInVehicl
$LN1@IsInVehicl:

; 650  : 	}
; 651  : 	return FALSE;

	xor	eax, eax
$LN3@IsInVehicl:

; 652  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsInVehicle@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsInVehicle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsDead@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsDead@CPlayerPed@@QAEHXZ PROC				; CPlayerPed::IsDead, COMDAT
; _this$ = ecx

; 620  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 621  : 	if(!m_pPed) return TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@IsDead
	mov	eax, 1
	jmp	SHORT $LN3@IsDead
$LN2@IsDead:

; 622  : 	if(m_pPed->fHealth > 0.0f) return FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR [ecx+1344]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN1@IsDead
	xor	eax, eax
	jmp	SHORT $LN3@IsDead
$LN1@IsDead:

; 623  : 	return TRUE;

	mov	eax, 1
$LN3@IsDead:

; 624  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@CPlayerPed@@QAEHXZ ENDP				; CPlayerPed::IsDead
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetStateFlags@CPlayerPed@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwState$ = 8						; size = 4
?SetStateFlags@CPlayerPed@@QAEXK@Z PROC			; CPlayerPed::SetStateFlags, COMDAT
; _this$ = ecx

; 612  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 613  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@SetStateFl
	jmp	SHORT $LN2@SetStateFl
$LN1@SetStateFl:

; 614  : 	m_pPed->dwStateFlags = dwState;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _dwState$[ebp]
	mov	DWORD PTR [ecx+1132], edx
$LN2@SetStateFl:

; 615  : }	

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStateFlags@CPlayerPed@@QAEXK@Z ENDP			; CPlayerPed::SetStateFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetStateFlags@CPlayerPed@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetStateFlags@CPlayerPed@@QAEKXZ PROC			; CPlayerPed::GetStateFlags, COMDAT
; _this$ = ecx

; 604  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 605  : 	if(!m_pPed) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@GetStateFl
	xor	eax, eax
	jmp	SHORT $LN2@GetStateFl
$LN1@GetStateFl:

; 606  : 	return m_pPed->dwStateFlags;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [ecx+1132]
$LN2@GetStateFl:

; 607  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStateFlags@CPlayerPed@@QAEKXZ ENDP			; CPlayerPed::GetStateFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetArmour@CPlayerPed@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fArmour$ = 8						; size = 4
?SetArmour@CPlayerPed@@QAEXM@Z PROC			; CPlayerPed::SetArmour, COMDAT
; _this$ = ecx

; 596  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 597  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@SetArmour
	jmp	SHORT $LN2@SetArmour
$LN1@SetArmour:

; 598  : 	m_pPed->fArmour = fArmour;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR _fArmour$[ebp]
	movss	DWORD PTR [ecx+1352], xmm0
$LN2@SetArmour:

; 599  : }	

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetArmour@CPlayerPed@@QAEXM@Z ENDP			; CPlayerPed::SetArmour
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetArmour@CPlayerPed@@QAEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetArmour@CPlayerPed@@QAEMXZ PROC			; CPlayerPed::GetArmour, COMDAT
; _this$ = ecx

; 588  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 589  : 	if(!m_pPed) return 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@GetArmour
	fldz
	jmp	SHORT $LN2@GetArmour
$LN1@GetArmour:

; 590  : 	return m_pPed->fArmour;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	fld	DWORD PTR [ecx+1352]
$LN2@GetArmour:

; 591  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetArmour@CPlayerPed@@QAEMXZ ENDP			; CPlayerPed::GetArmour
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetHealth@CPlayerPed@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fHealth$ = 8						; size = 4
?SetHealth@CPlayerPed@@QAEXM@Z PROC			; CPlayerPed::SetHealth, COMDAT
; _this$ = ecx

; 580  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 	if(!m_pPed) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@SetHealth
	jmp	SHORT $LN2@SetHealth
$LN1@SetHealth:

; 582  : 	m_pPed->fHealth = fHealth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	movss	xmm0, DWORD PTR _fHealth$[ebp]
	movss	DWORD PTR [ecx+1344], xmm0
$LN2@SetHealth:

; 583  : }	

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHealth@CPlayerPed@@QAEXM@Z ENDP			; CPlayerPed::SetHealth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetHealth@CPlayerPed@@QAEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetHealth@CPlayerPed@@QAEMXZ PROC			; CPlayerPed::GetHealth, COMDAT
; _this$ = ecx

; 572  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 573  : 	if(!m_pPed) return 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@GetHealth
	fldz
	jmp	SHORT $LN2@GetHealth
$LN1@GetHealth:

; 574  : 	return m_pPed->fHealth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	fld	DWORD PTR [ecx+1344]
$LN2@GetHealth:

; 575  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHealth@CPlayerPed@@QAEMXZ ENDP			; CPlayerPed::GetHealth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?IsOnScreen@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsOnScreen@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsOnScreen, COMDAT
; _this$ = ecx

; 564  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 565  : 	if(m_pPed)	return GameIsEntityOnScreen((DWORD *)m_pPed);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@IsOnScreen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?GameIsEntityOnScreen@@YGHPAK@Z		; GameIsEntityOnScreen
	jmp	SHORT $LN2@IsOnScreen
$LN1@IsOnScreen:

; 566  : 	return FALSE;

	xor	eax, eax
$LN2@IsOnScreen:

; 567  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOnScreen@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsOnScreen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetCurrentVehicleID@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_pVehicle$ = -20					; size = 4
_this$ = -8						; size = 4
?GetCurrentVehicleID@CPlayerPed@@QAEHXZ PROC		; CPlayerPed::GetCurrentVehicleID, COMDAT
; _this$ = ecx

; 522  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 523  : 	if(!m_pPed) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN1@GetCurrent
	xor	eax, eax
	jmp	SHORT $LN2@GetCurrent
$LN1@GetCurrent:

; 524  : 
; 525  : 	VEHICLE_TYPE *pVehicle = (VEHICLE_TYPE *)m_pPed->pVehicle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1420]
	mov	DWORD PTR _pVehicle$[ebp], edx

; 526  : 	return GamePool_Vehicle_GetIndex(pVehicle);

	mov	eax, DWORD PTR _pVehicle$[ebp]
	push	eax
	call	?GamePool_Vehicle_GetIndex@@YGKPAU_VEHICLE_TYPE@@@Z ; GamePool_Vehicle_GetIndex
$LN2@GetCurrent:

; 527  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentVehicleID@CPlayerPed@@QAEHXZ ENDP		; CPlayerPed::GetCurrentVehicleID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetCurrentWeapon@CPlayerPed@@QAEEXZ
_TEXT	SEGMENT
_dwRetVal$ = -20					; size = 4
_this$ = -8						; size = 4
?GetCurrentWeapon@CPlayerPed@@QAEEXZ PROC		; CPlayerPed::GetCurrentWeapon, COMDAT
; _this$ = ecx

; 510  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 511  : 	if(!m_pPed) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@GetCurrent
	xor	al, al
	jmp	SHORT $LN3@GetCurrent
$LN2@GetCurrent:

; 512  : 	if(GamePool_Ped_GetAt(m_dwGTAId) == 0) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	jne	SHORT $LN1@GetCurrent
	xor	al, al
	jmp	SHORT $LN3@GetCurrent
$LN1@GetCurrent:

; 513  : 
; 514  : 	DWORD dwRetVal;
; 515  : 	ScriptCommand(&get_actor_armed_weapon,m_dwGTAId,&dwRetVal);

	lea	eax, DWORD PTR _dwRetVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _get_actor_armed_weapon
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 516  : 	return (BYTE)dwRetVal;

	mov	al, BYTE PTR _dwRetVal$[ebp]
$LN3@GetCurrent:

; 517  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GetCurrent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@GetCurrent:
	DD	1
	DD	$LN6@GetCurrent
$LN6@GetCurrent:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@GetCurrent
$LN5@GetCurrent:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
?GetCurrentWeapon@CPlayerPed@@QAEEXZ ENDP		; CPlayerPed::GetCurrentWeapon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?HideMarker@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?HideMarker@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::HideMarker, COMDAT
; _this$ = ecx

; 556  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 557  : 	if (m_dwArrow) ScriptCommand(&disable_marker, m_dwArrow);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+65], 0
	je	SHORT $LN1@HideMarker
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+65]
	push	ecx
	push	OFFSET _disable_marker
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8
$LN1@HideMarker:

; 558  : 	m_dwArrow = NULL; // Just make sure

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+65], 0

; 559  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?HideMarker@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::HideMarker
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ShowMarker@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ShowMarker@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::ShowMarker, COMDAT
; _this$ = ecx

; 533  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 534  : 	if (m_dwArrow) HideMarker();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+65], 0
	je	SHORT $LN1@ShowMarker
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HideMarker@CPlayerPed@@QAEXXZ		; CPlayerPed::HideMarker
$LN1@ShowMarker:

; 535  : 	ScriptCommand(&create_arrow_above_actor, m_dwGTAId, &m_dwArrow);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 65					; 00000041H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET _create_arrow_above_actor
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 536  : 	//ScriptCommand(&unknown_arrow,dwArrow,0);
; 537  : 	//ScriptCommand(&tie_marker_to_actor, m_dwGTAId, 0, 0, &dwArrow);
; 538  : 	ScriptCommand(&set_marker_color, m_dwArrow, m_bytePlayerNumber-2);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+65]
	push	eax
	push	OFFSET _set_marker_color
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 539  : 	ScriptCommand(&show_on_radar2, m_dwArrow, 2);

	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+65]
	push	ecx
	push	OFFSET _show_on_radar2
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 540  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ShowMarker@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::ShowMarker
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?Destroy@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_dwPedPtr$ = -20					; size = 4
_this$ = -8						; size = 4
?Destroy@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::Destroy, COMDAT
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 	DWORD dwPedPtr = (DWORD)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwPedPtr$[ebp], ecx

; 126  : 
; 127  : 	// If it points to the CPlaceable vtable it's not valid
; 128  : 	if(!m_pPed || !GamePool_Ped_GetAt(m_dwGTAId) || m_pPed->entity.vtable == 0x863C40)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	test	eax, eax
	je	SHORT $LN3@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx], 8797248		; 00863c40H
	jne	SHORT $LN4@Destroy
$LN3@Destroy:

; 129  : 	{
; 130  : 		m_pPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 131  : 		m_pEntity = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 132  : 		m_dwGTAId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 133  : 		return;

	jmp	$LN5@Destroy
$LN4@Destroy:

; 134  : 	}
; 135  : 
; 136  : 	if(m_dwParachuteObject) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+41], 0
	je	SHORT $LN2@Destroy

; 137  : 		ScriptCommand(&disassociate_object,m_dwParachuteObject,0.0f,0.0f,0.0f,0);

	push	0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _disassociate_object
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 138  : 		ScriptCommand(&destroy_object_with_fade,m_dwParachuteObject);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41]
	push	ecx
	push	OFFSET _destroy_object_with_fade
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 139  : 		m_dwParachuteObject = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41], 0
$LN2@Destroy:

; 140  : 	}
; 141  : 
; 142  : 	if(IN_VEHICLE(m_pPed)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+1132]
	and	edx, 256				; 00000100H
	shr	edx, 8
	test	edx, edx
	je	SHORT $LN1@Destroy

; 143  : 		RemoveFromVehicleAndPutAt(100.0f,100.0f,10.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ; CPlayerPed::RemoveFromVehicleAndPutAt
$LN1@Destroy:

; 144  : 	}
; 145  : 
; 146  : 	// FIX FOR PLAYER DESTRUCTION PROBLEM
; 147  : 	_asm mov esi, dwPedPtr

	mov	esi, DWORD PTR _dwPedPtr$[ebp]

; 148  : 	_asm mov eax, [esi+1152]

	mov	eax, DWORD PTR [esi+1152]

; 149  : 	_asm mov dword ptr [eax+76], 0

	mov	DWORD PTR [eax+76], 0

; 150  : 
; 151  : 	// DESTROY METHOD
; 152  : 	_asm mov ecx, dwPedPtr

	mov	ecx, DWORD PTR _dwPedPtr$[ebp]

; 153  : 	_asm mov ebx, [ecx] ; vtable

	mov	ebx, DWORD PTR [ecx]

; 154  : 	_asm push 1

	push	1

; 155  : 	_asm call [ebx] ; destroy

	call	DWORD PTR [ebx]

; 156  : 
; 157  : 	m_pPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 158  : 	m_pEntity = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN5@Destroy:

; 159  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pAim$ = 8						; size = 4
?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z PROC	; CPlayerPed::SetCurrentAim, COMDAT
; _this$ = ecx

; 503  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 504  : 	GameStoreRemotePlayerAim(m_bytePlayerNumber, pAim);

	mov	eax, DWORD PTR _pAim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	push	edx
	call	?GameStoreRemotePlayerAim@@YGXHPAU_CAMERA_AIM@@@Z ; GameStoreRemotePlayerAim

; 505  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z ENDP	; CPlayerPed::SetCurrentAim
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ PROC	; CPlayerPed::GetCurrentAim, COMDAT
; _this$ = ecx

; 496  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 	return GameGetInternalAim();

	call	?GameGetInternalAim@@YGPAU_CAMERA_AIM@@XZ ; GameGetInternalAim

; 498  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ ENDP	; CPlayerPed::GetCurrentAim
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?GetKeys@CPlayerPed@@QAEGPAG0@Z
_TEXT	SEGMENT
_pInternalKeys$ = -32					; size = 4
_wRet$ = -20						; size = 2
_this$ = -8						; size = 4
_lrAnalog$ = 8						; size = 4
_udAnalog$ = 12						; size = 4
?GetKeys@CPlayerPed@@QAEGPAG0@Z PROC			; CPlayerPed::GetKeys, COMDAT
; _this$ = ecx

; 439  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 440  : 	WORD wRet=0;

	xor	eax, eax
	mov	WORD PTR _wRet$[ebp], ax

; 441  : 	GTA_CONTROLSET *pInternalKeys = GameGetInternalKeys();

	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	DWORD PTR _pInternalKeys$[ebp], eax

; 442  : 
; 443  : 	*lrAnalog = pInternalKeys->wKeys1[0]; // left/right analog

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _lrAnalog$[ebp]
	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	mov	cx, WORD PTR [eax+ecx]
	mov	WORD PTR [edx], cx

; 444  : 	*udAnalog = pInternalKeys->wKeys1[1]; // up/down analog

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _udAnalog$[ebp]
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	mov	ax, WORD PTR [edx+eax]
	mov	WORD PTR [ecx], ax

; 445  : 
; 446  : 	if(((short)pInternalKeys->wKeys1[2]) > 0) wRet |= 1; // analog2 L

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _pInternalKeys$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jle	SHORT $LN15@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN15@GetKeys:

; 447  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 448  : 
; 449  : 	if(((short)pInternalKeys->wKeys1[2]) < 0) wRet |= 1; // analog2 R

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _pInternalKeys$[ebp]
	movsx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jge	SHORT $LN14@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN14@GetKeys:

; 450  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 451  : 
; 452  : 	if(((short)pInternalKeys->wKeys1[3]) > 0) wRet |= 1; // analog2 D

	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	jle	SHORT $LN13@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN13@GetKeys:

; 453  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 454  : 
; 455  : 	if(((short)pInternalKeys->wKeys1[3]) < 0) wRet |= 1; // analog2 U

	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movsx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	jge	SHORT $LN12@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN12@GetKeys:

; 456  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 457  : 	
; 458  : 	if(pInternalKeys->wKeys1[21]) wRet |= 1; // walking

	mov	eax, 2
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN11@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN11@GetKeys:

; 459  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 460  : 
; 461  : 	if(pInternalKeys->wKeys1[19]) wRet |= 1; // submission

	mov	eax, 2
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN10@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN10@GetKeys:

; 462  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 463  : 
; 464  : 	if(IsInVehicle() && pInternalKeys->wKeys1[5]) wRet |= 1; // incar look left

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN9@GetKeys
	mov	eax, 2
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN9@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN9@GetKeys:

; 465  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 466  : 	
; 467  : 	if(pInternalKeys->wKeys1[6]) wRet |= 1; // incar handbrake / target

	mov	eax, 2
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN8@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN8@GetKeys:

; 468  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 469  : 
; 470  : 	if(IsInVehicle() && pInternalKeys->wKeys1[7]) wRet |= 1; // incar look right

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN7@GetKeys
	mov	eax, 2
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN7@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN7@GetKeys:

; 471  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 472  : 
; 473  : 	if(pInternalKeys->wKeys1[14]) wRet |= 1; // jump

	mov	eax, 2
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN6@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN6@GetKeys:

; 474  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 475  : 
; 476  : 	if(!IsInJetpackMode() && pInternalKeys->wKeys1[15]) wRet |= 1; // secondary onfoot attack

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInJetpackMode@CPlayerPed@@QAEHXZ	; CPlayerPed::IsInJetpackMode
	test	eax, eax
	jne	SHORT $LN5@GetKeys
	mov	eax, 2
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN5@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN5@GetKeys:

; 477  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 478  : 	
; 479  : 	if(pInternalKeys->wKeys1[16]) wRet |= 1; // sprint

	mov	eax, 2
	shl	eax, 4
	mov	ecx, DWORD PTR _pInternalKeys$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN4@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN4@GetKeys:

; 480  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 481  : 		
; 482  : 	if(HasAmmoForCurrentWeapon() && pInternalKeys->wKeys1[17]) wRet |= 1; // fire

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ ; CPlayerPed::HasAmmoForCurrentWeapon
	test	eax, eax
	je	SHORT $LN3@GetKeys
	mov	eax, 2
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN3@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN3@GetKeys:

; 483  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 484  : 	
; 485  : 	if(pInternalKeys->wKeys1[18]) wRet |= 1; // crouch

	mov	eax, 2
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN2@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN2@GetKeys:

; 486  : 	wRet <<= 1;

	mov	ax, WORD PTR _wRet$[ebp]
	shl	ax, 1
	mov	WORD PTR _wRet$[ebp], ax

; 487  : 
; 488  : 	if(pInternalKeys->wKeys1[4]) wRet |= 1; // secondary fire

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _pInternalKeys$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN1@GetKeys
	movzx	eax, WORD PTR _wRet$[ebp]
	or	eax, 1
	mov	WORD PTR _wRet$[ebp], ax
$LN1@GetKeys:

; 489  : 
; 490  : 	return wRet;

	mov	ax, WORD PTR _wRet$[ebp]

; 491  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetKeys@CPlayerPed@@QAEGPAG0@Z ENDP			; CPlayerPed::GetKeys
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetKeys@CPlayerPed@@QAEXGGG@Z
_TEXT	SEGMENT
_byteVal$ = -29						; size = 1
_pPlayerKeys$ = -20					; size = 4
_this$ = -8						; size = 4
_wKeys$ = 8						; size = 2
_lrAnalog$ = 12						; size = 2
_udAnalog$ = 16						; size = 2
?SetKeys@CPlayerPed@@QAEXGGG@Z PROC			; CPlayerPed::SetKeys, COMDAT
; _this$ = ecx

; 206  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 	GTA_CONTROLSET *pPlayerKeys = GameGetPlayerKeys(m_bytePlayerNumber);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	call	?GameGetPlayerKeys@@YAPAU_GTA_CONTROLSET@@H@Z ; GameGetPlayerKeys
	add	esp, 4
	mov	DWORD PTR _pPlayerKeys$[ebp], eax

; 208  : 	
; 209  : 	 // LEFT/RIGHT
; 210  : 	 if(pPlayerKeys->wKeys1[0] && lrAnalog) {

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN62@SetKeys
	movzx	eax, WORD PTR _lrAnalog$[ebp]
	test	eax, eax
	je	SHORT $LN62@SetKeys

; 211  : 		pPlayerKeys->wKeys1[0] = lrAnalog;

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	ax, WORD PTR _lrAnalog$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 212  : 		pPlayerKeys->wKeys2[0] = lrAnalog;

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	ax, WORD PTR _lrAnalog$[ebp]
	mov	WORD PTR [edx+ecx+48], ax
	jmp	SHORT $LN61@SetKeys
$LN62@SetKeys:

; 213  : 	 } 
; 214  : 	 else if(lrAnalog && !pPlayerKeys->wKeys1[0]) {

	movzx	eax, WORD PTR _lrAnalog$[ebp]
	test	eax, eax
	je	SHORT $LN60@SetKeys
	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN60@SetKeys

; 215  : 		pPlayerKeys->wKeys1[0] = lrAnalog;

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	ax, WORD PTR _lrAnalog$[ebp]
	mov	WORD PTR [edx+ecx], ax

; 216  : 		pPlayerKeys->wKeys2[0] = 0;

	mov	eax, 2
	imul	ecx, eax, 0
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
	jmp	SHORT $LN61@SetKeys
$LN60@SetKeys:

; 217  : 	 }
; 218  : 	 else if(!lrAnalog) {

	movzx	eax, WORD PTR _lrAnalog$[ebp]
	test	eax, eax
	jne	SHORT $LN61@SetKeys

; 219  : 		pPlayerKeys->wKeys1[0] = 0;

	mov	eax, 2
	imul	ecx, eax, 0
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 220  : 		pPlayerKeys->wKeys2[0] = 0;

	mov	eax, 2
	imul	ecx, eax, 0
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN61@SetKeys:

; 221  : 	 }
; 222  : 
; 223  : 	 // UP/DOWN
; 224  : 	 if(pPlayerKeys->wKeys1[1] && udAnalog) {

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN57@SetKeys
	movzx	eax, WORD PTR _udAnalog$[ebp]
	test	eax, eax
	je	SHORT $LN57@SetKeys

; 225  : 		pPlayerKeys->wKeys1[1] = udAnalog;

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	dx, WORD PTR _udAnalog$[ebp]
	mov	WORD PTR [ecx+eax], dx

; 226  : 		pPlayerKeys->wKeys2[1] = udAnalog;

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	dx, WORD PTR _udAnalog$[ebp]
	mov	WORD PTR [ecx+eax+48], dx
	jmp	SHORT $LN56@SetKeys
$LN57@SetKeys:

; 227  : 	 } 
; 228  : 	 else if(udAnalog && !pPlayerKeys->wKeys1[1]) {

	movzx	eax, WORD PTR _udAnalog$[ebp]
	test	eax, eax
	je	SHORT $LN55@SetKeys
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN55@SetKeys

; 229  : 		pPlayerKeys->wKeys1[1] = udAnalog;

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	dx, WORD PTR _udAnalog$[ebp]
	mov	WORD PTR [ecx+eax], dx

; 230  : 		pPlayerKeys->wKeys2[1] = 0;

	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx
	jmp	SHORT $LN56@SetKeys
$LN55@SetKeys:

; 231  : 	 }
; 232  : 	 else if(!udAnalog) {

	movzx	eax, WORD PTR _udAnalog$[ebp]
	test	eax, eax
	jne	SHORT $LN56@SetKeys

; 233  : 		pPlayerKeys->wKeys1[1] = 0;

	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 234  : 		pPlayerKeys->wKeys2[1] = 0;

	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx
$LN56@SetKeys:

; 235  : 	 }
; 236  : 
; 237  : 	 // SECONDARY FIRE (4)
; 238  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN52@SetKeys

; 239  : 		if(pPlayerKeys->wKeys1[4]) {

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN51@SetKeys

; 240  : 			pPlayerKeys->wKeys1[4] = 0xFF;

	mov	eax, 2
	shl	eax, 2
	mov	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 241  : 			pPlayerKeys->wKeys2[4] = 0xFF;

	mov	eax, 2
	shl	eax, 2
	mov	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx

; 242  : 		} else {

	jmp	SHORT $LN50@SetKeys
$LN51@SetKeys:

; 243  : 			pPlayerKeys->wKeys1[4] = 0xFF;

	mov	eax, 2
	shl	eax, 2
	mov	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 244  : 			pPlayerKeys->wKeys2[4] = 0x00;

	mov	eax, 2
	shl	eax, 2
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx
$LN50@SetKeys:

; 245  : 		}
; 246  : 	 } else { 

	jmp	SHORT $LN49@SetKeys
$LN52@SetKeys:

; 247  : 		pPlayerKeys->wKeys1[4] = 0x00;

	mov	eax, 2
	shl	eax, 2
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 248  : 		pPlayerKeys->wKeys2[4] = 0x00;

	mov	eax, 2
	shl	eax, 2
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx
$LN49@SetKeys:

; 249  : 	 }
; 250  : 	 wKeys >>= 1; // 1

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 251  : 
; 252  : 	 // CROUCHING TOGGLE (18)
; 253  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN48@SetKeys

; 254  : 		if(pPlayerKeys->wKeys1[18]) {

	mov	eax, 2
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN47@SetKeys

; 255  : 			pPlayerKeys->wKeys1[18] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 18
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 256  : 			pPlayerKeys->wKeys2[18] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 18
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 257  : 		} else {

	jmp	SHORT $LN46@SetKeys
$LN47@SetKeys:

; 258  : 			pPlayerKeys->wKeys1[18] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 18
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 259  : 			pPlayerKeys->wKeys2[18] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 18
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN46@SetKeys:

; 260  : 		}
; 261  : 	 } else {

	jmp	SHORT $LN45@SetKeys
$LN48@SetKeys:

; 262  : 		pPlayerKeys->wKeys1[18] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 18
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 263  : 		pPlayerKeys->wKeys2[18] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 18
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN45@SetKeys:

; 264  : 	 }
; 265  : 	 wKeys >>= 1; // 2

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 266  : 
; 267  : 	  // FIRING (17)
; 268  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN44@SetKeys

; 269  : 		if(pPlayerKeys->wKeys1[17]) {

	mov	eax, 2
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN43@SetKeys

; 270  : 			pPlayerKeys->wKeys1[17] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 17
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 271  : 			pPlayerKeys->wKeys2[17] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 17
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 272  : 		} else {

	jmp	SHORT $LN42@SetKeys
$LN43@SetKeys:

; 273  : 			pPlayerKeys->wKeys1[17] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 17
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 274  : 			pPlayerKeys->wKeys2[17] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 17
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN42@SetKeys:

; 275  : 		}
; 276  : 	 } else {

	jmp	SHORT $LN41@SetKeys
$LN44@SetKeys:

; 277  : 		pPlayerKeys->wKeys1[17] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 17
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 278  : 		pPlayerKeys->wKeys2[17] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 17
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN41@SetKeys:

; 279  : 	 }
; 280  : 	 wKeys >>= 1; // 3

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 281  : 	 
; 282  : 	  // SPRINT (16)
; 283  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN40@SetKeys

; 284  : 		if(pPlayerKeys->wKeys1[16]) {

	mov	eax, 2
	shl	eax, 4
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN39@SetKeys

; 285  : 			pPlayerKeys->wKeys1[16] = 0xFF;

	mov	eax, 2
	shl	eax, 4
	mov	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 286  : 			pPlayerKeys->wKeys2[16] = 0xFF;

	mov	eax, 2
	shl	eax, 4
	mov	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx

; 287  : 		} else {

	jmp	SHORT $LN38@SetKeys
$LN39@SetKeys:

; 288  : 			pPlayerKeys->wKeys1[16] = 0xFF;

	mov	eax, 2
	shl	eax, 4
	mov	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 289  : 			pPlayerKeys->wKeys2[16] = 0x00;

	mov	eax, 2
	shl	eax, 4
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx
$LN38@SetKeys:

; 290  : 		}
; 291  : 	 } else {

	jmp	SHORT $LN37@SetKeys
$LN40@SetKeys:

; 292  : 		pPlayerKeys->wKeys1[16] = 0x00;

	mov	eax, 2
	shl	eax, 4
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 293  : 		pPlayerKeys->wKeys2[16] = 0x00;

	mov	eax, 2
	shl	eax, 4
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx
$LN37@SetKeys:

; 294  : 	 }
; 295  : 	 wKeys >>= 1; // 4

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 296  : 
; 297  : 
; 298  : 	 // SECONDARY ONFOOT ATTACK (15)
; 299  : 	 if( (wKeys & 1) && !IsInJetpackMode() ) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN36@SetKeys
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsInJetpackMode@CPlayerPed@@QAEHXZ	; CPlayerPed::IsInJetpackMode
	test	eax, eax
	jne	SHORT $LN36@SetKeys

; 300  : 		if(pPlayerKeys->wKeys1[15]) {

	mov	eax, 2
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN35@SetKeys

; 301  : 			pPlayerKeys->wKeys1[15] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 15
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 302  : 			pPlayerKeys->wKeys2[15] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 15
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 303  : 		} else {

	jmp	SHORT $LN34@SetKeys
$LN35@SetKeys:

; 304  : 			pPlayerKeys->wKeys1[15] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 15
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 305  : 			pPlayerKeys->wKeys2[15] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 15
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN34@SetKeys:

; 306  : 		}
; 307  : 	 } else {

	jmp	SHORT $LN33@SetKeys
$LN36@SetKeys:

; 308  : 		pPlayerKeys->wKeys1[15] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 15
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 309  : 		pPlayerKeys->wKeys2[15] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 15
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN33@SetKeys:

; 310  : 	 }
; 311  : 	 wKeys >>= 1; // 5

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 312  : 
; 313  : 	 // JUMP (14)
; 314  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN32@SetKeys

; 315  : 		if(pPlayerKeys->wKeys1[14]) {

	mov	eax, 2
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN31@SetKeys

; 316  : 			pPlayerKeys->wKeys1[14] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 14
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 317  : 			pPlayerKeys->wKeys2[14] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 14
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 318  : 		} else {

	jmp	SHORT $LN30@SetKeys
$LN31@SetKeys:

; 319  : 			pPlayerKeys->wKeys1[14] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 14
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 320  : 			pPlayerKeys->wKeys2[14] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 14
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN30@SetKeys:

; 321  : 		}
; 322  : 	 } else {

	jmp	SHORT $LN29@SetKeys
$LN32@SetKeys:

; 323  : 		pPlayerKeys->wKeys1[14] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 14
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 324  : 		pPlayerKeys->wKeys2[14] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 14
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN29@SetKeys:

; 325  : 	 }
; 326  : 	 wKeys >>= 1; // 6

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 327  : 
; 328  : 	 // INCAR LOOK RIGHT (7)
; 329  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN28@SetKeys

; 330  : 		if(pPlayerKeys->wKeys1[7]) {

	mov	eax, 2
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN27@SetKeys

; 331  : 			pPlayerKeys->wKeys1[7] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 7
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 332  : 			pPlayerKeys->wKeys2[7] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 7
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 333  : 		} else {

	jmp	SHORT $LN26@SetKeys
$LN27@SetKeys:

; 334  : 			pPlayerKeys->wKeys1[7] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 7
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 335  : 			pPlayerKeys->wKeys2[7] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 7
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN26@SetKeys:

; 336  : 		}
; 337  : 	 } else {

	jmp	SHORT $LN25@SetKeys
$LN28@SetKeys:

; 338  : 		pPlayerKeys->wKeys1[7] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 7
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 339  : 		pPlayerKeys->wKeys2[7] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 7
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN25@SetKeys:

; 340  : 	 }
; 341  : 	 wKeys >>= 1; // 7

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 342  : 
; 343  : 	 // INCAR HANDBRAKE / ONFOOT TARGET (6)
; 344  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN24@SetKeys

; 345  : 		if(pPlayerKeys->wKeys1[6]) {

	mov	eax, 2
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN23@SetKeys

; 346  : 			pPlayerKeys->wKeys1[6] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 6
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 347  : 			pPlayerKeys->wKeys2[6] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 6
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 348  : 		} else {

	jmp	SHORT $LN22@SetKeys
$LN23@SetKeys:

; 349  : 			pPlayerKeys->wKeys1[6] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 6
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 350  : 			pPlayerKeys->wKeys2[6] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 6
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN22@SetKeys:

; 351  : 		}
; 352  : 	 } else {

	jmp	SHORT $LN21@SetKeys
$LN24@SetKeys:

; 353  : 		pPlayerKeys->wKeys1[6] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 6
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 354  : 		pPlayerKeys->wKeys2[6] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 6
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN21@SetKeys:

; 355  : 	 }
; 356  : 	 wKeys >>= 1; // 8

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 357  : 
; 358  :  	 // INCAR LOOK LEFT (5)
; 359  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN20@SetKeys

; 360  : 		if(pPlayerKeys->wKeys1[5]) {

	mov	eax, 2
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN19@SetKeys

; 361  : 			pPlayerKeys->wKeys1[5] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 5
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 362  : 			pPlayerKeys->wKeys2[5] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 5
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 363  : 		} else {

	jmp	SHORT $LN18@SetKeys
$LN19@SetKeys:

; 364  : 			pPlayerKeys->wKeys1[5] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 5
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 365  : 			pPlayerKeys->wKeys2[5] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 5
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN18@SetKeys:

; 366  : 		}
; 367  : 	 } else {

	jmp	SHORT $LN17@SetKeys
$LN20@SetKeys:

; 368  : 		pPlayerKeys->wKeys1[5] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 5
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 369  : 		pPlayerKeys->wKeys2[5] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 5
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN17@SetKeys:

; 370  : 	 }
; 371  : 	 wKeys >>= 1; // 9

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 372  : 
; 373  : 	 // SUBMISSION (19)
; 374  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN16@SetKeys

; 375  : 		if(pPlayerKeys->wKeys1[19] == 0xFF) {

	mov	eax, 2
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN15@SetKeys

; 376  : 			pPlayerKeys->wKeys1[19] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 19
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 377  : 			pPlayerKeys->wKeys2[19] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 19
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 378  : 		} else {

	jmp	SHORT $LN14@SetKeys
$LN15@SetKeys:

; 379  : 			pPlayerKeys->wKeys1[19] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 19
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 380  : 			pPlayerKeys->wKeys2[19] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 19
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN14@SetKeys:

; 381  : 		}
; 382  : 	 } else { 

	jmp	SHORT $LN13@SetKeys
$LN16@SetKeys:

; 383  : 		pPlayerKeys->wKeys1[19] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 19
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 384  : 		pPlayerKeys->wKeys2[19] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 19
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN13@SetKeys:

; 385  : 	 }
; 386  : 	 wKeys >>= 1; // 10

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 387  : 
; 388  : 	 // WALKING (21)
; 389  : 	 if(wKeys & 1) {

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	je	SHORT $LN12@SetKeys

; 390  : 		if(pPlayerKeys->wKeys1[21] == 0xFF) {

	mov	eax, 2
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN11@SetKeys

; 391  : 			pPlayerKeys->wKeys1[21] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 21
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 392  : 			pPlayerKeys->wKeys2[21] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 21
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 393  : 		} else {

	jmp	SHORT $LN10@SetKeys
$LN11@SetKeys:

; 394  : 			pPlayerKeys->wKeys1[21] = 0xFF;

	mov	eax, 2
	imul	ecx, eax, 21
	mov	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 395  : 			pPlayerKeys->wKeys2[21] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 21
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN10@SetKeys:

; 396  : 		}
; 397  : 	 } else { 

	jmp	SHORT $LN9@SetKeys
$LN12@SetKeys:

; 398  : 		pPlayerKeys->wKeys1[21] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 21
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 399  : 		pPlayerKeys->wKeys2[21] = 0x00;

	mov	eax, 2
	imul	ecx, eax, 21
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN9@SetKeys:

; 400  : 	 }
; 401  : 	 wKeys >>= 1; // 11

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 402  : 
; 403  : 	 // ANALOG2 D/U
; 404  : 	 BYTE byteVal = wKeys & 3;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 3
	mov	BYTE PTR _byteVal$[ebp], al

; 405  : 	
; 406  : 	 if(byteVal==2) {

	movzx	eax, BYTE PTR _byteVal$[ebp]
	cmp	eax, 2
	jne	SHORT $LN8@SetKeys

; 407  : 		pPlayerKeys->wKeys1[3] = (WORD)(128);

	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, 128				; 00000080H
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 408  : 		pPlayerKeys->wKeys2[3] = (WORD)(128);

	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, 128				; 00000080H
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
	jmp	SHORT $LN7@SetKeys
$LN8@SetKeys:

; 409  : 	 } else if(byteVal==1) {

	movzx	eax, BYTE PTR _byteVal$[ebp]
	cmp	eax, 1
	jne	SHORT $LN6@SetKeys

; 410  : 		pPlayerKeys->wKeys1[3] = (WORD)(-128);

	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, 65408				; 0000ff80H
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 411  : 		pPlayerKeys->wKeys2[3] = (WORD)(-128);

	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, 65408				; 0000ff80H
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx

; 412  : 	 } else {

	jmp	SHORT $LN7@SetKeys
$LN6@SetKeys:

; 413  : 		pPlayerKeys->wKeys1[3] = 0;

	mov	eax, 2
	imul	ecx, eax, 3
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 414  : 		pPlayerKeys->wKeys2[3] = 0;

	mov	eax, 2
	imul	ecx, eax, 3
	xor	edx, edx
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [eax+ecx+48], dx
$LN7@SetKeys:

; 415  : 	 }
; 416  : 	 wKeys >>= 2; // 12-13

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 2
	mov	WORD PTR _wKeys$[ebp], ax

; 417  : 
; 418  : 	 // ANALOG2 L/R
; 419  : 	 byteVal = wKeys & 3;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 3
	mov	BYTE PTR _byteVal$[ebp], al

; 420  : 	
; 421  : 	 if(byteVal==2) {

	movzx	eax, BYTE PTR _byteVal$[ebp]
	cmp	eax, 2
	jne	SHORT $LN4@SetKeys

; 422  : 		pPlayerKeys->wKeys1[2] = (WORD)(128);

	mov	eax, 2
	shl	eax, 1
	mov	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 423  : 		pPlayerKeys->wKeys2[2] = (WORD)(128);

	mov	eax, 2
	shl	eax, 1
	mov	ecx, 128				; 00000080H
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx
	jmp	SHORT $LN3@SetKeys
$LN4@SetKeys:

; 424  : 	 } else if(byteVal==1) {

	movzx	eax, BYTE PTR _byteVal$[ebp]
	cmp	eax, 1
	jne	SHORT $LN2@SetKeys

; 425  : 		pPlayerKeys->wKeys1[2] = (WORD)(-128);

	mov	eax, 2
	shl	eax, 1
	mov	ecx, 65408				; 0000ff80H
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 426  : 		pPlayerKeys->wKeys2[2] = (WORD)(-128);

	mov	eax, 2
	shl	eax, 1
	mov	ecx, 65408				; 0000ff80H
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx

; 427  : 	 } else {

	jmp	SHORT $LN3@SetKeys
$LN2@SetKeys:

; 428  : 		pPlayerKeys->wKeys1[2] = 0;

	mov	eax, 2
	shl	eax, 1
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax], cx

; 429  : 		pPlayerKeys->wKeys2[2] = 0;

	mov	eax, 2
	shl	eax, 1
	xor	ecx, ecx
	mov	edx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [edx+eax+48], cx
$LN3@SetKeys:

; 430  : 	 }
; 431  : 	 // 14-15
; 432  : 
; 433  : 	 GameStoreRemotePlayerKeys(m_bytePlayerNumber,pPlayerKeys);

	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	push	edx
	call	?GameStoreRemotePlayerKeys@@YAXHPAU_GTA_CONTROLSET@@@Z ; GameStoreRemotePlayerKeys
	add	esp, 8

; 434  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetKeys@CPlayerPed@@QAEXGGG@Z ENDP			; CPlayerPed::SetKeys
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?SetInitialState@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_dwPedPtr$ = -20					; size = 4
_this$ = -8						; size = 4
?SetInitialState@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::SetInitialState, COMDAT
; _this$ = ecx

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	DWORD dwPedPtr = (DWORD)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _dwPedPtr$[ebp], ecx

; 176  : 	//int iPlayerNumber = 0;
; 177  : 	//DWORD dwPlayerActorID = 0;
; 178  : 
; 179  : 	_asm push 0

	push	0

; 180  : 	_asm mov ecx, dwPedPtr

	mov	ecx, DWORD PTR _dwPedPtr$[ebp]

; 181  : 	_asm mov edx, 0x60CD20 ; internal_CPlayerPed_SetInitialState

	mov	edx, 6343968				; 0060cd20H

; 182  : 	_asm call edx

	call	edx

; 183  : 	
; 184  : 	/* DESTROY METHOD
; 185  : 	_asm mov ecx, dwPedPtr
; 186  : 	_asm mov ebx, [ecx] ; vtable
; 187  : 	_asm push 1
; 188  : 	_asm call [ebx] ; destroy
; 189  : 	*/
; 190  : 
; 191  : 	// CREATE PLAYER
; 192  : 	/*
; 193  : 	ScriptCommand(&create_player, &iPlayerNumber, x, y, z, &dwPlayerActorID);
; 194  : 	ScriptCommand(&create_actor_from_player,&iPlayerNumber,&dwPlayerActorID);
; 195  : 
; 196  : 	m_dwGTAId = dwPlayerActorID;
; 197  : 	m_pPed = GamePool_Ped_GetAt(m_dwGTAId);
; 198  : 	m_bytePlayerNumber = 0;
; 199  : 	m_pEntity = (ENTITY_TYPE *)GamePool_Ped_GetAt(m_dwGTAId);
; 200  : 	*/
; 201  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetInitialState@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::SetInitialState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ResetPointers@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ResetPointers@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::ResetPointers, COMDAT
; _this$ = ecx

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 	m_pPed = GamePool_Ped_GetAt(m_dwGTAId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Ped_GetAt@@YGPAU_PED_TYPE@@H@Z ; GamePool_Ped_GetAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax

; 168  : 	m_pEntity = (ENTITY_TYPE *)m_pPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+4], edx

; 169  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetPointers@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::ResetPointers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\playerped.cpp
;	COMDAT ?ResetForRespawn@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ResetForRespawn@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ResetForRespawn, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 	ScriptCommand(&set_actor_can_be_decapitated,m_dwGTAId,0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _set_actor_can_be_decapitated
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 119  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetForRespawn@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ResetForRespawn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCEntity@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCEntity@@UAEPAXI@Z PROC				; CEntity::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CEntity@@UAE@XZ			; CEntity::~CEntity
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCEntity@@UAEPAXI@Z ENDP				; CEntity::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.h
;	COMDAT ??1CEntity@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CEntity@@UAE@XZ PROC					; CEntity::~CEntity, COMDAT
; _this$ = ecx

; 20   : 	virtual ~CEntity() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEntity@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CEntity@@UAE@XZ ENDP					; CEntity::~CEntity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.h
;	COMDAT ??0CEntity@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CEntity@@QAE@XZ PROC					; CEntity::CEntity, COMDAT
; _this$ = ecx

; 19   : 	CEntity() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEntity@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CEntity@@QAE@XZ ENDP					; CEntity::CEntity
_TEXT	ENDS
END
