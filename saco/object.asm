; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\game\object.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_create_object DW 0107H
	DB	'ifffv', 00H
	ORG $+10
	ORG $+2
_set_object_rotation DW 0453H
	DB	'ifff', 00H
	ORG $+11
	ORG $+2
_put_object_at DW 01bcH
	DB	'ifff', 00H
	ORG $+11
	ORG $+2
_destroy_object DW 0108H
	DB	'i', 00H
	ORG $+14
CONST	ENDS
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??0CEntity@@QAE@XZ				; CEntity::CEntity
PUBLIC	??1CEntity@@UAE@XZ				; CEntity::~CEntity
PUBLIC	??_GCEntity@@UAEPAXI@Z				; CEntity::`scalar deleting destructor'
PUBLIC	??0CObject@@QAE@HMMMU_VECTOR@@@Z		; CObject::CObject
PUBLIC	??1CObject@@UAE@XZ				; CObject::~CObject
PUBLIC	?Process@CObject@@QAEXM@Z			; CObject::Process
PUBLIC	?DistanceRemaining@CObject@@QAEMPAU_MATRIX4X4@@@Z ; CObject::DistanceRemaining
PUBLIC	?MoveTo@CObject@@QAEXMMMM@Z			; CObject::MoveTo
PUBLIC	?InstantRotate@CObject@@QAEXMMM@Z		; CObject::InstantRotate
PUBLIC	??_GCObject@@UAEPAXI@Z				; CObject::`scalar deleting destructor'
PUBLIC	??_7CEntity@@6B@				; CEntity::`vftable'
PUBLIC	??_7CObject@@6B@				; CObject::`vftable'
PUBLIC	??_R4CEntity@@6B@				; CEntity::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEntity@@@8				; CEntity `RTTI Type Descriptor'
PUBLIC	??_R3CEntity@@8					; CEntity::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEntity@@8					; CEntity::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEntity@@8			; CEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CObject@@6B@				; CObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_sqrt:PROC
EXTRN	?Add@CEntity@@UAEXXZ:PROC			; CEntity::Add
EXTRN	?Remove@CEntity@@UAEXXZ:PROC			; CEntity::Remove
EXTRN	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z:PROC	; CEntity::GetMatrix
EXTRN	?TeleportTo@CEntity@@QAEXMMM@Z:PROC		; CEntity::TeleportTo
EXTRN	??_ECEntity@@UAEPAXI@Z:PROC			; CEntity::`vector deleting destructor'
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	??_ECObject@@UAEPAXI@Z:PROC			; CObject::`vector deleting destructor'
EXTRN	?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z:PROC ; GamePool_Object_GetAt
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CEntity@@8
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$r	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$r	ENDS
;	COMDAT ??_R4CObject@@6B@
rdata$r	SEGMENT
??_R4CObject@@6B@ DD 00H				; CObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCObject@@@8
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEntity@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEntity@@8 DD FLAT:??_R0?AVCEntity@@@8	; CEntity::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEntity@@8
rdata$r	ENDS
;	COMDAT ??_R2CEntity@@8
rdata$r	SEGMENT
??_R2CEntity@@8 DD FLAT:??_R1A@?0A@EA@CEntity@@8	; CEntity::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEntity@@8
rdata$r	SEGMENT
??_R3CEntity@@8 DD 00H					; CEntity::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEntity@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEntity@@@8
data$r	SEGMENT
??_R0?AVCEntity@@@8 DD FLAT:??_7type_info@@6B@		; CEntity `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEntity@@', 00H
data$r	ENDS
;	COMDAT ??_R4CEntity@@6B@
rdata$r	SEGMENT
??_R4CEntity@@6B@ DD 00H				; CEntity::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEntity@@@8
	DD	FLAT:??_R3CEntity@@8
rdata$r	ENDS
;	COMDAT ??_7CObject@@6B@
CONST	SEGMENT
??_7CObject@@6B@ DD FLAT:??_R4CObject@@6B@		; CObject::`vftable'
	DD	FLAT:??_ECObject@@UAEPAXI@Z
	DD	FLAT:?Add@CEntity@@UAEXXZ
	DD	FLAT:?Remove@CEntity@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CEntity@@6B@
CONST	SEGMENT
??_7CEntity@@6B@ DD FLAT:??_R4CEntity@@6B@		; CEntity::`vftable'
	DD	FLAT:??_ECEntity@@UAEPAXI@Z
	DD	FLAT:?Add@CEntity@@UAEXXZ
	DD	FLAT:?Remove@CEntity@@UAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CObject@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CObject@@UAE@XZ$0
__ehfuncinfo$??1CObject@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CObject@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CObject@@QAE@HMMMU_VECTOR@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CObject@@QAE@HMMMU_VECTOR@@@Z$0
__ehfuncinfo$??0CObject@@QAE@HMMMU_VECTOR@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CObject@@QAE@HMMMU_VECTOR@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCObject@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCObject@@UAEPAXI@Z PROC				; CObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CObject@@UAE@XZ			; CObject::~CObject
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCObject@@UAEPAXI@Z ENDP				; CObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\object.cpp
;	COMDAT ?InstantRotate@CObject@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
?InstantRotate@CObject@@QAEXMMM@Z PROC			; CObject::InstantRotate, COMDAT
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 92   : 	ScriptCommand(&set_object_rotation, m_dwGTAId, X, Y, Z);

	cvtss2sd xmm0, DWORD PTR _Z$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _set_object_rotation
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H

; 93   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?InstantRotate@CObject@@QAEXMMM@Z ENDP			; CObject::InstantRotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\object.cpp
;	COMDAT ?MoveTo@CObject@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_X$ = 8							; size = 4
_Y$ = 12						; size = 4
_Z$ = 16						; size = 4
_speed$ = 20						; size = 4
?MoveTo@CObject@@QAEXMMMM@Z PROC			; CObject::MoveTo, COMDAT
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	m_matTarget.pos.X = X;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _X$[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 84   : 	m_matTarget.pos.Y = Y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Y$[ebp]
	movss	DWORD PTR [eax+64], xmm0

; 85   : 	m_matTarget.pos.Z = Z;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _Z$[ebp]
	movss	DWORD PTR [eax+68], xmm0

; 86   : 	m_fMoveSpeed = speed;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _speed$[ebp]
	movss	DWORD PTR [eax+77], xmm0

; 87   : 	m_byteMoving |= 1;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+76], cl

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?MoveTo@CObject@@QAEXMMMM@Z ENDP			; CObject::MoveTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\object.cpp
;	COMDAT ?DistanceRemaining@CObject@@QAEMPAU_MATRIX4X4@@@Z
_TEXT	SEGMENT
_fSZ$ = -44						; size = 4
_fSY$ = -32						; size = 4
_fSX$ = -20						; size = 4
_this$ = -8						; size = 4
_matPos$ = 8						; size = 4
?DistanceRemaining@CObject@@QAEMPAU_MATRIX4X4@@@Z PROC	; CObject::DistanceRemaining, COMDAT
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   : 	float	fSX,fSY,fSZ;
; 75   : 	fSX = (matPos->pos.X - m_matTarget.pos.X) * (matPos->pos.X - m_matTarget.pos.X);

	mov	eax, DWORD PTR _matPos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+48]
	subss	xmm0, DWORD PTR [ecx+60]
	mov	edx, DWORD PTR _matPos$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+48]
	subss	xmm1, DWORD PTR [eax+60]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSX$[ebp], xmm0

; 76   : 	fSY = (matPos->pos.Y - m_matTarget.pos.Y) * (matPos->pos.Y - m_matTarget.pos.Y);

	mov	eax, DWORD PTR _matPos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	subss	xmm0, DWORD PTR [ecx+64]
	mov	edx, DWORD PTR _matPos$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+52]
	subss	xmm1, DWORD PTR [eax+64]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSY$[ebp], xmm0

; 77   : 	fSZ = (matPos->pos.Z - m_matTarget.pos.Z) * (matPos->pos.Z - m_matTarget.pos.Z);

	mov	eax, DWORD PTR _matPos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+56]
	subss	xmm0, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR _matPos$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+56]
	subss	xmm1, DWORD PTR [eax+68]
	mulss	xmm0, xmm1
	movss	DWORD PTR _fSZ$[ebp], xmm0

; 78   : 	return (float)sqrt(fSX + fSY + fSZ);

	movss	xmm0, DWORD PTR _fSX$[ebp]
	addss	xmm0, DWORD PTR _fSY$[ebp]
	addss	xmm0, DWORD PTR _fSZ$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 79   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DistanceRemaining@CObject@@QAEMPAU_MATRIX4X4@@@Z ENDP	; CObject::DistanceRemaining
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\object.cpp
;	COMDAT ?Process@CObject@@QAEXM@Z
_TEXT	SEGMENT
_remaining$1 = -108					; size = 4
_distance$2 = -96					; size = 4
_matPos$3 = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?Process@CObject@@QAEXM@Z PROC				; CObject::Process, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	if (m_byteMoving & 1)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	and	ecx, 1
	je	$LN1@Process

; 45   : 	{
; 46   : 		// Calculate new position based on elapsed time (interpolate)
; 47   : 		// distance = speed * time
; 48   : 		// time = fElapsedTime
; 49   : 		// speed = m_fMoveSpeed
; 50   : 		MATRIX4X4 matPos;
; 51   : 		GetMatrix(&matPos);

	lea	eax, DWORD PTR _matPos$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 52   : 		float distance = fElapsedTime * m_fMoveSpeed;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fElapsedTime$[ebp]
	mulss	xmm0, DWORD PTR [eax+77]
	movss	DWORD PTR _distance$2[ebp], xmm0

; 53   : 		float remaining = DistanceRemaining(&matPos);

	lea	eax, DWORD PTR _matPos$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DistanceRemaining@CObject@@QAEMPAU_MATRIX4X4@@@Z ; CObject::DistanceRemaining
	fstp	DWORD PTR _remaining$1[ebp]

; 54   : 		if (distance >= remaining)

	movss	xmm0, DWORD PTR _distance$2[ebp]
	comiss	xmm0, DWORD PTR _remaining$1[ebp]
	jb	SHORT $LN2@Process

; 55   : 		{
; 56   : 			m_byteMoving &= ~1; // Stop it moving

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+76], cl

; 57   : 			// Force the final location so we don't overshoot slightly
; 58   : 			TeleportTo(m_matTarget.pos.X, m_matTarget.pos.Y, m_matTarget.pos.Z);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+68]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+64]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+60]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo

; 59   : 		}
; 60   : 		else

	jmp	$LN1@Process
$LN2@Process:

; 61   : 		{
; 62   : 			// Else interpolate the new position between the current and final positions
; 63   : 			remaining /= distance; // Calculate ratio

	movss	xmm0, DWORD PTR _remaining$1[ebp]
	divss	xmm0, DWORD PTR _distance$2[ebp]
	movss	DWORD PTR _remaining$1[ebp], xmm0

; 64   : 			matPos.pos.X += (m_matTarget.pos.X - matPos.pos.X) / remaining;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	subss	xmm0, DWORD PTR _matPos$3[ebp+48]
	divss	xmm0, DWORD PTR _remaining$1[ebp]
	addss	xmm0, DWORD PTR _matPos$3[ebp+48]
	movss	DWORD PTR _matPos$3[ebp+48], xmm0

; 65   : 			matPos.pos.Y += (m_matTarget.pos.Y - matPos.pos.Y) / remaining;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	subss	xmm0, DWORD PTR _matPos$3[ebp+52]
	divss	xmm0, DWORD PTR _remaining$1[ebp]
	addss	xmm0, DWORD PTR _matPos$3[ebp+52]
	movss	DWORD PTR _matPos$3[ebp+52], xmm0

; 66   : 			matPos.pos.Z += (m_matTarget.pos.Z - matPos.pos.Z) / remaining;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+68]
	subss	xmm0, DWORD PTR _matPos$3[ebp+56]
	divss	xmm0, DWORD PTR _remaining$1[ebp]
	addss	xmm0, DWORD PTR _matPos$3[ebp+56]
	movss	DWORD PTR _matPos$3[ebp+56], xmm0

; 67   : 			TeleportTo(matPos.pos.X, matPos.pos.Y, matPos.pos.Z);

	push	ecx
	movss	xmm0, DWORD PTR _matPos$3[ebp+56]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _matPos$3[ebp+52]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _matPos$3[ebp+48]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo
$LN1@Process:

; 68   : 		}
; 69   : 	}
; 70   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Process
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN8@Process:
	DD	1
	DD	$LN7@Process
$LN7@Process:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN6@Process
$LN6@Process:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?Process@CObject@@QAEXM@Z ENDP				; CObject::Process
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\object.cpp
;	COMDAT ??1CObject@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CObject@@UAE@XZ PROC					; CObject::~CObject, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CObject@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CObject@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 34   : 	m_pEntity	=	GamePool_Object_GetAt(m_dwGTAId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z ; GamePool_Object_GetAt
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 35   : 	if (m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@CObject

; 36   : 	{
; 37   : 		ScriptCommand(&destroy_object, m_dwGTAId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET _destroy_object
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8
$LN2@CObject:

; 38   : 	}
; 39   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CEntity@@UAE@XZ			; CEntity::~CEntity
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CObject@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CEntity@@UAE@XZ			; CEntity::~CEntity
__ehhandler$??1CObject@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CObject@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CObject@@UAE@XZ ENDP					; CObject::~CObject
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\object.cpp
;	COMDAT ??0CObject@@QAE@HMMMU_VECTOR@@@Z
_TEXT	SEGMENT
_dwRetID$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_iModel$ = 8						; size = 4
_fPosX$ = 12						; size = 4
_fPosY$ = 16						; size = 4
_fPosZ$ = 20						; size = 4
_vecRot$ = 24						; size = 12
??0CObject@@QAE@HMMMU_VECTOR@@@Z PROC			; CObject::CObject, COMDAT
; _this$ = ecx

; 16   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CObject@@QAE@HMMMU_VECTOR@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CEntity@@QAE@XZ			; CEntity::CEntity
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CObject@@6B@

; 17   : 	DWORD dwRetID	= 0;

	mov	DWORD PTR _dwRetID$[ebp], 0

; 18   : 	m_pEntity		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 19   : 	m_dwGTAId		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 20   : 
; 21   : 	ScriptCommand(&create_object, iModel, fPosX, fPosY, fPosZ, &dwRetID);

	lea	eax, DWORD PTR _dwRetID$[ebp]
	push	eax
	cvtss2sd xmm0, DWORD PTR _fPosZ$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fPosY$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fPosX$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _iModel$[ebp]
	push	ecx
	push	OFFSET _create_object
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 22   : 	ScriptCommand(&put_object_at, dwRetID, fPosX, fPosY, fPosZ);

	cvtss2sd xmm0, DWORD PTR _fPosZ$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fPosY$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fPosX$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _dwRetID$[ebp]
	push	eax
	push	OFFSET _put_object_at
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H

; 23   : 	
; 24   : 	m_pEntity	=	GamePool_Object_GetAt(dwRetID);

	mov	eax, DWORD PTR _dwRetID$[ebp]
	push	eax
	call	?GamePool_Object_GetAt@@YGPAU_ENTITY_TYPE@@H@Z ; GamePool_Object_GetAt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 25   : 	m_dwGTAId	=	dwRetID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwRetID$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 26   : 	m_byteMoving = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+76], 0

; 27   : 	m_fMoveSpeed = 0.0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+77], xmm0

; 28   : 
; 29   : 	InstantRotate(vecRot.X, vecRot.Y, vecRot.Z);

	push	ecx
	movss	xmm0, DWORD PTR _vecRot$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vecRot$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _vecRot$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InstantRotate@CObject@@QAEXMMM@Z	; CObject::InstantRotate

; 30   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CObject
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	3
$LN7@CObject:
	DD	1
	DD	$LN6@CObject
$LN6@CObject:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@CObject
$LN4@CObject:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CObject@@QAE@HMMMU_VECTOR@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CEntity@@UAE@XZ			; CEntity::~CEntity
__ehhandler$??0CObject@@QAE@HMMMU_VECTOR@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CObject@@QAE@HMMMU_VECTOR@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CObject@@QAE@HMMMU_VECTOR@@@Z ENDP			; CObject::CObject
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCEntity@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCEntity@@UAEPAXI@Z PROC				; CEntity::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CEntity@@UAE@XZ			; CEntity::~CEntity
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCEntity@@UAEPAXI@Z ENDP				; CEntity::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.h
;	COMDAT ??1CEntity@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CEntity@@UAE@XZ PROC					; CEntity::~CEntity, COMDAT
; _this$ = ecx

; 20   : 	virtual ~CEntity() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEntity@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CEntity@@UAE@XZ ENDP					; CEntity::~CEntity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\entity.h
;	COMDAT ??0CEntity@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CEntity@@QAE@XZ PROC					; CEntity::CEntity, COMDAT
; _this$ = ecx

; 19   : 	CEntity() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CEntity@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CEntity@@QAE@XZ ENDP					; CEntity::CEntity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 1136 :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 775  :     return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 776  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
END
