; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\playertags.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?HealthBarBDRVertices@@3PAUHealthBarVertices_s@@A ; HealthBarBDRVertices
PUBLIC	?HealthBarBGVertices@@3PAUHealthBarVertices_s@@A ; HealthBarBGVertices
PUBLIC	?HealthBarVertices@@3PAUHealthBarVertices_s@@A	; HealthBarVertices
PUBLIC	?m_Metrics@@3PAEA				; m_Metrics
_DATA	SEGMENT
?HealthBarBDRVertices@@3PAUHealthBarVertices_s@@A DD 0be99999ar ; -0.3 ; HealthBarBDRVertices
	DD	0bcf5c28fr			; -0.03
	DD	0bb03126fr			; -0.002
	DD	0ff000000H
	DD	0be99999ar			; -0.3
	DD	03cf5c28fr			; 0.03
	DD	0bb03126fr			; -0.002
	DD	0ff000000H
	DD	03e99999ar			; 0.3
	DD	03cf5c28fr			; 0.03
	DD	0bb03126fr			; -0.002
	DD	0ff000000H
	DD	03e99999ar			; 0.3
	DD	0bcf5c28fr			; -0.03
	DD	0bb03126fr			; -0.002
	DD	0ff000000H
?HealthBarBGVertices@@3PAUHealthBarVertices_s@@A DD 0be947ae1r ; -0.29 ; HealthBarBGVertices
	DD	0bca3d70ar			; -0.02
	DD	0ba83126fr			; -0.001
	DD	0ff7d151eH
	DD	0be947ae1r			; -0.29
	DD	03ca3d70ar			; 0.02
	DD	0ba83126fr			; -0.001
	DD	0ff7d151eH
	DD	03e947ae1r			; 0.29
	DD	03ca3d70ar			; 0.02
	DD	0ba83126fr			; -0.001
	DD	0ff7d151eH
	DD	03e947ae1r			; 0.29
	DD	0bca3d70ar			; -0.02
	DD	0ba83126fr			; -0.001
	DD	0ff7d151eH
?HealthBarVertices@@3PAUHealthBarVertices_s@@A DD 0be947ae1r ; -0.29 ; HealthBarVertices
	DD	0bca3d70ar			; -0.02
	DD	000000000r			; 0
	DD	0ffc32228H
	DD	0be947ae1r			; -0.29
	DD	03ca3d70ar			; 0.02
	DD	000000000r			; 0
	DD	0ffc32228H
	DD	03e947ae1r			; 0.29
	DD	03ca3d70ar			; 0.02
	DD	000000000r			; 0
	DD	0ffc32228H
	DD	03e947ae1r			; 0.29
	DD	0bca3d70ar			; -0.02
	DD	000000000r			; 0
	DD	0ffc32228H
?m_Metrics@@3PAEA DB 015H				; m_Metrics
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	058H
	DB	00H
	DB	015H
	DB	015H
	DB	00H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	07H
	DB	08H
	DB	0aH
	DB	011H
	DB	0dH
	DB	017H
	DB	0fH
	DB	06H
	DB	0aH
	DB	0aH
	DB	0dH
	DB	011H
	DB	08H
	DB	0aH
	DB	08H
	DB	0aH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0aH
	DB	0aH
	DB	011H
	DB	011H
	DB	011H
	DB	0bH
	DB	015H
	DB	0eH
	DB	0eH
	DB	0fH
	DB	010H
	DB	0dH
	DB	0cH
	DB	010H
	DB	010H
	DB	08H
	DB	0aH
	DB	0fH
	DB	0cH
	DB	012H
	DB	010H
	DB	011H
	DB	0dH
	DB	011H
	DB	0fH
	DB	0eH
	DB	0dH
	DB	0fH
	DB	0eH
	DB	015H
	DB	0eH
	DB	0dH
	DB	0eH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	011H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0bH
	DB	0dH
	DB	0dH
	DB	07H
	DB	0dH
	DB	0dH
	DB	06H
	DB	07H
	DB	0cH
	DB	06H
	DB	014H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	09H
	DB	0bH
	DB	08H
	DB	0dH
	DB	0cH
	DB	011H
	DB	0cH
	DB	0cH
	DB	0bH
	DB	0dH
	DB	0aH
	DB	0dH
	DB	011H
	DB	015H
	DB	0dH
	DB	015H
	DB	06H
	DB	0dH
	DB	0aH
	DB	011H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	020H
	DB	0eH
	DB	0aH
	DB	016H
	DB	015H
	DB	0eH
	DB	015H
	DB	015H
	DB	06H
	DB	06H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0dH
	DB	015H
	DB	0dH
	DB	015H
	DB	0bH
	DB	0aH
	DB	015H
	DB	015H
	DB	0bH
	DB	0dH
	DB	07H
	DB	08H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0aH
	DB	0dH
	DB	0dH
	DB	015H
	DB	0bH
	DB	0eH
	DB	011H
	DB	0aH
	DB	015H
	DB	0dH
	DB	0bH
	DB	011H
	DB	0bH
	DB	0bH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	08H
	DB	0dH
	DB	0bH
	DB	0bH
	DB	0eH
	DB	015H
	DB	015H
	DB	015H
	DB	0bH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	014H
	DB	0fH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	014H
	DB	0bH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	011H
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0cH
	DB	0dH
	DB	0cH
_DATA	ENDS
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?Initialise@NameTextVertex_s@CPlayerTags@@QAEXMMMM@Z ; CPlayerTags::NameTextVertex_s::Initialise
PUBLIC	??0CPlayerTags@@QAE@PAUIDirect3DDevice9@@@Z	; CPlayerTags::CPlayerTags
PUBLIC	??1CPlayerTags@@QAE@XZ				; CPlayerTags::~CPlayerTags
PUBLIC	?Begin@CPlayerTags@@QAEXXZ			; CPlayerTags::Begin
PUBLIC	?End@CPlayerTags@@QAEXXZ			; CPlayerTags::End
PUBLIC	?Draw@CPlayerTags@@QAEXPAUD3DXMATRIX@@PADKM@Z	; CPlayerTags::Draw
PUBLIC	?InitQuad@CPlayerTags@@QAEXDMMPAUNameTextVertex_s@1@@Z ; CPlayerTags::InitQuad
PUBLIC	?DeleteDeviceObjects@CPlayerTags@@QAEXXZ	; CPlayerTags::DeleteDeviceObjects
PUBLIC	?RestoreDeviceObjects@CPlayerTags@@QAEXXZ	; CPlayerTags::RestoreDeviceObjects
PUBLIC	??_C@_09FKKGMBBG@bland?4png?$AA@		; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3bbe0ded
PUBLIC	__real@3bf5c28f
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d800000
PUBLIC	__real@3e947ae1
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@41800000
PUBLIC	__real@42c80000
PUBLIC	__real@43800000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_strlen:PROC
EXTRN	_D3DXCreateTextureFromFileExA@56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3e947ae1
CONST	SEGMENT
__real@3e947ae1 DD 03e947ae1r			; 0.29
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3bf5c28f
CONST	SEGMENT
__real@3bf5c28f DD 03bf5c28fr			; 0.0075
CONST	ENDS
;	COMDAT __real@3bbe0ded
CONST	SEGMENT
__real@3bbe0ded DD 03bbe0dedr			; 0.0058
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_09FKKGMBBG@bland?4png?$AA@
CONST	SEGMENT
??_C@_09FKKGMBBG@bland?4png?$AA@ DB 'bland.png', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.cpp
;	COMDAT ?RestoreDeviceObjects@CPlayerTags@@QAEXXZ
_TEXT	SEGMENT
tv658 = -332						; size = 8
tv648 = -332						; size = 8
tv654 = -324						; size = 4
tv644 = -324						; size = 4
_matTemp$1 = -124					; size = 64
_desc$2 = -52						; size = 32
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?RestoreDeviceObjects@CPlayerTags@@QAEXXZ PROC		; CPlayerTags::RestoreDeviceObjects, COMDAT
; _this$ = ecx

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 	if (!m_pTexture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN5@RestoreDev

; 194  : 	{
; 195  : 		if(FAILED(D3DXCreateTextureFromFileEx(m_pDevice, "bland.png", 
; 196  : 			D3DX_DEFAULT, D3DX_DEFAULT, 1, 0, D3DFMT_A8R8G8B8, D3DPOOL_MANAGED,
; 197  : 			D3DX_DEFAULT, D3DX_DEFAULT, 0, NULL, NULL, &m_pTexture)))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	0
	push	0
	push	-1
	push	-1
	push	1
	push	21					; 00000015H
	push	0
	push	1
	push	-1
	push	-1
	push	OFFSET ??_C@_09FKKGMBBG@bland?4png?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_D3DXCreateTextureFromFileExA@56
	test	eax, eax
	jge	SHORT $LN6@RestoreDev

; 198  : 		{
; 199  : 			m_pTexture = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 200  : 		} else {

	jmp	$LN5@RestoreDev
$LN6@RestoreDev:

; 201  : 			D3DSURFACE_DESC desc;
; 202  : 			m_pTexture->GetLevelDesc(0, &desc);

	mov	esi, esp
	lea	eax, DWORD PTR _desc$2[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+68]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 203  : 			m_fCharWidth = desc.Width / 16.0f;

	mov	eax, DWORD PTR _desc$2[ebp+24]
	mov	DWORD PTR tv644[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv644[ebp]
	mov	ecx, DWORD PTR tv644[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv648[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv648[ebp]
	divss	xmm0, DWORD PTR __real@41800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 204  : 			m_fCharHeight = desc.Height / 16.0f;

	mov	eax, DWORD PTR _desc$2[ebp+28]
	mov	DWORD PTR tv654[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv654[ebp]
	mov	ecx, DWORD PTR tv654[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv658[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv658[ebp]
	divss	xmm0, DWORD PTR __real@41800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0
$LN5@RestoreDev:

; 205  : 		}
; 206  : 	}
; 207  : 
; 208  : 	if (!m_pVB)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN3@RestoreDev

; 209  : 	{
; 210  : 		if (FAILED(m_pDevice->CreateVertexBuffer(((MAX_NAME_LENGTH*6)+1)*sizeof(NameTextVertex_s), D3DUSAGE_WRITEONLY|D3DUSAGE_DYNAMIC, NameTextFVF, D3DPOOL_DEFAULT, &m_pVB, NULL)))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	258					; 00000102H
	push	520					; 00000208H
	push	9620					; 00002594H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+104]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN3@RestoreDev

; 211  : 		{
; 212  : 			m_pVB = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@RestoreDev:

; 213  : 		}
; 214  : 	}
; 215  : 
; 216  : 	if (!m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	$LN2@RestoreDev

; 217  : 	{
; 218  : 		D3DXMATRIX matTemp;

	lea	ecx, DWORD PTR _matTemp$1[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 219  : 		D3DXMatrixIdentity(&matTemp);

	lea	eax, DWORD PTR _matTemp$1[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 220  : 
; 221  : 		m_pDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : 		m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 223  : 		m_pDevice->SetRenderState(D3DRS_FOGENABLE, FALSE);

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 224  : 		m_pDevice->SetRenderState(D3DRS_ZENABLE, D3DZB_FALSE);

	mov	esi, esp
	push	0
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 225  : 		m_pDevice->SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 226  : 		m_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 227  : 		m_pDevice->SetRenderState(D3DRS_CLIPPING, TRUE);

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 228  : 		m_pDevice->SetRenderState(D3DRS_VERTEXBLEND, FALSE);

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 229  : 		m_pDevice->SetRenderState(D3DRS_CLIPPLANEENABLE, FALSE);

	mov	esi, esp
	push	0
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 230  : 		m_pDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 231  : 		m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 232  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 233  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 234  : 		m_pDevice->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 235  : 		m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, 0xFFFFFFFF);

	mov	esi, esp
	push	-1
	push	60					; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 236  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 237  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 238  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TFACTOR);

	mov	esi, esp
	push	3
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 239  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 240  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TFACTOR);

	mov	esi, esp
	push	3
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 241  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 242  : 		m_pDevice->SetTransform(D3DTS_WORLD, &matTemp);

	mov	esi, esp
	lea	eax, DWORD PTR _matTemp$1[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+176]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 243  : 		m_pDevice->SetStreamSource(0, NULL, 0, 0);

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+400]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 244  : 		m_pDevice->SetTexture(0, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+260]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 245  : 		m_pDevice->SetFVF(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 246  : 		m_pDevice->EndStateBlock(&m_pOldStates);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+244]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@RestoreDev:

; 247  : 	}
; 248  : 
; 249  : 	if (!m_pNewStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	$LN1@RestoreDev

; 250  : 	{
; 251  : 		m_pDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+240]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 252  : 		m_pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 253  : 		m_pDevice->SetRenderState(D3DRS_FOGENABLE, FALSE);

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 254  : 		m_pDevice->SetRenderState(D3DRS_ZENABLE, D3DZB_TRUE);

	mov	esi, esp
	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 255  : 		m_pDevice->SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 256  : 		m_pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 257  : 		m_pDevice->SetRenderState(D3DRS_CLIPPING, TRUE);

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 258  : 		m_pDevice->SetRenderState(D3DRS_VERTEXBLEND, FALSE);

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 259  : 		m_pDevice->SetRenderState(D3DRS_CLIPPLANEENABLE, FALSE);

	mov	esi, esp
	push	0
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 260  : 		m_pDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 261  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 262  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 263  : 		m_pDevice->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 264  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 265  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 266  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TFACTOR);

	mov	esi, esp
	push	3
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 267  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 268  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TFACTOR);

	mov	esi, esp
	push	3
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 269  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 270  : 		m_pDevice->EndStateBlock(&m_pNewStates);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+244]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@RestoreDev:

; 271  : 	}
; 272  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@RestoreDev
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@RestoreDev:
	DD	2
	DD	$LN12@RestoreDev
$LN12@RestoreDev:
	DD	-52					; ffffffccH
	DD	32					; 00000020H
	DD	$LN10@RestoreDev
	DD	-124					; ffffff84H
	DD	64					; 00000040H
	DD	$LN11@RestoreDev
$LN11@RestoreDev:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN10@RestoreDev:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
?RestoreDeviceObjects@CPlayerTags@@QAEXXZ ENDP		; CPlayerTags::RestoreDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.cpp
;	COMDAT ?DeleteDeviceObjects@CPlayerTags@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DeleteDeviceObjects@CPlayerTags@@QAEXXZ PROC		; CPlayerTags::DeleteDeviceObjects, COMDAT
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 	if (m_pVB)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@DeleteDevi

; 165  : 	{
; 166  : 		m_pVB->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 167  : 		m_pVB = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@DeleteDevi:

; 168  : 	}
; 169  : 
; 170  : 	/*
; 171  : 	if (m_pTexture)
; 172  : 	{
; 173  : 		m_pTexture->Release();
; 174  : 		m_pTexture = NULL;
; 175  : 	}
; 176  : 	*/
; 177  : 
; 178  : 	if (m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@DeleteDevi

; 179  : 	{
; 180  : 		m_pOldStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 181  : 		m_pOldStates = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN2@DeleteDevi:

; 182  : 	}
; 183  : 
; 184  : 	if (m_pNewStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@DeleteDevi

; 185  : 	{
; 186  : 		m_pNewStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 187  : 		m_pNewStates = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN4@DeleteDevi:

; 188  : 	}
; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteDeviceObjects@CPlayerTags@@QAEXXZ ENDP		; CPlayerTags::DeleteDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.cpp
;	COMDAT ?InitQuad@CPlayerTags@@QAEXDMMPAUNameTextVertex_s@1@@Z
_TEXT	SEGMENT
_tv2$ = -80						; size = 4
_tv$ = -68						; size = 4
_tu2$ = -56						; size = 4
_tu$ = -44						; size = 4
_y$ = -32						; size = 4
_x2$ = -20						; size = 4
_this$ = -8						; size = 4
_c$ = 8							; size = 1
_x$ = 12						; size = 4
_y2$ = 16						; size = 4
_pVB$ = 20						; size = 4
?InitQuad@CPlayerTags@@QAEXDMMPAUNameTextVertex_s@1@@Z PROC ; CPlayerTags::InitQuad, COMDAT
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 	float x2  = x + ((float)m_Metrics[c] * m_fScale);

	movsx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, BYTE PTR ?m_Metrics@@3PAEA[eax]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+28]
	addss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _x2$[ebp], xmm0

; 148  : 	float y  = y2 + (m_fCharHeight * m_fScale);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+28]
	addss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0

; 149  : 	float tu  = (c % 16) / 16.0f;

	movsx	eax, BYTE PTR _c$[ebp]
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $LN3@InitQuad
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$LN3@InitQuad:
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR _tu$[ebp], xmm0

; 150  : 	float tu2 = tu + ((1 / 16.0f) * (m_Metrics[c] / m_fCharWidth));

	movsx	eax, BYTE PTR _c$[ebp]
	movzx	ecx, BYTE PTR ?m_Metrics@@3PAEA[eax]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	divss	xmm0, DWORD PTR [edx+20]
	mulss	xmm0, DWORD PTR __real@3d800000
	addss	xmm0, DWORD PTR _tu$[ebp]
	movss	DWORD PTR _tu2$[ebp], xmm0

; 151  : 	float tv  = (c - (c % 16)) / 256.0f;

	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c$[ebp]
	and	ecx, -2147483633			; 8000000fH
	jns	SHORT $LN4@InitQuad
	dec	ecx
	or	ecx, -16				; fffffff0H
	inc	ecx
$LN4@InitQuad:
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@43800000
	movss	DWORD PTR _tv$[ebp], xmm0

; 152  : 	float tv2 = tv + 1 / 16.0f;

	movss	xmm0, DWORD PTR _tv$[ebp]
	addss	xmm0, DWORD PTR __real@3d800000
	movss	DWORD PTR _tv2$[ebp], xmm0

; 153  : 
; 154  : 	pVB[0].Initialise(x,  y2, tu,  tv2);

	push	ecx
	movss	xmm0, DWORD PTR _tv2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tu$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pVB$[ebp]
	call	?Initialise@NameTextVertex_s@CPlayerTags@@QAEXMMMM@Z ; CPlayerTags::NameTextVertex_s::Initialise

; 155  : 	pVB[1].Initialise(x,  y,  tu,  tv);

	push	ecx
	movss	xmm0, DWORD PTR _tv$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tu$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 20					; 00000014H
	shl	ecx, 0
	add	ecx, DWORD PTR _pVB$[ebp]
	call	?Initialise@NameTextVertex_s@CPlayerTags@@QAEXMMMM@Z ; CPlayerTags::NameTextVertex_s::Initialise

; 156  : 	pVB[2].Initialise(x2, y,  tu2, tv);

	push	ecx
	movss	xmm0, DWORD PTR _tv$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tu2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 20					; 00000014H
	shl	ecx, 1
	add	ecx, DWORD PTR _pVB$[ebp]
	call	?Initialise@NameTextVertex_s@CPlayerTags@@QAEXMMMM@Z ; CPlayerTags::NameTextVertex_s::Initialise

; 157  : 	pVB[3] = pVB[0];

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pVB$[ebp]
	mov	edx, 20					; 00000014H
	imul	eax, edx, 3
	add	eax, DWORD PTR _pVB$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx

; 158  : 	pVB[4] = pVB[2];

	mov	eax, 20					; 00000014H
	shl	eax, 1
	add	eax, DWORD PTR _pVB$[ebp]
	mov	ecx, 20					; 00000014H
	shl	ecx, 2
	add	ecx, DWORD PTR _pVB$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 159  : 	pVB[5].Initialise(x2, y2, tu2, tv2);

	push	ecx
	movss	xmm0, DWORD PTR _tv2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _tu2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _pVB$[ebp]
	call	?Initialise@NameTextVertex_s@CPlayerTags@@QAEXMMMM@Z ; CPlayerTags::NameTextVertex_s::Initialise

; 160  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?InitQuad@CPlayerTags@@QAEXDMMPAUNameTextVertex_s@1@@Z ENDP ; CPlayerTags::InitQuad
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.cpp
;	COMDAT ?Draw@CPlayerTags@@QAEXPAUD3DXMATRIX@@PADKM@Z
_TEXT	SEGMENT
tv282 = -268						; size = 4
_i$1 = -68						; size = 4
_i$2 = -56						; size = 4
_fX$ = -44						; size = 4
_vert_ptr$ = -32					; size = 4
_len$ = -20						; size = 4
_this$ = -8						; size = 4
_pWorldTransform$ = 8					; size = 4
_pNameText$ = 12					; size = 4
_dwColor$ = 16						; size = 4
_fHealth$ = 20						; size = 4
?Draw@CPlayerTags@@QAEXPAUD3DXMATRIX@@PADKM@Z PROC	; CPlayerTags::Draw, COMDAT
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 	if ((!m_pVB) || (!m_pTexture))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN12@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN11@Draw
$LN12@Draw:

; 82   : 	{
; 83   : 		RestoreDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreDeviceObjects@CPlayerTags@@QAEXXZ ; CPlayerTags::RestoreDeviceObjects

; 84   : 		if ((!m_pVB) || (!m_pTexture))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN10@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN11@Draw
$LN10@Draw:

; 85   : 			return;

	jmp	$LN14@Draw
$LN11@Draw:

; 86   : 	}
; 87   : 
; 88   : 	// Set the world transform.
; 89   : 	m_pDevice->SetTransform(D3DTS_WORLD, pWorldTransform);

	mov	esi, esp
	mov	eax, DWORD PTR _pWorldTransform$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+176]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   : 
; 91   : 
; 92   : 	// --- begin: NameTag drawing... ---
; 93   : 	m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 94   : 	m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, dwColor);

	mov	esi, esp
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 95   : 	m_pDevice->SetStreamSource(0, m_pVB, 0, sizeof(NameTextVertex_s));

	mov	esi, esp
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+400]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 96   : 	m_pDevice->SetTexture(0, m_pTexture);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+260]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 97   : 	m_pDevice->SetFVF(NameTextFVF);

	mov	esi, esp
	push	258					; 00000102H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 98   : 
; 99   : 	int len = (int)strlen(pNameText);

	mov	eax, DWORD PTR _pNameText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 100  : 	if (len > MAX_NAME_LENGTH)

	cmp	DWORD PTR _len$[ebp], 80		; 00000050H
	jle	SHORT $LN9@Draw

; 101  : 		len = MAX_NAME_LENGTH;

	mov	DWORD PTR _len$[ebp], 80		; 00000050H
$LN9@Draw:

; 102  : 
; 103  : 	NameTextVertex_s *vert_ptr = 0;

	mov	DWORD PTR _vert_ptr$[ebp], 0

; 104  : 	m_pVB->Lock(0, 0, (void**)&vert_ptr, D3DLOCK_DISCARD);

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _vert_ptr$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 105  : 
; 106  : 	float fX = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fX$[ebp], xmm0

; 107  : 	for (int i=0; i<len; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN8@Draw
$LN7@Draw:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN8@Draw:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN6@Draw

; 108  : 	{
; 109  : 		fX += (float)m_Metrics[pNameText[i]] * m_fScale;

	mov	eax, DWORD PTR _pNameText$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR ?m_Metrics@@3PAEA[ecx]
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR _fX$[ebp], xmm0

; 110  : 	}

	jmp	SHORT $LN7@Draw
$LN6@Draw:

; 111  : 	fX = -(fX / 2);

	movss	xmm0, DWORD PTR _fX$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _fX$[ebp], xmm0

; 112  : 
; 113  : 	for (int i=0; i<len; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@Draw
$LN4@Draw:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@Draw:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN3@Draw

; 114  : 	{
; 115  : 		InitQuad(pNameText[i], fX, 0.05f, vert_ptr);

	mov	eax, DWORD PTR _vert_ptr$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@3d4ccccd
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pNameText$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitQuad@CPlayerTags@@QAEXDMMPAUNameTextVertex_s@1@@Z ; CPlayerTags::InitQuad

; 116  : 		fX += (float)m_Metrics[pNameText[i]] * m_fScale;

	mov	eax, DWORD PTR _pNameText$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR ?m_Metrics@@3PAEA[ecx]
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+28]
	addss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR _fX$[ebp], xmm0

; 117  : 		vert_ptr += 6;

	mov	eax, DWORD PTR _vert_ptr$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR _vert_ptr$[ebp], eax

; 118  : 	}

	jmp	SHORT $LN4@Draw
$LN3@Draw:

; 119  : 
; 120  : 	m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 121  : 
; 122  : 	m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, len*2);

	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	mov	esi, esp
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+324]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 123  : 	// --- end: NameTag drawing ---
; 124  : 
; 125  : 
; 126  : 	// --- begin: HealthBar drawing... ---
; 127  : 	m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

	mov	esi, esp
	push	0
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 128  : 	m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, 0xFFFFFFFF);

	mov	esi, esp
	push	-1
	push	60					; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 129  : 	m_pDevice->SetTexture(0, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+260]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 130  : 	m_pDevice->SetFVF(HealthBarFVF);

	mov	esi, esp
	push	66					; 00000042H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+356]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 131  : 
; 132  : 	if (fHealth > 100.0f)

	movss	xmm0, DWORD PTR _fHealth$[ebp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN2@Draw

; 133  : 		fHealth = 100.0f;

	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _fHealth$[ebp], xmm0
$LN2@Draw:

; 134  : 	if (fHealth < 0.0f)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _fHealth$[ebp]
	jbe	SHORT $LN1@Draw

; 135  : 		fHealth = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fHealth$[ebp], xmm0
$LN1@Draw:

; 136  : 
; 137  : 	HealthBarBGVertices[0].x = HealthBarBGVertices[1].x = (0.0058f * fHealth) - 0.29f;

	movss	xmm0, DWORD PTR __real@3bbe0ded
	mulss	xmm0, DWORD PTR _fHealth$[ebp]
	subss	xmm0, DWORD PTR __real@3e947ae1
	movss	DWORD PTR tv282[ebp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movss	xmm0, DWORD PTR tv282[ebp]
	movss	DWORD PTR ?HealthBarBGVertices@@3PAUHealthBarVertices_s@@A[eax], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR tv282[ebp]
	movss	DWORD PTR ?HealthBarBGVertices@@3PAUHealthBarVertices_s@@A[edx], xmm0

; 138  : 
; 139  : 	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarBDRVertices, sizeof(HealthBarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?HealthBarBDRVertices@@3PAUHealthBarVertices_s@@A ; HealthBarBDRVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarBGVertices,  sizeof(HealthBarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?HealthBarBGVertices@@3PAUHealthBarVertices_s@@A ; HealthBarBGVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 141  : 	m_pDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, HealthBarVertices,    sizeof(HealthBarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?HealthBarVertices@@3PAUHealthBarVertices_s@@A ; HealthBarVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@Draw:

; 142  : 	// --- end: HealthBar drawing ---
; 143  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN18@Draw:
	DD	1
	DD	$LN17@Draw
$LN17@Draw:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN16@Draw
$LN16@Draw:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Draw@CPlayerTags@@QAEXPAUD3DXMATRIX@@PADKM@Z ENDP	; CPlayerTags::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.cpp
;	COMDAT ?End@CPlayerTags@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?End@CPlayerTags@@QAEXXZ PROC				; CPlayerTags::End, COMDAT
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 70   : 	if (!m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@End

; 71   : 	{
; 72   : 		RestoreDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreDeviceObjects@CPlayerTags@@QAEXXZ ; CPlayerTags::RestoreDeviceObjects

; 73   : 		if (!m_pOldStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@End

; 74   : 			return;

	jmp	SHORT $LN3@End
$LN2@End:

; 75   : 	}
; 76   : 	m_pOldStates->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@End:

; 77   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?End@CPlayerTags@@QAEXXZ ENDP				; CPlayerTags::End
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.cpp
;	COMDAT ?Begin@CPlayerTags@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Begin@CPlayerTags@@QAEXXZ PROC				; CPlayerTags::Begin, COMDAT
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 	if ((!m_pOldStates) || (!m_pNewStates))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@Begin
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@Begin
$LN3@Begin:

; 59   : 	{
; 60   : 		RestoreDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RestoreDeviceObjects@CPlayerTags@@QAEXXZ ; CPlayerTags::RestoreDeviceObjects

; 61   : 		if ((!m_pOldStates) || (!m_pNewStates))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Begin
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@Begin
$LN1@Begin:

; 62   : 			return;

	jmp	SHORT $LN5@Begin
$LN4@Begin:

; 63   : 	}
; 64   : 	m_pOldStates->Capture();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 65   : 	m_pNewStates->Apply();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@Begin:

; 66   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Begin@CPlayerTags@@QAEXXZ ENDP				; CPlayerTags::Begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.cpp
;	COMDAT ??1CPlayerTags@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CPlayerTags@@QAE@XZ PROC				; CPlayerTags::~CPlayerTags, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	if (m_pTexture) m_pTexture->Release();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@CPlayerTag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CPlayerTag:

; 51   : 	if (m_pVB) m_pVB->Release();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@CPlayerTag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@CPlayerTag:

; 52   : 	if (m_pOldStates) m_pOldStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@CPlayerTag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CPlayerTag:

; 53   : 	if (m_pNewStates) m_pNewStates->Release();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN5@CPlayerTag
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@CPlayerTag:

; 54   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPlayerTags@@QAE@XZ ENDP				; CPlayerTags::~CPlayerTags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.cpp
;	COMDAT ??0CPlayerTags@@QAE@PAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
??0CPlayerTags@@QAE@PAUIDirect3DDevice9@@@Z PROC	; CPlayerTags::CPlayerTags, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 	m_pDevice			= pDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [eax], ecx

; 38   : 	m_pTexture			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 39   : 	m_pVB				= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 40   : 	m_pOldStates		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 41   : 	m_pNewStates		= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 42   : 
; 43   : 	m_fCharWidth		= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 44   : 	m_fCharHeight		= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 45   : 	m_fScale			= 0.0075f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3bf5c28f
	movss	DWORD PTR [eax+28], xmm0

; 46   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CPlayerTags@@QAE@PAUIDirect3DDevice9@@@Z ENDP	; CPlayerTags::CPlayerTags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\playertags.h
;	COMDAT ?Initialise@NameTextVertex_s@CPlayerTags@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_fTu$ = 16						; size = 4
_fTv$ = 20						; size = 4
?Initialise@NameTextVertex_s@CPlayerTags@@QAEXMMMM@Z PROC ; CPlayerTags::NameTextVertex_s::Initialise, COMDAT
; _this$ = ecx

; 29   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 			x	= fX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR [eax], xmm0

; 31   : 			y	= fY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fY$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 32   : 			z	= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 33   : 			tu	= fTu;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fTu$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 34   : 			tv	= fTv;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fTv$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 35   : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Initialise@NameTextVertex_s@CPlayerTags@@QAEXMMMM@Z ENDP ; CPlayerTags::NameTextVertex_s::Initialise
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.inl
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1981 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1982 : #ifdef D3DX_DEBUG
; 1983 :     if(!pOut)
; 1984 :         return NULL;
; 1985 : #endif
; 1986 : 
; 1987 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1988 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1989 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1990 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _pOut$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 3
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+edx], xmm0

; 1991 : 
; 1992 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	imul	eax, edx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _pOut$[ebp]
	mov	edx, 4
	shl	edx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+edx], xmm0

; 1993 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1994 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\include\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
END
