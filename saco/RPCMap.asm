; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\raknet\RPCMap.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0RPCMap@@QAE@XZ				; RPCMap::RPCMap
PUBLIC	??1RPCMap@@QAE@XZ				; RPCMap::~RPCMap
PUBLIC	?Clear@RPCMap@@QAEXXZ				; RPCMap::Clear
PUBLIC	?GetNodeFromIndex@RPCMap@@QAEPAURPCNode@@E@Z	; RPCMap::GetNodeFromIndex
PUBLIC	?GetNodeFromFunctionName@RPCMap@@QAEPAURPCNode@@PAD@Z ; RPCMap::GetNodeFromFunctionName
PUBLIC	?GetIndexFromFunctionName@RPCMap@@QAEEPAD@Z	; RPCMap::GetIndexFromFunctionName
PUBLIC	?AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z ; RPCMap::AddIdentifierWithFunction
PUBLIC	?AddIdentifierAtIndex@RPCMap@@QAEXPADE@Z	; RPCMap::AddIdentifierAtIndex
PUBLIC	?RemoveNode@RPCMap@@QAEXPAD@Z			; RPCMap::RemoveNode
PUBLIC	??0?$List@PAURPCNode@@@DataStructures@@QAE@XZ	; DataStructures::List<RPCNode *>::List<RPCNode *>
PUBLIC	??1?$List@PAURPCNode@@@DataStructures@@QAE@XZ	; DataStructures::List<RPCNode *>::~List<RPCNode *>
PUBLIC	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
PUBLIC	?Insert@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@@Z ; DataStructures::List<RPCNode *>::Insert
PUBLIC	?Replace@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@0I@Z ; DataStructures::List<RPCNode *>::Replace
PUBLIC	?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ ; DataStructures::List<RPCNode *>::Size
PUBLIC	?Clear@?$List@PAURPCNode@@@DataStructures@@QAEX_N@Z ; DataStructures::List<RPCNode *>::Clear
PUBLIC	?__LINE__Var@?1??AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z@4JA ; `RPCMap::AddIdentifierWithFunction'::`2'::__LINE__Var
PUBLIC	??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@ ; `string'
PUBLIC	??_C@_1EG@LHOAIDHM@?$AAr?$AAp?$AAc?$AAS?$AAe?$AAt?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CL?$AA1?$AA?5?$AA?$DM?$AA?5?$AAM?$AAA?$AAX?$AA_?$AAR?$AAP?$AAC?$AA_?$AAM?$AAA?$AAP?$AA_?$AAS?$AAI@ ; `string'
PUBLIC	??_C@_1FA@CLDJMMNH@?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi@ ; `string'
PUBLIC	??_C@_1CA@BIIAIKKJ@?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	?__LINE__Var@?1??AddIdentifierAtIndex@RPCMap@@QAEXPADE@Z@4JA ; `RPCMap::AddIdentifierAtIndex'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??RemoveNode@RPCMap@@QAEXPAD@Z@4JA ; `RPCMap::RemoveNode'::`2'::__LINE__Var
PUBLIC	??_C@_1DG@FAMDJGK@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAD?$AAE?$AAF?$AAI?$AAN?$AAE?$AAD?$AA_?$AAR?$AAP?$AAC?$AA_?$AAI?$AAN?$AAD?$AAE?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ ; `string'
PUBLIC	??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@KHAHCBKC@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$AA@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__wassert:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DE@KHAHCBKC@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@KHAHCBKC@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$AA@ DB 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '+', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
CONST	SEGMENT
??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'd', 00H, 's', 00H, '_'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@FAMDJGK@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAD?$AAE?$AAF?$AAI?$AAN?$AAE?$AAD?$AA_?$AAR?$AAP?$AAC?$AA_?$AAI?$AAN?$AAD?$AAE?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@FAMDJGK@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAD?$AAE?$AAF?$AAI?$AAN?$AAE?$AAD?$AA_?$AAR?$AAP?$AAC?$AA_?$AAI?$AAN?$AAD?$AAE?$AAX?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '!', 00H, '=', 00H
	DB	'U', 00H, 'N', 00H, 'D', 00H, 'E', 00H, 'F', 00H, 'I', 00H, 'N'
	DB	00H, 'E', 00H, 'D', 00H, '_', 00H, 'R', 00H, 'P', 00H, 'C', 00H
	DB	'_', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'E', 00H, 'X', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??RemoveNode@RPCMap@@QAEXPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??RemoveNode@RPCMap@@QAEXPAD@Z@4JA DD 09bH ; `RPCMap::RemoveNode'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??AddIdentifierAtIndex@RPCMap@@QAEXPADE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddIdentifierAtIndex@RPCMap@@QAEXPADE@Z@4JA DD 06cH ; `RPCMap::AddIdentifierAtIndex'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@BIIAIKKJ@?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@BIIAIKKJ@?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'f'
	DB	00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 'P', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@CLDJMMNH@?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi@
CONST	SEGMENT
??_C@_1FA@CLDJMMNH@?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi@ DB 'u'
	DB	00H, 'n', 00H, 'i', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 'I', 00H
	DB	'd', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'f', 00H, 'i'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'u', 00H, 'n', 00H, 'i', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 'I'
	DB	00H, 'd', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'f', 00H
	DB	'i', 00H, 'e', 00H, 'r', 00H, '[', 00H, '0', 00H, ']', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@LHOAIDHM@?$AAr?$AAp?$AAc?$AAS?$AAe?$AAt?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CL?$AA1?$AA?5?$AA?$DM?$AA?5?$AAM?$AAA?$AAX?$AA_?$AAR?$AAP?$AAC?$AA_?$AAM?$AAA?$AAP?$AA_?$AAS?$AAI@
CONST	SEGMENT
??_C@_1EG@LHOAIDHM@?$AAr?$AAp?$AAc?$AAS?$AAe?$AAt?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CL?$AA1?$AA?5?$AA?$DM?$AA?5?$AAM?$AAA?$AAX?$AA_?$AAR?$AAP?$AAC?$AA_?$AAM?$AAA?$AAP?$AA_?$AAS?$AAI@ DB 'r'
	DB	00H, 'p', 00H, 'c', 00H, 'S', 00H, 'e', 00H, 't', 00H, '.', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H, ')', 00H, '+'
	DB	00H, '1', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'M', 00H, 'A', 00H
	DB	'X', 00H, '_', 00H, 'R', 00H, 'P', 00H, 'C', 00H, '_', 00H, 'M'
	DB	00H, 'A', 00H, 'P', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@
CONST	SEGMENT
??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'k', 00H
	DB	'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'r', 00H, 'p', 00H, 'c'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '.', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z@4JA DD 043H ; `RPCMap::AddIdentifierWithFunction'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RPCMap@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1RPCMap@@QAE@XZ$0
__ehfuncinfo$??1RPCMap@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1RPCMap@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Clear@?$List@PAURPCNode@@@DataStructures@@QAEX_N@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
_doNotDeallocate$ = 8					; size = 1
?Clear@?$List@PAURPCNode@@@DataStructures@@QAEX_N@Z PROC ; DataStructures::List<RPCNode *>::Clear, COMDAT
; _this$ = ecx

; 379  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  : 		if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Clear

; 381  : 			return;

	jmp	SHORT $LN3@Clear
$LN2@Clear:

; 382  : 
; 383  : 		if (allocation_size>512 && doNotDeallocate==false)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 512			; 00000200H
	jbe	SHORT $LN1@Clear
	movzx	eax, BYTE PTR _doNotDeallocate$[ebp]
	test	eax, eax
	jne	SHORT $LN1@Clear

; 384  : 		{
; 385  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 386  : 			allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 387  : 			listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@Clear:

; 388  : 		}
; 389  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@Clear:

; 390  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@?$List@PAURPCNode@@@DataStructures@@QAEX_N@Z ENDP ; DataStructures::List<RPCNode *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ PROC	; DataStructures::List<RPCNode *>::Size, COMDAT
; _this$ = ecx

; 373  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 		return list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 375  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ ENDP	; DataStructures::List<RPCNode *>::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Replace@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@0I@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_array$3 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
_filler$ = 12						; size = 4
_position$ = 16						; size = 4
?Replace@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@0I@Z PROC ; DataStructures::List<RPCNode *>::Replace, COMDAT
; _this$ = ecx

; 278  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 		if ( ( list_size > 0 ) && ( position < list_size ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jbe	SHORT $LN5@Replace
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN5@Replace

; 280  : 		{
; 281  : 			// Direct replacement
; 282  : 			listArray[ position ] = input;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _position$[ebp]
	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 283  : 		}
; 284  : 		else

	jmp	$LN6@Replace
$LN5@Replace:

; 285  : 		{
; 286  : 			if ( position >= allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN2@Replace

; 287  : 			{
; 288  : 				// Reallocate the list to size position and fill in blanks with filler
; 289  : 				list_type * new_array;
; 290  : 				allocation_size = position + 1;

	mov	eax, DWORD PTR _position$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 291  : 
; 292  : 				new_array = new list_type [ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _new_array$3[ebp], eax

; 293  : 
; 294  : 				// copy old array over
; 295  : 
; 296  : 				//for ( unsigned int counter = 0; counter < list_size; ++counter )
; 297  : 				//	new_array[ counter ] = listArray[ counter ];
; 298  : 
; 299  : 				// Don't call constructors, assignment operators, etc.
; 300  : 				memcpy(new_array, listArray, list_size*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _new_array$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 301  : 
; 302  : 				// set old array to point to the newly allocated array
; 303  : 				delete[] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 304  : 
; 305  : 				listArray = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$3[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Replace:

; 306  : 			}
; 307  : 
; 308  : 			// Fill in holes with filler
; 309  : 			while ( list_size < position )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _position$[ebp]
	jae	SHORT $LN1@Replace

; 310  : 				listArray[ list_size++ ] = filler;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _filler$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Replace
$LN1@Replace:

; 311  : 
; 312  : 			// Fill in the last element with the new item
; 313  : 			listArray[ list_size++ ] = input;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 314  : 
; 315  : #ifdef _DEBUG
; 316  : 
; 317  : 			assert( list_size == position + 1 );

	mov	eax, DWORD PTR _position$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], eax
	je	SHORT $LN6@Replace
	push	317					; 0000013dH
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1DE@KHAHCBKC@?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@Replace:

; 318  : 
; 319  : #endif
; 320  : 
; 321  : 		}
; 322  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Replace@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@0I@Z ENDP ; DataStructures::List<RPCNode *>::Replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ?Insert@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
$T2 = -224						; size = 4
_new_array$3 = -20					; size = 4
_this$ = -8						; size = 4
_input$ = 8						; size = 4
?Insert@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@@Z PROC ; DataStructures::List<RPCNode *>::Insert, COMDAT
; _this$ = ecx

; 242  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 243  : 		// Reallocate list if necessary
; 244  : 
; 245  : 		if ( list_size == allocation_size )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@Insert

; 246  : 		{
; 247  : 			// allocate twice the currently allocated memory
; 248  : 			list_type * new_array;
; 249  : 
; 250  : 			if ( allocation_size == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@Insert

; 251  : 				allocation_size = 16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 16			; 00000010H

; 252  : 			else

	jmp	SHORT $LN1@Insert
$LN2@Insert:

; 253  : 				allocation_size *= 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@Insert:

; 254  : 
; 255  : 			new_array = new list_type [ allocation_size ];

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _new_array$3[ebp], eax

; 256  : 
; 257  : 			// copy old array over
; 258  : 			//	for ( unsigned int counter = 0; counter < list_size; ++counter )
; 259  : 			//		new_array[ counter ] = listArray[ counter ];
; 260  : 
; 261  : 			// Don't call constructors, assignment operators, etc.
; 262  : 			memcpy(new_array, listArray, list_size*sizeof(list_type));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _new_array$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 263  : 
; 264  : 			// set old array to point to the newly allocated and twice as large array
; 265  : 			delete[] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 266  : 
; 267  : 			listArray = new_array;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_array$3[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Insert:

; 268  : 		}
; 269  : 
; 270  : 		// Insert the new item at the correct spot
; 271  : 		listArray[ list_size ] = input;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 272  : 
; 273  : 		++list_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 274  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Insert@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@@Z ENDP ; DataStructures::List<RPCNode *>::Insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z PROC ; DataStructures::List<RPCNode *>::operator[], COMDAT
; _this$ = ecx

; 185  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 186  : #ifdef _DEBUG
; 187  : 		assert ( position < list_size );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN3@operator
	push	187					; 000000bbH
	push	OFFSET ??_C@_1EE@MBOIAKFO@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAd?$AAs?$AA_?$AAl?$AAi?$AAs?$AAt?$AA?4@
	push	OFFSET ??_C@_1CK@HINNGFPG@?$AAp?$AAo?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?$DM?$AA?5?$AAl?$AAi?$AAs?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 188  : #endif
; 189  : 		return listArray[ position ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _position$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 190  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ENDP ; DataStructures::List<RPCNode *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??1?$List@PAURPCNode@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$List@PAURPCNode@@@DataStructures@@QAE@XZ PROC	; DataStructures::List<RPCNode *>::~List<RPCNode *>, COMDAT
; _this$ = ecx

; 121  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		if (allocation_size>0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jbe	SHORT $LN2@List

; 123  : 			delete [] listArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@List:

; 124  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@PAURPCNode@@@DataStructures@@QAE@XZ ENDP	; DataStructures::List<RPCNode *>::~List<RPCNode *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\ds_list.h
;	COMDAT ??0?$List@PAURPCNode@@@DataStructures@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$List@PAURPCNode@@@DataStructures@@QAE@XZ PROC	; DataStructures::List<RPCNode *>::List<RPCNode *>, COMDAT
; _this$ = ecx

; 113  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		allocation_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 115  : 		listArray = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 116  : 		list_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@PAURPCNode@@@DataStructures@@QAE@XZ ENDP	; DataStructures::List<RPCNode *>::List<RPCNode *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ?RemoveNode@RPCMap@@QAEXPAD@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_node$ = -32						; size = 4
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_uniqueIdentifier$ = 8					; size = 4
?RemoveNode@RPCMap@@QAEXPAD@Z PROC			; RPCMap::RemoveNode, COMDAT
; _this$ = ecx

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 	unsigned index;
; 157  : 	index=GetIndexFromFunctionName(uniqueIdentifier);

	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIndexFromFunctionName@RPCMap@@QAEEPAD@Z ; RPCMap::GetIndexFromFunctionName
	movzx	ecx, al
	mov	DWORD PTR _index$[ebp], ecx

; 158  :     #ifdef _DEBUG
; 159  : 	assert(index!=UNDEFINED_RPC_INDEX); // If this hits then the user was removing an RPC call that wasn't currently registered

	cmp	DWORD PTR _index$[ebp], 255		; 000000ffH
	jne	SHORT $LN3@RemoveNode
	mov	eax, DWORD PTR ?__LINE__Var@?1??RemoveNode@RPCMap@@QAEXPAD@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@
	push	OFFSET ??_C@_1DG@FAMDJGK@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?$CB?$AA?$DN?$AAU?$AAN?$AAD?$AAE?$AAF?$AAI?$AAN?$AAE?$AAD?$AA_?$AAR?$AAP?$AAC?$AA_?$AAI?$AAN?$AAD?$AAE?$AAX?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@RemoveNode:

; 160  : 	#endif
; 161  : 	RPCNode *node;
; 162  : 	node = rpcSet[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _node$[ebp], ecx

; 163  : 	delete [] node->uniqueIdentifier;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 164  : 	delete node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 165  : 	rpcSet[index]=0;

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	DWORD PTR [eax], 0

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveNode@RPCMap@@QAEXPAD@Z ENDP			; RPCMap::RemoveNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ?AddIdentifierAtIndex@RPCMap@@QAEXPADE@Z
_TEXT	SEGMENT
$T1 = -308						; size = 4
$T2 = -296						; size = 4
$T3 = -284						; size = 4
$T4 = -272						; size = 4
$T5 = -260						; size = 4
$T6 = -248						; size = 4
_oldNode$ = -44						; size = 4
_node$ = -32						; size = 4
_existingNodeIndex$ = -20				; size = 4
_this$ = -8						; size = 4
_uniqueIdentifier$ = 8					; size = 4
_insertionIndex$ = 12					; size = 1
?AddIdentifierAtIndex@RPCMap@@QAEXPADE@Z PROC		; RPCMap::AddIdentifierAtIndex, COMDAT
; _this$ = ecx

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 109  : #ifdef _DEBUG
; 110  : 	assert(uniqueIdentifier && uniqueIdentifier[0]);

	cmp	DWORD PTR _uniqueIdentifier$[ebp], 0
	je	SHORT $LN8@AddIdentif
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _uniqueIdentifier$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN9@AddIdentif
$LN8@AddIdentif:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AddIdentifierAtIndex@RPCMap@@QAEXPADE@Z@4JA
	add	ecx, 2
	push	ecx
	push	OFFSET ??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@
	push	OFFSET ??_C@_1FA@CLDJMMNH@?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@AddIdentif:

; 111  : #endif
; 112  : 
; 113  : 	unsigned existingNodeIndex;
; 114  : 	RPCNode *node, *oldNode;
; 115  : 
; 116  : 	existingNodeIndex=GetIndexFromFunctionName(uniqueIdentifier);

	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIndexFromFunctionName@RPCMap@@QAEEPAD@Z ; RPCMap::GetIndexFromFunctionName
	movzx	ecx, al
	mov	DWORD PTR _existingNodeIndex$[ebp], ecx

; 117  : 
; 118  : 	if (existingNodeIndex==insertionIndex)

	movzx	eax, BYTE PTR _insertionIndex$[ebp]
	cmp	DWORD PTR _existingNodeIndex$[ebp], eax
	jne	SHORT $LN5@AddIdentif

; 119  : 		return; // Already there

	jmp	$LN6@AddIdentif
$LN5@AddIdentif:

; 120  : 
; 121  : 	if ((RPCIndex)existingNodeIndex!=UNDEFINED_RPC_INDEX)

	movzx	eax, BYTE PTR _existingNodeIndex$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN4@AddIdentif

; 122  : 	{
; 123  : 		// Delete the existing one
; 124  : 		oldNode=rpcSet[existingNodeIndex];

	mov	eax, DWORD PTR _existingNodeIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _oldNode$[ebp], ecx

; 125  : 		rpcSet[existingNodeIndex]=0;

	mov	eax, DWORD PTR _existingNodeIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	DWORD PTR [eax], 0

; 126  : 		delete [] oldNode->uniqueIdentifier;

	mov	eax, DWORD PTR _oldNode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 127  : 		delete oldNode;

	mov	eax, DWORD PTR _oldNode$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@AddIdentif:

; 128  : 	}
; 129  : 
; 130  : 	node = new RPCNode;

	push	9
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 131  : 	node->uniqueIdentifier = new char [strlen(uniqueIdentifier)+1];

	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], edx

; 132  : 	strcpy(node->uniqueIdentifier, uniqueIdentifier);

	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcpy
	add	esp, 8

; 133  : 	node->functionPointer=0;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], 0

; 134  : 
; 135  : 	// Insert at a user specified spot
; 136  : 	if (insertionIndex < rpcSet.Size())

	movzx	esi, BYTE PTR _insertionIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ ; DataStructures::List<RPCNode *>::Size
	cmp	esi, eax
	jae	SHORT $LN3@AddIdentif

; 137  : 	{
; 138  : 		// Overwrite what is there already
; 139  : 		oldNode=rpcSet[insertionIndex];

	movzx	eax, BYTE PTR _insertionIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _oldNode$[ebp], ecx

; 140  : 		if (oldNode)

	cmp	DWORD PTR _oldNode$[ebp], 0
	je	SHORT $LN2@AddIdentif

; 141  : 		{
; 142  : 			delete [] oldNode->uniqueIdentifier;

	mov	eax, DWORD PTR _oldNode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 143  : 			delete oldNode;

	mov	eax, DWORD PTR _oldNode$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@AddIdentif:

; 144  : 		}
; 145  : 		rpcSet[insertionIndex]=node;

	movzx	eax, BYTE PTR _insertionIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax], ecx

; 146  : 	}
; 147  : 	else

	jmp	SHORT $LN6@AddIdentif
$LN3@AddIdentif:

; 148  : 	{
; 149  : 		// Insert after the end of the list and use 0 as a filler for the empty spots
; 150  : 		rpcSet.Replace(node, 0, insertionIndex);

	movzx	eax, BYTE PTR _insertionIndex$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Replace@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@0I@Z ; DataStructures::List<RPCNode *>::Replace
$LN6@AddIdentif:

; 151  : 	}
; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddIdentifierAtIndex@RPCMap@@QAEXPADE@Z ENDP		; RPCMap::AddIdentifierAtIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ?AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
$T2 = -248						; size = 4
_node$ = -44						; size = 4
_existingNodeIndex$ = -32				; size = 4
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_uniqueIdentifier$ = 8					; size = 4
_functionPointer$ = 12					; size = 4
_isPointerToMember$ = 16				; size = 1
?AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z PROC	; RPCMap::AddIdentifierWithFunction, COMDAT
; _this$ = ecx

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : #ifdef _DEBUG
; 69   : 	assert(rpcSet.Size()+1 < MAX_RPC_MAP_SIZE); // If this hits change the typedef of RPCIndex to use an unsigned short

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ ; DataStructures::List<RPCNode *>::Size
	add	eax, 1
	cmp	eax, 254				; 000000feH
	jb	SHORT $LN8@AddIdentif
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@
	push	OFFSET ??_C@_1EG@LHOAIDHM@?$AAr?$AAp?$AAc?$AAS?$AAe?$AAt?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$CL?$AA1?$AA?5?$AA?$DM?$AA?5?$AAM?$AAA?$AAX?$AA_?$AAR?$AAP?$AAC?$AA_?$AAM?$AAA?$AAP?$AA_?$AAS?$AAI@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN8@AddIdentif:

; 70   : 	assert(uniqueIdentifier && uniqueIdentifier[0]);

	cmp	DWORD PTR _uniqueIdentifier$[ebp], 0
	je	SHORT $LN9@AddIdentif
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _uniqueIdentifier$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN10@AddIdentif
$LN9@AddIdentif:
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z@4JA
	add	ecx, 3
	push	ecx
	push	OFFSET ??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@
	push	OFFSET ??_C@_1FA@CLDJMMNH@?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAu?$AAn?$AAi?$AAq?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN10@AddIdentif:

; 71   : 	assert(functionPointer);

	cmp	DWORD PTR _functionPointer$[ebp], 0
	jne	SHORT $LN11@AddIdentif
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@
	push	OFFSET ??_C@_1CA@BIIAIKKJ@?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAP?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN11@AddIdentif:

; 72   : #endif
; 73   : 
; 74   : 	unsigned index, existingNodeIndex;
; 75   : 	RPCNode *node;
; 76   : 
; 77   : 	existingNodeIndex=GetIndexFromFunctionName(uniqueIdentifier);

	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIndexFromFunctionName@RPCMap@@QAEEPAD@Z ; RPCMap::GetIndexFromFunctionName
	movzx	ecx, al
	mov	DWORD PTR _existingNodeIndex$[ebp], ecx

; 78   : 	if ((RPCIndex)existingNodeIndex!=UNDEFINED_RPC_INDEX) // Insert at any free spot.

	movzx	eax, BYTE PTR _existingNodeIndex$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN5@AddIdentif

; 79   : 	{
; 80   : 		// Trying to insert an identifier at any free slot and that identifier already exists
; 81   : 		// The user should not insert nodes that already exist in the list
; 82   : #ifdef _DEBUG
; 83   : 		assert(0);

	xor	eax, eax
	jne	SHORT $LN12@AddIdentif
	mov	ecx, DWORD PTR ?__LINE__Var@?1??AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z@4JA
	add	ecx, 16					; 00000010H
	push	ecx
	push	OFFSET ??_C@_1EG@KNOFCEIF@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAr?$AAa?$AAk?$AAn?$AAe?$AAt?$AA?2?$AAr?$AAp?$AAc?$AAm?$AAa?$AAp?$AA?4?$AAc@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN12@AddIdentif:

; 84   : #endif
; 85   : 		return;

	jmp	$LN6@AddIdentif
$LN5@AddIdentif:

; 86   : 	}
; 87   : 
; 88   : 	node = new RPCNode;

	push	9
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 89   : 	node->uniqueIdentifier = new char [strlen(uniqueIdentifier)+1];

	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx

; 90   : 	strcpy(node->uniqueIdentifier, uniqueIdentifier);

	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcpy
	add	esp, 8

; 91   : 	node->functionPointer=functionPointer;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _functionPointer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 92   : 	node->isPointerToMember=isPointerToMember;

	mov	eax, DWORD PTR _node$[ebp]
	mov	cl, BYTE PTR _isPointerToMember$[ebp]
	mov	BYTE PTR [eax+8], cl

; 93   : 
; 94   : 	// Insert into an empty spot if possible
; 95   : 	for (index=0; index < rpcSet.Size(); index++)

	mov	DWORD PTR _index$[ebp], 0
	jmp	SHORT $LN4@AddIdentif
$LN3@AddIdentif:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN4@AddIdentif:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ ; DataStructures::List<RPCNode *>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jae	SHORT $LN2@AddIdentif

; 96   : 	{
; 97   : 		if (rpcSet[index]==0)

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@AddIdentif

; 98   : 		{
; 99   : 			rpcSet.Replace(node, 0, index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Replace@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@0I@Z ; DataStructures::List<RPCNode *>::Replace

; 100  : 			return;

	jmp	SHORT $LN6@AddIdentif
$LN1@AddIdentif:

; 101  : 		}
; 102  : 	}

	jmp	SHORT $LN3@AddIdentif
$LN2@AddIdentif:

; 103  : 
; 104  : 	rpcSet.Insert(node); // No empty spots available so just add to the end of the list

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$List@PAURPCNode@@@DataStructures@@QAEXQAURPCNode@@@Z ; DataStructures::List<RPCNode *>::Insert
$LN6@AddIdentif:

; 105  : 
; 106  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AddIdentifierWithFunction@RPCMap@@QAEXPADPAX_N@Z ENDP	; RPCMap::AddIdentifierWithFunction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ?GetIndexFromFunctionName@RPCMap@@QAEEPAD@Z
_TEXT	SEGMENT
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_uniqueIdentifier$ = 8					; size = 4
?GetIndexFromFunctionName@RPCMap@@QAEEPAD@Z PROC	; RPCMap::GetIndexFromFunctionName, COMDAT
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 	unsigned index;
; 59   : 	for (index=0; index < rpcSet.Size(); index++)

	mov	DWORD PTR _index$[ebp], 0
	jmp	SHORT $LN4@GetIndexFr
$LN3@GetIndexFr:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN4@GetIndexFr:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ ; DataStructures::List<RPCNode *>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jae	SHORT $LN2@GetIndexFr

; 60   : 		if (rpcSet[index] && strcmp(rpcSet[index]->uniqueIdentifier, uniqueIdentifier)==0)

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@GetIndexFr
	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@GetIndexFr

; 61   : 			return (RPCIndex) index;

	mov	al, BYTE PTR _index$[ebp]
	jmp	SHORT $LN5@GetIndexFr
$LN1@GetIndexFr:

; 62   : 	return UNDEFINED_RPC_INDEX;

	jmp	SHORT $LN3@GetIndexFr
$LN2@GetIndexFr:
	or	al, 255					; 000000ffH
$LN5@GetIndexFr:

; 63   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndexFromFunctionName@RPCMap@@QAEEPAD@Z ENDP	; RPCMap::GetIndexFromFunctionName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ?GetNodeFromFunctionName@RPCMap@@QAEPAURPCNode@@PAD@Z
_TEXT	SEGMENT
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_uniqueIdentifier$ = 8					; size = 4
?GetNodeFromFunctionName@RPCMap@@QAEPAURPCNode@@PAD@Z PROC ; RPCMap::GetNodeFromFunctionName, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	unsigned index;
; 51   : 	index=(unsigned)GetIndexFromFunctionName(uniqueIdentifier);

	mov	eax, DWORD PTR _uniqueIdentifier$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetIndexFromFunctionName@RPCMap@@QAEEPAD@Z ; RPCMap::GetIndexFromFunctionName
	movzx	ecx, al
	mov	DWORD PTR _index$[ebp], ecx

; 52   : 	if ((RPCIndex)index!=UNDEFINED_RPC_INDEX)

	movzx	eax, BYTE PTR _index$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN1@GetNodeFro

; 53   : 		return rpcSet[index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN2@GetNodeFro
$LN1@GetNodeFro:

; 54   : 	return 0;

	xor	eax, eax
$LN2@GetNodeFro:

; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNodeFromFunctionName@RPCMap@@QAEPAURPCNode@@PAD@Z ENDP ; RPCMap::GetNodeFromFunctionName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ?GetNodeFromIndex@RPCMap@@QAEPAURPCNode@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 1
?GetNodeFromIndex@RPCMap@@QAEPAURPCNode@@E@Z PROC	; RPCMap::GetNodeFromIndex, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 	if ((unsigned)index < rpcSet.Size())

	movzx	esi, BYTE PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ ; DataStructures::List<RPCNode *>::Size
	cmp	esi, eax
	jae	SHORT $LN1@GetNodeFro

; 45   : 		return rpcSet[(unsigned)index];

	movzx	eax, BYTE PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN2@GetNodeFro
$LN1@GetNodeFro:

; 46   : 	return 0;

	xor	eax, eax
$LN2@GetNodeFro:

; 47   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNodeFromIndex@RPCMap@@QAEPAURPCNode@@E@Z ENDP	; RPCMap::GetNodeFromIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ?Clear@RPCMap@@QAEXXZ
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_node$ = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Clear@RPCMap@@QAEXXZ PROC				; RPCMap::Clear, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 29   : 	unsigned i;
; 30   : 	RPCNode *node;
; 31   : 	for (i=0; i < rpcSet.Size(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Clear
$LN3@Clear:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Clear:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$List@PAURPCNode@@@DataStructures@@QBEIXZ ; DataStructures::List<RPCNode *>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN2@Clear

; 32   : 	{
; 33   : 		node=rpcSet[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$List@PAURPCNode@@@DataStructures@@QBEAAPAURPCNode@@I@Z ; DataStructures::List<RPCNode *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _node$[ebp], ecx

; 34   : 		if (node)

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN1@Clear

; 35   : 		{
; 36   : 			delete [] node->uniqueIdentifier;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 37   : 			delete node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Clear:

; 38   : 		}
; 39   : 	}

	jmp	SHORT $LN3@Clear
$LN2@Clear:

; 40   : 	rpcSet.Clear();

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@PAURPCNode@@@DataStructures@@QAEX_N@Z ; DataStructures::List<RPCNode *>::Clear

; 41   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@RPCMap@@QAEXXZ ENDP				; RPCMap::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ??1RPCMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1RPCMap@@QAE@XZ PROC					; RPCMap::~RPCMap, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1RPCMap@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 25   : 	Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@RPCMap@@QAEXXZ			; RPCMap::Clear

; 26   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$List@PAURPCNode@@@DataStructures@@QAE@XZ ; DataStructures::List<RPCNode *>::~List<RPCNode *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1RPCMap@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$List@PAURPCNode@@@DataStructures@@QAE@XZ ; DataStructures::List<RPCNode *>::~List<RPCNode *>
__ehhandler$??1RPCMap@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1RPCMap@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1RPCMap@@QAE@XZ ENDP					; RPCMap::~RPCMap
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\rpcmap.cpp
;	COMDAT ??0RPCMap@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0RPCMap@@QAE@XZ PROC					; RPCMap::RPCMap, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$List@PAURPCNode@@@DataStructures@@QAE@XZ ; DataStructures::List<RPCNode *>::List<RPCNode *>

; 22   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0RPCMap@@QAE@XZ ENDP					; RPCMap::RPCMap
_TEXT	ENDS
END
