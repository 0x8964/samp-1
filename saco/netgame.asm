; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\net\netgame.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?DebugSync@@3U_INCAR_SYNC_DATA@@A		; DebugSync
PUBLIC	?bDebugUpdate@@3HA				; bDebugUpdate
PUBLIC	?iExceptMessageDisplayed@@3HA			; iExceptMessageDisplayed
PUBLIC	?iVehiclesBench@@3HA				; iVehiclesBench
PUBLIC	?iPlayersBench@@3HA				; iPlayersBench
PUBLIC	?iPicksupsBench@@3HA				; iPicksupsBench
PUBLIC	?iMenuBench@@3HA				; iMenuBench
PUBLIC	?iObjectBench@@3HA				; iObjectBench
PUBLIC	?iTextDrawBench@@3HA				; iTextDrawBench
PUBLIC	?iVehiclePoolProcessFlag@@3HA			; iVehiclePoolProcessFlag
PUBLIC	?iPickupPoolProcessFlag@@3HA			; iPickupPoolProcessFlag
_BSS	SEGMENT
?DebugSync@@3U_INCAR_SYNC_DATA@@A DB 049H DUP (?)	; DebugSync
	ALIGN	4

?bDebugUpdate@@3HA DD 01H DUP (?)			; bDebugUpdate
?iExceptMessageDisplayed@@3HA DD 01H DUP (?)		; iExceptMessageDisplayed
?iVehiclesBench@@3HA DD 01H DUP (?)			; iVehiclesBench
?iPlayersBench@@3HA DD 01H DUP (?)			; iPlayersBench
?iPicksupsBench@@3HA DD 01H DUP (?)			; iPicksupsBench
?iMenuBench@@3HA DD 01H DUP (?)				; iMenuBench
?iObjectBench@@3HA DD 01H DUP (?)			; iObjectBench
?iTextDrawBench@@3HA DD 01H DUP (?)			; iTextDrawBench
?iVehiclePoolProcessFlag@@3HA DD 01H DUP (?)		; iVehiclePoolProcessFlag
?iPickupPoolProcessFlag@@3HA DD 01H DUP (?)		; iPickupPoolProcessFlag
?dwLastUpdateTick@?1??UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ@4KA DD 01H DUP (?) ; `CNetGame::UpdatePlayerScoresAndPings'::`2'::dwLastUpdateTick
_BSS	ENDS
CONST	SEGMENT
_disable_marker DW 0164H
	DB	'i', 00H
	ORG $+14
CONST	ENDS
PUBLIC	?ToggleCheckpoints@CGame@@QAEXH@Z		; CGame::ToggleCheckpoints
PUBLIC	?ToggleRaceCheckpoints@CGame@@QAEXH@Z		; CGame::ToggleRaceCheckpoints
PUBLIC	?GetCamera@CGame@@QAEPAVCCamera@@XZ		; CGame::GetCamera
PUBLIC	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ	; CGame::FindPlayerPed
PUBLIC	??$Write@I@BitStream@RakNet@@QAEXI@Z		; RakNet::BitStream::Write<unsigned int>
PUBLIC	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z	; RakNet::BitStream::Read<bool>
PUBLIC	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z		; RakNet::BitStream::Read<unsigned int>
PUBLIC	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z		; RakNet::BitStream::Read<unsigned short>
PUBLIC	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z		; RakNet::BitStream::Read<unsigned long>
PUBLIC	?SetVirtualWorld@CLocalPlayer@@QAEXE@Z		; CLocalPlayer::SetVirtualWorld
PUBLIC	?SetVirtualWorld@CRemotePlayer@@QAEXE@Z		; CRemotePlayer::SetVirtualWorld
PUBLIC	?SetTeam@CRemotePlayer@@QAEXE@Z			; CRemotePlayer::SetTeam
PUBLIC	?SetLocalPlayerName@CPlayerPool@@QAEXPAD@Z	; CPlayerPool::SetLocalPlayerName
PUBLIC	?GetLocalPlayerName@CPlayerPool@@QAEPADXZ	; CPlayerPool::GetLocalPlayerName
PUBLIC	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
PUBLIC	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z	; CPlayerPool::GetAt
PUBLIC	??_GCPlayerPool@@QAEPAXI@Z			; CPlayerPool::`scalar deleting destructor'
PUBLIC	??_GCVehiclePool@@QAEPAXI@Z			; CVehiclePool::`scalar deleting destructor'
PUBLIC	??0CPickupPool@@QAE@XZ				; CPickupPool::CPickupPool
PUBLIC	??_GCPickupPool@@QAEPAXI@Z			; CPickupPool::`scalar deleting destructor'
PUBLIC	??_GCObjectPool@@QAEPAXI@Z			; CObjectPool::`scalar deleting destructor'
PUBLIC	??_GCGangZonePool@@QAEPAXI@Z			; CGangZonePool::`scalar deleting destructor'
PUBLIC	??_GCMenuPool@@QAEPAXI@Z			; CMenuPool::`scalar deleting destructor'
PUBLIC	??_GCTextDrawPool@@QAEPAXI@Z			; CTextDrawPool::`scalar deleting destructor'
PUBLIC	?UpdateNetwork@CNetGame@@AAEXXZ			; CNetGame::UpdateNetwork
PUBLIC	?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z	; CNetGame::Packet_AimSync
PUBLIC	?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z	; CNetGame::Packet_PlayerSync
PUBLIC	?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z	; CNetGame::Packet_VehicleSync
PUBLIC	?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_PassengerSync
PUBLIC	?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectionSucceeded
PUBLIC	?Packet_RSAPublicKeyMismatch@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_RSAPublicKeyMismatch
PUBLIC	?Packet_ConnectionBanned@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectionBanned
PUBLIC	?Packet_ConnectionRequestAccepted@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectionRequestAccepted
PUBLIC	?Packet_NoFreeIncomingConnections@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_NoFreeIncomingConnections
PUBLIC	?Packet_DisconnectionNotification@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_DisconnectionNotification
PUBLIC	?Packet_ConnectionLost@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectionLost
PUBLIC	?Packet_InvalidPassword@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_InvalidPassword
PUBLIC	?Packet_ModifiedPacket@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ModifiedPacket
PUBLIC	?Packet_ConnectAttemptFailed@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectAttemptFailed
PUBLIC	?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z	; CNetGame::Packet_TrailerSync
PUBLIC	??0CNetGame@@QAE@PADH00@Z			; CNetGame::CNetGame
PUBLIC	??1CNetGame@@QAE@XZ				; CNetGame::~CNetGame
PUBLIC	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ	; CNetGame::GetPlayerPool
PUBLIC	?GetGameState@CNetGame@@QAEHXZ			; CNetGame::GetGameState
PUBLIC	?SetGameState@CNetGame@@QAEXH@Z			; CNetGame::SetGameState
PUBLIC	?InitGameLogic@CNetGame@@QAEXXZ			; CNetGame::InitGameLogic
PUBLIC	?Process@CNetGame@@QAEXXZ			; CNetGame::Process
PUBLIC	?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ	; CNetGame::UpdatePlayerScoresAndPings
PUBLIC	?ResetVehiclePool@CNetGame@@QAEXXZ		; CNetGame::ResetVehiclePool
PUBLIC	?ResetPlayerPool@CNetGame@@QAEXXZ		; CNetGame::ResetPlayerPool
PUBLIC	?ResetPickupPool@CNetGame@@QAEXXZ		; CNetGame::ResetPickupPool
PUBLIC	?ResetObjectPool@CNetGame@@QAEXXZ		; CNetGame::ResetObjectPool
PUBLIC	?ResetMenuPool@CNetGame@@QAEXXZ			; CNetGame::ResetMenuPool
PUBLIC	?ResetTextDrawPool@CNetGame@@QAEXXZ		; CNetGame::ResetTextDrawPool
PUBLIC	?ResetGangZonePool@CNetGame@@QAEXXZ		; CNetGame::ResetGangZonePool
PUBLIC	?ShutdownForGameModeRestart@CNetGame@@QAEXXZ	; CNetGame::ShutdownForGameModeRestart
PUBLIC	?ResetMapIcons@CNetGame@@QAEXXZ			; CNetGame::ResetMapIcons
PUBLIC	?SetMapIcon@CNetGame@@QAEXEMMMEK@Z		; CNetGame::SetMapIcon
PUBLIC	?DisableMapIcon@CNetGame@@QAEXE@Z		; CNetGame::DisableMapIcon
PUBLIC	?GetPacketID@@YAEPAUPacket@@@Z			; GetPacketID
PUBLIC	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z		; RakNet::BitStream::Read<unsigned char>
PUBLIC	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z		; RakNet::BitStream::Read<float>
PUBLIC	??$Write@H@BitStream@RakNet@@QAEXH@Z		; RakNet::BitStream::Write<int>
PUBLIC	??$Write@E@BitStream@RakNet@@QAEXE@Z		; RakNet::BitStream::Write<unsigned char>
PUBLIC	?__LINE__Var@?1??GetPacketID@@YAEPAUPacket@@@Z@4JA ; `GetPacketID'::`2'::__LINE__Var
PUBLIC	??_C@_1EM@DLOMOILB@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAg?$AAa?$AAm@ ; `string'
PUBLIC	??_C@_1HE@PGLDBPNL@?$AAp?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AAn?$AAs?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAc?$AAh?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_0BI@ELOPHCPA@San?5Andreas?5Multiplayer?$AA@ ; `string'
PUBLIC	??_C@_0BH@BPDCCIFE@SA?3MP?50?42X?5Initialized?$AA@ ; `string'
PUBLIC	??_C@_0BH@GLCABAGK@Game?5mode?5restarting?4?4?$AA@ ; `string'
PUBLIC	??_C@_09GCNACFAF@PARACHUTE?$AA@			; `string'
PUBLIC	??_C@_07NMFHLFHG@DANCING?$AA@			; `string'
PUBLIC	??_C@_05BOIJAAPF@GFUNK?$AA@			; `string'
PUBLIC	??_C@_0L@LJBOLFMD@RUNNINGMAN?$AA@		; `string'
PUBLIC	??_C@_03EJBMIAFB@WOP?$AA@			; `string'
PUBLIC	??_C@_05KNEAGBDM@STRIP?$AA@			; `string'
PUBLIC	??_C@_08KDFFPJKK@PAULNMAC?$AA@			; `string'
PUBLIC	??_C@_0CH@JLDNBOEC@Warning?3?5Error?5processing?5vehicl@ ; `string'
PUBLIC	??_C@_0CG@HAJCLFON@Warning?3?5Error?5processing?5pickup@ ; `string'
PUBLIC	??_C@_0CG@FHHDKMMD@Warning?3?5Error?5processing?5object@ ; `string'
PUBLIC	??_C@_0CE@MFCCHNNH@Warning?3?5Error?5processing?5menu?5p@ ; `string'
PUBLIC	??_C@_0BH@LHLCFJCP@Connecting?5to?5?$CFs?3?$CFd?4?4?4?$AA@ ; `string'
PUBLIC	??_C@_0CB@LLBPMAHG@Failed?5to?5initialize?5encryption?4@ ; `string'
PUBLIC	??_C@_0CA@JIFJBMON@You?8re?5banned?5from?5this?5server?4?$AA@ ; `string'
PUBLIC	??_C@_0CE@BLDLHMBF@Server?5has?5accepted?5the?5connecti@ ; `string'
PUBLIC	??_C@_0CA@HJCLPNAM@The?5server?5is?5full?4?5Retrying?4?4?4?$AA@ ; `string'
PUBLIC	??_C@_0BO@LLNGJJAJ@Server?5closed?5the?5connection?4?$AA@ ; `string'
PUBLIC	??_C@_0CO@IGPMAPLH@Lost?5connection?5to?5the?5server?4?5R@ ; `string'
PUBLIC	??_C@_0BH@MICHFH@Wrong?5server?5password?4?$AA@	; `string'
PUBLIC	??_C@_0CM@GFCOMKHE@Packet?5was?5modified?0?5sent?5by?5id?3@ ; `string'
PUBLIC	??_C@_0CG@LGBAJM@The?5server?5didn?8t?5respond?4?5Retry@ ; `string'
PUBLIC	??_C@_0CM@GEHKPBDK@Connection?5success?4?5Loading?5netw@ ; `string'
PUBLIC	??_C@_02LNLKOMPL@xx?$AA@			; `string'
PUBLIC	??_C@_02ENLJKNMP@as?$AA@			; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3c03126f
PUBLIC	__real@42023e01
PUBLIC	__real@427a3e01
PUBLIC	__real@428c0000
PUBLIC	__real@42a48de0
PUBLIC	__real@44afd4cd
PUBLIC	__real@44bb39b2
PUBLIC	__real@44bb8000
PUBLIC	__real@469c4000
PUBLIC	__real@c446f162
PUBLIC	__real@c45dc644
PUBLIC	__real@c69c4000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_sprintf:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__wassert:PROC
EXTRN	?TeleportTo@CEntity@@QAEXMMM@Z:PROC		; CEntity::TeleportTo
EXTRN	?SetArmour@CPlayerPed@@QAEXM@Z:PROC		; CPlayerPed::SetArmour
EXTRN	?IsInVehicle@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsInVehicle
EXTRN	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z:PROC ; CPlayerPed::RemoveFromVehicleAndPutAt
EXTRN	?SetDead@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::SetDead
EXTRN	?SetInterior@CPlayerPed@@QAEXE@Z:PROC		; CPlayerPed::SetInterior
EXTRN	??0CPlayerPed@@QAE@XZ:PROC			; CPlayerPed::CPlayerPed
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	?SetPosition@CCamera@@QAEXMMMMMM@Z:PROC		; CCamera::SetPosition
EXTRN	?LookAtPoint@CCamera@@QAEXMMMH@Z:PROC		; CCamera::LookAtPoint
EXTRN	?RequestModel@CGame@@QAEXH@Z:PROC		; CGame::RequestModel
EXTRN	?IsModelLoaded@CGame@@QAEHH@Z:PROC		; CGame::IsModelLoaded
EXTRN	?SetWorldTime@CGame@@QAEXHH@Z:PROC		; CGame::SetWorldTime
EXTRN	?SetWorldWeather@CGame@@QAEXH@Z:PROC		; CGame::SetWorldWeather
EXTRN	?DisplayHud@CGame@@QAEXH@Z:PROC			; CGame::DisplayHud
EXTRN	?RequestAnimation@CGame@@QAEXPAD@Z:PROC		; CGame::RequestAnimation
EXTRN	?IsAnimationLoaded@CGame@@QAEHPAD@Z:PROC	; CGame::IsAnimationLoaded
EXTRN	?SetGravity@CGame@@QAEXM@Z:PROC			; CGame::SetGravity
EXTRN	?EnableClock@CGame@@QAEXE@Z:PROC		; CGame::EnableClock
EXTRN	?EnableZoneNames@CGame@@QAEXE@Z:PROC		; CGame::EnableZoneNames
EXTRN	?SetWantedLevel@CGame@@QAEXE@Z:PROC		; CGame::SetWantedLevel
EXTRN	?CreateRadarMarkerIcon@CGame@@QAEKHMMMH@Z:PROC	; CGame::CreateRadarMarkerIcon
EXTRN	?ResetLocalMoney@CGame@@QAEXXZ:PROC		; CGame::ResetLocalMoney
EXTRN	?ToString@PlayerID@@QBEPAD_N@Z:PROC		; PlayerID::ToString
EXTRN	??0BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::BitStream
EXTRN	??0BitStream@RakNet@@QAE@PADI_N@Z:PROC		; RakNet::BitStream::BitStream
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?Write@BitStream@RakNet@@QAEXPBDH@Z:PROC	; RakNet::BitStream::Write
EXTRN	?Read@BitStream@RakNet@@QAE_NPADH@Z:PROC	; RakNet::BitStream::Read
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z:PROC	; RakNet::BitStream::WriteBits
EXTRN	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z:PROC	; RakNet::BitStream::ReadBits
EXTRN	?GetRakClientInterface@RakNetworkFactory@@SAPAVRakClientInterface@@XZ:PROC ; RakNetworkFactory::GetRakClientInterface
EXTRN	?DestroyRakClientInterface@RakNetworkFactory@@SAXPAVRakClientInterface@@@Z:PROC ; RakNetworkFactory::DestroyRakClientInterface
EXTRN	?ResetAllSyncAttributes@CLocalPlayer@@QAEXXZ:PROC ; CLocalPlayer::ResetAllSyncAttributes
EXTRN	?ToggleSpectating@CLocalPlayer@@QAEXH@Z:PROC	; CLocalPlayer::ToggleSpectating
EXTRN	?UpdateAimFromSyncData@CRemotePlayer@@QAEXPAU_AIM_SYNC_DATA@@@Z:PROC ; CRemotePlayer::UpdateAimFromSyncData
EXTRN	?StoreOnFootFullSyncData@CRemotePlayer@@QAEXPAU_ONFOOT_SYNC_DATA@@@Z:PROC ; CRemotePlayer::StoreOnFootFullSyncData
EXTRN	?StoreInCarFullSyncData@CRemotePlayer@@QAEXPAU_INCAR_SYNC_DATA@@@Z:PROC ; CRemotePlayer::StoreInCarFullSyncData
EXTRN	?StorePassengerFullSyncData@CRemotePlayer@@QAEXPAU_PASSENGER_SYNC_DATA@@@Z:PROC ; CRemotePlayer::StorePassengerFullSyncData
EXTRN	?StoreTrailerFullSyncData@CRemotePlayer@@QAEXPAU_TRAILER_SYNC_DATA@@@Z:PROC ; CRemotePlayer::StoreTrailerFullSyncData
EXTRN	?ResetAllSyncAttributes@CRemotePlayer@@QAEXXZ:PROC ; CRemotePlayer::ResetAllSyncAttributes
EXTRN	?RegisterRPCs@@YAXPAVRakClientInterface@@@Z:PROC ; RegisterRPCs
EXTRN	?UnRegisterRPCs@@YAXPAVRakClientInterface@@@Z:PROC ; UnRegisterRPCs
EXTRN	?Process@CPlayerPool@@QAEHXZ:PROC		; CPlayerPool::Process
EXTRN	?DeactivateAll@CPlayerPool@@QAEXXZ:PROC		; CPlayerPool::DeactivateAll
EXTRN	??0CPlayerPool@@QAE@XZ:PROC			; CPlayerPool::CPlayerPool
EXTRN	??1CPlayerPool@@QAE@XZ:PROC			; CPlayerPool::~CPlayerPool
EXTRN	??0CVehiclePool@@QAE@XZ:PROC			; CVehiclePool::CVehiclePool
EXTRN	??1CVehiclePool@@QAE@XZ:PROC			; CVehiclePool::~CVehiclePool
EXTRN	?Process@CVehiclePool@@QAEXXZ:PROC		; CVehiclePool::Process
EXTRN	??1CPickupPool@@QAE@XZ:PROC			; CPickupPool::~CPickupPool
EXTRN	?Process@CPickupPool@@QAEXXZ:PROC		; CPickupPool::Process
EXTRN	??0CObjectPool@@QAE@XZ:PROC			; CObjectPool::CObjectPool
EXTRN	??1CObjectPool@@QAE@XZ:PROC			; CObjectPool::~CObjectPool
EXTRN	?Process@CObjectPool@@QAEXXZ:PROC		; CObjectPool::Process
EXTRN	??0CGangZonePool@@QAE@XZ:PROC			; CGangZonePool::CGangZonePool
EXTRN	??1CGangZonePool@@QAE@XZ:PROC			; CGangZonePool::~CGangZonePool
EXTRN	??0CMenuPool@@QAE@XZ:PROC			; CMenuPool::CMenuPool
EXTRN	??1CMenuPool@@QAE@XZ:PROC			; CMenuPool::~CMenuPool
EXTRN	?Process@CMenuPool@@QAEXXZ:PROC			; CMenuPool::Process
EXTRN	??0CTextDrawPool@@QAE@XZ:PROC			; CTextDrawPool::CTextDrawPool
EXTRN	??1CTextDrawPool@@QAE@XZ:PROC			; CTextDrawPool::~CTextDrawPool
EXTRN	?RegisterScriptRPCs@@YAXPAVRakClientInterface@@@Z:PROC ; RegisterScriptRPCs
EXTRN	?UnRegisterScriptRPCs@@YAXPAVRakClientInterface@@@Z:PROC ; UnRegisterScriptRPCs
EXTRN	?AddInfoMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddInfoMessage
EXTRN	?AddDebugMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddDebugMessage
EXTRN	?GameResetRadarColors@@YAXXZ:PROC		; GameResetRadarColors
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pChatWindow@@3PAVCChatWindow@@A:DWORD		; pChatWindow
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@c69c4000
CONST	SEGMENT
__real@c69c4000 DD 0c69c4000r			; -20000
CONST	ENDS
;	COMDAT __real@c45dc644
CONST	SEGMENT
__real@c45dc644 DD 0c45dc644r			; -887.098
CONST	ENDS
;	COMDAT __real@c446f162
CONST	SEGMENT
__real@c446f162 DD 0c446f162r			; -795.772
CONST	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@44bb39b2
CONST	SEGMENT
__real@44bb39b2 DD 044bb39b2r			; 1497.8
CONST	ENDS
;	COMDAT __real@44afd4cd
CONST	SEGMENT
__real@44afd4cd DD 044afd4cdr			; 1406.65
CONST	ENDS
;	COMDAT __real@42a48de0
CONST	SEGMENT
__real@42a48de0 DD 042a48de0r			; 82.2771
CONST	ENDS
;	COMDAT __real@428c0000
CONST	SEGMENT
__real@428c0000 DD 0428c0000r			; 70
CONST	ENDS
;	COMDAT __real@427a3e01
CONST	SEGMENT
__real@427a3e01 DD 0427a3e01r			; 62.5606
CONST	ENDS
;	COMDAT __real@42023e01
CONST	SEGMENT
__real@42023e01 DD 042023e01r			; 32.5606
CONST	ENDS
;	COMDAT __real@3c03126f
CONST	SEGMENT
__real@3c03126f DD 03c03126fr			; 0.008
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_02ENLJKNMP@as?$AA@
CONST	SEGMENT
??_C@_02ENLJKNMP@as?$AA@ DB 'as', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LNLKOMPL@xx?$AA@
CONST	SEGMENT
??_C@_02LNLKOMPL@xx?$AA@ DB 'xx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GEHKPBDK@Connection?5success?4?5Loading?5netw@
CONST	SEGMENT
??_C@_0CM@GEHKPBDK@Connection?5success?4?5Loading?5netw@ DB 'Connection s'
	DB	'uccess. Loading network game...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LGBAJM@The?5server?5didn?8t?5respond?4?5Retry@
CONST	SEGMENT
??_C@_0CG@LGBAJM@The?5server?5didn?8t?5respond?4?5Retry@ DB 'The server d'
	DB	'idn''t respond. Retrying..', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GFCOMKHE@Packet?5was?5modified?0?5sent?5by?5id?3@
CONST	SEGMENT
??_C@_0CM@GFCOMKHE@Packet?5was?5modified?0?5sent?5by?5id?3@ DB 'Packet wa'
	DB	's modified, sent by id: %d, ip: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MICHFH@Wrong?5server?5password?4?$AA@
CONST	SEGMENT
??_C@_0BH@MICHFH@Wrong?5server?5password?4?$AA@ DB 'Wrong server password'
	DB	'.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IGPMAPLH@Lost?5connection?5to?5the?5server?4?5R@
CONST	SEGMENT
??_C@_0CO@IGPMAPLH@Lost?5connection?5to?5the?5server?4?5R@ DB 'Lost conne'
	DB	'ction to the server. Reconnecting..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LLNGJJAJ@Server?5closed?5the?5connection?4?$AA@
CONST	SEGMENT
??_C@_0BO@LLNGJJAJ@Server?5closed?5the?5connection?4?$AA@ DB 'Server clos'
	DB	'ed the connection.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HJCLPNAM@The?5server?5is?5full?4?5Retrying?4?4?4?$AA@
CONST	SEGMENT
??_C@_0CA@HJCLPNAM@The?5server?5is?5full?4?5Retrying?4?4?4?$AA@ DB 'The s'
	DB	'erver is full. Retrying...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BLDLHMBF@Server?5has?5accepted?5the?5connecti@
CONST	SEGMENT
??_C@_0CE@BLDLHMBF@Server?5has?5accepted?5the?5connecti@ DB 'Server has a'
	DB	'ccepted the connection.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JIFJBMON@You?8re?5banned?5from?5this?5server?4?$AA@
CONST	SEGMENT
??_C@_0CA@JIFJBMON@You?8re?5banned?5from?5this?5server?4?$AA@ DB 'You''re'
	DB	' banned from this server.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LLBPMAHG@Failed?5to?5initialize?5encryption?4@
CONST	SEGMENT
??_C@_0CB@LLBPMAHG@Failed?5to?5initialize?5encryption?4@ DB 'Failed to in'
	DB	'itialize encryption.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LHLCFJCP@Connecting?5to?5?$CFs?3?$CFd?4?4?4?$AA@
CONST	SEGMENT
??_C@_0BH@LHLCFJCP@Connecting?5to?5?$CFs?3?$CFd?4?4?4?$AA@ DB 'Connecting'
	DB	' to %s:%d...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MFCCHNNH@Warning?3?5Error?5processing?5menu?5p@
CONST	SEGMENT
??_C@_0CE@MFCCHNNH@Warning?3?5Error?5processing?5menu?5p@ DB 'Warning: Er'
	DB	'ror processing menu pool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FHHDKMMD@Warning?3?5Error?5processing?5object@
CONST	SEGMENT
??_C@_0CG@FHHDKMMD@Warning?3?5Error?5processing?5object@ DB 'Warning: Err'
	DB	'or processing object pool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HAJCLFON@Warning?3?5Error?5processing?5pickup@
CONST	SEGMENT
??_C@_0CG@HAJCLFON@Warning?3?5Error?5processing?5pickup@ DB 'Warning: Err'
	DB	'or processing pickup pool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JLDNBOEC@Warning?3?5Error?5processing?5vehicl@
CONST	SEGMENT
??_C@_0CH@JLDNBOEC@Warning?3?5Error?5processing?5vehicl@ DB 'Warning: Err'
	DB	'or processing vehicle pool', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KDFFPJKK@PAULNMAC?$AA@
CONST	SEGMENT
??_C@_08KDFFPJKK@PAULNMAC?$AA@ DB 'PAULNMAC', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNEAGBDM@STRIP?$AA@
CONST	SEGMENT
??_C@_05KNEAGBDM@STRIP?$AA@ DB 'STRIP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJBMIAFB@WOP?$AA@
CONST	SEGMENT
??_C@_03EJBMIAFB@WOP?$AA@ DB 'WOP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LJBOLFMD@RUNNINGMAN?$AA@
CONST	SEGMENT
??_C@_0L@LJBOLFMD@RUNNINGMAN?$AA@ DB 'RUNNINGMAN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BOIJAAPF@GFUNK?$AA@
CONST	SEGMENT
??_C@_05BOIJAAPF@GFUNK?$AA@ DB 'GFUNK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMFHLFHG@DANCING?$AA@
CONST	SEGMENT
??_C@_07NMFHLFHG@DANCING?$AA@ DB 'DANCING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GCNACFAF@PARACHUTE?$AA@
CONST	SEGMENT
??_C@_09GCNACFAF@PARACHUTE?$AA@ DB 'PARACHUTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GLCABAGK@Game?5mode?5restarting?4?4?$AA@
CONST	SEGMENT
??_C@_0BH@GLCABAGK@Game?5mode?5restarting?4?4?$AA@ DB 'Game mode restarti'
	DB	'ng..', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BPDCCIFE@SA?3MP?50?42X?5Initialized?$AA@
CONST	SEGMENT
??_C@_0BH@BPDCCIFE@SA?3MP?50?42X?5Initialized?$AA@ DB 'SA:MP 0.2X Initial'
	DB	'ized', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ELOPHCPA@San?5Andreas?5Multiplayer?$AA@
CONST	SEGMENT
??_C@_0BI@ELOPHCPA@San?5Andreas?5Multiplayer?$AA@ DB 'San Andreas Multipl'
	DB	'ayer', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@PGLDBPNL@?$AAp?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AAn?$AAs?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAc?$AAh?$AAa?$AAr@
CONST	SEGMENT
??_C@_1HE@PGLDBPNL@?$AAp?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AAn?$AAs?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAc?$AAh?$AAa?$AAr@ DB 'p'
	DB	00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, '>', 00H, ' ', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'u', 00H
	DB	'n', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ')', 00H
	DB	' ', 00H, '+', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 'o', 00H, 'f', 00H, '(', 00H, 'u', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l'
	DB	00H, 'o', 00H, 'n', 00H, 'g', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@DLOMOILB@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAg?$AAa?$AAm@
CONST	SEGMENT
??_C@_1EM@DLOMOILB@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAg?$AAa?$AAm@ DB 'z'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, 'r', 00H, 'c', 00H, '\', 00H, '0', 00H, '2', 00H, 'x'
	DB	00H, 'u', 00H, '1', 00H, '\', 00H, 's', 00H, 'a', 00H, 'c', 00H
	DB	'o', 00H, '\', 00H, 'n', 00H, 'e', 00H, 't', 00H, '\', 00H, 'n'
	DB	00H, 'e', 00H, 't', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetPacketID@@YAEPAUPacket@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetPacketID@@YAEPAUPacket@@@Z@4JA DD 026H ; `GetPacketID'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResetGangZonePool@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResetGangZonePool@CNetGame@@QAEXXZ$0
__ehfuncinfo$?ResetGangZonePool@CNetGame@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResetGangZonePool@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResetTextDrawPool@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResetTextDrawPool@CNetGame@@QAEXXZ$0
__ehfuncinfo$?ResetTextDrawPool@CNetGame@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResetTextDrawPool@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResetMenuPool@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResetMenuPool@CNetGame@@QAEXXZ$0
__ehfuncinfo$?ResetMenuPool@CNetGame@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResetMenuPool@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResetObjectPool@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResetObjectPool@CNetGame@@QAEXXZ$0
__ehfuncinfo$?ResetObjectPool@CNetGame@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResetObjectPool@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResetPickupPool@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResetPickupPool@CNetGame@@QAEXXZ$0
__ehfuncinfo$?ResetPickupPool@CNetGame@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResetPickupPool@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResetPlayerPool@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResetPlayerPool@CNetGame@@QAEXXZ$0
__ehfuncinfo$?ResetPlayerPool@CNetGame@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResetPlayerPool@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResetVehiclePool@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResetVehiclePool@CNetGame@@QAEXXZ$0
__ehfuncinfo$?ResetVehiclePool@CNetGame@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResetVehiclePool@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ$0
__ehfuncinfo$?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Process@CNetGame@@QAEXXZ$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Process@CNetGame@@QAEXXZ$6
__catchsym$?Process@CNetGame@@QAEXXZ$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Process@CNetGame@@QAEXXZ$4
__catchsym$?Process@CNetGame@@QAEXXZ$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Process@CNetGame@@QAEXXZ$2
__catchsym$?Process@CNetGame@@QAEXXZ$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Process@CNetGame@@QAEXXZ$0
__ehfuncinfo$?Process@CNetGame@@QAEXXZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?Process@CNetGame@@QAEXXZ
	DD	04H
	DD	FLAT:__tryblocktable$?Process@CNetGame@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Process@CNetGame@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Process@CNetGame@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Process@CNetGame@@QAEXXZ$8
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?Process@CNetGame@@QAEXXZ$9
	DD	04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?Process@CNetGame@@QAEXXZ$10
	DD	06H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$?Process@CNetGame@@QAEXXZ$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CNetGame@@QAE@PADH00@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0CNetGame@@QAE@PADH00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CNetGame@@QAE@PADH00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z$0
__ehfuncinfo$?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z$1
__ehfuncinfo$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z$0
__ehfuncinfo$?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z$0
__ehfuncinfo$?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z$0
__ehfuncinfo$?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z$0
__ehfuncinfo$?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0
__ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@E@BitStream@RakNet@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 1
??$Write@E@BitStream@RakNet@@QAEXE@Z PROC		; RakNet::BitStream::Write<unsigned char>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@E@BitStream@RakNet@@QAEXE@Z ENDP		; RakNet::BitStream::Write<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@H@BitStream@RakNet@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@H@BitStream@RakNet@@QAEXH@Z PROC		; RakNet::BitStream::Write<int>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@H@BitStream@RakNet@@QAEXH@Z ENDP		; RakNet::BitStream::Write<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@M@BitStream@RakNet@@QAE_NAAM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@M@BitStream@RakNet@@QAE_NAAM@Z PROC		; RakNet::BitStream::Read<float>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@M@BitStream@RakNet@@QAE_NAAM@Z ENDP		; RakNet::BitStream::Read<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@E@BitStream@RakNet@@QAE_NAAE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@E@BitStream@RakNet@@QAE_NAAE@Z PROC		; RakNet::BitStream::Read<unsigned char>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	8
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	8
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@E@BitStream@RakNet@@QAE_NAAE@Z ENDP		; RakNet::BitStream::Read<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?GetPacketID@@YAEPAUPacket@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?GetPacketID@@YAEPAUPacket@@@Z PROC			; GetPacketID, COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 39   : 	if (p==0) return 255;

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@GetPacketI
	or	al, 255					; 000000ffH
	jmp	SHORT $LN4@GetPacketI
$LN3@GetPacketI:

; 40   : 
; 41   : 	if ((unsigned char)p->data[0] == ID_TIMESTAMP) {

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 36					; 00000024H
	jne	SHORT $LN2@GetPacketI

; 42   : 		assert(p->length > sizeof(unsigned char) + sizeof(unsigned long));

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+8], 5
	ja	SHORT $LN6@GetPacketI
	mov	ecx, DWORD PTR ?__LINE__Var@?1??GetPacketID@@YAEPAUPacket@@@Z@4JA
	add	ecx, 4
	push	ecx
	push	OFFSET ??_C@_1EM@DLOMOILB@?$AAz?$AA?3?$AA?2?$AAs?$AAa?$AAm?$AAp?$AAs?$AAr?$AAc?$AA?2?$AA0?$AA2?$AAx?$AAu?$AA1?$AA?2?$AAs?$AAa?$AAc?$AAo?$AA?2?$AAn?$AAe?$AAt?$AA?2?$AAn?$AAe?$AAt?$AAg?$AAa?$AAm@
	push	OFFSET ??_C@_1HE@PGLDBPNL@?$AAp?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AAs?$AAi?$AAz?$AAe?$AAo?$AAf?$AA?$CI?$AAu?$AAn?$AAs?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAc?$AAh?$AAa?$AAr@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@GetPacketI:

; 43   : 		return (unsigned char) p->data[sizeof(unsigned char) + sizeof(unsigned long)];

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	al, BYTE PTR [ecx+eax]
	jmp	SHORT $LN4@GetPacketI

; 44   : 	}
; 45   : 	else {

	jmp	SHORT $LN4@GetPacketI
$LN2@GetPacketI:

; 46   : 		return (unsigned char) p->data[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	al, BYTE PTR [ecx+eax]
$LN4@GetPacketI:

; 47   : 	}
; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPacketID@@YAEPAUPacket@@@Z ENDP			; GetPacketID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?DisableMapIcon@CNetGame@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_byteIndex$ = 8						; size = 1
?DisableMapIcon@CNetGame@@QAEXE@Z PROC			; CNetGame::DisableMapIcon, COMDAT
; _this$ = ecx

; 860  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 861  : 	if (byteIndex >= 32) return;

	movzx	eax, BYTE PTR _byteIndex$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN1@DisableMap
	jmp	SHORT $LN2@DisableMap
$LN1@DisableMap:

; 862  : 	ScriptCommand(&disable_marker, m_dwMapIcon[byteIndex]);

	movzx	eax, BYTE PTR _byteIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+614]
	push	edx
	push	OFFSET _disable_marker
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 863  : 	m_dwMapIcon[byteIndex] = NULL;

	movzx	eax, BYTE PTR _byteIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+614], 0
$LN2@DisableMap:

; 864  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DisableMapIcon@CNetGame@@QAEXE@Z ENDP			; CNetGame::DisableMapIcon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?SetMapIcon@CNetGame@@QAEXEMMMEK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_byteIndex$ = 8						; size = 1
_fX$ = 12						; size = 4
_fY$ = 16						; size = 4
_fZ$ = 20						; size = 4
_byteIcon$ = 24						; size = 1
_dwColor$ = 28						; size = 4
?SetMapIcon@CNetGame@@QAEXEMMMEK@Z PROC			; CNetGame::SetMapIcon, COMDAT
; _this$ = ecx

; 849  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 850  : 	if (byteIndex >= 32) return;

	movzx	eax, BYTE PTR _byteIndex$[ebp]
	cmp	eax, 32					; 00000020H
	jl	SHORT $LN2@SetMapIcon
	jmp	SHORT $LN3@SetMapIcon
$LN2@SetMapIcon:

; 851  : 	if (m_dwMapIcon[byteIndex] != NULL) DisableMapIcon(byteIndex);

	movzx	eax, BYTE PTR _byteIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+614], 0
	je	SHORT $LN1@SetMapIcon
	movzx	eax, BYTE PTR _byteIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisableMapIcon@CNetGame@@QAEXE@Z	; CNetGame::DisableMapIcon
$LN1@SetMapIcon:

; 852  : 	//ScriptCommand(&create_radar_marker_without_sphere, fX, fY, fZ, byteIcon, &m_dwMapIcon);
; 853  : 	m_dwMapIcon[byteIndex] = pGame->CreateRadarMarkerIcon(byteIcon, fX, fY, fZ, dwColor);

	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _fZ$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fY$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fX$[ebp]
	movss	DWORD PTR [esp], xmm0
	movzx	ecx, BYTE PTR _byteIcon$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?CreateRadarMarkerIcon@CGame@@QAEKHMMMH@Z ; CGame::CreateRadarMarkerIcon
	movzx	edx, BYTE PTR _byteIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+614], eax
$LN3@SetMapIcon:

; 854  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?SetMapIcon@CNetGame@@QAEXEMMMEK@Z ENDP			; CNetGame::SetMapIcon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ResetMapIcons@CNetGame@@QAEXXZ
_TEXT	SEGMENT
_i$ = -17						; size = 1
_this$ = -8						; size = 4
?ResetMapIcons@CNetGame@@QAEXXZ PROC			; CNetGame::ResetMapIcons, COMDAT
; _this$ = ecx

; 869  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 870  : 	BYTE i;
; 871  : 	for (i = 0; i < 32; i++)

	mov	BYTE PTR _i$[ebp], 0
	jmp	SHORT $LN4@ResetMapIc
$LN3@ResetMapIc:
	mov	al, BYTE PTR _i$[ebp]
	add	al, 1
	mov	BYTE PTR _i$[ebp], al
$LN4@ResetMapIc:
	movzx	eax, BYTE PTR _i$[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN5@ResetMapIc

; 872  : 	{
; 873  : 		if (m_dwMapIcon[i] != NULL) DisableMapIcon(i);

	movzx	eax, BYTE PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+614], 0
	je	SHORT $LN1@ResetMapIc
	movzx	eax, BYTE PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DisableMapIcon@CNetGame@@QAEXE@Z	; CNetGame::DisableMapIcon
$LN1@ResetMapIc:

; 874  : 	}

	jmp	SHORT $LN3@ResetMapIc
$LN5@ResetMapIc:

; 875  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetMapIcons@CNetGame@@QAEXXZ ENDP			; CNetGame::ResetMapIcons
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ShutdownForGameModeRestart@CNetGame@@QAEXXZ
_TEXT	SEGMENT
_pPlayer$1 = -32					; size = 4
_bytePlayerID$2 = -17					; size = 1
_this$ = -8						; size = 4
?ShutdownForGameModeRestart@CNetGame@@QAEXXZ PROC	; CNetGame::ShutdownForGameModeRestart, COMDAT
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 	m_byteWorldTime = 12;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+61], 12			; 0000000cH

; 128  : 	m_byteWorldMinute = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+62], 0

; 129  : 	m_byteWeather	= 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+63], 10			; 0000000aH

; 130  : 	m_byteHoldTime = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 1

; 131  : 	m_bUseCJWalk = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 132  : 	m_fGravity = (float)0.008000000;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c03126f
	movss	DWORD PTR [eax+32], xmm0

; 133  : 	m_iDeathDropMoney = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 134  : 	pGame->SetGravity(m_fGravity);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetGravity@CGame@@QAEXM@Z		; CGame::SetGravity

; 135  : 	pGame->SetWantedLevel(0);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetWantedLevel@CGame@@QAEXE@Z		; CGame::SetWantedLevel

; 136  : 	pGame->EnableClock(0);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?EnableClock@CGame@@QAEXE@Z		; CGame::EnableClock

; 137  : 	m_bDisableEnterExits = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+53], 0

; 138  : 	m_fNameTagDrawDistance = 70.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@428c0000
	movss	DWORD PTR [eax+49], xmm0

; 139  : 
; 140  : 	for (BYTE bytePlayerID = 0; bytePlayerID < MAX_PLAYERS; bytePlayerID++) {

	mov	BYTE PTR _bytePlayerID$2[ebp], 0
	jmp	SHORT $LN4@ShutdownFo
$LN3@ShutdownFo:
	mov	al, BYTE PTR _bytePlayerID$2[ebp]
	add	al, 1
	mov	BYTE PTR _bytePlayerID$2[ebp], al
$LN4@ShutdownFo:
	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	cmp	eax, 204				; 000000ccH
	jge	SHORT $LN2@ShutdownFo

; 141  : 		CRemotePlayer* pPlayer = m_pPlayerPool->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pPlayer$1[ebp], eax

; 142  : 		if (pPlayer) {

	cmp	DWORD PTR _pPlayer$1[ebp], 0
	je	SHORT $LN1@ShutdownFo

; 143  : 			pPlayer->SetTeam(NO_TEAM);

	push	255					; 000000ffH
	mov	ecx, DWORD PTR _pPlayer$1[ebp]
	call	?SetTeam@CRemotePlayer@@QAEXE@Z		; CRemotePlayer::SetTeam

; 144  : 			pPlayer->ResetAllSyncAttributes();

	mov	ecx, DWORD PTR _pPlayer$1[ebp]
	call	?ResetAllSyncAttributes@CRemotePlayer@@QAEXXZ ; CRemotePlayer::ResetAllSyncAttributes

; 145  : 			pPlayer->SetVirtualWorld(0);

	push	0
	mov	ecx, DWORD PTR _pPlayer$1[ebp]
	call	?SetVirtualWorld@CRemotePlayer@@QAEXE@Z	; CRemotePlayer::SetVirtualWorld
$LN1@ShutdownFo:

; 146  : 		}
; 147  : 	}

	jmp	SHORT $LN3@ShutdownFo
$LN2@ShutdownFo:

; 148  : 	m_pPlayerPool->GetLocalPlayer()->ResetAllSyncAttributes();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, eax
	call	?ResetAllSyncAttributes@CLocalPlayer@@QAEXXZ ; CLocalPlayer::ResetAllSyncAttributes

; 149  : 	m_pPlayerPool->GetLocalPlayer()->ToggleSpectating(FALSE);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, eax
	call	?ToggleSpectating@CLocalPlayer@@QAEXH@Z	; CLocalPlayer::ToggleSpectating

; 150  : 	m_pPlayerPool->GetLocalPlayer()->SetVirtualWorld(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ; CPlayerPool::GetLocalPlayer
	mov	ecx, eax
	call	?SetVirtualWorld@CLocalPlayer@@QAEXE@Z	; CLocalPlayer::SetVirtualWorld

; 151  : 	m_iGameState = GAMESTATE_RESTARTING;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+90], 5

; 152  : 
; 153  : 	pChatWindow->AddInfoMessage("Game mode restarting..");

	push	OFFSET ??_C@_0BH@GLCABAGK@Game?5mode?5restarting?4?4?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8

; 154  : 
; 155  : 	// Disable the ingame players and reset the vehicle pool.
; 156  : 	m_pPlayerPool->DeactivateAll();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?DeactivateAll@CPlayerPool@@QAEXXZ	; CPlayerPool::DeactivateAll

; 157  : 	
; 158  : 	// Process the pool one last time
; 159  : 	m_pPlayerPool->Process();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Process@CPlayerPool@@QAEHXZ		; CPlayerPool::Process

; 160  : 
; 161  : 	ResetVehiclePool();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetVehiclePool@CNetGame@@QAEXXZ	; CNetGame::ResetVehiclePool

; 162  : 	ResetPickupPool();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetPickupPool@CNetGame@@QAEXXZ	; CNetGame::ResetPickupPool

; 163  : 	ResetObjectPool();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetObjectPool@CNetGame@@QAEXXZ	; CNetGame::ResetObjectPool

; 164  : 	ResetMenuPool();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetMenuPool@CNetGame@@QAEXXZ		; CNetGame::ResetMenuPool

; 165  : 	ResetTextDrawPool();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetTextDrawPool@CNetGame@@QAEXXZ	; CNetGame::ResetTextDrawPool

; 166  : 	ResetGangZonePool();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetGangZonePool@CNetGame@@QAEXXZ	; CNetGame::ResetGangZonePool

; 167  : 
; 168  : 	ResetMapIcons();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ResetMapIcons@CNetGame@@QAEXXZ		; CNetGame::ResetMapIcons

; 169  : 	pGame->ToggleCheckpoints(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleCheckpoints@CGame@@QAEXH@Z	; CGame::ToggleCheckpoints

; 170  : 	pGame->ToggleRaceCheckpoints(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleRaceCheckpoints@CGame@@QAEXH@Z	; CGame::ToggleRaceCheckpoints

; 171  : 	pGame->FindPlayerPed()->SetInterior(0);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?SetInterior@CPlayerPed@@QAEXE@Z	; CPlayerPed::SetInterior

; 172  : 	pGame->ResetLocalMoney();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ResetLocalMoney@CGame@@QAEXXZ		; CGame::ResetLocalMoney

; 173  : 	pGame->FindPlayerPed()->SetDead();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?SetDead@CPlayerPed@@QAEXXZ		; CPlayerPed::SetDead

; 174  : 	pGame->FindPlayerPed()->SetArmour(0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?SetArmour@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetArmour

; 175  : 	pGame->EnableZoneNames(0);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?EnableZoneNames@CGame@@QAEXE@Z		; CGame::EnableZoneNames

; 176  : 	m_bZoneNames = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+42], 0

; 177  : 	
; 178  : 	GameResetRadarColors();

	call	?GameResetRadarColors@@YAXXZ		; GameResetRadarColors

; 179  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ShutdownForGameModeRestart@CNetGame@@QAEXXZ ENDP	; CNetGame::ShutdownForGameModeRestart
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ResetGangZonePool@CNetGame@@QAEXXZ
_TEXT	SEGMENT
tv80 = -268						; size = 4
tv71 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?ResetGangZonePool@CNetGame@@QAEXXZ PROC		; CNetGame::ResetGangZonePool, COMDAT
; _this$ = ecx

; 837  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResetGangZonePool@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 838  : 	if(m_pGangZonePool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@ResetGangZ

; 839  : 		delete m_pGangZonePool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@ResetGangZ
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCGangZonePool@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN1@ResetGangZ
$LN4@ResetGangZ:
	mov	DWORD PTR tv71[ebp], 0
$LN1@ResetGangZ:

; 840  : 	}
; 841  : 	m_pGangZonePool = new CGangZonePool();

	push	8192					; 00002000H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@ResetGangZ
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CGangZonePool@@QAE@XZ		; CGangZonePool::CGangZonePool
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@ResetGangZ
$LN6@ResetGangZ:
	mov	DWORD PTR tv80[ebp], 0
$LN7@ResetGangZ:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+12], edx

; 842  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResetGangZonePool@CNetGame@@QAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ResetGangZonePool@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResetGangZonePool@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResetGangZonePool@CNetGame@@QAEXXZ ENDP		; CNetGame::ResetGangZonePool
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ResetTextDrawPool@CNetGame@@QAEXXZ
_TEXT	SEGMENT
tv80 = -268						; size = 4
tv71 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?ResetTextDrawPool@CNetGame@@QAEXXZ PROC		; CNetGame::ResetTextDrawPool, COMDAT
; _this$ = ecx

; 817  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResetTextDrawPool@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 818  : 	if(m_pTextDrawPool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@ResetTextD

; 819  : 		delete m_pTextDrawPool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@ResetTextD
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCTextDrawPool@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN1@ResetTextD
$LN4@ResetTextD:
	mov	DWORD PTR tv71[ebp], 0
$LN1@ResetTextD:

; 820  : 	}
; 821  : 	m_pTextDrawPool = new CTextDrawPool();

	push	8192					; 00002000H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@ResetTextD
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CTextDrawPool@@QAE@XZ		; CTextDrawPool::CTextDrawPool
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@ResetTextD
$LN6@ResetTextD:
	mov	DWORD PTR tv80[ebp], 0
$LN7@ResetTextD:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+8], edx

; 822  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResetTextDrawPool@CNetGame@@QAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ResetTextDrawPool@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResetTextDrawPool@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResetTextDrawPool@CNetGame@@QAEXXZ ENDP		; CNetGame::ResetTextDrawPool
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ResetMenuPool@CNetGame@@QAEXXZ
_TEXT	SEGMENT
tv80 = -268						; size = 4
tv71 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?ResetMenuPool@CNetGame@@QAEXXZ PROC			; CNetGame::ResetMenuPool, COMDAT
; _this$ = ecx

; 807  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResetMenuPool@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 808  : 	if(m_pMenuPool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@ResetMenuP

; 809  : 		delete m_pMenuPool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@ResetMenuP
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCMenuPool@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN1@ResetMenuP
$LN4@ResetMenuP:
	mov	DWORD PTR tv71[ebp], 0
$LN1@ResetMenuP:

; 810  : 	}
; 811  : 	m_pMenuPool = new CMenuPool();

	push	1026					; 00000402H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@ResetMenuP
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CMenuPool@@QAE@XZ			; CMenuPool::CMenuPool
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@ResetMenuP
$LN6@ResetMenuP:
	mov	DWORD PTR tv80[ebp], 0
$LN7@ResetMenuP:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+4], edx

; 812  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResetMenuPool@CNetGame@@QAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ResetMenuPool@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResetMenuPool@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResetMenuPool@CNetGame@@QAEXXZ ENDP			; CNetGame::ResetMenuPool
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ResetObjectPool@CNetGame@@QAEXXZ
_TEXT	SEGMENT
tv80 = -268						; size = 4
tv71 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?ResetObjectPool@CNetGame@@QAEXXZ PROC			; CNetGame::ResetObjectPool, COMDAT
; _this$ = ecx

; 827  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResetObjectPool@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 828  : 	if(m_pObjectPool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@ResetObjec

; 829  : 		delete m_pObjectPool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@ResetObjec
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCObjectPool@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN1@ResetObjec
$LN4@ResetObjec:
	mov	DWORD PTR tv71[ebp], 0
$LN1@ResetObjec:

; 830  : 	}
; 831  : 	m_pObjectPool = new CObjectPool();

	push	2040					; 000007f8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@ResetObjec
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CObjectPool@@QAE@XZ			; CObjectPool::CObjectPool
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@ResetObjec
$LN6@ResetObjec:
	mov	DWORD PTR tv80[ebp], 0
$LN7@ResetObjec:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx], edx

; 832  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResetObjectPool@CNetGame@@QAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ResetObjectPool@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResetObjectPool@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResetObjectPool@CNetGame@@QAEXXZ ENDP			; CNetGame::ResetObjectPool
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ResetPickupPool@CNetGame@@QAEXXZ
_TEXT	SEGMENT
tv80 = -268						; size = 4
tv71 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?ResetPickupPool@CNetGame@@QAEXXZ PROC			; CNetGame::ResetPickupPool, COMDAT
; _this$ = ecx

; 797  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResetPickupPool@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 798  : 	if(m_pPickupPool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@ResetPicku

; 799  : 		delete m_pPickupPool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@ResetPicku
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCPickupPool@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN1@ResetPicku
$LN4@ResetPicku:
	mov	DWORD PTR tv71[ebp], 0
$LN1@ResetPicku:

; 800  : 	}
; 801  : 	m_pPickupPool = new CPickupPool();

	push	12004					; 00002ee4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@ResetPicku
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CPickupPool@@QAE@XZ			; CPickupPool::CPickupPool
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@ResetPicku
$LN6@ResetPicku:
	mov	DWORD PTR tv80[ebp], 0
$LN7@ResetPicku:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+20], edx

; 802  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResetPickupPool@CNetGame@@QAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ResetPickupPool@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResetPickupPool@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResetPickupPool@CNetGame@@QAEXXZ ENDP			; CNetGame::ResetPickupPool
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ResetPlayerPool@CNetGame@@QAEXXZ
_TEXT	SEGMENT
tv80 = -268						; size = 4
tv71 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?ResetPlayerPool@CNetGame@@QAEXXZ PROC			; CNetGame::ResetPlayerPool, COMDAT
; _this$ = ecx

; 787  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResetPlayerPool@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 	if(m_pPlayerPool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@ResetPlaye

; 789  : 		delete m_pPlayerPool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@ResetPlaye
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCPlayerPool@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN1@ResetPlaye
$LN4@ResetPlaye:
	mov	DWORD PTR tv71[ebp], 0
$LN1@ResetPlaye:

; 790  : 	}
; 791  : 	m_pPlayerPool = new CPlayerPool();

	push	9218					; 00002402H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@ResetPlaye
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CPlayerPool@@QAE@XZ			; CPlayerPool::CPlayerPool
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@ResetPlaye
$LN6@ResetPlaye:
	mov	DWORD PTR tv80[ebp], 0
$LN7@ResetPlaye:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+16], edx

; 792  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResetPlayerPool@CNetGame@@QAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ResetPlayerPool@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResetPlayerPool@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResetPlayerPool@CNetGame@@QAEXXZ ENDP			; CNetGame::ResetPlayerPool
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?ResetVehiclePool@CNetGame@@QAEXXZ
_TEXT	SEGMENT
tv80 = -268						; size = 4
tv71 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?ResetVehiclePool@CNetGame@@QAEXXZ PROC			; CNetGame::ResetVehiclePool, COMDAT
; _this$ = ecx

; 777  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ResetVehiclePool@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 778  : 	if(m_pVehiclePool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@ResetVehic

; 779  : 		delete m_pVehiclePool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@ResetVehic
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCVehiclePool@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN1@ResetVehic
$LN4@ResetVehic:
	mov	DWORD PTR tv71[ebp], 0
$LN1@ResetVehic:

; 780  : 	}
; 781  : 	m_pVehiclePool = new CVehiclePool();

	push	51948					; 0000caecH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN6@ResetVehic
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CVehiclePool@@QAE@XZ			; CVehiclePool::CVehiclePool
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@ResetVehic
$LN6@ResetVehic:
	mov	DWORD PTR tv80[ebp], 0
$LN7@ResetVehic:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+24], edx

; 782  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResetVehiclePool@CNetGame@@QAEXXZ$0:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ResetVehiclePool@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ResetVehiclePool@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResetVehiclePool@CNetGame@@QAEXXZ ENDP			; CNetGame::ResetVehiclePool
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ
_TEXT	SEGMENT
_bsParams$2 = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ PROC	; CNetGame::UpdatePlayerScoresAndPings, COMDAT
; _this$ = ecx

; 764  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-504]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 765  : 	static DWORD dwLastUpdateTick = 0;
; 766  : 
; 767  : 	if ((GetTickCount() - dwLastUpdateTick) > 3000) {

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR ?dwLastUpdateTick@?1??UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ@4KA
	cmp	eax, 3000				; 00000bb8H
	jbe	SHORT $LN2@UpdatePlay

; 768  : 		dwLastUpdateTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?dwLastUpdateTick@?1??UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ@4KA, eax

; 769  : 		RakNet::BitStream bsParams;

	lea	ecx, DWORD PTR _bsParams$2[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 770  : 		m_pRakClient->RPC(RPC_UpdateScoresPingsIPs, &bsParams, HIGH_PRIORITY, RELIABLE, 0, FALSE);

	mov	esi, esp
	push	0
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsParams$2[ebp]
	push	eax
	push	OFFSET ??_C@_02ENLJKNMP@as?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 771  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsParams$2[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN2@UpdatePlay:

; 772  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@UpdatePlay
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 504				; 000001f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@UpdatePlay:
	DD	1
	DD	$LN7@UpdatePlay
$LN7@UpdatePlay:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN5@UpdatePlay
$LN5@UpdatePlay:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsParams$2[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-508]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdatePlayerScoresAndPings@CNetGame@@QAEXXZ ENDP	; CNetGame::UpdatePlayerScoresAndPings
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Process@CNetGame@@QAEXXZ
_TEXT	SEGMENT
_dwStartTick$2 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
?Process@CNetGame@@QAEXXZ PROC				; CNetGame::Process, COMDAT
; _this$ = ecx

; 196  : {	

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Process@CNetGame@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 	UpdateNetwork();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateNetwork@CNetGame@@AAEXXZ		; CNetGame::UpdateNetwork

; 198  : 
; 199  : 	if (m_byteHoldTime)	{

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN34@Process

; 200  : 		pGame->SetWorldTime(m_byteWorldTime, m_byteWorldMinute);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+62]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+61]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetWorldTime@CGame@@QAEXHH@Z		; CGame::SetWorldTime
$LN34@Process:

; 201  : 	}
; 202  : 
; 203  : 	// Keep the weather fixed at m_byteWeather so it doesnt desync
; 204  : 	pGame->SetWorldWeather(m_byteWeather);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+63]
	push	ecx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetWorldWeather@CGame@@QAEXH@Z		; CGame::SetWorldWeather

; 205  : 
; 206  : 	// KEEP THE FOLLOWING ANIMS LOADED DURING THE NETGAME
; 207  : 	if(!pGame->IsAnimationLoaded("PARACHUTE")) pGame->RequestAnimation("PARACHUTE");

	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN33@Process
	push	OFFSET ??_C@_09GCNACFAF@PARACHUTE?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestAnimation@CGame@@QAEXPAD@Z	; CGame::RequestAnimation
$LN33@Process:

; 208  : 	if(!pGame->IsAnimationLoaded("DANCING")) pGame->RequestAnimation("DANCING");

	push	OFFSET ??_C@_07NMFHLFHG@DANCING?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN32@Process
	push	OFFSET ??_C@_07NMFHLFHG@DANCING?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestAnimation@CGame@@QAEXPAD@Z	; CGame::RequestAnimation
$LN32@Process:

; 209  : 	if(!pGame->IsAnimationLoaded("GFUNK")) pGame->RequestAnimation("GFUNK");

	push	OFFSET ??_C@_05BOIJAAPF@GFUNK?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN31@Process
	push	OFFSET ??_C@_05BOIJAAPF@GFUNK?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestAnimation@CGame@@QAEXPAD@Z	; CGame::RequestAnimation
$LN31@Process:

; 210  : 	if(!pGame->IsAnimationLoaded("RUNNINGMAN"))	pGame->RequestAnimation("RUNNINGMAN");

	push	OFFSET ??_C@_0L@LJBOLFMD@RUNNINGMAN?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN30@Process
	push	OFFSET ??_C@_0L@LJBOLFMD@RUNNINGMAN?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestAnimation@CGame@@QAEXPAD@Z	; CGame::RequestAnimation
$LN30@Process:

; 211  :     if(!pGame->IsAnimationLoaded("WOP")) pGame->RequestAnimation("WOP");

	push	OFFSET ??_C@_03EJBMIAFB@WOP?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN29@Process
	push	OFFSET ??_C@_03EJBMIAFB@WOP?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestAnimation@CGame@@QAEXPAD@Z	; CGame::RequestAnimation
$LN29@Process:

; 212  : 	if(!pGame->IsAnimationLoaded("STRIP")) pGame->RequestAnimation("STRIP");

	push	OFFSET ??_C@_05KNEAGBDM@STRIP?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN28@Process
	push	OFFSET ??_C@_05KNEAGBDM@STRIP?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestAnimation@CGame@@QAEXPAD@Z	; CGame::RequestAnimation
$LN28@Process:

; 213  : 	if(!pGame->IsAnimationLoaded("PAULNMAC")) pGame->RequestAnimation("PAULNMAC");

	push	OFFSET ??_C@_08KDFFPJKK@PAULNMAC?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsAnimationLoaded@CGame@@QAEHPAD@Z	; CGame::IsAnimationLoaded
	test	eax, eax
	jne	SHORT $LN27@Process
	push	OFFSET ??_C@_08KDFFPJKK@PAULNMAC?$AA@
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestAnimation@CGame@@QAEXPAD@Z	; CGame::RequestAnimation
$LN27@Process:

; 214  : 				
; 215  : 	if(!pGame->IsModelLoaded(OBJECT_PARACHUTE)) {

	push	3131					; 00000c3bH
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN26@Process

; 216  : 		pGame->RequestModel(OBJECT_PARACHUTE);

	push	3131					; 00000c3bH
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel
$LN26@Process:

; 217  : 	}
; 218  : 
; 219  : 	// keep the throwable weapon models loaded
; 220  : 	if (!pGame->IsModelLoaded(WEAPON_MODEL_TEARGAS))

	push	343					; 00000157H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN25@Process

; 221  : 		pGame->RequestModel(WEAPON_MODEL_TEARGAS);

	push	343					; 00000157H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel
$LN25@Process:

; 222  : 	if (!pGame->IsModelLoaded(WEAPON_MODEL_GRENADE))

	push	342					; 00000156H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN24@Process

; 223  : 		pGame->RequestModel(WEAPON_MODEL_GRENADE);

	push	342					; 00000156H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel
$LN24@Process:

; 224  : 	if (!pGame->IsModelLoaded(WEAPON_MODEL_MOLTOV))

	push	344					; 00000158H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN23@Process

; 225  : 		pGame->RequestModel(WEAPON_MODEL_MOLTOV);

	push	344					; 00000158H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel
$LN23@Process:

; 226  : 
; 227  : 	// cellphone
; 228  : 	if (!pGame->IsModelLoaded(330)) pGame->RequestModel(330);

	push	330					; 0000014aH
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN22@Process
	push	330					; 0000014aH
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel
$LN22@Process:

; 229  : 
; 230  : 	if(GetGameState() == GAMESTATE_CONNECTED) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	jne	$LN21@Process

; 231  : 
; 232  : 		DWORD dwStartTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwStartTick$2[ebp], eax

; 233  : 
; 234  : 		if(m_pPlayerPool) m_pPlayerPool->Process();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN20@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Process@CPlayerPool@@QAEHXZ		; CPlayerPool::Process
$LN20@Process:

; 235  : 		iPlayersBench += GetTickCount() - dwStartTick;

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _dwStartTick$2[ebp]
	add	eax, DWORD PTR ?iPlayersBench@@3HA	; iPlayersBench
	mov	DWORD PTR ?iPlayersBench@@3HA, eax	; iPlayersBench

; 236  : 
; 237  : 		if(m_pVehiclePool && iVehiclePoolProcessFlag > 5) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	$LN19@Process
	cmp	DWORD PTR ?iVehiclePoolProcessFlag@@3HA, 5 ; iVehiclePoolProcessFlag
	jle	$LN19@Process

; 238  : 			dwStartTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwStartTick$2[ebp], eax

; 239  : 
; 240  : 			try { m_pVehiclePool->Process(); }

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?Process@CVehiclePool@@QAEXXZ		; CVehiclePool::Process
	jmp	SHORT $LN37@Process
__catch$?Process@CNetGame@@QAEXXZ$0:

; 241  : 			catch(...) { 
; 242  : 				if(!iExceptMessageDisplayed) {				

	cmp	DWORD PTR ?iExceptMessageDisplayed@@3HA, 0 ; iExceptMessageDisplayed
	jne	SHORT $LN17@Process

; 243  : 					pChatWindow->AddDebugMessage("Warning: Error processing vehicle pool"); 

	push	OFFSET ??_C@_0CH@JLDNBOEC@Warning?3?5Error?5processing?5vehicl@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 244  : 					iExceptMessageDisplayed++;

	mov	eax, DWORD PTR ?iExceptMessageDisplayed@@3HA ; iExceptMessageDisplayed
	add	eax, 1
	mov	DWORD PTR ?iExceptMessageDisplayed@@3HA, eax ; iExceptMessageDisplayed
$LN17@Process:

; 245  : 				}
; 246  : 			}

	mov	eax, $LN46@Process
	ret	0
$LN37@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN45@Process
$LN46@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN45@Process:

; 247  : 			iVehiclesBench += GetTickCount() - dwStartTick;

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _dwStartTick$2[ebp]
	add	eax, DWORD PTR ?iVehiclesBench@@3HA	; iVehiclesBench
	mov	DWORD PTR ?iVehiclesBench@@3HA, eax	; iVehiclesBench

; 248  : 			iVehiclePoolProcessFlag = 0;

	mov	DWORD PTR ?iVehiclePoolProcessFlag@@3HA, 0 ; iVehiclePoolProcessFlag

; 249  : 		} else {

	jmp	SHORT $LN16@Process
$LN19@Process:

; 250  : 			iVehiclePoolProcessFlag++;

	mov	eax, DWORD PTR ?iVehiclePoolProcessFlag@@3HA ; iVehiclePoolProcessFlag
	add	eax, 1
	mov	DWORD PTR ?iVehiclePoolProcessFlag@@3HA, eax ; iVehiclePoolProcessFlag
$LN16@Process:

; 251  : 		}
; 252  : 			
; 253  : 		if(m_pPickupPool && iPickupPoolProcessFlag > 10) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN15@Process
	cmp	DWORD PTR ?iPickupPoolProcessFlag@@3HA, 10 ; iPickupPoolProcessFlag, 0000000aH
	jle	$LN15@Process

; 254  : 
; 255  : 			dwStartTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwStartTick$2[ebp], eax

; 256  : 
; 257  : 			try { m_pPickupPool->Process(); }

	mov	DWORD PTR __$EHRec$[ebp+12], 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	call	?Process@CPickupPool@@QAEXXZ		; CPickupPool::Process
	jmp	SHORT $LN39@Process
__catch$?Process@CNetGame@@QAEXXZ$2:

; 258  : 			catch(...) {
; 259  : 				if(!iExceptMessageDisplayed) {				

	cmp	DWORD PTR ?iExceptMessageDisplayed@@3HA, 0 ; iExceptMessageDisplayed
	jne	SHORT $LN13@Process

; 260  : 					pChatWindow->AddDebugMessage("Warning: Error processing pickup pool"); 

	push	OFFSET ??_C@_0CG@HAJCLFON@Warning?3?5Error?5processing?5pickup@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 261  : 					iExceptMessageDisplayed++;

	mov	eax, DWORD PTR ?iExceptMessageDisplayed@@3HA ; iExceptMessageDisplayed
	add	eax, 1
	mov	DWORD PTR ?iExceptMessageDisplayed@@3HA, eax ; iExceptMessageDisplayed
$LN13@Process:

; 262  : 				}
; 263  : 			}

	mov	eax, $LN48@Process
	ret	0
$LN39@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN47@Process
$LN48@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN47@Process:

; 264  : 			iPicksupsBench += GetTickCount() - dwStartTick;

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _dwStartTick$2[ebp]
	add	eax, DWORD PTR ?iPicksupsBench@@3HA	; iPicksupsBench
	mov	DWORD PTR ?iPicksupsBench@@3HA, eax	; iPicksupsBench

; 265  : 			iPickupPoolProcessFlag = 0;

	mov	DWORD PTR ?iPickupPoolProcessFlag@@3HA, 0 ; iPickupPoolProcessFlag

; 266  : 		}
; 267  : 		else

	jmp	SHORT $LN12@Process
$LN15@Process:

; 268  : 		{
; 269  : 			iPickupPoolProcessFlag++;

	mov	eax, DWORD PTR ?iPickupPoolProcessFlag@@3HA ; iPickupPoolProcessFlag
	add	eax, 1
	mov	DWORD PTR ?iPickupPoolProcessFlag@@3HA, eax ; iPickupPoolProcessFlag
$LN12@Process:

; 270  : 		}
; 271  : 
; 272  : 		if(m_pObjectPool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN11@Process

; 273  : 			dwStartTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwStartTick$2[ebp], eax

; 274  : 			try { m_pObjectPool->Process(); }

	mov	DWORD PTR __$EHRec$[ebp+12], 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Process@CObjectPool@@QAEXXZ		; CObjectPool::Process
	jmp	SHORT $LN41@Process
__catch$?Process@CNetGame@@QAEXXZ$4:

; 275  : 			catch(...) { 
; 276  : 				if(!iExceptMessageDisplayed) {				

	cmp	DWORD PTR ?iExceptMessageDisplayed@@3HA, 0 ; iExceptMessageDisplayed
	jne	SHORT $LN9@Process

; 277  : 					pChatWindow->AddDebugMessage("Warning: Error processing object pool"); 

	push	OFFSET ??_C@_0CG@FHHDKMMD@Warning?3?5Error?5processing?5object@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 278  : 					iExceptMessageDisplayed++;

	mov	eax, DWORD PTR ?iExceptMessageDisplayed@@3HA ; iExceptMessageDisplayed
	add	eax, 1
	mov	DWORD PTR ?iExceptMessageDisplayed@@3HA, eax ; iExceptMessageDisplayed
$LN9@Process:

; 279  : 				}
; 280  : 			}

	mov	eax, $LN50@Process
	ret	0
$LN41@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN49@Process
$LN50@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN49@Process:

; 281  : 			iObjectBench += GetTickCount() - dwStartTick;

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _dwStartTick$2[ebp]
	add	eax, DWORD PTR ?iObjectBench@@3HA	; iObjectBench
	mov	DWORD PTR ?iObjectBench@@3HA, eax	; iObjectBench
$LN11@Process:

; 282  : 		}
; 283  : 
; 284  : 		if(m_pMenuPool) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN8@Process

; 285  : 			dwStartTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwStartTick$2[ebp], eax

; 286  : 			try { m_pMenuPool->Process(); }

	mov	DWORD PTR __$EHRec$[ebp+12], 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Process@CMenuPool@@QAEXXZ		; CMenuPool::Process
	jmp	SHORT $LN43@Process
__catch$?Process@CNetGame@@QAEXXZ$6:

; 287  : 			catch(...) { 
; 288  : 				if(!iExceptMessageDisplayed) {				

	cmp	DWORD PTR ?iExceptMessageDisplayed@@3HA, 0 ; iExceptMessageDisplayed
	jne	SHORT $LN6@Process

; 289  : 					pChatWindow->AddDebugMessage("Warning: Error processing menu pool"); 

	push	OFFSET ??_C@_0CE@MFCCHNNH@Warning?3?5Error?5processing?5menu?5p@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 290  : 					iExceptMessageDisplayed++;

	mov	eax, DWORD PTR ?iExceptMessageDisplayed@@3HA ; iExceptMessageDisplayed
	add	eax, 1
	mov	DWORD PTR ?iExceptMessageDisplayed@@3HA, eax ; iExceptMessageDisplayed
$LN6@Process:

; 291  : 				}
; 292  : 			}

	mov	eax, $LN52@Process
	ret	0
$LN43@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN51@Process
$LN52@Process:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN51@Process:

; 293  : 			iMenuBench += GetTickCount() - dwStartTick;

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _dwStartTick$2[ebp]
	add	eax, DWORD PTR ?iMenuBench@@3HA		; iMenuBench
	mov	DWORD PTR ?iMenuBench@@3HA, eax		; iMenuBench
$LN8@Process:

; 294  : 		}	
; 295  : 	}
; 296  : 	else {

	jmp	$LN5@Process
$LN21@Process:

; 297  : 		if(pGame->FindPlayerPed()->IsInVehicle()) {

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN4@Process

; 298  : 			pGame->FindPlayerPed()->RemoveFromVehicleAndPutAt(1500.0f,-887.0979f,32.56055f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42023e01
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c45dc644
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ; CPlayerPed::RemoveFromVehicleAndPutAt

; 299  : 		} else {

	jmp	SHORT $LN3@Process
$LN4@Process:

; 300  : 			pGame->FindPlayerPed()->TeleportTo(1500.0f,-887.0979f,32.56055f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42023e01
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c45dc644
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@44bb8000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ; CGame::FindPlayerPed
	mov	ecx, eax
	call	?TeleportTo@CEntity@@QAEXMMM@Z		; CEntity::TeleportTo
$LN3@Process:

; 301  : 		}
; 302  : 		pGame->GetCamera()->SetPosition(1497.803f,-887.0979f,62.56055f,0.0f,0.0f,0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@427a3e01
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c45dc644
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@44bb39b2
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	ecx, eax
	call	?SetPosition@CCamera@@QAEXMMMMMM@Z	; CCamera::SetPosition

; 303  : 		pGame->GetCamera()->LookAtPoint(1406.65f,-795.7716f,82.2771f,2);

	push	2
	push	ecx
	movss	xmm0, DWORD PTR __real@42a48de0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@c446f162
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@44afd4cd
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	ecx, eax
	call	?LookAtPoint@CCamera@@QAEXMMMH@Z	; CCamera::LookAtPoint

; 304  : 		pGame->DisplayHud(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayHud@CGame@@QAEXH@Z		; CGame::DisplayHud
$LN5@Process:

; 305  : 	}
; 306  : 
; 307  : 	if( GetGameState() == GAMESTATE_WAIT_CONNECT && 
; 308  : 		(GetTickCount() - m_dwLastConnectAttempt) > 3000) 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 6
	jne	$LN2@Process
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+82]
	cmp	eax, 3000				; 00000bb8H
	jbe	$LN2@Process

; 309  : 	{
; 310  : 		if(pChatWindow) pChatWindow->AddDebugMessage("Connecting to %s:%d...",m_szHostOrIp,m_iPort);

	cmp	DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A, 0 ; pChatWindow
	je	SHORT $LN1@Process
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+610]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 354				; 00000162H
	push	edx
	push	OFFSET ??_C@_0BH@LHLCFJCP@Connecting?5to?5?$CFs?3?$CFd?4?4?4?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 16					; 00000010H
$LN1@Process:

; 311  : 		m_pRakClient->Connect(m_szHostOrIp,m_iPort,0,0,10);

	mov	esi, esp
	push	10					; 0000000aH
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+610]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 354				; 00000162H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 312  : 		m_dwLastConnectAttempt = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+82], eax

; 313  : 		SetGameState(GAMESTATE_CONNECTING);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGameState@CNetGame@@QAEXH@Z		; CNetGame::SetGameState
$LN2@Process:

; 314  : 	}
; 315  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Process@CNetGame@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-236]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Process@CNetGame@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Process@CNetGame@@QAEXXZ ENDP				; CNetGame::Process
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?InitGameLogic@CNetGame@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?InitGameLogic@CNetGame@@QAEXXZ PROC			; CNetGame::InitGameLogic, COMDAT
; _this$ = ecx

; 184  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 	//GameResetRadarColors();
; 186  : 
; 187  : 	m_WorldBounds[0] = 20000.0f;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@469c4000
	movss	DWORD PTR [edx+ecx+64], xmm0

; 188  : 	m_WorldBounds[1] = -20000.0f;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c69c4000
	movss	DWORD PTR [ecx+eax+64], xmm0

; 189  : 	m_WorldBounds[2] = 20000.0f;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@469c4000
	movss	DWORD PTR [ecx+eax+64], xmm0

; 190  : 	m_WorldBounds[3] = -20000.0f;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c69c4000
	movss	DWORD PTR [edx+ecx+64], xmm0

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitGameLogic@CNetGame@@QAEXXZ ENDP			; CNetGame::InitGameLogic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?SetGameState@CNetGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iGameState$ = 8					; size = 4
?SetGameState@CNetGame@@QAEXH@Z PROC			; CNetGame::SetGameState, COMDAT
; _this$ = ecx

; 106  : 	void SetGameState(int iGameState) { m_iGameState = iGameState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iGameState$[ebp]
	mov	DWORD PTR [eax+90], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGameState@CNetGame@@QAEXH@Z ENDP			; CNetGame::SetGameState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetGameState@CNetGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGameState@CNetGame@@QAEHXZ PROC			; CNetGame::GetGameState, COMDAT
; _this$ = ecx

; 105  : 	int GetGameState() { return m_iGameState; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+90]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGameState@CNetGame@@QAEHXZ ENDP			; CNetGame::GetGameState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ PROC	; CNetGame::GetPlayerPool, COMDAT
; _this$ = ecx

; 96   : 	CPlayerPool * GetPlayerPool() { return m_pPlayerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ENDP	; CNetGame::GetPlayerPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ??1CNetGame@@QAE@XZ
_TEXT	SEGMENT
tv172 = -376						; size = 4
tv163 = -376						; size = 4
tv154 = -376						; size = 4
tv145 = -376						; size = 4
tv136 = -376						; size = 4
tv95 = -376						; size = 4
tv86 = -376						; size = 4
$T1 = -368						; size = 4
$T2 = -356						; size = 4
$T3 = -344						; size = 4
$T4 = -332						; size = 4
$T5 = -320						; size = 4
$T6 = -308						; size = 4
$T7 = -296						; size = 4
$T8 = -284						; size = 4
$T9 = -272						; size = 4
$T10 = -260						; size = 4
$T11 = -248						; size = 4
$T12 = -236						; size = 4
$T13 = -224						; size = 4
$T14 = -212						; size = 4
_this$ = -8						; size = 4
??1CNetGame@@QAE@XZ PROC				; CNetGame::~CNetGame, COMDAT
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 	m_pRakClient->Disconnect(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 111  : 	UnRegisterRPCs(m_pRakClient);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?UnRegisterRPCs@@YAXPAVRakClientInterface@@@Z ; UnRegisterRPCs
	add	esp, 4

; 112  : 	UnRegisterScriptRPCs(m_pRakClient);	// Unregister server-side scripting RPCs.

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?UnRegisterScriptRPCs@@YAXPAVRakClientInterface@@@Z ; UnRegisterScriptRPCs
	add	esp, 4

; 113  : 	RakNetworkFactory::DestroyRakClientInterface(m_pRakClient);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?DestroyRakClientInterface@RakNetworkFactory@@SAXPAVRakClientInterface@@@Z ; RakNetworkFactory::DestroyRakClientInterface
	add	esp, 4

; 114  : 	SAFE_DELETE(m_pPlayerPool);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@CNetGame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN10@CNetGame
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GCPlayerPool@@QAEPAXI@Z
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN11@CNetGame
$LN10@CNetGame:
	mov	DWORD PTR tv86[ebp], 0
$LN11@CNetGame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN7@CNetGame:

; 115  : 	SAFE_DELETE(m_pVehiclePool);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN6@CNetGame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN12@CNetGame
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GCVehiclePool@@QAEPAXI@Z
	mov	DWORD PTR tv95[ebp], eax
	jmp	SHORT $LN13@CNetGame
$LN12@CNetGame:
	mov	DWORD PTR tv95[ebp], 0
$LN13@CNetGame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN6@CNetGame:

; 116  : 	SAFE_DELETE(m_pPickupPool);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN5@CNetGame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T6[ebp], ecx
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN14@CNetGame
	push	1
	mov	ecx, DWORD PTR $T5[ebp]
	call	??_GCPickupPool@@QAEPAXI@Z
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN15@CNetGame
$LN14@CNetGame:
	mov	DWORD PTR tv136[ebp], 0
$LN15@CNetGame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
$LN5@CNetGame:

; 117  : 	SAFE_DELETE(m_pObjectPool);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@CNetGame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T7[ebp], edx
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN16@CNetGame
	push	1
	mov	ecx, DWORD PTR $T7[ebp]
	call	??_GCObjectPool@@QAEPAXI@Z
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN17@CNetGame
$LN16@CNetGame:
	mov	DWORD PTR tv145[ebp], 0
$LN17@CNetGame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@CNetGame:

; 118  : 	SAFE_DELETE(m_pMenuPool);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@CNetGame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T10[ebp], ecx
	mov	edx, DWORD PTR $T10[ebp]
	mov	DWORD PTR $T9[ebp], edx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN18@CNetGame
	push	1
	mov	ecx, DWORD PTR $T9[ebp]
	call	??_GCMenuPool@@QAEPAXI@Z
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN19@CNetGame
$LN18@CNetGame:
	mov	DWORD PTR tv154[ebp], 0
$LN19@CNetGame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN3@CNetGame:

; 119  : 	SAFE_DELETE(m_pTextDrawPool);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@CNetGame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T12[ebp], ecx
	mov	edx, DWORD PTR $T12[ebp]
	mov	DWORD PTR $T11[ebp], edx
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN20@CNetGame
	push	1
	mov	ecx, DWORD PTR $T11[ebp]
	call	??_GCTextDrawPool@@QAEPAXI@Z
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN21@CNetGame
$LN20@CNetGame:
	mov	DWORD PTR tv163[ebp], 0
$LN21@CNetGame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN2@CNetGame:

; 120  : 	SAFE_DELETE(m_pGangZonePool);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN8@CNetGame
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T14[ebp], ecx
	mov	edx, DWORD PTR $T14[ebp]
	mov	DWORD PTR $T13[ebp], edx
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN22@CNetGame
	push	1
	mov	ecx, DWORD PTR $T13[ebp]
	call	??_GCGangZonePool@@QAEPAXI@Z
	mov	DWORD PTR tv172[ebp], eax
	jmp	SHORT $LN23@CNetGame
$LN22@CNetGame:
	mov	DWORD PTR tv172[ebp], 0
$LN23@CNetGame:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN8@CNetGame:

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CNetGame@@QAE@XZ ENDP				; CNetGame::~CNetGame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ??0CNetGame@@QAE@PADH00@Z
_TEXT	SEGMENT
tv163 = -400						; size = 4
tv155 = -400						; size = 4
tv147 = -400						; size = 4
tv139 = -400						; size = 4
tv131 = -400						; size = 4
tv91 = -400						; size = 4
tv80 = -400						; size = 4
$T2 = -392						; size = 4
$T3 = -380						; size = 4
$T4 = -368						; size = 4
$T5 = -356						; size = 4
$T6 = -344						; size = 4
$T7 = -332						; size = 4
$T8 = -320						; size = 4
$T9 = -308						; size = 4
$T10 = -296						; size = 4
$T11 = -284						; size = 4
$T12 = -272						; size = 4
$T13 = -260						; size = 4
$T14 = -248						; size = 4
$T15 = -236						; size = 4
_i$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_szHostOrIp$ = 8					; size = 4
_iPort$ = 12						; size = 4
_szPlayerName$ = 16					; size = 4
_szPass$ = 20						; size = 4
??0CNetGame@@QAE@PADH00@Z PROC				; CNetGame::CNetGame, COMDAT
; _this$ = ecx

; 54   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CNetGame@@QAE@PADH00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 97					; 00000061H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	strcpy(m_szHostName, "San Andreas Multiplayer");

	push	OFFSET ??_C@_0BI@ELOPHCPA@San?5Andreas?5Multiplayer?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 98					; 00000062H
	push	eax
	call	_strcpy
	add	esp, 8

; 56   : 	strncpy(m_szHostOrIp, szHostOrIp, sizeof(m_szHostOrIp));

	push	256					; 00000100H
	mov	eax, DWORD PTR _szHostOrIp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 354				; 00000162H
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 57   : 	m_iPort = iPort;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iPort$[ebp]
	mov	DWORD PTR [eax+610], ecx

; 58   : 
; 59   : 	// Setup player pool
; 60   : 	m_pPlayerPool = new CPlayerPool();

	push	9218					; 00002402H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@CNetGame
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPlayerPool@@QAE@XZ			; CPlayerPool::CPlayerPool
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN8@CNetGame
$LN7@CNetGame:
	mov	DWORD PTR tv80[ebp], 0
$LN8@CNetGame:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+16], edx

; 61   : 	m_pPlayerPool->SetLocalPlayerName(szPlayerName);

	mov	eax, DWORD PTR _szPlayerName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?SetLocalPlayerName@CPlayerPool@@QAEXPAD@Z ; CPlayerPool::SetLocalPlayerName

; 62   : 
; 63   : 	m_pVehiclePool = new CVehiclePool();

	push	51948					; 0000caecH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN9@CNetGame
	mov	ecx, DWORD PTR $T5[ebp]
	call	??0CVehiclePool@@QAE@XZ			; CVehiclePool::CVehiclePool
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN10@CNetGame
$LN9@CNetGame:
	mov	DWORD PTR tv91[ebp], 0
$LN10@CNetGame:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+24], edx

; 64   : 	m_pPickupPool  = new CPickupPool();

	push	12004					; 00002ee4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN11@CNetGame
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0CPickupPool@@QAE@XZ			; CPickupPool::CPickupPool
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN12@CNetGame
$LN11@CNetGame:
	mov	DWORD PTR tv131[ebp], 0
$LN12@CNetGame:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [ecx+20], edx

; 65   : 	m_pObjectPool	= new CObjectPool();

	push	2040					; 000007f8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN13@CNetGame
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0CObjectPool@@QAE@XZ			; CObjectPool::CObjectPool
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN14@CNetGame
$LN13@CNetGame:
	mov	DWORD PTR tv139[ebp], 0
$LN14@CNetGame:
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [ecx], edx

; 66   : 	m_pMenuPool = new CMenuPool();

	push	1026					; 00000402H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN15@CNetGame
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0CMenuPool@@QAE@XZ			; CMenuPool::CMenuPool
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN16@CNetGame
$LN15@CNetGame:
	mov	DWORD PTR tv147[ebp], 0
$LN16@CNetGame:
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T10[ebp]
	mov	DWORD PTR [ecx+4], edx

; 67   : 	m_pTextDrawPool = new CTextDrawPool();

	push	8192					; 00002000H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T13[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN17@CNetGame
	mov	ecx, DWORD PTR $T13[ebp]
	call	??0CTextDrawPool@@QAE@XZ		; CTextDrawPool::CTextDrawPool
	mov	DWORD PTR tv155[ebp], eax
	jmp	SHORT $LN18@CNetGame
$LN17@CNetGame:
	mov	DWORD PTR tv155[ebp], 0
$LN18@CNetGame:
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T12[ebp]
	mov	DWORD PTR [ecx+8], edx

; 68   : 	m_pGangZonePool = new CGangZonePool();

	push	8192					; 00002000H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN19@CNetGame
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0CGangZonePool@@QAE@XZ		; CGangZonePool::CGangZonePool
	mov	DWORD PTR tv163[ebp], eax
	jmp	SHORT $LN20@CNetGame
$LN19@CNetGame:
	mov	DWORD PTR tv163[ebp], 0
$LN20@CNetGame:
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T14[ebp]
	mov	DWORD PTR [ecx+12], edx

; 69   : 
; 70   : 	m_pRakClient = RakNetworkFactory::GetRakClientInterface();

	call	?GetRakClientInterface@RakNetworkFactory@@SAPAVRakClientInterface@@XZ ; RakNetworkFactory::GetRakClientInterface
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 71   : 
; 72   : 	RegisterRPCs(m_pRakClient);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?RegisterRPCs@@YAXPAVRakClientInterface@@@Z ; RegisterRPCs
	add	esp, 4

; 73   : 	RegisterScriptRPCs(m_pRakClient);	// Register server-side scripting RPCs.

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	?RegisterScriptRPCs@@YAXPAVRakClientInterface@@@Z ; RegisterScriptRPCs
	add	esp, 4

; 74   : 
; 75   : 	m_pRakClient->SetPassword(szPass);

	mov	esi, esp
	mov	eax, DWORD PTR _szPass$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 76   : 
; 77   : 	m_dwLastConnectAttempt = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+82], eax

; 78   : 	m_iGameState = GAMESTATE_WAIT_CONNECT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+90], 6

; 79   : 	
; 80   : 	m_iSpawnsAvailable = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+54], 0

; 81   : 	m_byteWorldTime = 12;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+61], 12			; 0000000cH

; 82   : 	m_byteWorldMinute = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+62], 0

; 83   : 	m_byteWeather	= 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+63], 10			; 0000000aH

; 84   : 	m_fGravity = (float)0.008000000;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c03126f
	movss	DWORD PTR [eax+32], xmm0

; 85   : 	m_iDeathDropMoney = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 86   : 	m_bLanMode = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+94], 0

; 87   : 	m_byteHoldTime = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 1

; 88   : 	m_bUseCJWalk = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 89   : 	m_bDisableEnterExits = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+53], 0

; 90   : 	m_fNameTagDrawDistance = 70.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@428c0000
	movss	DWORD PTR [eax+49], xmm0

; 91   : 
; 92   : 	int i;
; 93   : 	for (i = 0; i < 32; i++) m_dwMapIcon[i] = NULL;

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CNetGame
$LN3@CNetGame:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CNetGame:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jge	SHORT $LN2@CNetGame
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+614], 0
	jmp	SHORT $LN3@CNetGame
$LN2@CNetGame:

; 94   : 
; 95   : 	m_byteFriendlyFire = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+80], 1

; 96   : 	pGame->EnableClock(0); // Hide the clock by default

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?EnableClock@CGame@@QAEXE@Z		; CGame::EnableClock

; 97   : 	pGame->EnableZoneNames(0);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?EnableZoneNames@CGame@@QAEXE@Z		; CGame::EnableZoneNames

; 98   : 	m_bZoneNames = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+42], 0

; 99   : 	m_bInstagib = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+41], 0

; 100  : 	m_iCheckLoadedStuff = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+86], 0

; 101  : 
; 102  : 	if(pChatWindow) pChatWindow->AddDebugMessage("SA:MP 0.2X Initialized");

	cmp	DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A, 0 ; pChatWindow
	je	SHORT $LN1@CNetGame
	push	OFFSET ??_C@_0BH@BPDCCIFE@SA?3MP?50?42X?5Initialized?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8
$LN1@CNetGame:

; 103  : 
; 104  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$2:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$3:
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$4:
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$5:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CNetGame@@QAE@PADH00@Z$6:
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CNetGame@@QAE@PADH00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-404]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CNetGame@@QAE@PADH00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CNetGame@@QAE@PADH00@Z ENDP				; CNetGame::CNetGame
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_trSync$ = -396						; size = 42
_bytePlayerID$ = -341					; size = 1
_bytePacketID$ = -329					; size = 1
_bsSpectatorSync$ = -320				; size = 273
_pPlayer$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z PROC	; CNetGame::Packet_TrailerSync, COMDAT
; _this$ = ecx

; 623  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 580				; 00000244H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-592]
	mov	ecx, 145				; 00000091H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 624  : 	CRemotePlayer * pPlayer;
; 625  : 	RakNet::BitStream bsSpectatorSync((PCHAR)p->data, p->length, false);

	push	0
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 626  : 
; 627  : 	if(GetGameState() != GAMESTATE_CONNECTED) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	je	SHORT $LN2@Packet_Tra
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN3@Packet_Tra
$LN2@Packet_Tra:

; 628  : 
; 629  : 	BYTE bytePacketID=0;

	mov	BYTE PTR _bytePacketID$[ebp], 0

; 630  : 	BYTE bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 631  : 	TRAILER_SYNC_DATA trSync;
; 632  : 	
; 633  : 	bsSpectatorSync.Read(bytePacketID);

	lea	eax, DWORD PTR _bytePacketID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 634  : 	bsSpectatorSync.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 635  : 	bsSpectatorSync.Read((PCHAR)&trSync, sizeof(TRAILER_SYNC_DATA));

	push	42					; 0000002aH
	lea	eax, DWORD PTR _trSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 636  : 
; 637  : 	pPlayer = GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pPlayer$[ebp], eax

; 638  : 
; 639  : 	if(pPlayer)	{

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $LN1@Packet_Tra

; 640  : 	    pPlayer->StoreTrailerFullSyncData(&trSync);

	lea	eax, DWORD PTR _trSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?StoreTrailerFullSyncData@CRemotePlayer@@QAEXPAU_TRAILER_SYNC_DATA@@@Z ; CRemotePlayer::StoreTrailerFullSyncData
$LN1@Packet_Tra:

; 641  : 	}
; 642  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN3@Packet_Tra:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Packet_Tra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 592				; 00000250H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN12@Packet_Tra:
	DD	4
	DD	$LN11@Packet_Tra
$LN11@Packet_Tra:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN6@Packet_Tra
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN7@Packet_Tra
	DD	-341					; fffffeabH
	DD	1
	DD	$LN8@Packet_Tra
	DD	-396					; fffffe74H
	DD	42					; 0000002aH
	DD	$LN9@Packet_Tra
$LN9@Packet_Tra:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN8@Packet_Tra:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN7@Packet_Tra:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN6@Packet_Tra:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _bsSpectatorSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-596]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z ENDP	; CNetGame::Packet_TrailerSync
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_ConnectAttemptFailed@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?Packet_ConnectAttemptFailed@CNetGame@@AAEXPAUPacket@@@Z PROC ; CNetGame::Packet_ConnectAttemptFailed, COMDAT
; _this$ = ecx

; 715  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 716  : 	pChatWindow->AddDebugMessage("The server didn't respond. Retrying..");

	push	OFFSET ??_C@_0CG@LGBAJM@The?5server?5didn?8t?5respond?4?5Retry@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 717  : 	SetGameState(GAMESTATE_WAIT_CONNECT);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGameState@CNetGame@@QAEXH@Z		; CNetGame::SetGameState

; 718  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Packet_ConnectAttemptFailed@CNetGame@@AAEXPAUPacket@@@Z ENDP ; CNetGame::Packet_ConnectAttemptFailed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_ModifiedPacket@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_szBuffer$ = -276					; size = 256
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_packet$ = 8						; size = 4
?Packet_ModifiedPacket@CNetGame@@AAEXPAUPacket@@@Z PROC	; CNetGame::Packet_ModifiedPacket, COMDAT
; _this$ = ecx

; 701  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 702  : #ifdef _DEBUG
; 703  : 	char szBuffer[256];
; 704  : 	sprintf(szBuffer, "Packet was modified, sent by id: %d, ip: %s", 
; 705  : 					(unsigned int)packet->playerIndex, packet->playerId.ToString());

	push	1
	mov	ecx, DWORD PTR _packet$[ebp]
	add	ecx, 2
	call	?ToString@PlayerID@@QBEPAD_N@Z		; PlayerID::ToString
	push	eax
	mov	eax, DWORD PTR _packet$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CM@GFCOMKHE@Packet?5was?5modified?0?5sent?5by?5id?3@
	lea	edx, DWORD PTR _szBuffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 706  : 	pChatWindow->AddDebugMessage(szBuffer);

	lea	eax, DWORD PTR _szBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	ecx
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 707  : 	//m_pRakClient->Disconnect(0);
; 708  : #endif
; 709  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Packet_Mod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Packet_Mod:
	DD	1
	DD	$LN4@Packet_Mod
$LN4@Packet_Mod:
	DD	-276					; fffffeecH
	DD	256					; 00000100H
	DD	$LN3@Packet_Mod
$LN3@Packet_Mod:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?Packet_ModifiedPacket@CNetGame@@AAEXPAUPacket@@@Z ENDP	; CNetGame::Packet_ModifiedPacket
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_InvalidPassword@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?Packet_InvalidPassword@CNetGame@@AAEXPAUPacket@@@Z PROC ; CNetGame::Packet_InvalidPassword, COMDAT
; _this$ = ecx

; 693  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 694  : 	pChatWindow->AddDebugMessage("Wrong server password.");

	push	OFFSET ??_C@_0BH@MICHFH@Wrong?5server?5password?4?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 695  : 	m_pRakClient->Disconnect(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 696  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Packet_InvalidPassword@CNetGame@@AAEXPAUPacket@@@Z ENDP ; CNetGame::Packet_InvalidPassword
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_ConnectionLost@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?Packet_ConnectionLost@CNetGame@@AAEXPAUPacket@@@Z PROC	; CNetGame::Packet_ConnectionLost, COMDAT
; _this$ = ecx

; 684  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 685  : 	pChatWindow->AddDebugMessage("Lost connection to the server. Reconnecting..");

	push	OFFSET ??_C@_0CO@IGPMAPLH@Lost?5connection?5to?5the?5server?4?5R@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 686  : 	ShutdownForGameModeRestart();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ShutdownForGameModeRestart@CNetGame@@QAEXXZ ; CNetGame::ShutdownForGameModeRestart

; 687  :     SetGameState(GAMESTATE_WAIT_CONNECT);	

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGameState@CNetGame@@QAEXH@Z		; CNetGame::SetGameState

; 688  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Packet_ConnectionLost@CNetGame@@AAEXPAUPacket@@@Z ENDP	; CNetGame::Packet_ConnectionLost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_DisconnectionNotification@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?Packet_DisconnectionNotification@CNetGame@@AAEXPAUPacket@@@Z PROC ; CNetGame::Packet_DisconnectionNotification, COMDAT
; _this$ = ecx

; 676  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 	pChatWindow->AddDebugMessage("Server closed the connection.");

	push	OFFSET ??_C@_0BO@LLNGJJAJ@Server?5closed?5the?5connection?4?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 678  : 	m_pRakClient->Disconnect(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 679  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Packet_DisconnectionNotification@CNetGame@@AAEXPAUPacket@@@Z ENDP ; CNetGame::Packet_DisconnectionNotification
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_NoFreeIncomingConnections@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?Packet_NoFreeIncomingConnections@CNetGame@@AAEXPAUPacket@@@Z PROC ; CNetGame::Packet_NoFreeIncomingConnections, COMDAT
; _this$ = ecx

; 668  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 669  : 	pChatWindow->AddDebugMessage("The server is full. Retrying...");

	push	OFFSET ??_C@_0CA@HJCLPNAM@The?5server?5is?5full?4?5Retrying?4?4?4?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 670  : 	SetGameState(GAMESTATE_WAIT_CONNECT);	

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetGameState@CNetGame@@QAEXH@Z		; CNetGame::SetGameState

; 671  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Packet_NoFreeIncomingConnections@CNetGame@@AAEXPAUPacket@@@Z ENDP ; CNetGame::Packet_NoFreeIncomingConnections
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_ConnectionRequestAccepted@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?Packet_ConnectionRequestAccepted@CNetGame@@AAEXPAUPacket@@@Z PROC ; CNetGame::Packet_ConnectionRequestAccepted, COMDAT
; _this$ = ecx

; 661  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 662  : 	pChatWindow->AddDebugMessage("Server has accepted the connection.");

	push	OFFSET ??_C@_0CE@BLDLHMBF@Server?5has?5accepted?5the?5connecti@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 663  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Packet_ConnectionRequestAccepted@CNetGame@@AAEXPAUPacket@@@Z ENDP ; CNetGame::Packet_ConnectionRequestAccepted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_ConnectionBanned@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?Packet_ConnectionBanned@CNetGame@@AAEXPAUPacket@@@Z PROC ; CNetGame::Packet_ConnectionBanned, COMDAT
; _this$ = ecx

; 654  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 655  : 	pChatWindow->AddDebugMessage("You're banned from this server.");

	push	OFFSET ??_C@_0CA@JIFJBMON@You?8re?5banned?5from?5this?5server?4?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 656  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Packet_ConnectionBanned@CNetGame@@AAEXPAUPacket@@@Z ENDP ; CNetGame::Packet_ConnectionBanned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_RSAPublicKeyMismatch@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = 8						; size = 4
?Packet_RSAPublicKeyMismatch@CNetGame@@AAEXPAUPacket@@@Z PROC ; CNetGame::Packet_RSAPublicKeyMismatch, COMDAT
; _this$ = ecx

; 647  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 648  : 	pChatWindow->AddDebugMessage("Failed to initialize encryption.");

	push	OFFSET ??_C@_0CB@LLBPMAHG@Failed?5to?5initialize?5encryption?4@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 649  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Packet_RSAPublicKeyMismatch@CNetGame@@AAEXPAUPacket@@@Z ENDP ; CNetGame::Packet_RSAPublicKeyMismatch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_bsSend$ = -688						; size = 273
_byteNameLen$ = -401					; size = 1
_byteMod$ = -389					; size = 1
_iVersion$ = -380					; size = 4
_uiChallenge$ = -368					; size = 4
_playerId$ = -356					; size = 2
_port$ = -344						; size = 2
_binaryAddr$ = -332					; size = 4
_bytePacketID$ = -317					; size = 1
_bsReturnParams$ = -308					; size = 273
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z PROC ; CNetGame::Packet_ConnectionSucceeded, COMDAT
; _this$ = ecx

; 724  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 872				; 00000368H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-884]
	mov	ecx, 218				; 000000daH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 725  : 	RakNet::BitStream bsReturnParams((PCHAR)p->data, p->length, true);

	push	1
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _bsReturnParams$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 726  : 
; 727  : 	BYTE bytePacketID=0;

	mov	BYTE PTR _bytePacketID$[ebp], 0

; 728  : 	unsigned int binaryAddr=0;

	mov	DWORD PTR _binaryAddr$[ebp], 0

; 729  : 	unsigned short port=0;

	xor	eax, eax
	mov	WORD PTR _port$[ebp], ax

; 730  : 	unsigned short playerId=0;

	xor	eax, eax
	mov	WORD PTR _playerId$[ebp], ax

; 731  : 	unsigned int uiChallenge=0;

	mov	DWORD PTR _uiChallenge$[ebp], 0

; 732  : 
; 733  : 	bsReturnParams.Read(bytePacketID);

	lea	eax, DWORD PTR _bytePacketID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsReturnParams$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 734  : 	bsReturnParams.Read(binaryAddr);

	lea	eax, DWORD PTR _binaryAddr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsReturnParams$[ebp]
	call	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z	; RakNet::BitStream::Read<unsigned int>

; 735  : 	bsReturnParams.Read(port);

	lea	eax, DWORD PTR _port$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsReturnParams$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 736  : 	bsReturnParams.Read(playerId);

	lea	eax, DWORD PTR _playerId$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsReturnParams$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 737  : 	bsReturnParams.Read(uiChallenge);

	lea	eax, DWORD PTR _uiChallenge$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsReturnParams$[ebp]
	call	??$Read@I@BitStream@RakNet@@QAE_NAAI@Z	; RakNet::BitStream::Read<unsigned int>

; 738  : 
; 739  : 	uiChallenge ^= NETGAME_VERSION;

	mov	eax, DWORD PTR _uiChallenge$[ebp]
	xor	eax, 8866				; 000022a2H
	mov	DWORD PTR _uiChallenge$[ebp], eax

; 740  : 
; 741  : 	if(pChatWindow) {

	cmp	DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A, 0 ; pChatWindow
	je	SHORT $LN1@Packet_Con

; 742  : 		pChatWindow->AddDebugMessage("Connection success. Loading network game...");

	push	OFFSET ??_C@_0CM@GEHKPBDK@Connection?5success?4?5Loading?5netw@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8
$LN1@Packet_Con:

; 743  : 	}
; 744  : 
; 745  : 	m_iGameState = GAMESTATE_AWAIT_JOIN;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+90], 3

; 746  : 
; 747  : 	int iVersion = NETGAME_VERSION;

	mov	DWORD PTR _iVersion$[ebp], 8866		; 000022a2H

; 748  : 	BYTE byteMod = MOD_VERSION;

	mov	BYTE PTR _byteMod$[ebp], 1

; 749  : 	BYTE byteNameLen = (BYTE)strlen(m_pPlayerPool->GetLocalPlayerName());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?GetLocalPlayerName@CPlayerPool@@QAEPADXZ ; CPlayerPool::GetLocalPlayerName
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _byteNameLen$[ebp], al

; 750  : 
; 751  : 	RakNet::BitStream bsSend;

	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 752  : 	bsSend.Write(iVersion);

	mov	eax, DWORD PTR _iVersion$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@H@BitStream@RakNet@@QAEXH@Z	; RakNet::BitStream::Write<int>

; 753  : 	bsSend.Write(byteMod);

	movzx	eax, BYTE PTR _byteMod$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 754  : 	bsSend.Write(byteNameLen);

	movzx	eax, BYTE PTR _byteNameLen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXE@Z	; RakNet::BitStream::Write<unsigned char>

; 755  : 	bsSend.Write(m_pPlayerPool->GetLocalPlayerName(),byteNameLen);

	movzx	eax, BYTE PTR _byteNameLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?GetLocalPlayerName@CPlayerPool@@QAEPADXZ ; CPlayerPool::GetLocalPlayerName
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDH@Z	; RakNet::BitStream::Write

; 756  : 	bsSend.Write(uiChallenge);    

	mov	eax, DWORD PTR _uiChallenge$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??$Write@I@BitStream@RakNet@@QAEXI@Z	; RakNet::BitStream::Write<unsigned int>

; 757  : 
; 758  : 	m_pRakClient->RPC(RPC_ClientJoin,&bsSend,HIGH_PRIORITY,RELIABLE,0,FALSE);

	mov	esi, esp
	push	0
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsSend$[ebp]
	push	eax
	push	OFFSET ??_C@_02LNLKOMPL@xx?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 759  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _bsSend$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsReturnParams$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Packet_Con
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 884				; 00000374H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN15@Packet_Con:
	DD	7
	DD	$LN14@Packet_Con
$LN14@Packet_Con:
	DD	-308					; fffffeccH
	DD	273					; 00000111H
	DD	$LN6@Packet_Con
	DD	-317					; fffffec3H
	DD	1
	DD	$LN7@Packet_Con
	DD	-332					; fffffeb4H
	DD	4
	DD	$LN8@Packet_Con
	DD	-344					; fffffea8H
	DD	2
	DD	$LN9@Packet_Con
	DD	-356					; fffffe9cH
	DD	2
	DD	$LN10@Packet_Con
	DD	-368					; fffffe90H
	DD	4
	DD	$LN11@Packet_Con
	DD	-688					; fffffd50H
	DD	273					; 00000111H
	DD	$LN12@Packet_Con
$LN12@Packet_Con:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN11@Packet_Con:
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN10@Packet_Con:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
$LN9@Packet_Con:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN8@Packet_Con:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	0
$LN7@Packet_Con:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN6@Packet_Con:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _bsReturnParams$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__unwindfunclet$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z$1:
	lea	ecx, DWORD PTR _bsSend$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-888]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z ENDP ; CNetGame::Packet_ConnectionSucceeded
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_psSync$ = -376						; size = 24
_bytePlayerID$ = -341					; size = 1
_bytePacketID$ = -329					; size = 1
_bsPassengerSync$ = -320				; size = 273
_pPlayer$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z PROC	; CNetGame::Packet_PassengerSync, COMDAT
; _this$ = ecx

; 598  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-572]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 599  : 	CRemotePlayer * pPlayer;
; 600  : 	RakNet::BitStream bsPassengerSync((PCHAR)p->data, p->length, false);

	push	0
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 601  : 	BYTE		bytePacketID=0;

	mov	BYTE PTR _bytePacketID$[ebp], 0

; 602  : 	BYTE		bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 603  : 	PASSENGER_SYNC_DATA psSync;
; 604  : 
; 605  : 	if(GetGameState() != GAMESTATE_CONNECTED) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	je	SHORT $LN2@Packet_Pas
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	SHORT $LN3@Packet_Pas
$LN2@Packet_Pas:

; 606  : 
; 607  : 	bsPassengerSync.Read(bytePacketID);

	lea	eax, DWORD PTR _bytePacketID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 608  : 	bsPassengerSync.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 609  : 	bsPassengerSync.Read((PCHAR)&psSync,sizeof(PASSENGER_SYNC_DATA));

	push	24					; 00000018H
	lea	eax, DWORD PTR _psSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 610  : 
; 611  : 	pPlayer = GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pPlayer$[ebp], eax

; 612  : 
; 613  : 	//OutputDebugString("Getting Passenger Packets");
; 614  : 
; 615  : 	if(pPlayer)	{

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $LN1@Packet_Pas

; 616  : 		pPlayer->StorePassengerFullSyncData(&psSync);

	lea	eax, DWORD PTR _psSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?StorePassengerFullSyncData@CRemotePlayer@@QAEXPAU_PASSENGER_SYNC_DATA@@@Z ; CRemotePlayer::StorePassengerFullSyncData
$LN1@Packet_Pas:

; 617  : 	}
; 618  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN3@Packet_Pas:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Packet_Pas
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 572				; 0000023cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@Packet_Pas:
	DD	4
	DD	$LN11@Packet_Pas
$LN11@Packet_Pas:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN6@Packet_Pas
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN7@Packet_Pas
	DD	-341					; fffffeabH
	DD	1
	DD	$LN8@Packet_Pas
	DD	-376					; fffffe88H
	DD	24					; 00000018H
	DD	$LN9@Packet_Pas
$LN9@Packet_Pas:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN8@Packet_Pas:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN7@Packet_Pas:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN6@Packet_Pas:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _bsPassengerSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-576]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z ENDP	; CNetGame::Packet_PassengerSync
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_byteHlTemp$ = -545					; size = 1
_byteArmTemp$ = -533					; size = 1
_byteHealthArmour$ = -521				; size = 1
_wTempVehicleHealth$ = -512				; size = 2
_bTire$ = -497						; size = 1
_bTrailer$ = -485					; size = 1
_bTrain$ = -473						; size = 1
_bHydra$ = -461						; size = 1
_bLandingGear$ = -449					; size = 1
_bSiren$ = -437						; size = 1
_icSync$ = -428						; size = 73
_bytePlayerID$ = -341					; size = 1
_bytePacketID$ = -329					; size = 1
_bsSync$ = -320						; size = 273
_pPlayer$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z PROC	; CNetGame::Packet_VehicleSync, COMDAT
; _this$ = ecx

; 501  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 732				; 000002dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-744]
	mov	ecx, 183				; 000000b7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 	CRemotePlayer * pPlayer;
; 503  : 	RakNet::BitStream bsSync((PCHAR)p->data, p->length, false);

	push	0
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 504  : 	BYTE		bytePacketID=0;

	mov	BYTE PTR _bytePacketID$[ebp], 0

; 505  : 	BYTE		bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 506  : 	INCAR_SYNC_DATA icSync;
; 507  : 
; 508  : 	bool bSiren,bLandingGear;
; 509  : 	bool bHydra,bTrain,bTrailer;
; 510  : 	bool bTire;
; 511  : 
; 512  : 	if(GetGameState() != GAMESTATE_CONNECTED) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	je	SHORT $LN20@Packet_Veh
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN21@Packet_Veh
$LN20@Packet_Veh:

; 513  : 
; 514  : 	memset(&icSync,0,sizeof(INCAR_SYNC_DATA));

	push	73					; 00000049H
	push	0
	lea	eax, DWORD PTR _icSync$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 515  : 
; 516  : 	bsSync.Read(bytePacketID);

	lea	eax, DWORD PTR _bytePacketID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 517  : 	bsSync.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 518  : 	bsSync.Read(icSync.VehicleID);

	lea	eax, DWORD PTR _icSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 519  : 
; 520  : 	//bsSync.Read((PCHAR)&icSync,sizeof(INCAR_SYNC_DATA));
; 521  : 
; 522  : 	// KEYS
; 523  : 	bsSync.Read(icSync.lrAnalog);

	lea	eax, DWORD PTR _icSync$[ebp+2]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 524  : 	bsSync.Read(icSync.udAnalog);

	lea	eax, DWORD PTR _icSync$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 525  : 	bsSync.Read(icSync.wKeys);

	lea	eax, DWORD PTR _icSync$[ebp+6]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 526  : 
; 527  : 	// ROLL / DIRECTION / POSITION / MOVE SPEED
; 528  : 	bsSync.Read((char*)&icSync.cvecRoll,sizeof(C_VECTOR1));

	push	9
	lea	eax, DWORD PTR _icSync$[ebp+8]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 529  : 	bsSync.Read((char*)&icSync.cvecDirection,sizeof(C_VECTOR1));

	push	9
	lea	eax, DWORD PTR _icSync$[ebp+17]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 530  : 	bsSync.Read((char*)&icSync.vecPos,sizeof(VECTOR));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _icSync$[ebp+26]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 531  : 	bsSync.Read((char*)&icSync.vecMoveSpeed,sizeof(VECTOR));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _icSync$[ebp+38]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 532  : 
; 533  : 	// VEHICLE HEALTH
; 534  : 	WORD wTempVehicleHealth;
; 535  : 	bsSync.Read(wTempVehicleHealth);

	lea	eax, DWORD PTR _wTempVehicleHealth$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 536  : 	icSync.fCarHealth = (float)wTempVehicleHealth;

	movzx	eax, WORD PTR _wTempVehicleHealth$[ebp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _icSync$[ebp+50], xmm0

; 537  : 
; 538  : 	// HEALTH/ARMOUR (COMPRESSED INTO 1 BYTE)
; 539  : 	BYTE byteHealthArmour;
; 540  : 	BYTE byteArmTemp=0,byteHlTemp=0;

	mov	BYTE PTR _byteArmTemp$[ebp], 0
	mov	BYTE PTR _byteHlTemp$[ebp], 0

; 541  : 
; 542  : 	bsSync.Read(byteHealthArmour);

	lea	eax, DWORD PTR _byteHealthArmour$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 543  : 	byteArmTemp = (byteHealthArmour & 0x0F);

	movzx	eax, BYTE PTR _byteHealthArmour$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _byteArmTemp$[ebp], al

; 544  : 	byteHlTemp = (byteHealthArmour >> 4);

	movzx	eax, BYTE PTR _byteHealthArmour$[ebp]
	sar	eax, 4
	mov	BYTE PTR _byteHlTemp$[ebp], al

; 545  : 
; 546  : 	if(byteArmTemp == 0xF) icSync.bytePlayerArmour = 100;

	movzx	eax, BYTE PTR _byteArmTemp$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN19@Packet_Veh
	mov	BYTE PTR _icSync$[ebp+55], 100		; 00000064H
	jmp	SHORT $LN16@Packet_Veh
$LN19@Packet_Veh:

; 547  : 	else if(byteArmTemp == 0) icSync.bytePlayerArmour = 0;

	movzx	eax, BYTE PTR _byteArmTemp$[ebp]
	test	eax, eax
	jne	SHORT $LN17@Packet_Veh
	mov	BYTE PTR _icSync$[ebp+55], 0
	jmp	SHORT $LN16@Packet_Veh
$LN17@Packet_Veh:

; 548  : 	else icSync.bytePlayerArmour = byteArmTemp * 7;

	movzx	eax, BYTE PTR _byteArmTemp$[ebp]
	imul	ecx, eax, 7
	mov	BYTE PTR _icSync$[ebp+55], cl
$LN16@Packet_Veh:

; 549  : 
; 550  : 	if(byteHlTemp == 0xF) icSync.bytePlayerHealth = 100;

	movzx	eax, BYTE PTR _byteHlTemp$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN15@Packet_Veh
	mov	BYTE PTR _icSync$[ebp+54], 100		; 00000064H
	jmp	SHORT $LN12@Packet_Veh
$LN15@Packet_Veh:

; 551  : 	else if(byteHlTemp == 0) icSync.bytePlayerHealth = 0;

	movzx	eax, BYTE PTR _byteHlTemp$[ebp]
	test	eax, eax
	jne	SHORT $LN13@Packet_Veh
	mov	BYTE PTR _icSync$[ebp+54], 0
	jmp	SHORT $LN12@Packet_Veh
$LN13@Packet_Veh:

; 552  : 	else icSync.bytePlayerHealth = byteHlTemp * 7;

	movzx	eax, BYTE PTR _byteHlTemp$[ebp]
	imul	ecx, eax, 7
	mov	BYTE PTR _icSync$[ebp+54], cl
$LN12@Packet_Veh:

; 553  : 
; 554  : 	// CURRENT WEAPON
; 555  : 	bsSync.Read(icSync.byteCurrentWeapon);

	lea	eax, DWORD PTR _icSync$[ebp+56]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 556  : 	
; 557  : 	// SIREN
; 558  : 	bsSync.Read(bSiren);

	lea	eax, DWORD PTR _bSiren$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 559  : 	if(bSiren) icSync.byteSirenOn = 1;

	movzx	eax, BYTE PTR _bSiren$[ebp]
	test	eax, eax
	je	SHORT $LN11@Packet_Veh
	mov	BYTE PTR _icSync$[ebp+57], 1
$LN11@Packet_Veh:

; 560  : 
; 561  : 	// LANDING GEAR
; 562  : 	bsSync.Read(bLandingGear);

	lea	eax, DWORD PTR _bLandingGear$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 563  : 	if(bLandingGear) icSync.byteLandingGearState = 1;

	movzx	eax, BYTE PTR _bLandingGear$[ebp]
	test	eax, eax
	je	SHORT $LN10@Packet_Veh
	mov	BYTE PTR _icSync$[ebp+58], 1
$LN10@Packet_Veh:

; 564  : 
; 565  : 	if (m_bTirePopping) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	$LN5@Packet_Veh

; 566  : 		bsSync.Read(bTire);

	lea	eax, DWORD PTR _bTire$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 567  : 		if (bTire) icSync.byteTires[0] = 1;

	movzx	eax, BYTE PTR _bTire$[ebp]
	test	eax, eax
	je	SHORT $LN8@Packet_Veh
	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _icSync$[ebp+ecx+59], 1
$LN8@Packet_Veh:

; 568  : 		bsSync.Read(bTire);

	lea	eax, DWORD PTR _bTire$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 569  : 		if (bTire) icSync.byteTires[1] = 1;

	movzx	eax, BYTE PTR _bTire$[ebp]
	test	eax, eax
	je	SHORT $LN7@Packet_Veh
	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR _icSync$[ebp+eax+59], 1
$LN7@Packet_Veh:

; 570  : 		bsSync.Read(bTire);

	lea	eax, DWORD PTR _bTire$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 571  : 		if (bTire) icSync.byteTires[2] = 1;

	movzx	eax, BYTE PTR _bTire$[ebp]
	test	eax, eax
	je	SHORT $LN6@Packet_Veh
	mov	eax, 1
	shl	eax, 1
	mov	BYTE PTR _icSync$[ebp+eax+59], 1
$LN6@Packet_Veh:

; 572  : 		bsSync.Read(bTire);

	lea	eax, DWORD PTR _bTire$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 573  : 		if (bTire) icSync.byteTires[3] = 1;

	movzx	eax, BYTE PTR _bTire$[ebp]
	test	eax, eax
	je	SHORT $LN5@Packet_Veh
	mov	eax, 1
	imul	ecx, eax, 3
	mov	BYTE PTR _icSync$[ebp+ecx+59], 1
$LN5@Packet_Veh:

; 574  : 	}
; 575  : 
; 576  : 	// HYDRA SPECIAL
; 577  : 	bsSync.Read(bHydra);

	lea	eax, DWORD PTR _bHydra$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 578  : 	if(bHydra) bsSync.Read(icSync.dwHydraThrustAngle);

	movzx	eax, BYTE PTR _bHydra$[ebp]
	test	eax, eax
	je	SHORT $LN4@Packet_Veh
	lea	eax, DWORD PTR _icSync$[ebp+65]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@K@BitStream@RakNet@@QAE_NAAK@Z	; RakNet::BitStream::Read<unsigned long>
$LN4@Packet_Veh:

; 579  : 
; 580  : 	// TRAIN SPECIAL
; 581  : 	bsSync.Read(bTrain);

	lea	eax, DWORD PTR _bTrain$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 582  : 	if(bTrain) bsSync.Read(icSync.fTrainSpeed);

	movzx	eax, BYTE PTR _bTrain$[ebp]
	test	eax, eax
	je	SHORT $LN3@Packet_Veh
	lea	eax, DWORD PTR _icSync$[ebp+69]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>
$LN3@Packet_Veh:

; 583  : 
; 584  : 	// TRAILER ID
; 585  : 	bsSync.Read(bTrailer);

	lea	eax, DWORD PTR _bTrailer$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 586  : 	if(bTrailer) bsSync.Read(icSync.TrailerID);

	movzx	eax, BYTE PTR _bTrailer$[ebp]
	test	eax, eax
	je	SHORT $LN2@Packet_Veh
	lea	eax, DWORD PTR _icSync$[ebp+63]
	push	eax
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>
$LN2@Packet_Veh:

; 587  : 	
; 588  : 	pPlayer = GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pPlayer$[ebp], eax

; 589  : 
; 590  : 	if(pPlayer)	{

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $LN1@Packet_Veh

; 591  : 		pPlayer->StoreInCarFullSyncData(&icSync);

	lea	eax, DWORD PTR _icSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?StoreInCarFullSyncData@CRemotePlayer@@QAEXPAU_INCAR_SYNC_DATA@@@Z ; CRemotePlayer::StoreInCarFullSyncData
$LN1@Packet_Veh:

; 592  : 	}
; 593  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN21@Packet_Veh:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@Packet_Veh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 744				; 000002e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN38@Packet_Veh:
	DD	12					; 0000000cH
	DD	$LN37@Packet_Veh
$LN37@Packet_Veh:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN24@Packet_Veh
	DD	-329					; fffffeb7H
	DD	1
	DD	$LN25@Packet_Veh
	DD	-341					; fffffeabH
	DD	1
	DD	$LN26@Packet_Veh
	DD	-428					; fffffe54H
	DD	73					; 00000049H
	DD	$LN27@Packet_Veh
	DD	-437					; fffffe4bH
	DD	1
	DD	$LN28@Packet_Veh
	DD	-449					; fffffe3fH
	DD	1
	DD	$LN29@Packet_Veh
	DD	-461					; fffffe33H
	DD	1
	DD	$LN30@Packet_Veh
	DD	-473					; fffffe27H
	DD	1
	DD	$LN31@Packet_Veh
	DD	-485					; fffffe1bH
	DD	1
	DD	$LN32@Packet_Veh
	DD	-497					; fffffe0fH
	DD	1
	DD	$LN33@Packet_Veh
	DD	-512					; fffffe00H
	DD	2
	DD	$LN34@Packet_Veh
	DD	-521					; fffffdf7H
	DD	1
	DD	$LN35@Packet_Veh
$LN35@Packet_Veh:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN34@Packet_Veh:
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN33@Packet_Veh:
	DB	98					; 00000062H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN32@Packet_Veh:
	DB	98					; 00000062H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN31@Packet_Veh:
	DB	98					; 00000062H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN30@Packet_Veh:
	DB	98					; 00000062H
	DB	72					; 00000048H
	DB	121					; 00000079H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
$LN29@Packet_Veh:
	DB	98					; 00000062H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	71					; 00000047H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
$LN28@Packet_Veh:
	DB	98					; 00000062H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN27@Packet_Veh:
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN26@Packet_Veh:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN25@Packet_Veh:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN24@Packet_Veh:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _bsSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-748]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z ENDP	; CNetGame::Packet_VehicleSync
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_byteHlTemp$ = -509					; size = 1
_byteArmTemp$ = -497					; size = 1
_byteHealthArmour$ = -485				; size = 1
_bHasVehicleSurfingInfo$ = -473				; size = 1
_bMoveSpeedZ$ = -461					; size = 1
_bMoveSpeedY$ = -449					; size = 1
_bMoveSpeedX$ = -437					; size = 1
_bHasUD$ = -425						; size = 1
_bHasLR$ = -413						; size = 1
_bytePlayerID$ = -401					; size = 1
_bytePacketID$ = -389					; size = 1
_ofSync$ = -380						; size = 52
_bsPlayerSync$ = -320					; size = 273
_pPlayer$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z PROC	; CNetGame::Packet_PlayerSync, COMDAT
; _this$ = ecx

; 386  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 696				; 000002b8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-708]
	mov	ecx, 174				; 000000aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 	CRemotePlayer * pPlayer;
; 388  : 	RakNet::BitStream bsPlayerSync((PCHAR)p->data, p->length, false);

	push	0
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 389  : 	ONFOOT_SYNC_DATA ofSync;
; 390  : 	BYTE bytePacketID=0;

	mov	BYTE PTR _bytePacketID$[ebp], 0

; 391  : 	BYTE bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 392  : 	
; 393  : 	bool bHasLR,bHasUD;
; 394  : 	bool bMoveSpeedX,bMoveSpeedY,bMoveSpeedZ;
; 395  : 	bool bHasVehicleSurfingInfo;
; 396  : 
; 397  : 	if(GetGameState() != GAMESTATE_CONNECTED) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	je	SHORT $LN20@Packet_Pla
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	$LN21@Packet_Pla
$LN20@Packet_Pla:

; 398  : 
; 399  : 	memset(&ofSync,0,sizeof(ONFOOT_SYNC_DATA));

	push	52					; 00000034H
	push	0
	lea	eax, DWORD PTR _ofSync$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 400  : 
; 401  : 	bsPlayerSync.Read(bytePacketID);

	lea	eax, DWORD PTR _bytePacketID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 402  : 	bsPlayerSync.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 403  : 
; 404  : 	//bsPlayerSync.Read((PCHAR)&ofSync,sizeof(ONFOOT_SYNC_DATA));
; 405  : 
; 406  : 	// LEFT/RIGHT KEYS
; 407  : 	bsPlayerSync.Read(bHasLR);

	lea	eax, DWORD PTR _bHasLR$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 408  : 	if(bHasLR) bsPlayerSync.Read(ofSync.lrAnalog);

	movzx	eax, BYTE PTR _bHasLR$[ebp]
	test	eax, eax
	je	SHORT $LN19@Packet_Pla
	lea	eax, DWORD PTR _ofSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>
$LN19@Packet_Pla:

; 409  : 	
; 410  : 	// UP/DOWN KEYS
; 411  : 	bsPlayerSync.Read(bHasUD);

	lea	eax, DWORD PTR _bHasUD$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 412  : 	if(bHasUD) bsPlayerSync.Read(ofSync.udAnalog);

	movzx	eax, BYTE PTR _bHasUD$[ebp]
	test	eax, eax
	je	SHORT $LN18@Packet_Pla
	lea	eax, DWORD PTR _ofSync$[ebp+2]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>
$LN18@Packet_Pla:

; 413  : 
; 414  : 	// GENERAL KEYS
; 415  : 	bsPlayerSync.Read(ofSync.wKeys);

	lea	eax, DWORD PTR _ofSync$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 416  : 
; 417  : 	// VECTOR POS
; 418  : 	bsPlayerSync.Read((char*)&ofSync.vecPos,sizeof(VECTOR));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _ofSync$[ebp+6]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 419  : 
; 420  : 	// ROTATION
; 421  : 	bsPlayerSync.Read(ofSync.fRotation);

	lea	eax, DWORD PTR _ofSync$[ebp+18]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 422  : 	
; 423  : 	// HEALTH/ARMOUR (COMPRESSED INTO 1 BYTE)
; 424  : 	BYTE byteHealthArmour;
; 425  : 	BYTE byteArmTemp=0,byteHlTemp=0;

	mov	BYTE PTR _byteArmTemp$[ebp], 0
	mov	BYTE PTR _byteHlTemp$[ebp], 0

; 426  : 
; 427  : 	bsPlayerSync.Read(byteHealthArmour);

	lea	eax, DWORD PTR _byteHealthArmour$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 428  : 	byteArmTemp = (byteHealthArmour & 0x0F);

	movzx	eax, BYTE PTR _byteHealthArmour$[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _byteArmTemp$[ebp], al

; 429  : 	byteHlTemp = (byteHealthArmour >> 4);

	movzx	eax, BYTE PTR _byteHealthArmour$[ebp]
	sar	eax, 4
	mov	BYTE PTR _byteHlTemp$[ebp], al

; 430  : 
; 431  : 	if(byteArmTemp == 0xF) ofSync.byteArmour = 100;

	movzx	eax, BYTE PTR _byteArmTemp$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN17@Packet_Pla
	mov	BYTE PTR _ofSync$[ebp+23], 100		; 00000064H
	jmp	SHORT $LN14@Packet_Pla
$LN17@Packet_Pla:

; 432  : 	else if(byteArmTemp == 0) ofSync.byteArmour = 0;

	movzx	eax, BYTE PTR _byteArmTemp$[ebp]
	test	eax, eax
	jne	SHORT $LN15@Packet_Pla
	mov	BYTE PTR _ofSync$[ebp+23], 0
	jmp	SHORT $LN14@Packet_Pla
$LN15@Packet_Pla:

; 433  : 	else ofSync.byteArmour = byteArmTemp * 7;

	movzx	eax, BYTE PTR _byteArmTemp$[ebp]
	imul	ecx, eax, 7
	mov	BYTE PTR _ofSync$[ebp+23], cl
$LN14@Packet_Pla:

; 434  : 
; 435  : 	if(byteHlTemp == 0xF) ofSync.byteHealth = 100;

	movzx	eax, BYTE PTR _byteHlTemp$[ebp]
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN13@Packet_Pla
	mov	BYTE PTR _ofSync$[ebp+22], 100		; 00000064H
	jmp	SHORT $LN10@Packet_Pla
$LN13@Packet_Pla:

; 436  : 	else if(byteHlTemp == 0) ofSync.byteHealth = 0;

	movzx	eax, BYTE PTR _byteHlTemp$[ebp]
	test	eax, eax
	jne	SHORT $LN11@Packet_Pla
	mov	BYTE PTR _ofSync$[ebp+22], 0
	jmp	SHORT $LN10@Packet_Pla
$LN11@Packet_Pla:

; 437  : 	else ofSync.byteHealth = byteHlTemp * 7;

	movzx	eax, BYTE PTR _byteHlTemp$[ebp]
	imul	ecx, eax, 7
	mov	BYTE PTR _ofSync$[ebp+22], cl
$LN10@Packet_Pla:

; 438  : 
; 439  : 	// CURRENT WEAPON
; 440  : 	bsPlayerSync.Read(ofSync.byteCurrentWeapon);

	lea	eax, DWORD PTR _ofSync$[ebp+24]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 441  : 
; 442  : 	// Special Action
; 443  : 	bsPlayerSync.Read(ofSync.byteSpecialAction);

	lea	eax, DWORD PTR _ofSync$[ebp+25]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 444  : 	
; 445  : 	// READ MOVESPEED VECTORS
; 446  : 	bsPlayerSync.Read(bMoveSpeedX);

	lea	eax, DWORD PTR _bMoveSpeedX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 447  : 	if(bMoveSpeedX) bsPlayerSync.Read(ofSync.vecMoveSpeed.X);

	movzx	eax, BYTE PTR _bMoveSpeedX$[ebp]
	test	eax, eax
	je	SHORT $LN9@Packet_Pla
	lea	eax, DWORD PTR _ofSync$[ebp+26]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>
	jmp	SHORT $LN8@Packet_Pla
$LN9@Packet_Pla:

; 448  : 	else ofSync.vecMoveSpeed.X = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ofSync$[ebp+26], xmm0
$LN8@Packet_Pla:

; 449  : 
; 450  : 	bsPlayerSync.Read(bMoveSpeedY);

	lea	eax, DWORD PTR _bMoveSpeedY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 451  : 	if(bMoveSpeedY) bsPlayerSync.Read(ofSync.vecMoveSpeed.Y);

	movzx	eax, BYTE PTR _bMoveSpeedY$[ebp]
	test	eax, eax
	je	SHORT $LN7@Packet_Pla
	lea	eax, DWORD PTR _ofSync$[ebp+30]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>
	jmp	SHORT $LN6@Packet_Pla
$LN7@Packet_Pla:

; 452  : 	else ofSync.vecMoveSpeed.Y = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ofSync$[ebp+30], xmm0
$LN6@Packet_Pla:

; 453  : 
; 454  : 	bsPlayerSync.Read(bMoveSpeedZ);

	lea	eax, DWORD PTR _bMoveSpeedZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 455  : 	if(bMoveSpeedZ) bsPlayerSync.Read(ofSync.vecMoveSpeed.Z);

	movzx	eax, BYTE PTR _bMoveSpeedZ$[ebp]
	test	eax, eax
	je	SHORT $LN5@Packet_Pla
	lea	eax, DWORD PTR _ofSync$[ebp+34]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>
	jmp	SHORT $LN4@Packet_Pla
$LN5@Packet_Pla:

; 456  : 	else ofSync.vecMoveSpeed.Z = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _ofSync$[ebp+34], xmm0
$LN4@Packet_Pla:

; 457  : 
; 458  : 	bsPlayerSync.Read(bHasVehicleSurfingInfo);

	lea	eax, DWORD PTR _bHasVehicleSurfingInfo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ; RakNet::BitStream::Read<bool>

; 459  : 	if(bHasVehicleSurfingInfo) {

	movzx	eax, BYTE PTR _bHasVehicleSurfingInfo$[ebp]
	test	eax, eax
	je	SHORT $LN3@Packet_Pla

; 460  : 		bsPlayerSync.Read(ofSync.SurfVehicleId);

	lea	eax, DWORD PTR _ofSync$[ebp+50]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@G@BitStream@RakNet@@QAE_NAAG@Z	; RakNet::BitStream::Read<unsigned short>

; 461  : 		bsPlayerSync.Read(ofSync.vecSurfOffsets.X);

	lea	eax, DWORD PTR _ofSync$[ebp+38]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 462  : 		bsPlayerSync.Read(ofSync.vecSurfOffsets.Y);

	lea	eax, DWORD PTR _ofSync$[ebp+42]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 463  : 		bsPlayerSync.Read(ofSync.vecSurfOffsets.Z);

	lea	eax, DWORD PTR _ofSync$[ebp+46]
	push	eax
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??$Read@M@BitStream@RakNet@@QAE_NAAM@Z	; RakNet::BitStream::Read<float>

; 464  : 	} else {

	jmp	SHORT $LN2@Packet_Pla
$LN3@Packet_Pla:

; 465  : 		ofSync.SurfVehicleId = INVALID_VEHICLE_ID;

	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR _ofSync$[ebp+50], ax
$LN2@Packet_Pla:

; 466  : 	}
; 467  : 
; 468  : 	pPlayer = GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pPlayer$[ebp], eax

; 469  : 
; 470  : 	if(pPlayer) {

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $LN1@Packet_Pla

; 471  : 		pPlayer->StoreOnFootFullSyncData(&ofSync);

	lea	eax, DWORD PTR _ofSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?StoreOnFootFullSyncData@CRemotePlayer@@QAEXPAU_ONFOOT_SYNC_DATA@@@Z ; CRemotePlayer::StoreOnFootFullSyncData
$LN1@Packet_Pla:

; 472  : 	}
; 473  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN21@Packet_Pla:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@Packet_Pla
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 708				; 000002c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN37@Packet_Pla:
	DD	11					; 0000000bH
	DD	$LN36@Packet_Pla
$LN36@Packet_Pla:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN24@Packet_Pla
	DD	-380					; fffffe84H
	DD	52					; 00000034H
	DD	$LN25@Packet_Pla
	DD	-389					; fffffe7bH
	DD	1
	DD	$LN26@Packet_Pla
	DD	-401					; fffffe6fH
	DD	1
	DD	$LN27@Packet_Pla
	DD	-413					; fffffe63H
	DD	1
	DD	$LN28@Packet_Pla
	DD	-425					; fffffe57H
	DD	1
	DD	$LN29@Packet_Pla
	DD	-437					; fffffe4bH
	DD	1
	DD	$LN30@Packet_Pla
	DD	-449					; fffffe3fH
	DD	1
	DD	$LN31@Packet_Pla
	DD	-461					; fffffe33H
	DD	1
	DD	$LN32@Packet_Pla
	DD	-473					; fffffe27H
	DD	1
	DD	$LN33@Packet_Pla
	DD	-485					; fffffe1bH
	DD	1
	DD	$LN34@Packet_Pla
$LN34@Packet_Pla:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN33@Packet_Pla:
	DB	98					; 00000062H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN32@Packet_Pla:
	DB	98					; 00000062H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	90					; 0000005aH
	DB	0
$LN31@Packet_Pla:
	DB	98					; 00000062H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	89					; 00000059H
	DB	0
$LN30@Packet_Pla:
	DB	98					; 00000062H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	88					; 00000058H
	DB	0
$LN29@Packet_Pla:
	DB	98					; 00000062H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	85					; 00000055H
	DB	68					; 00000044H
	DB	0
$LN28@Packet_Pla:
	DB	98					; 00000062H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	76					; 0000004cH
	DB	82					; 00000052H
	DB	0
$LN27@Packet_Pla:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN26@Packet_Pla:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN25@Packet_Pla:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN24@Packet_Pla:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _bsPlayerSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-712]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z ENDP	; CNetGame::Packet_PlayerSync
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z
_TEXT	SEGMENT
_bytePlayerID$ = -393					; size = 1
_bytePacketID$ = -381					; size = 1
_aimSync$ = -372					; size = 42
_bsAimSync$ = -320					; size = 273
_pPlayer$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z PROC	; CNetGame::Packet_AimSync, COMDAT
; _this$ = ecx

; 478  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 580				; 00000244H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-592]
	mov	ecx, 145				; 00000091H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 479  : 	CRemotePlayer * pPlayer;
; 480  : 	RakNet::BitStream bsAimSync((PCHAR)p->data, p->length, false);

	push	0
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	??0BitStream@RakNet@@QAE@PADI_N@Z	; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 481  : 	AIM_SYNC_DATA aimSync;
; 482  : 	BYTE bytePacketID=0;

	mov	BYTE PTR _bytePacketID$[ebp], 0

; 483  : 	BYTE bytePlayerID=0;

	mov	BYTE PTR _bytePlayerID$[ebp], 0

; 484  : 
; 485  : 	if(GetGameState() != GAMESTATE_CONNECTED) return;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetGameState@CNetGame@@QAEHXZ		; CNetGame::GetGameState
	cmp	eax, 2
	je	SHORT $LN2@Packet_Aim
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	SHORT $LN3@Packet_Aim
$LN2@Packet_Aim:

; 486  : 
; 487  : 	bsAimSync.Read(bytePacketID);

	lea	eax, DWORD PTR _bytePacketID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 488  : 	bsAimSync.Read(bytePlayerID);

	lea	eax, DWORD PTR _bytePlayerID$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	??$Read@E@BitStream@RakNet@@QAE_NAAE@Z	; RakNet::BitStream::Read<unsigned char>

; 489  : 	bsAimSync.Read((PCHAR)&aimSync,sizeof(AIM_SYNC_DATA));

	push	42					; 0000002aH
	lea	eax, DWORD PTR _aimSync$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	?Read@BitStream@RakNet@@QAE_NPADH@Z	; RakNet::BitStream::Read

; 490  : 
; 491  : 	pPlayer = GetPlayerPool()->GetAt(bytePlayerID);

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayerPool@CNetGame@@QAEPAVCPlayerPool@@XZ ; CNetGame::GetPlayerPool
	mov	ecx, eax
	call	?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ; CPlayerPool::GetAt
	mov	DWORD PTR _pPlayer$[ebp], eax

; 492  : 
; 493  : 	if(pPlayer) {

	cmp	DWORD PTR _pPlayer$[ebp], 0
	je	SHORT $LN1@Packet_Aim

; 494  : 		pPlayer->UpdateAimFromSyncData(&aimSync);

	lea	eax, DWORD PTR _aimSync$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayer$[ebp]
	call	?UpdateAimFromSyncData@CRemotePlayer@@QAEXPAU_AIM_SYNC_DATA@@@Z ; CRemotePlayer::UpdateAimFromSyncData
$LN1@Packet_Aim:

; 495  : 	}
; 496  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN3@Packet_Aim:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Packet_Aim
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 592				; 00000250H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@Packet_Aim:
	DD	4
	DD	$LN11@Packet_Aim
$LN11@Packet_Aim:
	DD	-320					; fffffec0H
	DD	273					; 00000111H
	DD	$LN6@Packet_Aim
	DD	-372					; fffffe8cH
	DD	42					; 0000002aH
	DD	$LN7@Packet_Aim
	DD	-381					; fffffe83H
	DD	1
	DD	$LN8@Packet_Aim
	DD	-393					; fffffe77H
	DD	1
	DD	$LN9@Packet_Aim
$LN9@Packet_Aim:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN8@Packet_Aim:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	68					; 00000044H
	DB	0
$LN7@Packet_Aim:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
$LN6@Packet_Aim:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	121					; 00000079H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z$0:
	lea	ecx, DWORD PTR _bsAimSync$[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-596]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z ENDP	; CNetGame::Packet_AimSync
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.cpp
;	COMDAT ?UpdateNetwork@CNetGame@@AAEXXZ
_TEXT	SEGMENT
tv76 = -232						; size = 4
_packetIdentifier$ = -29				; size = 1
_pkt$ = -20						; size = 4
_this$ = -8						; size = 4
?UpdateNetwork@CNetGame@@AAEXXZ PROC			; CNetGame::UpdateNetwork, COMDAT
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	Packet* pkt=NULL;

	mov	DWORD PTR _pkt$[ebp], 0
$LN18@UpdateNetw:

; 324  : 	unsigned char packetIdentifier;
; 325  : 
; 326  : 	while((pkt = m_pRakClient->Receive()))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+28]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pkt$[ebp], eax
	cmp	DWORD PTR _pkt$[ebp], 0
	je	$LN19@UpdateNetw

; 327  : 	{
; 328  : 		packetIdentifier = GetPacketID(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	call	?GetPacketID@@YAEPAUPacket@@@Z		; GetPacketID
	add	esp, 4
	mov	BYTE PTR _packetIdentifier$[ebp], al

; 329  : 
; 330  : 		switch(packetIdentifier)

	movzx	eax, BYTE PTR _packetIdentifier$[ebp]
	mov	DWORD PTR tv76[ebp], eax
	mov	ecx, DWORD PTR tv76[ebp]
	sub	ecx, 23					; 00000017H
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], 82			; 00000052H
	ja	$LN15@UpdateNetw
	mov	edx, DWORD PTR tv76[ebp]
	movzx	eax, BYTE PTR $LN21@UpdateNetw[edx]
	jmp	DWORD PTR $LN22@UpdateNetw[eax*4]
$LN14@UpdateNetw:

; 331  : 		{
; 332  : 		case ID_RSA_PUBLIC_KEY_MISMATCH:
; 333  : 			Packet_RSAPublicKeyMismatch(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_RSAPublicKeyMismatch@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_RSAPublicKeyMismatch

; 334  : 			break;

	jmp	$LN15@UpdateNetw
$LN13@UpdateNetw:

; 335  : 		case ID_CONNECTION_BANNED:
; 336  : 			Packet_ConnectionBanned(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_ConnectionBanned@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectionBanned

; 337  : 			break;

	jmp	$LN15@UpdateNetw
$LN12@UpdateNetw:

; 338  : 		case ID_NO_FREE_INCOMING_CONNECTIONS:
; 339  : 			Packet_NoFreeIncomingConnections(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_NoFreeIncomingConnections@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_NoFreeIncomingConnections

; 340  : 			break;

	jmp	$LN15@UpdateNetw
$LN11@UpdateNetw:

; 341  : 		case ID_DISCONNECTION_NOTIFICATION:
; 342  : 			Packet_DisconnectionNotification(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_DisconnectionNotification@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_DisconnectionNotification

; 343  : 			break;

	jmp	$LN15@UpdateNetw
$LN10@UpdateNetw:

; 344  : 		case ID_CONNECTION_LOST:
; 345  : 			Packet_ConnectionLost(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_ConnectionLost@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectionLost

; 346  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN9@UpdateNetw:

; 347  : 		case ID_INVALID_PASSWORD:
; 348  : 			Packet_InvalidPassword(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_InvalidPassword@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_InvalidPassword

; 349  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN8@UpdateNetw:

; 350  : 		case ID_MODIFIED_PACKET:
; 351  : 			Packet_ModifiedPacket(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_ModifiedPacket@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ModifiedPacket

; 352  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN7@UpdateNetw:

; 353  : 		case ID_CONNECTION_ATTEMPT_FAILED: 
; 354  : 			Packet_ConnectAttemptFailed(pkt); 

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_ConnectAttemptFailed@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectAttemptFailed

; 355  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN6@UpdateNetw:

; 356  : 		case ID_CONNECTION_REQUEST_ACCEPTED:
; 357  : 			Packet_ConnectionSucceeded(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_ConnectionSucceeded@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_ConnectionSucceeded

; 358  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN5@UpdateNetw:

; 359  : 		case ID_PLAYER_SYNC:
; 360  : 			Packet_PlayerSync(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_PlayerSync@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_PlayerSync

; 361  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN4@UpdateNetw:

; 362  : 		case ID_VEHICLE_SYNC:
; 363  : 			Packet_VehicleSync(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_VehicleSync@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_VehicleSync

; 364  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN3@UpdateNetw:

; 365  : 		case ID_PASSENGER_SYNC:
; 366  : 			Packet_PassengerSync(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_PassengerSync@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_PassengerSync

; 367  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN2@UpdateNetw:

; 368  : 		case ID_AIM_SYNC:
; 369  : 			Packet_AimSync(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_AimSync@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_AimSync

; 370  : 			break;

	jmp	SHORT $LN15@UpdateNetw
$LN1@UpdateNetw:

; 371  : 		case ID_TRAILER_SYNC:
; 372  : 			Packet_TrailerSync(pkt);

	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Packet_TrailerSync@CNetGame@@AAEXPAUPacket@@@Z ; CNetGame::Packet_TrailerSync
$LN15@UpdateNetw:

; 373  : 			break;
; 374  : 		}
; 375  : 
; 376  : 		m_pRakClient->DeallocatePacket(pkt);		

	mov	esi, esp
	mov	eax, DWORD PTR _pkt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 377  : 	}

	jmp	$LN18@UpdateNetw
$LN19@UpdateNetw:

; 378  : 
; 379  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@UpdateNetw:
	DD	$LN6@UpdateNetw
	DD	$LN7@UpdateNetw
	DD	$LN12@UpdateNetw
	DD	$LN11@UpdateNetw
	DD	$LN10@UpdateNetw
	DD	$LN14@UpdateNetw
	DD	$LN13@UpdateNetw
	DD	$LN9@UpdateNetw
	DD	$LN8@UpdateNetw
	DD	$LN5@UpdateNetw
	DD	$LN4@UpdateNetw
	DD	$LN3@UpdateNetw
	DD	$LN2@UpdateNetw
	DD	$LN1@UpdateNetw
	DD	$LN15@UpdateNetw
$LN21@UpdateNetw:
	DB	0
	DB	1
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	2
	DB	3
	DB	14					; 0000000eH
	DB	4
	DB	5
	DB	6
	DB	14					; 0000000eH
	DB	7
	DB	8
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	13					; 0000000dH
?UpdateNetwork@CNetGame@@AAEXXZ ENDP			; CNetGame::UpdateNetwork
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCTextDrawPool@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCTextDrawPool@@QAEPAXI@Z PROC			; CTextDrawPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CTextDrawPool@@QAE@XZ		; CTextDrawPool::~CTextDrawPool
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCTextDrawPool@@QAEPAXI@Z ENDP			; CTextDrawPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCMenuPool@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCMenuPool@@QAEPAXI@Z PROC				; CMenuPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMenuPool@@QAE@XZ			; CMenuPool::~CMenuPool
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMenuPool@@QAEPAXI@Z ENDP				; CMenuPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCGangZonePool@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCGangZonePool@@QAEPAXI@Z PROC			; CGangZonePool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CGangZonePool@@QAE@XZ		; CGangZonePool::~CGangZonePool
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCGangZonePool@@QAEPAXI@Z ENDP			; CGangZonePool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCObjectPool@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCObjectPool@@QAEPAXI@Z PROC				; CObjectPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CObjectPool@@QAE@XZ			; CObjectPool::~CObjectPool
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCObjectPool@@QAEPAXI@Z ENDP				; CObjectPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCPickupPool@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCPickupPool@@QAEPAXI@Z PROC				; CPickupPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPickupPool@@QAE@XZ			; CPickupPool::~CPickupPool
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPickupPool@@QAEPAXI@Z ENDP				; CPickupPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\pickuppool.h
;	COMDAT ??0CPickupPool@@QAE@XZ
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
??0CPickupPool@@QAE@XZ PROC				; CPickupPool::CPickupPool, COMDAT
; _this$ = ecx

; 54   : 	CPickupPool() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		memset(&m_Pickups[0],0,sizeof(PICKUP) * MAX_PICKUPS);

	push	8000					; 00001f40H
	push	0
	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 56   : 		m_iPickupCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8000], 0

; 57   : 		for (int i = 0; i < MAX_PICKUPS; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@CPickupPoo
$LN2@CPickupPoo:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@CPickupPoo:
	cmp	DWORD PTR _i$1[ebp], 400		; 00000190H
	jge	SHORT $LN4@CPickupPoo

; 58   : 		{
; 59   : 			m_dwHnd[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+8004], 0

; 60   : 			m_iTimer[i] = NULL;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+9604], 0

; 61   : 		}

	jmp	SHORT $LN2@CPickupPoo
$LN4@CPickupPoo:

; 62   : 	};

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPickupPool@@QAE@XZ ENDP				; CPickupPool::CPickupPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCVehiclePool@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCVehiclePool@@QAEPAXI@Z PROC			; CVehiclePool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CVehiclePool@@QAE@XZ			; CVehiclePool::~CVehiclePool
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCVehiclePool@@QAEPAXI@Z ENDP			; CVehiclePool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCPlayerPool@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCPlayerPool@@QAEPAXI@Z PROC				; CPlayerPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPlayerPool@@QAE@XZ			; CPlayerPool::~CPlayerPool
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPlayerPool@@QAEPAXI@Z ENDP				; CPlayerPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bytePlayerID$ = 8					; size = 1
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerPool::GetAt, COMDAT
; _this$ = ecx

; 52   : 	CRemotePlayer* GetAt(BYTE bytePlayerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if(bytePlayerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	cmp	eax, 204				; 000000ccH
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 54   : 		return m_pPlayers[bytePlayerID];

	movzx	eax, BYTE PTR _bytePlayerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+829]
$LN2@GetAt:

; 55   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerPool@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerPool::GetAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ PROC ; CPlayerPool::GetLocalPlayer, COMDAT
; _this$ = ecx

; 46   : 	CLocalPlayer * GetLocalPlayer() { return m_pLocalPlayer; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayer@CPlayerPool@@QAEPAVCLocalPlayer@@XZ ENDP ; CPlayerPool::GetLocalPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?GetLocalPlayerName@CPlayerPool@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayerName@CPlayerPool@@QAEPADXZ PROC		; CPlayerPool::GetLocalPlayerName, COMDAT
; _this$ = ecx

; 40   : 	PCHAR GetLocalPlayerName() { return m_szLocalPlayerName; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 9193				; 000023e9H
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayerName@CPlayerPool@@QAEPADXZ ENDP		; CPlayerPool::GetLocalPlayerName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\playerpool.h
;	COMDAT ?SetLocalPlayerName@CPlayerPool@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szName$ = 8						; size = 4
?SetLocalPlayerName@CPlayerPool@@QAEXPAD@Z PROC		; CPlayerPool::SetLocalPlayerName, COMDAT
; _this$ = ecx

; 39   : 	void SetLocalPlayerName(PCHAR szName) { strcpy(m_szLocalPlayerName,szName); };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _szName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 9193				; 000023e9H
	push	ecx
	call	_strcpy
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLocalPlayerName@CPlayerPool@@QAEXPAD@Z ENDP		; CPlayerPool::SetLocalPlayerName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?SetTeam@CRemotePlayer@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_byteTeam$ = 8						; size = 1
?SetTeam@CRemotePlayer@@QAEXE@Z PROC			; CRemotePlayer::SetTeam, COMDAT
; _this$ = ecx

; 150  : 	void SetTeam(BYTE byteTeam) { m_byteTeam = byteTeam; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _byteTeam$[ebp]
	mov	BYTE PTR [eax+319], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTeam@CRemotePlayer@@QAEXE@Z ENDP			; CRemotePlayer::SetTeam
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\remoteplayer.h
;	COMDAT ?SetVirtualWorld@CRemotePlayer@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_byteWorld$ = 8						; size = 1
?SetVirtualWorld@CRemotePlayer@@QAEXE@Z PROC		; CRemotePlayer::SetVirtualWorld, COMDAT
; _this$ = ecx

; 147  : 	void SetVirtualWorld(BYTE byteWorld) { m_byteVirtualWorld = byteWorld; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _byteWorld$[ebp]
	mov	BYTE PTR [eax+356], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetVirtualWorld@CRemotePlayer@@QAEXE@Z ENDP		; CRemotePlayer::SetVirtualWorld
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\localplayer.h
;	COMDAT ?SetVirtualWorld@CLocalPlayer@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_byteWorld$ = 8						; size = 1
?SetVirtualWorld@CLocalPlayer@@QAEXE@Z PROC		; CLocalPlayer::SetVirtualWorld, COMDAT
; _this$ = ecx

; 247  : 	void SetVirtualWorld(BYTE byteWorld) { m_byteVirtualWorld = byteWorld; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _byteWorld$[ebp]
	mov	BYTE PTR [eax+24], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetVirtualWorld@CLocalPlayer@@QAEXE@Z ENDP		; CLocalPlayer::SetVirtualWorld
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@K@BitStream@RakNet@@QAE_NAAK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@K@BitStream@RakNet@@QAE_NAAK@Z PROC		; RakNet::BitStream::Read<unsigned long>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@K@BitStream@RakNet@@QAE_NAAK@Z ENDP		; RakNet::BitStream::Read<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@G@BitStream@RakNet@@QAE_NAAG@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@G@BitStream@RakNet@@QAE_NAAG@Z PROC		; RakNet::BitStream::Read<unsigned short>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	16					; 00000010H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@G@BitStream@RakNet@@QAE_NAAG@Z ENDP		; RakNet::BitStream::Read<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@I@BitStream@RakNet@@QAE_NAAI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@I@BitStream@RakNet@@QAE_NAAI@Z PROC		; RakNet::BitStream::Read<unsigned int>, COMDAT
; _this$ = ecx

; 987  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 988  : #ifdef _MSC_VER
; 989  : #pragma warning(disable:4127)   // conditional expression is constant
; 990  : #endif
; 991  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Read

; 992  : 			return ReadBits( ( unsigned char* ) &var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
	jmp	SHORT $LN3@Read

; 993  : 		else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 994  : 		{
; 995  : #ifndef __BITSTREAM_NATIVE_END
; 996  : #ifdef _MSC_VER
; 997  : #pragma warning(disable:4244)   // '=' : conversion from 'unsigned long' to 'unsigned short', possible loss of data
; 998  : #endif
; 999  : 			if (DoEndianSwap())
; 1000 : 			{
; 1001 : 				unsigned char output[sizeof(templateType)];
; 1002 : 				if (ReadBits( ( unsigned char* ) output, sizeof(templateType) * 8, true ))
; 1003 : 				{
; 1004 : 					ReverseBytes(output, (unsigned char*)&var, sizeof(templateType));
; 1005 : 					return true;
; 1006 : 				}
; 1007 : 				return false;
; 1008 : 			}
; 1009 : 			else
; 1010 : #endif
; 1011 : 				return ReadBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	mov	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBits@BitStream@RakNet@@QAE_NPAEH_N@Z ; RakNet::BitStream::ReadBits
$LN3@Read:

; 1012 : 		}
; 1013 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@I@BitStream@RakNet@@QAE_NAAI@Z ENDP		; RakNet::BitStream::Read<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z
_TEXT	SEGMENT
tv82 = -208						; size = 4
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z PROC		; RakNet::BitStream::Read<bool>, COMDAT
; _this$ = ecx

; 1019 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1020 : 		if ( readOffset + 1 > numberOfBitsUsed )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx]
	jle	SHORT $LN3@Read

; 1021 : 			return false;

	xor	al, al
	jmp	SHORT $LN4@Read
$LN3@Read:

; 1022 : 
; 1023 : 		if ( data[ readOffset >> 3 ] & ( 0x80 >> ( readOffset++ % 8 ) ) )   // Is it faster to just write it out here?

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN6@Read
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN6@Read:
	mov	eax, 128				; 00000080H
	sar	eax, cl
	and	edx, eax
	mov	DWORD PTR tv82[ebp], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
	cmp	DWORD PTR tv82[ebp], 0
	je	SHORT $LN2@Read

; 1024 : 			var = true;

	mov	eax, DWORD PTR _var$[ebp]
	mov	BYTE PTR [eax], 1

; 1025 : 		else

	jmp	SHORT $LN1@Read
$LN2@Read:

; 1026 : 			var = false;

	mov	eax, DWORD PTR _var$[ebp]
	mov	BYTE PTR [eax], 0
$LN1@Read:

; 1027 : 
; 1028 : 		return true;

	mov	al, 1
$LN4@Read:

; 1029 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$Read@_N@BitStream@RakNet@@QAE_NAA_N@Z ENDP		; RakNet::BitStream::Read<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\raknet\bitstream.h
;	COMDAT ??$Write@I@BitStream@RakNet@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
??$Write@I@BitStream@RakNet@@QAEXI@Z PROC		; RakNet::BitStream::Write<unsigned int>, COMDAT
; _this$ = ecx

; 729  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 730  : #ifdef _MSC_VER
; 731  : #pragma warning(disable:4127)   // conditional expression is constant
; 732  : #endif
; 733  : 		if (sizeof(var)==1)

	xor	eax, eax
	je	SHORT $LN2@Write

; 734  : 			WriteBits( ( unsigned char* ) & var, sizeof( templateType ) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits

; 735  : 		else

	jmp	SHORT $LN3@Write
$LN2@Write:

; 736  : 		{
; 737  : #ifndef __BITSTREAM_NATIVE_END
; 738  : 			if (DoEndianSwap())
; 739  : 			{
; 740  : 				unsigned char output[sizeof(templateType)];
; 741  : 				ReverseBytes((unsigned char*)&var, output, sizeof(templateType));
; 742  : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );
; 743  : 			}
; 744  : 			else
; 745  : #endif
; 746  : 				WriteBits( ( unsigned char* ) & var, sizeof(templateType) * 8, true );

	push	1
	push	32					; 00000020H
	lea	eax, DWORD PTR _var$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEH_N@Z ; RakNet::BitStream::WriteBits
$LN3@Write:

; 747  : 		}
; 748  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$Write@I@BitStream@RakNet@@QAEXI@Z ENDP		; RakNet::BitStream::Write<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ PROC		; CGame::FindPlayerPed, COMDAT
; _this$ = ecx

; 142  : 	CPlayerPed  *FindPlayerPed() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		if(m_pGamePlayer==NULL)	m_pGamePlayer = new CPlayerPed();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@FindPlayer
	push	70					; 00000046H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@FindPlayer
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CPlayerPed@@QAE@XZ			; CPlayerPed::CPlayerPed
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@FindPlayer
$LN4@FindPlayer:
	mov	DWORD PTR tv74[ebp], 0
$LN5@FindPlayer:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@FindPlayer:

; 144  : 		return m_pGamePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 145  : 	};

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ$0:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindPlayerPed@CGame@@QAEPAVCPlayerPed@@XZ ENDP		; CGame::FindPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetCamera@CGame@@QAEPAVCCamera@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCamera@CGame@@QAEPAVCCamera@@XZ PROC		; CGame::GetCamera, COMDAT
; _this$ = ecx

; 135  : 	CCamera     *GetCamera() {	return m_pGameCamera; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCamera@CGame@@QAEPAVCCamera@@XZ ENDP		; CGame::GetCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?ToggleRaceCheckpoints@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bEnabled$ = 8						; size = 4
?ToggleRaceCheckpoints@CGame@@QAEXH@Z PROC		; CGame::ToggleRaceCheckpoints, COMDAT
; _this$ = ecx

; 110  : 	void   ToggleRaceCheckpoints(BOOL bEnabled){ m_bRaceCheckpointsEnabled = bEnabled; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bEnabled$[ebp]
	mov	DWORD PTR [eax+69], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleRaceCheckpoints@CGame@@QAEXH@Z ENDP		; CGame::ToggleRaceCheckpoints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?ToggleCheckpoints@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bEnabled$ = 8						; size = 4
?ToggleCheckpoints@CGame@@QAEXH@Z PROC			; CGame::ToggleCheckpoints, COMDAT
; _this$ = ecx

; 105  : 	void   ToggleCheckpoints(BOOL bEnabled){ m_bCheckpointsEnabled = bEnabled; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bEnabled$[ebp]
	mov	DWORD PTR [eax+32], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleCheckpoints@CGame@@QAEXH@Z ENDP			; CGame::ToggleCheckpoints
_TEXT	ENDS
END
