; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\d3d9\dxutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?m_bTimerInitialized@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA DD 01H DUP (?) ; `DXUtil_Timer'::`2'::m_bTimerInitialized
?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA DD 01H DUP (?) ; `DXUtil_Timer'::`2'::m_bUsingQPF
?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA DQ 01H DUP (?) ; `DXUtil_Timer'::`2'::m_llQPFTicksPerSec
?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA DQ 01H DUP (?) ; `DXUtil_Timer'::`10'::m_llStopTime
?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA DQ 01H DUP (?) ; `DXUtil_Timer'::`10'::m_llLastElapsedTime
?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA DQ 01H DUP (?) ; `DXUtil_Timer'::`10'::m_llBaseTime
?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA DQ 01H DUP (?) ; `DXUtil_Timer'::`41'::m_fLastElapsedTime
?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA DQ 01H DUP (?) ; `DXUtil_Timer'::`41'::m_fBaseTime
?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA DQ 01H DUP (?) ; `DXUtil_Timer'::`41'::m_fStopTime
_BSS	ENDS
_DATA	SEGMENT
?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA DD 01H ; `DXUtil_Timer'::`2'::m_bTimerStopped
_DATA	ENDS
PUBLIC	?strrchr@@YAPADPADH@Z				; strrchr
PUBLIC	?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z		; DXUtil_GetDXSDKMediaPathCch
PUBLIC	?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z		; DXUtil_GetDXSDKMediaPathCb
PUBLIC	?DXUtil_FindMediaFileCch@@YAJPADHPBD@Z		; DXUtil_FindMediaFileCch
PUBLIC	?DXUtil_FindMediaFileCb@@YAJPADHPBD@Z		; DXUtil_FindMediaFileCb
PUBLIC	?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PBD1@Z	; DXUtil_WriteStringRegKey
PUBLIC	?DXUtil_WriteFloatRegKey@@YAJPAUHKEY__@@PBDM@Z	; DXUtil_WriteFloatRegKey
PUBLIC	?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PBDK@Z	; DXUtil_WriteIntRegKey
PUBLIC	?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PBDU_GUID@@@Z ; DXUtil_WriteGuidRegKey
PUBLIC	?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PBDH@Z	; DXUtil_WriteBoolRegKey
PUBLIC	?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PBDPADK1@Z ; DXUtil_ReadStringRegKeyCch
PUBLIC	?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PBDPADK1@Z ; DXUtil_ReadStringRegKeyCb
PUBLIC	?DXUtil_ReadFloatRegKey@@YAJPAUHKEY__@@PBDPAMM@Z ; DXUtil_ReadFloatRegKey
PUBLIC	?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PBDPAKK@Z	; DXUtil_ReadIntRegKey
PUBLIC	?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PBDPAU_GUID@@AAU2@@Z ; DXUtil_ReadGuidRegKey
PUBLIC	?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PBDPAHH@Z	; DXUtil_ReadBoolRegKey
PUBLIC	?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z		; DXUtil_Timer
PUBLIC	?DXUtil_ConvertAnsiStringToWideCch@@YAJPA_WPBDH@Z ; DXUtil_ConvertAnsiStringToWideCch
PUBLIC	?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPB_WH@Z ; DXUtil_ConvertWideStringToAnsiCch
PUBLIC	?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z ; DXUtil_ConvertGenericStringToAnsiCch
PUBLIC	?DXUtil_ConvertGenericStringToWideCch@@YAJPA_WPBDH@Z ; DXUtil_ConvertGenericStringToWideCch
PUBLIC	?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z ; DXUtil_ConvertAnsiStringToGenericCch
PUBLIC	?DXUtil_ConvertWideStringToGenericCch@@YAJPADPB_WH@Z ; DXUtil_ConvertWideStringToGenericCch
PUBLIC	?DXUtil_ConvertAnsiStringToWideCb@@YAJPA_WPBDH@Z ; DXUtil_ConvertAnsiStringToWideCb
PUBLIC	?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPB_WH@Z ; DXUtil_ConvertWideStringToAnsiCb
PUBLIC	?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z ; DXUtil_ConvertGenericStringToAnsiCb
PUBLIC	?DXUtil_ConvertGenericStringToWideCb@@YAJPA_WPBDH@Z ; DXUtil_ConvertGenericStringToWideCb
PUBLIC	?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z ; DXUtil_ConvertAnsiStringToGenericCb
PUBLIC	?DXUtil_ConvertWideStringToGenericCb@@YAJPADPB_WH@Z ; DXUtil_ConvertWideStringToGenericCb
PUBLIC	?DXUtil_LaunchReadme@@YAXPAUHWND__@@PBD@Z	; DXUtil_LaunchReadme
PUBLIC	?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z ; DXUtil_ConvertGUIDToStringCch
PUBLIC	?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z ; DXUtil_ConvertGUIDToStringCb
PUBLIC	?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z	; DXUtil_ConvertStringToGUID
PUBLIC	?DXUtil_Trace@@YAXPBDZZ				; DXUtil_Trace
PUBLIC	??0CArrayList@@QAE@W4ArrayListType@@I@Z		; CArrayList::CArrayList
PUBLIC	??1CArrayList@@QAE@XZ				; CArrayList::~CArrayList
PUBLIC	?Add@CArrayList@@QAEJPAX@Z			; CArrayList::Add
PUBLIC	?Remove@CArrayList@@QAEXI@Z			; CArrayList::Remove
PUBLIC	?GetPtr@CArrayList@@QAEPAXI@Z			; CArrayList::GetPtr
PUBLIC	?Contains@CArrayList@@QAE_NPAX@Z		; CArrayList::Contains
PUBLIC	?DXUtil_FindMediaSearchParentDirs@@YA_NPADH00@Z	; DXUtil_FindMediaSearchParentDirs
PUBLIC	?DXUtil_FindMediaSearchTypicalDirs@@YA_NPADHPBD000@Z ; DXUtil_FindMediaSearchTypicalDirs
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@ ; `string'
PUBLIC	??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@	; `string'
PUBLIC	??_C@_07JADGJGAE@?2Media?2?$AA@			; `string'
PUBLIC	??_C@_08GDMOFFMA@media?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_05LGCFLFFL@?4?4?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@		; `string'
PUBLIC	??_C@_08OPCCNCAK@?$CFs?2?4?4?2?$CFs?$AA@	; `string'
PUBLIC	??_C@_0M@HKPCIGNN@?$CFs?2?4?4?2?4?4?2?$CFs?$AA@	; `string'
PUBLIC	??_C@_0M@NALGHNGE@?$CFs?2?4?4?2?$CFs?2?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0P@HEBEMA@?$CFs?2?4?4?2?4?4?2?$CFs?2?$CFs?$AA@ ; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_05BPCBICBK@?$CFs?2?4?4?$AA@		; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_0L@KLNBHJJA@readme?4htm?$AA@		; `string'
PUBLIC	??_C@_0L@CDAEMBML@readme?4txt?$AA@		; `string'
PUBLIC	??_C@_0N@BILGBANM@?$CFs?2C?$CL?$CL?2?$CFs?2?$CFs?$AA@ ; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0O@OPBAJDEF@?2BumpMapping?2?$AA@		; `string'
PUBLIC	??_C@_0N@PCBFHMJI@?2EnvMapping?2?$AA@		; `string'
PUBLIC	??_C@_08IODDGNMO@?2Meshes?2?$AA@		; `string'
PUBLIC	??_C@_0BA@MMIAJLJK@?2StencilBuffer?2?$AA@	; `string'
PUBLIC	??_C@_0BA@GJGFKFOH@shell32?4dlTEXT?$CI?$AA@	; `string'
PUBLIC	??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@		; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@	; `string'
PUBLIC	??_C@_0BG@NJKFMAAN@Could?5not?5find?5readme?$AA@ ; `string'
PUBLIC	??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@ ; `string'
PUBLIC	??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3fb99999a0000000
PUBLIC	__real@bf800000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	_strncpy:PROC
EXTRN	_strrchr:PROC
EXTRN	__imp__GetFileAttributesA@4:PROC
EXTRN	__imp__GetFullPathNameA@16:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__QueryPerformanceCounter@4:PROC
EXTRN	__imp__QueryPerformanceFrequency@4:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__lstrcpynA@12:PROC
EXTRN	__imp__lstrcpyA@8:PROC
EXTRN	__imp__lstrcatA@8:PROC
EXTRN	__imp__lstrlenA@4:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	__imp__RegSetValueExA@24:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	_sscanf:PROC
EXTRN	__snprintf:PROC
EXTRN	__vsnprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__alldiv:PROC
EXTRN	__ltod3:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@
CONST	SEGMENT
??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@ DB '{'
	DB	'%0.8X-%0.4X-%0.4X-%0.2X%0.2X-%0.2X%0.2X%0.2X%0.2X%0.2X%0.2X}', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@
CONST	SEGMENT
??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@ DB '{'
	DB	'%8X-%4X-%4X-%2X%2X-%2X%2X%2X%2X%2X%2X}', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJKFMAAN@Could?5not?5find?5readme?$AA@
CONST	SEGMENT
??_C@_0BG@NJKFMAAN@Could?5not?5find?5readme?$AA@ DB 'Could not find readm'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@
CONST	SEGMENT
??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@ DB 'DirectX SDK Sample', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@
CONST	SEGMENT
??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@ DB 'ShellExecuteA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GJGFKFOH@shell32?4dlTEXT?$CI?$AA@
CONST	SEGMENT
??_C@_0BA@GJGFKFOH@shell32?4dlTEXT?$CI?$AA@ DB 'shell32.dlTEXT(', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MMIAJLJK@?2StencilBuffer?2?$AA@
CONST	SEGMENT
??_C@_0BA@MMIAJLJK@?2StencilBuffer?2?$AA@ DB '\StencilBuffer\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IODDGNMO@?2Meshes?2?$AA@
CONST	SEGMENT
??_C@_08IODDGNMO@?2Meshes?2?$AA@ DB '\Meshes\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PCBFHMJI@?2EnvMapping?2?$AA@
CONST	SEGMENT
??_C@_0N@PCBFHMJI@?2EnvMapping?2?$AA@ DB '\EnvMapping\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OPBAJDEF@?2BumpMapping?2?$AA@
CONST	SEGMENT
??_C@_0O@OPBAJDEF@?2BumpMapping?2?$AA@ DB '\BumpMapping\', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BILGBANM@?$CFs?2C?$CL?$CL?2?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_0N@BILGBANM@?$CFs?2C?$CL?$CL?2?$CFs?2?$CFs?$AA@ DB '%s\C++\%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CDAEMBML@readme?4txt?$AA@
CONST	SEGMENT
??_C@_0L@CDAEMBML@readme?4txt?$AA@ DB 'readme.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KLNBHJJA@readme?4htm?$AA@
CONST	SEGMENT
??_C@_0L@KLNBHJJA@readme?4htm?$AA@ DB 'readme.htm', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BPCBICBK@?$CFs?2?4?4?$AA@
CONST	SEGMENT
??_C@_05BPCBICBK@?$CFs?2?4?4?$AA@ DB '%s\..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HEBEMA@?$CFs?2?4?4?2?4?4?2?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_0P@HEBEMA@?$CFs?2?4?4?2?4?4?2?$CFs?2?$CFs?$AA@ DB '%s\..\..\%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NALGHNGE@?$CFs?2?4?4?2?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@NALGHNGE@?$CFs?2?4?4?2?$CFs?2?$CFs?$AA@ DB '%s\..\%s\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HKPCIGNN@?$CFs?2?4?4?2?4?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@HKPCIGNN@?$CFs?2?4?4?2?4?4?2?$CFs?$AA@ DB '%s\..\..\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OPCCNCAK@?$CFs?2?4?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_08OPCCNCAK@?$CFs?2?4?4?2?$CFs?$AA@ DB '%s\..\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
CONST	SEGMENT
??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@ DB '%s\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@ DB '..\..\%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGCFLFFL@?4?4?2?$CFs?$AA@
CONST	SEGMENT
??_C@_05LGCFLFFL@?4?4?2?$CFs?$AA@ DB '..\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GDMOFFMA@media?2?$CFs?$AA@
CONST	SEGMENT
??_C@_08GDMOFFMA@media?2?$CFs?$AA@ DB 'media\%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JADGJGAE@?2Media?2?$AA@
CONST	SEGMENT
??_C@_07JADGJGAE@?2Media?2?$AA@ DB '\Media\', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@
CONST	SEGMENT
??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@ DB 'DX9S4SDK Samples Path'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
CONST	SEGMENT
??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@ DB 'Software\Mi'
	DB	'crosoft\DirectX SDK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_FindMediaSearchTypicalDirs@@YA_NPADHPBD000@Z
_TEXT	SEGMENT
_strSearchPath$ = 8					; size = 4
_cchSearch$ = 12					; size = 4
_strLeaf$ = 16						; size = 4
_strExePath$ = 20					; size = 4
_strExeName$ = 24					; size = 4
_strMediaDir$ = 28					; size = 4
?DXUtil_FindMediaSearchTypicalDirs@@YA_NPADHPBD000@Z PROC ; DXUtil_FindMediaSearchTypicalDirs, COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 172  :     // Typical directories:
; 173  :     //      .\
; 174  :     //      ..\
; 175  :     //      ..\..\
; 176  :     //      %EXE_DIR%\
; 177  :     //      %EXE_DIR%\..\
; 178  :     //      %EXE_DIR%\..\..\
; 179  :     //      %EXE_DIR%\..\%EXE_NAME%
; 180  :     //      %EXE_DIR%\..\..\%EXE_NAME%
; 181  :     //      DXSDK media path
; 182  : 
; 183  :     // Search in .\  
; 184  :     _tcsncpy( strSearchPath, strLeaf, cchSearch ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _cchSearch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strLeaf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 185  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN10@DXUtil_Fin

; 186  :         return true;

	mov	al, 1
	jmp	$LN11@DXUtil_Fin
$LN10@DXUtil_Fin:

; 187  : 
; 188  :     // Search in ..\  
; 189  :     _sntprintf( strSearchPath, cchSearch, TEXT("..\\%s"), strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	push	OFFSET ??_C@_05LGCFLFFL@?4?4?2?$CFs?$AA@
	mov	ecx, DWORD PTR _cchSearch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	__snprintf
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 190  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN9@DXUtil_Fin

; 191  :         return true;

	mov	al, 1
	jmp	$LN11@DXUtil_Fin
$LN9@DXUtil_Fin:

; 192  : 
; 193  :     // Search in ..\..\ 
; 194  :     _sntprintf( strSearchPath, cchSearch, TEXT("..\\..\\%s"), strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	push	OFFSET ??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@
	mov	ecx, DWORD PTR _cchSearch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	__snprintf
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 195  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN8@DXUtil_Fin

; 196  :         return true;

	mov	al, 1
	jmp	$LN11@DXUtil_Fin
$LN8@DXUtil_Fin:

; 197  : 
; 198  :     // Search in ..\..\ 
; 199  :     _sntprintf( strSearchPath, cchSearch, TEXT("..\\..\\%s"), strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	push	OFFSET ??_C@_08KDFEKKMA@?4?4?2?4?4?2?$CFs?$AA@
	mov	ecx, DWORD PTR _cchSearch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	__snprintf
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 200  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN7@DXUtil_Fin

; 201  :         return true;

	mov	al, 1
	jmp	$LN11@DXUtil_Fin
$LN7@DXUtil_Fin:

; 202  : 
; 203  :     // Search in the %EXE_DIR%\ 
; 204  :     _sntprintf( strSearchPath, cchSearch, TEXT("%s\\%s"), strExePath, strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	mov	edx, DWORD PTR _cchSearch$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	__snprintf
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 205  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN6@DXUtil_Fin

; 206  :         return true;

	mov	al, 1
	jmp	$LN11@DXUtil_Fin
$LN6@DXUtil_Fin:

; 207  : 
; 208  :     // Search in the %EXE_DIR%\..\ 
; 209  :     _sntprintf( strSearchPath, cchSearch, TEXT("%s\\..\\%s"), strExePath, strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	push	OFFSET ??_C@_08OPCCNCAK@?$CFs?2?4?4?2?$CFs?$AA@
	mov	edx, DWORD PTR _cchSearch$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	__snprintf
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 210  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN5@DXUtil_Fin

; 211  :         return true;

	mov	al, 1
	jmp	$LN11@DXUtil_Fin
$LN5@DXUtil_Fin:

; 212  : 
; 213  :     // Search in the %EXE_DIR%\..\..\ 
; 214  :     _sntprintf( strSearchPath, cchSearch, TEXT("%s\\..\\..\\%s"), strExePath, strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@HKPCIGNN@?$CFs?2?4?4?2?4?4?2?$CFs?$AA@
	mov	edx, DWORD PTR _cchSearch$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	__snprintf
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 215  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN4@DXUtil_Fin

; 216  :         return true;

	mov	al, 1
	jmp	$LN11@DXUtil_Fin
$LN4@DXUtil_Fin:

; 217  : 
; 218  :     // Search in "%EXE_DIR%\..\%EXE_NAME%\".  This matches the DirectX SDK layout
; 219  :     _sntprintf( strSearchPath, cchSearch, TEXT("%s\\..\\%s\\%s"), strExePath, strExeName, strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strExePath$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@NALGHNGE@?$CFs?2?4?4?2?$CFs?2?$CFs?$AA@
	mov	eax, DWORD PTR _cchSearch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strSearchPath$[ebp]
	push	ecx
	call	__snprintf
	add	esp, 24					; 00000018H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 220  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN3@DXUtil_Fin

; 221  :         return true;

	mov	al, 1
	jmp	$LN11@DXUtil_Fin
$LN3@DXUtil_Fin:

; 222  : 
; 223  :     // Search in "%EXE_DIR%\..\..\%EXE_NAME%\".  This matches the DirectX SDK layout
; 224  :     _sntprintf( strSearchPath, cchSearch, TEXT("%s\\..\\..\\%s\\%s"), strExePath, strExeName, strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strExePath$[ebp]
	push	edx
	push	OFFSET ??_C@_0P@HEBEMA@?$CFs?2?4?4?2?4?4?2?$CFs?2?$CFs?$AA@
	mov	eax, DWORD PTR _cchSearch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strSearchPath$[ebp]
	push	ecx
	call	__snprintf
	add	esp, 24					; 00000018H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 225  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN2@DXUtil_Fin

; 226  :         return true;

	mov	al, 1
	jmp	SHORT $LN11@DXUtil_Fin
$LN2@DXUtil_Fin:

; 227  : 
; 228  :     // Search in DirectX SDK's media dir 
; 229  :     _sntprintf( strSearchPath, cchSearch, TEXT("%s%s"), strMediaDir, strLeaf ); strSearchPath[cchSearch-1] = 0;

	mov	eax, DWORD PTR _strLeaf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strMediaDir$[ebp]
	push	ecx
	push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
	mov	edx, DWORD PTR _cchSearch$[ebp]
	push	edx
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	__snprintf
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 230  :     if( GetFileAttributes( strSearchPath ) != 0xFFFFFFFF )

	mov	esi, esp
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN1@DXUtil_Fin

; 231  :         return true;

	mov	al, 1
	jmp	SHORT $LN11@DXUtil_Fin
$LN1@DXUtil_Fin:

; 232  : 
; 233  :     return false;

	xor	al, al
$LN11@DXUtil_Fin:

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_FindMediaSearchTypicalDirs@@YA_NPADHPBD000@Z ENDP ; DXUtil_FindMediaSearchTypicalDirs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_FindMediaSearchParentDirs@@YA_NPADH00@Z
_TEXT	SEGMENT
$T1 = -1032						; size = 4
$T2 = -1020						; size = 4
_strFilePart$ = -816					; size = 4
_strSearch$ = -804					; size = 260
_strFullFileName$ = -536				; size = 260
_strFullPath$ = -268					; size = 260
__$ArrayPad$ = -4					; size = 4
_strSearchPath$ = 8					; size = 4
_cchSearch$ = 12					; size = 4
_strStartAt$ = 16					; size = 4
_strLeafName$ = 20					; size = 4
?DXUtil_FindMediaSearchParentDirs@@YA_NPADH00@Z PROC	; DXUtil_FindMediaSearchParentDirs, COMDAT

; 243  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1036				; 0000040cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1036]
	mov	ecx, 259				; 00000103H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 244  :     TCHAR strFullPath[MAX_PATH] = {0};

	mov	BYTE PTR _strFullPath$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strFullPath$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 245  :     TCHAR strFullFileName[MAX_PATH] = {0};

	mov	BYTE PTR _strFullFileName$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strFullFileName$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 246  :     TCHAR strSearch[MAX_PATH] = {0};

	mov	BYTE PTR _strSearch$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strSearch$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 247  :     TCHAR* strFilePart = NULL;

	mov	DWORD PTR _strFilePart$[ebp], 0

; 248  : 
; 249  :     GetFullPathName( strStartAt, MAX_PATH, strFullPath, &strFilePart );

	mov	esi, esp
	lea	eax, DWORD PTR _strFilePart$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strFullPath$[ebp]
	push	ecx
	push	260					; 00000104H
	mov	edx, DWORD PTR _strStartAt$[ebp]
	push	edx
	call	DWORD PTR __imp__GetFullPathNameA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 250  :     if( strFilePart == NULL )

	cmp	DWORD PTR _strFilePart$[ebp], 0
	jne	SHORT $LN3@DXUtil_Fin

; 251  :         return false;

	xor	al, al
	jmp	$LN6@DXUtil_Fin
$LN3@DXUtil_Fin:

; 252  :    
; 253  :     while( strFilePart != NULL )

	cmp	DWORD PTR _strFilePart$[ebp], 0
	je	$LN2@DXUtil_Fin

; 254  :     {
; 255  :         _sntprintf( strFullFileName, MAX_PATH, TEXT("%s\\%s"), strFullPath, strLeafName ); strFullFileName[MAX_PATH-1] = 0;       

	mov	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strFullPath$[ebp]
	push	ecx
	push	OFFSET ??_C@_05BMGBEOOC@?$CFs?2?$CFs?$AA@
	push	260					; 00000104H
	lea	edx, DWORD PTR _strFullFileName$[ebp]
	push	edx
	call	__snprintf
	add	esp, 20					; 00000014H
	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 260			; 00000104H
	jae	SHORT $LN7@DXUtil_Fin
	jmp	SHORT $LN8@DXUtil_Fin
$LN7@DXUtil_Fin:
	call	___report_rangecheckfailure
$LN8@DXUtil_Fin:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strFullFileName$[ebp+edx], 0

; 256  :         if( GetFileAttributes( strFullFileName ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strFullFileName$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN1@DXUtil_Fin

; 257  :         {
; 258  :             _tcsncpy( strSearchPath, strFullFileName, cchSearch ); strSearchPath[cchSearch-1] = 0; 

	mov	eax, DWORD PTR _cchSearch$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strFullFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strSearchPath$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _strSearchPath$[ebp]
	add	eax, DWORD PTR _cchSearch$[ebp]
	mov	BYTE PTR [eax-1], 0

; 259  :             return true;

	mov	al, 1
	jmp	$LN6@DXUtil_Fin
$LN1@DXUtil_Fin:

; 260  :         }
; 261  : 
; 262  :         _sntprintf( strSearch, MAX_PATH, TEXT("%s\\.."), strFullPath ); strSearch[MAX_PATH-1] = 0;

	lea	eax, DWORD PTR _strFullPath$[ebp]
	push	eax
	push	OFFSET ??_C@_05BPCBICBK@?$CFs?2?4?4?$AA@
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strSearch$[ebp]
	push	ecx
	call	__snprintf
	add	esp, 16					; 00000010H
	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 260			; 00000104H
	jae	SHORT $LN9@DXUtil_Fin
	jmp	SHORT $LN10@DXUtil_Fin
$LN9@DXUtil_Fin:
	call	___report_rangecheckfailure
$LN10@DXUtil_Fin:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _strSearch$[ebp+edx], 0

; 263  :         GetFullPathName( strSearch, MAX_PATH, strFullPath, &strFilePart );

	mov	esi, esp
	lea	eax, DWORD PTR _strFilePart$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strFullPath$[ebp]
	push	ecx
	push	260					; 00000104H
	lea	edx, DWORD PTR _strSearch$[ebp]
	push	edx
	call	DWORD PTR __imp__GetFullPathNameA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 264  :     }

	jmp	$LN3@DXUtil_Fin
$LN2@DXUtil_Fin:

; 265  : 
; 266  :     return false;

	xor	al, al
$LN6@DXUtil_Fin:

; 267  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@DXUtil_Fin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1036				; 0000040cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@DXUtil_Fin:
	DD	4
	DD	$LN15@DXUtil_Fin
$LN15@DXUtil_Fin:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN11@DXUtil_Fin
	DD	-536					; fffffde8H
	DD	260					; 00000104H
	DD	$LN12@DXUtil_Fin
	DD	-804					; fffffcdcH
	DD	260					; 00000104H
	DD	$LN13@DXUtil_Fin
	DD	-816					; fffffcd0H
	DD	4
	DD	$LN14@DXUtil_Fin
$LN14@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN13@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN12@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN11@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?DXUtil_FindMediaSearchParentDirs@@YA_NPADH00@Z ENDP	; DXUtil_FindMediaSearchParentDirs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?Contains@CArrayList@@QAE_NPAX@Z
_TEXT	SEGMENT
_iEntry$1 = -20						; size = 4
_this$ = -8						; size = 4
_pEntryData$ = 8					; size = 4
?Contains@CArrayList@@QAE_NPAX@Z PROC			; CArrayList::Contains, COMDAT
; _this$ = ecx

; 1298 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1299 :     for( UINT iEntry = 0; iEntry < m_NumEntries; iEntry++ )

	mov	DWORD PTR _iEntry$1[ebp], 0
	jmp	SHORT $LN7@Contains
$LN6@Contains:
	mov	eax, DWORD PTR _iEntry$1[ebp]
	add	eax, 1
	mov	DWORD PTR _iEntry$1[ebp], eax
$LN7@Contains:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iEntry$1[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN5@Contains

; 1300 :     {
; 1301 :         if( m_ArrayListType == AL_VALUE )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@Contains

; 1302 :         {
; 1303 :             if( memcmp( GetPtr(iEntry), pEntryData, m_BytesPerEntry ) == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pEntryData$[ebp]
	push	edx
	mov	eax, DWORD PTR _iEntry$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPtr@CArrayList@@QAEPAXI@Z		; CArrayList::GetPtr
	push	eax
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN3@Contains

; 1304 :                 return true;

	mov	al, 1
	jmp	SHORT $LN8@Contains
$LN3@Contains:

; 1305 :         }
; 1306 :         else

	jmp	SHORT $LN2@Contains
$LN4@Contains:

; 1307 :         {
; 1308 :             if( GetPtr(iEntry) == pEntryData )

	mov	eax, DWORD PTR _iEntry$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPtr@CArrayList@@QAEPAXI@Z		; CArrayList::GetPtr
	cmp	eax, DWORD PTR _pEntryData$[ebp]
	jne	SHORT $LN2@Contains

; 1309 :                 return true;

	mov	al, 1
	jmp	SHORT $LN8@Contains
$LN2@Contains:

; 1310 :         }
; 1311 :     }

	jmp	SHORT $LN6@Contains
$LN5@Contains:

; 1312 :     return false;

	xor	al, al
$LN8@Contains:

; 1313 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Contains@CArrayList@@QAE_NPAX@Z ENDP			; CArrayList::Contains
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?GetPtr@CArrayList@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Entry$ = 8						; size = 4
?GetPtr@CArrayList@@QAEPAXI@Z PROC			; CArrayList::GetPtr, COMDAT
; _this$ = ecx

; 1282 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1283 :     if( m_ArrayListType == AL_VALUE )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@GetPtr

; 1284 :         return (BYTE*)m_pData + (Entry * m_BytesPerEntry);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Entry$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	eax, ecx
	jmp	SHORT $LN3@GetPtr

; 1285 :     else

	jmp	SHORT $LN3@GetPtr
$LN2@GetPtr:

; 1286 :         return *(((void**)m_pData) + Entry);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _Entry$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
$LN3@GetPtr:

; 1287 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPtr@CArrayList@@QAEPAXI@Z ENDP			; CArrayList::GetPtr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?Remove@CArrayList@@QAEXI@Z
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
_Entry$ = 8						; size = 4
?Remove@CArrayList@@QAEXI@Z PROC			; CArrayList::Remove, COMDAT
; _this$ = ecx

; 1263 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1264 :     // Decrement count
; 1265 :     m_NumEntries--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 1266 : 
; 1267 :     // Find the entry address
; 1268 :     BYTE* pData = (BYTE*)m_pData + (Entry * m_BytesPerEntry);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Entry$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _pData$[ebp], ecx

; 1269 : 
; 1270 :     // Collapse the array
; 1271 :     MoveMemory( pData, pData + m_BytesPerEntry, ( m_NumEntries - Entry ) * m_BytesPerEntry );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _Entry$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	add	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 1272 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@CArrayList@@QAEXI@Z ENDP			; CArrayList::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?Add@CArrayList@@QAEJPAX@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_NumEntriesAllocatedNew$3 = -32				; size = 4
_pDataNew$4 = -20					; size = 4
_this$ = -8						; size = 4
_pEntry$ = 8						; size = 4
?Add@CArrayList@@QAEJPAX@Z PROC				; CArrayList::Add, COMDAT
; _this$ = ecx

; 1223 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1224 :     if( m_BytesPerEntry == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN9@Add

; 1225 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN10@Add
$LN9@Add:

; 1226 :     if( m_pData == NULL || m_NumEntries + 1 > m_NumEntriesAllocated )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@Add
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+16]
	jbe	$LN8@Add
$LN7@Add:

; 1227 :     {
; 1228 :         void* pDataNew;
; 1229 :         UINT NumEntriesAllocatedNew;
; 1230 :         if( m_NumEntriesAllocated == 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN6@Add

; 1231 :             NumEntriesAllocatedNew = 16;

	mov	DWORD PTR _NumEntriesAllocatedNew$3[ebp], 16 ; 00000010H

; 1232 :         else

	jmp	SHORT $LN5@Add
$LN6@Add:

; 1233 :             NumEntriesAllocatedNew = m_NumEntriesAllocated * 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 1
	mov	DWORD PTR _NumEntriesAllocatedNew$3[ebp], ecx
$LN5@Add:

; 1234 :         pDataNew = new BYTE[NumEntriesAllocatedNew * m_BytesPerEntry];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NumEntriesAllocatedNew$3[ebp]
	imul	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pDataNew$4[ebp], edx

; 1235 :         if( pDataNew == NULL )

	cmp	DWORD PTR _pDataNew$4[ebp], 0
	jne	SHORT $LN4@Add

; 1236 :             return E_OUTOFMEMORY;

	mov	eax, -2147024882			; 8007000eH
	jmp	$LN10@Add
$LN4@Add:

; 1237 :         if( m_pData != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Add

; 1238 :         {
; 1239 :             CopyMemory( pDataNew, m_pData, m_NumEntries * m_BytesPerEntry );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pDataNew$4[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1240 :             delete[] m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN3@Add:

; 1241 :         }
; 1242 :         m_pData = pDataNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDataNew$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1243 :         m_NumEntriesAllocated = NumEntriesAllocatedNew;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NumEntriesAllocatedNew$3[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN8@Add:

; 1244 :     }
; 1245 : 
; 1246 :     if( m_ArrayListType == AL_VALUE )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@Add

; 1247 :         CopyMemory( (BYTE*)m_pData + (m_NumEntries * m_BytesPerEntry), pEntry, m_BytesPerEntry );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	imul	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1248 :     else

	jmp	SHORT $LN1@Add
$LN2@Add:

; 1249 :         *(((void**)m_pData) + m_NumEntries) = pEntry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _pEntry$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
$LN1@Add:

; 1250 :     m_NumEntries++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 1251 : 
; 1252 :     return S_OK;

	xor	eax, eax
$LN10@Add:

; 1253 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@CArrayList@@QAEJPAX@Z ENDP				; CArrayList::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ??1CArrayList@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1CArrayList@@QAE@XZ PROC				; CArrayList::~CArrayList, COMDAT
; _this$ = ecx

; 1210 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1211 :     if( m_pData != NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@CArrayList

; 1212 :         delete[] m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@CArrayList:

; 1213 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CArrayList@@QAE@XZ ENDP				; CArrayList::~CArrayList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ??0CArrayList@@QAE@W4ArrayListType@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Type$ = 8						; size = 4
_BytesPerEntry$ = 12					; size = 4
??0CArrayList@@QAE@W4ArrayListType@@I@Z PROC		; CArrayList::CArrayList, COMDAT
; _this$ = ecx

; 1193 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1194 :     if( Type == AL_REFERENCE )

	cmp	DWORD PTR _Type$[ebp], 1
	jne	SHORT $LN1@CArrayList

; 1195 :         BytesPerEntry = sizeof(void*);

	mov	DWORD PTR _BytesPerEntry$[ebp], 4
$LN1@CArrayList:

; 1196 :     m_ArrayListType = Type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Type$[ebp]
	mov	DWORD PTR [eax], ecx

; 1197 :     m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1198 :     m_BytesPerEntry = BytesPerEntry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _BytesPerEntry$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1199 :     m_NumEntries = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1200 :     m_NumEntriesAllocated = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1201 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CArrayList@@QAE@W4ArrayListType@@I@Z ENDP		; CArrayList::CArrayList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_Trace@@YAXPBDZZ
_TEXT	SEGMENT
_args$ = -532						; size = 4
_strBuffer$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_strMsg$ = 8						; size = 4
?DXUtil_Trace@@YAXPBDZZ PROC				; DXUtil_Trace, COMDAT

; 1109 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 728				; 000002d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-728]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1110 : #if defined(DEBUG) | defined(_DEBUG)
; 1111 :     TCHAR strBuffer[512];
; 1112 :     
; 1113 :     va_list args;
; 1114 :     va_start(args, strMsg);

	lea	eax, DWORD PTR _strMsg$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 1115 :     _vsntprintf( strBuffer, 512, strMsg, args );

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strMsg$[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _strBuffer$[ebp]
	push	edx
	call	__vsnprintf
	add	esp, 16					; 00000010H

; 1116 :     va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 1117 : 
; 1118 :     OutputDebugString( strBuffer );

	mov	esi, esp
	lea	eax, DWORD PTR _strBuffer$[ebp]
	push	eax
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1119 : #else
; 1120 :     UNREFERENCED_PARAMETER(strMsg);
; 1121 : #endif
; 1122 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@DXUtil_Tra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 728				; 000002d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@DXUtil_Tra:
	DD	1
	DD	$LN4@DXUtil_Tra
$LN4@DXUtil_Tra:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@DXUtil_Tra
$LN3@DXUtil_Tra:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?DXUtil_Trace@@YAXPBDZZ ENDP				; DXUtil_Trace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z
_TEXT	SEGMENT
_aiTmp$ = -48						; size = 40
__$ArrayPad$ = -4					; size = 4
_strSrc$ = 8						; size = 4
_pGuidDest$ = 12					; size = 4
?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z PROC	; DXUtil_ConvertStringToGUID, COMDAT

; 1132 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1133 :     UINT aiTmp[10];
; 1134 : 
; 1135 :     if( _stscanf( strSrc, TEXT("{%8X-%4X-%4X-%2X%2X-%2X%2X%2X%2X%2X%2X}"),
; 1136 :                     &pGuidDest->Data1, 
; 1137 :                     &aiTmp[0], &aiTmp[1], 
; 1138 :                     &aiTmp[2], &aiTmp[3],
; 1139 :                     &aiTmp[4], &aiTmp[5],
; 1140 :                     &aiTmp[6], &aiTmp[7],
; 1141 :                     &aiTmp[8], &aiTmp[9] ) != 11 )

	mov	eax, 4
	imul	ecx, eax, 9
	lea	edx, DWORD PTR _aiTmp$[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 3
	lea	ecx, DWORD PTR _aiTmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	lea	ecx, DWORD PTR _aiTmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	lea	ecx, DWORD PTR _aiTmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	lea	ecx, DWORD PTR _aiTmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	lea	eax, DWORD PTR _aiTmp$[ebp+edx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	lea	eax, DWORD PTR _aiTmp$[ebp+edx]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	lea	edx, DWORD PTR _aiTmp$[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	lea	ecx, DWORD PTR _aiTmp$[ebp+eax]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _aiTmp$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _pGuidDest$[ebp]
	push	edx
	push	OFFSET ??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@
	mov	eax, DWORD PTR _strSrc$[ebp]
	push	eax
	call	_sscanf
	add	esp, 52					; 00000034H
	cmp	eax, 11					; 0000000bH
	je	SHORT $LN2@DXUtil_Con

; 1142 :     {
; 1143 :         ZeroMemory( pGuidDest, sizeof(GUID) );

	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _pGuidDest$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1144 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN3@DXUtil_Con

; 1145 :     }
; 1146 :     else

	jmp	$LN3@DXUtil_Con
$LN2@DXUtil_Con:

; 1147 :     {
; 1148 :         pGuidDest->Data2       = (USHORT) aiTmp[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pGuidDest$[ebp]
	mov	ax, WORD PTR _aiTmp$[ebp+ecx]
	mov	WORD PTR [edx+4], ax

; 1149 :         pGuidDest->Data3       = (USHORT) aiTmp[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pGuidDest$[ebp]
	mov	dx, WORD PTR _aiTmp$[ebp+eax]
	mov	WORD PTR [ecx+6], dx

; 1150 :         pGuidDest->Data4[0]    = (BYTE) aiTmp[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _pGuidDest$[ebp]
	mov	al, BYTE PTR _aiTmp$[ebp+eax]
	mov	BYTE PTR [ecx+edx+8], al

; 1151 :         pGuidDest->Data4[1]    = (BYTE) aiTmp[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _pGuidDest$[ebp]
	mov	cl, BYTE PTR _aiTmp$[ebp+ecx]
	mov	BYTE PTR [eax+edx+8], cl

; 1152 :         pGuidDest->Data4[2]    = (BYTE) aiTmp[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pGuidDest$[ebp]
	mov	al, BYTE PTR _aiTmp$[ebp+eax]
	mov	BYTE PTR [edx+ecx+8], al

; 1153 :         pGuidDest->Data4[3]    = (BYTE) aiTmp[5];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 1
	imul	eax, edx, 3
	mov	edx, DWORD PTR _pGuidDest$[ebp]
	mov	cl, BYTE PTR _aiTmp$[ebp+ecx]
	mov	BYTE PTR [edx+eax+8], cl

; 1154 :         pGuidDest->Data4[4]    = (BYTE) aiTmp[6];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _pGuidDest$[ebp]
	mov	cl, BYTE PTR _aiTmp$[ebp+ecx]
	mov	BYTE PTR [eax+edx+8], cl

; 1155 :         pGuidDest->Data4[5]    = (BYTE) aiTmp[7];

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 1
	imul	eax, edx, 5
	mov	edx, DWORD PTR _pGuidDest$[ebp]
	mov	cl, BYTE PTR _aiTmp$[ebp+ecx]
	mov	BYTE PTR [edx+eax+8], cl

; 1156 :         pGuidDest->Data4[6]    = (BYTE) aiTmp[8];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 1
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _pGuidDest$[ebp]
	mov	al, BYTE PTR _aiTmp$[ebp+eax]
	mov	BYTE PTR [ecx+edx+8], al

; 1157 :         pGuidDest->Data4[7]    = (BYTE) aiTmp[9];

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 1
	imul	eax, edx, 7
	mov	edx, DWORD PTR _pGuidDest$[ebp]
	mov	cl, BYTE PTR _aiTmp$[ebp+ecx]
	mov	BYTE PTR [edx+eax+8], cl

; 1158 :         return S_OK;

	xor	eax, eax
$LN3@DXUtil_Con:

; 1159 :     }
; 1160 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DXUtil_Con
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@DXUtil_Con:
	DD	1
	DD	$LN6@DXUtil_Con
$LN6@DXUtil_Con:
	DD	-48					; ffffffd0H
	DD	40					; 00000028H
	DD	$LN5@DXUtil_Con
$LN5@DXUtil_Con:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z ENDP	; DXUtil_ConvertStringToGUID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z
_TEXT	SEGMENT
_pGuidSrc$ = 8						; size = 4
_strDest$ = 12						; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z PROC	; DXUtil_ConvertGUIDToStringCb, COMDAT

; 1362 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1363 :     return DXUtil_ConvertGUIDToStringCch( pGuidSrc, strDest, cbDestChar / sizeof(TCHAR) );

	mov	eax, DWORD PTR _cbDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pGuidSrc$[ebp]
	push	edx
	call	?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z ; DXUtil_ConvertGUIDToStringCch
	add	esp, 12					; 0000000cH

; 1364 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z ENDP	; DXUtil_ConvertGUIDToStringCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z
_TEXT	SEGMENT
_nResult$ = -8						; size = 4
_pGuidSrc$ = 8						; size = 4
_strDest$ = 12						; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z PROC ; DXUtil_ConvertGUIDToStringCch, COMDAT

; 1172 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1173 :     int nResult = _sntprintf( strDest, cchDestChar, TEXT("{%0.8X-%0.4X-%0.4X-%0.2X%0.2X-%0.2X%0.2X%0.2X%0.2X%0.2X%0.2X}"),
; 1174 :                pGuidSrc->Data1, pGuidSrc->Data2, pGuidSrc->Data3,
; 1175 :                pGuidSrc->Data4[0], pGuidSrc->Data4[1],
; 1176 :                pGuidSrc->Data4[2], pGuidSrc->Data4[3],
; 1177 :                pGuidSrc->Data4[4], pGuidSrc->Data4[5],
; 1178 :                pGuidSrc->Data4[6], pGuidSrc->Data4[7] );

	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pGuidSrc$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _pGuidSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+8]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _pGuidSrc$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	push	edx
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _pGuidSrc$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+8]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pGuidSrc$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _pGuidSrc$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _pGuidSrc$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+8]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pGuidSrc$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+8]
	push	ecx
	mov	edx, DWORD PTR _pGuidSrc$[ebp]
	movzx	eax, WORD PTR [edx+6]
	push	eax
	mov	ecx, DWORD PTR _pGuidSrc$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pGuidSrc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@
	mov	edx, DWORD PTR _cchDestChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _strDest$[ebp]
	push	eax
	call	__snprintf
	add	esp, 56					; 00000038H
	mov	DWORD PTR _nResult$[ebp], eax

; 1179 : 
; 1180 :     if( nResult < 0 )

	cmp	DWORD PTR _nResult$[ebp], 0
	jge	SHORT $LN1@DXUtil_Con

; 1181 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@DXUtil_Con
$LN1@DXUtil_Con:

; 1182 :     return S_OK;

	xor	eax, eax
$LN2@DXUtil_Con:

; 1183 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z ENDP ; DXUtil_ConvertGUIDToStringCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_LaunchReadme@@YAXPAUHWND__@@PBD@Z
_TEXT	SEGMENT
$T1 = -2236						; size = 4
$T2 = -2224						; size = 4
$T3 = -2212						; size = 4
$T4 = -2200						; size = 4
_hInstShell32$5 = -1996					; size = 4
_pShellExecute$6 = -1984				; size = 4
_dwSize$7 = -1972					; size = 4
_dwType$8 = -1960					; size = 4
_lResult$9 = -1948					; size = 4
_hKey$10 = -1936					; size = 4
_bFound$11 = -1921					; size = 1
_bSuccess$12 = -1909					; size = 1
_strFilename$13 = -1900					; size = 4
_i$14 = -1888						; size = 4
_strLastSlash$ = -1876					; size = 4
_strSamplePath$ = -1864					; size = 260
_strExePath$ = -1596					; size = 260
_strExeName$ = -1328					; size = 260
_strReadmePath$ = -1060					; size = 1024
_strFilenames$ = -28					; size = 8
_NUM_FILENAMES$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_strLoc$ = 12						; size = 4
?DXUtil_LaunchReadme@@YAXPAUHWND__@@PBD@Z PROC		; DXUtil_LaunchReadme, COMDAT

; 866  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2240				; 000008c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2240]
	mov	ecx, 560				; 00000230H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 867  : #ifdef UNDER_CE
; 868  :     // This is not available on PocketPC
; 869  :     MessageBox( hWnd, TEXT("For operating instructions, please open the ")
; 870  :                       TEXT("readme.txt file included with the project."),
; 871  :                 TEXT("DirectX SDK Sample"), MB_ICONWARNING | MB_OK );
; 872  : 
; 873  :     return;
; 874  : #endif
; 875  : 
; 876  :     const int NUM_FILENAMES = 2;

	mov	DWORD PTR _NUM_FILENAMES$[ebp], 2

; 877  :     LPCTSTR strFilenames[] = 
; 878  :     {
; 879  :         TEXT("readme.htm"),
; 880  :         TEXT("readme.txt")
; 881  :     };

	mov	DWORD PTR _strFilenames$[ebp], OFFSET ??_C@_0L@KLNBHJJA@readme?4htm?$AA@
	mov	DWORD PTR _strFilenames$[ebp+4], OFFSET ??_C@_0L@CDAEMBML@readme?4txt?$AA@

; 882  : 
; 883  :     TCHAR strReadmePath[1024];
; 884  :     TCHAR strExeName[MAX_PATH];
; 885  :     TCHAR strExePath[MAX_PATH];
; 886  :     TCHAR strSamplePath[MAX_PATH];
; 887  :     TCHAR* strLastSlash = NULL;

	mov	DWORD PTR _strLastSlash$[ebp], 0

; 888  : 
; 889  :     for( int i=0; i < NUM_FILENAMES; i++ )

	mov	DWORD PTR _i$14[ebp], 0
	jmp	SHORT $LN38@DXUtil_Lau
$LN37@DXUtil_Lau:
	mov	eax, DWORD PTR _i$14[ebp]
	add	eax, 1
	mov	DWORD PTR _i$14[ebp], eax
$LN38@DXUtil_Lau:
	cmp	DWORD PTR _i$14[ebp], 2
	jge	$LN36@DXUtil_Lau

; 890  :     {
; 891  :         LPCTSTR strFilename = strFilenames[i];

	mov	eax, DWORD PTR _i$14[ebp]
	mov	ecx, DWORD PTR _strFilenames$[ebp+eax*4]
	mov	DWORD PTR _strFilename$13[ebp], ecx

; 892  :         bool bSuccess = false;

	mov	BYTE PTR _bSuccess$12[ebp], 0

; 893  :         bool bFound = false;

	mov	BYTE PTR _bFound$11[ebp], 0

; 894  :         
; 895  :         lstrcpy( strReadmePath, TEXT("") );

	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcpyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 896  :         lstrcpy( strExePath, TEXT("") );

	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcpyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 897  :         lstrcpy( strExeName, TEXT("") );

	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcpyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 898  :         lstrcpy( strSamplePath, TEXT("") );

	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	lea	eax, DWORD PTR _strSamplePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcpyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 899  : 
; 900  :         // If the user provided a location for the readme, check there first.
; 901  :         if( strLoc )

	cmp	DWORD PTR _strLoc$[ebp], 0
	je	$LN35@DXUtil_Lau

; 902  :         {
; 903  :             HKEY  hKey;
; 904  :             LONG lResult = RegOpenKeyEx( HKEY_LOCAL_MACHINE,
; 905  :                                         _T("Software\\Microsoft\\DirectX SDK"),
; 906  :                                         0, KEY_READ, &hKey );

	mov	esi, esp
	lea	eax, DWORD PTR _hKey$10[ebp]
	push	eax
	push	131097					; 00020019H
	push	0
	push	OFFSET ??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lResult$9[ebp], eax

; 907  :             if( ERROR_SUCCESS == lResult )

	cmp	DWORD PTR _lResult$9[ebp], 0
	jne	$LN34@DXUtil_Lau

; 908  :             {
; 909  :                 DWORD dwType;
; 910  :                 DWORD dwSize = MAX_PATH * sizeof(TCHAR);

	mov	DWORD PTR _dwSize$7[ebp], 260		; 00000104H

; 911  :                 lResult = RegQueryValueEx( hKey, _T("DX9S4SDK Samples Path"), NULL,
; 912  :                                         &dwType, (BYTE*)strSamplePath, &dwSize );

	mov	esi, esp
	lea	eax, DWORD PTR _dwSize$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _strSamplePath$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$8[ebp]
	push	edx
	push	0
	push	OFFSET ??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@
	mov	eax, DWORD PTR _hKey$10[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lResult$9[ebp], eax

; 913  :                 strSamplePath[MAX_PATH-1] = 0; // RegQueryValueEx doesn't NULL term if buffer too small

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 260			; 00000104H
	jae	SHORT $LN41@DXUtil_Lau
	jmp	SHORT $LN42@DXUtil_Lau
$LN41@DXUtil_Lau:
	call	___report_rangecheckfailure
$LN42@DXUtil_Lau:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strSamplePath$[ebp+edx], 0

; 914  :                 
; 915  :                 if( ERROR_SUCCESS == lResult )

	cmp	DWORD PTR _lResult$9[ebp], 0
	jne	SHORT $LN34@DXUtil_Lau

; 916  :                 {
; 917  :                     _sntprintf( strReadmePath, 1023, TEXT("%s\\C++\\%s\\%s"), 
; 918  :                                 strSamplePath, strLoc, strFilename );

	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _strLoc$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strSamplePath$[ebp]
	push	edx
	push	OFFSET ??_C@_0N@BILGBANM@?$CFs?2C?$CL?$CL?2?$CFs?2?$CFs?$AA@
	push	1023					; 000003ffH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	__snprintf
	add	esp, 24					; 00000018H

; 919  :                     strReadmePath[1023] = 0;

	mov	eax, 1
	imul	ecx, eax, 1023
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 1024		; 00000400H
	jae	SHORT $LN43@DXUtil_Lau
	jmp	SHORT $LN44@DXUtil_Lau
$LN43@DXUtil_Lau:
	call	___report_rangecheckfailure
$LN44@DXUtil_Lau:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _strReadmePath$[ebp+edx], 0

; 920  : 
; 921  :                     if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN34@DXUtil_Lau

; 922  :                         bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN34@DXUtil_Lau:

; 923  :                 }
; 924  :             }
; 925  : 
; 926  :             RegCloseKey( hKey );

	mov	esi, esp
	mov	eax, DWORD PTR _hKey$10[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@DXUtil_Lau:

; 927  :         }
; 928  : 
; 929  :         // Get the exe name, and exe path
; 930  :         GetModuleFileName( NULL, strExePath, MAX_PATH );

	mov	esi, esp
	push	260					; 00000104H
	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__GetModuleFileNameA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 931  :         strExePath[MAX_PATH-1]=0;

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 260			; 00000104H
	jae	SHORT $LN45@DXUtil_Lau
	jmp	SHORT $LN46@DXUtil_Lau
$LN45@DXUtil_Lau:
	call	___report_rangecheckfailure
$LN46@DXUtil_Lau:
	mov	edx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _strExePath$[ebp+edx], 0

; 932  : 
; 933  :         strLastSlash = _tcsrchr( strExePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 934  :         if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	$LN31@DXUtil_Lau

; 935  :         {
; 936  :             _tcsncpy( strExeName, &strLastSlash[1], MAX_PATH );

	push	260					; 00000104H
	mov	eax, 1
	shl	eax, 0
	add	eax, DWORD PTR _strLastSlash$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 937  :             strExeName[MAX_PATH-1]=0;

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T4[ebp], ecx
	cmp	DWORD PTR $T4[ebp], 260			; 00000104H
	jae	SHORT $LN47@DXUtil_Lau
	jmp	SHORT $LN48@DXUtil_Lau
$LN47@DXUtil_Lau:
	call	___report_rangecheckfailure
$LN48@DXUtil_Lau:
	mov	edx, DWORD PTR $T4[ebp]
	mov	BYTE PTR _strExeName$[ebp+edx], 0

; 938  : 
; 939  :             // Chop the exe name from the exe path
; 940  :             *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0

; 941  : 
; 942  :             // Chop the .exe from the exe name
; 943  :             strLastSlash = _tcsrchr( strExeName, TEXT('.') );

	push	46					; 0000002eH
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 944  :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN31@DXUtil_Lau

; 945  :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN31@DXUtil_Lau:

; 946  :         }
; 947  : 
; 948  :         if( !bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	jne	$LN29@DXUtil_Lau

; 949  :         {
; 950  :             // Search in "%EXE_DIR%\..\%EXE_NAME%\".  This matches the DirectX SDK layout
; 951  :             _tcscpy( strReadmePath, strExePath );

	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 952  : 
; 953  :             strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 954  :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN28@DXUtil_Lau

; 955  :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN28@DXUtil_Lau:

; 956  :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 957  :             lstrcat( strReadmePath, strExeName );

	mov	esi, esp
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 958  :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 959  :             lstrcat( strReadmePath, strFilename );

	mov	esi, esp
	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 960  :             if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN29@DXUtil_Lau

; 961  :                 bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN29@DXUtil_Lau:

; 962  :         }
; 963  : 
; 964  :         if( !bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	jne	$LN26@DXUtil_Lau

; 965  :         {
; 966  :             // Search in "%EXE_DIR%\..\BumpMapping\%EXE_NAME%\".
; 967  :             _tcscpy( strReadmePath, strExePath );

	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 968  : 
; 969  :             strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 970  :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN25@DXUtil_Lau

; 971  :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN25@DXUtil_Lau:

; 972  :             lstrcat( strReadmePath, TEXT("\\BumpMapping\\") );

	mov	esi, esp
	push	OFFSET ??_C@_0O@OPBAJDEF@?2BumpMapping?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 973  :             lstrcat( strReadmePath, strExeName );

	mov	esi, esp
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 974  :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 975  :             lstrcat( strReadmePath, strFilename );

	mov	esi, esp
	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 976  :             if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN26@DXUtil_Lau

; 977  :                 bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN26@DXUtil_Lau:

; 978  :         }
; 979  : 
; 980  :         if( !bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	jne	$LN23@DXUtil_Lau

; 981  :         {
; 982  :             // Search in "%EXE_DIR%\..\EnvMapping\%EXE_NAME%\".
; 983  :             _tcscpy( strReadmePath, strExePath );

	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 984  : 
; 985  :             strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 986  :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN22@DXUtil_Lau

; 987  :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN22@DXUtil_Lau:

; 988  :             lstrcat( strReadmePath, TEXT("\\EnvMapping\\") );

	mov	esi, esp
	push	OFFSET ??_C@_0N@PCBFHMJI@?2EnvMapping?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 989  :             lstrcat( strReadmePath, strExeName );

	mov	esi, esp
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 990  :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 991  :             lstrcat( strReadmePath, strFilename );

	mov	esi, esp
	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 992  :             if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN23@DXUtil_Lau

; 993  :                 bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN23@DXUtil_Lau:

; 994  :         }
; 995  : 
; 996  :         if( !bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	jne	$LN20@DXUtil_Lau

; 997  :         {
; 998  :             // Search in "%EXE_DIR%\..\Meshes\%EXE_NAME%\".
; 999  :             _tcscpy( strReadmePath, strExePath );

	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 1000 : 
; 1001 :             strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 1002 :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN19@DXUtil_Lau

; 1003 :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN19@DXUtil_Lau:

; 1004 :             lstrcat( strReadmePath, TEXT("\\Meshes\\") );

	mov	esi, esp
	push	OFFSET ??_C@_08IODDGNMO@?2Meshes?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1005 :             lstrcat( strReadmePath, strExeName );

	mov	esi, esp
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1006 :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1007 :             lstrcat( strReadmePath, strFilename );

	mov	esi, esp
	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1008 :             if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN20@DXUtil_Lau

; 1009 :                 bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN20@DXUtil_Lau:

; 1010 :         }
; 1011 : 
; 1012 :         if( !bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	jne	$LN17@DXUtil_Lau

; 1013 :         {
; 1014 :             // Search in "%EXE_DIR%\..\StencilBuffer\%EXE_NAME%\".
; 1015 :             _tcscpy( strReadmePath, strExePath );

	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 1016 : 
; 1017 :             strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 1018 :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN16@DXUtil_Lau

; 1019 :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN16@DXUtil_Lau:

; 1020 :             lstrcat( strReadmePath, TEXT("\\StencilBuffer\\") );

	mov	esi, esp
	push	OFFSET ??_C@_0BA@MMIAJLJK@?2StencilBuffer?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1021 :             lstrcat( strReadmePath, strExeName );

	mov	esi, esp
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1022 :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1023 :             lstrcat( strReadmePath, strFilename );

	mov	esi, esp
	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1024 :             if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN17@DXUtil_Lau

; 1025 :                 bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN17@DXUtil_Lau:

; 1026 :         }
; 1027 : 
; 1028 :         if( !bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	jne	SHORT $LN14@DXUtil_Lau

; 1029 :         {
; 1030 :             // Search in "%EXE_DIR%\"
; 1031 :             _tcscpy( strReadmePath, strExePath );

	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 1032 :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1033 :             lstrcat( strReadmePath, strFilename );

	mov	esi, esp
	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1034 :             if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN14@DXUtil_Lau

; 1035 :                 bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN14@DXUtil_Lau:

; 1036 :         }
; 1037 : 
; 1038 :         if( !bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	jne	$LN12@DXUtil_Lau

; 1039 :         {
; 1040 :             // Search in "%EXE_DIR%\.."
; 1041 :             _tcscpy( strReadmePath, strExePath );

	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 1042 :             strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 1043 :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN11@DXUtil_Lau

; 1044 :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN11@DXUtil_Lau:

; 1045 :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1046 :             lstrcat( strReadmePath, strFilename );

	mov	esi, esp
	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1047 :             if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN12@DXUtil_Lau

; 1048 :                 bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN12@DXUtil_Lau:

; 1049 :         }
; 1050 : 
; 1051 :         if( !bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	jne	$LN9@DXUtil_Lau

; 1052 :         {
; 1053 :             // Search in "%EXE_DIR%\..\.."
; 1054 :             _tcscpy( strReadmePath, strExePath );

	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 1055 :             strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 1056 :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN8@DXUtil_Lau

; 1057 :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN8@DXUtil_Lau:

; 1058 :             strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 1059 :             if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN7@DXUtil_Lau

; 1060 :                 *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN7@DXUtil_Lau:

; 1061 :             lstrcat( strReadmePath, TEXT("\\") );

	mov	esi, esp
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1062 :             lstrcat( strReadmePath, strFilename );

	mov	esi, esp
	mov	eax, DWORD PTR _strFilename$13[ebp]
	push	eax
	lea	ecx, DWORD PTR _strReadmePath$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcatA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1063 :             if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

	mov	esi, esp
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN9@DXUtil_Lau

; 1064 :                 bFound = TRUE;

	mov	BYTE PTR _bFound$11[ebp], 1
$LN9@DXUtil_Lau:

; 1065 :         }
; 1066 : 
; 1067 :         if( bFound )

	movzx	eax, BYTE PTR _bFound$11[ebp]
	test	eax, eax
	je	$LN5@DXUtil_Lau

; 1068 :         {
; 1069 :             // GetProcAddress for ShellExecute, so we don't have to include shell32.lib 
; 1070 :             // in every project that uses dxutil.cpp
; 1071 :             LPShellExecute pShellExecute = NULL;

	mov	DWORD PTR _pShellExecute$6[ebp], 0

; 1072 :             HINSTANCE hInstShell32 = LoadLibrary(TEXT("shell32.dlTEXT("));

	mov	esi, esp
	push	OFFSET ??_C@_0BA@GJGFKFOH@shell32?4dlTEXT?$CI?$AA@
	call	DWORD PTR __imp__LoadLibraryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hInstShell32$5[ebp], eax

; 1073 :             if (hInstShell32 != NULL)

	cmp	DWORD PTR _hInstShell32$5[ebp], 0
	je	SHORT $LN5@DXUtil_Lau

; 1074 :             {
; 1075 :     #ifdef UNICODE
; 1076 :                 pShellExecute = (LPShellExecute)GetProcAddress(hInstShell32, _TWINCE("ShellExecuteW"));
; 1077 :     #else
; 1078 :                 pShellExecute = (LPShellExecute)GetProcAddress(hInstShell32, _TWINCE("ShellExecuteA"));

	mov	esi, esp
	push	OFFSET ??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@
	mov	eax, DWORD PTR _hInstShell32$5[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pShellExecute$6[ebp], eax

; 1079 :     #endif
; 1080 :                 if( pShellExecute != NULL )

	cmp	DWORD PTR _pShellExecute$6[ebp], 0
	je	SHORT $LN3@DXUtil_Lau

; 1081 :                 {
; 1082 :                     if( pShellExecute( hWnd, TEXT("open"), strReadmePath, NULL, NULL, SW_SHOW ) > (HINSTANCE) 32 )

	mov	esi, esp
	push	5
	push	0
	push	0
	lea	eax, DWORD PTR _strReadmePath$[ebp]
	push	eax
	push	OFFSET ??_C@_04PMOCAHAA@open?$AA@
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR _pShellExecute$6[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 32					; 00000020H
	jbe	SHORT $LN3@DXUtil_Lau

; 1083 :                         bSuccess = true;

	mov	BYTE PTR _bSuccess$12[ebp], 1
$LN3@DXUtil_Lau:

; 1084 :                 }
; 1085 : 
; 1086 :                 FreeLibrary(hInstShell32);

	mov	esi, esp
	mov	eax, DWORD PTR _hInstShell32$5[ebp]
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@DXUtil_Lau:

; 1087 :             }
; 1088 :         }
; 1089 : 
; 1090 :         if( bSuccess )

	movzx	eax, BYTE PTR _bSuccess$12[ebp]
	test	eax, eax
	je	SHORT $LN1@DXUtil_Lau

; 1091 :             return;

	jmp	SHORT $LN40@DXUtil_Lau
$LN1@DXUtil_Lau:

; 1092 :     }

	jmp	$LN37@DXUtil_Lau
$LN36@DXUtil_Lau:

; 1093 : 
; 1094 :     // Tell the user that the readme couldn't be opened
; 1095 :     MessageBox( hWnd, TEXT("Could not find readme"), 
; 1096 :                 TEXT("DirectX SDK Sample"), MB_ICONWARNING | MB_OK );

	mov	esi, esp
	push	48					; 00000030H
	push	OFFSET ??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@
	push	OFFSET ??_C@_0BG@NJKFMAAN@Could?5not?5find?5readme?$AA@
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@DXUtil_Lau:

; 1097 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN58@DXUtil_Lau
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2240				; 000008c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN58@DXUtil_Lau:
	DD	8
	DD	$LN57@DXUtil_Lau
$LN57@DXUtil_Lau:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN49@DXUtil_Lau
	DD	-1060					; fffffbdcH
	DD	1024					; 00000400H
	DD	$LN50@DXUtil_Lau
	DD	-1328					; fffffad0H
	DD	260					; 00000104H
	DD	$LN51@DXUtil_Lau
	DD	-1596					; fffff9c4H
	DD	260					; 00000104H
	DD	$LN52@DXUtil_Lau
	DD	-1864					; fffff8b8H
	DD	260					; 00000104H
	DD	$LN53@DXUtil_Lau
	DD	-1936					; fffff870H
	DD	4
	DD	$LN54@DXUtil_Lau
	DD	-1960					; fffff858H
	DD	4
	DD	$LN55@DXUtil_Lau
	DD	-1972					; fffff84cH
	DD	4
	DD	$LN56@DXUtil_Lau
$LN56@DXUtil_Lau:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN55@DXUtil_Lau:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN54@DXUtil_Lau:
	DB	104					; 00000068H
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN53@DXUtil_Lau:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN52@DXUtil_Lau:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN51@DXUtil_Lau:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN50@DXUtil_Lau:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN49@DXUtil_Lau:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?DXUtil_LaunchReadme@@YAXPAUHWND__@@PBD@Z ENDP		; DXUtil_LaunchReadme
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertWideStringToGenericCb@@YAJPADPB_WH@Z
_TEXT	SEGMENT
_tstrDestination$ = 8					; size = 4
_wstrSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertWideStringToGenericCb@@YAJPADPB_WH@Z PROC ; DXUtil_ConvertWideStringToGenericCb, COMDAT

; 1352 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1353 :     return DXUtil_ConvertWideStringToGenericCch( tstrDestination, wstrSource, cbDestChar / sizeof(TCHAR) );

	mov	eax, DWORD PTR _cbDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wstrSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tstrDestination$[ebp]
	push	edx
	call	?DXUtil_ConvertWideStringToGenericCch@@YAJPADPB_WH@Z ; DXUtil_ConvertWideStringToGenericCch
	add	esp, 12					; 0000000cH

; 1354 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertWideStringToGenericCb@@YAJPADPB_WH@Z ENDP ; DXUtil_ConvertWideStringToGenericCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z
_TEXT	SEGMENT
_tstrDestination$ = 8					; size = 4
_strSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z PROC	; DXUtil_ConvertAnsiStringToGenericCb, COMDAT

; 1347 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1348 :     return DXUtil_ConvertAnsiStringToGenericCch( tstrDestination, strSource, cbDestChar / sizeof(TCHAR) );

	mov	eax, DWORD PTR _cbDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tstrDestination$[ebp]
	push	edx
	call	?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z ; DXUtil_ConvertAnsiStringToGenericCch
	add	esp, 12					; 0000000cH

; 1349 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z ENDP	; DXUtil_ConvertAnsiStringToGenericCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertGenericStringToWideCb@@YAJPA_WPBDH@Z
_TEXT	SEGMENT
_wstrDestination$ = 8					; size = 4
_tstrSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertGenericStringToWideCb@@YAJPA_WPBDH@Z PROC ; DXUtil_ConvertGenericStringToWideCb, COMDAT

; 1342 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1343 :     return DXUtil_ConvertGenericStringToWideCch( wstrDestination, tstrSource, cbDestChar / sizeof(WCHAR) );

	mov	eax, DWORD PTR _cbDestChar$[ebp]
	shr	eax, 1
	push	eax
	mov	ecx, DWORD PTR _tstrSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wstrDestination$[ebp]
	push	edx
	call	?DXUtil_ConvertGenericStringToWideCch@@YAJPA_WPBDH@Z ; DXUtil_ConvertGenericStringToWideCch
	add	esp, 12					; 0000000cH

; 1344 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertGenericStringToWideCb@@YAJPA_WPBDH@Z ENDP ; DXUtil_ConvertGenericStringToWideCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z
_TEXT	SEGMENT
_strDestination$ = 8					; size = 4
_tstrSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z PROC	; DXUtil_ConvertGenericStringToAnsiCb, COMDAT

; 1337 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1338 :     return DXUtil_ConvertGenericStringToAnsiCch( strDestination, tstrSource, cbDestChar / sizeof(CHAR) );

	mov	eax, DWORD PTR _cbDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tstrSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestination$[ebp]
	push	edx
	call	?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z ; DXUtil_ConvertGenericStringToAnsiCch
	add	esp, 12					; 0000000cH

; 1339 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z ENDP	; DXUtil_ConvertGenericStringToAnsiCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPB_WH@Z
_TEXT	SEGMENT
_strDestination$ = 8					; size = 4
_wstrSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPB_WH@Z PROC	; DXUtil_ConvertWideStringToAnsiCb, COMDAT

; 1332 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1333 :     return DXUtil_ConvertWideStringToAnsiCch( strDestination, wstrSource, cbDestChar / sizeof(CHAR) );

	mov	eax, DWORD PTR _cbDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wstrSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestination$[ebp]
	push	edx
	call	?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPB_WH@Z ; DXUtil_ConvertWideStringToAnsiCch
	add	esp, 12					; 0000000cH

; 1334 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPB_WH@Z ENDP	; DXUtil_ConvertWideStringToAnsiCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertAnsiStringToWideCb@@YAJPA_WPBDH@Z
_TEXT	SEGMENT
_wstrDestination$ = 8					; size = 4
_strSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertAnsiStringToWideCb@@YAJPA_WPBDH@Z PROC	; DXUtil_ConvertAnsiStringToWideCb, COMDAT

; 1327 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1328 :     return DXUtil_ConvertAnsiStringToWideCch( wstrDestination, strSource, cbDestChar / sizeof(WCHAR) );

	mov	eax, DWORD PTR _cbDestChar$[ebp]
	shr	eax, 1
	push	eax
	mov	ecx, DWORD PTR _strSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wstrDestination$[ebp]
	push	edx
	call	?DXUtil_ConvertAnsiStringToWideCch@@YAJPA_WPBDH@Z ; DXUtil_ConvertAnsiStringToWideCch
	add	esp, 12					; 0000000cH

; 1329 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertAnsiStringToWideCb@@YAJPA_WPBDH@Z ENDP	; DXUtil_ConvertAnsiStringToWideCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertWideStringToGenericCch@@YAJPADPB_WH@Z
_TEXT	SEGMENT
_tstrDestination$ = 8					; size = 4
_wstrSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertWideStringToGenericCch@@YAJPADPB_WH@Z PROC ; DXUtil_ConvertWideStringToGenericCch, COMDAT

; 845  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 846  :     if( tstrDestination==NULL || wstrSource==NULL || cchDestChar < 1 )

	cmp	DWORD PTR _tstrDestination$[ebp], 0
	je	SHORT $LN1@DXUtil_Con
	cmp	DWORD PTR _wstrSource$[ebp], 0
	je	SHORT $LN1@DXUtil_Con
	cmp	DWORD PTR _cchDestChar$[ebp], 1
	jge	SHORT $LN2@DXUtil_Con
$LN1@DXUtil_Con:

; 847  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@DXUtil_Con
$LN2@DXUtil_Con:

; 848  : 
; 849  : #ifdef _UNICODE
; 850  :     wcsncpy( tstrDestination, wstrSource, cchDestChar );
; 851  :     tstrDestination[cchDestChar-1] = L'\0';    
; 852  :     return S_OK;
; 853  : #else
; 854  :     return DXUtil_ConvertWideStringToAnsiCch( tstrDestination, wstrSource, cchDestChar );

	mov	eax, DWORD PTR _cchDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wstrSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tstrDestination$[ebp]
	push	edx
	call	?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPB_WH@Z ; DXUtil_ConvertWideStringToAnsiCch
	add	esp, 12					; 0000000cH
$LN3@DXUtil_Con:

; 855  : #endif
; 856  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertWideStringToGenericCch@@YAJPADPB_WH@Z ENDP ; DXUtil_ConvertWideStringToGenericCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z
_TEXT	SEGMENT
_tstrDestination$ = 8					; size = 4
_strSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z PROC ; DXUtil_ConvertAnsiStringToGenericCch, COMDAT

; 820  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 821  :     if( tstrDestination==NULL || strSource==NULL || cchDestChar < 1 )

	cmp	DWORD PTR _tstrDestination$[ebp], 0
	je	SHORT $LN1@DXUtil_Con
	cmp	DWORD PTR _strSource$[ebp], 0
	je	SHORT $LN1@DXUtil_Con
	cmp	DWORD PTR _cchDestChar$[ebp], 1
	jge	SHORT $LN2@DXUtil_Con
$LN1@DXUtil_Con:

; 822  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@DXUtil_Con
$LN2@DXUtil_Con:

; 823  :         
; 824  : #ifdef _UNICODE
; 825  :     return DXUtil_ConvertAnsiStringToWideCch( tstrDestination, strSource, cchDestChar );
; 826  : #else
; 827  :     strncpy( tstrDestination, strSource, cchDestChar );

	mov	eax, DWORD PTR _cchDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tstrDestination$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 828  :     tstrDestination[cchDestChar-1] = '\0';

	mov	eax, DWORD PTR _tstrDestination$[ebp]
	add	eax, DWORD PTR _cchDestChar$[ebp]
	mov	BYTE PTR [eax-1], 0

; 829  :     return S_OK;

	xor	eax, eax
$LN3@DXUtil_Con:

; 830  : #endif    
; 831  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z ENDP ; DXUtil_ConvertAnsiStringToGenericCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertGenericStringToWideCch@@YAJPA_WPBDH@Z
_TEXT	SEGMENT
_wstrDestination$ = 8					; size = 4
_tstrSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertGenericStringToWideCch@@YAJPA_WPBDH@Z PROC ; DXUtil_ConvertGenericStringToWideCch, COMDAT

; 795  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 796  :     if( wstrDestination==NULL || tstrSource==NULL || cchDestChar < 1 )

	cmp	DWORD PTR _wstrDestination$[ebp], 0
	je	SHORT $LN1@DXUtil_Con
	cmp	DWORD PTR _tstrSource$[ebp], 0
	je	SHORT $LN1@DXUtil_Con
	cmp	DWORD PTR _cchDestChar$[ebp], 1
	jge	SHORT $LN2@DXUtil_Con
$LN1@DXUtil_Con:

; 797  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@DXUtil_Con
$LN2@DXUtil_Con:

; 798  : 
; 799  : #ifdef _UNICODE
; 800  :     wcsncpy( wstrDestination, tstrSource, cchDestChar );
; 801  :     wstrDestination[cchDestChar-1] = L'\0';
; 802  :     return S_OK;
; 803  : #else
; 804  :     return DXUtil_ConvertAnsiStringToWideCch( wstrDestination, tstrSource, cchDestChar );

	mov	eax, DWORD PTR _cchDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tstrSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wstrDestination$[ebp]
	push	edx
	call	?DXUtil_ConvertAnsiStringToWideCch@@YAJPA_WPBDH@Z ; DXUtil_ConvertAnsiStringToWideCch
	add	esp, 12					; 0000000cH
$LN3@DXUtil_Con:

; 805  : #endif    
; 806  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertGenericStringToWideCch@@YAJPA_WPBDH@Z ENDP ; DXUtil_ConvertGenericStringToWideCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z
_TEXT	SEGMENT
_strDestination$ = 8					; size = 4
_tstrSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z PROC ; DXUtil_ConvertGenericStringToAnsiCch, COMDAT

; 770  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 771  :     if( strDestination==NULL || tstrSource==NULL || cchDestChar < 1 )

	cmp	DWORD PTR _strDestination$[ebp], 0
	je	SHORT $LN1@DXUtil_Con
	cmp	DWORD PTR _tstrSource$[ebp], 0
	je	SHORT $LN1@DXUtil_Con
	cmp	DWORD PTR _cchDestChar$[ebp], 1
	jge	SHORT $LN2@DXUtil_Con
$LN1@DXUtil_Con:

; 772  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@DXUtil_Con
$LN2@DXUtil_Con:

; 773  : 
; 774  : #ifdef _UNICODE
; 775  :     return DXUtil_ConvertWideStringToAnsiCch( strDestination, tstrSource, cchDestChar );
; 776  : #else
; 777  :     strncpy( strDestination, tstrSource, cchDestChar );

	mov	eax, DWORD PTR _cchDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tstrSource$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestination$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 778  :     strDestination[cchDestChar-1] = '\0';

	mov	eax, DWORD PTR _strDestination$[ebp]
	add	eax, DWORD PTR _cchDestChar$[ebp]
	mov	BYTE PTR [eax-1], 0

; 779  :     return S_OK;

	xor	eax, eax
$LN3@DXUtil_Con:

; 780  : #endif   
; 781  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z ENDP ; DXUtil_ConvertGenericStringToAnsiCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPB_WH@Z
_TEXT	SEGMENT
_nResult$ = -8						; size = 4
_strDestination$ = 8					; size = 4
_wstrSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPB_WH@Z PROC	; DXUtil_ConvertWideStringToAnsiCch, COMDAT

; 746  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 747  :     if( strDestination==NULL || wstrSource==NULL || cchDestChar < 1 )

	cmp	DWORD PTR _strDestination$[ebp], 0
	je	SHORT $LN2@DXUtil_Con
	cmp	DWORD PTR _wstrSource$[ebp], 0
	je	SHORT $LN2@DXUtil_Con
	cmp	DWORD PTR _cchDestChar$[ebp], 1
	jge	SHORT $LN3@DXUtil_Con
$LN2@DXUtil_Con:

; 748  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN4@DXUtil_Con
$LN3@DXUtil_Con:

; 749  : 
; 750  :     int nResult = WideCharToMultiByte( CP_ACP, 0, wstrSource, -1, strDestination, 
; 751  :                                        cchDestChar*sizeof(CHAR), NULL, NULL );

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _cchDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDestination$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _wstrSource$[ebp]
	push	edx
	push	0
	push	0
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nResult$[ebp], eax

; 752  :     strDestination[cchDestChar-1] = 0;

	mov	eax, DWORD PTR _strDestination$[ebp]
	add	eax, DWORD PTR _cchDestChar$[ebp]
	mov	BYTE PTR [eax-1], 0

; 753  :     
; 754  :     if( nResult == 0 )

	cmp	DWORD PTR _nResult$[ebp], 0
	jne	SHORT $LN1@DXUtil_Con

; 755  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN4@DXUtil_Con
$LN1@DXUtil_Con:

; 756  :     return S_OK;

	xor	eax, eax
$LN4@DXUtil_Con:

; 757  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPB_WH@Z ENDP	; DXUtil_ConvertWideStringToAnsiCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ConvertAnsiStringToWideCch@@YAJPA_WPBDH@Z
_TEXT	SEGMENT
_nResult$ = -8						; size = 4
_wstrDestination$ = 8					; size = 4
_strSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertAnsiStringToWideCch@@YAJPA_WPBDH@Z PROC	; DXUtil_ConvertAnsiStringToWideCch, COMDAT

; 722  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 723  :     if( wstrDestination==NULL || strSource==NULL || cchDestChar < 1 )

	cmp	DWORD PTR _wstrDestination$[ebp], 0
	je	SHORT $LN2@DXUtil_Con
	cmp	DWORD PTR _strSource$[ebp], 0
	je	SHORT $LN2@DXUtil_Con
	cmp	DWORD PTR _cchDestChar$[ebp], 1
	jge	SHORT $LN3@DXUtil_Con
$LN2@DXUtil_Con:

; 724  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN4@DXUtil_Con
$LN3@DXUtil_Con:

; 725  : 
; 726  :     int nResult = MultiByteToWideChar( CP_ACP, 0, strSource, -1, 
; 727  :                                        wstrDestination, cchDestChar );

	mov	esi, esp
	mov	eax, DWORD PTR _cchDestChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wstrDestination$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _strSource$[ebp]
	push	edx
	push	0
	push	0
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nResult$[ebp], eax

; 728  :     wstrDestination[cchDestChar-1] = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _cchDestChar$[ebp]
	mov	edx, DWORD PTR _wstrDestination$[ebp]
	mov	WORD PTR [edx+ecx*2-2], ax

; 729  :     
; 730  :     if( nResult == 0 )

	cmp	DWORD PTR _nResult$[ebp], 0
	jne	SHORT $LN1@DXUtil_Con

; 731  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN4@DXUtil_Con
$LN1@DXUtil_Con:

; 732  :     return S_OK;

	xor	eax, eax
$LN4@DXUtil_Con:

; 733  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ConvertAnsiStringToWideCch@@YAJPA_WPBDH@Z ENDP	; DXUtil_ConvertAnsiStringToWideCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z
_TEXT	SEGMENT
tv299 = -312						; size = 8
tv297 = -312						; size = 8
tv295 = -312						; size = 8
tv291 = -308						; size = 4
tv274 = -308						; size = 4
tv270 = -308						; size = 4
tv264 = -308						; size = 4
tv253 = -308						; size = 4
tv204 = -308						; size = 4
tv190 = -308						; size = 4
_fElapsedTime$1 = -108					; size = 8
_fTime$2 = -92						; size = 8
_fAppTime$3 = -76					; size = 8
_qwTime$4 = -60						; size = 8
_fElapsedTime$5 = -44					; size = 8
_fTime$6 = -28						; size = 8
_qwTicksPerSec$7 = -12					; size = 8
_command$ = 8						; size = 4
?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z PROC		; DXUtil_Timer, COMDAT

; 533  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 534  :     static BOOL     m_bTimerInitialized = FALSE;
; 535  :     static BOOL     m_bUsingQPF         = FALSE;
; 536  :     static BOOL     m_bTimerStopped     = TRUE;
; 537  :     static LONGLONG m_llQPFTicksPerSec  = 0;
; 538  : 
; 539  :     // Initialize the timer
; 540  :     if( FALSE == m_bTimerInitialized )

	cmp	DWORD PTR ?m_bTimerInitialized@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0
	jne	SHORT $LN25@DXUtil_Tim

; 541  :     {
; 542  :         m_bTimerInitialized = TRUE;

	mov	DWORD PTR ?m_bTimerInitialized@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 1

; 543  : 
; 544  :         // Use QueryPerformanceFrequency() to get frequency of timer.  If QPF is
; 545  :         // not supported, we will timeGetTime() which returns milliseconds.
; 546  :         LARGE_INTEGER qwTicksPerSec;
; 547  :         m_bUsingQPF = QueryPerformanceFrequency( &qwTicksPerSec );

	mov	esi, esp
	lea	eax, DWORD PTR _qwTicksPerSec$7[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceFrequency@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, eax

; 548  :         if( m_bUsingQPF )

	cmp	DWORD PTR ?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0
	je	SHORT $LN25@DXUtil_Tim

; 549  :             m_llQPFTicksPerSec = qwTicksPerSec.QuadPart;

	mov	eax, DWORD PTR _qwTicksPerSec$7[ebp]
	mov	DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	ecx, DWORD PTR _qwTicksPerSec$7[ebp+4]
	mov	DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ecx
$LN25@DXUtil_Tim:

; 550  :     }
; 551  : 
; 552  :     if( m_bUsingQPF )

	cmp	DWORD PTR ?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0
	je	$LN24@DXUtil_Tim

; 553  :     {
; 554  :         static LONGLONG m_llStopTime        = 0;
; 555  :         static LONGLONG m_llLastElapsedTime = 0;
; 556  :         static LONGLONG m_llBaseTime        = 0;
; 557  :         double fTime;
; 558  :         double fElapsedTime;
; 559  :         LARGE_INTEGER qwTime;
; 560  :         
; 561  :         // Get either the current time or the stop time, depending
; 562  :         // on whether we're stopped and what command was sent
; 563  :         if( m_llStopTime != 0 && command != TIMER_START && command != TIMER_GETABSOLUTETIME)

	mov	eax, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	or	eax, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	je	SHORT $LN23@DXUtil_Tim
	cmp	DWORD PTR _command$[ebp], 1
	je	SHORT $LN23@DXUtil_Tim
	cmp	DWORD PTR _command$[ebp], 4
	je	SHORT $LN23@DXUtil_Tim

; 564  :             qwTime.QuadPart = m_llStopTime;

	mov	eax, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	mov	DWORD PTR _qwTime$4[ebp], eax
	mov	ecx, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	mov	DWORD PTR _qwTime$4[ebp+4], ecx

; 565  :         else

	jmp	SHORT $LN22@DXUtil_Tim
$LN23@DXUtil_Tim:

; 566  :             QueryPerformanceCounter( &qwTime );

	mov	esi, esp
	lea	eax, DWORD PTR _qwTime$4[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@DXUtil_Tim:

; 567  : 
; 568  :         // Return the elapsed time
; 569  :         if( command == TIMER_GETELAPSEDTIME )

	cmp	DWORD PTR _command$[ebp], 6
	jne	SHORT $LN21@DXUtil_Tim

; 570  :         {
; 571  :             fElapsedTime = (double) ( qwTime.QuadPart - m_llLastElapsedTime ) / (double) m_llQPFTicksPerSec;

	mov	ecx, DWORD PTR _qwTime$4[ebp]
	sub	ecx, DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	mov	edx, DWORD PTR _qwTime$4[ebp+4]
	sbb	edx, DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	call	__ltod3
	mov	edx, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	mov	ecx, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	movsd	QWORD PTR tv295[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv295[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fElapsedTime$5[ebp], xmm1

; 572  :             m_llLastElapsedTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _qwTime$4[ebp]
	mov	DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	ecx, DWORD PTR _qwTime$4[ebp+4]
	mov	DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ecx

; 573  :             return (FLOAT) fElapsedTime;

	cvtsd2ss xmm0, QWORD PTR _fElapsedTime$5[ebp]
	movss	DWORD PTR tv190[ebp], xmm0
	fld	DWORD PTR tv190[ebp]
	jmp	$LN12@DXUtil_Tim
$LN21@DXUtil_Tim:

; 574  :         }
; 575  :     
; 576  :         // Return the current time
; 577  :         if( command == TIMER_GETAPPTIME )

	cmp	DWORD PTR _command$[ebp], 5
	jne	SHORT $LN20@DXUtil_Tim

; 578  :         {
; 579  :             double fAppTime = (double) ( qwTime.QuadPart - m_llBaseTime ) / (double) m_llQPFTicksPerSec;

	mov	ecx, DWORD PTR _qwTime$4[ebp]
	sub	ecx, DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	mov	edx, DWORD PTR _qwTime$4[ebp+4]
	sbb	edx, DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	call	__ltod3
	mov	edx, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	mov	ecx, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	movsd	QWORD PTR tv297[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv297[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fAppTime$3[ebp], xmm1

; 580  :             return (FLOAT) fAppTime;

	cvtsd2ss xmm0, QWORD PTR _fAppTime$3[ebp]
	movss	DWORD PTR tv204[ebp], xmm0
	fld	DWORD PTR tv204[ebp]
	jmp	$LN12@DXUtil_Tim
$LN20@DXUtil_Tim:

; 581  :         }
; 582  :     
; 583  :         // Reset the timer
; 584  :         if( command == TIMER_RESET )

	cmp	DWORD PTR _command$[ebp], 0
	jne	SHORT $LN19@DXUtil_Tim

; 585  :         {
; 586  :             m_llBaseTime        = qwTime.QuadPart;

	mov	eax, DWORD PTR _qwTime$4[ebp]
	mov	DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	ecx, DWORD PTR _qwTime$4[ebp+4]
	mov	DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ecx

; 587  :             m_llLastElapsedTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _qwTime$4[ebp]
	mov	DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	ecx, DWORD PTR _qwTime$4[ebp+4]
	mov	DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ecx

; 588  :             m_llStopTime        = 0;

	xorpd	xmm0, xmm0
	movlpd	QWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, xmm0

; 589  :             m_bTimerStopped     = FALSE;

	mov	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0

; 590  :             return 0.0f;

	fldz
	jmp	$LN12@DXUtil_Tim
$LN19@DXUtil_Tim:

; 591  :         }
; 592  :     
; 593  :         // Start the timer
; 594  :         if( command == TIMER_START )

	cmp	DWORD PTR _command$[ebp], 1
	jne	SHORT $LN18@DXUtil_Tim

; 595  :         {
; 596  :             if( m_bTimerStopped )

	cmp	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0
	je	SHORT $LN17@DXUtil_Tim

; 597  :                 m_llBaseTime += qwTime.QuadPart - m_llStopTime;

	mov	eax, DWORD PTR _qwTime$4[ebp]
	sub	eax, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	mov	ecx, DWORD PTR _qwTime$4[ebp+4]
	sbb	ecx, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	add	eax, DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	adc	ecx, DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	mov	DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ecx
$LN17@DXUtil_Tim:

; 598  :             m_llStopTime = 0;

	xorpd	xmm0, xmm0
	movlpd	QWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, xmm0

; 599  :             m_llLastElapsedTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _qwTime$4[ebp]
	mov	DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	ecx, DWORD PTR _qwTime$4[ebp+4]
	mov	DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ecx

; 600  :             m_bTimerStopped = FALSE;

	mov	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0

; 601  :             return 0.0f;

	fldz
	jmp	$LN12@DXUtil_Tim
$LN18@DXUtil_Tim:

; 602  :         }
; 603  :     
; 604  :         // Stop the timer
; 605  :         if( command == TIMER_STOP )

	cmp	DWORD PTR _command$[ebp], 2
	jne	SHORT $LN16@DXUtil_Tim

; 606  :         {
; 607  :             if( !m_bTimerStopped )

	cmp	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0
	jne	SHORT $LN15@DXUtil_Tim

; 608  :             {
; 609  :                 m_llStopTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _qwTime$4[ebp]
	mov	DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	ecx, DWORD PTR _qwTime$4[ebp+4]
	mov	DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ecx

; 610  :                 m_llLastElapsedTime = qwTime.QuadPart;

	mov	eax, DWORD PTR _qwTime$4[ebp]
	mov	DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	ecx, DWORD PTR _qwTime$4[ebp+4]
	mov	DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ecx

; 611  :                 m_bTimerStopped = TRUE;

	mov	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 1
$LN15@DXUtil_Tim:

; 612  :             }
; 613  :             return 0.0f;

	fldz
	jmp	$LN12@DXUtil_Tim
$LN16@DXUtil_Tim:

; 614  :         }
; 615  :     
; 616  :         // Advance the timer by 1/10th second
; 617  :         if( command == TIMER_ADVANCE )

	cmp	DWORD PTR _command$[ebp], 3
	jne	SHORT $LN14@DXUtil_Tim

; 618  :         {
; 619  :             m_llStopTime += m_llQPFTicksPerSec/10;

	push	0
	push	10					; 0000000aH
	mov	eax, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	push	eax
	mov	ecx, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	push	ecx
	call	__alldiv
	add	eax, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	adc	edx, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	mov	DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, eax
	mov	DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, edx

; 620  :             return 0.0f;

	fldz
	jmp	$LN12@DXUtil_Tim
$LN14@DXUtil_Tim:

; 621  :         }
; 622  : 
; 623  :         if( command == TIMER_GETABSOLUTETIME )

	cmp	DWORD PTR _command$[ebp], 4
	jne	SHORT $LN13@DXUtil_Tim

; 624  :         {
; 625  :             fTime = qwTime.QuadPart / (double) m_llQPFTicksPerSec;

	mov	edx, DWORD PTR _qwTime$4[ebp+4]
	mov	ecx, DWORD PTR _qwTime$4[ebp]
	call	__ltod3
	mov	edx, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
	mov	ecx, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
	movsd	QWORD PTR tv299[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv299[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fTime$6[ebp], xmm1

; 626  :             return (FLOAT) fTime;

	cvtsd2ss xmm0, QWORD PTR _fTime$6[ebp]
	movss	DWORD PTR tv253[ebp], xmm0
	fld	DWORD PTR tv253[ebp]
	jmp	$LN12@DXUtil_Tim
$LN13@DXUtil_Tim:

; 627  :         }
; 628  : 
; 629  :         return -1.0f; // Invalid command specified

	fld	DWORD PTR __real@bf800000
	jmp	$LN12@DXUtil_Tim

; 630  :     }
; 631  :     else

	jmp	$LN12@DXUtil_Tim
$LN24@DXUtil_Tim:

; 632  :     {
; 633  :         // Get the time using timeGetTime()
; 634  :         static double m_fLastElapsedTime  = 0.0;
; 635  :         static double m_fBaseTime         = 0.0;
; 636  :         static double m_fStopTime         = 0.0;
; 637  :         double fTime;
; 638  :         double fElapsedTime;
; 639  :         
; 640  :         // Get either the current time or the stop time, depending
; 641  :         // on whether we're stopped and what command was sent
; 642  :         if( m_fStopTime != 0.0 && command != TIMER_START && command != TIMER_GETABSOLUTETIME)

	movsd	xmm0, QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN11@DXUtil_Tim
	cmp	DWORD PTR _command$[ebp], 1
	je	SHORT $LN11@DXUtil_Tim
	cmp	DWORD PTR _command$[ebp], 4
	je	SHORT $LN11@DXUtil_Tim

; 643  :             fTime = m_fStopTime;

	movsd	xmm0, QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
	movsd	QWORD PTR _fTime$2[ebp], xmm0

; 644  :         else

	jmp	SHORT $LN10@DXUtil_Tim
$LN11@DXUtil_Tim:

; 645  :             fTime = GETTIMESTAMP() * 0.001;

	mov	esi, esp
	call	DWORD PTR __imp__timeGetTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv264[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv264[ebp]
	mov	eax, DWORD PTR tv264[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	movsd	QWORD PTR _fTime$2[ebp], xmm0
$LN10@DXUtil_Tim:

; 646  :     
; 647  :         // Return the elapsed time
; 648  :         if( command == TIMER_GETELAPSEDTIME )

	cmp	DWORD PTR _command$[ebp], 6
	jne	SHORT $LN9@DXUtil_Tim

; 649  :         {   
; 650  :             fElapsedTime = (double) (fTime - m_fLastElapsedTime);

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	subsd	xmm0, QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
	movsd	QWORD PTR _fElapsedTime$1[ebp], xmm0

; 651  :             m_fLastElapsedTime = fTime;

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	movsd	QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 652  :             return (FLOAT) fElapsedTime;

	cvtsd2ss xmm0, QWORD PTR _fElapsedTime$1[ebp]
	movss	DWORD PTR tv270[ebp], xmm0
	fld	DWORD PTR tv270[ebp]
	jmp	$LN12@DXUtil_Tim
$LN9@DXUtil_Tim:

; 653  :         }
; 654  :     
; 655  :         // Return the current time
; 656  :         if( command == TIMER_GETAPPTIME )

	cmp	DWORD PTR _command$[ebp], 5
	jne	SHORT $LN8@DXUtil_Tim

; 657  :         {
; 658  :             return (FLOAT) (fTime - m_fBaseTime);

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	subsd	xmm0, QWORD PTR ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv274[ebp], xmm0
	fld	DWORD PTR tv274[ebp]
	jmp	$LN12@DXUtil_Tim
$LN8@DXUtil_Tim:

; 659  :         }
; 660  :     
; 661  :         // Reset the timer
; 662  :         if( command == TIMER_RESET )

	cmp	DWORD PTR _command$[ebp], 0
	jne	SHORT $LN7@DXUtil_Tim

; 663  :         {
; 664  :             m_fBaseTime         = fTime;

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	movsd	QWORD PTR ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 665  :             m_fLastElapsedTime  = fTime;

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	movsd	QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 666  :             m_fStopTime         = 0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 667  :             m_bTimerStopped     = FALSE;

	mov	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0

; 668  :             return 0.0f;

	fldz
	jmp	$LN12@DXUtil_Tim
$LN7@DXUtil_Tim:

; 669  :         }
; 670  :     
; 671  :         // Start the timer
; 672  :         if( command == TIMER_START )

	cmp	DWORD PTR _command$[ebp], 1
	jne	SHORT $LN6@DXUtil_Tim

; 673  :         {
; 674  :             if( m_bTimerStopped )

	cmp	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0
	je	SHORT $LN5@DXUtil_Tim

; 675  :                 m_fBaseTime += fTime - m_fStopTime;

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	subsd	xmm0, QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
	addsd	xmm0, QWORD PTR ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
	movsd	QWORD PTR ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0
$LN5@DXUtil_Tim:

; 676  :             m_fStopTime = 0.0f;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 677  :             m_fLastElapsedTime  = fTime;

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	movsd	QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 678  :             m_bTimerStopped = FALSE;

	mov	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0

; 679  :             return 0.0f;

	fldz
	jmp	SHORT $LN12@DXUtil_Tim
$LN6@DXUtil_Tim:

; 680  :         }
; 681  :     
; 682  :         // Stop the timer
; 683  :         if( command == TIMER_STOP )

	cmp	DWORD PTR _command$[ebp], 2
	jne	SHORT $LN4@DXUtil_Tim

; 684  :         {
; 685  :             if( !m_bTimerStopped )

	cmp	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 0
	jne	SHORT $LN3@DXUtil_Tim

; 686  :             {
; 687  :                 m_fStopTime = fTime;

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	movsd	QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 688  :                 m_fLastElapsedTime  = fTime;

	movsd	xmm0, QWORD PTR _fTime$2[ebp]
	movsd	QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 689  :                 m_bTimerStopped = TRUE;

	mov	DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 1
$LN3@DXUtil_Tim:

; 690  :             }
; 691  :             return 0.0f;

	fldz
	jmp	SHORT $LN12@DXUtil_Tim
$LN4@DXUtil_Tim:

; 692  :         }
; 693  :     
; 694  :         // Advance the timer by 1/10th second
; 695  :         if( command == TIMER_ADVANCE )

	cmp	DWORD PTR _command$[ebp], 3
	jne	SHORT $LN2@DXUtil_Tim

; 696  :         {
; 697  :             m_fStopTime += 0.1f;

	movsd	xmm0, QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
	addsd	xmm0, QWORD PTR __real@3fb99999a0000000
	movsd	QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA, xmm0

; 698  :             return 0.0f;

	fldz
	jmp	SHORT $LN12@DXUtil_Tim
$LN2@DXUtil_Tim:

; 699  :         }
; 700  : 
; 701  :         if( command == TIMER_GETABSOLUTETIME )

	cmp	DWORD PTR _command$[ebp], 4
	jne	SHORT $LN1@DXUtil_Tim

; 702  :         {
; 703  :             return (FLOAT) fTime;

	cvtsd2ss xmm0, QWORD PTR _fTime$2[ebp]
	movss	DWORD PTR tv291[ebp], xmm0
	fld	DWORD PTR tv291[ebp]
	jmp	SHORT $LN12@DXUtil_Tim
$LN1@DXUtil_Tim:

; 704  :         }
; 705  : 
; 706  :         return -1.0f; // Invalid command specified

	fld	DWORD PTR __real@bf800000
$LN12@DXUtil_Tim:

; 707  :     }
; 708  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@DXUtil_Tim
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN32@DXUtil_Tim:
	DD	2
	DD	$LN31@DXUtil_Tim
$LN31@DXUtil_Tim:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN29@DXUtil_Tim
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN30@DXUtil_Tim
$LN30@DXUtil_Tim:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN29@DXUtil_Tim:
	DB	113					; 00000071H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z ENDP		; DXUtil_Timer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PBDPAHH@Z
_TEXT	SEGMENT
_dwLength$ = -20					; size = 4
_dwType$ = -8						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_pbDest$ = 16						; size = 4
_bDefault$ = 20						; size = 4
?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PBDPAHH@Z PROC	; DXUtil_ReadBoolRegKey, COMDAT

; 432  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 433  :     DWORD dwType;
; 434  :     DWORD dwLength = sizeof(BOOL);

	mov	DWORD PTR _dwLength$[ebp], 4

; 435  : 
; 436  :     if( ERROR_SUCCESS != RegQueryValueEx( hKey, strRegName, 0, &dwType, 
; 437  :                                           (BYTE*)pbDest, &dwLength ) )

	mov	esi, esp
	lea	eax, DWORD PTR _dwLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pbDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _strRegName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@DXUtil_Rea

; 438  :     {
; 439  :         *pbDest = bDefault;

	mov	eax, DWORD PTR _pbDest$[ebp]
	mov	ecx, DWORD PTR _bDefault$[ebp]
	mov	DWORD PTR [eax], ecx

; 440  :         return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN4@DXUtil_Rea

; 441  :     }
; 442  :     else

	jmp	SHORT $LN2@DXUtil_Rea
$LN3@DXUtil_Rea:

; 443  :     {
; 444  :         if( dwType != REG_DWORD )

	cmp	DWORD PTR _dwType$[ebp], 4
	je	SHORT $LN2@DXUtil_Rea

; 445  :         {
; 446  :             *pbDest = bDefault;

	mov	eax, DWORD PTR _pbDest$[ebp]
	mov	ecx, DWORD PTR _bDefault$[ebp]
	mov	DWORD PTR [eax], ecx

; 447  :             return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN4@DXUtil_Rea
$LN2@DXUtil_Rea:

; 448  :         }
; 449  :     }
; 450  : 
; 451  :     return S_OK;

	xor	eax, eax
$LN4@DXUtil_Rea:

; 452  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DXUtil_Rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@DXUtil_Rea:
	DD	2
	DD	$LN8@DXUtil_Rea
$LN8@DXUtil_Rea:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@DXUtil_Rea
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@DXUtil_Rea
$LN7@DXUtil_Rea:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN6@DXUtil_Rea:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PBDPAHH@Z ENDP	; DXUtil_ReadBoolRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PBDPAU_GUID@@AAU2@@Z
_TEXT	SEGMENT
_dwLength$ = -20					; size = 4
_dwType$ = -8						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_pGuidDest$ = 16					; size = 4
_guidDefault$ = 20					; size = 4
?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PBDPAU_GUID@@AAU2@@Z PROC ; DXUtil_ReadGuidRegKey, COMDAT

; 479  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 480  :     DWORD dwType;
; 481  :     DWORD dwLength = sizeof(GUID);

	mov	DWORD PTR _dwLength$[ebp], 16		; 00000010H

; 482  : 
; 483  :     if( ERROR_SUCCESS != RegQueryValueEx( hKey, strRegName, 0, &dwType, 
; 484  :                                           (LPBYTE) pGuidDest, &dwLength ) )

	mov	esi, esp
	lea	eax, DWORD PTR _dwLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGuidDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _strRegName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@DXUtil_Rea

; 485  :     {
; 486  :         *pGuidDest = guidDefault;

	mov	eax, DWORD PTR _guidDefault$[ebp]
	mov	ecx, DWORD PTR _pGuidDest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 487  :         return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN4@DXUtil_Rea

; 488  :     }
; 489  :     else

	jmp	SHORT $LN2@DXUtil_Rea
$LN3@DXUtil_Rea:

; 490  :     {
; 491  :         if( dwType != REG_BINARY )

	cmp	DWORD PTR _dwType$[ebp], 3
	je	SHORT $LN2@DXUtil_Rea

; 492  :         {
; 493  :             *pGuidDest = guidDefault;

	mov	eax, DWORD PTR _guidDefault$[ebp]
	mov	ecx, DWORD PTR _pGuidDest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 494  :             return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN4@DXUtil_Rea
$LN2@DXUtil_Rea:

; 495  :         }
; 496  :     }
; 497  : 
; 498  :     return S_OK;

	xor	eax, eax
$LN4@DXUtil_Rea:

; 499  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DXUtil_Rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@DXUtil_Rea:
	DD	2
	DD	$LN8@DXUtil_Rea
$LN8@DXUtil_Rea:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@DXUtil_Rea
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@DXUtil_Rea
$LN7@DXUtil_Rea:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN6@DXUtil_Rea:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PBDPAU_GUID@@AAU2@@Z ENDP ; DXUtil_ReadGuidRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PBDPAKK@Z
_TEXT	SEGMENT
_dwLength$ = -20					; size = 4
_dwType$ = -8						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_pdwDest$ = 16						; size = 4
_dwDefault$ = 20					; size = 4
?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PBDPAKK@Z PROC	; DXUtil_ReadIntRegKey, COMDAT

; 385  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 386  :     DWORD dwType;
; 387  :     DWORD dwLength = sizeof(DWORD);

	mov	DWORD PTR _dwLength$[ebp], 4

; 388  : 
; 389  :     if( ERROR_SUCCESS != RegQueryValueEx( hKey, strRegName, 0, &dwType, 
; 390  :                                           (BYTE*)pdwDest, &dwLength ) )

	mov	esi, esp
	lea	eax, DWORD PTR _dwLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pdwDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _strRegName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@DXUtil_Rea

; 391  :     {
; 392  :         *pdwDest = dwDefault;

	mov	eax, DWORD PTR _pdwDest$[ebp]
	mov	ecx, DWORD PTR _dwDefault$[ebp]
	mov	DWORD PTR [eax], ecx

; 393  :         return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN4@DXUtil_Rea

; 394  :     }
; 395  :     else

	jmp	SHORT $LN2@DXUtil_Rea
$LN3@DXUtil_Rea:

; 396  :     {
; 397  :         if( dwType != REG_DWORD )

	cmp	DWORD PTR _dwType$[ebp], 4
	je	SHORT $LN2@DXUtil_Rea

; 398  :         {
; 399  :             *pdwDest = dwDefault;

	mov	eax, DWORD PTR _pdwDest$[ebp]
	mov	ecx, DWORD PTR _dwDefault$[ebp]
	mov	DWORD PTR [eax], ecx

; 400  :             return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN4@DXUtil_Rea
$LN2@DXUtil_Rea:

; 401  :         }
; 402  :     }
; 403  : 
; 404  :     return S_OK;

	xor	eax, eax
$LN4@DXUtil_Rea:

; 405  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DXUtil_Rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@DXUtil_Rea:
	DD	2
	DD	$LN8@DXUtil_Rea
$LN8@DXUtil_Rea:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@DXUtil_Rea
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@DXUtil_Rea
$LN7@DXUtil_Rea:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN6@DXUtil_Rea:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PBDPAKK@Z ENDP	; DXUtil_ReadIntRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ReadFloatRegKey@@YAJPAUHKEY__@@PBDPAMM@Z
_TEXT	SEGMENT
$T1 = -756						; size = 4
_nResult$2 = -552					; size = 4
_strDefault$ = -540					; size = 256
_fResult$ = -276					; size = 4
_sz$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_pfDest$ = 16						; size = 4
_fDefault$ = 20						; size = 4
?DXUtil_ReadFloatRegKey@@YAJPAUHKEY__@@PBDPAMM@Z PROC	; DXUtil_ReadFloatRegKey, COMDAT

; 335  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 760				; 000002f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-760]
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 336  :     if( NULL == pfDest )

	cmp	DWORD PTR _pfDest$[ebp], 0
	jne	SHORT $LN3@DXUtil_Rea

; 337  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN4@DXUtil_Rea
$LN3@DXUtil_Rea:

; 338  : 
; 339  :     TCHAR sz[256];
; 340  :     float fResult;
; 341  : 
; 342  :     TCHAR strDefault[256];
; 343  :     _sntprintf( strDefault, 256, TEXT("%f"), fDefault );

	cvtss2sd xmm0, DWORD PTR _fDefault$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	push	256					; 00000100H
	lea	eax, DWORD PTR _strDefault$[ebp]
	push	eax
	call	__snprintf
	add	esp, 20					; 00000014H

; 344  :     strDefault[255] = 0;

	mov	eax, 1
	imul	ecx, eax, 255
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 256			; 00000100H
	jae	SHORT $LN6@DXUtil_Rea
	jmp	SHORT $LN7@DXUtil_Rea
$LN6@DXUtil_Rea:
	call	___report_rangecheckfailure
$LN7@DXUtil_Rea:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strDefault$[ebp+edx], 0

; 345  :    
; 346  :     if( SUCCEEDED( DXUtil_ReadStringRegKeyCch( hKey, strRegName, sz, 256, strDefault ) ) )

	lea	eax, DWORD PTR _strDefault$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strRegName$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKey$[ebp]
	push	eax
	call	?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PBDPADK1@Z ; DXUtil_ReadStringRegKeyCch
	add	esp, 20					; 00000014H
	test	eax, eax
	jl	SHORT $LN1@DXUtil_Rea

; 347  :     {
; 348  :         int nResult = _stscanf( sz, TEXT("%f"), &fResult );

	lea	eax, DWORD PTR _fResult$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	lea	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nResult$2[ebp], eax

; 349  :         if( nResult == 1 )

	cmp	DWORD PTR _nResult$2[ebp], 1
	jne	SHORT $LN1@DXUtil_Rea

; 350  :         {
; 351  :             *pfDest = fResult;

	mov	eax, DWORD PTR _pfDest$[ebp]
	movss	xmm0, DWORD PTR _fResult$[ebp]
	movss	DWORD PTR [eax], xmm0

; 352  :             return S_OK;           

	xor	eax, eax
	jmp	SHORT $LN4@DXUtil_Rea
$LN1@DXUtil_Rea:

; 353  :         }
; 354  :     }
; 355  : 
; 356  :     *pfDest = fDefault;

	mov	eax, DWORD PTR _pfDest$[ebp]
	movss	xmm0, DWORD PTR _fDefault$[ebp]
	movss	DWORD PTR [eax], xmm0

; 357  :     return S_FALSE;

	mov	eax, 1
$LN4@DXUtil_Rea:

; 358  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DXUtil_Rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 760				; 000002f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@DXUtil_Rea:
	DD	3
	DD	$LN11@DXUtil_Rea
$LN11@DXUtil_Rea:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN8@DXUtil_Rea
	DD	-276					; fffffeecH
	DD	4
	DD	$LN9@DXUtil_Rea
	DD	-540					; fffffde4H
	DD	256					; 00000100H
	DD	$LN10@DXUtil_Rea
$LN10@DXUtil_Rea:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN9@DXUtil_Rea:
	DB	102					; 00000066H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN8@DXUtil_Rea:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
?DXUtil_ReadFloatRegKey@@YAJPAUHKEY__@@PBDPAMM@Z ENDP	; DXUtil_ReadFloatRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PBDPADK1@Z
_TEXT	SEGMENT
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_strDest$ = 16						; size = 4
_cbDest$ = 20						; size = 4
_strDefault$ = 24					; size = 4
?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PBDPADK1@Z PROC ; DXUtil_ReadStringRegKeyCb, COMDAT

; 1357 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1358 :     return DXUtil_ReadStringRegKeyCch( hKey, strRegName, strDest, cbDest / sizeof(TCHAR), strDefault );

	mov	eax, DWORD PTR _strDefault$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _strRegName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKey$[ebp]
	push	ecx
	call	?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PBDPADK1@Z ; DXUtil_ReadStringRegKeyCch
	add	esp, 20					; 00000014H

; 1359 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PBDPADK1@Z ENDP ; DXUtil_ReadStringRegKeyCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PBDPADK1@Z
_TEXT	SEGMENT
_cbDest$ = -20						; size = 4
_dwType$ = -8						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_strDest$ = 16						; size = 4
_cchDest$ = 20						; size = 4
_strDefault$ = 24					; size = 4
?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PBDPADK1@Z PROC ; DXUtil_ReadStringRegKeyCch, COMDAT

; 281  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 282  :     DWORD dwType;
; 283  :     DWORD cbDest = cchDest * sizeof(TCHAR);

	mov	eax, DWORD PTR _cchDest$[ebp]
	mov	DWORD PTR _cbDest$[ebp], eax

; 284  : 
; 285  :     if( ERROR_SUCCESS != RegQueryValueEx( hKey, strRegName, 0, &dwType, 
; 286  :                                           (BYTE*)strDest, &cbDest ) )

	mov	esi, esp
	lea	eax, DWORD PTR _cbDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _strRegName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hKey$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@DXUtil_Rea

; 287  :     {
; 288  :         _tcsncpy( strDest, strDefault, cchDest );

	mov	eax, DWORD PTR _cchDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDefault$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDest$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 289  :         strDest[cchDest-1] = 0;

	mov	eax, DWORD PTR _strDest$[ebp]
	add	eax, DWORD PTR _cchDest$[ebp]
	mov	BYTE PTR [eax-1], 0

; 290  :         return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN4@DXUtil_Rea

; 291  :     }
; 292  :     else

	jmp	SHORT $LN2@DXUtil_Rea
$LN3@DXUtil_Rea:

; 293  :     {     
; 294  :         if( dwType != REG_SZ )

	cmp	DWORD PTR _dwType$[ebp], 1
	je	SHORT $LN2@DXUtil_Rea

; 295  :         {
; 296  :             _tcsncpy( strDest, strDefault, cchDest );

	mov	eax, DWORD PTR _cchDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDefault$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDest$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 297  :             strDest[cchDest-1] = 0;

	mov	eax, DWORD PTR _strDest$[ebp]
	add	eax, DWORD PTR _cchDest$[ebp]
	mov	BYTE PTR [eax-1], 0

; 298  :             return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN4@DXUtil_Rea
$LN2@DXUtil_Rea:

; 299  :         }   
; 300  :     }
; 301  : 
; 302  :     return S_OK;

	xor	eax, eax
$LN4@DXUtil_Rea:

; 303  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DXUtil_Rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@DXUtil_Rea:
	DD	2
	DD	$LN8@DXUtil_Rea
$LN8@DXUtil_Rea:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@DXUtil_Rea
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@DXUtil_Rea
$LN7@DXUtil_Rea:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN6@DXUtil_Rea:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PBDPADK1@Z ENDP ; DXUtil_ReadStringRegKeyCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PBDH@Z
_TEXT	SEGMENT
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_bValue$ = 16						; size = 4
?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PBDH@Z PROC	; DXUtil_WriteBoolRegKey, COMDAT

; 462  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 463  :     if( ERROR_SUCCESS != RegSetValueEx( hKey, strRegName, 0, REG_DWORD, 
; 464  :                                         (BYTE*)&bValue, sizeof(BOOL) ) )

	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _bValue$[ebp]
	push	eax
	push	4
	push	0
	mov	ecx, DWORD PTR _strRegName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKey$[ebp]
	push	edx
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@DXUtil_Wri

; 465  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@DXUtil_Wri
$LN1@DXUtil_Wri:

; 466  : 
; 467  :     return S_OK;

	xor	eax, eax
$LN2@DXUtil_Wri:

; 468  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PBDH@Z ENDP	; DXUtil_WriteBoolRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PBDU_GUID@@@Z
_TEXT	SEGMENT
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_guidValue$ = 16					; size = 16
?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PBDU_GUID@@@Z PROC ; DXUtil_WriteGuidRegKey, COMDAT

; 509  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 510  :     if( ERROR_SUCCESS != RegSetValueEx( hKey, strRegName, 0, REG_BINARY, 
; 511  :                                         (BYTE*)&guidValue, sizeof(GUID) ) )

	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _guidValue$[ebp]
	push	eax
	push	3
	push	0
	mov	ecx, DWORD PTR _strRegName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKey$[ebp]
	push	edx
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@DXUtil_Wri

; 512  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@DXUtil_Wri
$LN1@DXUtil_Wri:

; 513  : 
; 514  :     return S_OK;

	xor	eax, eax
$LN2@DXUtil_Wri:

; 515  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PBDU_GUID@@@Z ENDP ; DXUtil_WriteGuidRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_dwValue$ = 16						; size = 4
?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PBDK@Z PROC	; DXUtil_WriteIntRegKey, COMDAT

; 415  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 416  :     if( ERROR_SUCCESS != RegSetValueEx( hKey, strRegName, 0, REG_DWORD, 
; 417  :                                         (BYTE*)&dwValue, sizeof(DWORD) ) )

	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _dwValue$[ebp]
	push	eax
	push	4
	push	0
	mov	ecx, DWORD PTR _strRegName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKey$[ebp]
	push	edx
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@DXUtil_Wri

; 418  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@DXUtil_Wri
$LN1@DXUtil_Wri:

; 419  : 
; 420  :     return S_OK;

	xor	eax, eax
$LN2@DXUtil_Wri:

; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PBDK@Z ENDP	; DXUtil_WriteIntRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_WriteFloatRegKey@@YAJPAUHKEY__@@PBDM@Z
_TEXT	SEGMENT
$T1 = -468						; size = 4
_strValue$ = -264					; size = 256
__$ArrayPad$ = -4					; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_fValue$ = 16						; size = 4
?DXUtil_WriteFloatRegKey@@YAJPAUHKEY__@@PBDM@Z PROC	; DXUtil_WriteFloatRegKey, COMDAT

; 368  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 369  :     TCHAR strValue[256];
; 370  :     _sntprintf( strValue, 256, TEXT("%f"), fValue );

	cvtss2sd xmm0, DWORD PTR _fValue$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	push	256					; 00000100H
	lea	eax, DWORD PTR _strValue$[ebp]
	push	eax
	call	__snprintf
	add	esp, 20					; 00000014H

; 371  :     strValue[255] = 0;

	mov	eax, 1
	imul	ecx, eax, 255
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 256			; 00000100H
	jae	SHORT $LN3@DXUtil_Wri
	jmp	SHORT $LN4@DXUtil_Wri
$LN3@DXUtil_Wri:
	call	___report_rangecheckfailure
$LN4@DXUtil_Wri:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strValue$[ebp+edx], 0

; 372  : 
; 373  :     return DXUtil_WriteStringRegKey( hKey, strRegName, strValue );

	lea	eax, DWORD PTR _strValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strRegName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hKey$[ebp]
	push	edx
	call	?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PBD1@Z ; DXUtil_WriteStringRegKey
	add	esp, 12					; 0000000cH
$LN1@DXUtil_Wri:

; 374  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DXUtil_Wri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@DXUtil_Wri:
	DD	1
	DD	$LN6@DXUtil_Wri
$LN6@DXUtil_Wri:
	DD	-264					; fffffef8H
	DD	256					; 00000100H
	DD	$LN5@DXUtil_Wri
$LN5@DXUtil_Wri:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
?DXUtil_WriteFloatRegKey@@YAJPAUHKEY__@@PBDM@Z ENDP	; DXUtil_WriteFloatRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PBD1@Z
_TEXT	SEGMENT
_cbValue$ = -8						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_strValue$ = 16						; size = 4
?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PBD1@Z PROC	; DXUtil_WriteStringRegKey, COMDAT

; 314  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 315  :     if( NULL == strValue )

	cmp	DWORD PTR _strValue$[ebp], 0
	jne	SHORT $LN2@DXUtil_Wri

; 316  :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN3@DXUtil_Wri
$LN2@DXUtil_Wri:

; 317  :         
; 318  :     DWORD cbValue = ((DWORD)_tcslen(strValue)+1) * sizeof(TCHAR);

	mov	eax, DWORD PTR _strValue$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _cbValue$[ebp], eax

; 319  : 
; 320  :     if( ERROR_SUCCESS != RegSetValueEx( hKey, strRegName, 0, REG_SZ, 
; 321  :                                         (BYTE*)strValue, cbValue ) )

	mov	esi, esp
	mov	eax, DWORD PTR _cbValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strValue$[ebp]
	push	ecx
	push	1
	push	0
	mov	edx, DWORD PTR _strRegName$[ebp]
	push	edx
	mov	eax, DWORD PTR _hKey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegSetValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@DXUtil_Wri

; 322  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN3@DXUtil_Wri
$LN1@DXUtil_Wri:

; 323  : 
; 324  :     return S_OK;

	xor	eax, eax
$LN3@DXUtil_Wri:

; 325  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PBD1@Z ENDP	; DXUtil_WriteStringRegKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_FindMediaFileCb@@YAJPADHPBD@Z
_TEXT	SEGMENT
_szDestPath$ = 8					; size = 4
_cbDest$ = 12						; size = 4
_strFilename$ = 16					; size = 4
?DXUtil_FindMediaFileCb@@YAJPADHPBD@Z PROC		; DXUtil_FindMediaFileCb, COMDAT

; 1373 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1374 :     return DXUtil_FindMediaFileCch( szDestPath, cbDest / sizeof(TCHAR), strFilename );

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cbDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szDestPath$[ebp]
	push	edx
	call	?DXUtil_FindMediaFileCch@@YAJPADHPBD@Z	; DXUtil_FindMediaFileCch
	add	esp, 12					; 0000000cH

; 1375 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_FindMediaFileCb@@YAJPADHPBD@Z ENDP		; DXUtil_FindMediaFileCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_FindMediaFileCch@@YAJPADHPBD@Z
_TEXT	SEGMENT
$T1 = -1604						; size = 4
$T2 = -1592						; size = 4
$T3 = -1580						; size = 4
$T4 = -1568						; size = 4
_strLeafName$ = -1364					; size = 260
_strLastSlash$ = -1096					; size = 4
_strExeName$ = -1084					; size = 260
_strExePath$ = -816					; size = 260
_strMediaDir$ = -548					; size = 260
_strSearchFor$ = -280					; size = 260
_bFound$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
_strDestPath$ = 8					; size = 4
_cchDest$ = 12						; size = 4
_strFilename$ = 16					; size = 4
?DXUtil_FindMediaFileCch@@YAJPADHPBD@Z PROC		; DXUtil_FindMediaFileCch, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1608				; 00000648H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1608]
	mov	ecx, 402				; 00000192H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 81   :     bool bFound;
; 82   :     TCHAR strSearchFor[MAX_PATH];
; 83   :     
; 84   :     if( NULL==strFilename || strFilename[0] == 0 || NULL==strDestPath || cchDest < 10 )

	cmp	DWORD PTR _strFilename$[ebp], 0
	je	SHORT $LN9@DXUtil_Fin
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _strFilename$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	SHORT $LN9@DXUtil_Fin
	cmp	DWORD PTR _strDestPath$[ebp], 0
	je	SHORT $LN9@DXUtil_Fin
	cmp	DWORD PTR _cchDest$[ebp], 10		; 0000000aH
	jge	SHORT $LN10@DXUtil_Fin
$LN9@DXUtil_Fin:

; 85   :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN12@DXUtil_Fin
$LN10@DXUtil_Fin:

; 86   : 
; 87   :     // Get the DirectX SDK's media dir if the SDK is installed
; 88   :     TCHAR strMediaDir[MAX_PATH] = {0};

	mov	BYTE PTR _strMediaDir$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strMediaDir$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 89   :     DXUtil_GetDXSDKMediaPathCch( strMediaDir, MAX_PATH );

	push	260					; 00000104H
	lea	eax, DWORD PTR _strMediaDir$[ebp]
	push	eax
	call	?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z	; DXUtil_GetDXSDKMediaPathCch
	add	esp, 8

; 90   : 
; 91   :     // Get the exe name, and exe path
; 92   :     TCHAR strExePath[MAX_PATH] = {0};

	mov	BYTE PTR _strExePath$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strExePath$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 93   :     TCHAR strExeName[MAX_PATH] = {0};

	mov	BYTE PTR _strExeName$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strExeName$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 94   :     TCHAR* strLastSlash = NULL;

	mov	DWORD PTR _strLastSlash$[ebp], 0

; 95   :     GetModuleFileName( NULL, strExePath, MAX_PATH );

	mov	esi, esp
	push	260					; 00000104H
	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__GetModuleFileNameA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 96   :     strExePath[MAX_PATH-1]=0;

	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 260			; 00000104H
	jae	SHORT $LN13@DXUtil_Fin
	jmp	SHORT $LN14@DXUtil_Fin
$LN13@DXUtil_Fin:
	call	___report_rangecheckfailure
$LN14@DXUtil_Fin:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _strExePath$[ebp+edx], 0

; 97   :     strLastSlash = _tcsrchr( strExePath, TEXT('\\') );

	push	92					; 0000005cH
	lea	eax, DWORD PTR _strExePath$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 98   :     if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN8@DXUtil_Fin

; 99   :     {
; 100  :         lstrcpyn( strExeName, &strLastSlash[1], MAX_PATH );

	mov	esi, esp
	push	260					; 00000104H
	mov	eax, 1
	shl	eax, 0
	add	eax, DWORD PTR _strLastSlash$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcpynA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 101  : 
; 102  :         // Chop the exe name from the exe path
; 103  :         *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0

; 104  : 
; 105  :         // Chop the .exe from the exe name
; 106  :         strLastSlash = _tcsrchr( strExeName, TEXT('.') );

	push	46					; 0000002eH
	lea	eax, DWORD PTR _strExeName$[ebp]
	push	eax
	call	?strrchr@@YAPADPADH@Z			; strrchr
	add	esp, 8
	mov	DWORD PTR _strLastSlash$[ebp], eax

; 107  :         if( strLastSlash )

	cmp	DWORD PTR _strLastSlash$[ebp], 0
	je	SHORT $LN8@DXUtil_Fin

; 108  :             *strLastSlash = 0;

	mov	eax, DWORD PTR _strLastSlash$[ebp]
	mov	BYTE PTR [eax], 0
$LN8@DXUtil_Fin:

; 109  :     }
; 110  : 
; 111  :     // Typical directories:
; 112  :     //      .\
; 113  :     //      ..\
; 114  :     //      ..\..\
; 115  :     //      %EXE_DIR%\
; 116  :     //      %EXE_DIR%\..\
; 117  :     //      %EXE_DIR%\..\..\
; 118  :     //      %EXE_DIR%\..\%EXE_NAME%
; 119  :     //      %EXE_DIR%\..\..\%EXE_NAME%
; 120  :     //      DXSDK media path
; 121  : 
; 122  :     // Typical directory search
; 123  :     bFound = DXUtil_FindMediaSearchTypicalDirs( strDestPath, cchDest, strFilename, strExePath, strExeName, strMediaDir );

	lea	eax, DWORD PTR _strMediaDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strExePath$[ebp]
	push	edx
	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestPath$[ebp]
	push	edx
	call	?DXUtil_FindMediaSearchTypicalDirs@@YA_NPADHPBD000@Z ; DXUtil_FindMediaSearchTypicalDirs
	add	esp, 24					; 00000018H
	mov	BYTE PTR _bFound$[ebp], al

; 124  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN6@DXUtil_Fin

; 125  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@DXUtil_Fin
$LN6@DXUtil_Fin:

; 126  : 
; 127  :     // Typical directory search again, but also look in a subdir called "\media\" 
; 128  :     _sntprintf( strSearchFor, MAX_PATH, TEXT("media\\%s"), strFilename ); strSearchFor[MAX_PATH-1] = 0;

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	push	OFFSET ??_C@_08GDMOFFMA@media?2?$CFs?$AA@
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strSearchFor$[ebp]
	push	ecx
	call	__snprintf
	add	esp, 16					; 00000010H
	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 260			; 00000104H
	jae	SHORT $LN15@DXUtil_Fin
	jmp	SHORT $LN16@DXUtil_Fin
$LN15@DXUtil_Fin:
	call	___report_rangecheckfailure
$LN16@DXUtil_Fin:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _strSearchFor$[ebp+edx], 0

; 129  :     bFound = DXUtil_FindMediaSearchTypicalDirs( strDestPath, cchDest, strSearchFor, strExePath, strExeName, strMediaDir );

	lea	eax, DWORD PTR _strMediaDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExeName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strExePath$[ebp]
	push	edx
	lea	eax, DWORD PTR _strSearchFor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestPath$[ebp]
	push	edx
	call	?DXUtil_FindMediaSearchTypicalDirs@@YA_NPADHPBD000@Z ; DXUtil_FindMediaSearchTypicalDirs
	add	esp, 24					; 00000018H
	mov	BYTE PTR _bFound$[ebp], al

; 130  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN5@DXUtil_Fin

; 131  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@DXUtil_Fin
$LN5@DXUtil_Fin:

; 132  : 
; 133  :     TCHAR strLeafName[MAX_PATH] = {0};

	mov	BYTE PTR _strLeafName$[ebp], 0
	push	259					; 00000103H
	push	0
	lea	eax, DWORD PTR _strLeafName$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 134  : 
; 135  :     // Search all parent directories starting at .\ and using strFilename as the leaf name
; 136  :     _tcsncpy( strLeafName, strFilename, MAX_PATH ); strLeafName[MAX_PATH-1] = 0;

	push	260					; 00000104H
	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strLeafName$[ebp]
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH
	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 260			; 00000104H
	jae	SHORT $LN17@DXUtil_Fin
	jmp	SHORT $LN18@DXUtil_Fin
$LN17@DXUtil_Fin:
	call	___report_rangecheckfailure
$LN18@DXUtil_Fin:
	mov	edx, DWORD PTR $T3[ebp]
	mov	BYTE PTR _strLeafName$[ebp+edx], 0

; 137  :     bFound = DXUtil_FindMediaSearchParentDirs( strDestPath, cchDest, TEXT("."), strLeafName );

	lea	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestPath$[ebp]
	push	edx
	call	?DXUtil_FindMediaSearchParentDirs@@YA_NPADH00@Z ; DXUtil_FindMediaSearchParentDirs
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$[ebp], al

; 138  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN4@DXUtil_Fin

; 139  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@DXUtil_Fin
$LN4@DXUtil_Fin:

; 140  : 
; 141  :     // Search all parent directories starting at the exe's dir and using strFilename as the leaf name
; 142  :     bFound = DXUtil_FindMediaSearchParentDirs( strDestPath, cchDest, strExePath, strLeafName );

	lea	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _strDestPath$[ebp]
	push	eax
	call	?DXUtil_FindMediaSearchParentDirs@@YA_NPADH00@Z ; DXUtil_FindMediaSearchParentDirs
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$[ebp], al

; 143  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN3@DXUtil_Fin

; 144  :         return S_OK;

	xor	eax, eax
	jmp	$LN12@DXUtil_Fin
$LN3@DXUtil_Fin:

; 145  : 
; 146  :     // Search all parent directories starting at .\ and using "media\strFilename" as the leaf name
; 147  :     _sntprintf( strLeafName, MAX_PATH, TEXT("media\\%s"), strFilename ); strLeafName[MAX_PATH-1] = 0;

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	push	OFFSET ??_C@_08GDMOFFMA@media?2?$CFs?$AA@
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strLeafName$[ebp]
	push	ecx
	call	__snprintf
	add	esp, 16					; 00000010H
	mov	eax, 1
	imul	ecx, eax, 259
	mov	DWORD PTR $T4[ebp], ecx
	cmp	DWORD PTR $T4[ebp], 260			; 00000104H
	jae	SHORT $LN19@DXUtil_Fin
	jmp	SHORT $LN20@DXUtil_Fin
$LN19@DXUtil_Fin:
	call	___report_rangecheckfailure
$LN20@DXUtil_Fin:
	mov	edx, DWORD PTR $T4[ebp]
	mov	BYTE PTR _strLeafName$[ebp+edx], 0

; 148  :     bFound = DXUtil_FindMediaSearchParentDirs( strDestPath, cchDest, TEXT("."), strLeafName );

	lea	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	mov	ecx, DWORD PTR _cchDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestPath$[ebp]
	push	edx
	call	?DXUtil_FindMediaSearchParentDirs@@YA_NPADH00@Z ; DXUtil_FindMediaSearchParentDirs
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$[ebp], al

; 149  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN2@DXUtil_Fin

; 150  :         return S_OK;

	xor	eax, eax
	jmp	SHORT $LN12@DXUtil_Fin
$LN2@DXUtil_Fin:

; 151  : 
; 152  :     // Search all parent directories starting at the exe's dir and using "media\strFilename" as the leaf name
; 153  :     bFound = DXUtil_FindMediaSearchParentDirs( strDestPath, cchDest, strExePath, strLeafName );

	lea	eax, DWORD PTR _strLeafName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strExePath$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cchDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _strDestPath$[ebp]
	push	eax
	call	?DXUtil_FindMediaSearchParentDirs@@YA_NPADH00@Z ; DXUtil_FindMediaSearchParentDirs
	add	esp, 16					; 00000010H
	mov	BYTE PTR _bFound$[ebp], al

; 154  :     if( bFound )

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	je	SHORT $LN1@DXUtil_Fin

; 155  :         return S_OK;

	xor	eax, eax
	jmp	SHORT $LN12@DXUtil_Fin
$LN1@DXUtil_Fin:

; 156  : 
; 157  :     // On failure, return the file as the path but also return an error code
; 158  :     _tcsncpy( strDestPath, strFilename, cchDest );

	mov	eax, DWORD PTR _cchDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strFilename$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strDestPath$[ebp]
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 159  :     strDestPath[cchDest-1] = 0;

	mov	eax, DWORD PTR _strDestPath$[ebp]
	add	eax, DWORD PTR _cchDest$[ebp]
	mov	BYTE PTR [eax-1], 0

; 160  : 
; 161  :     return E_FAIL;

	mov	eax, -2147467259			; 80004005H
$LN12@DXUtil_Fin:

; 162  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@DXUtil_Fin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1608				; 00000648H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN27@DXUtil_Fin:
	DD	5
	DD	$LN26@DXUtil_Fin
$LN26@DXUtil_Fin:
	DD	-280					; fffffee8H
	DD	260					; 00000104H
	DD	$LN21@DXUtil_Fin
	DD	-548					; fffffddcH
	DD	260					; 00000104H
	DD	$LN22@DXUtil_Fin
	DD	-816					; fffffcd0H
	DD	260					; 00000104H
	DD	$LN23@DXUtil_Fin
	DD	-1084					; fffffbc4H
	DD	260					; 00000104H
	DD	$LN24@DXUtil_Fin
	DD	-1364					; fffffaacH
	DD	260					; 00000104H
	DD	$LN25@DXUtil_Fin
$LN25@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN24@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN23@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN22@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN21@DXUtil_Fin:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?DXUtil_FindMediaFileCch@@YAJPADHPBD@Z ENDP		; DXUtil_FindMediaFileCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z
_TEXT	SEGMENT
_szDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z PROC		; DXUtil_GetDXSDKMediaPathCb, COMDAT

; 1368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1369 :     return DXUtil_GetDXSDKMediaPathCch( szDest, cbDest / sizeof(TCHAR) );

	mov	eax, DWORD PTR _cbDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szDest$[ebp]
	push	ecx
	call	?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z	; DXUtil_GetDXSDKMediaPathCch
	add	esp, 8

; 1370 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z ENDP		; DXUtil_GetDXSDKMediaPathCb
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\d3d9\dxutil.cpp
;	COMDAT ?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z
_TEXT	SEGMENT
_strMedia$ = -56					; size = 4
_dwSize$ = -44						; size = 4
_dwType$ = -32						; size = 4
_lResult$ = -20						; size = 4
_hKey$ = -8						; size = 4
_strDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z PROC		; DXUtil_GetDXSDKMediaPathCch, COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   :     if( strDest == NULL || cchDest < 1 )

	cmp	DWORD PTR _strDest$[ebp], 0
	je	SHORT $LN5@DXUtil_Get
	cmp	DWORD PTR _cchDest$[ebp], 1
	jge	SHORT $LN6@DXUtil_Get
$LN5@DXUtil_Get:

; 38   :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$LN7@DXUtil_Get
$LN6@DXUtil_Get:

; 39   : 
; 40   :     lstrcpy( strDest, TEXT("") );

	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _strDest$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcpyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 41   : 
; 42   :     // Open the appropriate registry key
; 43   :     HKEY  hKey;
; 44   :     LONG lResult = RegOpenKeyEx( HKEY_LOCAL_MACHINE,
; 45   :                                 _T("Software\\Microsoft\\DirectX SDK"),
; 46   :                                 0, KEY_READ, &hKey );

	mov	esi, esp
	lea	eax, DWORD PTR _hKey$[ebp]
	push	eax
	push	131097					; 00020019H
	push	0
	push	OFFSET ??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lResult$[ebp], eax

; 47   :     if( ERROR_SUCCESS != lResult )

	cmp	DWORD PTR _lResult$[ebp], 0
	je	SHORT $LN4@DXUtil_Get

; 48   :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN7@DXUtil_Get
$LN4@DXUtil_Get:

; 49   : 
; 50   :     DWORD dwType;
; 51   :     DWORD dwSize = cchDest * sizeof(TCHAR);

	mov	eax, DWORD PTR _cchDest$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 52   :     lResult = RegQueryValueEx( hKey, _T("DX9S4SDK Samples Path"), NULL,
; 53   :                               &dwType, (BYTE*)strDest, &dwSize );

	mov	esi, esp
	lea	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$[ebp]
	push	edx
	push	0
	push	OFFSET ??_C@_0BG@DBCLCMPJ@DX9S4SDK?5Samples?5Path?$AA@
	mov	eax, DWORD PTR _hKey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lResult$[ebp], eax

; 54   :     strDest[cchDest-1] = 0; // RegQueryValueEx doesn't NULL term if buffer too small

	mov	eax, DWORD PTR _strDest$[ebp]
	add	eax, DWORD PTR _cchDest$[ebp]
	mov	BYTE PTR [eax-1], 0

; 55   :     RegCloseKey( hKey );

	mov	esi, esp
	mov	eax, DWORD PTR _hKey$[ebp]
	push	eax
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 56   : 
; 57   :     if( ERROR_SUCCESS != lResult )

	cmp	DWORD PTR _lResult$[ebp], 0
	je	SHORT $LN3@DXUtil_Get

; 58   :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN7@DXUtil_Get
$LN3@DXUtil_Get:

; 59   : 
; 60   :     const TCHAR* strMedia = _T("\\Media\\");

	mov	DWORD PTR _strMedia$[ebp], OFFSET ??_C@_07JADGJGAE@?2Media?2?$AA@

; 61   :     if( lstrlen(strDest) + lstrlen(strMedia) < cchDest )

	mov	esi, esp
	mov	eax, DWORD PTR _strDest$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, eax
	mov	edi, esp
	mov	ecx, DWORD PTR _strMedia$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	edi, esp
	call	__RTC_CheckEsp
	add	esi, eax
	cmp	esi, DWORD PTR _cchDest$[ebp]
	jge	SHORT $LN2@DXUtil_Get

; 62   :         _tcscat( strDest, strMedia );

	mov	eax, DWORD PTR _strMedia$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strDest$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8

; 63   :     else

	jmp	SHORT $LN1@DXUtil_Get
$LN2@DXUtil_Get:

; 64   :         return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN7@DXUtil_Get
$LN1@DXUtil_Get:

; 65   : 
; 66   :     return S_OK;

	xor	eax, eax
$LN7@DXUtil_Get:

; 67   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@DXUtil_Get
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@DXUtil_Get:
	DD	3
	DD	$LN12@DXUtil_Get
$LN12@DXUtil_Get:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@DXUtil_Get
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@DXUtil_Get
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN11@DXUtil_Get
$LN11@DXUtil_Get:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN10@DXUtil_Get:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN9@DXUtil_Get:
	DB	104					; 00000068H
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z ENDP		; DXUtil_GetDXSDKMediaPathCch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\program files (x86)\microsoft visual studio 12.0\vc\include\string.h
;	COMDAT ?strrchr@@YAPADPADH@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 4
?strrchr@@YAPADPADH@Z PROC				; strrchr, COMDAT

; 226  :         { return (char*)strrchr((const char*)_Str, _Ch); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	_strrchr
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?strrchr@@YAPADPADH@Z ENDP				; strrchr
_TEXT	ENDS
END
