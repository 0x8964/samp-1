; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	Z:\sampsrc\02Xu1\saco\svrnetstats.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?szSvrDispBuf@@3PADA				; szSvrDispBuf
PUBLIC	?szSvrStatBuf@@3PADA				; szSvrStatBuf
PUBLIC	?szSvrDrawLine@@3PADA				; szSvrDrawLine
PUBLIC	?RakServerStats@@3URakNetStatisticsStruct@@A	; RakServerStats
_BSS	SEGMENT
?szSvrDispBuf@@3PADA DB 04000H DUP (?)			; szSvrDispBuf
?szSvrStatBuf@@3PADA DB 04020H DUP (?)			; szSvrStatBuf
?szSvrDrawLine@@3PADA DB 0400H DUP (?)			; szSvrDrawLine
?RakServerStats@@3URakNetStatisticsStruct@@A DB 0c4H DUP (?) ; RakServerStats
_BSS	ENDS
PUBLIC	?GetScreenWidth@CGame@@QAEHXZ			; CGame::GetScreenWidth
PUBLIC	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
PUBLIC	??0CSvrNetStats@@QAE@PAUIDirect3DDevice9@@@Z	; CSvrNetStats::CSvrNetStats
PUBLIC	?Draw@CSvrNetStats@@QAEXXZ			; CSvrNetStats::Draw
PUBLIC	??_C@_02JOPBDKMM@em?$AA@			; `string'
PUBLIC	??_C@_0DB@FBCEFPND@Download?5Rate?3?5?$CF?42f?5kbps?6Upload?5@ ; `string'
PUBLIC	??_C@_0BO@FFNPACJN@Server?5Net?5Stats?5?$CIAdmin?5only?$CJ?$AA@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@44800000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_sprintf:PROC
EXTRN	_memset:PROC
EXTRN	_strcat:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??0BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::BitStream
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?StatisticsToString@@YAXPAURakNetStatisticsStruct@@PADH@Z:PROC ; StatisticsToString
EXTRN	?RenderText@CFontRender@@QAEXPADUtagRECT@@K@Z:PROC ; CFontRender::RenderText
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	?pNetGame@@3PAVCNetGame@@A:DWORD		; pNetGame
EXTRN	?pDefaultFont@@3PAVCFontRender@@A:DWORD		; pDefaultFont
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BO@FFNPACJN@Server?5Net?5Stats?5?$CIAdmin?5only?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@FFNPACJN@Server?5Net?5Stats?5?$CIAdmin?5only?$CJ?$AA@ DB 'Serve'
	DB	'r Net Stats (Admin only)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@FBCEFPND@Download?5Rate?3?5?$CF?42f?5kbps?6Upload?5@
CONST	SEGMENT
??_C@_0DB@FBCEFPND@Download?5Rate?3?5?$CF?42f?5kbps?6Upload?5@ DB 'Downlo'
	DB	'ad Rate: %.2f kbps', 0aH, 'Upload Rate: %.2f kbps', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOPBDKMM@em?$AA@
CONST	SEGMENT
??_C@_02JOPBDKMM@em?$AA@ DB 'em', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Draw@CSvrNetStats@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@CSvrNetStats@@QAEXXZ$0
__ehfuncinfo$?Draw@CSvrNetStats@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Draw@CSvrNetStats@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\svrnetstats.cpp
;	COMDAT ?Draw@CSvrNetStats@@QAEXXZ
_TEXT	SEGMENT
tv221 = -600						; size = 8
tv209 = -600						; size = 8
tv217 = -592						; size = 4
tv205 = -592						; size = 4
tv88 = -592						; size = 4
$T2 = -584						; size = 4
_x$ = -380						; size = 4
_pBuf$ = -368						; size = 4
_rect$ = -356						; size = 16
_bsParams$3 = -332					; size = 273
_fUp$ = -48						; size = 4
_fDown$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Draw@CSvrNetStats@@QAEXXZ PROC				; CSvrNetStats::Draw, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Draw@CSvrNetStats@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 588				; 0000024cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-600]
	mov	ecx, 147				; 00000093H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 32   : 	return;

	jmp	$LN10@Draw

; 33   : 
; 34   : 	float fDown,fUp;
; 35   : 
; 36   : 	if((GetTickCount() - m_dwLastUpdateTick) > 1000) {

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+8]
	cmp	eax, 1000				; 000003e8H
	jbe	$LN9@Draw

; 37   : 		m_dwLastUpdateTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 38   : 
; 39   : 		m_dwBPSDownload = ((UINT)(RakServerStats.bitsReceived / 8)) - m_dwLastTotalBytesRecv;

	mov	eax, DWORD PTR ?RakServerStats@@3URakNetStatisticsStruct@@A+148
	shr	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax

; 40   : 		m_dwLastTotalBytesRecv = (UINT)(RakServerStats.bitsReceived / 8);

	mov	eax, DWORD PTR ?RakServerStats@@3URakNetStatisticsStruct@@A+148
	shr	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 41   : 		m_dwBPSUpload = ((UINT)(RakServerStats.totalBitsSent / 8)) - m_dwLastTotalBytesSent;

	mov	eax, DWORD PTR ?RakServerStats@@3URakNetStatisticsStruct@@A+120
	shr	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax

; 42   : 		m_dwLastTotalBytesSent = (UINT)(RakServerStats.totalBitsSent / 8);

	mov	eax, DWORD PTR ?RakServerStats@@3URakNetStatisticsStruct@@A+120
	shr	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 43   : 
; 44   : 		RakNet::BitStream bsParams;

	lea	ecx, DWORD PTR _bsParams$3[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 45   : 		pNetGame->GetRakClient()->RPC(RPC_SvrStats,&bsParams,HIGH_PRIORITY,UNRELIABLE,0,false);

	mov	ecx, DWORD PTR ?pNetGame@@3PAVCNetGame@@A ; pNetGame
	call	?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ; CNetGame::GetRakClient
	mov	DWORD PTR tv88[ebp], eax
	mov	esi, esp
	push	0
	push	0
	push	0
	push	1
	lea	eax, DWORD PTR _bsParams$3[ebp]
	push	eax
	push	OFFSET ??_C@_02JOPBDKMM@em?$AA@
	mov	ecx, DWORD PTR tv88[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsParams$3[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
$LN9@Draw:

; 47   : 
; 48   : 	if(m_dwBPSDownload != 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN8@Draw

; 49   : 		fDown = (float)m_dwBPSDownload / 1024;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR tv205[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR tv205[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv209[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv209[ebp]
	divss	xmm0, DWORD PTR __real@44800000
	movss	DWORD PTR _fDown$[ebp], xmm0

; 50   : 	} else {

	jmp	SHORT $LN7@Draw
$LN8@Draw:

; 51   : 		fDown = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fDown$[ebp], xmm0
$LN7@Draw:

; 52   : 	}
; 53   : 
; 54   : 	if(m_dwBPSUpload != 0) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@Draw

; 55   : 		fUp = (float)m_dwBPSUpload / 1024;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv217[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv217[ebp]
	mov	edx, DWORD PTR tv217[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv221[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv221[ebp]
	divss	xmm0, DWORD PTR __real@44800000
	movss	DWORD PTR _fUp$[ebp], xmm0

; 56   : 	} else {

	jmp	SHORT $LN5@Draw
$LN6@Draw:

; 57   : 		fUp = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fUp$[ebp], xmm0
$LN5@Draw:

; 58   : 	}
; 59   : 
; 60   : 	sprintf(szSvrDispBuf,"Download Rate: %.2f kbps\nUpload Rate: %.2f kbps\n",fDown,fUp);

	cvtss2sd xmm0, DWORD PTR _fUp$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR _fDown$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0DB@FBCEFPND@Download?5Rate?3?5?$CF?42f?5kbps?6Upload?5@
	push	OFFSET ?szSvrDispBuf@@3PADA		; szSvrDispBuf
	call	_sprintf
	add	esp, 24					; 00000018H

; 61   : 	StatisticsToString(&RakServerStats,szSvrStatBuf,1);

	push	1
	push	OFFSET ?szSvrStatBuf@@3PADA		; szSvrStatBuf
	push	OFFSET ?RakServerStats@@3URakNetStatisticsStruct@@A ; RakServerStats
	call	?StatisticsToString@@YAXPAURakNetStatisticsStruct@@PADH@Z ; StatisticsToString
	add	esp, 12					; 0000000cH

; 62   : 	strcat(szSvrDispBuf,szSvrStatBuf);

	push	OFFSET ?szSvrStatBuf@@3PADA		; szSvrStatBuf
	push	OFFSET ?szSvrDispBuf@@3PADA		; szSvrDispBuf
	call	_strcat
	add	esp, 8

; 63   : 
; 64   : 	RECT rect;
; 65   : 	rect.top		= 10;

	mov	DWORD PTR _rect$[ebp+4], 10		; 0000000aH

; 66   : 	rect.right		= pGame->GetScreenWidth() - 150;

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetScreenWidth@CGame@@QAEHXZ		; CGame::GetScreenWidth
	sub	eax, 150				; 00000096H
	mov	DWORD PTR _rect$[ebp+8], eax

; 67   : 	rect.left		= 10;

	mov	DWORD PTR _rect$[ebp], 10		; 0000000aH

; 68   : 	rect.bottom		= rect.top + 16;

	mov	eax, DWORD PTR _rect$[ebp+4]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rect$[ebp+12], eax

; 69   : 
; 70   : 	PCHAR pBuf = szSvrDispBuf;

	mov	DWORD PTR _pBuf$[ebp], OFFSET ?szSvrDispBuf@@3PADA ; szSvrDispBuf

; 71   : 	
; 72   : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0

; 73   : 
; 74   : 	pDefaultFont->RenderText("Server Net Stats (Admin only)",rect,0xFFAA0000);

	push	-5636096				; ffaa0000H
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	OFFSET ??_C@_0BO@FFNPACJN@Server?5Net?5Stats?5?$CIAdmin?5only?$CJ?$AA@
	mov	ecx, DWORD PTR ?pDefaultFont@@3PAVCFontRender@@A ; pDefaultFont
	call	?RenderText@CFontRender@@QAEXPADUtagRECT@@K@Z ; CFontRender::RenderText

; 75   : 	rect.top += 16;

	mov	eax, DWORD PTR _rect$[ebp+4]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rect$[ebp+4], eax

; 76   : 	rect.bottom += 16;

	mov	eax, DWORD PTR _rect$[ebp+12]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rect$[ebp+12], eax
$LN4@Draw:

; 77   : 
; 78   : 	while(*pBuf) {

	mov	eax, DWORD PTR _pBuf$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN3@Draw

; 79   : 		szSvrDrawLine[x] = *pBuf;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pBuf$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR ?szSvrDrawLine@@3PADA[eax], dl

; 80   : 		if(szSvrDrawLine[x] == '\n') {

	mov	eax, DWORD PTR _x$[ebp]
	movsx	ecx, BYTE PTR ?szSvrDrawLine@@3PADA[eax]
	cmp	ecx, 10					; 0000000aH
	jne	$LN2@Draw

; 81   : 			szSvrDrawLine[x] = '\0';

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 1024		; 00000400H
	jae	SHORT $LN12@Draw
	jmp	SHORT $LN13@Draw
$LN12@Draw:
	call	___report_rangecheckfailure
$LN13@Draw:
	mov	ecx, DWORD PTR $T2[ebp]
	mov	BYTE PTR ?szSvrDrawLine@@3PADA[ecx], 0

; 82   : 			pDefaultFont->RenderText(szSvrDrawLine,rect,0xFFFFFFFF);

	push	-1
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _rect$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	push	OFFSET ?szSvrDrawLine@@3PADA		; szSvrDrawLine
	mov	ecx, DWORD PTR ?pDefaultFont@@3PAVCFontRender@@A ; pDefaultFont
	call	?RenderText@CFontRender@@QAEXPADUtagRECT@@K@Z ; CFontRender::RenderText

; 83   : 			rect.top += 16;

	mov	eax, DWORD PTR _rect$[ebp+4]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rect$[ebp+4], eax

; 84   : 			rect.bottom += 16;

	mov	eax, DWORD PTR _rect$[ebp+12]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rect$[ebp+12], eax

; 85   : 			x=0;

	mov	DWORD PTR _x$[ebp], 0

; 86   : 		} else {

	jmp	SHORT $LN1@Draw
$LN2@Draw:

; 87   : 			x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN1@Draw:

; 88   : 		}
; 89   : 		pBuf++;

	mov	eax, DWORD PTR _pBuf$[ebp]
	add	eax, 1
	mov	DWORD PTR _pBuf$[ebp], eax

; 90   : 	}

	jmp	$LN4@Draw
$LN3@Draw:
$LN10@Draw:

; 91   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 600				; 00000258H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@Draw:
	DD	2
	DD	$LN18@Draw
$LN18@Draw:
	DD	-332					; fffffeb4H
	DD	273					; 00000111H
	DD	$LN15@Draw
	DD	-356					; fffffe9cH
	DD	16					; 00000010H
	DD	$LN16@Draw
$LN16@Draw:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN15@Draw:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Draw@CSvrNetStats@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsParams$3[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?Draw@CSvrNetStats@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-604]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Draw@CSvrNetStats@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Draw@CSvrNetStats@@QAEXXZ ENDP				; CSvrNetStats::Draw
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\svrnetstats.cpp
;	COMDAT ??0CSvrNetStats@@QAE@PAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pD3DDevice$ = 8					; size = 4
??0CSvrNetStats@@QAE@PAUIDirect3DDevice9@@@Z PROC	; CSvrNetStats::CSvrNetStats, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 	m_dwLastUpdateTick = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 22   : 	m_dwLastTotalBytesRecv = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 23   : 	m_dwLastTotalBytesSent = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 24   : 	m_dwBPSDownload = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 25   : 	m_dwBPSUpload = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 26   : 	m_pD3DDevice = pD3DDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pD3DDevice$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 27   : 	memset(&RakServerStats,0,sizeof(RakNetStatisticsStruct));

	push	196					; 000000c4H
	push	0
	push	OFFSET ?RakServerStats@@3URakNetStatisticsStruct@@A ; RakServerStats
	call	_memset
	add	esp, 12					; 0000000cH

; 28   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CSvrNetStats@@QAE@PAUIDirect3DDevice9@@@Z ENDP	; CSvrNetStats::CSvrNetStats
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\net\netgame.h
;	COMDAT ?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ PROC ; CNetGame::GetRakClient, COMDAT
; _this$ = ecx

; 103  : 	RakClientInterface * GetRakClient() { return m_pRakClient; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRakClient@CNetGame@@QAEPAVRakClientInterface@@XZ ENDP ; CNetGame::GetRakClient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sampsrc\02xu1\saco\game\game.h
;	COMDAT ?GetScreenWidth@CGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetScreenWidth@CGame@@QAEHXZ PROC			; CGame::GetScreenWidth, COMDAT
; _this$ = ecx

; 152  : 	int GetScreenWidth() { return *(int*)0xC17044; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ds:12677188
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetScreenWidth@CGame@@QAEHXZ ENDP			; CGame::GetScreenWidth
_TEXT	ENDS
END
